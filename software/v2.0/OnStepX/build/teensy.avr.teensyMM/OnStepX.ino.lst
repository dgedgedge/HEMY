
/Users/paulvincent/Library/Caches/arduino/sketches/47A246092F836C850D69A6AD860041C4/OnStepX.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20004ec0 	.word	0x20004ec0
6000142c:	20006ae0 	.word	0x20006ae0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9fe 	bl	60001840 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f99c 	bl	60001850 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fa08 	bl	60001960 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fb7d 	bl	60001c60 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 f91e 	bl	600017ec <analog_init>
	pwm_init();
600015b0:	f000 fb4e 	bl	60001c50 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 fa02 	bl	600019bc <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f944 	bl	60001844 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 fa93 	bl	60001aec <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f93d 	bl	6000184c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f939 	bl	60001848 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fb47 	bl	60001c68 <____libc_init_array_veneer>
	main();
600015da:	f000 fb2d 	bl	60001c38 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00025ea8 	.word	0x00025ea8
600015ec:	60001f00 	.word	0x60001f00
600015f0:	00000000 	.word	0x00000000
600015f4:	20004ec0 	.word	0x20004ec0
600015f8:	60027dac 	.word	0x60027dac
600015fc:	20000000 	.word	0x20000000
60001600:	20004c00 	.word	0x20004c00
60001604:	00018bb5 	.word	0x00018bb5
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00017399 	.word	0x00017399
60001618:	20006340 	.word	0x20006340
6000161c:	0001739d 	.word	0x0001739d
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	20006344 	.word	0x20006344
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaabff 	.word	0xaaaaabff
60001668:	00200007 	.word	0x00200007
6000166c:	20058000 	.word	0x20058000

60001670 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001670:	6943      	ldr	r3, [r0, #20]
60001672:	4a0a      	ldr	r2, [pc, #40]	; (6000169c <TwoWire::configSDApin(unsigned char)+0x2c>)
60001674:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001678:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167a:	7a03      	ldrb	r3, [r0, #8]
6000167c:	4c08      	ldr	r4, [pc, #32]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x30>)
6000167e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001682:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001688:	68c2      	ldr	r2, [r0, #12]
6000168a:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000168c:	6903      	ldr	r3, [r0, #16]
6000168e:	b10b      	cbz	r3, 60001694 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001690:	6942      	ldr	r2, [r0, #20]
60001692:	601a      	str	r2, [r3, #0]
	}
}
60001694:	f85d 4b04 	ldr.w	r4, [sp], #4
60001698:	4770      	bx	lr
6000169a:	bf00      	nop
6000169c:	20002b88 	.word	0x20002b88
600016a0:	0001f861 	.word	0x0001f861

600016a4 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a4:	6943      	ldr	r3, [r0, #20]
600016a6:	7e02      	ldrb	r2, [r0, #24]
600016a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016ac:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b0:	458c      	cmp	ip, r1
600016b2:	d01c      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b4:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016b6:	2aff      	cmp	r2, #255	; 0xff
600016b8:	d019      	beq.n	600016ee <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016ba:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016bc:	b510      	push	{r4, lr}
600016be:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c0:	d016      	beq.n	600016f0 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c2:	7e1a      	ldrb	r2, [r3, #24]
600016c4:	2aff      	cmp	r2, #255	; 0xff
600016c6:	d006      	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016c8:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
600016ce:	6812      	ldr	r2, [r2, #0]
600016d0:	421a      	tst	r2, r3
600016d2:	d101      	bne.n	600016d8 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d4:	7621      	strb	r1, [r4, #24]
}
600016d6:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016d8:	4b06      	ldr	r3, [pc, #24]	; (600016f4 <TwoWire::setSDA(unsigned char)+0x50>)
600016da:	2205      	movs	r2, #5
		configSDApin(newindex);
600016dc:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016de:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e2:	685b      	ldr	r3, [r3, #4]
600016e4:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016e6:	f7ff ffc3 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ea:	7621      	strb	r1, [r4, #24]
600016ec:	e7f3      	b.n	600016d6 <TwoWire::setSDA(unsigned char)+0x32>
600016ee:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f0:	2100      	movs	r1, #0
600016f2:	e7ea      	b.n	600016ca <TwoWire::setSDA(unsigned char)+0x26>
600016f4:	20002b88 	.word	0x20002b88

600016f8 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f8:	6943      	ldr	r3, [r0, #20]
600016fa:	4a0a      	ldr	r2, [pc, #40]	; (60001724 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016fc:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001700:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001702:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
60001706:	4c08      	ldr	r4, [pc, #32]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001708:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000170c:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001710:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001712:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001714:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001716:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001718:	b10b      	cbz	r3, 6000171e <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171a:	6b42      	ldr	r2, [r0, #52]	; 0x34
6000171c:	601a      	str	r2, [r3, #0]
	}
}
6000171e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001722:	4770      	bx	lr
60001724:	20002b88 	.word	0x20002b88
60001728:	0001f861 	.word	0x0001f861

6000172c <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000172c:	6943      	ldr	r3, [r0, #20]
6000172e:	7e42      	ldrb	r2, [r0, #25]
60001730:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001734:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
60001738:	458c      	cmp	ip, r1
6000173a:	d01e      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000173c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001740:	2aff      	cmp	r2, #255	; 0xff
60001742:	d01a      	beq.n	6000177a <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001744:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001746:	b510      	push	{r4, lr}
60001748:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174a:	d017      	beq.n	6000177c <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
6000174c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001750:	2aff      	cmp	r2, #255	; 0xff
60001752:	d006      	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
60001754:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001756:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175a:	6812      	ldr	r2, [r2, #0]
6000175c:	421a      	tst	r2, r3
6000175e:	d101      	bne.n	60001764 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001760:	7661      	strb	r1, [r4, #25]
}
60001762:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001764:	4b06      	ldr	r3, [pc, #24]	; (60001780 <TwoWire::setSCL(unsigned char)+0x54>)
60001766:	2205      	movs	r2, #5
		configSCLpin(newindex);
60001768:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176a:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000176e:	685b      	ldr	r3, [r3, #4]
60001770:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001772:	f7ff ffc1 	bl	600016f8 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
60001776:	7661      	strb	r1, [r4, #25]
60001778:	e7f3      	b.n	60001762 <TwoWire::setSCL(unsigned char)+0x36>
6000177a:	4770      	bx	lr
		if (scl_pin == pin) break;
6000177c:	2100      	movs	r1, #0
6000177e:	e7ea      	b.n	60001756 <TwoWire::setSCL(unsigned char)+0x2a>
60001780:	20002b88 	.word	0x20002b88

60001784 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001784:	4916      	ldr	r1, [pc, #88]	; (600017e0 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001786:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178a:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
6000178e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001792:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001794:	638b      	str	r3, [r1, #56]	; 0x38
{
60001796:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
60001798:	4d12      	ldr	r5, [pc, #72]	; (600017e4 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179a:	e9d2 1300 	ldrd	r1, r3, [r2]
6000179e:	680a      	ldr	r2, [r1, #0]
600017a0:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a2:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a4:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017a6:	2202      	movs	r2, #2
	port->MCR = 0;
600017a8:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017aa:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017ac:	4a0e      	ldr	r2, [pc, #56]	; (600017e8 <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017ae:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b2:	2201      	movs	r2, #1
600017b4:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017b6:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017b8:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017bc:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017be:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c4:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017c6:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c8:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ca:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017cc:	7e01      	ldrb	r1, [r0, #24]
600017ce:	f7ff ff4f 	bl	60001670 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d2:	7e61      	ldrb	r1, [r4, #25]
600017d4:	4620      	mov	r0, r4
}
600017d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017da:	f7ff bf8d 	b.w	600016f8 <TwoWire::configSCLpin(unsigned char)>
600017de:	bf00      	nop
600017e0:	400fc000 	.word	0x400fc000
600017e4:	05050bb8 	.word	0x05050bb8
600017e8:	1928373b 	.word	0x1928373b

600017ec <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017ec:	4b10      	ldr	r3, [pc, #64]	; (60001830 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600017ee:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600017f0:	4a10      	ldr	r2, [pc, #64]	; (60001834 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017f2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600017f4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600017f8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600017fa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600017fc:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001800:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001802:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001806:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001808:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000180a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000180c:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000180e:	061b      	lsls	r3, r3, #24
60001810:	d4fc      	bmi.n	6000180c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001812:	4a09      	ldr	r2, [pc, #36]	; (60001838 <analog_init+0x4c>)
60001814:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001818:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000181a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000181c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000181e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001820:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001824:	d1fb      	bne.n	6000181e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001826:	4a05      	ldr	r2, [pc, #20]	; (6000183c <analog_init+0x50>)
60001828:	7013      	strb	r3, [r2, #0]
}
6000182a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000182e:	4770      	bx	lr
60001830:	400fc000 	.word	0x400fc000
60001834:	400c4000 	.word	0x400c4000
60001838:	400c8000 	.word	0x400c8000
6000183c:	20006aab 	.word	0x20006aab

60001840 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001840:	4770      	bx	lr
60001842:	bf00      	nop

60001844 <startup_default_middle_hook>:
60001844:	4770      	bx	lr
60001846:	bf00      	nop

60001848 <startup_default_late_hook>:
60001848:	4770      	bx	lr
6000184a:	bf00      	nop

6000184c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000184c:	bf00      	nop
6000184e:	4770      	bx	lr

60001850 <configure_cache>:
{
60001850:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001852:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001856:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001858:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000185a:	4831      	ldr	r0, [pc, #196]	; (60001920 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000185c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001860:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001864:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001866:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000186a:	482e      	ldr	r0, [pc, #184]	; (60001924 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000186c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001870:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001872:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001876:	482c      	ldr	r0, [pc, #176]	; (60001928 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001878:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000187c:	4a2b      	ldr	r2, [pc, #172]	; (6000192c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000187e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001882:	4c2b      	ldr	r4, [pc, #172]	; (60001930 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001884:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001888:	482a      	ldr	r0, [pc, #168]	; (60001934 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000188a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000188e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001892:	4c29      	ldr	r4, [pc, #164]	; (60001938 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001894:	4829      	ldr	r0, [pc, #164]	; (6000193c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001896:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000189a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000189e:	4c28      	ldr	r4, [pc, #160]	; (60001940 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600018a0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018a4:	4827      	ldr	r0, [pc, #156]	; (60001944 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018a6:	4a28      	ldr	r2, [pc, #160]	; (60001948 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600018a8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600018ac:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600018b0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018b4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018b8:	4c24      	ldr	r4, [pc, #144]	; (6000194c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018ba:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018bc:	4824      	ldr	r0, [pc, #144]	; (60001950 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600018be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600018c2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018c6:	4a23      	ldr	r2, [pc, #140]	; (60001954 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600018c8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018cc:	4c22      	ldr	r4, [pc, #136]	; (60001958 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600018ce:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018d2:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600018d6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018da:	4820      	ldr	r0, [pc, #128]	; (6000195c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018e0:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600018e2:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600018e6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600018ea:	bf00      	nop
	asm("nop");
600018ec:	bf00      	nop
	asm("nop");
600018ee:	bf00      	nop
	asm("nop");
600018f0:	bf00      	nop
	asm("nop");
600018f2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018f4:	2201      	movs	r2, #1
600018f6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018fe:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001902:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001906:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000190a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000190e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001912:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001916:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000191a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000191e:	4770      	bx	lr
60001920:	1000003f 	.word	0x1000003f
60001924:	07080025 	.word	0x07080025
60001928:	00100009 	.word	0x00100009
6000192c:	20006ae0 	.word	0x20006ae0
60001930:	00200013 	.word	0x00200013
60001934:	07020021 	.word	0x07020021
60001938:	20000014 	.word	0x20000014
6000193c:	13080025 	.word	0x13080025
60001940:	10000009 	.word	0x10000009
60001944:	20200016 	.word	0x20200016
60001948:	130b0027 	.word	0x130b0027
6000194c:	40000017 	.word	0x40000017
60001950:	60000018 	.word	0x60000018
60001954:	070b002f 	.word	0x070b002f
60001958:	70000019 	.word	0x70000019
6000195c:	8000001a 	.word	0x8000001a

60001960 <usb_pll_start>:
{
60001960:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001962:	4a15      	ldr	r2, [pc, #84]	; (600019b8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001964:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001966:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000196a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000196e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001972:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001976:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000197a:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000197c:	f013 0f02 	tst.w	r3, #2
60001980:	d10e      	bne.n	600019a0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001982:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001986:	d00f      	beq.n	600019a8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001988:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000198c:	d00e      	beq.n	600019ac <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000198e:	2b00      	cmp	r3, #0
60001990:	daf3      	bge.n	6000197a <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001992:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001996:	d10b      	bne.n	600019b0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001998:	065b      	lsls	r3, r3, #25
6000199a:	d50b      	bpl.n	600019b4 <usb_pll_start+0x54>
}
6000199c:	bcf0      	pop	{r4, r5, r6, r7}
6000199e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600019a0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600019a2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600019a4:	6190      	str	r0, [r2, #24]
			continue;
600019a6:	e7e8      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600019a8:	6155      	str	r5, [r2, #20]
			continue;
600019aa:	e7e6      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600019ac:	6156      	str	r6, [r2, #20]
			continue;
600019ae:	e7e4      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600019b0:	6191      	str	r1, [r2, #24]
			continue;
600019b2:	e7e2      	b.n	6000197a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600019b4:	6157      	str	r7, [r2, #20]
			continue;
600019b6:	e7e0      	b.n	6000197a <usb_pll_start+0x1a>
600019b8:	400d8000 	.word	0x400d8000

600019bc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019bc:	4a3f      	ldr	r2, [pc, #252]	; (60001abc <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600019be:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600019c0:	493f      	ldr	r1, [pc, #252]	; (60001ac0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019c2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019ca:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019ce:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001ac4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019d2:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600019d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001ac8 <tempmon_init+0x10c>
{
600019da:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600019dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600019e0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
600019e4:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600019e8:	4d38      	ldr	r5, [pc, #224]	; (60001acc <tempmon_init+0x110>)
600019ea:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019ec:	4c38      	ldr	r4, [pc, #224]	; (60001ad0 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019ee:	4839      	ldr	r0, [pc, #228]	; (60001ad4 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600019f0:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019f2:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600019f6:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600019f8:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600019fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001a00:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a04:	ee07 1a10 	vmov	s14, r1
60001a08:	4b33      	ldr	r3, [pc, #204]	; (60001ad8 <tempmon_init+0x11c>)
60001a0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001a0e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a14:	4931      	ldr	r1, [pc, #196]	; (60001adc <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a16:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a1a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a1e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a22:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a26:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001a2a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a2e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a32:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a36:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001a3a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a3e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001a42:	4827      	ldr	r0, [pc, #156]	; (60001ae0 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a44:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a48:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a4c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001a50:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a54:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a58:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a5c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a60:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a64:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a6c:	ee16 3a10 	vmov	r3, s12
60001a70:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a78:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001a7c:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001a7e:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001a82:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001a8a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001a8e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001a90:	4914      	ldr	r1, [pc, #80]	; (60001ae4 <tempmon_init+0x128>)
60001a92:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001a96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001a9a:	f043 0302 	orr.w	r3, r3, #2
60001a9e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001aa2:	4b11      	ldr	r3, [pc, #68]	; (60001ae8 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001aa4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001aa8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001aac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001ab0:	2201      	movs	r2, #1
}
60001ab2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ab4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001ab8:	4770      	bx	lr
60001aba:	bf00      	nop
60001abc:	400d8100 	.word	0x400d8100
60001ac0:	401f4400 	.word	0x401f4400
60001ac4:	42aa0000 	.word	0x42aa0000
60001ac8:	42b40000 	.word	0x42b40000
60001acc:	20006268 	.word	0x20006268
60001ad0:	20006264 	.word	0x20006264
60001ad4:	2000626c 	.word	0x2000626c
60001ad8:	20006270 	.word	0x20006270
60001adc:	0fff0000 	.word	0x0fff0000
60001ae0:	e000e400 	.word	0xe000e400
60001ae4:	20004c00 	.word	0x20004c00
60001ae8:	00018d9d 	.word	0x00018d9d

60001aec <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001aec:	4b31      	ldr	r3, [pc, #196]	; (60001bb4 <usb_init+0xc8>)
60001aee:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001af2:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001af4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001af8:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001afc:	f000 f8a4 	bl	60001c48 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001b00:	4a2d      	ldr	r2, [pc, #180]	; (60001bb8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001b02:	492e      	ldr	r1, [pc, #184]	; (60001bbc <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001b04:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001b08:	482d      	ldr	r0, [pc, #180]	; (60001bc0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001b0a:	f043 0303 	orr.w	r3, r3, #3
60001b0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001b12:	4b2c      	ldr	r3, [pc, #176]	; (60001bc4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001b14:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001b18:	6802      	ldr	r2, [r0, #0]
60001b1a:	421a      	tst	r2, r3
60001b1c:	d103      	bne.n	60001b26 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001b1e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001b22:	079a      	lsls	r2, r3, #30
60001b24:	d01b      	beq.n	60001b5e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001b26:	4a25      	ldr	r2, [pc, #148]	; (60001bbc <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001b28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001b2c:	4b24      	ldr	r3, [pc, #144]	; (60001bc0 <usb_init+0xd4>)
60001b2e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001b30:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001b34:	f043 0302 	orr.w	r3, r3, #2
60001b38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001b3c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001b40:	079b      	lsls	r3, r3, #30
60001b42:	d4fb      	bmi.n	60001b3c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001b44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001b48:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001b4c:	4b1c      	ldr	r3, [pc, #112]	; (60001bc0 <usb_init+0xd4>)
60001b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001b52:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001b56:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001b58:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001b5a:	f000 f871 	bl	60001c40 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b5e:	4a18      	ldr	r2, [pc, #96]	; (60001bc0 <usb_init+0xd4>)
60001b60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b64:	4c15      	ldr	r4, [pc, #84]	; (60001bbc <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001b66:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001b68:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b6a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b6c:	4b16      	ldr	r3, [pc, #88]	; (60001bc8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001b6e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b70:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001b74:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b78:	4618      	mov	r0, r3
60001b7a:	f000 f86d 	bl	60001c58 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001b7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001b82:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b84:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b88:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001b8c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001b8e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001b92:	641a      	str	r2, [r3, #64]	; 0x40
60001b94:	4b0d      	ldr	r3, [pc, #52]	; (60001bcc <usb_init+0xe0>)
60001b96:	4a0e      	ldr	r2, [pc, #56]	; (60001bd0 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001b98:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001b9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ba0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ba4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ba8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001baa:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001bae:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001bb2:	bd10      	pop	{r4, pc}
60001bb4:	400d8000 	.word	0x400d8000
60001bb8:	400fc000 	.word	0x400fc000
60001bbc:	402e0000 	.word	0x402e0000
60001bc0:	400d9000 	.word	0x400d9000
60001bc4:	001e1c00 	.word	0x001e1c00
60001bc8:	20000000 	.word	0x20000000
60001bcc:	20004c00 	.word	0x20004c00
60001bd0:	00018f85 	.word	0x00018f85

60001bd4 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001bd4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001bd6:	4b0e      	ldr	r3, [pc, #56]	; (60001c10 <_reboot_Teensyduino_+0x3c>)
60001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001bda:	079b      	lsls	r3, r3, #30
60001bdc:	d400      	bmi.n	60001be0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001bde:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001be0:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001be2:	4b0c      	ldr	r3, [pc, #48]	; (60001c14 <_reboot_Teensyduino_+0x40>)
60001be4:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001be6:	4a0c      	ldr	r2, [pc, #48]	; (60001c18 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001be8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001bec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001bf0:	490a      	ldr	r1, [pc, #40]	; (60001c1c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001bf2:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001bf6:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001bf8:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001bfa:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001bfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001c02:	4807      	ldr	r0, [pc, #28]	; (60001c20 <_reboot_Teensyduino_+0x4c>)
60001c04:	4a07      	ldr	r2, [pc, #28]	; (60001c24 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001c06:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001c08:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001c0a:	689b      	ldr	r3, [r3, #8]
60001c0c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001c0e:	bf00      	nop
60001c10:	401f4400 	.word	0x401f4400
60001c14:	402e0000 	.word	0x402e0000
60001c18:	400ac000 	.word	0x400ac000
60001c1c:	00200003 	.word	0x00200003
60001c20:	20208000 	.word	0x20208000
60001c24:	eb120000 	.word	0xeb120000

60001c28 <_init>:
60001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001c2a:	bf00      	nop
60001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001c2e:	bc08      	pop	{r3}
60001c30:	469e      	mov	lr, r3
60001c32:	4770      	bx	lr
60001c34:	0000      	movs	r0, r0
	...

60001c38 <__main_veneer>:
60001c38:	f85f f000 	ldr.w	pc, [pc]	; 60001c3c <__main_veneer+0x4>
60001c3c:	000184bd 	.word	0x000184bd

60001c40 <__delay_veneer>:
60001c40:	f85f f000 	ldr.w	pc, [pc]	; 60001c44 <__delay_veneer+0x4>
60001c44:	00018189 	.word	0x00018189

60001c48 <__usb_init_serialnumber_veneer>:
60001c48:	f85f f000 	ldr.w	pc, [pc]	; 60001c4c <__usb_init_serialnumber_veneer+0x4>
60001c4c:	000196f5 	.word	0x000196f5

60001c50 <__pwm_init_veneer>:
60001c50:	f85f f000 	ldr.w	pc, [pc]	; 60001c54 <__pwm_init_veneer+0x4>
60001c54:	00018a39 	.word	0x00018a39

60001c58 <__memset_veneer>:
60001c58:	f85f f000 	ldr.w	pc, [pc]	; 60001c5c <__memset_veneer+0x4>
60001c5c:	0001f1f1 	.word	0x0001f1f1

60001c60 <__set_arm_clock_veneer>:
60001c60:	f85f f000 	ldr.w	pc, [pc]	; 60001c64 <__set_arm_clock_veneer+0x4>
60001c64:	00017e99 	.word	0x00017e99

60001c68 <____libc_init_array_veneer>:
60001c68:	f85f f000 	ldr.w	pc, [pc]	; 60001c6c <____libc_init_array_veneer+0x4>
60001c6c:	0001fd19 	.word	0x0001fd19

60001c70 <__frame_dummy_init_array_entry>:
60001c70:	00000105 0000021d 000050ed 000054b5     .........P...T..
60001c80:	00006535 00006795 00006e5d 00007a65     5e...g..]n..ez..
60001c90:	00007a71 00009539 0000bb45 0000e04d     qz..9...E...M...
60001ca0:	0000fad1 000117c9 00011e65 00012b11     ........e....+..
60001cb0:	00014019 00017cf1                       .@...|..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autograd	( bool    B ) { PWMCONF_register.pwm_autograd = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::freewheel		( uint8_t B ) { PWMCONF_register.freewheel = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_reg		( uint8_t B ) { PWMCONF_register.pwm_reg = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_lim		( uint8_t B ) { PWMCONF_register.pwm_lim = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// starts keeping track of the wait once (PPS is synced, if applicable) and GPS has a lock 
bool TlsGPS::waitIsValid() {
  if (startTime == 0) startTime = millis();
  unsigned long t = millis() - startTime;
  return (t/1000UL)/60UL >= GPS_MIN_WAIT_MINUTES;
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
uint32_t TMC2208Stepper::GCONF() {
	return read(GCONF_register.address);
}
void TMC2208Stepper::GCONF(uint32_t input) {
	GCONF_register.sr = input;
	write(GCONF_register.address, GCONF_register.sr);
      26:	699d      	ldr	r5, [r3, #24]
}

// goto to equatorial target position (Native coordinate system) using the defaut preferredPierSide
CommandError Goto::request() {
  return request(target, settings.preferredPierSide);
}
      28:	695a      	ldr	r2, [r3, #20]
      2a:	4015      	ands	r5, r2
      VLF("MSG: Mount, PEC recording stopped");
      settings.state = PEC_NONE;
      rate = 0.0F;
    } 
    // get ready to re-index when tracking comes back
    if (settings.state == PEC_PLAY) {
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x24>
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0x9e>)
  char s[8];
  sprintf(s, "%02X", j);
  V(s);
  for (uint16_t i = 0; i < size; i++) write(i, (char)j);
  VL("");
}
      30:	2601      	movs	r6, #1
      32:	619d      	str	r5, [r3, #24]
	return read(CHOPCONF_register.address);
}
void TMC2208Stepper::toff	( uint8_t  B )	{ SET_REG(toff); 	}
void TMC2208Stepper::hstrt	( uint8_t  B )	{ SET_REG(hstrt); 	}
void TMC2208Stepper::hend	( uint8_t  B )	{ SET_REG(hend); 	}
void TMC2208Stepper::tbl	( uint8_t  B )	{ SET_REG(tbl); 	}
      34:	fa95 f4a5 	rbit	r4, r5
      38:	fab4 f484 	clz	r4, r4
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
  #if GOTO_FEATURE == ON
    float rateLimit = radToDegF(goTo.rate)*120.0F;
    if (rate > rateLimit) rate = rateLimit;
  #endif
  return rate;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
void CommandProcessor::appendChecksum(char *s) {
  char HEXS[3] = "";
  uint8_t cks = 0; for (unsigned int cksCount0 = 0; cksCount0 < strlen(s); cksCount0++) { cks += s[cksCount0]; }
  sprintf(HEXS, "%02X", cks);
  strcat(s, HEXS);
}
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xe>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa2>)
    cat = (int16_t)work.libRec.code >> 4;
    if (work.libRec.name[0] != '$' && cat == catalog) c++;
  }
  
  return c;
}
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4a>
	if(sdoff() == 1) {
		DRVCTRL_1_register.sr = data;
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
	} else {
		DRVCTRL_0_register.sr = data;
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa6>)
      56:	2601      	movs	r6, #1
  xmit_result[i] = 0;
  while (xmit_buffer[xmit_index] != 0) {
    xmit_result[i++] = xmit_buffer[xmit_index++];
    xmit_index &= 0b1111111;
  }
  xmit_result[i] = 0; 
      58:	619d      	str	r5, [r3, #24]

  #ifdef ESP32
    xSemaphoreGive(mutex);
  #endif
  return xmit_result;
}
      5a:	fa95 f4a5 	rbit	r4, r5

double Transform::backInRads2(double angle) {
  while (angle >= Deg180) angle -= Deg360;
  while (angle < -Deg180) angle += Deg360;
  return angle;
}
      5e:	fab4 f484 	clz	r4, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
      6a:	4798      	blx	r3

// convert from unwrapped (full range) to normal (+/- wrapAmount) coordinate
double Axis::wrap(double value) {
  if (wrapEnabled) {
    while (value > settings.limits.max) value -= wrapAmount;
    while (value < settings.limits.min) value += wrapAmount;
      6c:	43a5      	bics	r5, r4
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x34>
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xaa>)
      72:	699d      	ldr	r5, [r3, #24]
}

// get target coordinate, in "measures" (degrees, microns, etc.)
double Axis::getTargetCoordinate() {
  return wrap(motor->getTargetCoordinateSteps()/settings.stepsPerMeasure);
}
      74:	695a      	ldr	r2, [r3, #20]
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x70>
  }
  if (settings.pastMeridianW < -Deg360) {
    settings.pastMeridianW = -Deg360;
    DLF("WRN: Limits::init(), pastMeridianW < -360 deg setting to -360 deg");
  }
}
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xae>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
}
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
  }
  if (reverseState) { if (value == LOW) value = HIGH; else value = LOW; }
  bool result = lastChangedValue != value;
  lastChangedValue = value;
  return result;
}
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5a>
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb2>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x96>
void Task::setFrequency(float freq) {
  if (freq > 0.0F) {
    freq = 1.0F / freq;            // seconds per call
    float f = freq * 16000000.0F;  // sub-micros per call
    if (f <= 4294967295.0F) {
      setPeriod(lroundf(f), PU_SUB_MICROS);
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb6>)
      a2:	2601      	movs	r6, #1
  rms_current(mA);
}

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
		} while (n > 0);
      aa:	fab4 f484 	clz	r4, r4
  wire->requestFrom(eepromAddress, (uint8_t)1);

  uint8_t result = 0;
  if (wire->available()) result = wire->read();
  return result;
}
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      b2:	fa06 f404 	lsl.w	r4, r6, r4
      b6:	4798      	blx	r3
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x80>
      bc:	f3bf 8f4f 	dsb	sy
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20004414 	.word	0x20004414
      c8:	42004000 	.word	0x42004000
      cc:	20004494 	.word	0x20004494
      d0:	42008000 	.word	0x42008000
      d4:	20004514 	.word	0x20004514
      d8:	4200c000 	.word	0x4200c000
      dc:	20004594 	.word	0x20004594

000000e0 <register_tm_clones>:

// alternate tracking rate calculation method
float Mount::ztr(float a) {
  if (a > degToRadF(89.8F)) return 0.99998667F; else if (a > degToRadF(89.5F)) return 0.99996667F;

  float altH = a + degToRadF(0.25F); if (altH < 0.0F) altH = 0.0F;
      e0:	4805      	ldr	r0, [pc, #20]	; (f8 <register_tm_clones+0x18>)
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <register_tm_clones+0x1c>)
      e4:	1a1b      	subs	r3, r3, r0
      e6:	0fd9      	lsrs	r1, r3, #31
      e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      ec:	1049      	asrs	r1, r1, #1
      ee:	d002      	beq.n	f6 <register_tm_clones+0x16>

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
	uint8_t crc = 0;
	for (uint8_t i = 0; i < len; i++) {
		uint8_t currentByte = datagram[i];
		for (uint8_t j = 0; j < 8; j++) {
      f0:	4b03      	ldr	r3, [pc, #12]	; (100 <register_tm_clones+0x20>)
	for (uint8_t i = 0; i < len; i++) {
      f2:	b103      	cbz	r3, f6 <register_tm_clones+0x16>
      f4:	4718      	bx	r3
		uint8_t currentByte = datagram[i];
      f6:	4770      	bx	lr
      f8:	20004ec0 	.word	0x20004ec0
			static_cast<uint8_t>(out>>16),
			static_cast<uint8_t>(out>> 8),
			static_cast<uint8_t>(out>> 0)
		};
		uint8_t crc = calcCRC(out_datagram, 7);
		if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
      fc:	20004ec0 	.word	0x20004ec0
     100:	00000000 	.word	0x00000000

00000104 <frame_dummy>:
	for (uint8_t i = 0; i < max_retries; i++) {
     104:	b508      	push	{r3, lr}
			CRCerror = true;
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <frame_dummy+0x18>)
	for (uint8_t i = 0; i < max_retries; i++) {
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4905      	ldr	r1, [pc, #20]	; (120 <frame_dummy+0x1c>)
			break;
		}
	}

	return out>>8;
}
     10c:	4805      	ldr	r0, [pc, #20]	; (124 <frame_dummy+0x20>)
     10e:	f3af 8000 	nop.w
     112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return out>>8;
     116:	f7ff bfe3 	b.w	e0 <register_tm_clones>
	uint16_t *p, *end;
	uint8_t olddata=0xFF;
	uint8_t buf[256];

	if (addr > E2END) return;
	if (!initialized) eeprom_initialize();
     11a:	bf00      	nop
     11c:	00000000 	.word	0x00000000
	uint8_t olddata=0xFF;
     120:	20005e90 	.word	0x20005e90
     124:	6002dc00 	.word	0x6002dc00

00000128 <sensesPoll()>:
void systemServices() {
  if (!xBusy) nv.poll(false);
}

void sensesPoll() {
  sense.poll();
     128:	4801      	ldr	r0, [pc, #4]	; (130 <sensesPoll()+0x8>)
     12a:	f005 b9ad 	b.w	5488 <Sense::poll()>
     12e:	bf00      	nop
     130:	200062f8 	.word	0x200062f8

00000134 <systemServices()>:
  if (!xBusy) nv.poll(false);
     134:	4b03      	ldr	r3, [pc, #12]	; (144 <systemServices()+0x10>)
     136:	7819      	ldrb	r1, [r3, #0]
     138:	b101      	cbz	r1, 13c <systemServices()+0x8>
}
     13a:	4770      	bx	lr
  if (!xBusy) nv.poll(false);
     13c:	4802      	ldr	r0, [pc, #8]	; (148 <systemServices()+0x14>)
     13e:	f004 bcd7 	b.w	4af0 <NonVolatileStorage::poll(bool)>
     142:	bf00      	nop
     144:	20006aba 	.word	0x20006aba
     148:	20005e50 	.word	0x20005e50

0000014c <setup>:
}

void setup() {
     14c:	b530      	push	{r4, r5, lr}
static inline void analogReadResolution(unsigned int bits) { analogReadRes(bits); }
     14e:	200a      	movs	r0, #10
     150:	b085      	sub	sp, #20
     152:	f017 fe71 	bl	17e38 <analogReadRes>
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
     156:	200d      	movs	r0, #13
     158:	f018 fce8 	bl	18b2c <analogWriteRes>
  VF("MSG: OnStepX, pinmap "); VLF(PINMAP_STR);

  // start low level hardware
  VLF("MSG: Setup, HAL initialize");
  HAL_INIT();
  if (!HAL_NV_INIT()) {
     15c:	4c21      	ldr	r4, [pc, #132]	; (1e4 <setup+0x98>)
     15e:	2150      	movs	r1, #80	; 0x50
     160:	4a21      	ldr	r2, [pc, #132]	; (1e8 <setup+0x9c>)
     162:	2300      	movs	r3, #0
     164:	4620      	mov	r0, r4
     166:	e9cd 2101 	strd	r2, r1, [sp, #4]
     16a:	9300      	str	r3, [sp, #0]
     16c:	2201      	movs	r2, #1
     16e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     172:	f005 f859 	bl	5228 <NonVolatileStorageMB85RC::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)>
     176:	b908      	cbnz	r0, 17c <setup+0x30>
    DLF("WRN: Setup, NV (EEPROM/FRAM/FlashMem/etc.) device not found!");
    nv.initError = true;
     178:	2301      	movs	r3, #1
     17a:	71a3      	strb	r3, [r4, #6]
  }
  delay(2000);
     17c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0

  // start system service task
  VF("MSG: Setup, start system service task (rate 10ms priority 7)... ");
  // add task for system services, runs at 10ms intervals so commiting 1KB of NV takes about 10 seconds
  // the cache is scanned (for writing) at 2000 bytes/second but can be slower while reading data into the cache at startup
  if (tasks.add(10, 0, true, 7, systemServices, "SysSvcs")) { VLF("success"); } else { VLF("FAILED!"); }
     180:	2407      	movs	r4, #7
  delay(2000);
     182:	f018 f801 	bl	18188 <delay>
  if (tasks.add(10, 0, true, 7, systemServices, "SysSvcs")) { VLF("success"); } else { VLF("FAILED!"); }
     186:	4819      	ldr	r0, [pc, #100]	; (1ec <setup+0xa0>)
     188:	4919      	ldr	r1, [pc, #100]	; (1f0 <setup+0xa4>)
     18a:	2301      	movs	r3, #1
     18c:	9400      	str	r4, [sp, #0]
     18e:	2200      	movs	r2, #0

  // start input sense polling task
  int pollingRate = round((1000.0F/HAL_FRACTIONAL_SEC)/2.0F);
  if (pollingRate < 1) pollingRate = 1;
  VF("MSG: Setup, start input sense polling task (rate "); V(pollingRate); VF("ms priority 7)... ");
  if (tasks.add(pollingRate, 0, true, 7, sensesPoll, "SenPoll")) { VLF("success"); } else { VLF("FAILED!"); }
     190:	4d18      	ldr	r5, [pc, #96]	; (1f4 <setup+0xa8>)
  if (tasks.add(10, 0, true, 7, systemServices, "SysSvcs")) { VLF("success"); } else { VLF("FAILED!"); }
     192:	e9cd 1001 	strd	r1, r0, [sp, #4]
     196:	210a      	movs	r1, #10
     198:	4817      	ldr	r0, [pc, #92]	; (1f8 <setup+0xac>)
     19a:	f006 f81f 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  if (tasks.add(pollingRate, 0, true, 7, sensesPoll, "SenPoll")) { VLF("success"); } else { VLF("FAILED!"); }
     19e:	2301      	movs	r3, #1
     1a0:	4816      	ldr	r0, [pc, #88]	; (1fc <setup+0xb0>)
     1a2:	2200      	movs	r2, #0
     1a4:	4619      	mov	r1, r3
     1a6:	9400      	str	r4, [sp, #0]

  // start telescope object
  telescope.init(FirmwareName, FirmwareVersionMajor, FirmwareVersionMinor, FirmwareVersionPatch, FirmwareVersionConfig);
     1a8:	4c15      	ldr	r4, [pc, #84]	; (200 <setup+0xb4>)
  if (tasks.add(pollingRate, 0, true, 7, sensesPoll, "SenPoll")) { VLF("success"); } else { VLF("FAILED!"); }
     1aa:	e9cd 0501 	strd	r0, r5, [sp, #4]
     1ae:	4812      	ldr	r0, [pc, #72]	; (1f8 <setup+0xac>)
     1b0:	f006 f814 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  telescope.init(FirmwareName, FirmwareVersionMajor, FirmwareVersionMinor, FirmwareVersionPatch, FirmwareVersionConfig);
     1b4:	2006      	movs	r0, #6
     1b6:	4913      	ldr	r1, [pc, #76]	; (204 <setup+0xb8>)
     1b8:	2319      	movs	r3, #25
     1ba:	220a      	movs	r2, #10
     1bc:	e9cd 1000 	strd	r1, r0, [sp]
     1c0:	4620      	mov	r0, r4
     1c2:	4911      	ldr	r1, [pc, #68]	; (208 <setup+0xbc>)
     1c4:	f007 fb94 	bl	78f0 <Telescope::init(char const*, int, int, char const*, int)>

  // start command channel tasks
  commandChannelInit();
     1c8:	f006 fdf2 	bl	6db0 <commandChannelInit()>

  tasks.yield(2000);
     1cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
     1d0:	4809      	ldr	r0, [pc, #36]	; (1f8 <setup+0xac>)
     1d2:	f006 f989 	bl	64e8 <Tasks::yield(unsigned long)>
  // start task manager debug events
  #if DEBUG == PROFILER
    tasks.add(142, 0, true, 7, profiler, "Profilr");
  #endif

  sense.poll();
     1d6:	480d      	ldr	r0, [pc, #52]	; (20c <setup+0xc0>)
     1d8:	f005 f956 	bl	5488 <Sense::poll()>

  telescope.ready = true;
     1dc:	2301      	movs	r3, #1
     1de:	7023      	strb	r3, [r4, #0]
}
     1e0:	b005      	add	sp, #20
     1e2:	bd30      	pop	{r4, r5, pc}
     1e4:	20005e50 	.word	0x20005e50
     1e8:	20003858 	.word	0x20003858
     1ec:	20002fd4 	.word	0x20002fd4
     1f0:	00000135 	.word	0x00000135
     1f4:	20002fdc 	.word	0x20002fdc
     1f8:	2000634c 	.word	0x2000634c
     1fc:	00000129 	.word	0x00000129
     200:	20006464 	.word	0x20006464
     204:	20002124 	.word	0x20002124
     208:	20002fe4 	.word	0x20002fe4
     20c:	200062f8 	.word	0x200062f8

00000210 <loop>:

void loop() {
  tasks.yield();
     210:	4801      	ldr	r0, [pc, #4]	; (218 <loop+0x8>)
     212:	f006 b915 	b.w	6440 <Tasks::yield()>
     216:	bf00      	nop
     218:	2000634c 	.word	0x2000634c

0000021c <_GLOBAL__sub_I_nv>:
#pragma once

#include <Arduino.h>
#include <Wire.h>

class NonVolatileStorage {
     21c:	4b0b      	ldr	r3, [pc, #44]	; (24c <_GLOBAL__sub_I_nv+0x30>)
     21e:	2200      	movs	r2, #0
     220:	480b      	ldr	r0, [pc, #44]	; (250 <_GLOBAL__sub_I_nv+0x34>)
#pragma once

#include <Arduino.h>
#include "NV.h"

class NonVolatileStorageMB85RC : public NonVolatileStorage {
     222:	490c      	ldr	r1, [pc, #48]	; (254 <_GLOBAL__sub_I_nv+0x38>)
}
     224:	b410      	push	{r4}
     226:	2401      	movs	r4, #1
     228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     22c:	809a      	strh	r2, [r3, #4]
     22e:	719a      	strb	r2, [r3, #6]
     230:	821a      	strh	r2, [r3, #16]
     232:	831a      	strh	r2, [r3, #24]
     234:	849a      	strh	r2, [r3, #36]	; 0x24
     236:	631a      	str	r2, [r3, #48]	; 0x30
     238:	6019      	str	r1, [r3, #0]
     23a:	63da      	str	r2, [r3, #60]	; 0x3c
     23c:	e9c3 4002 	strd	r4, r0, [r3, #8]
     240:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
     244:	f85d 4b04 	ldr.w	r4, [sp], #4
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	20005e50 	.word	0x20005e50
     250:	ffff0000 	.word	0xffff0000
     254:	20002640 	.word	0x20002640

00000258 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]>:

  return true;
}

// convert axis settings string into numeric form
bool Axis::decodeAxisSettings(char *s, AxisStoredSettings &a) {
     258:	b530      	push	{r4, r5, lr}
     25a:	b085      	sub	sp, #20
     25c:	460c      	mov	r4, r1
     25e:	4605      	mov	r5, r0
  if (strcmp(s, "0") != 0) {
    char *ws = s;
    char *conv_end; 
    double f = strtod(ws, &conv_end);
     260:	a903      	add	r1, sp, #12
     262:	f01e fd85 	bl	1ed70 <strtod>
    if (&s[0] != conv_end) a.stepsPerMeasure = f; else return false;
     266:	9903      	ldr	r1, [sp, #12]
     268:	428d      	cmp	r5, r1
     26a:	f000 8092 	beq.w	392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
    ws = strchr(ws, ','); if (ws != NULL) {
     26e:	212c      	movs	r1, #44	; 0x2c
     270:	4628      	mov	r0, r5
     272:	ec53 2b10 	vmov	r2, r3, d0
    if (&s[0] != conv_end) a.stepsPerMeasure = f; else return false;
     276:	6022      	str	r2, [r4, #0]
     278:	6063      	str	r3, [r4, #4]
    ws = strchr(ws, ','); if (ws != NULL) {
     27a:	f01f f82b 	bl	1f2d4 <strchr>
     27e:	2800      	cmp	r0, #0
     280:	f000 8087 	beq.w	392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
      ws++; a.reverse = atol(ws);
     284:	1c45      	adds	r5, r0, #1
     286:	4628      	mov	r0, r5
     288:	f01d f97c 	bl	1d584 <atol>
     28c:	4603      	mov	r3, r0
      ws = strchr(ws, ','); if (ws != NULL) {
     28e:	212c      	movs	r1, #44	; 0x2c
     290:	4628      	mov	r0, r5
      ws++; a.reverse = atol(ws);
     292:	7223      	strb	r3, [r4, #8]
      ws = strchr(ws, ','); if (ws != NULL) {
     294:	f01f f81e 	bl	1f2d4 <strchr>
     298:	2800      	cmp	r0, #0
     29a:	d07a      	beq.n	392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
        ws++; a.limits.min = atol(ws);
     29c:	1c45      	adds	r5, r0, #1
     29e:	4628      	mov	r0, r5
     2a0:	f01d f970 	bl	1d584 <atol>
     2a4:	ee07 0a90 	vmov	s15, r0
        ws = strchr(ws, ','); if (ws != NULL) {
     2a8:	212c      	movs	r1, #44	; 0x2c
     2aa:	4628      	mov	r0, r5
        ws++; a.limits.min = atol(ws);
     2ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     2b0:	ee17 3a90 	vmov	r3, s15
     2b4:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
        ws = strchr(ws, ','); if (ws != NULL) {
     2b8:	f01f f80c 	bl	1f2d4 <strchr>
     2bc:	2800      	cmp	r0, #0
     2be:	d068      	beq.n	392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
          ws++; a.limits.max = atol(ws);
     2c0:	1c45      	adds	r5, r0, #1
     2c2:	4628      	mov	r0, r5
     2c4:	f01d f95e 	bl	1d584 <atol>
     2c8:	ee07 0a90 	vmov	s15, r0
          ws = strchr(ws, ','); if (ws != NULL) {
     2cc:	212c      	movs	r1, #44	; 0x2c
     2ce:	4628      	mov	r0, r5
          ws++; a.limits.max = atol(ws);
     2d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     2d4:	ee17 3a90 	vmov	r3, s15
     2d8:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
          ws = strchr(ws, ','); if (ws != NULL) {
     2dc:	f01e fffa 	bl	1f2d4 <strchr>
     2e0:	2800      	cmp	r0, #0
     2e2:	d056      	beq.n	392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
            ws++; a.param1 = atof(ws);
     2e4:	3001      	adds	r0, #1
     2e6:	9001      	str	r0, [sp, #4]
     2e8:	f01d f948 	bl	1d57c <atof>
     2ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
            ws = strchr(ws, ','); if (ws != NULL) {
     2f0:	212c      	movs	r1, #44	; 0x2c
     2f2:	9801      	ldr	r0, [sp, #4]
            ws++; a.param1 = atof(ws);
     2f4:	ee10 3a10 	vmov	r3, s0
     2f8:	f8c4 3009 	str.w	r3, [r4, #9]
            ws = strchr(ws, ','); if (ws != NULL) {
     2fc:	f01e ffea 	bl	1f2d4 <strchr>
     300:	2800      	cmp	r0, #0
     302:	d046      	beq.n	392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
              ws++; a.param2 = atof(ws);
     304:	3001      	adds	r0, #1
     306:	9001      	str	r0, [sp, #4]
     308:	f01d f938 	bl	1d57c <atof>
     30c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
              ws = strchr(ws, ','); if (ws != NULL) {
     310:	212c      	movs	r1, #44	; 0x2c
     312:	9801      	ldr	r0, [sp, #4]
              ws++; a.param2 = atof(ws);
     314:	ee10 3a10 	vmov	r3, s0
     318:	f8c4 300d 	str.w	r3, [r4, #13]
              ws = strchr(ws, ','); if (ws != NULL) {
     31c:	f01e ffda 	bl	1f2d4 <strchr>
     320:	b3b8      	cbz	r0, 392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
                ws++; a.param3 = atof(ws);
     322:	3001      	adds	r0, #1
     324:	9001      	str	r0, [sp, #4]
     326:	f01d f929 	bl	1d57c <atof>
     32a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
                ws = strchr(ws, ','); if (ws != NULL) {
     32e:	212c      	movs	r1, #44	; 0x2c
     330:	9801      	ldr	r0, [sp, #4]
                ws++; a.param3 = atof(ws);
     332:	ee10 3a10 	vmov	r3, s0
     336:	f8c4 3011 	str.w	r3, [r4, #17]
                ws = strchr(ws, ','); if (ws != NULL) {
     33a:	f01e ffcb 	bl	1f2d4 <strchr>
     33e:	b340      	cbz	r0, 392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
                  ws++; a.param4 = atof(ws);
     340:	3001      	adds	r0, #1
     342:	9001      	str	r0, [sp, #4]
     344:	f01d f91a 	bl	1d57c <atof>
     348:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
                  ws = strchr(ws, ','); if (ws != NULL) {
     34c:	212c      	movs	r1, #44	; 0x2c
     34e:	9801      	ldr	r0, [sp, #4]
                  ws++; a.param4 = atof(ws);
     350:	ee10 3a10 	vmov	r3, s0
     354:	f8c4 3015 	str.w	r3, [r4, #21]
                  ws = strchr(ws, ','); if (ws != NULL) {
     358:	f01e ffbc 	bl	1f2d4 <strchr>
     35c:	b1c8      	cbz	r0, 392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
                    ws++; a.param5 = atof(ws);
     35e:	3001      	adds	r0, #1
     360:	9001      	str	r0, [sp, #4]
     362:	f01d f90b 	bl	1d57c <atof>
     366:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
                    ws = strchr(ws, ','); if (ws != NULL) {
     36a:	212c      	movs	r1, #44	; 0x2c
     36c:	9801      	ldr	r0, [sp, #4]
                    ws++; a.param5 = atof(ws);
     36e:	ee10 3a10 	vmov	r3, s0
     372:	f8c4 3019 	str.w	r3, [r4, #25]
                    ws = strchr(ws, ','); if (ws != NULL) {
     376:	f01e ffad 	bl	1f2d4 <strchr>
     37a:	b150      	cbz	r0, 392 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13a>
                      ws++; a.param6 = atof(ws);
     37c:	3001      	adds	r0, #1
     37e:	f01d f8fd 	bl	1d57c <atof>
     382:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
                      return true;
     386:	2001      	movs	r0, #1
                      ws++; a.param6 = atof(ws);
     388:	ee10 3a10 	vmov	r3, s0
     38c:	f8c4 301d 	str.w	r3, [r4, #29]
                      return true;
     390:	e000      	b.n	394 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]+0x13c>
    if (&s[0] != conv_end) a.stepsPerMeasure = f; else return false;
     392:	2000      	movs	r0, #0
        }
      }
    }
  }
  return false;
}
     394:	b005      	add	sp, #20
     396:	bd30      	pop	{r4, r5, pc}

00000398 <Axis::validateAxisSettings(int, AxisStoredSettings)>:

// convert axis settings string into numeric form
bool Axis::validateAxisSettings(int axisNum, AxisStoredSettings a) {
     398:	b082      	sub	sp, #8
     39a:	b570      	push	{r4, r5, r6, lr}
     39c:	b082      	sub	sp, #8
     39e:	4604      	mov	r4, r0
  if (!motor->validateParameters(a.param1, a.param2, a.param3, a.param4, a.param5, a.param6)) return false;
     3a0:	6800      	ldr	r0, [r0, #0]
bool Axis::validateAxisSettings(int axisNum, AxisStoredSettings a) {
     3a2:	a906      	add	r1, sp, #24
     3a4:	9200      	str	r2, [sp, #0]
     3a6:	e881 000c 	stmia.w	r1, {r2, r3}
  if (!motor->validateParameters(a.param1, a.param2, a.param3, a.param4, a.param5, a.param6)) return false;
     3aa:	f8dd 3035 	ldr.w	r3, [sp, #53]	; 0x35
     3ae:	9a07      	ldr	r2, [sp, #28]
     3b0:	ee02 3a90 	vmov	s5, r3
     3b4:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
     3b8:	9201      	str	r2, [sp, #4]
     3ba:	ee02 3a10 	vmov	s4, r3
     3be:	f8dd 302d 	ldr.w	r3, [sp, #45]	; 0x2d
     3c2:	f8dd 5039 	ldr.w	r5, [sp, #57]	; 0x39
     3c6:	ee01 3a90 	vmov	s3, r3
     3ca:	f8dd 3029 	ldr.w	r3, [sp, #41]	; 0x29
     3ce:	f8dd 603d 	ldr.w	r6, [sp, #61]	; 0x3d
     3d2:	ee01 3a10 	vmov	s2, r3
     3d6:	f8dd 3025 	ldr.w	r3, [sp, #37]	; 0x25
     3da:	ee00 3a90 	vmov	s1, r3
     3de:	f8dd 3021 	ldr.w	r3, [sp, #33]	; 0x21
     3e2:	ee00 3a10 	vmov	s0, r3
     3e6:	6803      	ldr	r3, [r0, #0]
     3e8:	691b      	ldr	r3, [r3, #16]
     3ea:	4798      	blx	r3
     3ec:	2800      	cmp	r0, #0
     3ee:	d067      	beq.n	4c0 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x128>

  int minLimitL, minLimitH, maxLimitL, maxLimitH;
  float stepsLimitL, stepsLimitH;

  if (unitsStr[0] == 'u') {
     3f0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
     3f4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     3f8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 4e0 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x148>
     3fc:	2b75      	cmp	r3, #117	; 0x75
     3fe:	eddf 7a39 	vldr	s15, [pc, #228]	; 4e4 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x14c>
    maxLimitH = 360;
    stepsLimitL = 1.0;
    stepsLimitH = 360000.0;
  }

  if (unitsRadians) {
     402:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
  if (unitsStr[0] == 'u') {
     406:	4a38      	ldr	r2, [pc, #224]	; (4e8 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x150>)
     408:	fe07 7a27 	vseleq.f32	s14, s14, s15
     40c:	4b37      	ldr	r3, [pc, #220]	; (4ec <Axis::validateAxisSettings(int, AxisStoredSettings)+0x154>)
     40e:	bf14      	ite	ne
     410:	f44f 72b4 	movne.w	r2, #360	; 0x168
     414:	2300      	moveq	r3, #0
     416:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 4d0 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x138>
     41a:	fe06 6b05 	vseleq.f64	d6, d6, d5
  if (unitsRadians) {
     41e:	b1a9      	cbz	r1, 44c <Axis::validateAxisSettings(int, AxisStoredSettings)+0xb4>
    a.stepsPerMeasure /= RAD_DEG_RATIO;
    a.limits.min = radToDegF(a.limits.min);
     420:	eddf 7a33 	vldr	s15, [pc, #204]	; 4f0 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x158>
     424:	ee04 5a90 	vmov	s9, r5
     428:	ee64 4aa7 	vmul.f32	s9, s9, s15
    a.stepsPerMeasure /= RAD_DEG_RATIO;
     42c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 4d8 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x140>
    a.limits.min = radToDegF(a.limits.min);
     430:	ee14 5a90 	vmov	r5, s9
    a.limits.max = radToDegF(a.limits.max);
     434:	ee04 6a90 	vmov	s9, r6
     438:	ee64 7aa7 	vmul.f32	s15, s9, s15
    a.stepsPerMeasure /= RAD_DEG_RATIO;
     43c:	ed9d 4b00 	vldr	d4, [sp]
    a.limits.max = radToDegF(a.limits.max);
     440:	ee17 6a90 	vmov	r6, s15
    a.stepsPerMeasure /= RAD_DEG_RATIO;
     444:	ee84 5b05 	vdiv.f64	d5, d4, d5
     448:	ed8d 5b00 	vstr	d5, [sp]
  }

  if (a.stepsPerMeasure < stepsLimitL || a.stepsPerMeasure > stepsLimitH) {
     44c:	ed9d 5b00 	vldr	d5, [sp]
     450:	eeb4 5bc6 	vcmpe.f64	d5, d6
     454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     458:	d431      	bmi.n	4be <Axis::validateAxisSettings(int, AxisStoredSettings)+0x126>
     45a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     45e:	eeb4 5bc7 	vcmpe.f64	d5, d7
     462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     466:	dc2a      	bgt.n	4be <Axis::validateAxisSettings(int, AxisStoredSettings)+0x126>
    DF("ERR: Axis::validateAxisSettings(), Axis"); D(axisNum); DF(" bad stepsPerMeasure="); DL(a.stepsPerMeasure);
    return false;
  }

  if (a.reverse != OFF && a.reverse != ON) {
     468:	f89d 1020 	ldrb.w	r1, [sp, #32]
     46c:	3102      	adds	r1, #2
     46e:	b2c9      	uxtb	r1, r1
     470:	2901      	cmp	r1, #1
     472:	d824      	bhi.n	4be <Axis::validateAxisSettings(int, AxisStoredSettings)+0x126>
    DF("ERR: Axis::validateAxisSettings(), Axis"); D(axisNum+1); DF(" bad reverse="); DL(a.reverse);
    return false;
  }

  if (a.limits.min < minLimitL || a.limits.min > minLimitH) {
     474:	ee07 3a90 	vmov	s15, r3
     478:	ee07 5a10 	vmov	s14, r5
     47c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     480:	eef4 7ac7 	vcmpe.f32	s15, s14
     484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     488:	dc19      	bgt.n	4be <Axis::validateAxisSettings(int, AxisStoredSettings)+0x126>
     48a:	ee07 2a10 	vmov	s14, r2
     48e:	ee06 5a90 	vmov	s13, r5
     492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     496:	eeb4 7ae6 	vcmpe.f32	s14, s13
     49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     49e:	d40e      	bmi.n	4be <Axis::validateAxisSettings(int, AxisStoredSettings)+0x126>
    DF("ERR: Axis::validateAxisSettings(), Axis"); D(axisNum); DF(" bad min="); DL(a.limits.min);
    return false;
  }

  if (a.limits.max < maxLimitL || a.limits.max > maxLimitH) {
     4a0:	ee06 6a90 	vmov	s13, r6
     4a4:	eef4 7ae6 	vcmpe.f32	s15, s13
     4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4ac:	dc07      	bgt.n	4be <Axis::validateAxisSettings(int, AxisStoredSettings)+0x126>
     4ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
     4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4b6:	bf54      	ite	pl
     4b8:	2001      	movpl	r0, #1
     4ba:	2000      	movmi	r0, #0
     4bc:	e000      	b.n	4c0 <Axis::validateAxisSettings(int, AxisStoredSettings)+0x128>
  if (!motor->validateParameters(a.param1, a.param2, a.param3, a.param4, a.param5, a.param6)) return false;
     4be:	2000      	movs	r0, #0
  }

  UNUSED(axisNum);

  return true;
}
     4c0:	b002      	add	sp, #8
     4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     4c6:	b002      	add	sp, #8
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	f3af 8000 	nop.w
     4d0:	e0000000 	.word	0xe0000000
     4d4:	3f50624d 	.word	0x3f50624d
     4d8:	1a63c1f8 	.word	0x1a63c1f8
     4dc:	404ca5dc 	.word	0x404ca5dc
     4e0:	447a0000 	.word	0x447a0000
     4e4:	48afc800 	.word	0x48afc800
     4e8:	0007a120 	.word	0x0007a120
     4ec:	fffffe98 	.word	0xfffffe98
     4f0:	42652ee1 	.word	0x42652ee1
     4f4:	00000000 	.word	0x00000000

000004f8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)>:
bool Axis::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	ed2d 8b02 	vpush	{d8}
     500:	b0df      	sub	sp, #380	; 0x17c
     502:	460d      	mov	r5, r1
  *supressFrame = false;
     504:	2400      	movs	r4, #0
bool Axis::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
     506:	4606      	mov	r6, r0
  *supressFrame = false;
     508:	996a      	ldr	r1, [sp, #424]	; 0x1a8
     50a:	700c      	strb	r4, [r1, #0]
  if (command[0] == 'G' && command[1] == 'X' && parameter[2] == 0) {
     50c:	f892 c000 	ldrb.w	ip, [r2]
     510:	f1bc 0f47 	cmp.w	ip, #71	; 0x47
     514:	d00f      	beq.n	536 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3e>
  if (command[0] == 'S' && command[1] == 'X' && parameter[0] == 'A' && parameter[2] == ',') {
     516:	f1bc 0f53 	cmp.w	ip, #83	; 0x53
     51a:	d105      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
     51c:	7852      	ldrb	r2, [r2, #1]
     51e:	2a58      	cmp	r2, #88	; 0x58
     520:	d102      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
     522:	781a      	ldrb	r2, [r3, #0]
     524:	2a41      	cmp	r2, #65	; 0x41
     526:	d076      	beq.n	616 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11e>
  } else return false;
     528:	2400      	movs	r4, #0
}
     52a:	4620      	mov	r0, r4
     52c:	b05f      	add	sp, #380	; 0x17c
     52e:	ecbd 8b02 	vpop	{d8}
     532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (command[0] == 'G' && command[1] == 'X' && parameter[2] == 0) {
     536:	7852      	ldrb	r2, [r2, #1]
     538:	2a58      	cmp	r2, #88	; 0x58
     53a:	d1f5      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
     53c:	789f      	ldrb	r7, [r3, #2]
     53e:	2f00      	cmp	r7, #0
     540:	d1f2      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
    if (parameter[0] == 'A') {
     542:	781a      	ldrb	r2, [r3, #0]
     544:	2a41      	cmp	r2, #65	; 0x41
     546:	f000 80d9 	beq.w	6fc <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x204>
    if (parameter[0] == 'U') {
     54a:	2a55      	cmp	r2, #85	; 0x55
     54c:	d1ec      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
      int index = parameter[1] - '1';
     54e:	785b      	ldrb	r3, [r3, #1]
      if (index > 8) { *commandError = CE_PARAM_RANGE; return true; }
     550:	2b39      	cmp	r3, #57	; 0x39
     552:	f300 80f0 	bgt.w	736 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x23e>
      if (index + 1 != axisNumber) return false; // command wasn't processed
     556:	3b30      	subs	r3, #48	; 0x30
     558:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
     55c:	4293      	cmp	r3, r2
     55e:	d1e3      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
      DriverStatus status = getStatus();
     560:	4601      	mov	r1, r0
     562:	a853      	add	r0, sp, #332	; 0x14c
     564:	f000 fff8 	bl	1558 <Axis::getStatus()>
      if (status.active) {
     568:	f89d 414c 	ldrb.w	r4, [sp, #332]	; 0x14c
     56c:	2c00      	cmp	r4, #0
     56e:	f000 80dd 	beq.w	72c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x234>
        strcat(reply, status.standstill ? "ST," : ",");
     572:	4ea3      	ldr	r6, [pc, #652]	; (800 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x308>)
     574:	4628      	mov	r0, r5
     576:	f89d 3153 	ldrb.w	r3, [sp, #339]	; 0x153
     57a:	49a2      	ldr	r1, [pc, #648]	; (804 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>)
     57c:	2b00      	cmp	r3, #0
     57e:	bf08      	it	eq
     580:	4631      	moveq	r1, r6
     582:	910a      	str	r1, [sp, #40]	; 0x28
     584:	f01f fbfc 	bl	1fd80 <strlen>
     588:	990a      	ldr	r1, [sp, #40]	; 0x28
     58a:	4428      	add	r0, r5
     58c:	f01f f994 	bl	1f8b8 <stpcpy>
        strcat(reply, status.outputA.openLoad ? "OA," : ",");
     590:	4b9d      	ldr	r3, [pc, #628]	; (808 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x310>)
     592:	f89d 114e 	ldrb.w	r1, [sp, #334]	; 0x14e
     596:	2900      	cmp	r1, #0
     598:	bf14      	ite	ne
     59a:	4619      	movne	r1, r3
     59c:	4631      	moveq	r1, r6
     59e:	f01f f98b 	bl	1f8b8 <stpcpy>
        strcat(reply, status.outputB.openLoad ? "OB," : ",");
     5a2:	4b9a      	ldr	r3, [pc, #616]	; (80c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
     5a4:	f89d 1150 	ldrb.w	r1, [sp, #336]	; 0x150
     5a8:	2900      	cmp	r1, #0
     5aa:	bf14      	ite	ne
     5ac:	4619      	movne	r1, r3
     5ae:	4631      	moveq	r1, r6
     5b0:	f01f f982 	bl	1f8b8 <stpcpy>
        strcat(reply, status.outputA.shortToGround ? "GA," : ",");
     5b4:	4b96      	ldr	r3, [pc, #600]	; (810 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x318>)
     5b6:	f89d 114d 	ldrb.w	r1, [sp, #333]	; 0x14d
     5ba:	2900      	cmp	r1, #0
     5bc:	bf14      	ite	ne
     5be:	4619      	movne	r1, r3
     5c0:	4631      	moveq	r1, r6
     5c2:	f01f f979 	bl	1f8b8 <stpcpy>
        strcat(reply, status.outputB.shortToGround ? "GB," : ",");
     5c6:	4b93      	ldr	r3, [pc, #588]	; (814 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x31c>)
     5c8:	f89d 114f 	ldrb.w	r1, [sp, #335]	; 0x14f
     5cc:	2900      	cmp	r1, #0
     5ce:	bf14      	ite	ne
     5d0:	4619      	movne	r1, r3
     5d2:	4631      	moveq	r1, r6
     5d4:	f01f f970 	bl	1f8b8 <stpcpy>
        strcat(reply, status.overTemperature ? "OT," : ",");           // > 150C
     5d8:	4b8f      	ldr	r3, [pc, #572]	; (818 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>)
     5da:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
     5de:	2900      	cmp	r1, #0
     5e0:	bf14      	ite	ne
     5e2:	4619      	movne	r1, r3
     5e4:	4631      	moveq	r1, r6
     5e6:	f01f f967 	bl	1f8b8 <stpcpy>
        strcat(reply, status.overTemperatureWarning ? "PW," : ","); // > 120C
     5ea:	4b8c      	ldr	r3, [pc, #560]	; (81c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x324>)
     5ec:	f89d 1151 	ldrb.w	r1, [sp, #337]	; 0x151
     5f0:	2900      	cmp	r1, #0
     5f2:	bf14      	ite	ne
     5f4:	4619      	movne	r1, r3
     5f6:	4631      	moveq	r1, r6
     5f8:	f01f f95e 	bl	1f8b8 <stpcpy>
        strcat(reply, status.fault ? "GF" : "");
     5fc:	4b88      	ldr	r3, [pc, #544]	; (820 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x328>)
     5fe:	f89d 1154 	ldrb.w	r1, [sp, #340]	; 0x154
     602:	4a88      	ldr	r2, [pc, #544]	; (824 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32c>)
     604:	2900      	cmp	r1, #0
     606:	bf14      	ite	ne
     608:	4611      	movne	r1, r2
     60a:	4619      	moveq	r1, r3
     60c:	f01f fb26 	bl	1fc5c <strcpy>
      *numericReply = false;
     610:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
     612:	701f      	strb	r7, [r3, #0]
     614:	e789      	b.n	52a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
  if (command[0] == 'S' && command[1] == 'X' && parameter[0] == 'A' && parameter[2] == ',') {
     616:	789a      	ldrb	r2, [r3, #2]
     618:	2a2c      	cmp	r2, #44	; 0x2c
     61a:	d185      	bne.n	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
    uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
     61c:	f44f 7199 	mov.w	r1, #306	; 0x132
     620:	4881      	ldr	r0, [pc, #516]	; (828 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
     622:	930a      	str	r3, [sp, #40]	; 0x28
     624:	f004 fcb8 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
    int index = parameter[1] - '1';
     628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (index + 1 != axisNumber) return false;
     62a:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    int index = parameter[1] - '1';
     62e:	785a      	ldrb	r2, [r3, #1]
    if (index + 1 != axisNumber) return false;
     630:	3a30      	subs	r2, #48	; 0x30
     632:	428a      	cmp	r2, r1
     634:	f47f af78 	bne.w	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
    if (axesToRevert & 1) {
     638:	07c4      	lsls	r4, r0, #31
     63a:	d577      	bpl.n	72c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x234>
      if (!(axesToRevert & (1 << axisNumber))) {
     63c:	fa40 f201 	asr.w	r2, r0, r1
     640:	07d2      	lsls	r2, r2, #31
     642:	d473      	bmi.n	72c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x234>
        if (parameter[3] == 'R' && parameter[4] == 0) {
     644:	78da      	ldrb	r2, [r3, #3]
     646:	2a52      	cmp	r2, #82	; 0x52
     648:	d103      	bne.n	652 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x15a>
     64a:	791a      	ldrb	r2, [r3, #4]
     64c:	2a00      	cmp	r2, #0
     64e:	f000 8094 	beq.w	77a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x282>
          AxisStoredSettings thisAxis = settings;
     652:	f50d 78a6 	add.w	r8, sp, #332	; 0x14c
     656:	1d37      	adds	r7, r6, #4
  if (strcmp(s, "0") != 0) {
     658:	f893 c003 	ldrb.w	ip, [r3, #3]
          if (decodeAxisSettings(&parameter[3], thisAxis)) {
     65c:	1cdc      	adds	r4, r3, #3
          AxisStoredSettings thisAxis = settings;
     65e:	4645      	mov	r5, r8
  if (strcmp(s, "0") != 0) {
     660:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
          AxisStoredSettings thisAxis = settings;
     664:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     668:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     66a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     66c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
     670:	c503      	stmia	r5!, {r0, r1}
     672:	702a      	strb	r2, [r5, #0]
  if (strcmp(s, "0") != 0) {
     674:	d064      	beq.n	740 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x248>
     676:	4641      	mov	r1, r8
     678:	4620      	mov	r0, r4
     67a:	f7ff fded 	bl	258 <Axis::decodeAxisSettings(char*, AxisStoredSettings&) [clone .part.0]>
          if (decodeAxisSettings(&parameter[3], thisAxis)) {
     67e:	2800      	cmp	r0, #0
     680:	d037      	beq.n	6f2 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1fa>
            if (axisNumber <= 2) {
     682:	f896 7030 	ldrb.w	r7, [r6, #48]	; 0x30
     686:	2f02      	cmp	r7, #2
     688:	d85e      	bhi.n	748 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x250>
              thisAxis.limits.max = degToRadF(thisAxis.limits.max);
     68a:	f8dd 0171 	ldr.w	r0, [sp, #369]	; 0x171
              thisAxis.limits.min = degToRadF(thisAxis.limits.min);
     68e:	eddf 7a67 	vldr	s15, [pc, #412]	; 82c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x334>
              thisAxis.limits.max = degToRadF(thisAxis.limits.max);
     692:	ee07 0a10 	vmov	s14, r0
              thisAxis.stepsPerMeasure *= RAD_DEG_RATIO;
     696:	9a53      	ldr	r2, [sp, #332]	; 0x14c
     698:	9b54      	ldr	r3, [sp, #336]	; 0x150
              thisAxis.limits.max = degToRadF(thisAxis.limits.max);
     69a:	ee87 7a27 	vdiv.f32	s14, s14, s15
              thisAxis.stepsPerMeasure *= RAD_DEG_RATIO;
     69e:	ec43 2b15 	vmov	d5, r2, r3
              thisAxis.limits.min = degToRadF(thisAxis.limits.min);
     6a2:	f8dd 216d 	ldr.w	r2, [sp, #365]	; 0x16d
              thisAxis.stepsPerMeasure *= RAD_DEG_RATIO;
     6a6:	ed9f 6b54 	vldr	d6, [pc, #336]	; 7f8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>
     6aa:	ee25 6b06 	vmul.f64	d6, d5, d6
              thisAxis.limits.max = degToRadF(thisAxis.limits.max);
     6ae:	ee17 1a10 	vmov	r1, s14
              thisAxis.limits.min = degToRadF(thisAxis.limits.min);
     6b2:	ee07 2a10 	vmov	s14, r2
     6b6:	eec7 7a27 	vdiv.f32	s15, s14, s15
              thisAxis.limits.max = degToRadF(thisAxis.limits.max);
     6ba:	f8cd 1171 	str.w	r1, [sp, #369]	; 0x171
              thisAxis.stepsPerMeasure *= RAD_DEG_RATIO;
     6be:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
     6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     6c4:	9253      	str	r2, [sp, #332]	; 0x14c
     6c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     6c8:	9254      	str	r2, [sp, #336]	; 0x150
              thisAxis.limits.min = degToRadF(thisAxis.limits.min);
     6ca:	ee17 3a90 	vmov	r3, s15
     6ce:	f8cd 316d 	str.w	r3, [sp, #365]	; 0x16d
            if (validateAxisSettings(axisNumber, thisAxis)) {
     6d2:	ad55      	add	r5, sp, #340	; 0x154
     6d4:	466c      	mov	r4, sp
     6d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     6d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     6da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     6dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     6de:	682b      	ldr	r3, [r5, #0]
     6e0:	4639      	mov	r1, r7
     6e2:	4630      	mov	r0, r6
     6e4:	7023      	strb	r3, [r4, #0]
     6e6:	e898 000c 	ldmia.w	r8, {r2, r3}
     6ea:	f7ff fe55 	bl	398 <Axis::validateAxisSettings(int, AxisStoredSettings)>
     6ee:	2800      	cmp	r0, #0
     6f0:	d151      	bne.n	796 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x29e>
            } else *commandError = CE_PARAM_FORM;
     6f2:	2305      	movs	r3, #5
     6f4:	9a6c      	ldr	r2, [sp, #432]	; 0x1b0
     6f6:	7013      	strb	r3, [r2, #0]
  return true;
     6f8:	2401      	movs	r4, #1
     6fa:	e716      	b.n	52a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      int index = parameter[1] - '1';
     6fc:	785b      	ldrb	r3, [r3, #1]
     6fe:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
      if (index > 8) { *commandError = CE_PARAM_RANGE; return true; }
     702:	2c08      	cmp	r4, #8
     704:	dc17      	bgt.n	736 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x23e>
      if (index + 1 != axisNumber) return false; // command wasn't processed
     706:	3b30      	subs	r3, #48	; 0x30
     708:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
     70c:	4293      	cmp	r3, r2
     70e:	f47f af0b 	bne.w	528 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30>
      uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
     712:	f44f 7199 	mov.w	r1, #306	; 0x132
     716:	4844      	ldr	r0, [pc, #272]	; (828 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
     718:	f004 fc3e 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
      if (axesToRevert & 1) {
     71c:	07c3      	lsls	r3, r0, #31
     71e:	d505      	bpl.n	72c <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x234>
        if (!(axesToRevert & (1 << axisNumber))) {
     720:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
     724:	4118      	asrs	r0, r3
     726:	07c7      	lsls	r7, r0, #31
     728:	f140 8084 	bpl.w	834 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x33c>
      } else { *commandError = CE_0; return true; }
     72c:	2301      	movs	r3, #1
     72e:	9a6c      	ldr	r2, [sp, #432]	; 0x1b0
     730:	461c      	mov	r4, r3
     732:	7013      	strb	r3, [r2, #0]
     734:	e6f9      	b.n	52a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      if (index > 8) { *commandError = CE_PARAM_RANGE; return true; }
     736:	2304      	movs	r3, #4
     738:	9a6c      	ldr	r2, [sp, #432]	; 0x1b0
     73a:	2401      	movs	r4, #1
     73c:	7013      	strb	r3, [r2, #0]
     73e:	e6f4      	b.n	52a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
  if (strcmp(s, "0") != 0) {
     740:	7863      	ldrb	r3, [r4, #1]
     742:	2b00      	cmp	r3, #0
     744:	d0d5      	beq.n	6f2 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1fa>
     746:	e796      	b.n	676 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x17e>
            if (axisNumber > 3) {
     748:	2f03      	cmp	r7, #3
     74a:	d0c2      	beq.n	6d2 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1da>
              thisAxis.limits.min = thisAxis.limits.min*1000.0F;
     74c:	f8dd 316d 	ldr.w	r3, [sp, #365]	; 0x16d
     750:	eddf 7a37 	vldr	s15, [pc, #220]	; 830 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x338>
     754:	ee07 3a10 	vmov	s14, r3
              thisAxis.limits.max = thisAxis.limits.max*1000.0F;
     758:	f8dd 2171 	ldr.w	r2, [sp, #369]	; 0x171
              thisAxis.limits.min = thisAxis.limits.min*1000.0F;
     75c:	ee27 7a87 	vmul.f32	s14, s15, s14
     760:	ee17 3a10 	vmov	r3, s14
              thisAxis.limits.max = thisAxis.limits.max*1000.0F;
     764:	ee07 2a10 	vmov	s14, r2
     768:	ee67 7a87 	vmul.f32	s15, s15, s14
              thisAxis.limits.min = thisAxis.limits.min*1000.0F;
     76c:	f8cd 316d 	str.w	r3, [sp, #365]	; 0x16d
              thisAxis.limits.max = thisAxis.limits.max*1000.0F;
     770:	ee17 3a90 	vmov	r3, s15
     774:	f8cd 3171 	str.w	r3, [sp, #369]	; 0x171
     778:	e7ab      	b.n	6d2 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1da>
          bitSet(axesToRevert, axisNumber);
     77a:	2401      	movs	r4, #1

    // update value j starting at position i
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    inline void update(uint16_t i,     char j) { update(i,(uint8_t)j); }
    inline void update(uint16_t i,   int8_t j) { update(i,(uint8_t)j); }
    inline void update(uint16_t i, uint16_t j) { updateBytes(i, (uint8_t*)&j, sizeof(uint16_t)); }
     77c:	2302      	movs	r3, #2
     77e:	aa53      	add	r2, sp, #332	; 0x14c
     780:	fa04 f101 	lsl.w	r1, r4, r1
     784:	4308      	orrs	r0, r1
     786:	f44f 7199 	mov.w	r1, #306	; 0x132
     78a:	f8ad 014c 	strh.w	r0, [sp, #332]	; 0x14c
     78e:	4826      	ldr	r0, [pc, #152]	; (828 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
     790:	f004 fc6c 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
          nv.update(NV_AXIS_SETTINGS_REVERT, axesToRevert);
     794:	e6c9      	b.n	52a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
              nv.updateBytes(NV_AXIS_SETTINGS_BASE + (axisNumber - 1)*AxisStoredSettingsSize, &thisAxis, sizeof(AxisStoredSettings));
     796:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
     79a:	2329      	movs	r3, #41	; 0x29
     79c:	4642      	mov	r2, r8
     79e:	3901      	subs	r1, #1
     7a0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
     7a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
     7a8:	481f      	ldr	r0, [pc, #124]	; (828 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
     7aa:	f501 719a 	add.w	r1, r1, #308	; 0x134
     7ae:	b289      	uxth	r1, r1
     7b0:	f004 fc5c 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
              if (motor->driverType == SERVO) motor->setParameters(thisAxis.param1, thisAxis.param2, thisAxis.param3, thisAxis.param4, thisAxis.param5, thisAxis.param6);
     7b4:	6830      	ldr	r0, [r6, #0]
     7b6:	6843      	ldr	r3, [r0, #4]
     7b8:	330b      	adds	r3, #11
     7ba:	d19d      	bne.n	6f8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x200>
     7bc:	f8dd 2169 	ldr.w	r2, [sp, #361]	; 0x169
     7c0:	6803      	ldr	r3, [r0, #0]
     7c2:	ee02 2a90 	vmov	s5, r2
     7c6:	f8dd 2165 	ldr.w	r2, [sp, #357]	; 0x165
     7ca:	68db      	ldr	r3, [r3, #12]
     7cc:	ee02 2a10 	vmov	s4, r2
     7d0:	f8dd 2161 	ldr.w	r2, [sp, #353]	; 0x161
     7d4:	ee01 2a90 	vmov	s3, r2
     7d8:	f8dd 215d 	ldr.w	r2, [sp, #349]	; 0x15d
     7dc:	ee01 2a10 	vmov	s2, r2
     7e0:	f8dd 2159 	ldr.w	r2, [sp, #345]	; 0x159
     7e4:	ee00 2a90 	vmov	s1, r2
     7e8:	f8dd 2155 	ldr.w	r2, [sp, #341]	; 0x155
     7ec:	ee00 2a10 	vmov	s0, r2
     7f0:	4798      	blx	r3
     7f2:	e781      	b.n	6f8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x200>
     7f4:	f3af 8000 	nop.w
     7f8:	1a63c1f8 	.word	0x1a63c1f8
     7fc:	404ca5dc 	.word	0x404ca5dc
     800:	20002148 	.word	0x20002148
     804:	20002144 	.word	0x20002144
     808:	2000214c 	.word	0x2000214c
     80c:	20002150 	.word	0x20002150
     810:	20002154 	.word	0x20002154
     814:	20002158 	.word	0x20002158
     818:	2000215c 	.word	0x2000215c
     81c:	20002160 	.word	0x20002160
     820:	20002724 	.word	0x20002724
     824:	20002164 	.word	0x20002164
     828:	20005e50 	.word	0x20005e50
     82c:	42652ee1 	.word	0x42652ee1
     830:	447a0000 	.word	0x447a0000
          nv.readBytes(NV_AXIS_SETTINGS_BASE + index*AxisStoredSettingsSize, &thisAxis, sizeof(AxisStoredSettings));
     834:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     838:	2329      	movs	r3, #41	; 0x29
     83a:	4865      	ldr	r0, [pc, #404]	; (9d0 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4d8>)
     83c:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
     840:	aa53      	add	r2, sp, #332	; 0x14c
     842:	f501 719a 	add.w	r1, r1, #308	; 0x134
     846:	b289      	uxth	r1, r1
     848:	f004 fbe6 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
          if (axisNumber <= 2) {
     84c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
     850:	2b02      	cmp	r3, #2
     852:	f200 809f 	bhi.w	994 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x49c>
            thisAxis.stepsPerMeasure /= RAD_DEG_RATIO;
     856:	9853      	ldr	r0, [sp, #332]	; 0x14c
     858:	9954      	ldr	r1, [sp, #336]	; 0x150
            thisAxis.limits.min = radToDegF(thisAxis.limits.min);
     85a:	f8dd 316d 	ldr.w	r3, [sp, #365]	; 0x16d
     85e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 9d4 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4dc>
     862:	ee07 3a10 	vmov	s14, r3
            thisAxis.limits.max = radToDegF(thisAxis.limits.max);
     866:	f8dd 2171 	ldr.w	r2, [sp, #369]	; 0x171
            thisAxis.stepsPerMeasure /= RAD_DEG_RATIO;
     86a:	ed9f 6b57 	vldr	d6, [pc, #348]	; 9c8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4d0>
     86e:	ec41 0b15 	vmov	d5, r0, r1
            thisAxis.limits.min = radToDegF(thisAxis.limits.min);
     872:	ee27 7a87 	vmul.f32	s14, s15, s14
            thisAxis.stepsPerMeasure /= RAD_DEG_RATIO;
     876:	ee85 6b06 	vdiv.f64	d6, d5, d6
            thisAxis.limits.min = radToDegF(thisAxis.limits.min);
     87a:	ee17 3a10 	vmov	r3, s14
            thisAxis.limits.max = radToDegF(thisAxis.limits.max);
     87e:	ee07 2a10 	vmov	s14, r2
     882:	ee67 7a87 	vmul.f32	s15, s15, s14
            thisAxis.limits.min = radToDegF(thisAxis.limits.min);
     886:	f8cd 316d 	str.w	r3, [sp, #365]	; 0x16d
            thisAxis.limits.max = radToDegF(thisAxis.limits.max);
     88a:	ee17 3a90 	vmov	r3, s15
     88e:	f8cd 3171 	str.w	r3, [sp, #369]	; 0x171
            thisAxis.stepsPerMeasure /= RAD_DEG_RATIO;
     892:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
     896:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     89a:	e9cd 2353 	strd	r2, r3, [sp, #332]	; 0x14c
          char spm[40]; sprintF(spm, "%1.3f", thisAxis.stepsPerMeasure);
     89e:	e9dd 2353 	ldrd	r2, r3, [sp, #332]	; 0x14c
     8a2:	494d      	ldr	r1, [pc, #308]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     8a4:	a80d      	add	r0, sp, #52	; 0x34
          char ps1[40]; sprintF(ps1, "%1.3f", thisAxis.param1);
     8a6:	ac17      	add	r4, sp, #92	; 0x5c
          char ps2[40]; sprintF(ps2, "%1.3f", thisAxis.param2);
     8a8:	af21      	add	r7, sp, #132	; 0x84
          char ps3[40]; sprintF(ps3, "%1.3f", thisAxis.param3);
     8aa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
          char ps4[40]; sprintF(ps4, "%1.3f", thisAxis.param4);
     8ae:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
          char ps5[40]; sprintF(ps5, "%1.3f", thisAxis.param5);
     8b2:	f10d 0afc 	add.w	sl, sp, #252	; 0xfc
          char ps6[40]; sprintF(ps6, "%1.3f", thisAxis.param6);
     8b6:	f50d 7b92 	add.w	fp, sp, #292	; 0x124
          char spm[40]; sprintF(spm, "%1.3f", thisAxis.stepsPerMeasure);
     8ba:	ec43 2b10 	vmov	d0, r2, r3
     8be:	f003 fbbb 	bl	4038 <sprintF(char*, char const*, double)>
          char ps1[40]; sprintF(ps1, "%1.3f", thisAxis.param1);
     8c2:	f8dd 3155 	ldr.w	r3, [sp, #341]	; 0x155
     8c6:	4620      	mov	r0, r4
     8c8:	4943      	ldr	r1, [pc, #268]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     8ca:	ee00 3a10 	vmov	s0, r3
     8ce:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     8d2:	f003 fbb1 	bl	4038 <sprintF(char*, char const*, double)>
          char ps2[40]; sprintF(ps2, "%1.3f", thisAxis.param2);
     8d6:	f8dd 3159 	ldr.w	r3, [sp, #345]	; 0x159
     8da:	493f      	ldr	r1, [pc, #252]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     8dc:	4638      	mov	r0, r7
     8de:	ee00 3a10 	vmov	s0, r3
     8e2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     8e6:	f003 fba7 	bl	4038 <sprintF(char*, char const*, double)>
          char ps3[40]; sprintF(ps3, "%1.3f", thisAxis.param3);
     8ea:	f8dd 315d 	ldr.w	r3, [sp, #349]	; 0x15d
     8ee:	493a      	ldr	r1, [pc, #232]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     8f0:	4640      	mov	r0, r8
     8f2:	ee00 3a10 	vmov	s0, r3
     8f6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     8fa:	f003 fb9d 	bl	4038 <sprintF(char*, char const*, double)>
          char ps4[40]; sprintF(ps4, "%1.3f", thisAxis.param4);
     8fe:	f8dd 3161 	ldr.w	r3, [sp, #353]	; 0x161
     902:	4935      	ldr	r1, [pc, #212]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     904:	4648      	mov	r0, r9
     906:	ee00 3a10 	vmov	s0, r3
     90a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     90e:	f003 fb93 	bl	4038 <sprintF(char*, char const*, double)>
          char ps5[40]; sprintF(ps5, "%1.3f", thisAxis.param5);
     912:	f8dd 3165 	ldr.w	r3, [sp, #357]	; 0x165
     916:	4930      	ldr	r1, [pc, #192]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     918:	4650      	mov	r0, sl
     91a:	ee00 3a10 	vmov	s0, r3
     91e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     922:	f003 fb89 	bl	4038 <sprintF(char*, char const*, double)>
          char ps6[40]; sprintF(ps6, "%1.3f", thisAxis.param6);
     926:	f8dd 3169 	ldr.w	r3, [sp, #361]	; 0x169
     92a:	492b      	ldr	r1, [pc, #172]	; (9d8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>)
     92c:	4658      	mov	r0, fp
     92e:	ee00 3a10 	vmov	s0, r3
     932:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     936:	f003 fb7f 	bl	4038 <sprintF(char*, char const*, double)>
            (int)round(thisAxis.limits.min),
     93a:	f8dd 316d 	ldr.w	r3, [sp, #365]	; 0x16d
            motor->getParameterTypeCode());
     93e:	6830      	ldr	r0, [r6, #0]
            (int)round(thisAxis.limits.min),
     940:	ee08 3a10 	vmov	s16, r3
            motor->getParameterTypeCode());
     944:	6803      	ldr	r3, [r0, #0]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
     946:	feb8 8a48 	vrinta.f32	s16, s16
     94a:	6899      	ldr	r1, [r3, #8]
            (int)round(thisAxis.limits.max),
     94c:	f8dd 3171 	ldr.w	r3, [sp, #369]	; 0x171
     950:	ee08 3a90 	vmov	s17, r3
          sprintf(reply,"%s,%d,%d,%d,%s,%s,%s,%s,%s,%s,%c",
     954:	f99d 3154 	ldrsb.w	r3, [sp, #340]	; 0x154
     958:	930a      	str	r3, [sp, #40]	; 0x28
     95a:	fef8 8a68 	vrinta.f32	s17, s17
            motor->getParameterTypeCode());
     95e:	4788      	blx	r1
          sprintf(reply,"%s,%d,%d,%d,%s,%s,%s,%s,%s,%s,%c",
     960:	eefd 8ae8 	vcvt.s32.f32	s17, s17
     964:	eebd 8ac8 	vcvt.s32.f32	s16, s16
     968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     96a:	aa0d      	add	r2, sp, #52	; 0x34
     96c:	9008      	str	r0, [sp, #32]
     96e:	9402      	str	r4, [sp, #8]
     970:	4628      	mov	r0, r5
     972:	491a      	ldr	r1, [pc, #104]	; (9dc <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e4>)
  return true;
     974:	2401      	movs	r4, #1
          sprintf(reply,"%s,%d,%d,%d,%s,%s,%s,%s,%s,%s,%c",
     976:	9703      	str	r7, [sp, #12]
     978:	edcd 8a01 	vstr	s17, [sp, #4]
     97c:	ed8d 8a00 	vstr	s16, [sp]
     980:	e9cd ab06 	strd	sl, fp, [sp, #24]
     984:	e9cd 8904 	strd	r8, r9, [sp, #16]
     988:	f01e fab2 	bl	1eef0 <sprintf>
          *numericReply = false;
     98c:	2300      	movs	r3, #0
     98e:	9a6b      	ldr	r2, [sp, #428]	; 0x1ac
     990:	7013      	strb	r3, [r2, #0]
     992:	e5ca      	b.n	52a <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
          if (axisNumber > 3) {
     994:	2b03      	cmp	r3, #3
     996:	d082      	beq.n	89e <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a6>
            thisAxis.limits.min = thisAxis.limits.min/1000.0F;
     998:	f8dd 316d 	ldr.w	r3, [sp, #365]	; 0x16d
     99c:	eddf 7a10 	vldr	s15, [pc, #64]	; 9e0 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e8>
     9a0:	ee07 3a10 	vmov	s14, r3
            thisAxis.limits.max = thisAxis.limits.max/1000.0F;
     9a4:	f8dd 1171 	ldr.w	r1, [sp, #369]	; 0x171
            thisAxis.limits.min = thisAxis.limits.min/1000.0F;
     9a8:	ee87 7a27 	vdiv.f32	s14, s14, s15
     9ac:	ee17 2a10 	vmov	r2, s14
            thisAxis.limits.max = thisAxis.limits.max/1000.0F;
     9b0:	ee07 1a10 	vmov	s14, r1
     9b4:	eec7 7a27 	vdiv.f32	s15, s14, s15
            thisAxis.limits.min = thisAxis.limits.min/1000.0F;
     9b8:	f8cd 216d 	str.w	r2, [sp, #365]	; 0x16d
            thisAxis.limits.max = thisAxis.limits.max/1000.0F;
     9bc:	ee17 3a90 	vmov	r3, s15
     9c0:	f8cd 3171 	str.w	r3, [sp, #369]	; 0x171
     9c4:	e76b      	b.n	89e <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a6>
     9c6:	bf00      	nop
     9c8:	1a63c1f8 	.word	0x1a63c1f8
     9cc:	404ca5dc 	.word	0x404ca5dc
     9d0:	20005e50 	.word	0x20005e50
     9d4:	42652ee1 	.word	0x42652ee1
     9d8:	20002168 	.word	0x20002168
     9dc:	20002170 	.word	0x20002170
     9e0:	447a0000 	.word	0x447a0000

000009e4 <Motor::setSynchronized(bool)>:
    // get synchronized state (automatic movement of target at setFrequencySteps() rate)
    inline bool getSynchronized() { return sync; }

    // set synchronized state (automatic movement of target at setFrequencySteps() rate)
    virtual inline void setSynchronized(bool state) {
      if (state) {
     9e4:	b131      	cbz	r1, 9f4 <Motor::setSynchronized(bool)+0x10>
        noInterrupts();
     9e6:	b672      	cpsid	i
        sync = state;
     9e8:	2301      	movs	r3, #1
     9ea:	7743      	strb	r3, [r0, #29]
        targetSteps = motorSteps;
     9ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
     9ee:	6343      	str	r3, [r0, #52]	; 0x34
        interrupts();
     9f0:	b662      	cpsie	i
     9f2:	4770      	bx	lr
      } else sync = state;
     9f4:	7741      	strb	r1, [r0, #29]
    }
     9f6:	4770      	bx	lr

000009f8 <Motor::poll()>:

    // set origin of absolute encoders
    virtual void encoderSetOrigin(uint32_t origin) {}

    // monitor and respond to motor state as required
    virtual void poll() {}
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <Axis::unwrap(double) [clone .part.0]>:
double Axis::unwrap(double value) {
     9fc:	b510      	push	{r4, lr}
     9fe:	4604      	mov	r4, r0
    double position = motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure;
     a00:	6800      	ldr	r0, [r0, #0]
     a02:	6803      	ldr	r3, [r0, #0]
double Axis::unwrap(double value) {
     a04:	ed2d 8b02 	vpush	{d8}
    double position = motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure;
     a08:	6a1b      	ldr	r3, [r3, #32]
double Axis::unwrap(double value) {
     a0a:	eeb0 8b40 	vmov.f64	d8, d0
    double position = motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure;
     a0e:	4798      	blx	r3
     a10:	ee06 0a90 	vmov	s13, r0
     a14:	6862      	ldr	r2, [r4, #4]
    while (value > position + wrapAmount/2.0L) value -= wrapAmount;
     a16:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
    double position = motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure;
     a1a:	eeb8 5be6 	vcvt.f64.s32	d5, s13
     a1e:	68a3      	ldr	r3, [r4, #8]
     a20:	ec43 2b16 	vmov	d6, r2, r3
     a24:	ee85 6b06 	vdiv.f64	d6, d5, d6
    while (value > position + wrapAmount/2.0L) value -= wrapAmount;
     a28:	ed94 7b16 	vldr	d7, [r4, #88]	; 0x58
     a2c:	ee27 4b04 	vmul.f64	d4, d7, d4
     a30:	ee36 5b04 	vadd.f64	d5, d6, d4
     a34:	eeb4 8bc5 	vcmpe.f64	d8, d5
     a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a3c:	dd06      	ble.n	a4c <Axis::unwrap(double) [clone .part.0]+0x50>
     a3e:	ee38 8b47 	vsub.f64	d8, d8, d7
     a42:	eeb4 8bc5 	vcmpe.f64	d8, d5
     a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a4a:	dcf8      	bgt.n	a3e <Axis::unwrap(double) [clone .part.0]+0x42>
    while (value < position - wrapAmount/2.0L) value += wrapAmount;
     a4c:	ee36 6b44 	vsub.f64	d6, d6, d4
     a50:	eeb4 6bc8 	vcmpe.f64	d6, d8
     a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a58:	dd06      	ble.n	a68 <Axis::unwrap(double) [clone .part.0]+0x6c>
     a5a:	ee38 8b07 	vadd.f64	d8, d8, d7
     a5e:	eeb4 8bc6 	vcmpe.f64	d8, d6
     a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a66:	d4f8      	bmi.n	a5a <Axis::unwrap(double) [clone .part.0]+0x5e>
}
     a68:	eeb0 0b48 	vmov.f64	d0, d8
     a6c:	ecbd 8b02 	vpop	{d8}
     a70:	bd10      	pop	{r4, pc}
     a72:	bf00      	nop

00000a74 <Axis::unwrapNearest(double) [clone .part.0]>:
double Axis::unwrapNearest(double value) {
     a74:	b510      	push	{r4, lr}
     a76:	4604      	mov	r4, r0
     a78:	ed2d 8b02 	vpush	{d8}
     a7c:	f7ff ffbe 	bl	9fc <Axis::unwrap(double) [clone .part.0]>
    double instr = motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure;
     a80:	6820      	ldr	r0, [r4, #0]
     a82:	eeb0 8b40 	vmov.f64	d8, d0
     a86:	6803      	ldr	r3, [r0, #0]
     a88:	6a1b      	ldr	r3, [r3, #32]
     a8a:	4798      	blx	r3
     a8c:	ee07 0a90 	vmov	s15, r0
     a90:	6862      	ldr	r2, [r4, #4]
     a92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     a96:	68a3      	ldr	r3, [r4, #8]
     a98:	ec43 2b17 	vmov	d7, r2, r3
     a9c:	ee86 7b07 	vdiv.f64	d7, d6, d7
    if (distance(value + wrapAmount, instr) < dist) value += wrapAmount; else
     aa0:	ed94 2b16 	vldr	d2, [r4, #88]	; 0x58
     aa4:	ee38 0b02 	vadd.f64	d0, d8, d2
  double d1 = fabs(c1 - c2);
     aa8:	ee38 6b47 	vsub.f64	d6, d8, d7
  double d2 = fabs(c2 - c1);
     aac:	ee37 3b48 	vsub.f64	d3, d7, d8
  double d1 = fabs(c1 - c2);
     ab0:	ee30 5b47 	vsub.f64	d5, d0, d7
     ab4:	eeb0 6bc6 	vabs.f64	d6, d6
  double d2 = fabs(c2 - c1);
     ab8:	eeb0 3bc3 	vabs.f64	d3, d3
     abc:	ee37 4b40 	vsub.f64	d4, d7, d0
  double d1 = fabs(c1 - c2);
     ac0:	eeb0 5bc5 	vabs.f64	d5, d5
  if (d1 <= d2) return d1; else return d2;
     ac4:	eeb4 6bc3 	vcmpe.f64	d6, d3
  double d2 = fabs(c2 - c1);
     ac8:	eeb0 4bc4 	vabs.f64	d4, d4
  if (d1 <= d2) return d1; else return d2;
     acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ad0:	eeb4 5bc4 	vcmpe.f64	d5, d4
     ad4:	bf88      	it	hi
     ad6:	eeb0 6b43 	vmovhi.f64	d6, d3
     ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ade:	bf88      	it	hi
     ae0:	eeb0 5b44 	vmovhi.f64	d5, d4
    if (distance(value + wrapAmount, instr) < dist) value += wrapAmount; else
     ae4:	eeb4 5bc6 	vcmpe.f64	d5, d6
     ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     aec:	d416      	bmi.n	b1c <Axis::unwrapNearest(double) [clone .part.0]+0xa8>
    if (distance(value - wrapAmount, instr) < dist) value -= wrapAmount;
     aee:	ee38 0b42 	vsub.f64	d0, d8, d2
  double d1 = fabs(c1 - c2);
     af2:	ee30 5b47 	vsub.f64	d5, d0, d7
  double d2 = fabs(c2 - c1);
     af6:	ee37 7b40 	vsub.f64	d7, d7, d0
  double d1 = fabs(c1 - c2);
     afa:	eeb0 5bc5 	vabs.f64	d5, d5
  double d2 = fabs(c2 - c1);
     afe:	eeb0 7bc7 	vabs.f64	d7, d7
  if (d1 <= d2) return d1; else return d2;
     b02:	eeb4 5bc7 	vcmpe.f64	d5, d7
     b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b0a:	bf88      	it	hi
     b0c:	eeb0 5b47 	vmovhi.f64	d5, d7
    value = unwrap(value);
     b10:	eeb4 6bc5 	vcmpe.f64	d6, d5
     b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     b18:	fe30 0b08 	vselgt.f64	d0, d0, d8
}
     b1c:	ecbd 8b02 	vpop	{d8}
     b20:	bd10      	pop	{r4, pc}
     b22:	bf00      	nop

00000b24 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)>:
Axis::Axis(uint8_t axisNumber, const AxisPins *pins, const AxisSettings *settings, const AxisMeasure axisMeasure, float targetTolerance) {
     b24:	469c      	mov	ip, r3
     b26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
     b2a:	eddf 7a65 	vldr	s15, [pc, #404]	; cc0 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x19c>
     b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b32:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
     b36:	2300      	movs	r3, #0
     b38:	2500      	movs	r5, #0
     b3a:	4692      	mov	sl, r2
     b3c:	6783      	str	r3, [r0, #120]	; 0x78
     b3e:	2200      	movs	r2, #0
     b40:	67c3      	str	r3, [r0, #124]	; 0x7c
     b42:	4604      	mov	r4, r0
     b44:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  axisPrefix[9] = '0' + axisNumber;
     b48:	f101 0b30 	add.w	fp, r1, #48	; 0x30
Axis::Axis(uint8_t axisNumber, const AxisPins *pins, const AxisSettings *settings, const AxisMeasure axisMeasure, float targetTolerance) {
     b4c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
     b50:	468e      	mov	lr, r1
     b52:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  axisWrapper[axisNumber - 1] = this;
     b56:	1e4f      	subs	r7, r1, #1
Axis::Axis(uint8_t axisNumber, const AxisPins *pins, const AxisSettings *settings, const AxisMeasure axisMeasure, float targetTolerance) {
     b58:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
     b5c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
     b60:	2300      	movs	r3, #0
     b62:	4e58      	ldr	r6, [pc, #352]	; (cc4 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1a0>)
     b64:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
     b68:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
     b6c:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
     b70:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
     b74:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
     b78:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
     b7c:	f880 5062 	strb.w	r5, [r0, #98]	; 0x62
     b80:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
     b84:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
  axisWrapper[axisNumber - 1] = this;
     b88:	f8df 916c 	ldr.w	r9, [pc, #364]	; cf8 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1d4>
Axis::Axis(uint8_t axisNumber, const AxisPins *pins, const AxisSettings *settings, const AxisMeasure axisMeasure, float targetTolerance) {
     b8c:	e9c0 551c 	strd	r5, r5, [r0, #112]	; 0x70
     b90:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
     b94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     b96:	f8c4 0031 	str.w	r0, [r4, #49]	; 0x31
     b9a:	f8c4 1035 	str.w	r1, [r4, #53]	; 0x35
     b9e:	f8c4 303d 	str.w	r3, [r4, #61]	; 0x3d
     ba2:	f8c4 2039 	str.w	r2, [r4, #57]	; 0x39
     ba6:	ce03      	ldmia	r6!, {r0, r1}
     ba8:	f8c4 0041 	str.w	r0, [r4, #65]	; 0x41
     bac:	f8c4 1045 	str.w	r1, [r4, #69]	; 0x45
  this->settings.reverse = settings->reverse;
     bb0:	f89c 1008 	ldrb.w	r1, [ip, #8]
  axisPrefix[9] = '0' + axisNumber;
     bb4:	f884 b03a 	strb.w	fp, [r4, #58]	; 0x3a
  this->settings.reverse = settings->reverse;
     bb8:	7321      	strb	r1, [r4, #12]
  this->settings.limits = settings->limits;
     bba:	f8dc 1009 	ldr.w	r1, [ip, #9]
  this->settings.stepsPerMeasure = settings->stepsPerMeasure;
     bbe:	f8dc b004 	ldr.w	fp, [ip, #4]
  this->pins = pins;
     bc2:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
  this->settings.limits = settings->limits;
     bc6:	f8c4 1025 	str.w	r1, [r4, #37]	; 0x25
  this->settings.stepsPerMeasure = settings->stepsPerMeasure;
     bca:	f8dc a000 	ldr.w	sl, [ip]
  this->settings.limits = settings->limits;
     bce:	f8dc 100d 	ldr.w	r1, [ip, #13]
Axis::Axis(uint8_t axisNumber, const AxisPins *pins, const AxisSettings *settings, const AxisMeasure axisMeasure, float targetTolerance) {
     bd2:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
  this->axisNumber = axisNumber;
     bd6:	f884 e030 	strb.w	lr, [r4, #48]	; 0x30
Axis::Axis(uint8_t axisNumber, const AxisPins *pins, const AxisSettings *settings, const AxisMeasure axisMeasure, float targetTolerance) {
     bda:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
     bde:	edc4 7a2b 	vstr	s15, [r4, #172]	; 0xac
     be2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
     be6:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
  this->settings.limits = settings->limits;
     bea:	f8c4 1029 	str.w	r1, [r4, #41]	; 0x29
  this->settings.stepsPerMeasure = settings->stepsPerMeasure;
     bee:	e9c4 ab01 	strd	sl, fp, [r4, #4]
  backlashFreq = settings->backlashFreq;
     bf2:	f8dc 3011 	ldr.w	r3, [ip, #17]
  axisWrapper[axisNumber - 1] = this;
     bf6:	f849 4027 	str.w	r4, [r9, r7, lsl #2]
  backlashFreq = settings->backlashFreq;
     bfa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  switch (axisNumber) {
     bfe:	2f08      	cmp	r7, #8
     c00:	d809      	bhi.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
     c02:	e8df f007 	tbb	[pc, r7]
     c06:	4541      	.short	0x4541
     c08:	55514d49 	.word	0x55514d49
     c0c:	0559      	.short	0x0559
     c0e:	3d          	.byte	0x3d
     c0f:	00          	.byte	0x00
    case 8: callback = axisWrapper8; break;
     c10:	4b2d      	ldr	r3, [pc, #180]	; (cc8 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1a4>)
     c12:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  switch (axisMeasure) {
     c16:	f1b8 0f03 	cmp.w	r8, #3
     c1a:	d80a      	bhi.n	c32 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x10e>
     c1c:	e8df f008 	tbb	[pc, r8]
     c20:	0e021d28 	.word	0x0e021d28
    case AXIS_MEASURE_DEGREES: strcpy(unitsStr, " deg"); unitsRadians = false; break;
     c24:	4b29      	ldr	r3, [pc, #164]	; (ccc <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1a8>)
     c26:	6818      	ldr	r0, [r3, #0]
     c28:	791b      	ldrb	r3, [r3, #4]
     c2a:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
     c2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
     c32:	4620      	mov	r0, r4
  this->targetTolerance = targetTolerance;
     c34:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
}
     c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case AXIS_MEASURE_RADIANS: strcpy(unitsStr, " deg"); unitsRadians = true;  break;
     c3c:	4b23      	ldr	r3, [pc, #140]	; (ccc <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1a8>)
     c3e:	2201      	movs	r2, #1
  this->targetTolerance = targetTolerance;
     c40:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
    case AXIS_MEASURE_RADIANS: strcpy(unitsStr, " deg"); unitsRadians = true;  break;
     c44:	6818      	ldr	r0, [r3, #0]
     c46:	791b      	ldrb	r3, [r3, #4]
     c48:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
}
     c4c:	4620      	mov	r0, r4
    case AXIS_MEASURE_RADIANS: strcpy(unitsStr, " deg"); unitsRadians = true;  break;
     c4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
     c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
     c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case AXIS_MEASURE_MICRONS: strcpy(unitsStr, "um"); unitsRadians = false; break;
     c5a:	4b1d      	ldr	r3, [pc, #116]	; (cd0 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1ac>)
}
     c5c:	4620      	mov	r0, r4
  this->targetTolerance = targetTolerance;
     c5e:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
    case AXIS_MEASURE_MICRONS: strcpy(unitsStr, "um"); unitsRadians = false; break;
     c62:	881a      	ldrh	r2, [r3, #0]
     c64:	789b      	ldrb	r3, [r3, #2]
     c66:	87e2      	strh	r2, [r4, #62]	; 0x3e
     c68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
     c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case AXIS_MEASURE_UNKNOWN: strcpy(unitsStr, "?"); unitsRadians = false; break;
     c70:	4b18      	ldr	r3, [pc, #96]	; (cd4 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1b0>)
}
     c72:	4620      	mov	r0, r4
  this->targetTolerance = targetTolerance;
     c74:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
    case AXIS_MEASURE_UNKNOWN: strcpy(unitsStr, "?"); unitsRadians = false; break;
     c78:	881b      	ldrh	r3, [r3, #0]
     c7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
     c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    case 9: callback = axisWrapper9; break;
     c80:	4b15      	ldr	r3, [pc, #84]	; (cd8 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1b4>)
     c82:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     c86:	e7c6      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 1: callback = axisWrapper1; break;
     c88:	4b14      	ldr	r3, [pc, #80]	; (cdc <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1b8>)
     c8a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     c8e:	e7c2      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 2: callback = axisWrapper2; break;
     c90:	4b13      	ldr	r3, [pc, #76]	; (ce0 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1bc>)
     c92:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     c96:	e7be      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 3: callback = axisWrapper3; break;
     c98:	4b12      	ldr	r3, [pc, #72]	; (ce4 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1c0>)
     c9a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     c9e:	e7ba      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 4: callback = axisWrapper4; break;
     ca0:	4b11      	ldr	r3, [pc, #68]	; (ce8 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1c4>)
     ca2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     ca6:	e7b6      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 5: callback = axisWrapper5; break;
     ca8:	4b10      	ldr	r3, [pc, #64]	; (cec <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1c8>)
     caa:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     cae:	e7b2      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 6: callback = axisWrapper6; break;
     cb0:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1cc>)
     cb2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     cb6:	e7ae      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
    case 7: callback = axisWrapper7; break;
     cb8:	4b0e      	ldr	r3, [pc, #56]	; (cf4 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0x1d0>)
     cba:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     cbe:	e7aa      	b.n	c16 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)+0xf2>
     cc0:	7fc00000 	.word	0x7fc00000
     cc4:	20001df0 	.word	0x20001df0
     cc8:	00001d99 	.word	0x00001d99
     ccc:	2000219c 	.word	0x2000219c
     cd0:	20002198 	.word	0x20002198
     cd4:	20002194 	.word	0x20002194
     cd8:	00001dad 	.word	0x00001dad
     cdc:	00001d0d 	.word	0x00001d0d
     ce0:	00001d21 	.word	0x00001d21
     ce4:	00001d35 	.word	0x00001d35
     ce8:	00001d49 	.word	0x00001d49
     cec:	00001d5d 	.word	0x00001d5d
     cf0:	00001d71 	.word	0x00001d71
     cf4:	00001d85 	.word	0x00001d85
     cf8:	20005b2c 	.word	0x20005b2c

00000cfc <Axis::init(Motor*)>:
bool Axis::init(Motor *motor) {
     cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  this->motor = motor;
     d00:	4603      	mov	r3, r0
bool Axis::init(Motor *motor) {
     d02:	b099      	sub	sp, #100	; 0x64
     d04:	460e      	mov	r6, r1
  motor->getDefaultParameters(&settings.param1, &settings.param2, &settings.param3, &settings.param4, &settings.param5, &settings.param6);
     d06:	f100 021d 	add.w	r2, r0, #29
     d0a:	f100 0121 	add.w	r1, r0, #33	; 0x21
  AxisStoredSettings defaultSettings = settings;
     d0e:	1d07      	adds	r7, r0, #4
  this->motor = motor;
     d10:	f843 6b15 	str.w	r6, [r3], #21
bool Axis::init(Motor *motor) {
     d14:	4604      	mov	r4, r0
    inline bool hasValidKey() { return keyMatches; }
     d16:	4db6      	ldr	r5, [pc, #728]	; (ff0 <Axis::init(Motor*)+0x2f4>)
  motor->getDefaultParameters(&settings.param1, &settings.param2, &settings.param3, &settings.param4, &settings.param5, &settings.param6);
     d18:	e9cd 2101 	strd	r2, r1, [sp, #4]
     d1c:	f100 0119 	add.w	r1, r0, #25
     d20:	f100 0211 	add.w	r2, r0, #17
     d24:	9100      	str	r1, [sp, #0]
     d26:	f100 010d 	add.w	r1, r0, #13
     d2a:	4630      	mov	r0, r6
     d2c:	f001 f8ae 	bl	1e8c <Motor::getDefaultParameters(float*, float*, float*, float*, float*, float*)>
  AxisStoredSettings defaultSettings = settings;
     d30:	46be      	mov	lr, r7
     d32:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
  if (!nv.hasValidKey()) {
     d36:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
  AxisStoredSettings defaultSettings = settings;
     d3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     d3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     d42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     d46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     d4a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
     d4e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
     d52:	f88c 2000 	strb.w	r2, [ip]
  if (!nv.hasValidKey()) {
     d56:	f1b8 0f00 	cmp.w	r8, #0
     d5a:	f000 8126 	beq.w	faa <Axis::init(Motor*)+0x2ae>
     d5e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
     d62:	f44f 7199 	mov.w	r1, #306	; 0x132
     d66:	48a2      	ldr	r0, [pc, #648]	; (ff0 <Axis::init(Motor*)+0x2f4>)
     d68:	f004 f916 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
  if (!(axesToRevert & 1)) bitSet(axesToRevert, axisNumber);
     d6c:	f010 0f01 	tst.w	r0, #1
  uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
     d70:	4680      	mov	r8, r0
  if (!(axesToRevert & 1)) bitSet(axesToRevert, axisNumber);
     d72:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     d76:	d104      	bne.n	d82 <Axis::init(Motor*)+0x86>
     d78:	2201      	movs	r2, #1
     d7a:	409a      	lsls	r2, r3
     d7c:	4302      	orrs	r2, r0
     d7e:	fa1f f882 	uxth.w	r8, r2
  uint16_t nvAxisSettingsBase = NV_AXIS_SETTINGS_BASE + (axisNumber - 1)*AxisStoredSettingsSize;
     d82:	1e5d      	subs	r5, r3, #1
  if (bitRead(axesToRevert, axisNumber) || nv.isNull(nvAxisSettingsBase, sizeof(AxisStoredSettings))) {
     d84:	fa48 f303 	asr.w	r3, r8, r3
  uint16_t nvAxisSettingsBase = NV_AXIS_SETTINGS_BASE + (axisNumber - 1)*AxisStoredSettingsSize;
     d88:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  if (bitRead(axesToRevert, axisNumber) || nv.isNull(nvAxisSettingsBase, sizeof(AxisStoredSettings))) {
     d8c:	07d8      	lsls	r0, r3, #31
  uint16_t nvAxisSettingsBase = NV_AXIS_SETTINGS_BASE + (axisNumber - 1)*AxisStoredSettingsSize;
     d8e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
     d92:	f505 759a 	add.w	r5, r5, #308	; 0x134
     d96:	b2ad      	uxth	r5, r5
  if (bitRead(axesToRevert, axisNumber) || nv.isNull(nvAxisSettingsBase, sizeof(AxisStoredSettings))) {
     d98:	f100 80fb 	bmi.w	f92 <Axis::init(Motor*)+0x296>
     d9c:	2229      	movs	r2, #41	; 0x29
     d9e:	4629      	mov	r1, r5
     da0:	4893      	ldr	r0, [pc, #588]	; (ff0 <Axis::init(Motor*)+0x2f4>)
     da2:	f004 f91f 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
     da6:	2800      	cmp	r0, #0
     da8:	f040 80f3 	bne.w	f92 <Axis::init(Motor*)+0x296>
  bitClear(axesToRevert, axisNumber);
     dac:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
     db0:	2301      	movs	r3, #1
    inline void update(uint16_t i, uint16_t j) { updateBytes(i, (uint8_t*)&j, sizeof(uint16_t)); }
     db2:	f44f 7199 	mov.w	r1, #306	; 0x132
     db6:	488e      	ldr	r0, [pc, #568]	; (ff0 <Axis::init(Motor*)+0x2f4>)
     db8:	4093      	lsls	r3, r2
     dba:	464a      	mov	r2, r9
     dbc:	ea28 0803 	bic.w	r8, r8, r3
     dc0:	2302      	movs	r3, #2
     dc2:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  if (!validateAxisSettings(axisNumber, settings)) {
     dc6:	f104 080c 	add.w	r8, r4, #12
     dca:	f004 f94f 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  nv.readBytes(nvAxisSettingsBase, &settings, sizeof(AxisStoredSettings));
     dce:	2329      	movs	r3, #41	; 0x29
     dd0:	463a      	mov	r2, r7
     dd2:	4629      	mov	r1, r5
     dd4:	4886      	ldr	r0, [pc, #536]	; (ff0 <Axis::init(Motor*)+0x2f4>)
     dd6:	f004 f91f 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  if (!validateAxisSettings(axisNumber, settings)) {
     dda:	46c6      	mov	lr, r8
     ddc:	46ec      	mov	ip, sp
     dde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     de6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
     dea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     dee:	f8de 3000 	ldr.w	r3, [lr]
     df2:	4620      	mov	r0, r4
     df4:	f88c 3000 	strb.w	r3, [ip]
     df8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
     dfc:	e897 000c 	ldmia.w	r7, {r2, r3}
     e00:	f7ff faca 	bl	398 <Axis::validateAxisSettings(int, AxisStoredSettings)>
     e04:	bb50      	cbnz	r0, e5c <Axis::init(Motor*)+0x160>
    settings = defaultSettings;
     e06:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
     e0a:	46be      	mov	lr, r7
     e0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
     e10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
     e14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
     e18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
     e1c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    nv.updateBytes(nvAxisSettingsBase, &settings, sizeof(AxisStoredSettings));
     e20:	2329      	movs	r3, #41	; 0x29
    settings = defaultSettings;
     e22:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    nv.updateBytes(nvAxisSettingsBase, &settings, sizeof(AxisStoredSettings));
     e26:	4629      	mov	r1, r5
     e28:	4871      	ldr	r0, [pc, #452]	; (ff0 <Axis::init(Motor*)+0x2f4>)
    settings = defaultSettings;
     e2a:	f88e 2000 	strb.w	r2, [lr]
    nv.updateBytes(nvAxisSettingsBase, &settings, sizeof(AxisStoredSettings));
     e2e:	463a      	mov	r2, r7
     e30:	f004 f91c 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    if (!validateAxisSettings(axisNumber, settings)) {
     e34:	466d      	mov	r5, sp
     e36:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
     e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     e3c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
     e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     e42:	f8d8 3000 	ldr.w	r3, [r8]
     e46:	4620      	mov	r0, r4
     e48:	702b      	strb	r3, [r5, #0]
     e4a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
     e4e:	e897 000c 	ldmia.w	r7, {r2, r3}
     e52:	f7ff faa1 	bl	398 <Axis::validateAxisSettings(int, AxisStoredSettings)>
     e56:	2800      	cmp	r0, #0
     e58:	f000 80a2 	beq.w	fa0 <Axis::init(Motor*)+0x2a4>
  homeSenseHandle = sense.add(pins->home, pins->axisSense.homeInit, pins->axisSense.homeTrigger);
     e5c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
     e60:	2500      	movs	r5, #0
     e62:	4864      	ldr	r0, [pc, #400]	; (ff4 <Axis::init(Motor*)+0x2f8>)
     e64:	688b      	ldr	r3, [r1, #8]
     e66:	f991 200c 	ldrsb.w	r2, [r1, #12]
     e6a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
     e6e:	9500      	str	r5, [sp, #0]
     e70:	f004 fad0 	bl	5414 <Sense::add(int, int, long, bool)>
  minSenseHandle = sense.add(pins->min, pins->axisSense.minMaxInit, pins->axisSense.minTrigger);
     e74:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
  homeSenseHandle = sense.add(pins->home, pins->axisSense.homeInit, pins->axisSense.homeTrigger);
     e78:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
  minSenseHandle = sense.add(pins->min, pins->axisSense.minMaxInit, pins->axisSense.minTrigger);
     e7c:	485d      	ldr	r0, [pc, #372]	; (ff4 <Axis::init(Motor*)+0x2f8>)
     e7e:	694b      	ldr	r3, [r1, #20]
     e80:	f991 201c 	ldrsb.w	r2, [r1, #28]
     e84:	f9b1 1000 	ldrsh.w	r1, [r1]
     e88:	9500      	str	r5, [sp, #0]
     e8a:	f004 fac3 	bl	5414 <Sense::add(int, int, long, bool)>
  maxSenseHandle = sense.add(pins->max, pins->axisSense.minMaxInit, pins->axisSense.maxTrigger);
     e8e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
  minSenseHandle = sense.add(pins->min, pins->axisSense.minMaxInit, pins->axisSense.minTrigger);
     e92:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
  maxSenseHandle = sense.add(pins->max, pins->axisSense.minMaxInit, pins->axisSense.maxTrigger);
     e96:	4857      	ldr	r0, [pc, #348]	; (ff4 <Axis::init(Motor*)+0x2f8>)
     e98:	698b      	ldr	r3, [r1, #24]
     e9a:	f991 201c 	ldrsb.w	r2, [r1, #28]
     e9e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
     ea2:	9500      	str	r5, [sp, #0]
     ea4:	f004 fab6 	bl	5414 <Sense::add(int, int, long, bool)>
    commonMinMaxSense = pins->min != OFF && pins->min == pins->max;
     ea8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
  maxSenseHandle = sense.add(pins->max, pins->axisSense.minMaxInit, pins->axisSense.maxTrigger);
     eac:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    commonMinMaxSense = pins->min != OFF && pins->min == pins->max;
     eb0:	f9b2 3000 	ldrsh.w	r3, [r2]
     eb4:	1c59      	adds	r1, r3, #1
     eb6:	d005      	beq.n	ec4 <Axis::init(Motor*)+0x1c8>
     eb8:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
     ebc:	1aed      	subs	r5, r5, r3
     ebe:	fab5 f585 	clz	r5, r5
     ec2:	096d      	lsrs	r5, r5, #5
  if (!motor->init()) { DLF("ERR: Axis::init(); no motor exiting!"); return false; }
     ec4:	6833      	ldr	r3, [r6, #0]
     ec6:	4630      	mov	r0, r6
    commonMinMaxSense = pins->min != OFF && pins->min == pins->max;
     ec8:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
  if (!motor->init()) { DLF("ERR: Axis::init(); no motor exiting!"); return false; }
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	4798      	blx	r3
     ed0:	4605      	mov	r5, r0
     ed2:	2800      	cmp	r0, #0
     ed4:	d064      	beq.n	fa0 <Axis::init(Motor*)+0x2a4>
  if (motor->getParameterTypeCode() == 'O') settings.param6 = settings.stepsPerMeasure;
     ed6:	6833      	ldr	r3, [r6, #0]
     ed8:	4630      	mov	r0, r6
     eda:	689b      	ldr	r3, [r3, #8]
     edc:	4798      	blx	r3
     ede:	284f      	cmp	r0, #79	; 0x4f
     ee0:	d07a      	beq.n	fd8 <Axis::init(Motor*)+0x2dc>
  motor->setParameters(settings.param1, settings.param2, settings.param3, settings.param4, settings.param5, settings.param6);
     ee2:	f8d4 3021 	ldr.w	r3, [r4, #33]	; 0x21
     ee6:	ee02 3a90 	vmov	s5, r3
     eea:	f8d4 301d 	ldr.w	r3, [r4, #29]
     eee:	4630      	mov	r0, r6
     ef0:	ee02 3a10 	vmov	s4, r3
     ef4:	f8d4 3019 	ldr.w	r3, [r4, #25]
     ef8:	ee01 3a90 	vmov	s3, r3
     efc:	f8d4 3015 	ldr.w	r3, [r4, #21]
     f00:	ee01 3a10 	vmov	s2, r3
     f04:	f8d4 3011 	ldr.w	r3, [r4, #17]
     f08:	ee00 3a90 	vmov	s1, r3
     f0c:	f8d4 300d 	ldr.w	r3, [r4, #13]
     f10:	ee00 3a10 	vmov	s0, r3
     f14:	6833      	ldr	r3, [r6, #0]
     f16:	68db      	ldr	r3, [r3, #12]
     f18:	4798      	blx	r3
  motor->setReverse(settings.reverse);
     f1a:	6833      	ldr	r3, [r6, #0]
     f1c:	f994 100c 	ldrsb.w	r1, [r4, #12]
     f20:	4630      	mov	r0, r6
     f22:	685b      	ldr	r3, [r3, #4]
     f24:	4798      	blx	r3
  motor->setBacklashFrequencySteps(backlashFreq*settings.stepsPerMeasure);
     f26:	ed94 7a25 	vldr	s14, [r4, #148]	; 0x94
     f2a:	6862      	ldr	r2, [r4, #4]
     f2c:	4630      	mov	r0, r6
     f2e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     f32:	68a3      	ldr	r3, [r4, #8]
     f34:	ec43 2b16 	vmov	d6, r2, r3
     f38:	ee26 0b07 	vmul.f64	d0, d6, d7
     f3c:	6833      	ldr	r3, [r6, #0]
     f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     f40:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     f44:	4798      	blx	r3
  char taskName[] = "Ax_Mtr";
     f46:	4b2c      	ldr	r3, [pc, #176]	; (ff8 <Axis::init(Motor*)+0x2fc>)
  taskHandle = tasks.add(0, 0, true, 1, callback, taskName);
     f48:	f8cd 9008 	str.w	r9, [sp, #8]
  taskName[2] = axisNumber + '0';
     f4c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  char taskName[] = "Ax_Mtr";
     f50:	e893 0003 	ldmia.w	r3, {r0, r1}
  taskName[2] = axisNumber + '0';
     f54:	3230      	adds	r2, #48	; 0x30
  char taskName[] = "Ax_Mtr";
     f56:	0c0b      	lsrs	r3, r1, #16
     f58:	900b      	str	r0, [sp, #44]	; 0x2c
     f5a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
     f5e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  taskHandle = tasks.add(0, 0, true, 1, callback, taskName);
     f62:	2301      	movs	r3, #1
     f64:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  taskName[2] = axisNumber + '0';
     f68:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
  taskHandle = tasks.add(0, 0, true, 1, callback, taskName);
     f6c:	2200      	movs	r2, #0
     f6e:	4823      	ldr	r0, [pc, #140]	; (ffc <Axis::init(Motor*)+0x300>)
     f70:	e9cd 3100 	strd	r3, r1, [sp]
     f74:	4611      	mov	r1, r2
     f76:	f005 f931 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  tasks.setPeriodMicros(taskHandle, FRACTIONAL_SEC_US);
     f7a:	f240 726c 	movw	r2, #1900	; 0x76c
  taskHandle = tasks.add(0, 0, true, 1, callback, taskName);
     f7e:	4604      	mov	r4, r0
  tasks.setPeriodMicros(taskHandle, FRACTIONAL_SEC_US);
     f80:	4601      	mov	r1, r0
     f82:	481e      	ldr	r0, [pc, #120]	; (ffc <Axis::init(Motor*)+0x300>)
     f84:	f005 f9e2 	bl	634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>
}
     f88:	4628      	mov	r0, r5
  motor->monitorHandle = taskHandle;
     f8a:	7274      	strb	r4, [r6, #9]
}
     f8c:	b019      	add	sp, #100	; 0x64
     f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    nv.updateBytes(nvAxisSettingsBase, &settings, sizeof(AxisStoredSettings));
     f92:	2329      	movs	r3, #41	; 0x29
     f94:	463a      	mov	r2, r7
     f96:	4629      	mov	r1, r5
     f98:	4815      	ldr	r0, [pc, #84]	; (ff0 <Axis::init(Motor*)+0x2f4>)
     f9a:	f004 f867 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
     f9e:	e705      	b.n	dac <Axis::init(Motor*)+0xb0>
      return false;
     fa0:	2500      	movs	r5, #0
}
     fa2:	4628      	mov	r0, r5
     fa4:	b019      	add	sp, #100	; 0x64
     fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
     faa:	f44f 7199 	mov.w	r1, #306	; 0x132
     fae:	4628      	mov	r0, r5
     fb0:	f003 fff2 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
    bitSet(axesToRevert, axisNumber);
     fb4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
     fb8:	2201      	movs	r2, #1
    uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
     fba:	4603      	mov	r3, r0
     fbc:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
     fc0:	4628      	mov	r0, r5
    bitSet(axesToRevert, axisNumber);
     fc2:	408a      	lsls	r2, r1
     fc4:	f44f 7199 	mov.w	r1, #306	; 0x132
     fc8:	4313      	orrs	r3, r2
     fca:	464a      	mov	r2, r9
     fcc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
     fd0:	2302      	movs	r3, #2
     fd2:	f004 f84b 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
     fd6:	e6c4      	b.n	d62 <Axis::init(Motor*)+0x66>
  if (motor->getParameterTypeCode() == 'O') settings.param6 = settings.stepsPerMeasure;
     fd8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
     fdc:	ec43 2b17 	vmov	d7, r2, r3
     fe0:	eef7 2bc7 	vcvt.f32.f64	s5, d7
     fe4:	ee12 3a90 	vmov	r3, s5
     fe8:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
     fec:	e77d      	b.n	eea <Axis::init(Motor*)+0x1ee>
     fee:	bf00      	nop
     ff0:	20005e50 	.word	0x20005e50
     ff4:	200062f8 	.word	0x200062f8
     ff8:	2000213c 	.word	0x2000213c
     ffc:	2000634c 	.word	0x2000634c

00001000 <Axis::enable(bool)>:
  motor->enable(enabled & !poweredDown);
    1000:	6802      	ldr	r2, [r0, #0]
    1002:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void Axis::enable(bool state) {
    1006:	b410      	push	{r4}
  motor->enable(enabled & !poweredDown);
    1008:	f083 0301 	eor.w	r3, r3, #1
    100c:	6814      	ldr	r4, [r2, #0]
  enabled = state;
    100e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  motor->enable(enabled & !poweredDown);
    1012:	4610      	mov	r0, r2
    1014:	4019      	ands	r1, r3
    1016:	6962      	ldr	r2, [r4, #20]
}
    1018:	f85d 4b04 	ldr.w	r4, [sp], #4
  motor->enable(enabled & !poweredDown);
    101c:	4710      	bx	r2
    101e:	bf00      	nop

00001020 <Axis::setPowerDownOverrideTime(int)>:
void Axis::setPowerDownOverrideTime(int value) {
    1020:	b538      	push	{r3, r4, r5, lr}
    1022:	4605      	mov	r5, r0
  if (value == 0) powerDownOverride = false; else {
    1024:	460c      	mov	r4, r1
    1026:	b911      	cbnz	r1, 102e <Axis::setPowerDownOverrideTime(int)+0xe>
    1028:	f885 1062 	strb.w	r1, [r5, #98]	; 0x62
}
    102c:	bd38      	pop	{r3, r4, r5, pc}
    if (poweredDown) {
    102e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    1032:	b13b      	cbz	r3, 1044 <Axis::setPowerDownOverrideTime(int)+0x24>
      motor->enable(true);
    1034:	6800      	ldr	r0, [r0, #0]
      poweredDown = false;
    1036:	2200      	movs	r2, #0
      motor->enable(true);
    1038:	2101      	movs	r1, #1
    103a:	6803      	ldr	r3, [r0, #0]
      poweredDown = false;
    103c:	f885 206c 	strb.w	r2, [r5, #108]	; 0x6c
      motor->enable(true);
    1040:	695b      	ldr	r3, [r3, #20]
    1042:	4798      	blx	r3
	return systick_millis_count;
    1044:	4b03      	ldr	r3, [pc, #12]	; (1054 <Axis::setPowerDownOverrideTime(int)+0x34>)
    powerDownOverride = true;
    1046:	2201      	movs	r2, #1
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
    powerDownOverrideEnds = millis() + value;
    104e:	441c      	add	r4, r3
    1050:	66ac      	str	r4, [r5, #104]	; 0x68
}
    1052:	bd38      	pop	{r3, r4, r5, pc}
    1054:	20006344 	.word	0x20006344

00001058 <Axis::setBacklash(float)>:
  if (autoRate == AR_NONE) motor->setBacklashSteps(round(value*settings.stepsPerMeasure));
    1058:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
    105c:	b102      	cbz	r2, 1060 <Axis::setBacklash(float)+0x8>
    105e:	4770      	bx	lr
    1060:	4603      	mov	r3, r0
    1062:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
void Axis::setBacklash(float value) {
    1066:	b430      	push	{r4, r5}
  if (autoRate == AR_NONE) motor->setBacklashSteps(round(value*settings.stepsPerMeasure));
    1068:	6844      	ldr	r4, [r0, #4]
    106a:	689d      	ldr	r5, [r3, #8]
    106c:	6800      	ldr	r0, [r0, #0]
    106e:	ec45 4b17 	vmov	d7, r4, r5
    1072:	ee27 7b00 	vmul.f64	d7, d7, d0
}
    1076:	bc30      	pop	{r4, r5}
  if (autoRate == AR_NONE) motor->setBacklashSteps(round(value*settings.stepsPerMeasure));
    1078:	feb8 7b47 	vrinta.f64	d7, d7
    107c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1080:	ee17 1a90 	vmov	r1, s15
    1084:	f000 bfa2 	b.w	1fcc <Motor::setBacklashSteps(long)>

00001088 <Axis::resetPositionSteps(long)>:
CommandError Axis::resetPositionSteps(long value) {
    1088:	b570      	push	{r4, r5, r6, lr}
  if (autoRate != AR_NONE) return CE_SLEW_IN_MOTION;
    108a:	f890 609c 	ldrb.w	r6, [r0, #156]	; 0x9c
    108e:	b98e      	cbnz	r6, 10b4 <Axis::resetPositionSteps(long)+0x2c>
  if (motor->getFrequencySteps() != 0) return CE_SLEW_IN_MOTION;
    1090:	4604      	mov	r4, r0
    1092:	6800      	ldr	r0, [r0, #0]
    1094:	460d      	mov	r5, r1
    1096:	6803      	ldr	r3, [r0, #0]
    1098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    109a:	4798      	blx	r3
    109c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    10a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10a4:	d106      	bne.n	10b4 <Axis::resetPositionSteps(long)+0x2c>
  motor->resetPositionSteps(value);
    10a6:	6820      	ldr	r0, [r4, #0]
    10a8:	4629      	mov	r1, r5
    10aa:	6803      	ldr	r3, [r0, #0]
    10ac:	69db      	ldr	r3, [r3, #28]
    10ae:	4798      	blx	r3
}
    10b0:	4630      	mov	r0, r6
    10b2:	bd70      	pop	{r4, r5, r6, pc}
  if (autoRate != AR_NONE) return CE_SLEW_IN_MOTION;
    10b4:	2616      	movs	r6, #22
}
    10b6:	4630      	mov	r0, r6
    10b8:	bd70      	pop	{r4, r5, r6, pc}
    10ba:	bf00      	nop

000010bc <Axis::resetPosition(double)>:
CommandError Axis::resetPosition(double value) {
    10bc:	b510      	push	{r4, lr}
  return resetPositionSteps(lround(value*settings.stepsPerMeasure));
    10be:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
CommandError Axis::resetPosition(double value) {
    10c2:	4604      	mov	r4, r0
  return resetPositionSteps(lround(value*settings.stepsPerMeasure));
    10c4:	ec43 2b17 	vmov	d7, r2, r3
    10c8:	ee27 0b00 	vmul.f64	d0, d7, d0
    10cc:	f018 ff60 	bl	19f90 <lround>
    10d0:	4601      	mov	r1, r0
    10d2:	4620      	mov	r0, r4
}
    10d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return resetPositionSteps(lround(value*settings.stepsPerMeasure));
    10d8:	f7ff bfd6 	b.w	1088 <Axis::resetPositionSteps(long)>

000010dc <Axis::getIndexPosition()>:
  return motor->getIndexPositionSteps()/settings.stepsPerMeasure;
    10dc:	e9d0 1200 	ldrd	r1, r2, [r0]
    10e0:	6883      	ldr	r3, [r0, #8]
    inline long getIndexPositionSteps() { return indexSteps; }
    10e2:	ed91 0a0f 	vldr	s0, [r1, #60]	; 0x3c
    10e6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
}
    10ea:	ec43 2b17 	vmov	d7, r2, r3
    10ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
    10f2:	4770      	bx	lr

000010f4 <Axis::setInstrumentCoordinate(double)>:
  if (wrapEnabled) {
    10f4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
void Axis::setInstrumentCoordinate(double value) {
    10f8:	b510      	push	{r4, lr}
    10fa:	4604      	mov	r4, r0
  if (wrapEnabled) {
    10fc:	b193      	cbz	r3, 1124 <Axis::setInstrumentCoordinate(double)+0x30>
    10fe:	f7ff fc7d 	bl	9fc <Axis::unwrap(double) [clone .part.0]>
    1102:	eeb0 7b40 	vmov.f64	d7, d0
  setInstrumentCoordinateSteps(lround(unwrap(value)*settings.stepsPerMeasure));
    1106:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    110a:	ec43 2b16 	vmov	d6, r2, r3
    110e:	ee26 0b07 	vmul.f64	d0, d6, d7
    1112:	f018 ff3d 	bl	19f90 <lround>
    1116:	4601      	mov	r1, r0

    // set instrument coordinate, in "measures" (radians, microns, etc.)
    void setInstrumentCoordinate(double value);

    // set instrument coordinate, in steps
    inline void setInstrumentCoordinateSteps(long value) { motor->setInstrumentCoordinateSteps(value); }
    1118:	6820      	ldr	r0, [r4, #0]
    111a:	6802      	ldr	r2, [r0, #0]
}
    111c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1120:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1122:	4718      	bx	r3
    1124:	eeb0 7b40 	vmov.f64	d7, d0
    1128:	e7ed      	b.n	1106 <Axis::setInstrumentCoordinate(double)+0x12>
    112a:	bf00      	nop

0000112c <Axis::getInstrumentCoordinate()>:
double Axis::getInstrumentCoordinate() {
    112c:	b510      	push	{r4, lr}
    112e:	4604      	mov	r4, r0
  return wrap(motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure);
    1130:	6800      	ldr	r0, [r0, #0]
    1132:	6803      	ldr	r3, [r0, #0]
    1134:	6a1b      	ldr	r3, [r3, #32]
    1136:	4798      	blx	r3
    1138:	ee07 0a90 	vmov	s15, r0
    113c:	6862      	ldr	r2, [r4, #4]
    113e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    1142:	68a3      	ldr	r3, [r4, #8]
  if (wrapEnabled) {
    1144:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
  return wrap(motor->getInstrumentCoordinateSteps()/settings.stepsPerMeasure);
    1148:	ec43 2b16 	vmov	d6, r2, r3
    114c:	ee87 0b06 	vdiv.f64	d0, d7, d6
  if (wrapEnabled) {
    1150:	b339      	cbz	r1, 11a2 <Axis::getInstrumentCoordinate()+0x76>
    while (value > settings.limits.max) value -= wrapAmount;
    1152:	f8d4 3029 	ldr.w	r3, [r4, #41]	; 0x29
    1156:	ee07 3a10 	vmov	s14, r3
    115a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    115e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    1162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1166:	dd08      	ble.n	117a <Axis::getInstrumentCoordinate()+0x4e>
    1168:	ed94 6b16 	vldr	d6, [r4, #88]	; 0x58
    116c:	ee30 0b46 	vsub.f64	d0, d0, d6
    1170:	eeb4 0bc7 	vcmpe.f64	d0, d7
    1174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1178:	dcf8      	bgt.n	116c <Axis::getInstrumentCoordinate()+0x40>
    while (value < settings.limits.min) value += wrapAmount;
    117a:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
    117e:	ee07 3a10 	vmov	s14, r3
    1182:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1186:	eeb4 7bc0 	vcmpe.f64	d7, d0
    118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    118e:	dd08      	ble.n	11a2 <Axis::getInstrumentCoordinate()+0x76>
    1190:	ed94 6b16 	vldr	d6, [r4, #88]	; 0x58
    1194:	ee30 0b06 	vadd.f64	d0, d0, d6
    1198:	eeb4 7bc0 	vcmpe.f64	d7, d0
    119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11a0:	dcf8      	bgt.n	1194 <Axis::getInstrumentCoordinate()+0x68>
}
    11a2:	bd10      	pop	{r4, pc}

000011a4 <Axis::setInstrumentCoordinatePark(double)>:
void Axis::setInstrumentCoordinatePark(double value) {
    11a4:	b538      	push	{r3, r4, r5, lr}
  if (wrapEnabled) {
    11a6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
void Axis::setInstrumentCoordinatePark(double value) {
    11aa:	4604      	mov	r4, r0
  motor->setInstrumentCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    11ac:	6805      	ldr	r5, [r0, #0]
  if (wrapEnabled) {
    11ae:	b9bb      	cbnz	r3, 11e0 <Axis::setInstrumentCoordinatePark(double)+0x3c>
    11b0:	eeb0 7b40 	vmov.f64	d7, d0
  motor->setInstrumentCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    11b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    11b8:	ec43 2b16 	vmov	d6, r2, r3
    11bc:	ee26 0b07 	vmul.f64	d0, d6, d7
    11c0:	f018 fee6 	bl	19f90 <lround>
    11c4:	f8d4 200d 	ldr.w	r2, [r4, #13]
    11c8:	4601      	mov	r1, r0
    11ca:	4628      	mov	r0, r5
    11cc:	ee07 2a90 	vmov	s15, r2
    11d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
}
    11d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  motor->setInstrumentCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    11d8:	ee17 2a90 	vmov	r2, s15
    11dc:	f000 be8c 	b.w	1ef8 <Motor::setInstrumentCoordinateParkSteps(long, int)>
    11e0:	f7ff fc48 	bl	a74 <Axis::unwrapNearest(double) [clone .part.0]>
    11e4:	eeb0 7b40 	vmov.f64	d7, d0
    11e8:	e7e4      	b.n	11b4 <Axis::setInstrumentCoordinatePark(double)+0x10>
    11ea:	bf00      	nop

000011ec <Axis::setTargetCoordinatePark(double)>:
void Axis::setTargetCoordinatePark(double value) {
    11ec:	b538      	push	{r3, r4, r5, lr}
    11ee:	4604      	mov	r4, r0
  motor->setFrequencySteps(0);
    11f0:	6800      	ldr	r0, [r0, #0]
    11f2:	6803      	ldr	r3, [r0, #0]
void Axis::setTargetCoordinatePark(double value) {
    11f4:	ed2d 8b02 	vpush	{d8}
  motor->setFrequencySteps(0);
    11f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
void Axis::setTargetCoordinatePark(double value) {
    11fa:	eeb0 8b40 	vmov.f64	d8, d0
  motor->setFrequencySteps(0);
    11fe:	ed9f 0a13 	vldr	s0, [pc, #76]	; 124c <Axis::setTargetCoordinatePark(double)+0x60>
    1202:	4798      	blx	r3
  if (wrapEnabled) {
    1204:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  motor->setTargetCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    1208:	6825      	ldr	r5, [r4, #0]
  if (wrapEnabled) {
    120a:	b9bb      	cbnz	r3, 123c <Axis::setTargetCoordinatePark(double)+0x50>
  motor->setTargetCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    120c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    1210:	ec43 2b17 	vmov	d7, r2, r3
    1214:	ee27 0b08 	vmul.f64	d0, d7, d8
    1218:	f018 feba 	bl	19f90 <lround>
    121c:	f8d4 200d 	ldr.w	r2, [r4, #13]
    1220:	4601      	mov	r1, r0
    1222:	4628      	mov	r0, r5
    1224:	ee07 2a90 	vmov	s15, r2
    1228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
}
    122c:	ecbd 8b02 	vpop	{d8}
  motor->setTargetCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    1230:	ee17 2a90 	vmov	r2, s15
}
    1234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  motor->setTargetCoordinateParkSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure), settings.subdivisions);
    1238:	f000 be9c 	b.w	1f74 <Motor::setTargetCoordinateParkSteps(long, int)>
    123c:	eeb0 0b48 	vmov.f64	d0, d8
    1240:	4620      	mov	r0, r4
    1242:	f7ff fc17 	bl	a74 <Axis::unwrapNearest(double) [clone .part.0]>
    1246:	eeb0 8b40 	vmov.f64	d8, d0
    124a:	e7df      	b.n	120c <Axis::setTargetCoordinatePark(double)+0x20>
    124c:	00000000 	.word	0x00000000

00001250 <Axis::setTargetCoordinate(double)>:
  if (wrapEnabled) {
    1250:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
void Axis::setTargetCoordinate(double value) {
    1254:	b510      	push	{r4, lr}
    1256:	4604      	mov	r4, r0
  if (wrapEnabled) {
    1258:	b97b      	cbnz	r3, 127a <Axis::setTargetCoordinate(double)+0x2a>
    125a:	eeb0 7b40 	vmov.f64	d7, d0
  setTargetCoordinateSteps(lround(unwrapNearest(value)*settings.stepsPerMeasure));
    125e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    1262:	ec43 2b16 	vmov	d6, r2, r3
    1266:	ee26 0b07 	vmul.f64	d0, d6, d7
    126a:	f018 fe91 	bl	19f90 <lround>
    126e:	4601      	mov	r1, r0

    // set target coordinate, in "measures" (degrees, microns, etc.)
    void setTargetCoordinate(double value);

    // set target coordinate, in steps
    inline void setTargetCoordinateSteps(long value) { motor->setTargetCoordinateSteps(value); }
    1270:	6820      	ldr	r0, [r4, #0]
}
    1272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1276:	f000 be77 	b.w	1f68 <Motor::setTargetCoordinateSteps(long)>
    127a:	f7ff fbfb 	bl	a74 <Axis::unwrapNearest(double) [clone .part.0]>
    127e:	eeb0 7b40 	vmov.f64	d7, d0
    1282:	e7ec      	b.n	125e <Axis::setTargetCoordinate(double)+0xe>

00001284 <Axis::nearTarget()>:
bool Axis::atTarget() {
  return labs(motor->getTargetDistanceSteps()) <= targetTolerance*settings.stepsPerMeasure;
}

// returns true if within one second of the target at the backlash takeup rate
bool Axis::nearTarget() {
    1284:	b510      	push	{r4, lr}
    1286:	4604      	mov	r4, r0
  return labs(motor->getTargetDistanceSteps()) < backlashFreq*settings.stepsPerMeasure;
    1288:	6800      	ldr	r0, [r0, #0]
    128a:	6803      	ldr	r3, [r0, #0]
    128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    128e:	4798      	blx	r3
    1290:	ed94 7a25 	vldr	s14, [r4, #148]	; 0x94
    1294:	2800      	cmp	r0, #0
    1296:	6862      	ldr	r2, [r4, #4]
    1298:	68a3      	ldr	r3, [r4, #8]
    129a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    129e:	bfb8      	it	lt
    12a0:	4240      	neglt	r0, r0
    12a2:	ec43 2b15 	vmov	d5, r2, r3
    12a6:	ee25 7b07 	vmul.f64	d7, d5, d7
    12aa:	ee06 0a90 	vmov	s13, r0
    12ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    12b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
    12b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
    12ba:	bf4c      	ite	mi
    12bc:	2001      	movmi	r0, #1
    12be:	2000      	movpl	r0, #0
    12c0:	bd10      	pop	{r4, pc}
    12c2:	bf00      	nop

000012c4 <Axis::setSlewAccelerationRate(float)>:
  return motor->getOriginOrTargetDistanceSteps()/settings.stepsPerMeasure;
}

// set acceleration rate in "measures" per second per second (for autoSlew)
void Axis::setSlewAccelerationRate(float mpsps) {
  if (autoRate == AR_NONE) {
    12c4:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    12c8:	b983      	cbnz	r3, 12ec <Axis::setSlewAccelerationRate(float)+0x28>
    slewAccelRateFs = mpsps/FRACTIONAL_SEC;
    12ca:	eddf 6a09 	vldr	s13, [pc, #36]	; 12f0 <Axis::setSlewAccelerationRate(float)+0x2c>
    if (slewAccelRateFs > backlashFreq) slewAccelRateFs = backlashFreq;
    12ce:	edd0 7a25 	vldr	s15, [r0, #148]	; 0x94
    slewAccelRateFs = mpsps/FRACTIONAL_SEC;
    12d2:	ee80 7a26 	vdiv.f32	s14, s0, s13
    slewAccelTime = NAN;
    12d6:	4b07      	ldr	r3, [pc, #28]	; (12f4 <Axis::setSlewAccelerationRate(float)+0x30>)
    12d8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    if (slewAccelRateFs > backlashFreq) slewAccelRateFs = backlashFreq;
    12dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12e4:	fe77 7a87 	vselgt.f32	s15, s15, s14
    12e8:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
  }
}
    12ec:	4770      	bx	lr
    12ee:	bf00      	nop
    12f0:	44039436 	.word	0x44039436
    12f4:	7fc00000 	.word	0x7fc00000

000012f8 <Axis::setSlewAccelerationRateAbort(float)>:
  }
}

// set acceleration for emergency stop movement in "measures" per second per second
void Axis::setSlewAccelerationRateAbort(float mpsps) {
  if (autoRate == AR_NONE) {
    12f8:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    12fc:	b983      	cbnz	r3, 1320 <Axis::setSlewAccelerationRateAbort(float)+0x28>
    abortAccelRateFs = mpsps/FRACTIONAL_SEC;
    12fe:	eddf 6a09 	vldr	s13, [pc, #36]	; 1324 <Axis::setSlewAccelerationRateAbort(float)+0x2c>
    if (abortAccelRateFs > backlashFreq) abortAccelRateFs = backlashFreq;
    1302:	edd0 7a25 	vldr	s15, [r0, #148]	; 0x94
    abortAccelRateFs = mpsps/FRACTIONAL_SEC;
    1306:	ee80 7a26 	vdiv.f32	s14, s0, s13
    abortAccelTime = NAN;
    130a:	4b07      	ldr	r3, [pc, #28]	; (1328 <Axis::setSlewAccelerationRateAbort(float)+0x30>)
    130c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    if (abortAccelRateFs > backlashFreq) abortAccelRateFs = backlashFreq;
    1310:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1318:	fe77 7a87 	vselgt.f32	s15, s15, s14
    131c:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
  }
}
    1320:	4770      	bx	lr
    1322:	bf00      	nop
    1324:	44039436 	.word	0x44039436
    1328:	7fc00000 	.word	0x7fc00000

0000132c <Axis::isSlewing()>:
  poll();
}

// checks if slew is active on this axis
bool Axis::isSlewing() {
  return autoRate != AR_NONE;  
    132c:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
}
    1330:	3800      	subs	r0, #0
    1332:	bf18      	it	ne
    1334:	2001      	movne	r0, #1
    1336:	4770      	bx	lr

00001338 <Axis::setFrequencyBase(float)>:
  maxFreq = frequency;
}

// frequency for base movement in "measures" (radians, microns, etc.) per second
void Axis::setFrequencyBase(float frequency) {
  baseFreq = frequency;
    1338:	ed80 0a20 	vstr	s0, [r0, #128]	; 0x80
}
    133c:	4770      	bx	lr
    133e:	bf00      	nop

00001340 <Axis::setFrequencySlew(float)>:

// frequency for slews in "measures" (radians, microns, etc.) per second
void Axis::setFrequencySlew(float frequency) {
  if (minFreq != 0.0F && frequency < minFreq) frequency = minFreq;
    1340:	edd0 7a21 	vldr	s15, [r0, #132]	; 0x84
    1344:	eef5 7a40 	vcmp.f32	s15, #0.0
    1348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    134c:	d005      	beq.n	135a <Axis::setFrequencySlew(float)+0x1a>
    134e:	eef4 7a40 	vcmp.f32	s15, s0
    1352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1356:	fe37 0a80 	vselgt.f32	s0, s15, s0
  if (maxFreq != 0.0F && frequency > maxFreq) frequency = maxFreq;
    135a:	edd0 7a23 	vldr	s15, [r0, #140]	; 0x8c
    135e:	eef5 7a40 	vcmp.f32	s15, #0.0
    1362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1366:	d006      	beq.n	1376 <Axis::setFrequencySlew(float)+0x36>
    1368:	eef4 7a40 	vcmp.f32	s15, s0
    136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1370:	bf48      	it	mi
    1372:	eeb0 0a67 	vmovmi.f32	s0, s15
  slewFreq = frequency;

  // adjust acceleration rates if they depend on slewFreq
  if (!isnan(slewAccelTime)) slewAccelRateFs = (slewFreq/slewAccelTime)/FRACTIONAL_SEC;
    1376:	edd0 7a2a 	vldr	s15, [r0, #168]	; 0xa8
  slewFreq = frequency;
    137a:	ed80 0a22 	vstr	s0, [r0, #136]	; 0x88
  if (!isnan(slewAccelTime)) slewAccelRateFs = (slewFreq/slewAccelTime)/FRACTIONAL_SEC;
    137e:	eef4 7a67 	vcmp.f32	s15, s15
    1382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1386:	d607      	bvs.n	1398 <Axis::setFrequencySlew(float)+0x58>
    1388:	eec0 6a27 	vdiv.f32	s13, s0, s15
    138c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 13b8 <Axis::setFrequencySlew(float)+0x78>
    1390:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1394:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
  if (!isnan(abortAccelTime)) abortAccelRateFs = (slewFreq/abortAccelTime)/FRACTIONAL_SEC;
    1398:	edd0 7a2b 	vldr	s15, [r0, #172]	; 0xac
    139c:	eef4 7a67 	vcmp.f32	s15, s15
    13a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13a4:	d607      	bvs.n	13b6 <Axis::setFrequencySlew(float)+0x76>
    13a6:	eec0 6a27 	vdiv.f32	s13, s0, s15
    13aa:	ed9f 7a03 	vldr	s14, [pc, #12]	; 13b8 <Axis::setFrequencySlew(float)+0x78>
    13ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
    13b2:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
}
    13b6:	4770      	bx	lr
    13b8:	44039436 	.word	0x44039436

000013bc <Axis::setFrequency(float)>:

// set frequency in "measures" (degrees, microns, etc.) per second (0 stops motion)
void Axis::setFrequency(float frequency) {
  frequency *= scaleFreq;
    13bc:	edd0 7a24 	vldr	s15, [r0, #144]	; 0x90
  if (powerDownStandstill && frequency == 0.0F && baseFreq == 0.0F) {
    13c0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
void Axis::setFrequency(float frequency) {
    13c4:	b510      	push	{r4, lr}
    13c6:	4604      	mov	r4, r0
    13c8:	ed2d 8b02 	vpush	{d8}
  frequency *= scaleFreq;
    13cc:	ee20 8a27 	vmul.f32	s16, s0, s15
  if (powerDownStandstill && frequency == 0.0F && baseFreq == 0.0F) {
    13d0:	b123      	cbz	r3, 13dc <Axis::setFrequency(float)+0x20>
    13d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
    13d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13da:	d057      	beq.n	148c <Axis::setFrequency(float)+0xd0>
          motor->enable(false);
        }
      }
    }
  } else {
    if (poweredDown) {
    13dc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    13e0:	2b00      	cmp	r3, #0
    13e2:	d14a      	bne.n	147a <Axis::setFrequency(float)+0xbe>
    13e4:	4a5a      	ldr	r2, [pc, #360]	; (1550 <Axis::setFrequency(float)+0x194>)
      poweredDown = false;
      motor->enable(true);
    }
    powerDownTime = millis() + powerDownDelay;
    13e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    13e8:	6812      	ldr	r2, [r2, #0]
    13ea:	4413      	add	r3, r2
    13ec:	6723      	str	r3, [r4, #112]	; 0x70
  }

  if (frequency != 0.0F) {
    13ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
    13f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13f6:	d019      	beq.n	142c <Axis::setFrequency(float)+0x70>
    if (frequency < 0.0F) {
    13f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    13fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1400:	d47b      	bmi.n	14fa <Axis::setFrequency(float)+0x13e>
      if (maxFreq != 0.0F && frequency < -maxFreq) frequency = -maxFreq;
      if (minFreq != 0.0F && frequency > -minFreq) frequency = -minFreq;
    } else {
      if (minFreq != 0.0F && frequency < minFreq) frequency = minFreq;
    1402:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
    1406:	eef5 7a40 	vcmp.f32	s15, #0.0
    140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    140e:	d005      	beq.n	141c <Axis::setFrequency(float)+0x60>
    1410:	eef4 7a48 	vcmp.f32	s15, s16
    1414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1418:	fe37 8a88 	vselgt.f32	s16, s15, s16
      if (maxFreq != 0.0F && frequency > maxFreq) frequency = maxFreq;
    141c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
    1420:	eef5 7a40 	vcmp.f32	s15, #0.0
    1424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1428:	f040 8087 	bne.w	153a <Axis::setFrequency(float)+0x17e>
    }
  }

  // apply base frequency as required
  if (enabled) {
    142c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1430:	b1cb      	cbz	r3, 1466 <Axis::setFrequency(float)+0xaa>
    if (autoRate == AR_NONE) {
    1432:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1436:	2b00      	cmp	r3, #0
    1438:	d14d      	bne.n	14d6 <Axis::setFrequency(float)+0x11a>
      motor->setFrequencySteps((frequency + baseFreq)*settings.stepsPerMeasure);
    143a:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
    143e:	68a3      	ldr	r3, [r4, #8]
    1440:	ee38 0a27 	vadd.f32	s0, s16, s15
    1444:	e9d4 0200 	ldrd	r0, r2, [r4]
    1448:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    144c:	6801      	ldr	r1, [r0, #0]
    144e:	ec43 2b17 	vmov	d7, r2, r3
    1452:	ee20 0b07 	vmul.f64	d0, d0, d7
    1456:	6b09      	ldr	r1, [r1, #48]	; 0x30
      motor->setFrequencySteps(frequency*settings.stepsPerMeasure);
    }
  } else {
    motor->setFrequencySteps(0.0F);
  }
}
    1458:	ecbd 8b02 	vpop	{d8}
      motor->setFrequencySteps((frequency + baseFreq)*settings.stepsPerMeasure);
    145c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
}
    1460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      motor->setFrequencySteps((frequency + baseFreq)*settings.stepsPerMeasure);
    1464:	4708      	bx	r1
    motor->setFrequencySteps(0.0F);
    1466:	6820      	ldr	r0, [r4, #0]
    1468:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 1554 <Axis::setFrequency(float)+0x198>
    146c:	6803      	ldr	r3, [r0, #0]
}
    146e:	ecbd 8b02 	vpop	{d8}
    motor->setFrequencySteps(0.0F);
    1472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    1474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    motor->setFrequencySteps(0.0F);
    1478:	4718      	bx	r3
      motor->enable(true);
    147a:	6820      	ldr	r0, [r4, #0]
      poweredDown = false;
    147c:	2200      	movs	r2, #0
      motor->enable(true);
    147e:	2101      	movs	r1, #1
    1480:	6803      	ldr	r3, [r0, #0]
      poweredDown = false;
    1482:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
      motor->enable(true);
    1486:	695b      	ldr	r3, [r3, #20]
    1488:	4798      	blx	r3
    148a:	e7ab      	b.n	13e4 <Axis::setFrequency(float)+0x28>
  if (powerDownStandstill && frequency == 0.0F && baseFreq == 0.0F) {
    148c:	edd0 7a20 	vldr	s15, [r0, #128]	; 0x80
    1490:	eef5 7a40 	vcmp.f32	s15, #0.0
    1494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1498:	d1a0      	bne.n	13dc <Axis::setFrequency(float)+0x20>
    if (!poweredDown) {
    149a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    149e:	2b00      	cmp	r3, #0
    14a0:	d1a5      	bne.n	13ee <Axis::setFrequency(float)+0x32>
      if (!powerDownOverride || (long)(millis() - powerDownOverrideEnds) > 0) {
    14a2:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    14a6:	2b00      	cmp	r3, #0
    14a8:	d04f      	beq.n	154a <Axis::setFrequency(float)+0x18e>
    14aa:	4b29      	ldr	r3, [pc, #164]	; (1550 <Axis::setFrequency(float)+0x194>)
    14ac:	6e81      	ldr	r1, [r0, #104]	; 0x68
    14ae:	681a      	ldr	r2, [r3, #0]
    14b0:	1a52      	subs	r2, r2, r1
    14b2:	2a00      	cmp	r2, #0
    14b4:	dd9b      	ble.n	13ee <Axis::setFrequency(float)+0x32>
    14b6:	681b      	ldr	r3, [r3, #0]
        powerDownOverride = false;
    14b8:	2100      	movs	r1, #0
        if ((long)(millis() - powerDownTime) > 0) {
    14ba:	6f22      	ldr	r2, [r4, #112]	; 0x70
        powerDownOverride = false;
    14bc:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
        if ((long)(millis() - powerDownTime) > 0) {
    14c0:	1a9b      	subs	r3, r3, r2
    14c2:	428b      	cmp	r3, r1
    14c4:	dd93      	ble.n	13ee <Axis::setFrequency(float)+0x32>
          motor->enable(false);
    14c6:	6820      	ldr	r0, [r4, #0]
          poweredDown = true;
    14c8:	2201      	movs	r2, #1
          motor->enable(false);
    14ca:	6803      	ldr	r3, [r0, #0]
          poweredDown = true;
    14cc:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
          motor->enable(false);
    14d0:	695b      	ldr	r3, [r3, #20]
    14d2:	4798      	blx	r3
    14d4:	e78b      	b.n	13ee <Axis::setFrequency(float)+0x32>
      motor->setFrequencySteps(frequency*settings.stepsPerMeasure);
    14d6:	68a3      	ldr	r3, [r4, #8]
    14d8:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    14dc:	6862      	ldr	r2, [r4, #4]
    14de:	6820      	ldr	r0, [r4, #0]
    14e0:	ec43 2b17 	vmov	d7, r2, r3
    14e4:	ee27 0b00 	vmul.f64	d0, d7, d0
    14e8:	6801      	ldr	r1, [r0, #0]
    14ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
}
    14ec:	ecbd 8b02 	vpop	{d8}
      motor->setFrequencySteps(frequency*settings.stepsPerMeasure);
    14f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
}
    14f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      motor->setFrequencySteps(frequency*settings.stepsPerMeasure);
    14f8:	4718      	bx	r3
      if (maxFreq != 0.0F && frequency < -maxFreq) frequency = -maxFreq;
    14fa:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
    14fe:	eef5 7a40 	vcmp.f32	s15, #0.0
    1502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1506:	d007      	beq.n	1518 <Axis::setFrequency(float)+0x15c>
    1508:	eef1 7a67 	vneg.f32	s15, s15
    150c:	eef4 7a48 	vcmp.f32	s15, s16
    1510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1514:	fe37 8a88 	vselgt.f32	s16, s15, s16
      if (minFreq != 0.0F && frequency > -minFreq) frequency = -minFreq;
    1518:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
    151c:	eef5 7a40 	vcmp.f32	s15, #0.0
    1520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1524:	d082      	beq.n	142c <Axis::setFrequency(float)+0x70>
    1526:	eef1 7a67 	vneg.f32	s15, s15
    152a:	eef4 7a48 	vcmp.f32	s15, s16
    152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1532:	bf48      	it	mi
    1534:	eeb0 8a67 	vmovmi.f32	s16, s15
    1538:	e778      	b.n	142c <Axis::setFrequency(float)+0x70>
      if (maxFreq != 0.0F && frequency > maxFreq) frequency = maxFreq;
    153a:	eef4 7a48 	vcmp.f32	s15, s16
    153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1542:	bf48      	it	mi
    1544:	eeb0 8a67 	vmovmi.f32	s16, s15
    1548:	e770      	b.n	142c <Axis::setFrequency(float)+0x70>
    154a:	4b01      	ldr	r3, [pc, #4]	; (1550 <Axis::setFrequency(float)+0x194>)
    154c:	e7b3      	b.n	14b6 <Axis::setFrequency(float)+0xfa>
    154e:	bf00      	nop
    1550:	20006344 	.word	0x20006344
    1554:	00000000 	.word	0x00000000

00001558 <Axis::getStatus()>:
  return backlashFreq;
}

// get associated motor driver status
DriverStatus Axis::getStatus() {
  return motor->getDriverStatus();
    1558:	6809      	ldr	r1, [r1, #0]
    155a:	680b      	ldr	r3, [r1, #0]
DriverStatus Axis::getStatus() {
    155c:	b510      	push	{r4, lr}
    155e:	4604      	mov	r4, r0
  return motor->getDriverStatus();
    1560:	699b      	ldr	r3, [r3, #24]
    1562:	4798      	blx	r3
}
    1564:	4620      	mov	r0, r4
    1566:	bd10      	pop	{r4, pc}

00001568 <Axis::setMotionLimitsCheck(bool)>:

void Axis::setMotionLimitsCheck(bool state) {
  limitsCheck = state;
    1568:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
}
    156c:	4770      	bx	lr
    156e:	bf00      	nop

00001570 <Axis::motionError(Direction)>:

// checks for an error that would disallow motion in a given direction or DIR_BOTH for either direction
bool Axis::motionError(Direction direction) {
  bool result = false;

  if (direction == DIR_FORWARD || direction == DIR_BOTH) {
    1570:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    1574:	2b01      	cmp	r3, #1
bool Axis::motionError(Direction direction) {
    1576:	b510      	push	{r4, lr}
    1578:	4604      	mov	r4, r0
  if (direction == DIR_FORWARD || direction == DIR_BOTH) {
    157a:	d11a      	bne.n	15b2 <Axis::motionError(Direction)+0x42>
    inline long getInstrumentCoordinateSteps() { return motor->getInstrumentCoordinateSteps(); }
    157c:	6800      	ldr	r0, [r0, #0]
    157e:	6803      	ldr	r3, [r0, #0]
    1580:	6a1b      	ldr	r3, [r3, #32]
    1582:	4798      	blx	r3
    result = getInstrumentCoordinateSteps() > lroundf(0.9F*INT32_MAX) ||
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() > settings.limits.max + 1.0F/this->settings.stepsPerMeasure) ||
    1584:	4b32      	ldr	r3, [pc, #200]	; (1650 <Axis::motionError(Direction)+0xe0>)
    1586:	4298      	cmp	r0, r3
    1588:	dd03      	ble.n	1592 <Axis::motionError(Direction)+0x22>
    158a:	2001      	movs	r0, #1
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() < settings.limits.min - 1.0F/this->settings.stepsPerMeasure) ||
             (!commonMinMaxSense && errors.minLimitSensed);
    if (result == true && result != lastErrorResult) { V(axisPrefix); VLF("motion error reverse limit"); }
  }

  lastErrorResult = result;
    158c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f

  return lastErrorResult;
}
    1590:	bd10      	pop	{r4, pc}
    result = getInstrumentCoordinateSteps() > lroundf(0.9F*INT32_MAX) ||
    1592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    1596:	b113      	cbz	r3, 159e <Axis::motionError(Direction)+0x2e>
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() > settings.limits.max + 1.0F/this->settings.stepsPerMeasure) ||
    1598:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    159c:	b32b      	cbz	r3, 15ea <Axis::motionError(Direction)+0x7a>
    159e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    15a2:	b9cb      	cbnz	r3, 15d8 <Axis::motionError(Direction)+0x68>
             (!commonMinMaxSense && errors.maxLimitSensed);
    15a4:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    15a8:	f3c0 0040 	ubfx	r0, r0, #1, #1
  lastErrorResult = result;
    15ac:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
    15b0:	bd10      	pop	{r4, pc}
  if (direction == DIR_REVERSE || direction == DIR_BOTH) {
    15b2:	3902      	subs	r1, #2
    15b4:	2901      	cmp	r1, #1
    15b6:	d80f      	bhi.n	15d8 <Axis::motionError(Direction)+0x68>
    15b8:	6800      	ldr	r0, [r0, #0]
    15ba:	6803      	ldr	r3, [r0, #0]
    15bc:	6a1b      	ldr	r3, [r3, #32]
    15be:	4798      	blx	r3
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() < settings.limits.min - 1.0F/this->settings.stepsPerMeasure) ||
    15c0:	4b24      	ldr	r3, [pc, #144]	; (1654 <Axis::motionError(Direction)+0xe4>)
    15c2:	4298      	cmp	r0, r3
    15c4:	dbe1      	blt.n	158a <Axis::motionError(Direction)+0x1a>
    result = getInstrumentCoordinateSteps() < lroundf(0.9F*INT32_MIN) ||
    15c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    15ca:	b113      	cbz	r3, 15d2 <Axis::motionError(Direction)+0x62>
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() < settings.limits.min - 1.0F/this->settings.stepsPerMeasure) ||
    15cc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    15d0:	b323      	cbz	r3, 161c <Axis::motionError(Direction)+0xac>
    15d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    15d6:	b11b      	cbz	r3, 15e0 <Axis::motionError(Direction)+0x70>
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() > settings.limits.max + 1.0F/this->settings.stepsPerMeasure) ||
    15d8:	2000      	movs	r0, #0
  lastErrorResult = result;
    15da:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
    15de:	bd10      	pop	{r4, pc}
             (!commonMinMaxSense && errors.minLimitSensed);
    15e0:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
    15e4:	f000 0001 	and.w	r0, r0, #1
    15e8:	e7d0      	b.n	158c <Axis::motionError(Direction)+0x1c>
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() > settings.limits.max + 1.0F/this->settings.stepsPerMeasure) ||
    15ea:	4620      	mov	r0, r4
    15ec:	f7ff fd9e 	bl	112c <Axis::getInstrumentCoordinate()>
    15f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    15f4:	68a3      	ldr	r3, [r4, #8]
    15f6:	6862      	ldr	r2, [r4, #4]
    15f8:	ec43 2b17 	vmov	d7, r2, r3
    15fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
    1600:	f8d4 3029 	ldr.w	r3, [r4, #41]	; 0x29
    1604:	ee06 3a10 	vmov	s12, r3
    1608:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    160c:	ee37 7b06 	vadd.f64	d7, d7, d6
    1610:	eeb4 0bc7 	vcmpe.f64	d0, d7
    1614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1618:	dcb7      	bgt.n	158a <Axis::motionError(Direction)+0x1a>
    161a:	e7c0      	b.n	159e <Axis::motionError(Direction)+0x2e>
             (limitsCheck && homingStage == HOME_NONE && getInstrumentCoordinate() < settings.limits.min - 1.0F/this->settings.stepsPerMeasure) ||
    161c:	4620      	mov	r0, r4
    161e:	f7ff fd85 	bl	112c <Axis::getInstrumentCoordinate()>
    1622:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    1626:	6862      	ldr	r2, [r4, #4]
    1628:	68a3      	ldr	r3, [r4, #8]
    162a:	f8d4 1025 	ldr.w	r1, [r4, #37]	; 0x25
    162e:	ec43 2b16 	vmov	d6, r2, r3
    1632:	ee85 6b06 	vdiv.f64	d6, d5, d6
    1636:	ee07 1a10 	vmov	s14, r1
    163a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    163e:	ee37 7b46 	vsub.f64	d7, d7, d6
    1642:	eeb4 0bc7 	vcmpe.f64	d0, d7
    1646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    164a:	d49e      	bmi.n	158a <Axis::motionError(Direction)+0x1a>
    164c:	e7c1      	b.n	15d2 <Axis::motionError(Direction)+0x62>
    164e:	bf00      	nop
    1650:	73333300 	.word	0x73333300
    1654:	8ccccd00 	.word	0x8ccccd00

00001658 <Axis::autoGoto(float)>:
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    1658:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
CommandError Axis::autoGoto(float frequency) {
    165c:	b530      	push	{r4, r5, lr}
    165e:	ed2d 8b02 	vpush	{d8}
    1662:	b085      	sub	sp, #20
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    1664:	2b00      	cmp	r3, #0
    1666:	d03b      	beq.n	16e0 <Axis::autoGoto(float)+0x88>
  if (autoRate != AR_NONE) return CE_SLEW_IN_SLEW;
    1668:	f890 509c 	ldrb.w	r5, [r0, #156]	; 0x9c
    166c:	4604      	mov	r4, r0
    166e:	2d00      	cmp	r5, #0
    1670:	d130      	bne.n	16d4 <Axis::autoGoto(float)+0x7c>
  if (motionError(DIR_BOTH)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    1672:	2103      	movs	r1, #3
    1674:	eeb0 8a40 	vmov.f32	s16, s0
    1678:	f7ff ff7a 	bl	1570 <Axis::motionError(Direction)>
    167c:	2800      	cmp	r0, #0
    167e:	d135      	bne.n	16ec <Axis::autoGoto(float)+0x94>

    // get synchronized state (automatic movement of target at setFrequencySteps() rate)
    inline bool getSynchronized() { return motor->getSynchronized(); }

    // report fault status of motor driver, if available
    inline bool motorFault() { return motor->getDriverStatus().fault; };
    1680:	6821      	ldr	r1, [r4, #0]
    1682:	a801      	add	r0, sp, #4
    1684:	680b      	ldr	r3, [r1, #0]
    1686:	699b      	ldr	r3, [r3, #24]
    1688:	4798      	blx	r3
    168a:	f89d 300c 	ldrb.w	r3, [sp, #12]
  if (motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    168e:	bb9b      	cbnz	r3, 16f8 <Axis::autoGoto(float)+0xa0>
  if (!isnan(frequency)) setFrequencySlew(frequency);
    1690:	eeb4 8a48 	vcmp.f32	s16, s16
    1694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1698:	d604      	bvs.n	16a4 <Axis::autoGoto(float)+0x4c>
    169a:	eeb0 0a48 	vmov.f32	s0, s16
    169e:	4620      	mov	r0, r4
    16a0:	f7ff fe4e 	bl	1340 <Axis::setFrequencySlew(float)>
  motor->markOriginCoordinateSteps();
    16a4:	6820      	ldr	r0, [r4, #0]
    16a6:	f000 fc97 	bl	1fd8 <Motor::markOriginCoordinateSteps()>
  motor->setSynchronized(false);
    16aa:	6820      	ldr	r0, [r4, #0]
    16ac:	4916      	ldr	r1, [pc, #88]	; (1708 <Axis::autoGoto(float)+0xb0>)
    16ae:	6803      	ldr	r3, [r0, #0]
    16b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    16b2:	428a      	cmp	r2, r1
    16b4:	d122      	bne.n	16fc <Axis::autoGoto(float)+0xa4>
      } else sync = state;
    16b6:	2200      	movs	r2, #0
    16b8:	7742      	strb	r2, [r0, #29]
  motor->setSlewing(true);
    16ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    16bc:	2101      	movs	r1, #1
    16be:	4798      	blx	r3
  autoRate = AR_RATE_BY_DISTANCE;
    16c0:	2203      	movs	r2, #3
  rampFreq = 0.0F;
    16c2:	2300      	movs	r3, #0
  autoRate = AR_RATE_BY_DISTANCE;
    16c4:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
  rampFreq = 0.0F;
    16c8:	67e3      	str	r3, [r4, #124]	; 0x7c
}
    16ca:	4628      	mov	r0, r5
    16cc:	b005      	add	sp, #20
    16ce:	ecbd 8b02 	vpop	{d8}
    16d2:	bd30      	pop	{r4, r5, pc}
  if (autoRate != AR_NONE) return CE_SLEW_IN_SLEW;
    16d4:	2513      	movs	r5, #19
}
    16d6:	4628      	mov	r0, r5
    16d8:	b005      	add	sp, #20
    16da:	ecbd 8b02 	vpop	{d8}
    16de:	bd30      	pop	{r4, r5, pc}
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    16e0:	2511      	movs	r5, #17
}
    16e2:	4628      	mov	r0, r5
    16e4:	b005      	add	sp, #20
    16e6:	ecbd 8b02 	vpop	{d8}
    16ea:	bd30      	pop	{r4, r5, pc}
  if (motionError(DIR_BOTH)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    16ec:	2514      	movs	r5, #20
}
    16ee:	4628      	mov	r0, r5
    16f0:	b005      	add	sp, #20
    16f2:	ecbd 8b02 	vpop	{d8}
    16f6:	bd30      	pop	{r4, r5, pc}
  if (motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    16f8:	2515      	movs	r5, #21
    16fa:	e7e6      	b.n	16ca <Axis::autoGoto(float)+0x72>
  motor->setSynchronized(false);
    16fc:	2100      	movs	r1, #0
    16fe:	4790      	blx	r2
  motor->setSlewing(true);
    1700:	6820      	ldr	r0, [r4, #0]
    1702:	6803      	ldr	r3, [r0, #0]
    1704:	e7d9      	b.n	16ba <Axis::autoGoto(float)+0x62>
    1706:	bf00      	nop
    1708:	000009e5 	.word	0x000009e5

0000170c <Axis::autoSlew(Direction, float)>:
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    170c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    1710:	2b00      	cmp	r3, #0
    1712:	d04a      	beq.n	17aa <Axis::autoSlew(Direction, float)+0x9e>
  if (autoRate == AR_RATE_BY_DISTANCE) return CE_SLEW_IN_SLEW;
    1714:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    1718:	2b03      	cmp	r3, #3
CommandError Axis::autoSlew(Direction direction, float frequency) {
    171a:	b530      	push	{r4, r5, lr}
    171c:	4604      	mov	r4, r0
    171e:	ed2d 8b02 	vpush	{d8}
    1722:	b085      	sub	sp, #20
  if (autoRate == AR_RATE_BY_DISTANCE) return CE_SLEW_IN_SLEW;
    1724:	d04a      	beq.n	17bc <Axis::autoSlew(Direction, float)+0xb0>
  if (direction != DIR_FORWARD && direction != DIR_REVERSE) return CE_SLEW_ERR_UNSPECIFIED;
    1726:	1e4b      	subs	r3, r1, #1
    1728:	460d      	mov	r5, r1
    172a:	2b01      	cmp	r3, #1
    172c:	d838      	bhi.n	17a0 <Axis::autoSlew(Direction, float)+0x94>
  if (motionError(direction)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    172e:	eeb0 8a40 	vmov.f32	s16, s0
    1732:	f7ff ff1d 	bl	1570 <Axis::motionError(Direction)>
    1736:	2800      	cmp	r0, #0
    1738:	d13b      	bne.n	17b2 <Axis::autoSlew(Direction, float)+0xa6>
    173a:	6821      	ldr	r1, [r4, #0]
    173c:	a801      	add	r0, sp, #4
    173e:	680b      	ldr	r3, [r1, #0]
    1740:	699b      	ldr	r3, [r3, #24]
    1742:	4798      	blx	r3
    1744:	f89d 300c 	ldrb.w	r3, [sp, #12]
  if (motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    1748:	2b00      	cmp	r3, #0
    174a:	d130      	bne.n	17ae <Axis::autoSlew(Direction, float)+0xa2>
  if (!isnan(frequency)) setFrequencySlew(frequency);
    174c:	eeb4 8a48 	vcmp.f32	s16, s16
    1750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1754:	d604      	bvs.n	1760 <Axis::autoSlew(Direction, float)+0x54>
    1756:	eeb0 0a48 	vmov.f32	s0, s16
    175a:	4620      	mov	r0, r4
    175c:	f7ff fdf0 	bl	1340 <Axis::setFrequencySlew(float)>
  if (autoRate == AR_NONE) {
    1760:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1764:	b983      	cbnz	r3, 1788 <Axis::autoSlew(Direction, float)+0x7c>
    motor->setSynchronized(true);
    1766:	6820      	ldr	r0, [r4, #0]
    1768:	4a17      	ldr	r2, [pc, #92]	; (17c8 <Axis::autoSlew(Direction, float)+0xbc>)
    176a:	6803      	ldr	r3, [r0, #0]
    176c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    176e:	4293      	cmp	r3, r2
    1770:	d126      	bne.n	17c0 <Axis::autoSlew(Direction, float)+0xb4>
        noInterrupts();
    1772:	b672      	cpsid	i
        sync = state;
    1774:	2301      	movs	r3, #1
    1776:	7743      	strb	r3, [r0, #29]
        targetSteps = motorSteps;
    1778:	6b83      	ldr	r3, [r0, #56]	; 0x38
    177a:	6343      	str	r3, [r0, #52]	; 0x34
        interrupts();
    177c:	b662      	cpsie	i
    motor->setSlewing(true);
    177e:	6820      	ldr	r0, [r4, #0]
    1780:	2101      	movs	r1, #1
    1782:	6803      	ldr	r3, [r0, #0]
    1784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1786:	4798      	blx	r3
  if (direction == DIR_FORWARD) {
    1788:	2d01      	cmp	r5, #1
  return CE_NONE;
    178a:	f04f 0000 	mov.w	r0, #0
    autoRate = AR_RATE_BY_TIME_FORWARD;
    178e:	bf0c      	ite	eq
    1790:	2304      	moveq	r3, #4
    autoRate = AR_RATE_BY_TIME_REVERSE;
    1792:	2305      	movne	r3, #5
    1794:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
}
    1798:	b005      	add	sp, #20
    179a:	ecbd 8b02 	vpop	{d8}
    179e:	bd30      	pop	{r4, r5, pc}
  if (direction != DIR_FORWARD && direction != DIR_REVERSE) return CE_SLEW_ERR_UNSPECIFIED;
    17a0:	2017      	movs	r0, #23
}
    17a2:	b005      	add	sp, #20
    17a4:	ecbd 8b02 	vpop	{d8}
    17a8:	bd30      	pop	{r4, r5, pc}
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    17aa:	2011      	movs	r0, #17
}
    17ac:	4770      	bx	lr
  if (motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    17ae:	2015      	movs	r0, #21
    17b0:	e7f7      	b.n	17a2 <Axis::autoSlew(Direction, float)+0x96>
  if (motionError(direction)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    17b2:	2014      	movs	r0, #20
}
    17b4:	b005      	add	sp, #20
    17b6:	ecbd 8b02 	vpop	{d8}
    17ba:	bd30      	pop	{r4, r5, pc}
  if (autoRate == AR_RATE_BY_DISTANCE) return CE_SLEW_IN_SLEW;
    17bc:	2013      	movs	r0, #19
    17be:	e7f0      	b.n	17a2 <Axis::autoSlew(Direction, float)+0x96>
    motor->setSynchronized(true);
    17c0:	2101      	movs	r1, #1
    17c2:	4798      	blx	r3
    17c4:	e7db      	b.n	177e <Axis::autoSlew(Direction, float)+0x72>
    17c6:	bf00      	nop
    17c8:	000009e5 	.word	0x000009e5

000017cc <Axis::autoSlewHome(unsigned long)>:
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    17cc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
CommandError Axis::autoSlewHome(unsigned long timeout) {
    17d0:	b570      	push	{r4, r5, r6, lr}
    17d2:	b084      	sub	sp, #16
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    17d4:	2b00      	cmp	r3, #0
    17d6:	d05d      	beq.n	1894 <Axis::autoSlewHome(unsigned long)+0xc8>
  if (autoRate != AR_NONE) return CE_SLEW_IN_SLEW;
    17d8:	f890 509c 	ldrb.w	r5, [r0, #156]	; 0x9c
    17dc:	4604      	mov	r4, r0
    17de:	2d00      	cmp	r5, #0
    17e0:	d154      	bne.n	188c <Axis::autoSlewHome(unsigned long)+0xc0>
  if (motionError(DIR_BOTH)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    17e2:	460e      	mov	r6, r1
    17e4:	2103      	movs	r1, #3
    17e6:	f7ff fec3 	bl	1570 <Axis::motionError(Direction)>
    17ea:	2800      	cmp	r0, #0
    17ec:	d156      	bne.n	189c <Axis::autoSlewHome(unsigned long)+0xd0>
    17ee:	6821      	ldr	r1, [r4, #0]
    17f0:	a801      	add	r0, sp, #4
    17f2:	680b      	ldr	r3, [r1, #0]
    17f4:	699b      	ldr	r3, [r3, #24]
    17f6:	4798      	blx	r3
    17f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
  if (motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    17fc:	2b00      	cmp	r3, #0
    17fe:	d151      	bne.n	18a4 <Axis::autoSlewHome(unsigned long)+0xd8>
  if (pins->axisSense.homeTrigger != OFF) {
    1800:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    1804:	689b      	ldr	r3, [r3, #8]
    1806:	3301      	adds	r3, #1
    1808:	d03d      	beq.n	1886 <Axis::autoSlewHome(unsigned long)+0xba>
    motor->setSynchronized(true);
    180a:	6820      	ldr	r0, [r4, #0]
    180c:	4a28      	ldr	r2, [pc, #160]	; (18b0 <Axis::autoSlewHome(unsigned long)+0xe4>)
    180e:	6803      	ldr	r3, [r0, #0]
    1810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1812:	4293      	cmp	r3, r2
    1814:	d148      	bne.n	18a8 <Axis::autoSlewHome(unsigned long)+0xdc>
        noInterrupts();
    1816:	b672      	cpsid	i
        sync = state;
    1818:	2301      	movs	r3, #1
    181a:	7743      	strb	r3, [r0, #29]
        targetSteps = motorSteps;
    181c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    181e:	6343      	str	r3, [r0, #52]	; 0x34
        interrupts();
    1820:	b662      	cpsie	i
    if (homingStage == HOME_NONE) homingStage = HOME_FAST;
    1822:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    1826:	b913      	cbnz	r3, 182e <Axis::autoSlewHome(unsigned long)+0x62>
    1828:	2303      	movs	r3, #3
    182a:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    if (autoRate == AR_NONE) {
    182e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1832:	b923      	cbnz	r3, 183e <Axis::autoSlewHome(unsigned long)+0x72>
      motor->setSlewing(true);
    1834:	6820      	ldr	r0, [r4, #0]
    1836:	2101      	movs	r1, #1
    1838:	6803      	ldr	r3, [r0, #0]
    183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    183c:	4798      	blx	r3
    if (sense.isOn(homeSenseHandle)) {
    183e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    1842:	481c      	ldr	r0, [pc, #112]	; (18b4 <Axis::autoSlewHome(unsigned long)+0xe8>)
    1844:	f003 fe12 	bl	546c <Sense::isOn(unsigned char)>
      autoRate = AR_RATE_BY_TIME_REVERSE;
    1848:	2800      	cmp	r0, #0
    184a:	bf14      	ite	ne
    184c:	2304      	movne	r3, #4
    184e:	2305      	moveq	r3, #5
    1850:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
    if (timeout == 0) timeout = (pins->axisSense.homeDistLimit/slewFreq)*1.2F*1000.0F;
    1854:	b99e      	cbnz	r6, 187e <Axis::autoSlewHome(unsigned long)+0xb2>
    1856:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    185a:	ed94 6a22 	vldr	s12, [r4, #136]	; 0x88
    185e:	edd3 5a04 	vldr	s11, [r3, #16]
    1862:	eddf 6a15 	vldr	s13, [pc, #84]	; 18b8 <Axis::autoSlewHome(unsigned long)+0xec>
    1866:	eec5 7a86 	vdiv.f32	s15, s11, s12
    186a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 18bc <Axis::autoSlewHome(unsigned long)+0xf0>
    186e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1872:	ee67 7a87 	vmul.f32	s15, s15, s14
    1876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    187a:	ee17 6a90 	vmov	r6, s15
    187e:	4b10      	ldr	r3, [pc, #64]	; (18c0 <Axis::autoSlewHome(unsigned long)+0xf4>)
    1880:	681b      	ldr	r3, [r3, #0]
    homeTimeoutTime = millis() + timeout;
    1882:	4433      	add	r3, r6
    1884:	6763      	str	r3, [r4, #116]	; 0x74
}
    1886:	4628      	mov	r0, r5
    1888:	b004      	add	sp, #16
    188a:	bd70      	pop	{r4, r5, r6, pc}
  if (autoRate != AR_NONE) return CE_SLEW_IN_SLEW;
    188c:	2513      	movs	r5, #19
}
    188e:	4628      	mov	r0, r5
    1890:	b004      	add	sp, #16
    1892:	bd70      	pop	{r4, r5, r6, pc}
  if (!enabled) return CE_SLEW_ERR_IN_STANDBY;
    1894:	2511      	movs	r5, #17
}
    1896:	4628      	mov	r0, r5
    1898:	b004      	add	sp, #16
    189a:	bd70      	pop	{r4, r5, r6, pc}
  if (motionError(DIR_BOTH)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    189c:	2514      	movs	r5, #20
}
    189e:	4628      	mov	r0, r5
    18a0:	b004      	add	sp, #16
    18a2:	bd70      	pop	{r4, r5, r6, pc}
  if (motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    18a4:	2515      	movs	r5, #21
    18a6:	e7ee      	b.n	1886 <Axis::autoSlewHome(unsigned long)+0xba>
    motor->setSynchronized(true);
    18a8:	2101      	movs	r1, #1
    18aa:	4798      	blx	r3
    18ac:	e7b9      	b.n	1822 <Axis::autoSlewHome(unsigned long)+0x56>
    18ae:	bf00      	nop
    18b0:	000009e5 	.word	0x000009e5
    18b4:	200062f8 	.word	0x200062f8
    18b8:	3f99999a 	.word	0x3f99999a
    18bc:	447a0000 	.word	0x447a0000
    18c0:	20006344 	.word	0x20006344

000018c4 <Axis::poll() [clone .part.0]>:
void Axis::poll() {
    18c4:	b530      	push	{r4, r5, lr}
    18c6:	4604      	mov	r4, r0
  errors.minLimitSensed = sense.isOn(minSenseHandle);
    18c8:	4898      	ldr	r0, [pc, #608]	; (1b2c <Axis::poll() [clone .part.0]+0x268>)
void Axis::poll() {
    18ca:	ed2d 8b02 	vpush	{d8}
    18ce:	b085      	sub	sp, #20
  errors.minLimitSensed = sense.isOn(minSenseHandle);
    18d0:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
    18d4:	f003 fdca 	bl	546c <Sense::isOn(unsigned char)>
    18d8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    18dc:	4602      	mov	r2, r0
  errors.maxLimitSensed = sense.isOn(maxSenseHandle);
    18de:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    18e2:	4892      	ldr	r0, [pc, #584]	; (1b2c <Axis::poll() [clone .part.0]+0x268>)
  errors.minLimitSensed = sense.isOn(minSenseHandle);
    18e4:	f362 0300 	bfi	r3, r2, #0, #1
    18e8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  errors.maxLimitSensed = sense.isOn(maxSenseHandle);
    18ec:	f003 fdbe 	bl	546c <Sense::isOn(unsigned char)>
    18f0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
  bool commonMinMaxSensed = commonMinMaxSense && (errors.minLimitSensed || errors.maxLimitSensed);
    18f4:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
  errors.maxLimitSensed = sense.isOn(maxSenseHandle);
    18f8:	f360 0341 	bfi	r3, r0, #1, #1
    18fc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  bool commonMinMaxSensed = commonMinMaxSense && (errors.minLimitSensed || errors.maxLimitSensed);
    1900:	b125      	cbz	r5, 190c <Axis::poll() [clone .part.0]+0x48>
    1902:	b2dd      	uxtb	r5, r3
    1904:	f015 0503 	ands.w	r5, r5, #3
    1908:	bf18      	it	ne
    190a:	2501      	movne	r5, #1
  if (homingStage != HOME_NONE && (autoRate == AR_RATE_BY_TIME_FORWARD || autoRate == AR_RATE_BY_TIME_REVERSE)) {
    190c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    1910:	b123      	cbz	r3, 191c <Axis::poll() [clone .part.0]+0x58>
    1912:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1916:	1f1a      	subs	r2, r3, #4
    1918:	2a01      	cmp	r2, #1
    191a:	d94d      	bls.n	19b8 <Axis::poll() [clone .part.0]+0xf4>
  Y;
    191c:	4884      	ldr	r0, [pc, #528]	; (1b30 <Axis::poll() [clone .part.0]+0x26c>)
    191e:	f004 fd8f 	bl	6440 <Tasks::yield()>
  if (autoRate != AR_NONE && !motor->inBacklash) {
    1922:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1926:	b113      	cbz	r3, 192e <Axis::poll() [clone .part.0]+0x6a>
    1928:	6820      	ldr	r0, [r4, #0]
    192a:	7a02      	ldrb	r2, [r0, #8]
    192c:	b312      	cbz	r2, 1974 <Axis::poll() [clone .part.0]+0xb0>
    freq = 0.0F;
    192e:	2300      	movs	r3, #0
    1930:	67a3      	str	r3, [r4, #120]	; 0x78
    if (commonMinMaxSensed || motionError(DIR_BOTH) || motorFault()) baseFreq = 0.0F;
    1932:	2d00      	cmp	r5, #0
    1934:	d055      	beq.n	19e2 <Axis::poll() [clone .part.0]+0x11e>
    1936:	2300      	movs	r3, #0
    1938:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  Y;
    193c:	487c      	ldr	r0, [pc, #496]	; (1b30 <Axis::poll() [clone .part.0]+0x26c>)
    193e:	f004 fd7f 	bl	6440 <Tasks::yield()>
  setFrequency(freq);
    1942:	4620      	mov	r0, r4
    1944:	ed94 0a1e 	vldr	s0, [r4, #120]	; 0x78
    1948:	f7ff fd38 	bl	13bc <Axis::setFrequency(float)>
  motor->poll();
    194c:	6820      	ldr	r0, [r4, #0]
    194e:	4a79      	ldr	r2, [pc, #484]	; (1b34 <Axis::poll() [clone .part.0]+0x270>)
    1950:	6803      	ldr	r3, [r0, #0]
    1952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1954:	4293      	cmp	r3, r2
    1956:	d179      	bne.n	1a4c <Axis::poll() [clone .part.0]+0x188>
  if (autoRate != AR_NONE && !motor->enabled) {
    1958:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    195c:	b133      	cbz	r3, 196c <Axis::poll() [clone .part.0]+0xa8>
    195e:	6823      	ldr	r3, [r4, #0]
    1960:	7a9b      	ldrb	r3, [r3, #10]
    1962:	b91b      	cbnz	r3, 196c <Axis::poll() [clone .part.0]+0xa8>
    freq = 0.0F;
    1964:	2200      	movs	r2, #0
    autoRate = AR_NONE;
    1966:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
    freq = 0.0F;
    196a:	67a2      	str	r2, [r4, #120]	; 0x78
}
    196c:	b005      	add	sp, #20
    196e:	ecbd 8b02 	vpop	{d8}
    1972:	bd30      	pop	{r4, r5, pc}
    if (autoRate != AR_RATE_BY_TIME_ABORT) {
    1974:	2b01      	cmp	r3, #1
    1976:	d144      	bne.n	1a02 <Axis::poll() [clone .part.0]+0x13e>
      if (freq > abortAccelRateFs) freq -= abortAccelRateFs; else if (freq < -abortAccelRateFs) freq += abortAccelRateFs; else freq = 0.0F;
    1978:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
    197c:	ed94 7a29 	vldr	s14, [r4, #164]	; 0xa4
    1980:	eef4 7ac7 	vcmpe.f32	s15, s14
    1984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1988:	f340 8175 	ble.w	1c76 <Axis::poll() [clone .part.0]+0x3b2>
    198c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_fabsf(__x); }
    1990:	eef0 6ae7 	vabs.f32	s13, s15
      if (fabs(freq) <= abortAccelRateFs) {
    1994:	eeb4 7ae6 	vcmpe.f32	s14, s13
      if (freq > abortAccelRateFs) freq -= abortAccelRateFs; else if (freq < -abortAccelRateFs) freq += abortAccelRateFs; else freq = 0.0F;
    1998:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
      if (fabs(freq) <= abortAccelRateFs) {
    199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19a0:	dbcc      	blt.n	193c <Axis::poll() [clone .part.0]+0x78>
        motor->setSlewing(false);
    19a2:	6820      	ldr	r0, [r4, #0]
    19a4:	2100      	movs	r1, #0
    19a6:	6803      	ldr	r3, [r0, #0]
    19a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    19aa:	4798      	blx	r3
        autoRate = AR_NONE;
    19ac:	2200      	movs	r2, #0
        freq = 0.0F;
    19ae:	2300      	movs	r3, #0
        autoRate = AR_NONE;
    19b0:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
        freq = 0.0F;
    19b4:	67a3      	str	r3, [r4, #120]	; 0x78
        V(axisPrefix); VLF("slew aborted");
    19b6:	e7c1      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
    if (autoRate == AR_RATE_BY_TIME_FORWARD && !sense.isOn(homeSenseHandle)) autoSlewStop();
    19b8:	2b04      	cmp	r3, #4
    19ba:	f000 8084 	beq.w	1ac6 <Axis::poll() [clone .part.0]+0x202>
    if (autoRate == AR_RATE_BY_TIME_REVERSE && sense.isOn(homeSenseHandle)) autoSlewStop();
    19be:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    19c2:	485a      	ldr	r0, [pc, #360]	; (1b2c <Axis::poll() [clone .part.0]+0x268>)
    19c4:	f003 fd52 	bl	546c <Sense::isOn(unsigned char)>
    19c8:	2800      	cmp	r0, #0
    19ca:	f040 8150 	bne.w	1c6e <Axis::poll() [clone .part.0]+0x3aa>
    19ce:	4b5a      	ldr	r3, [pc, #360]	; (1b38 <Axis::poll() [clone .part.0]+0x274>)
    if ((long)(millis() - homeTimeoutTime) > 0) {
    19d0:	6f62      	ldr	r2, [r4, #116]	; 0x74
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	1a9b      	subs	r3, r3, r2
    19d6:	2b00      	cmp	r3, #0
    19d8:	dda0      	ble.n	191c <Axis::poll() [clone .part.0]+0x58>
      autoSlewAbort();
    19da:	4620      	mov	r0, r4
    19dc:	f000 fa14 	bl	1e08 <Axis::autoSlewAbort()>
    19e0:	e79c      	b.n	191c <Axis::poll() [clone .part.0]+0x58>
    if (commonMinMaxSensed || motionError(DIR_BOTH) || motorFault()) baseFreq = 0.0F;
    19e2:	2103      	movs	r1, #3
    19e4:	4620      	mov	r0, r4
    19e6:	f7ff fdc3 	bl	1570 <Axis::motionError(Direction)>
    19ea:	2800      	cmp	r0, #0
    19ec:	d1a3      	bne.n	1936 <Axis::poll() [clone .part.0]+0x72>
    19ee:	6821      	ldr	r1, [r4, #0]
    19f0:	a801      	add	r0, sp, #4
    19f2:	680b      	ldr	r3, [r1, #0]
    19f4:	699b      	ldr	r3, [r3, #24]
    19f6:	4798      	blx	r3
    19f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    19fc:	2b00      	cmp	r3, #0
    19fe:	d19a      	bne.n	1936 <Axis::poll() [clone .part.0]+0x72>
    1a00:	e79c      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
      if (motionError(motor->getDirection())) {
    1a02:	f000 fb0b 	bl	201c <Motor::getDirection()>
    1a06:	4601      	mov	r1, r0
    1a08:	4620      	mov	r0, r4
    1a0a:	f7ff fdb1 	bl	1570 <Axis::motionError(Direction)>
    1a0e:	bb00      	cbnz	r0, 1a52 <Axis::poll() [clone .part.0]+0x18e>
    1a10:	6821      	ldr	r1, [r4, #0]
    1a12:	a801      	add	r0, sp, #4
    1a14:	680b      	ldr	r3, [r1, #0]
    1a16:	699b      	ldr	r3, [r3, #24]
    1a18:	4798      	blx	r3
    1a1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
      if (motorFault()) {
    1a1e:	b9c3      	cbnz	r3, 1a52 <Axis::poll() [clone .part.0]+0x18e>
    if (autoRate == AR_RATE_BY_DISTANCE) {
    1a20:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1a24:	2b03      	cmp	r3, #3
    1a26:	d013      	beq.n	1a50 <Axis::poll() [clone .part.0]+0x18c>
    if (autoRate == AR_RATE_BY_TIME_FORWARD) {
    1a28:	3b01      	subs	r3, #1
    1a2a:	2b04      	cmp	r3, #4
    1a2c:	f200 80d1 	bhi.w	1bd2 <Axis::poll() [clone .part.0]+0x30e>
    1a30:	a201      	add	r2, pc, #4	; (adr r2, 1a38 <Axis::poll() [clone .part.0]+0x174>)
    1a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a36:	bf00      	nop
    1a38:	00001979 	.word	0x00001979
    1a3c:	00001b45 	.word	0x00001b45
    1a40:	00001bd3 	.word	0x00001bd3
    1a44:	00001b0b 	.word	0x00001b0b
    1a48:	00001ae3 	.word	0x00001ae3
  motor->poll();
    1a4c:	4798      	blx	r3
    1a4e:	e783      	b.n	1958 <Axis::poll() [clone .part.0]+0x94>
      if (commonMinMaxSensed) {
    1a50:	b13d      	cbz	r5, 1a62 <Axis::poll() [clone .part.0]+0x19e>
        autoSlewAbort();
    1a52:	4620      	mov	r0, r4
}
    1a54:	b005      	add	sp, #20
    1a56:	ecbd 8b02 	vpop	{d8}
    1a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        autoSlewAbort();
    1a5e:	f000 b9d3 	b.w	1e08 <Axis::autoSlewAbort()>
  return labs(motor->getTargetDistanceSteps()) <= targetTolerance*settings.stepsPerMeasure;
    1a62:	6820      	ldr	r0, [r4, #0]
    1a64:	6803      	ldr	r3, [r0, #0]
    1a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a68:	4798      	blx	r3
    1a6a:	ed94 7a26 	vldr	s14, [r4, #152]	; 0x98
    1a6e:	2800      	cmp	r0, #0
    1a70:	6862      	ldr	r2, [r4, #4]
    1a72:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1a76:	68a3      	ldr	r3, [r4, #8]
    1a78:	bfb8      	it	lt
    1a7a:	4240      	neglt	r0, r0
    1a7c:	ec43 2b15 	vmov	d5, r2, r3
    1a80:	ee25 7b07 	vmul.f64	d7, d5, d7
    1a84:	ee06 0a90 	vmov	s13, r0
    1a88:	eeb8 6be6 	vcvt.f64.s32	d6, s13
      if (atTarget()) {
    1a8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    1a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a94:	f200 80a3 	bhi.w	1bde <Axis::poll() [clone .part.0]+0x31a>
        motor->setSlewing(false);
    1a98:	6820      	ldr	r0, [r4, #0]
    1a9a:	4629      	mov	r1, r5
    1a9c:	6803      	ldr	r3, [r0, #0]
    1a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1aa0:	4798      	blx	r3
        motor->setSynchronized(true);
    1aa2:	6820      	ldr	r0, [r4, #0]
    1aa4:	4a25      	ldr	r2, [pc, #148]	; (1b3c <Axis::poll() [clone .part.0]+0x278>)
        freq = 0.0F;
    1aa6:	2100      	movs	r1, #0
        motor->setSynchronized(true);
    1aa8:	6803      	ldr	r3, [r0, #0]
        autoRate = AR_NONE;
    1aaa:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
        motor->setSynchronized(true);
    1aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        freq = 0.0F;
    1ab0:	67a1      	str	r1, [r4, #120]	; 0x78
        motor->setSynchronized(true);
    1ab2:	4293      	cmp	r3, r2
    1ab4:	f040 80fc 	bne.w	1cb0 <Axis::poll() [clone .part.0]+0x3ec>
        noInterrupts();
    1ab8:	b672      	cpsid	i
        sync = state;
    1aba:	2301      	movs	r3, #1
    1abc:	7743      	strb	r3, [r0, #29]
        targetSteps = motorSteps;
    1abe:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1ac0:	6343      	str	r3, [r0, #52]	; 0x34
        interrupts();
    1ac2:	b662      	cpsie	i
    }
    1ac4:	e73a      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
    if (autoRate == AR_RATE_BY_TIME_FORWARD && !sense.isOn(homeSenseHandle)) autoSlewStop();
    1ac6:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    1aca:	4818      	ldr	r0, [pc, #96]	; (1b2c <Axis::poll() [clone .part.0]+0x268>)
    1acc:	f003 fcce 	bl	546c <Sense::isOn(unsigned char)>
    1ad0:	2800      	cmp	r0, #0
    1ad2:	f000 80c8 	beq.w	1c66 <Axis::poll() [clone .part.0]+0x3a2>
    if (autoRate == AR_RATE_BY_TIME_REVERSE && sense.isOn(homeSenseHandle)) autoSlewStop();
    1ad6:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    1ada:	2b05      	cmp	r3, #5
    1adc:	f47f af77 	bne.w	19ce <Axis::poll() [clone .part.0]+0x10a>
    1ae0:	e76d      	b.n	19be <Axis::poll() [clone .part.0]+0xfa>
      freq -= slewAccelRateFs;
    1ae2:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
    1ae6:	edd4 6a28 	vldr	s13, [r4, #160]	; 0xa0
      if (freq < -slewFreq) freq = -slewFreq;
    1aea:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
      freq -= slewAccelRateFs;
    1aee:	ee77 7ae6 	vsub.f32	s15, s15, s13
      if (freq < -slewFreq) freq = -slewFreq;
    1af2:	eeb1 7a47 	vneg.f32	s14, s14
    1af6:	eef4 7a47 	vcmp.f32	s15, s14
    1afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1afe:	bf48      	it	mi
    1b00:	eef0 7a47 	vmovmi.f32	s15, s14
    1b04:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    1b08:	e718      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
      freq += slewAccelRateFs;
    1b0a:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
    1b0e:	edd4 6a28 	vldr	s13, [r4, #160]	; 0xa0
      if (freq > slewFreq) freq = slewFreq;
    1b12:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
      freq += slewAccelRateFs;
    1b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      if (freq > slewFreq) freq = slewFreq;
    1b1a:	eef4 7a47 	vcmp.f32	s15, s14
    1b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b22:	fe77 7a27 	vselgt.f32	s15, s14, s15
    1b26:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
    1b2a:	e707      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
    1b2c:	200062f8 	.word	0x200062f8
    1b30:	2000634c 	.word	0x2000634c
    1b34:	000009f9 	.word	0x000009f9
    1b38:	20006344 	.word	0x20006344
    1b3c:	000009e5 	.word	0x000009e5
    1b40:	399d4952 	.word	0x399d4952
      if (commonMinMaxSensed) {
    1b44:	2d00      	cmp	r5, #0
    1b46:	d184      	bne.n	1a52 <Axis::poll() [clone .part.0]+0x18e>
      if (freq > slewAccelRateFs) freq -= slewAccelRateFs; else if (freq < -slewAccelRateFs) freq += slewAccelRateFs; else freq = 0.0F;
    1b48:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
    1b4c:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
    1b50:	eef4 7ac7 	vcmpe.f32	s15, s14
    1b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b58:	f340 8099 	ble.w	1c8e <Axis::poll() [clone .part.0]+0x3ca>
    1b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1b60:	eef0 6ae7 	vabs.f32	s13, s15
      if (fabs(freq) <= slewAccelRateFs) {
    1b64:	eeb4 7ae6 	vcmpe.f32	s14, s13
      if (freq > slewAccelRateFs) freq -= slewAccelRateFs; else if (freq < -slewAccelRateFs) freq += slewAccelRateFs; else freq = 0.0F;
    1b68:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
      if (fabs(freq) <= slewAccelRateFs) {
    1b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b70:	f6ff aee4 	blt.w	193c <Axis::poll() [clone .part.0]+0x78>
        motor->setSlewing(false);
    1b74:	6820      	ldr	r0, [r4, #0]
    1b76:	2100      	movs	r1, #0
    1b78:	6803      	ldr	r3, [r0, #0]
    1b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b7c:	4798      	blx	r3
        if (homingStage == HOME_FAST) homingStage = HOME_SLOW; else 
    1b7e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
        autoRate = AR_NONE;
    1b82:	2200      	movs	r2, #0
        freq = 0.0F;
    1b84:	2100      	movs	r1, #0
        if (homingStage == HOME_FAST) homingStage = HOME_SLOW; else 
    1b86:	2b03      	cmp	r3, #3
        autoRate = AR_NONE;
    1b88:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
        freq = 0.0F;
    1b8c:	67a1      	str	r1, [r4, #120]	; 0x78
        if (homingStage == HOME_FAST) homingStage = HOME_SLOW; else 
    1b8e:	f000 8097 	beq.w	1cc0 <Axis::poll() [clone .part.0]+0x3fc>
        if (homingStage == HOME_SLOW) {
    1b92:	2b02      	cmp	r3, #2
    1b94:	f000 8098 	beq.w	1cc8 <Axis::poll() [clone .part.0]+0x404>
        if (homingStage == HOME_FINE) homingStage = HOME_NONE;
    1b98:	2b01      	cmp	r3, #1
    1b9a:	d01d      	beq.n	1bd8 <Axis::poll() [clone .part.0]+0x314>
        if (homingStage != HOME_NONE) {
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	f43f aecd 	beq.w	193c <Axis::poll() [clone .part.0]+0x78>
    1ba2:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
          float f = fabs(slewFreq)/6.0F;
    1ba6:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
          if (f < 0.0003F) f = 0.0003F;
    1baa:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 1b40 <Axis::poll() [clone .part.0]+0x27c>
          setFrequencySlew(f);
    1bae:	4620      	mov	r0, r4
    1bb0:	eef0 7ae7 	vabs.f32	s15, s15
          autoSlewHome(SLEW_HOME_REFINE_TIME_LIMIT * 1000);
    1bb4:	4951      	ldr	r1, [pc, #324]	; (1cfc <Axis::poll() [clone .part.0]+0x438>)
          float f = fabs(slewFreq)/6.0F;
    1bb6:	ee87 0aa6 	vdiv.f32	s0, s15, s13
          if (f < 0.0003F) f = 0.0003F;
    1bba:	eeb4 0a47 	vcmp.f32	s0, s14
    1bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1bc2:	bf48      	it	mi
    1bc4:	eeb0 0a47 	vmovmi.f32	s0, s14
          setFrequencySlew(f);
    1bc8:	f7ff fbba 	bl	1340 <Axis::setFrequencySlew(float)>
          autoSlewHome(SLEW_HOME_REFINE_TIME_LIMIT * 1000);
    1bcc:	f7ff fdfe 	bl	17cc <Axis::autoSlewHome(unsigned long)>
    1bd0:	e6b4      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
    } else freq = 0.0F;
    1bd2:	2300      	movs	r3, #0
    1bd4:	67a3      	str	r3, [r4, #120]	; 0x78
    1bd6:	e6b1      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
        if (homingStage == HOME_FINE) homingStage = HOME_NONE;
    1bd8:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (homingStage != HOME_NONE) {
    1bdc:	e6ae      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
        freq = sqrtf(2.0F*(slewAccelRateFs*FRACTIONAL_SEC)*getOriginOrTargetDistance());
    1bde:	eddf 7a48 	vldr	s15, [pc, #288]	; 1d00 <Axis::poll() [clone .part.0]+0x43c>
    1be2:	ed94 8a28 	vldr	s16, [r4, #160]	; 0xa0
  return motor->getOriginOrTargetDistanceSteps()/settings.stepsPerMeasure;
    1be6:	6820      	ldr	r0, [r4, #0]
        freq = sqrtf(2.0F*(slewAccelRateFs*FRACTIONAL_SEC)*getOriginOrTargetDistance());
    1be8:	ee28 8a27 	vmul.f32	s16, s16, s15
  return motor->getOriginOrTargetDistanceSteps()/settings.stepsPerMeasure;
    1bec:	f000 fa00 	bl	1ff0 <Motor::getOriginOrTargetDistanceSteps()>
    1bf0:	ee07 0a90 	vmov	s15, r0
    1bf4:	6862      	ldr	r2, [r4, #4]
    1bf6:	68a3      	ldr	r3, [r4, #8]
    1bf8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
        freq = sqrtf(2.0F*(slewAccelRateFs*FRACTIONAL_SEC)*getOriginOrTargetDistance());
    1bfc:	ee38 8a08 	vadd.f32	s16, s16, s16
  return motor->getOriginOrTargetDistanceSteps()/settings.stepsPerMeasure;
    1c00:	ec43 2b17 	vmov	d7, r2, r3
    1c04:	ee86 7b07 	vdiv.f64	d7, d6, d7
        freq = sqrtf(2.0F*(slewAccelRateFs*FRACTIONAL_SEC)*getOriginOrTargetDistance());
    1c08:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    1c0c:	ee27 7b08 	vmul.f64	d7, d7, d8
    1c10:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1c14:	eeb5 7a40 	vcmp.f32	s14, #0.0
    1c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c1c:	d469      	bmi.n	1cf2 <Axis::poll() [clone .part.0]+0x42e>
    1c1e:	eeb1 0ac7 	vsqrt.f32	s0, s14
        if (freq < backlashFreq) freq = backlashFreq;
    1c22:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        if (freq > slewFreq) freq = slewFreq;
    1c26:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
        if (motor->getTargetDistanceSteps() < 0) freq = -freq;
    1c2a:	6820      	ldr	r0, [r4, #0]
        if (freq < backlashFreq) freq = backlashFreq;
    1c2c:	eef4 7ac0 	vcmpe.f32	s15, s0
    1c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c34:	fe77 7a80 	vselgt.f32	s15, s15, s0
        if (freq > slewFreq) freq = slewFreq;
    1c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c40:	bf58      	it	pl
    1c42:	eeb0 7a67 	vmovpl.f32	s14, s15
    1c46:	ed84 7a1e 	vstr	s14, [r4, #120]	; 0x78
        if (motor->getTargetDistanceSteps() < 0) freq = -freq;
    1c4a:	6803      	ldr	r3, [r0, #0]
    1c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c4e:	4798      	blx	r3
    1c50:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
    1c54:	2800      	cmp	r0, #0
    1c56:	bfbc      	itt	lt
    1c58:	eef1 7a67 	vneglt.f32	s15, s15
    1c5c:	edc4 7a1e 	vstrlt	s15, [r4, #120]	; 0x78
        rampFreq = freq;
    1c60:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
    1c64:	e66a      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
    if (autoRate == AR_RATE_BY_TIME_FORWARD && !sense.isOn(homeSenseHandle)) autoSlewStop();
    1c66:	4620      	mov	r0, r4
    1c68:	f000 f8aa 	bl	1dc0 <Axis::autoSlewStop()>
    1c6c:	e733      	b.n	1ad6 <Axis::poll() [clone .part.0]+0x212>
    if (autoRate == AR_RATE_BY_TIME_REVERSE && sense.isOn(homeSenseHandle)) autoSlewStop();
    1c6e:	4620      	mov	r0, r4
    1c70:	f000 f8a6 	bl	1dc0 <Axis::autoSlewStop()>
    1c74:	e6ab      	b.n	19ce <Axis::poll() [clone .part.0]+0x10a>
      if (freq > abortAccelRateFs) freq -= abortAccelRateFs; else if (freq < -abortAccelRateFs) freq += abortAccelRateFs; else freq = 0.0F;
    1c76:	eef1 6a47 	vneg.f32	s13, s14
    1c7a:	eef4 7ae6 	vcmpe.f32	s15, s13
    1c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c82:	d510      	bpl.n	1ca6 <Axis::poll() [clone .part.0]+0x3e2>
    1c84:	ee77 7a87 	vadd.f32	s15, s15, s14
    1c88:	eef0 6ae7 	vabs.f32	s13, s15
    1c8c:	e682      	b.n	1994 <Axis::poll() [clone .part.0]+0xd0>
      if (freq > slewAccelRateFs) freq -= slewAccelRateFs; else if (freq < -slewAccelRateFs) freq += slewAccelRateFs; else freq = 0.0F;
    1c8e:	eef1 6a47 	vneg.f32	s13, s14
    1c92:	eef4 7ae6 	vcmpe.f32	s15, s13
    1c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c9a:	d50c      	bpl.n	1cb6 <Axis::poll() [clone .part.0]+0x3f2>
    1c9c:	ee77 7a87 	vadd.f32	s15, s15, s14
    1ca0:	eef0 6ae7 	vabs.f32	s13, s15
    1ca4:	e75e      	b.n	1b64 <Axis::poll() [clone .part.0]+0x2a0>
    1ca6:	eddf 7a17 	vldr	s15, [pc, #92]	; 1d04 <Axis::poll() [clone .part.0]+0x440>
    1caa:	eef0 6a67 	vmov.f32	s13, s15
    1cae:	e671      	b.n	1994 <Axis::poll() [clone .part.0]+0xd0>
        motor->setSynchronized(true);
    1cb0:	2101      	movs	r1, #1
    1cb2:	4798      	blx	r3
    1cb4:	e642      	b.n	193c <Axis::poll() [clone .part.0]+0x78>
    1cb6:	eddf 7a13 	vldr	s15, [pc, #76]	; 1d04 <Axis::poll() [clone .part.0]+0x440>
    1cba:	eef0 6a67 	vmov.f32	s13, s15
    1cbe:	e751      	b.n	1b64 <Axis::poll() [clone .part.0]+0x2a0>
        if (homingStage == HOME_FAST) homingStage = HOME_SLOW; else 
    1cc0:	2302      	movs	r3, #2
    1cc2:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    1cc6:	e76c      	b.n	1ba2 <Axis::poll() [clone .part.0]+0x2de>
          if (!sense.isOn(homeSenseHandle)) homingStage = HOME_FINE; else {
    1cc8:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    1ccc:	480e      	ldr	r0, [pc, #56]	; (1d08 <Axis::poll() [clone .part.0]+0x444>)
    1cce:	f003 fbcd 	bl	546c <Sense::isOn(unsigned char)>
    1cd2:	b918      	cbnz	r0, 1cdc <Axis::poll() [clone .part.0]+0x418>
    1cd4:	2301      	movs	r3, #1
    1cd6:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    1cda:	e762      	b.n	1ba2 <Axis::poll() [clone .part.0]+0x2de>
            slewFreq *= 6.0F;
    1cdc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    1ce0:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
        if (homingStage != HOME_NONE) {
    1ce4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
            slewFreq *= 6.0F;
    1ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
    1cec:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
    1cf0:	e754      	b.n	1b9c <Axis::poll() [clone .part.0]+0x2d8>
        freq = sqrtf(2.0F*(slewAccelRateFs*FRACTIONAL_SEC)*getOriginOrTargetDistance());
    1cf2:	eeb0 0a47 	vmov.f32	s0, s14
    1cf6:	f019 f8b1 	bl	1ae5c <sqrtf>
    1cfa:	e792      	b.n	1c22 <Axis::poll() [clone .part.0]+0x35e>
    1cfc:	0001d4c0 	.word	0x0001d4c0
    1d00:	44039436 	.word	0x44039436
    1d04:	00000000 	.word	0x00000000
    1d08:	200062f8 	.word	0x200062f8

00001d0c <axisWrapper1()>:
IRAM_ATTR void axisWrapper1() { axisWrapper[0]->poll(); }
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <axisWrapper1()+0x10>)
    1d0e:	6818      	ldr	r0, [r3, #0]
  if (axisNumber == 0) return;
    1d10:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d14:	b903      	cbnz	r3, 1d18 <axisWrapper1()+0xc>
IRAM_ATTR void axisWrapper1() { axisWrapper[0]->poll(); }
    1d16:	4770      	bx	lr
    1d18:	f7ff bdd4 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d1c:	20005b2c 	.word	0x20005b2c

00001d20 <axisWrapper2()>:
IRAM_ATTR void axisWrapper2() { axisWrapper[1]->poll(); }
    1d20:	4b03      	ldr	r3, [pc, #12]	; (1d30 <axisWrapper2()+0x10>)
    1d22:	6858      	ldr	r0, [r3, #4]
  if (axisNumber == 0) return;
    1d24:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d28:	b903      	cbnz	r3, 1d2c <axisWrapper2()+0xc>
IRAM_ATTR void axisWrapper2() { axisWrapper[1]->poll(); }
    1d2a:	4770      	bx	lr
    1d2c:	f7ff bdca 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d30:	20005b2c 	.word	0x20005b2c

00001d34 <axisWrapper3()>:
IRAM_ATTR void axisWrapper3() { axisWrapper[2]->poll(); }
    1d34:	4b03      	ldr	r3, [pc, #12]	; (1d44 <axisWrapper3()+0x10>)
    1d36:	6898      	ldr	r0, [r3, #8]
  if (axisNumber == 0) return;
    1d38:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d3c:	b903      	cbnz	r3, 1d40 <axisWrapper3()+0xc>
IRAM_ATTR void axisWrapper3() { axisWrapper[2]->poll(); }
    1d3e:	4770      	bx	lr
    1d40:	f7ff bdc0 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d44:	20005b2c 	.word	0x20005b2c

00001d48 <axisWrapper4()>:
IRAM_ATTR void axisWrapper4() { axisWrapper[3]->poll(); }
    1d48:	4b03      	ldr	r3, [pc, #12]	; (1d58 <axisWrapper4()+0x10>)
    1d4a:	68d8      	ldr	r0, [r3, #12]
  if (axisNumber == 0) return;
    1d4c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d50:	b903      	cbnz	r3, 1d54 <axisWrapper4()+0xc>
IRAM_ATTR void axisWrapper4() { axisWrapper[3]->poll(); }
    1d52:	4770      	bx	lr
    1d54:	f7ff bdb6 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d58:	20005b2c 	.word	0x20005b2c

00001d5c <axisWrapper5()>:
IRAM_ATTR void axisWrapper5() { axisWrapper[4]->poll(); }
    1d5c:	4b03      	ldr	r3, [pc, #12]	; (1d6c <axisWrapper5()+0x10>)
    1d5e:	6918      	ldr	r0, [r3, #16]
  if (axisNumber == 0) return;
    1d60:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d64:	b903      	cbnz	r3, 1d68 <axisWrapper5()+0xc>
IRAM_ATTR void axisWrapper5() { axisWrapper[4]->poll(); }
    1d66:	4770      	bx	lr
    1d68:	f7ff bdac 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d6c:	20005b2c 	.word	0x20005b2c

00001d70 <axisWrapper6()>:
IRAM_ATTR void axisWrapper6() { axisWrapper[5]->poll(); }
    1d70:	4b03      	ldr	r3, [pc, #12]	; (1d80 <axisWrapper6()+0x10>)
    1d72:	6958      	ldr	r0, [r3, #20]
  if (axisNumber == 0) return;
    1d74:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d78:	b903      	cbnz	r3, 1d7c <axisWrapper6()+0xc>
IRAM_ATTR void axisWrapper6() { axisWrapper[5]->poll(); }
    1d7a:	4770      	bx	lr
    1d7c:	f7ff bda2 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d80:	20005b2c 	.word	0x20005b2c

00001d84 <axisWrapper7()>:
IRAM_ATTR void axisWrapper7() { axisWrapper[6]->poll(); }
    1d84:	4b03      	ldr	r3, [pc, #12]	; (1d94 <axisWrapper7()+0x10>)
    1d86:	6998      	ldr	r0, [r3, #24]
  if (axisNumber == 0) return;
    1d88:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1d8c:	b903      	cbnz	r3, 1d90 <axisWrapper7()+0xc>
IRAM_ATTR void axisWrapper7() { axisWrapper[6]->poll(); }
    1d8e:	4770      	bx	lr
    1d90:	f7ff bd98 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1d94:	20005b2c 	.word	0x20005b2c

00001d98 <axisWrapper8()>:
IRAM_ATTR void axisWrapper8() { axisWrapper[7]->poll(); }
    1d98:	4b03      	ldr	r3, [pc, #12]	; (1da8 <axisWrapper8()+0x10>)
    1d9a:	69d8      	ldr	r0, [r3, #28]
  if (axisNumber == 0) return;
    1d9c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1da0:	b903      	cbnz	r3, 1da4 <axisWrapper8()+0xc>
IRAM_ATTR void axisWrapper8() { axisWrapper[7]->poll(); }
    1da2:	4770      	bx	lr
    1da4:	f7ff bd8e 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1da8:	20005b2c 	.word	0x20005b2c

00001dac <axisWrapper9()>:
IRAM_ATTR void axisWrapper9() { axisWrapper[8]->poll(); }
    1dac:	4b03      	ldr	r3, [pc, #12]	; (1dbc <axisWrapper9()+0x10>)
    1dae:	6a18      	ldr	r0, [r3, #32]
  if (axisNumber == 0) return;
    1db0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    1db4:	b903      	cbnz	r3, 1db8 <axisWrapper9()+0xc>
IRAM_ATTR void axisWrapper9() { axisWrapper[8]->poll(); }
    1db6:	4770      	bx	lr
    1db8:	f7ff bd84 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1dbc:	20005b2c 	.word	0x20005b2c

00001dc0 <Axis::autoSlewStop()>:
  if (autoRate <= AR_RATE_BY_TIME_END) return;
    1dc0:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    1dc4:	2b02      	cmp	r3, #2
    1dc6:	d919      	bls.n	1dfc <Axis::autoSlewStop()+0x3c>
    1dc8:	4a0e      	ldr	r2, [pc, #56]	; (1e04 <Axis::autoSlewStop()+0x44>)
void Axis::autoSlewStop() {
    1dca:	b510      	push	{r4, lr}
    1dcc:	4604      	mov	r4, r0
  motor->setSynchronized(true);
    1dce:	6800      	ldr	r0, [r0, #0]
    1dd0:	6803      	ldr	r3, [r0, #0]
    1dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1dd4:	4293      	cmp	r3, r2
    1dd6:	d112      	bne.n	1dfe <Axis::autoSlewStop()+0x3e>
        noInterrupts();
    1dd8:	b672      	cpsid	i
        sync = state;
    1dda:	2301      	movs	r3, #1
    1ddc:	7743      	strb	r3, [r0, #29]
        targetSteps = motorSteps;
    1dde:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1de0:	6343      	str	r3, [r0, #52]	; 0x34
        interrupts();
    1de2:	b662      	cpsie	i
  autoRate = AR_RATE_BY_TIME_END;
    1de4:	2202      	movs	r2, #2
  if (axisNumber == 0) return;
    1de6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  autoRate = AR_RATE_BY_TIME_END;
    1dea:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
  if (axisNumber == 0) return;
    1dee:	b903      	cbnz	r3, 1df2 <Axis::autoSlewStop()+0x32>
}
    1df0:	bd10      	pop	{r4, pc}
    1df2:	4620      	mov	r0, r4
    1df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1df8:	f7ff bd64 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1dfc:	4770      	bx	lr
  motor->setSynchronized(true);
    1dfe:	2101      	movs	r1, #1
    1e00:	4798      	blx	r3
    1e02:	e7ef      	b.n	1de4 <Axis::autoSlewStop()+0x24>
    1e04:	000009e5 	.word	0x000009e5

00001e08 <Axis::autoSlewAbort()>:
  if (autoRate <= AR_RATE_BY_TIME_ABORT) return;
    1e08:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    1e0c:	2b01      	cmp	r3, #1
    1e0e:	d91c      	bls.n	1e4a <Axis::autoSlewAbort()+0x42>
    1e10:	4a10      	ldr	r2, [pc, #64]	; (1e54 <Axis::autoSlewAbort()+0x4c>)
void Axis::autoSlewAbort() {
    1e12:	b510      	push	{r4, lr}
    1e14:	4604      	mov	r4, r0
  motor->setSynchronized(true);
    1e16:	6800      	ldr	r0, [r0, #0]
    1e18:	6803      	ldr	r3, [r0, #0]
    1e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e1c:	4293      	cmp	r3, r2
    1e1e:	d115      	bne.n	1e4c <Axis::autoSlewAbort()+0x44>
        noInterrupts();
    1e20:	b672      	cpsid	i
        sync = state;
    1e22:	2301      	movs	r3, #1
    1e24:	7743      	strb	r3, [r0, #29]
        targetSteps = motorSteps;
    1e26:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1e28:	6343      	str	r3, [r0, #52]	; 0x34
        interrupts();
    1e2a:	b662      	cpsie	i
  autoRate = AR_RATE_BY_TIME_ABORT;
    1e2c:	2101      	movs	r1, #1
  homingStage = HOME_NONE;
    1e2e:	2200      	movs	r2, #0
  if (axisNumber == 0) return;
    1e30:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  autoRate = AR_RATE_BY_TIME_ABORT;
    1e34:	f884 109c 	strb.w	r1, [r4, #156]	; 0x9c
  homingStage = HOME_NONE;
    1e38:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
  if (axisNumber == 0) return;
    1e3c:	b903      	cbnz	r3, 1e40 <Axis::autoSlewAbort()+0x38>
}
    1e3e:	bd10      	pop	{r4, pc}
    1e40:	4620      	mov	r0, r4
    1e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e46:	f7ff bd3d 	b.w	18c4 <Axis::poll() [clone .part.0]>
    1e4a:	4770      	bx	lr
  motor->setSynchronized(true);
    1e4c:	2101      	movs	r1, #1
    1e4e:	4798      	blx	r3
    1e50:	e7ec      	b.n	1e2c <Axis::autoSlewAbort()+0x24>
    1e52:	bf00      	nop
    1e54:	000009e5 	.word	0x000009e5

00001e58 <Axis::motionErrorSensed(Direction)>:

// checks for an sense error that would disallow motion in a given direction or DIR_BOTH for any motion
bool Axis::motionErrorSensed(Direction direction) {
  if ((direction == DIR_REVERSE || direction == DIR_BOTH) && errors.minLimitSensed) return true; else
    1e58:	1e8b      	subs	r3, r1, #2
    1e5a:	2b01      	cmp	r3, #1
    1e5c:	d908      	bls.n	1e70 <Axis::motionErrorSensed(Direction)+0x18>
  if ((direction == DIR_FORWARD || direction == DIR_BOTH) && errors.maxLimitSensed) return true; else return false;
    1e5e:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    1e62:	2901      	cmp	r1, #1
    1e64:	d10a      	bne.n	1e7c <Axis::motionErrorSensed(Direction)+0x24>
    1e66:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    1e6a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1e6e:	4770      	bx	lr
  if ((direction == DIR_REVERSE || direction == DIR_BOTH) && errors.minLimitSensed) return true; else
    1e70:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    1e74:	07db      	lsls	r3, r3, #31
    1e76:	d5f2      	bpl.n	1e5e <Axis::motionErrorSensed(Direction)+0x6>
    1e78:	2001      	movs	r0, #1
    1e7a:	4770      	bx	lr
  if ((direction == DIR_FORWARD || direction == DIR_BOTH) && errors.maxLimitSensed) return true; else return false;
    1e7c:	2000      	movs	r0, #0
}
    1e7e:	4770      	bx	lr

00001e80 <Motor::setInstrumentCoordinateSteps(long)>:
  return steps;
}

// set instrument coordinate, in steps
void Motor::setInstrumentCoordinateSteps(long value) {
  noInterrupts();
    1e80:	b672      	cpsid	i
  indexSteps = value - motorSteps;
    1e82:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1e84:	1ac9      	subs	r1, r1, r3
    1e86:	63c1      	str	r1, [r0, #60]	; 0x3c
  interrupts();
    1e88:	b662      	cpsie	i
}
    1e8a:	4770      	bx	lr

00001e8c <Motor::getDefaultParameters(float*, float*, float*, float*, float*, float*)>:
  *param1 = default_param1;
    1e8c:	f8d0 c044 	ldr.w	ip, [r0, #68]	; 0x44
    1e90:	f8c1 c000 	str.w	ip, [r1]
  *param2 = default_param2;
    1e94:	6c81      	ldr	r1, [r0, #72]	; 0x48
    1e96:	6011      	str	r1, [r2, #0]
  *param3 = default_param3;
    1e98:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    1e9a:	601a      	str	r2, [r3, #0]
  *param4 = default_param4;
    1e9c:	9a00      	ldr	r2, [sp, #0]
    1e9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
    1ea0:	6013      	str	r3, [r2, #0]
  *param5 = default_param5;
    1ea2:	9a01      	ldr	r2, [sp, #4]
    1ea4:	6d43      	ldr	r3, [r0, #84]	; 0x54
    1ea6:	6013      	str	r3, [r2, #0]
  *param6 = default_param6;
    1ea8:	9a02      	ldr	r2, [sp, #8]
    1eaa:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1eac:	6013      	str	r3, [r2, #0]
}
    1eae:	4770      	bx	lr

00001eb0 <Motor::setDefaultParameters(float, float, float, float, float, float)>:
  default_param1 = param1;
    1eb0:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
  default_param2 = param2;
    1eb4:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
  default_param3 = param3;
    1eb8:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
  default_param4 = param4;
    1ebc:	edc0 1a14 	vstr	s3, [r0, #80]	; 0x50
  default_param5 = param5;
    1ec0:	ed80 2a15 	vstr	s4, [r0, #84]	; 0x54
  default_param6 = param6;
    1ec4:	edc0 2a16 	vstr	s5, [r0, #88]	; 0x58
}
    1ec8:	4770      	bx	lr
    1eca:	bf00      	nop

00001ecc <Motor::resetPositionSteps(long)>:
  indexSteps    = 0;
    1ecc:	2300      	movs	r3, #0
    1ece:	63c3      	str	r3, [r0, #60]	; 0x3c
  noInterrupts();
    1ed0:	b672      	cpsid	i
  motorSteps    = value;
    1ed2:	6381      	str	r1, [r0, #56]	; 0x38
  targetSteps   = value;
    1ed4:	6341      	str	r1, [r0, #52]	; 0x34
  backlashSteps = 0;
    1ed6:	8503      	strh	r3, [r0, #40]	; 0x28
  interrupts();
    1ed8:	b662      	cpsie	i
}
    1eda:	4770      	bx	lr

00001edc <Motor::getMotorPositionSteps()>:
  noInterrupts();
    1edc:	b672      	cpsid	i
  long steps = motorSteps + backlashSteps;
    1ede:	6b82      	ldr	r2, [r0, #56]	; 0x38
    1ee0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1ee2:	b29b      	uxth	r3, r3
  interrupts();
    1ee4:	b662      	cpsie	i
}
    1ee6:	1898      	adds	r0, r3, r2
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop

00001eec <Motor::getInstrumentCoordinateSteps()>:
  noInterrupts();
    1eec:	b672      	cpsid	i
  long steps = motorSteps + indexSteps;
    1eee:	6b82      	ldr	r2, [r0, #56]	; 0x38
    1ef0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  interrupts();
    1ef2:	b662      	cpsie	i
}
    1ef4:	4410      	add	r0, r2
    1ef6:	4770      	bx	lr

00001ef8 <Motor::setInstrumentCoordinateParkSteps(long, int)>:

// set instrument park coordinate, in steps
// should only be called when the axis is not moving
void Motor::setInstrumentCoordinateParkSteps(long value, int modulo) {
    1ef8:	b410      	push	{r4}
  if (driverType == STEP_DIR) {
    1efa:	6844      	ldr	r4, [r0, #4]
void Motor::setInstrumentCoordinateParkSteps(long value, int modulo) {
    1efc:	4684      	mov	ip, r0
    1efe:	460b      	mov	r3, r1
  if (driverType == STEP_DIR) {
    1f00:	340c      	adds	r4, #12
    1f02:	d00c      	beq.n	1f1e <Motor::setInstrumentCoordinateParkSteps(long, int)+0x26>
    long steps = value - motorSteps;
    steps -= modulo*2L;
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    indexSteps = steps;
  } else setInstrumentCoordinateSteps(value);
    1f04:	6802      	ldr	r2, [r0, #0]
    1f06:	4c17      	ldr	r4, [pc, #92]	; (1f64 <Motor::setInstrumentCoordinateParkSteps(long, int)+0x6c>)
    1f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1f0a:	42a2      	cmp	r2, r4
    1f0c:	d126      	bne.n	1f5c <Motor::setInstrumentCoordinateParkSteps(long, int)+0x64>
  noInterrupts();
    1f0e:	b672      	cpsid	i
  indexSteps = value - motorSteps;
    1f10:	6b82      	ldr	r2, [r0, #56]	; 0x38
    1f12:	1a8b      	subs	r3, r1, r2
    1f14:	63c3      	str	r3, [r0, #60]	; 0x3c
  interrupts();
    1f16:	b662      	cpsie	i
  V(axisPrefix); VF("setInstrumentCoordinateParkSteps at "); V(indexSteps); VF(" (was "); V(value - motorSteps); VL(")");
}
    1f18:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f1c:	4770      	bx	lr
    long steps = value - motorSteps;
    1f1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    1f20:	0091      	lsls	r1, r2, #2
    long steps = value - motorSteps;
    1f22:	1a1b      	subs	r3, r3, r0
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    1f24:	2900      	cmp	r1, #0
    steps -= modulo*2L;
    1f26:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    1f2a:	dd13      	ble.n	1f54 <Motor::setInstrumentCoordinateParkSteps(long, int)+0x5c>
    1f2c:	fb93 f2f1 	sdiv	r2, r3, r1
    1f30:	fb01 3212 	mls	r2, r1, r2, r3
    1f34:	b172      	cbz	r2, 1f54 <Motor::setInstrumentCoordinateParkSteps(long, int)+0x5c>
    1f36:	1858      	adds	r0, r3, r1
    1f38:	e004      	b.n	1f44 <Motor::setInstrumentCoordinateParkSteps(long, int)+0x4c>
    1f3a:	fb93 f2f1 	sdiv	r2, r3, r1
    1f3e:	fb01 3212 	mls	r2, r1, r2, r3
    1f42:	b13a      	cbz	r2, 1f54 <Motor::setInstrumentCoordinateParkSteps(long, int)+0x5c>
    1f44:	3301      	adds	r3, #1
    1f46:	4283      	cmp	r3, r0
    1f48:	d1f7      	bne.n	1f3a <Motor::setInstrumentCoordinateParkSteps(long, int)+0x42>
    indexSteps = steps;
    1f4a:	f8cc 003c 	str.w	r0, [ip, #60]	; 0x3c
}
    1f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f52:	4770      	bx	lr
    1f54:	4618      	mov	r0, r3
    indexSteps = steps;
    1f56:	f8cc 003c 	str.w	r0, [ip, #60]	; 0x3c
    1f5a:	e7f8      	b.n	1f4e <Motor::setInstrumentCoordinateParkSteps(long, int)+0x56>
}
    1f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  } else setInstrumentCoordinateSteps(value);
    1f60:	4710      	bx	r2
    1f62:	bf00      	nop
    1f64:	00001e81 	.word	0x00001e81

00001f68 <Motor::setTargetCoordinateSteps(long)>:
  return steps;
}

// set target coordinate (with index), in steps
void Motor::setTargetCoordinateSteps(long value) {
  noInterrupts();
    1f68:	b672      	cpsid	i
  targetSteps = value - indexSteps;
    1f6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1f6c:	1ac9      	subs	r1, r1, r3
    1f6e:	6341      	str	r1, [r0, #52]	; 0x34
  interrupts();
    1f70:	b662      	cpsie	i
}
    1f72:	4770      	bx	lr

00001f74 <Motor::setTargetCoordinateParkSteps(long, int)>:

// set target park coordinate, in steps (taking into account stepper motor cogging when powered off)
// should only be called when the axis is not moving
void Motor::setTargetCoordinateParkSteps(long value, int modulo) {
  if (driverType == STEP_DIR) {
    1f74:	6843      	ldr	r3, [r0, #4]
    1f76:	330c      	adds	r3, #12
    1f78:	d005      	beq.n	1f86 <Motor::setTargetCoordinateParkSteps(long, int)+0x12>
  noInterrupts();
    1f7a:	b672      	cpsid	i
  targetSteps = value - indexSteps;
    1f7c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1f7e:	1ac9      	subs	r1, r1, r3
    1f80:	6341      	str	r1, [r0, #52]	; 0x34
  interrupts();
    1f82:	b662      	cpsie	i
    noInterrupts();
    targetSteps = steps;
    interrupts();
  } else setTargetCoordinateSteps(value);
  V(axisPrefix); VF("setTargetCoordinateParkSteps at "); V(targetSteps); VF(" (was "); V(value - indexSteps); VL(")");
}
    1f84:	4770      	bx	lr
    long steps = value - indexSteps;
    1f86:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    1f88:	ea4f 0c82 	mov.w	ip, r2, lsl #2
    long steps = value - indexSteps;
    1f8c:	1ac9      	subs	r1, r1, r3
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    1f8e:	f1bc 0f00 	cmp.w	ip, #0
    steps -= modulo*2L;
    1f92:	eba1 0342 	sub.w	r3, r1, r2, lsl #1
    for (int l = 0; l < modulo*4; l++) { if (steps % (modulo*4L) == 0) break; steps++; }
    1f96:	dd13      	ble.n	1fc0 <Motor::setTargetCoordinateParkSteps(long, int)+0x4c>
    1f98:	fb93 f2fc 	sdiv	r2, r3, ip
    1f9c:	fb0c 3212 	mls	r2, ip, r2, r3
    1fa0:	b172      	cbz	r2, 1fc0 <Motor::setTargetCoordinateParkSteps(long, int)+0x4c>
    1fa2:	eb0c 0103 	add.w	r1, ip, r3
    1fa6:	e004      	b.n	1fb2 <Motor::setTargetCoordinateParkSteps(long, int)+0x3e>
    1fa8:	fb93 f2fc 	sdiv	r2, r3, ip
    1fac:	fb0c 3212 	mls	r2, ip, r2, r3
    1fb0:	b132      	cbz	r2, 1fc0 <Motor::setTargetCoordinateParkSteps(long, int)+0x4c>
    1fb2:	3301      	adds	r3, #1
    1fb4:	428b      	cmp	r3, r1
    1fb6:	d1f7      	bne.n	1fa8 <Motor::setTargetCoordinateParkSteps(long, int)+0x34>
    noInterrupts();
    1fb8:	b672      	cpsid	i
    targetSteps = steps;
    1fba:	6341      	str	r1, [r0, #52]	; 0x34
    interrupts();
    1fbc:	b662      	cpsie	i
    1fbe:	4770      	bx	lr
    1fc0:	4619      	mov	r1, r3
    noInterrupts();
    1fc2:	b672      	cpsid	i
    targetSteps = steps;
    1fc4:	6341      	str	r1, [r0, #52]	; 0x34
    interrupts();
    1fc6:	b662      	cpsie	i
    1fc8:	4770      	bx	lr
    1fca:	bf00      	nop

00001fcc <Motor::setBacklashSteps(long)>:
  return backlash;
}

// set backlash amount in steps
void Motor::setBacklashSteps(long value) {
  noInterrupts();
    1fcc:	b672      	cpsid	i
  backlashAmountSteps = value;
    1fce:	b289      	uxth	r1, r1
    1fd0:	8581      	strh	r1, [r0, #44]	; 0x2c
  interrupts();
    1fd2:	b662      	cpsie	i
}
    1fd4:	4770      	bx	lr
    1fd6:	bf00      	nop

00001fd8 <Motor::markOriginCoordinateSteps()>:

// mark origin coordinate for autoGoto as current location
void Motor::markOriginCoordinateSteps() {
  noInterrupts();
    1fd8:	b672      	cpsid	i
  originSteps = motorSteps;
    1fda:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1fdc:	6303      	str	r3, [r0, #48]	; 0x30
  interrupts();
    1fde:	b662      	cpsie	i
}
    1fe0:	4770      	bx	lr
    1fe2:	bf00      	nop

00001fe4 <Motor::getTargetDistanceSteps()>:

// distance to target in steps (+/-)
long Motor::getTargetDistanceSteps() {
  noInterrupts();
    1fe4:	b672      	cpsid	i
  long dist = targetSteps - motorSteps;
    1fe6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1fe8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  interrupts();
    1fea:	b662      	cpsie	i
  return dist;
}
    1fec:	1a10      	subs	r0, r2, r0
    1fee:	4770      	bx	lr

00001ff0 <Motor::getOriginOrTargetDistanceSteps()>:

// distance to origin or target, whichever is closer, in steps
long Motor::getOriginOrTargetDistanceSteps() {
  noInterrupts();
    1ff0:	b672      	cpsid	i
  long steps = motorSteps;
    1ff2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  interrupts();
    1ff4:	b662      	cpsie	i
  long distanceOrigin = labs(originSteps - steps);
  long distanceTarget = labs(targetSteps - steps);
    1ff6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  long distanceOrigin = labs(originSteps - steps);
    1ff8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  long distanceTarget = labs(targetSteps - steps);
    1ffa:	1a9b      	subs	r3, r3, r2
  long distanceOrigin = labs(originSteps - steps);
    1ffc:	1a80      	subs	r0, r0, r2
  long distanceTarget = labs(targetSteps - steps);
    1ffe:	2b00      	cmp	r3, #0
    2000:	bfb8      	it	lt
    2002:	425b      	neglt	r3, r3
  long distanceOrigin = labs(originSteps - steps);
    2004:	2800      	cmp	r0, #0
    2006:	bfb8      	it	lt
    2008:	4240      	neglt	r0, r0
  if (distanceOrigin < distanceTarget) return distanceOrigin; else return distanceTarget;
}
    200a:	4298      	cmp	r0, r3
    200c:	bfa8      	it	ge
    200e:	4618      	movge	r0, r3
    2010:	4770      	bx	lr
    2012:	bf00      	nop

00002014 <Motor::setBacklashFrequencySteps(float)>:
  if (distanceOrigin < distanceTarget) return 1; else return -1;
}

// set backlash frequency in steps per second
void Motor::setBacklashFrequencySteps(float frequency) {
  backlashFrequency = frequency;
    2014:	ed80 0a09 	vstr	s0, [r0, #36]	; 0x24
}
    2018:	4770      	bx	lr
    201a:	bf00      	nop

0000201c <Motor::getDirection()>:

// get the current direction of motion
Direction Motor::getDirection() {
  if (getFrequencySteps() != 0.0F) {
    201c:	6803      	ldr	r3, [r0, #0]
Direction Motor::getDirection() {
    201e:	b510      	push	{r4, lr}
  if (getFrequencySteps() != 0.0F) {
    2020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
Direction Motor::getDirection() {
    2022:	4604      	mov	r4, r0
  if (getFrequencySteps() != 0.0F) {
    2024:	4798      	blx	r3
    2026:	eeb5 0a40 	vcmp.f32	s0, #0.0
    202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    202e:	d006      	beq.n	203e <Motor::getDirection()+0x22>
    if (step >= 1) return DIR_FORWARD;
    2030:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2032:	2b00      	cmp	r3, #0
    2034:	dc05      	bgt.n	2042 <Motor::getDirection()+0x26>
    if (step <= -1) return DIR_REVERSE;
    2036:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2038:	0fc0      	lsrs	r0, r0, #31
    203a:	0040      	lsls	r0, r0, #1
  }
  return DIR_NONE;
}
    203c:	bd10      	pop	{r4, pc}
  return DIR_NONE;
    203e:	2000      	movs	r0, #0
}
    2040:	bd10      	pop	{r4, pc}
    if (step >= 1) return DIR_FORWARD;
    2042:	2001      	movs	r0, #1
}
    2044:	bd10      	pop	{r4, pc}
    2046:	bf00      	nop

00002048 <Motor::calibrate(float)>:
    virtual void calibrate(float value) { UNUSED(value); }
    2048:	4770      	bx	lr
    204a:	bf00      	nop

0000204c <Motor::encoderZero()>:
    virtual uint32_t encoderZero() { return 0; }
    204c:	2000      	movs	r0, #0
    204e:	4770      	bx	lr

00002050 <Motor::getEncoderCount()>:
    virtual int32_t getEncoderCount() { return 0; }
    2050:	2000      	movs	r0, #0
    2052:	4770      	bx	lr

00002054 <Motor::encoderSetOrigin(unsigned long)>:
    virtual void encoderSetOrigin(uint32_t origin) {}
    2054:	4770      	bx	lr
    2056:	bf00      	nop

00002058 <StepDirMotor::getParameterTypeCode()>:

    // set driver default reverse state
    void setReverse(int8_t state);

    // get driver type code
    inline char getParameterTypeCode() { return driver->getParameterTypeCode(); }
    2058:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    205a:	6803      	ldr	r3, [r0, #0]
    205c:	681b      	ldr	r3, [r3, #0]
    205e:	4718      	bx	r3

00002060 <StepDirMotor::getStepsPerStepSlewing()>:

    // set decay mode for slewing
    virtual void modeDecaySlewing();

    // get microstep ratio for slewing
    inline int getMicrostepRatio() { return microstepRatio; }
    2060:	6dc3      	ldr	r3, [r0, #92]	; 0x5c

    // set frequency (+/-) in steps per second negative frequencies move reverse in direction (0 stops motion)
    void setFrequencySteps(float frequency);

    // get tracking mode steps per slewing mode step
    inline int getStepsPerStepSlewing() { return driver->getMicrostepRatio(); }
    2062:	f9b3 0030 	ldrsh.w	r0, [r3, #48]	; 0x30
    2066:	4770      	bx	lr

00002068 <StepDirMotor::setParameters(float, float, float, float, float, float)>:
  digitalWriteEx(Pins->dir, dirFwd);
  direction = dirFwd;
}

// sets driver parameters: microsteps, microsteps goto, hold current, run current, goto current, unused
void StepDirMotor::setParameters(float param1, float param2, float param3, float param4, float param5, float param6) {
    2068:	b510      	push	{r4, lr}
    206a:	4604      	mov	r4, r0
  driver->init(param1, param2, param3, param4, param5, param6);
    206c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    206e:	6803      	ldr	r3, [r0, #0]
    2070:	685b      	ldr	r3, [r3, #4]
    2072:	4798      	blx	r3
    2074:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    2076:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
  homeSteps = driver->getMicrostepRatio();
    207a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  V(axisPrefix); VF("sequencer homes every "); V(homeSteps); VLF(" step(s)");
}
    207e:	bd10      	pop	{r4, pc}

00002080 <StepDirMotor::validateParameters(float, float, float, float, float, float)>:

// validate driver parameters
bool StepDirMotor::validateParameters(float param1, float param2, float param3, float param4, float param5, float param6) {
  return driver->validateParameters(param1, param2, param3, param4, param5, param6);
    2080:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    2082:	6803      	ldr	r3, [r0, #0]
    2084:	689b      	ldr	r3, [r3, #8]
    2086:	4718      	bx	r3

00002088 <StepDirMotor::getDriverStatus()>:
  }
  enabled = state;
}

// get the associated stepper drivers status
DriverStatus StepDirMotor::getDriverStatus() {
    2088:	b538      	push	{r3, r4, r5, lr}
    208a:	4604      	mov	r4, r0
  driver->updateStatus();
    208c:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
DriverStatus StepDirMotor::getDriverStatus() {
    208e:	460d      	mov	r5, r1
  driver->updateStatus();
    2090:	6803      	ldr	r3, [r0, #0]
    2092:	69db      	ldr	r3, [r3, #28]
    2094:	4798      	blx	r3

    // update status info. for driver
    virtual void updateStatus();

    // get status info.
    inline DriverStatus getStatus() { return status; }
    2096:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  return driver->getStatus();
}
    2098:	4620      	mov	r0, r4
    209a:	f8d3 101d 	ldr.w	r1, [r3, #29]
    209e:	f8d3 2021 	ldr.w	r2, [r3, #33]	; 0x21
    20a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    20a6:	6021      	str	r1, [r4, #0]
    20a8:	6062      	str	r2, [r4, #4]
    20aa:	7223      	strb	r3, [r4, #8]
    20ac:	bd38      	pop	{r3, r4, r5, pc}
    20ae:	bf00      	nop

000020b0 <StepDirMotor::getFrequencySteps()>:
    }
  }
}

float StepDirMotor::getFrequencySteps() {
  if (lastPeriod == 0) return 0;
    20b0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    20b4:	b143      	cbz	r3, 20c8 <StepDirMotor::getFrequencySteps()+0x18>
  #if STEP_WAVE_FORM == SQUARE
    return 8000000.0F/lastPeriod;
    20b6:	ee07 3a90 	vmov	s15, r3
    20ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 20d0 <StepDirMotor::getFrequencySteps()+0x20>
    20be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20c2:	ee87 0a27 	vdiv.f32	s0, s14, s15
    20c6:	4770      	bx	lr
  if (lastPeriod == 0) return 0;
    20c8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 20d4 <StepDirMotor::getFrequencySteps()+0x24>
  #else
    return 16000000.0F/lastPeriod;
  #endif
}
    20cc:	4770      	bx	lr
    20ce:	bf00      	nop
    20d0:	4af42400 	.word	0x4af42400
    20d4:	00000000 	.word	0x00000000

000020d8 <StepDirMotor::calibrateDriver()>:
      digitalWriteEx(Pins->enable, Pins->enabledState);
    20d8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    20da:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    20de:	2b00      	cmp	r3, #0
    void calibrateDriver() {
    20e0:	b510      	push	{r4, lr}
    20e2:	4604      	mov	r4, r0
      digitalWriteEx(Pins->enable, Pins->enabledState);
    20e4:	db0a      	blt.n	20fc <StepDirMotor::calibrateDriver()+0x24>
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    20e6:	7a12      	ldrb	r2, [r2, #8]
    20e8:	b2db      	uxtb	r3, r3
    20ea:	b1ea      	cbz	r2, 2128 <StepDirMotor::calibrateDriver()+0x50>
    20ec:	4a17      	ldr	r2, [pc, #92]	; (214c <StepDirMotor::calibrateDriver()+0x74>)
    20ee:	0119      	lsls	r1, r3, #4
    20f0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    20f4:	5852      	ldr	r2, [r2, r1]
    20f6:	68db      	ldr	r3, [r3, #12]
    20f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      driver->calibrateDriver();
    20fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    20fe:	6803      	ldr	r3, [r0, #0]
    2100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2102:	4798      	blx	r3
      digitalWriteEx(Pins->enable, !Pins->enabledState);
    2104:	6e22      	ldr	r2, [r4, #96]	; 0x60
    2106:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    210a:	2b00      	cmp	r3, #0
    210c:	da00      	bge.n	2110 <StepDirMotor::calibrateDriver()+0x38>
    }
    210e:	bd10      	pop	{r4, pc}
    2110:	7a12      	ldrb	r2, [r2, #8]
      digitalWriteEx(Pins->enable, !Pins->enabledState);
    2112:	b2db      	uxtb	r3, r3
    2114:	b98a      	cbnz	r2, 213a <StepDirMotor::calibrateDriver()+0x62>
    2116:	4a0d      	ldr	r2, [pc, #52]	; (214c <StepDirMotor::calibrateDriver()+0x74>)
    2118:	0119      	lsls	r1, r3, #4
    211a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    211e:	5852      	ldr	r2, [r2, r1]
    2120:	68db      	ldr	r3, [r3, #12]
    2122:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
    2126:	bd10      	pop	{r4, pc}
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    2128:	4a08      	ldr	r2, [pc, #32]	; (214c <StepDirMotor::calibrateDriver()+0x74>)
    212a:	0119      	lsls	r1, r3, #4
    212c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2130:	5852      	ldr	r2, [r2, r1]
    2132:	68db      	ldr	r3, [r3, #12]
    2134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    2138:	e7e0      	b.n	20fc <StepDirMotor::calibrateDriver()+0x24>
    213a:	4a04      	ldr	r2, [pc, #16]	; (214c <StepDirMotor::calibrateDriver()+0x74>)
    213c:	0119      	lsls	r1, r3, #4
    213e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2142:	5852      	ldr	r2, [r2, r1]
    2144:	68db      	ldr	r3, [r3, #12]
    2146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    214a:	bd10      	pop	{r4, pc}
    214c:	20002b88 	.word	0x20002b88

00002150 <StepDirMotor::setReverse(signed char)>:
  if (state == OFF) { dirFwd = LOW; dirRev = HIGH; } else { dirFwd = HIGH; dirRev = LOW; }
    2150:	3101      	adds	r1, #1
    2152:	d010      	beq.n	2176 <StepDirMotor::setReverse(signed char)+0x26>
    2154:	2300      	movs	r3, #0
    2156:	2201      	movs	r2, #1
    2158:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    215c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  digitalWriteEx(Pins->dir, dirFwd);
    2160:	6e03      	ldr	r3, [r0, #96]	; 0x60
    2162:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    2166:	2b00      	cmp	r3, #0
    2168:	da10      	bge.n	218c <StepDirMotor::setReverse(signed char)+0x3c>
  direction = dirFwd;
    216a:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    216e:	b2db      	uxtb	r3, r3
    2170:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
}
    2174:	4770      	bx	lr
  if (state == OFF) { dirFwd = LOW; dirRev = HIGH; } else { dirFwd = HIGH; dirRev = LOW; }
    2176:	2301      	movs	r3, #1
    2178:	2200      	movs	r2, #0
    217a:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    217e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  digitalWriteEx(Pins->dir, dirFwd);
    2182:	6e03      	ldr	r3, [r0, #96]	; 0x60
    2184:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    2188:	2b00      	cmp	r3, #0
    218a:	dbee      	blt.n	216a <StepDirMotor::setReverse(signed char)+0x1a>
    218c:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    2190:	b2db      	uxtb	r3, r3
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    2192:	b16a      	cbz	r2, 21b0 <StepDirMotor::setReverse(signed char)+0x60>
    2194:	4a0d      	ldr	r2, [pc, #52]	; (21cc <StepDirMotor::setReverse(signed char)+0x7c>)
    2196:	0119      	lsls	r1, r3, #4
    2198:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    219c:	5852      	ldr	r2, [r2, r1]
    219e:	68db      	ldr	r3, [r3, #12]
    21a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  direction = dirFwd;
    21a4:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    21a8:	b2db      	uxtb	r3, r3
    21aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
}
    21ae:	4770      	bx	lr
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    21b0:	4a06      	ldr	r2, [pc, #24]	; (21cc <StepDirMotor::setReverse(signed char)+0x7c>)
    21b2:	0119      	lsls	r1, r3, #4
    21b4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    21b8:	5852      	ldr	r2, [r2, r1]
    21ba:	68db      	ldr	r3, [r3, #12]
    21bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  direction = dirFwd;
    21c0:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    21c4:	b2db      	uxtb	r3, r3
    21c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
}
    21ca:	4770      	bx	lr
    21cc:	20002b88 	.word	0x20002b88

000021d0 <StepDirMotor::enable(bool)>:
  if (Pins->enable != OFF && Pins->enable != SHARED) {
    21d0:	6e02      	ldr	r2, [r0, #96]	; 0x60
void StepDirMotor::enable(bool state) {
    21d2:	b538      	push	{r3, r4, r5, lr}
  if (Pins->enable != OFF && Pins->enable != SHARED) {
    21d4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
void StepDirMotor::enable(bool state) {
    21d8:	460d      	mov	r5, r1
    21da:	4604      	mov	r4, r0
  if (Pins->enable != OFF && Pins->enable != SHARED) {
    21dc:	1c59      	adds	r1, r3, #1
    21de:	d011      	beq.n	2204 <StepDirMotor::enable(bool)+0x34>
    21e0:	f113 0f13 	cmn.w	r3, #19
    21e4:	d00e      	beq.n	2204 <StepDirMotor::enable(bool)+0x34>
    digitalWriteEx(Pins->enable, state ? Pins->enabledState : !Pins->enabledState);
    21e6:	2b00      	cmp	r3, #0
    21e8:	db11      	blt.n	220e <StepDirMotor::enable(bool)+0x3e>
    21ea:	b2db      	uxtb	r3, r3
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    21ec:	7a12      	ldrb	r2, [r2, #8]
    21ee:	b185      	cbz	r5, 2212 <StepDirMotor::enable(bool)+0x42>
    21f0:	b98a      	cbnz	r2, 2216 <StepDirMotor::enable(bool)+0x46>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    21f2:	4a0d      	ldr	r2, [pc, #52]	; (2228 <StepDirMotor::enable(bool)+0x58>)
    21f4:	0119      	lsls	r1, r3, #4
    21f6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    21fa:	5852      	ldr	r2, [r2, r1]
    21fc:	68db      	ldr	r3, [r3, #12]
    21fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    2202:	e004      	b.n	220e <StepDirMotor::enable(bool)+0x3e>
    if (driver->enable(state)) { VLF(" using secondary method"); } else { VLF(" skipped no control available"); }
    2204:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    2206:	4629      	mov	r1, r5
    2208:	6803      	ldr	r3, [r0, #0]
    220a:	6a1b      	ldr	r3, [r3, #32]
    220c:	4798      	blx	r3
  enabled = state;
    220e:	72a5      	strb	r5, [r4, #10]
}
    2210:	bd38      	pop	{r3, r4, r5, pc}
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    2212:	2a00      	cmp	r2, #0
    2214:	d1ed      	bne.n	21f2 <StepDirMotor::enable(bool)+0x22>
    2216:	4a04      	ldr	r2, [pc, #16]	; (2228 <StepDirMotor::enable(bool)+0x58>)
    2218:	0119      	lsls	r1, r3, #4
    221a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    221e:	5852      	ldr	r2, [r2, r1]
    2220:	68db      	ldr	r3, [r3, #12]
    2222:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    2226:	e7f2      	b.n	220e <StepDirMotor::enable(bool)+0x3e>
    2228:	20002b88 	.word	0x20002b88

0000222c <StepDirMotor::setSlewing(bool)>:

// set slewing state (hint that we are about to slew or are done slewing)
void StepDirMotor::setSlewing(bool state) {
  if (state == true) driver->modeDecaySlewing(); else driver->modeDecayTracking();
    222c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    222e:	6803      	ldr	r3, [r0, #0]
    2230:	b109      	cbz	r1, 2236 <StepDirMotor::setSlewing(bool)+0xa>
    2232:	699b      	ldr	r3, [r3, #24]
    2234:	4718      	bx	r3
    2236:	695b      	ldr	r3, [r3, #20]
    2238:	4718      	bx	r3
    223a:	bf00      	nop

0000223c <StepDirMotor::init()>:
bool StepDirMotor::init() {
    223c:	b530      	push	{r4, r5, lr}
  if (axisNumber < 1 || axisNumber > 9) return false;
    223e:	7b02      	ldrb	r2, [r0, #12]
bool StepDirMotor::init() {
    2240:	b087      	sub	sp, #28
  if (axisNumber < 1 || axisNumber > 9) return false;
    2242:	2a00      	cmp	r2, #0
    2244:	d056      	beq.n	22f4 <StepDirMotor::init()+0xb8>
    2246:	7b03      	ldrb	r3, [r0, #12]
    2248:	4604      	mov	r4, r0
    224a:	2b09      	cmp	r3, #9
    224c:	d84e      	bhi.n	22ec <StepDirMotor::init()+0xb0>
  if (Pins->dir == OFF || Pins->step == OFF) {
    224e:	6e03      	ldr	r3, [r0, #96]	; 0x60
    2250:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
    2254:	1c42      	adds	r2, r0, #1
    2256:	d049      	beq.n	22ec <StepDirMotor::init()+0xb0>
    2258:	f9b3 2000 	ldrsh.w	r2, [r3]
    225c:	3201      	adds	r2, #1
    225e:	d045      	beq.n	22ec <StepDirMotor::init()+0xb0>
  pinModeEx(Pins->dir, OUTPUT);
    2260:	2800      	cmp	r0, #0
    2262:	da55      	bge.n	2310 <StepDirMotor::init()+0xd4>
    stepSet = Pins->stepState;
    2264:	789a      	ldrb	r2, [r3, #2]
    2266:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    stepClr = !stepSet;
    226a:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
    226e:	fab2 f282 	clz	r2, r2
    2272:	0952      	lsrs	r2, r2, #5
    2274:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
  pinModeEx(Pins->step, OUTPUT);
    2278:	f9b3 0000 	ldrsh.w	r0, [r3]
    227c:	2800      	cmp	r0, #0
    227e:	da3f      	bge.n	2300 <StepDirMotor::init()+0xc4>
  digitalWriteF(Pins->step, stepClr);
    2280:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    2284:	b2c0      	uxtb	r0, r0
    2286:	2a00      	cmp	r2, #0
    2288:	d05c      	beq.n	2344 <StepDirMotor::init()+0x108>
    228a:	4d39      	ldr	r5, [pc, #228]	; (2370 <StepDirMotor::init()+0x134>)
    228c:	0102      	lsls	r2, r0, #4
    228e:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    2292:	58aa      	ldr	r2, [r5, r2]
    2294:	68c1      	ldr	r1, [r0, #12]
    2296:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  pinModeEx(Pins->enable, OUTPUT);
    229a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
    229e:	2800      	cmp	r0, #0
    22a0:	da3c      	bge.n	231c <StepDirMotor::init()+0xe0>
  char timerName[] = "Motor_";
    22a2:	4934      	ldr	r1, [pc, #208]	; (2374 <StepDirMotor::init()+0x138>)
  taskHandle = tasks.add(0, 0, true, 0, callback, timerName);
    22a4:	2200      	movs	r2, #0
  timerName[5] = '0' + axisNumber;
    22a6:	7b23      	ldrb	r3, [r4, #12]
  taskHandle = tasks.add(0, 0, true, 0, callback, timerName);
    22a8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
    22ac:	9200      	str	r2, [sp, #0]
    22ae:	9501      	str	r5, [sp, #4]
  char timerName[] = "Motor_";
    22b0:	c903      	ldmia	r1, {r0, r1}
    22b2:	f8ad 1014 	strh.w	r1, [sp, #20]
    22b6:	0c0d      	lsrs	r5, r1, #16
    22b8:	9004      	str	r0, [sp, #16]
  taskHandle = tasks.add(0, 0, true, 0, callback, timerName);
    22ba:	a904      	add	r1, sp, #16
  timerName[5] = '0' + axisNumber;
    22bc:	f103 0030 	add.w	r0, r3, #48	; 0x30
  taskHandle = tasks.add(0, 0, true, 0, callback, timerName);
    22c0:	2301      	movs	r3, #1
    22c2:	9102      	str	r1, [sp, #8]
    22c4:	4611      	mov	r1, r2
  timerName[5] = '0' + axisNumber;
    22c6:	f88d 0015 	strb.w	r0, [sp, #21]
  taskHandle = tasks.add(0, 0, true, 0, callback, timerName);
    22ca:	482b      	ldr	r0, [pc, #172]	; (2378 <StepDirMotor::init()+0x13c>)
  char timerName[] = "Motor_";
    22cc:	f88d 5016 	strb.w	r5, [sp, #22]
  taskHandle = tasks.add(0, 0, true, 0, callback, timerName);
    22d0:	f003 ff84 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    22d4:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  if (taskHandle) {
    22d8:	b140      	cbz	r0, 22ec <StepDirMotor::init()+0xb0>
    if (useFastHardwareTimers && !tasks.requestHardwareTimer(taskHandle, 0)) { VLF(" (no hardware timer!)"); } else { VLF(""); }
    22da:	f894 408d 	ldrb.w	r4, [r4, #141]	; 0x8d
    22de:	2200      	movs	r2, #0
    22e0:	2c00      	cmp	r4, #0
    22e2:	d138      	bne.n	2356 <StepDirMotor::init()+0x11a>
  return true;
    22e4:	2401      	movs	r4, #1
}
    22e6:	4620      	mov	r0, r4
    22e8:	b007      	add	sp, #28
    22ea:	bd30      	pop	{r4, r5, pc}
  if (axisNumber < 1 || axisNumber > 9) return false;
    22ec:	2400      	movs	r4, #0
}
    22ee:	4620      	mov	r0, r4
    22f0:	b007      	add	sp, #28
    22f2:	bd30      	pop	{r4, r5, pc}
    22f4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  if (axisNumber < 1 || axisNumber > 9) return false;
    22f8:	461c      	mov	r4, r3
}
    22fa:	4620      	mov	r0, r4
    22fc:	b007      	add	sp, #28
    22fe:	bd30      	pop	{r4, r5, pc}
  pinModeEx(Pins->step, OUTPUT);
    2300:	b2c0      	uxtb	r0, r0
    2302:	2101      	movs	r1, #1
    2304:	f015 fffa 	bl	182fc <pinMode>
  digitalWriteF(Pins->step, stepClr);
    2308:	6e23      	ldr	r3, [r4, #96]	; 0x60
    230a:	f9b3 0000 	ldrsh.w	r0, [r3]
    230e:	e7b7      	b.n	2280 <StepDirMotor::init()+0x44>
  pinModeEx(Pins->dir, OUTPUT);
    2310:	2101      	movs	r1, #1
    2312:	b2c0      	uxtb	r0, r0
    2314:	f015 fff2 	bl	182fc <pinMode>
    stepSet = Pins->stepState;
    2318:	6e23      	ldr	r3, [r4, #96]	; 0x60
    231a:	e7a3      	b.n	2264 <StepDirMotor::init()+0x28>
  pinModeEx(Pins->enable, OUTPUT);
    231c:	2101      	movs	r1, #1
    231e:	b2c0      	uxtb	r0, r0
    2320:	f015 ffec 	bl	182fc <pinMode>
  digitalWriteEx(Pins->enable, !Pins->enabledState)
    2324:	6e22      	ldr	r2, [r4, #96]	; 0x60
    2326:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
    232a:	2b00      	cmp	r3, #0
    232c:	dbb9      	blt.n	22a2 <StepDirMotor::init()+0x66>
    232e:	7a12      	ldrb	r2, [r2, #8]
    2330:	b2db      	uxtb	r3, r3
    2332:	b9aa      	cbnz	r2, 2360 <StepDirMotor::init()+0x124>
    2334:	011a      	lsls	r2, r3, #4
    2336:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    233a:	58aa      	ldr	r2, [r5, r2]
    233c:	68db      	ldr	r3, [r3, #12]
    233e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    2342:	e7ae      	b.n	22a2 <StepDirMotor::init()+0x66>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    2344:	4d0a      	ldr	r5, [pc, #40]	; (2370 <StepDirMotor::init()+0x134>)
    2346:	0102      	lsls	r2, r0, #4
    2348:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    234c:	58aa      	ldr	r2, [r5, r2]
    234e:	68c1      	ldr	r1, [r0, #12]
    2350:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
    2354:	e7a1      	b.n	229a <StepDirMotor::init()+0x5e>
    if (useFastHardwareTimers && !tasks.requestHardwareTimer(taskHandle, 0)) { VLF(" (no hardware timer!)"); } else { VLF(""); }
    2356:	4601      	mov	r1, r0
    2358:	4807      	ldr	r0, [pc, #28]	; (2378 <StepDirMotor::init()+0x13c>)
    235a:	f003 ff63 	bl	6224 <Tasks::requestHardwareTimer(unsigned char, unsigned char)>
    235e:	e7c6      	b.n	22ee <StepDirMotor::init()+0xb2>
    2360:	011a      	lsls	r2, r3, #4
    2362:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    2366:	58aa      	ldr	r2, [r5, r2]
    2368:	68db      	ldr	r3, [r3, #12]
    236a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    236e:	e798      	b.n	22a2 <StepDirMotor::init()+0x66>
    2370:	20002b88 	.word	0x20002b88
    2374:	200020d4 	.word	0x200020d4
    2378:	2000634c 	.word	0x2000634c

0000237c <StepDirMotor::moveFF(short) [clone .part.0]>:
  #endif

  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;

  #if STEP_WAVE_FORM == SQUARE
    if (takeStep) {
    237c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    2380:	b193      	cbz	r3, 23a8 <StepDirMotor::moveFF(short) [clone .part.0]+0x2c>
  #endif

  if (sync) targetSteps += stepSize;
    2382:	7f43      	ldrb	r3, [r0, #29]
    2384:	b12b      	cbz	r3, 2392 <StepDirMotor::moveFF(short) [clone .part.0]+0x16>
    2386:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    238a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    238c:	fa02 f383 	sxtah	r3, r2, r3
    2390:	6343      	str	r3, [r0, #52]	; 0x34

  if (motorSteps < targetSteps) {
    2392:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2394:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2396:	429a      	cmp	r2, r3
    2398:	db19      	blt.n	23ce <StepDirMotor::moveFF(short) [clone .part.0]+0x52>
    digitalWriteF(stepPin, stepSet);
  }

  #if STEP_WAVE_FORM == SQUARE
    } else digitalWriteF(stepPin, stepClr);
    takeStep = !takeStep;
    239a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    239e:	f083 0301 	eor.w	r3, r3, #1
    23a2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  #endif
}
    23a6:	4770      	bx	lr
    } else digitalWriteF(stepPin, stepClr);
    23a8:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
    23ac:	b2c9      	uxtb	r1, r1
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    23ae:	b1cb      	cbz	r3, 23e4 <StepDirMotor::moveFF(short) [clone .part.0]+0x68>
    23b0:	4b14      	ldr	r3, [pc, #80]	; (2404 <StepDirMotor::moveFF(short) [clone .part.0]+0x88>)
    23b2:	010a      	lsls	r2, r1, #4
    23b4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    23b8:	589b      	ldr	r3, [r3, r2]
    23ba:	68ca      	ldr	r2, [r1, #12]
    23bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    takeStep = !takeStep;
    23c0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    23c4:	f083 0301 	eor.w	r3, r3, #1
    23c8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
    23cc:	4770      	bx	lr
    motorSteps += stepSize;
    23ce:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
    digitalWriteF(stepPin, stepSet);
    23d2:	b2c9      	uxtb	r1, r1
    motorSteps += stepSize;
    23d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    23d6:	fa02 f383 	sxtah	r3, r2, r3
    23da:	6383      	str	r3, [r0, #56]	; 0x38
    digitalWriteF(stepPin, stepSet);
    23dc:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
    23e0:	2b00      	cmp	r3, #0
    23e2:	d1e5      	bne.n	23b0 <StepDirMotor::moveFF(short) [clone .part.0]+0x34>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    23e4:	4b07      	ldr	r3, [pc, #28]	; (2404 <StepDirMotor::moveFF(short) [clone .part.0]+0x88>)
    23e6:	010a      	lsls	r2, r1, #4
    23e8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    23ec:	589b      	ldr	r3, [r3, r2]
    23ee:	68ca      	ldr	r2, [r1, #12]
    23f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    takeStep = !takeStep;
    23f4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    23f8:	f083 0301 	eor.w	r3, r3, #1
    23fc:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
    2400:	4770      	bx	lr
    2402:	bf00      	nop
    2404:	20002b88 	.word	0x20002b88

00002408 <moveStepDirMotorFFAxis1()>:
IRAM_ATTR void moveStepDirMotorFFAxis1() { stepDirMotorInstance[0]->moveFF(AXIS1_STEP_PIN); }
    2408:	4b04      	ldr	r3, [pc, #16]	; (241c <moveStepDirMotorFFAxis1()+0x14>)
    240a:	6818      	ldr	r0, [r3, #0]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    240c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2410:	2b02      	cmp	r3, #2
    2412:	d802      	bhi.n	241a <moveStepDirMotorFFAxis1()+0x12>
    2414:	2128      	movs	r1, #40	; 0x28
    2416:	f7ff bfb1 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
IRAM_ATTR void moveStepDirMotorFFAxis1() { stepDirMotorInstance[0]->moveFF(AXIS1_STEP_PIN); }
    241a:	4770      	bx	lr
    241c:	2000631c 	.word	0x2000631c

00002420 <moveStepDirMotorFFAxis2()>:
IRAM_ATTR void moveStepDirMotorFFAxis2() { stepDirMotorInstance[1]->moveFF(AXIS2_STEP_PIN); }
    2420:	4b04      	ldr	r3, [pc, #16]	; (2434 <moveStepDirMotorFFAxis2()+0x14>)
    2422:	6858      	ldr	r0, [r3, #4]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2424:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2428:	2b02      	cmp	r3, #2
    242a:	d802      	bhi.n	2432 <moveStepDirMotorFFAxis2()+0x12>
    242c:	2116      	movs	r1, #22
    242e:	f7ff bfa5 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
IRAM_ATTR void moveStepDirMotorFFAxis2() { stepDirMotorInstance[1]->moveFF(AXIS2_STEP_PIN); }
    2432:	4770      	bx	lr
    2434:	2000631c 	.word	0x2000631c

00002438 <moveStepDirMotorFFAxis3()>:
void moveStepDirMotorFFAxis3() { stepDirMotorInstance[2]->moveFF(AXIS3_STEP_PIN); }
    2438:	4b05      	ldr	r3, [pc, #20]	; (2450 <moveStepDirMotorFFAxis3()+0x18>)
    243a:	6898      	ldr	r0, [r3, #8]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    243c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2440:	2b02      	cmp	r3, #2
    2442:	d803      	bhi.n	244c <moveStepDirMotorFFAxis3()+0x14>
    2444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2448:	f7ff bf98 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis3() { stepDirMotorInstance[2]->moveFF(AXIS3_STEP_PIN); }
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	2000631c 	.word	0x2000631c

00002454 <moveStepDirMotorFFAxis4()>:
void moveStepDirMotorFFAxis4() { stepDirMotorInstance[3]->moveFF(AXIS4_STEP_PIN); }
    2454:	4b05      	ldr	r3, [pc, #20]	; (246c <moveStepDirMotorFFAxis4()+0x18>)
    2456:	68d8      	ldr	r0, [r3, #12]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2458:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    245c:	2b02      	cmp	r3, #2
    245e:	d803      	bhi.n	2468 <moveStepDirMotorFFAxis4()+0x14>
    2460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2464:	f7ff bf8a 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis4() { stepDirMotorInstance[3]->moveFF(AXIS4_STEP_PIN); }
    2468:	4770      	bx	lr
    246a:	bf00      	nop
    246c:	2000631c 	.word	0x2000631c

00002470 <moveStepDirMotorFFAxis5()>:
void moveStepDirMotorFFAxis5() { stepDirMotorInstance[4]->moveFF(AXIS5_STEP_PIN); }
    2470:	4b05      	ldr	r3, [pc, #20]	; (2488 <moveStepDirMotorFFAxis5()+0x18>)
    2472:	6918      	ldr	r0, [r3, #16]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2474:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2478:	2b02      	cmp	r3, #2
    247a:	d803      	bhi.n	2484 <moveStepDirMotorFFAxis5()+0x14>
    247c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2480:	f7ff bf7c 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis5() { stepDirMotorInstance[4]->moveFF(AXIS5_STEP_PIN); }
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	2000631c 	.word	0x2000631c

0000248c <moveStepDirMotorFFAxis6()>:
void moveStepDirMotorFFAxis6() { stepDirMotorInstance[5]->moveFF(AXIS6_STEP_PIN); }
    248c:	4b05      	ldr	r3, [pc, #20]	; (24a4 <moveStepDirMotorFFAxis6()+0x18>)
    248e:	6958      	ldr	r0, [r3, #20]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2490:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2494:	2b02      	cmp	r3, #2
    2496:	d803      	bhi.n	24a0 <moveStepDirMotorFFAxis6()+0x14>
    2498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    249c:	f7ff bf6e 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis6() { stepDirMotorInstance[5]->moveFF(AXIS6_STEP_PIN); }
    24a0:	4770      	bx	lr
    24a2:	bf00      	nop
    24a4:	2000631c 	.word	0x2000631c

000024a8 <moveStepDirMotorFFAxis7()>:
void moveStepDirMotorFFAxis7() { stepDirMotorInstance[6]->moveFF(AXIS7_STEP_PIN); }
    24a8:	4b05      	ldr	r3, [pc, #20]	; (24c0 <moveStepDirMotorFFAxis7()+0x18>)
    24aa:	6998      	ldr	r0, [r3, #24]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    24ac:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    24b0:	2b02      	cmp	r3, #2
    24b2:	d803      	bhi.n	24bc <moveStepDirMotorFFAxis7()+0x14>
    24b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    24b8:	f7ff bf60 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis7() { stepDirMotorInstance[6]->moveFF(AXIS7_STEP_PIN); }
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	2000631c 	.word	0x2000631c

000024c4 <moveStepDirMotorFFAxis8()>:
void moveStepDirMotorFFAxis8() { stepDirMotorInstance[7]->moveFF(AXIS8_STEP_PIN); }
    24c4:	4b05      	ldr	r3, [pc, #20]	; (24dc <moveStepDirMotorFFAxis8()+0x18>)
    24c6:	69d8      	ldr	r0, [r3, #28]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    24c8:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    24cc:	2b02      	cmp	r3, #2
    24ce:	d803      	bhi.n	24d8 <moveStepDirMotorFFAxis8()+0x14>
    24d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    24d4:	f7ff bf52 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis8() { stepDirMotorInstance[7]->moveFF(AXIS8_STEP_PIN); }
    24d8:	4770      	bx	lr
    24da:	bf00      	nop
    24dc:	2000631c 	.word	0x2000631c

000024e0 <moveStepDirMotorFFAxis9()>:
void moveStepDirMotorFFAxis9() { stepDirMotorInstance[8]->moveFF(AXIS9_STEP_PIN); }
    24e0:	4b05      	ldr	r3, [pc, #20]	; (24f8 <moveStepDirMotorFFAxis9()+0x18>)
    24e2:	6a18      	ldr	r0, [r3, #32]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    24e4:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    24e8:	2b02      	cmp	r3, #2
    24ea:	d803      	bhi.n	24f4 <moveStepDirMotorFFAxis9()+0x14>
    24ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    24f0:	f7ff bf44 	b.w	237c <StepDirMotor::moveFF(short) [clone .part.0]>
void moveStepDirMotorFFAxis9() { stepDirMotorInstance[8]->moveFF(AXIS9_STEP_PIN); }
    24f4:	4770      	bx	lr
    24f6:	bf00      	nop
    24f8:	2000631c 	.word	0x2000631c

000024fc <StepDirMotor::moveFR(short) [clone .part.0]>:
  #endif

  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;

  #if STEP_WAVE_FORM == SQUARE
    if (takeStep) {
    24fc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    2500:	b193      	cbz	r3, 2528 <StepDirMotor::moveFR(short) [clone .part.0]+0x2c>
  #endif

  if (sync) targetSteps -= stepSize;
    2502:	7f43      	ldrb	r3, [r0, #29]
    2504:	b12b      	cbz	r3, 2512 <StepDirMotor::moveFR(short) [clone .part.0]+0x16>
    2506:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
    250a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    250c:	b212      	sxth	r2, r2
    250e:	1a9b      	subs	r3, r3, r2
    2510:	6343      	str	r3, [r0, #52]	; 0x34

  if (motorSteps > targetSteps) {
    2512:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2514:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2516:	429a      	cmp	r2, r3
    2518:	dc19      	bgt.n	254e <StepDirMotor::moveFR(short) [clone .part.0]+0x52>
    digitalWriteF(stepPin, stepSet);
  }

  #if STEP_WAVE_FORM == SQUARE
    } else digitalWriteF(stepPin, stepClr);
    takeStep = !takeStep;
    251a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    251e:	f083 0301 	eor.w	r3, r3, #1
    2522:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  #endif
}
    2526:	4770      	bx	lr
    } else digitalWriteF(stepPin, stepClr);
    2528:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
    252c:	b2c9      	uxtb	r1, r1
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    252e:	b1cb      	cbz	r3, 2564 <StepDirMotor::moveFR(short) [clone .part.0]+0x68>
    2530:	4b14      	ldr	r3, [pc, #80]	; (2584 <StepDirMotor::moveFR(short) [clone .part.0]+0x88>)
    2532:	010a      	lsls	r2, r1, #4
    2534:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2538:	589b      	ldr	r3, [r3, r2]
    253a:	68ca      	ldr	r2, [r1, #12]
    253c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    takeStep = !takeStep;
    2540:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    2544:	f083 0301 	eor.w	r3, r3, #1
    2548:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
    254c:	4770      	bx	lr
    motorSteps -= stepSize;
    254e:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
    digitalWriteF(stepPin, stepSet);
    2552:	b2c9      	uxtb	r1, r1
    motorSteps -= stepSize;
    2554:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2556:	b212      	sxth	r2, r2
    2558:	1a9b      	subs	r3, r3, r2
    255a:	6383      	str	r3, [r0, #56]	; 0x38
    digitalWriteF(stepPin, stepSet);
    255c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
    2560:	2b00      	cmp	r3, #0
    2562:	d1e5      	bne.n	2530 <StepDirMotor::moveFR(short) [clone .part.0]+0x34>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    2564:	4b07      	ldr	r3, [pc, #28]	; (2584 <StepDirMotor::moveFR(short) [clone .part.0]+0x88>)
    2566:	010a      	lsls	r2, r1, #4
    2568:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    256c:	589b      	ldr	r3, [r3, r2]
    256e:	68ca      	ldr	r2, [r1, #12]
    2570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    takeStep = !takeStep;
    2574:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    2578:	f083 0301 	eor.w	r3, r3, #1
    257c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
    2580:	4770      	bx	lr
    2582:	bf00      	nop
    2584:	20002b88 	.word	0x20002b88

00002588 <moveStepDirMotorFRAxis1()>:
IRAM_ATTR void moveStepDirMotorFRAxis1() { stepDirMotorInstance[0]->moveFR(AXIS1_STEP_PIN); }
    2588:	4b04      	ldr	r3, [pc, #16]	; (259c <moveStepDirMotorFRAxis1()+0x14>)
    258a:	6818      	ldr	r0, [r3, #0]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    258c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2590:	2b02      	cmp	r3, #2
    2592:	d802      	bhi.n	259a <moveStepDirMotorFRAxis1()+0x12>
    2594:	2128      	movs	r1, #40	; 0x28
    2596:	f7ff bfb1 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
IRAM_ATTR void moveStepDirMotorFRAxis1() { stepDirMotorInstance[0]->moveFR(AXIS1_STEP_PIN); }
    259a:	4770      	bx	lr
    259c:	2000631c 	.word	0x2000631c

000025a0 <moveStepDirMotorFRAxis2()>:
IRAM_ATTR void moveStepDirMotorFRAxis2() { stepDirMotorInstance[1]->moveFR(AXIS2_STEP_PIN); }
    25a0:	4b04      	ldr	r3, [pc, #16]	; (25b4 <moveStepDirMotorFRAxis2()+0x14>)
    25a2:	6858      	ldr	r0, [r3, #4]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    25a4:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    25a8:	2b02      	cmp	r3, #2
    25aa:	d802      	bhi.n	25b2 <moveStepDirMotorFRAxis2()+0x12>
    25ac:	2116      	movs	r1, #22
    25ae:	f7ff bfa5 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
IRAM_ATTR void moveStepDirMotorFRAxis2() { stepDirMotorInstance[1]->moveFR(AXIS2_STEP_PIN); }
    25b2:	4770      	bx	lr
    25b4:	2000631c 	.word	0x2000631c

000025b8 <moveStepDirMotorFRAxis3()>:
void moveStepDirMotorFRAxis3() { stepDirMotorInstance[2]->moveFR(AXIS3_STEP_PIN); }
    25b8:	4b05      	ldr	r3, [pc, #20]	; (25d0 <moveStepDirMotorFRAxis3()+0x18>)
    25ba:	6898      	ldr	r0, [r3, #8]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    25bc:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    25c0:	2b02      	cmp	r3, #2
    25c2:	d803      	bhi.n	25cc <moveStepDirMotorFRAxis3()+0x14>
    25c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25c8:	f7ff bf98 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis3() { stepDirMotorInstance[2]->moveFR(AXIS3_STEP_PIN); }
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop
    25d0:	2000631c 	.word	0x2000631c

000025d4 <moveStepDirMotorFRAxis4()>:
void moveStepDirMotorFRAxis4() { stepDirMotorInstance[3]->moveFR(AXIS4_STEP_PIN); }
    25d4:	4b05      	ldr	r3, [pc, #20]	; (25ec <moveStepDirMotorFRAxis4()+0x18>)
    25d6:	68d8      	ldr	r0, [r3, #12]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    25d8:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    25dc:	2b02      	cmp	r3, #2
    25de:	d803      	bhi.n	25e8 <moveStepDirMotorFRAxis4()+0x14>
    25e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25e4:	f7ff bf8a 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis4() { stepDirMotorInstance[3]->moveFR(AXIS4_STEP_PIN); }
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	2000631c 	.word	0x2000631c

000025f0 <moveStepDirMotorFRAxis5()>:
void moveStepDirMotorFRAxis5() { stepDirMotorInstance[4]->moveFR(AXIS5_STEP_PIN); }
    25f0:	4b05      	ldr	r3, [pc, #20]	; (2608 <moveStepDirMotorFRAxis5()+0x18>)
    25f2:	6918      	ldr	r0, [r3, #16]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    25f4:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    25f8:	2b02      	cmp	r3, #2
    25fa:	d803      	bhi.n	2604 <moveStepDirMotorFRAxis5()+0x14>
    25fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2600:	f7ff bf7c 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis5() { stepDirMotorInstance[4]->moveFR(AXIS5_STEP_PIN); }
    2604:	4770      	bx	lr
    2606:	bf00      	nop
    2608:	2000631c 	.word	0x2000631c

0000260c <moveStepDirMotorFRAxis6()>:
void moveStepDirMotorFRAxis6() { stepDirMotorInstance[5]->moveFR(AXIS6_STEP_PIN); }
    260c:	4b05      	ldr	r3, [pc, #20]	; (2624 <moveStepDirMotorFRAxis6()+0x18>)
    260e:	6958      	ldr	r0, [r3, #20]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2610:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2614:	2b02      	cmp	r3, #2
    2616:	d803      	bhi.n	2620 <moveStepDirMotorFRAxis6()+0x14>
    2618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    261c:	f7ff bf6e 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis6() { stepDirMotorInstance[5]->moveFR(AXIS6_STEP_PIN); }
    2620:	4770      	bx	lr
    2622:	bf00      	nop
    2624:	2000631c 	.word	0x2000631c

00002628 <moveStepDirMotorFRAxis7()>:
void moveStepDirMotorFRAxis7() { stepDirMotorInstance[6]->moveFR(AXIS7_STEP_PIN); }
    2628:	4b05      	ldr	r3, [pc, #20]	; (2640 <moveStepDirMotorFRAxis7()+0x18>)
    262a:	6998      	ldr	r0, [r3, #24]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    262c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2630:	2b02      	cmp	r3, #2
    2632:	d803      	bhi.n	263c <moveStepDirMotorFRAxis7()+0x14>
    2634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2638:	f7ff bf60 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis7() { stepDirMotorInstance[6]->moveFR(AXIS7_STEP_PIN); }
    263c:	4770      	bx	lr
    263e:	bf00      	nop
    2640:	2000631c 	.word	0x2000631c

00002644 <moveStepDirMotorFRAxis8()>:
void moveStepDirMotorFRAxis8() { stepDirMotorInstance[7]->moveFR(AXIS8_STEP_PIN); }
    2644:	4b05      	ldr	r3, [pc, #20]	; (265c <moveStepDirMotorFRAxis8()+0x18>)
    2646:	69d8      	ldr	r0, [r3, #28]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2648:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    264c:	2b02      	cmp	r3, #2
    264e:	d803      	bhi.n	2658 <moveStepDirMotorFRAxis8()+0x14>
    2650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2654:	f7ff bf52 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis8() { stepDirMotorInstance[7]->moveFR(AXIS8_STEP_PIN); }
    2658:	4770      	bx	lr
    265a:	bf00      	nop
    265c:	2000631c 	.word	0x2000631c

00002660 <moveStepDirMotorFRAxis9()>:
void moveStepDirMotorFRAxis9() { stepDirMotorInstance[8]->moveFR(AXIS9_STEP_PIN); }
    2660:	4b05      	ldr	r3, [pc, #20]	; (2678 <moveStepDirMotorFRAxis9()+0x18>)
    2662:	6a18      	ldr	r0, [r3, #32]
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2664:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2668:	2b02      	cmp	r3, #2
    266a:	d803      	bhi.n	2674 <moveStepDirMotorFRAxis9()+0x14>
    266c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2670:	f7ff bf44 	b.w	24fc <StepDirMotor::moveFR(short) [clone .part.0]>
void moveStepDirMotorFRAxis9() { stepDirMotorInstance[8]->moveFR(AXIS9_STEP_PIN); }
    2674:	4770      	bx	lr
    2676:	bf00      	nop
    2678:	2000631c 	.word	0x2000631c

0000267c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)>:
StepDirMotor::StepDirMotor(const uint8_t axisNumber, const StepDirPins *Pins, StepDirDriver *Driver, bool useFastHardwareTimers) {
    267c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2680:	469c      	mov	ip, r3
    2682:	4604      	mov	r4, r0
    2684:	460f      	mov	r7, r1
class Motor {
    2686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    268a:	2500      	movs	r5, #0
    268c:	2601      	movs	r6, #1
    268e:	4874      	ldr	r0, [pc, #464]	; (2860 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1e4>)
  if (axisNumber < 1 || axisNumber > 9) return;
    2690:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
StepDirMotor::StepDirMotor(const uint8_t axisNumber, const StepDirPins *Pins, StepDirDriver *Driver, bool useFastHardwareTimers) {
    2694:	ed2d 8b02 	vpush	{d8}
    2698:	ed9f 8a72 	vldr	s16, [pc, #456]	; 2864 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1e8>
    269c:	6063      	str	r3, [r4, #4]
    269e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    26a2:	7225      	strb	r5, [r4, #8]
    26a4:	f89d 1020 	ldrb.w	r1, [sp, #32]
    26a8:	7265      	strb	r5, [r4, #9]
    26aa:	6020      	str	r0, [r4, #0]
    26ac:	7325      	strb	r5, [r4, #12]
    26ae:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
    26b2:	7766      	strb	r6, [r4, #29]
    26b4:	ed84 8a11 	vstr	s16, [r4, #68]	; 0x44
    26b8:	8525      	strh	r5, [r4, #40]	; 0x28
    26ba:	ed84 8a12 	vstr	s16, [r4, #72]	; 0x48
    26be:	85a5      	strh	r5, [r4, #44]	; 0x2c
    26c0:	ed84 8a13 	vstr	s16, [r4, #76]	; 0x4c
    26c4:	6365      	str	r5, [r4, #52]	; 0x34
    26c6:	ed84 8a14 	vstr	s16, [r4, #80]	; 0x50
    26ca:	63a5      	str	r5, [r4, #56]	; 0x38
    26cc:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
    26d0:	63e5      	str	r5, [r4, #60]	; 0x3c
    26d2:	ed84 8a16 	vstr	s16, [r4, #88]	; 0x58
    26d6:	6426      	str	r6, [r4, #64]	; 0x40
    26d8:	8165      	strh	r5, [r4, #10]
    26da:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
    26de:	8425      	strh	r5, [r4, #32]
    26e0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
    26e4:	6325      	str	r5, [r4, #48]	; 0x30
    26e6:	f884 5067 	strb.w	r5, [r4, #103]	; 0x67
    26ea:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    26ee:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
    26f2:	83e6      	strh	r6, [r4, #30]
    26f4:	f884 5069 	strb.w	r5, [r4, #105]	; 0x69
    26f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (axisNumber < 1 || axisNumber > 9) return;
    26fa:	fa5f f388 	uxtb.w	r3, r8
StepDirMotor::StepDirMotor(const uint8_t axisNumber, const StepDirPins *Pins, StepDirDriver *Driver, bool useFastHardwareTimers) {
    26fe:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
  if (axisNumber < 1 || axisNumber > 9) return;
    2702:	2b08      	cmp	r3, #8
StepDirMotor::StepDirMotor(const uint8_t axisNumber, const StepDirPins *Pins, StepDirDriver *Driver, bool useFastHardwareTimers) {
    2704:	f8a4 6072 	strh.w	r6, [r4, #114]	; 0x72
    2708:	f884 608d 	strb.w	r6, [r4, #141]	; 0x8d
    270c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    2710:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
    2714:	ed84 8a1f 	vstr	s16, [r4, #124]	; 0x7c
    2718:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c
    271c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    2720:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    2724:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
  if (axisNumber < 1 || axisNumber > 9) return;
    2728:	d904      	bls.n	2734 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xb8>
}
    272a:	4620      	mov	r0, r4
    272c:	ecbd 8b02 	vpop	{d8}
    2730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (axisNumber > 2) useFastHardwareTimers = false;
    2734:	2f03      	cmp	r7, #3
  driverType = STEP_DIR;
    2736:	f06f 030b 	mvn.w	r3, #11
  axisPrefix[12] = '0' + axisNumber;
    273a:	f107 0630 	add.w	r6, r7, #48	; 0x30
  this->Pins = Pins;
    273e:	6622      	str	r2, [r4, #96]	; 0x60
  if (axisNumber > 2) useFastHardwareTimers = false;
    2740:	bf28      	it	cs
    2742:	4629      	movcs	r1, r5
  strcpy(axisPrefix, "MSG: StepDir_, ");
    2744:	4d48      	ldr	r5, [pc, #288]	; (2868 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1ec>)
  driverType = STEP_DIR;
    2746:	6063      	str	r3, [r4, #4]
  this->useFastHardwareTimers = useFastHardwareTimers;
    2748:	f884 108d 	strb.w	r1, [r4, #141]	; 0x8d
  this->axisNumber = axisNumber;
    274c:	7327      	strb	r7, [r4, #12]
  switch (axisNumber) {
    274e:	3f02      	subs	r7, #2
  driver = Driver;
    2750:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
  strcpy(axisPrefix, "MSG: StepDir_, ");
    2754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2756:	f8c4 3019 	str.w	r3, [r4, #25]
    275a:	f8c4 000d 	str.w	r0, [r4, #13]
  pulseWidth = driver->getPulseWidth();
    275e:	4660      	mov	r0, ip
  strcpy(axisPrefix, "MSG: StepDir_, ");
    2760:	f8c4 1011 	str.w	r1, [r4, #17]
    2764:	f8c4 2015 	str.w	r2, [r4, #21]
  axisPrefix[12] = '0' + axisNumber;
    2768:	7666      	strb	r6, [r4, #25]
  pulseWidth = driver->getPulseWidth();
    276a:	f000 fae7 	bl	2d3c <StepDirDriver::getPulseWidth()>
  setDefaultParameters(driver->settings.microsteps, driver->settings.microstepsSlewing, driver->settings.currentHold, driver->settings.currentRun, driver->settings.currentGoto, 0);
    276e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  pulseWidth = driver->getPulseWidth();
    2770:	66e0      	str	r0, [r4, #108]	; 0x6c
  setDefaultParameters(driver->settings.microsteps, driver->settings.microstepsSlewing, driver->settings.currentHold, driver->settings.currentRun, driver->settings.currentGoto, 0);
    2772:	eef0 2a48 	vmov.f32	s5, s16
    2776:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
    277a:	4620      	mov	r0, r4
    277c:	ee02 2a10 	vmov	s4, r2
    2780:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
    2784:	ee01 2a90 	vmov	s3, r2
    2788:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
    278c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
    2790:	ee01 2a10 	vmov	s2, r2
    2794:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
    2798:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    279c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
    27a0:	ee00 2a90 	vmov	s1, r2
    27a4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
    27a8:	ee00 3a10 	vmov	s0, r3
    27ac:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    27b0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    27b4:	f7ff fb7c 	bl	1eb0 <Motor::setDefaultParameters(float, float, float, float, float, float)>
  stepDirMotorInstance[axisNumber - 1] = this;
    27b8:	4b2c      	ldr	r3, [pc, #176]	; (286c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1f0>)
    27ba:	f843 4028 	str.w	r4, [r3, r8, lsl #2]
  switch (axisNumber) {
    27be:	2f07      	cmp	r7, #7
    27c0:	d845      	bhi.n	284e <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1d2>
    27c2:	e8df f007 	tbb	[pc, r7]
    27c6:	343c      	.short	0x343c
    27c8:	141c242c 	.word	0x141c242c
    27cc:	040c      	.short	0x040c
    case 9: callback = moveStepDirMotorAxis9; callbackFF = moveStepDirMotorFFAxis9; callbackFR = moveStepDirMotorFRAxis9; break;
    27ce:	4928      	ldr	r1, [pc, #160]	; (2870 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1f4>)
    27d0:	4a28      	ldr	r2, [pc, #160]	; (2874 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1f8>)
    27d2:	4b29      	ldr	r3, [pc, #164]	; (2878 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x1fc>)
    27d4:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    27d8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    27dc:	e7a5      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 8: callback = moveStepDirMotorAxis8; callbackFF = moveStepDirMotorFFAxis8; callbackFR = moveStepDirMotorFRAxis8; break;
    27de:	4927      	ldr	r1, [pc, #156]	; (287c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x200>)
    27e0:	4a27      	ldr	r2, [pc, #156]	; (2880 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x204>)
    27e2:	4b28      	ldr	r3, [pc, #160]	; (2884 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x208>)
    27e4:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    27e8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    27ec:	e79d      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 7: callback = moveStepDirMotorAxis7; callbackFF = moveStepDirMotorFFAxis7; callbackFR = moveStepDirMotorFRAxis7; break;
    27ee:	4926      	ldr	r1, [pc, #152]	; (2888 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x20c>)
    27f0:	4a26      	ldr	r2, [pc, #152]	; (288c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x210>)
    27f2:	4b27      	ldr	r3, [pc, #156]	; (2890 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x214>)
    27f4:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    27f8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    27fc:	e795      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 6: callback = moveStepDirMotorAxis6; callbackFF = moveStepDirMotorFFAxis6; callbackFR = moveStepDirMotorFRAxis6; break;
    27fe:	4925      	ldr	r1, [pc, #148]	; (2894 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x218>)
    2800:	4a25      	ldr	r2, [pc, #148]	; (2898 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x21c>)
    2802:	4b26      	ldr	r3, [pc, #152]	; (289c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x220>)
    2804:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    2808:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    280c:	e78d      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 5: callback = moveStepDirMotorAxis5; callbackFF = moveStepDirMotorFFAxis5; callbackFR = moveStepDirMotorFRAxis5; break;
    280e:	4924      	ldr	r1, [pc, #144]	; (28a0 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x224>)
    2810:	4a24      	ldr	r2, [pc, #144]	; (28a4 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x228>)
    2812:	4b25      	ldr	r3, [pc, #148]	; (28a8 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x22c>)
    2814:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    2818:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    281c:	e785      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 4: callback = moveStepDirMotorAxis4; callbackFF = moveStepDirMotorFFAxis4; callbackFR = moveStepDirMotorFRAxis4; break;
    281e:	4923      	ldr	r1, [pc, #140]	; (28ac <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x230>)
    2820:	4a23      	ldr	r2, [pc, #140]	; (28b0 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x234>)
    2822:	4b24      	ldr	r3, [pc, #144]	; (28b4 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x238>)
    2824:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    2828:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    282c:	e77d      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 3: callback = moveStepDirMotorAxis3; callbackFF = moveStepDirMotorFFAxis3; callbackFR = moveStepDirMotorFRAxis3; break;
    282e:	4922      	ldr	r1, [pc, #136]	; (28b8 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x23c>)
    2830:	4a22      	ldr	r2, [pc, #136]	; (28bc <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x240>)
    2832:	4b23      	ldr	r3, [pc, #140]	; (28c0 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x244>)
    2834:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    2838:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    283c:	e775      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 2: callback = moveStepDirMotorAxis2; callbackFF = moveStepDirMotorFFAxis2; callbackFR = moveStepDirMotorFRAxis2; break;
    283e:	4921      	ldr	r1, [pc, #132]	; (28c4 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x248>)
    2840:	4a21      	ldr	r2, [pc, #132]	; (28c8 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x24c>)
    2842:	4b22      	ldr	r3, [pc, #136]	; (28cc <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x250>)
    2844:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    2848:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    284c:	e76d      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    case 1: callback = moveStepDirMotorAxis1; callbackFF = moveStepDirMotorFFAxis1; callbackFR = moveStepDirMotorFRAxis1; break;
    284e:	4920      	ldr	r1, [pc, #128]	; (28d0 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x254>)
    2850:	4a20      	ldr	r2, [pc, #128]	; (28d4 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x258>)
    2852:	4b21      	ldr	r3, [pc, #132]	; (28d8 <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0x25c>)
    2854:	e9c4 1224 	strd	r1, r2, [r4, #144]	; 0x90
    2858:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    285c:	e765      	b.n	272a <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)+0xae>
    285e:	bf00      	nop
    2860:	20002404 	.word	0x20002404
    2864:	00000000 	.word	0x00000000
    2868:	200020dc 	.word	0x200020dc
    286c:	2000631c 	.word	0x2000631c
    2870:	00002d29 	.word	0x00002d29
    2874:	000024e1 	.word	0x000024e1
    2878:	00002661 	.word	0x00002661
    287c:	00002d19 	.word	0x00002d19
    2880:	000024c5 	.word	0x000024c5
    2884:	00002645 	.word	0x00002645
    2888:	00002d09 	.word	0x00002d09
    288c:	000024a9 	.word	0x000024a9
    2890:	00002629 	.word	0x00002629
    2894:	00002cf9 	.word	0x00002cf9
    2898:	0000248d 	.word	0x0000248d
    289c:	0000260d 	.word	0x0000260d
    28a0:	00002ce9 	.word	0x00002ce9
    28a4:	00002471 	.word	0x00002471
    28a8:	000025f1 	.word	0x000025f1
    28ac:	00002cd9 	.word	0x00002cd9
    28b0:	00002455 	.word	0x00002455
    28b4:	000025d5 	.word	0x000025d5
    28b8:	00002cc9 	.word	0x00002cc9
    28bc:	00002439 	.word	0x00002439
    28c0:	000025b9 	.word	0x000025b9
    28c4:	00002cb9 	.word	0x00002cb9
    28c8:	00002421 	.word	0x00002421
    28cc:	000025a1 	.word	0x000025a1
    28d0:	00002ca9 	.word	0x00002ca9
    28d4:	00002409 	.word	0x00002409
    28d8:	00002589 	.word	0x00002589

000028dc <StepDirMotor::modeSwitch()>:
  if (lastFrequency <= backlashFrequency*2.0F) {
    28dc:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
    28e0:	ed90 7a1f 	vldr	s14, [r0, #124]	; 0x7c
    28e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (microstepModeControl >= MMC_SLEWING) {
    28e8:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
void StepDirMotor::modeSwitch() {
    28ec:	b510      	push	{r4, lr}
  if (lastFrequency <= backlashFrequency*2.0F) {
    28ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
void StepDirMotor::modeSwitch() {
    28f2:	4604      	mov	r4, r0
  if (lastFrequency <= backlashFrequency*2.0F) {
    28f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    28f8:	d802      	bhi.n	2900 <StepDirMotor::modeSwitch()+0x24>
    if (microstepModeControl >= MMC_SLEWING) {
    28fa:	2b00      	cmp	r3, #0
    28fc:	d12f      	bne.n	295e <StepDirMotor::modeSwitch()+0x82>
}
    28fe:	bd10      	pop	{r4, pc}
    if (microstepModeControl == MMC_TRACKING) {
    2900:	b963      	cbnz	r3, 291c <StepDirMotor::modeSwitch()+0x40>
      noInterrupts();
    2902:	b672      	cpsid	i
      if (!sync || (step == -1 && direction == dirRev) || (step == 1 && direction == dirFwd)) {
    2904:	7f43      	ldrb	r3, [r0, #29]
    2906:	2b00      	cmp	r3, #0
    2908:	d13e      	bne.n	2988 <StepDirMotor::modeSwitch()+0xac>
        microstepModeControl = MMC_SLEWING_REQUEST;
    290a:	2302      	movs	r3, #2
    290c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
      interrupts();
    2910:	b662      	cpsie	i
	return systick_millis_count;
    2912:	4b29      	ldr	r3, [pc, #164]	; (29b8 <StepDirMotor::modeSwitch()+0xdc>)
    2914:	681b      	ldr	r3, [r3, #0]
      switchStartTimeMs = millis();
    2916:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
    291a:	bd10      	pop	{r4, pc}
    if (microstepModeControl == MMC_SLEWING_PAUSE) {
    291c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2920:	2b03      	cmp	r3, #3
    2922:	d1ec      	bne.n	28fe <StepDirMotor::modeSwitch()+0x22>
      if (driver->modeSwitchAllowed || driver->modeSwitchFastAllowed) {
    2924:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    2926:	7903      	ldrb	r3, [r0, #4]
    2928:	2b00      	cmp	r3, #0
    292a:	d03a      	beq.n	29a2 <StepDirMotor::modeSwitch()+0xc6>
        stepSize = driver->modeMicrostepSlewing();
    292c:	6803      	ldr	r3, [r0, #0]
    292e:	691b      	ldr	r3, [r3, #16]
    2930:	4798      	blx	r3
    2932:	b200      	sxth	r0, r0
    2934:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
    if (direction == dirRev) {
    2938:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
    293c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
      tasks.setCallback(taskHandle, callbackFF);
    2940:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    if (direction == dirRev) {
    2944:	429a      	cmp	r2, r3
      tasks.setCallback(taskHandle, callbackFF);
    2946:	481d      	ldr	r0, [pc, #116]	; (29bc <StepDirMotor::modeSwitch()+0xe0>)
      tasks.setCallback(taskHandle, callbackFR);
    2948:	bf0c      	ite	eq
    294a:	f8d4 2098 	ldreq.w	r2, [r4, #152]	; 0x98
      tasks.setCallback(taskHandle, callbackFF);
    294e:	f8d4 2094 	ldrne.w	r2, [r4, #148]	; 0x94
    2952:	f003 fc8b 	bl	626c <Tasks::setCallback(unsigned char, void (*)())>
      microstepModeControl = MMC_SLEWING_READY;
    2956:	2304      	movs	r3, #4
    2958:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
}
    295c:	bd10      	pop	{r4, pc}
      microstepModeControl = MMC_TRACKING_READY;
    295e:	2305      	movs	r3, #5
    tasks.setCallback(taskHandle, callback);
    2960:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    2964:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
      microstepModeControl = MMC_TRACKING_READY;
    2968:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    tasks.setCallback(taskHandle, callback);
    296c:	4813      	ldr	r0, [pc, #76]	; (29bc <StepDirMotor::modeSwitch()+0xe0>)
    296e:	f003 fc7d 	bl	626c <Tasks::setCallback(unsigned char, void (*)())>
      if (driver->modeSwitchAllowed || driver->modeSwitchFastAllowed) {
    2972:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    2974:	7903      	ldrb	r3, [r0, #4]
    2976:	b913      	cbnz	r3, 297e <StepDirMotor::modeSwitch()+0xa2>
    2978:	7943      	ldrb	r3, [r0, #5]
    297a:	2b00      	cmp	r3, #0
    297c:	d0bf      	beq.n	28fe <StepDirMotor::modeSwitch()+0x22>
        driver->modeMicrostepTracking();
    297e:	6803      	ldr	r3, [r0, #0]
}
    2980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        driver->modeMicrostepTracking();
    2984:	68db      	ldr	r3, [r3, #12]
    2986:	4718      	bx	r3
      if (!sync || (step == -1 && direction == dirRev) || (step == 1 && direction == dirFwd)) {
    2988:	6c03      	ldr	r3, [r0, #64]	; 0x40
    298a:	3301      	adds	r3, #1
    298c:	d00d      	beq.n	29aa <StepDirMotor::modeSwitch()+0xce>
    298e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2990:	2b01      	cmp	r3, #1
    2992:	d1bd      	bne.n	2910 <StepDirMotor::modeSwitch()+0x34>
    2994:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
    2998:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
    299c:	429a      	cmp	r2, r3
    299e:	d1b7      	bne.n	2910 <StepDirMotor::modeSwitch()+0x34>
    29a0:	e7b3      	b.n	290a <StepDirMotor::modeSwitch()+0x2e>
      if (driver->modeSwitchAllowed || driver->modeSwitchFastAllowed) {
    29a2:	7943      	ldrb	r3, [r0, #5]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d0c7      	beq.n	2938 <StepDirMotor::modeSwitch()+0x5c>
    29a8:	e7c0      	b.n	292c <StepDirMotor::modeSwitch()+0x50>
      if (!sync || (step == -1 && direction == dirRev) || (step == 1 && direction == dirFwd)) {
    29aa:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
    29ae:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    29b2:	429a      	cmp	r2, r3
    29b4:	d1eb      	bne.n	298e <StepDirMotor::modeSwitch()+0xb2>
    29b6:	e7a8      	b.n	290a <StepDirMotor::modeSwitch()+0x2e>
    29b8:	20006344 	.word	0x20006344
    29bc:	2000634c 	.word	0x2000634c

000029c0 <StepDirMotor::setFrequencySteps(float)>:
void StepDirMotor::setFrequencySteps(float frequency) {
    29c0:	b538      	push	{r3, r4, r5, lr}
  if (!inBacklash) modeSwitch();
    29c2:	7a03      	ldrb	r3, [r0, #8]
void StepDirMotor::setFrequencySteps(float frequency) {
    29c4:	4604      	mov	r4, r0
    29c6:	ed2d 8b02 	vpush	{d8}
    29ca:	eeb0 8a40 	vmov.f32	s16, s0
  if (!inBacklash) modeSwitch();
    29ce:	2b00      	cmp	r3, #0
    29d0:	d070      	beq.n	2ab4 <StepDirMotor::setFrequencySteps(float)+0xf4>
  Y;
    29d2:	4840      	ldr	r0, [pc, #256]	; (2ad4 <StepDirMotor::setFrequencySteps(float)+0x114>)
    29d4:	f003 fd34 	bl	6440 <Tasks::yield()>
  if (frequency > 0.0F) dir = 1; else if (frequency < 0.0F) { frequency = -frequency; dir = -1; }
    29d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    29dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29e0:	dd65      	ble.n	2aae <StepDirMotor::setFrequencySteps(float)+0xee>
    29e2:	2501      	movs	r5, #1
  if (inBacklash) frequency = backlashFrequency;
    29e4:	7a23      	ldrb	r3, [r4, #8]
    29e6:	b10b      	cbz	r3, 29ec <StepDirMotor::setFrequencySteps(float)+0x2c>
    29e8:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
  if (frequency != currentFrequency || microstepModeControl >= MMC_SLEWING_PAUSE) {
    29ec:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
    29f0:	eef4 7a48 	vcmp.f32	s15, s16
    29f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29f8:	d103      	bne.n	2a02 <StepDirMotor::setFrequencySteps(float)+0x42>
    29fa:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    29fe:	2b02      	cmp	r3, #2
    2a00:	d94f      	bls.n	2aa2 <StepDirMotor::setFrequencySteps(float)+0xe2>
    if (microstepModeControl == MMC_SLEWING || microstepModeControl == MMC_SLEWING_READY) frequency /= stepSize;
    2a02:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    lastFrequency = frequency;
    2a06:	ed84 8a1f 	vstr	s16, [r4, #124]	; 0x7c
    if (microstepModeControl == MMC_SLEWING || microstepModeControl == MMC_SLEWING_READY) frequency /= stepSize;
    2a0a:	2b01      	cmp	r3, #1
    2a0c:	d03f      	beq.n	2a8e <StepDirMotor::setFrequencySteps(float)+0xce>
    2a0e:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    2a12:	2b04      	cmp	r3, #4
    2a14:	d03b      	beq.n	2a8e <StepDirMotor::setFrequencySteps(float)+0xce>
      float period = 500000.0F/frequency;
    2a16:	ed9f 7a30 	vldr	s14, [pc, #192]	; 2ad8 <StepDirMotor::setFrequencySteps(float)+0x118>
    2a1a:	eec7 7a08 	vdiv.f32	s15, s14, s16
    if (!isnan(period) && period <= 130000000.0F) {
    2a1e:	eef4 7a67 	vcmp.f32	s15, s15
    2a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a26:	d606      	bvs.n	2a36 <StepDirMotor::setFrequencySteps(float)+0x76>
    2a28:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 2adc <StepDirMotor::setFrequencySteps(float)+0x11c>
    2a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a34:	d941      	bls.n	2aba <StepDirMotor::setFrequencySteps(float)+0xfa>
    2a36:	2500      	movs	r5, #0
      frequency = 0.0F;
    2a38:	ed9f 8a29 	vldr	s16, [pc, #164]	; 2ae0 <StepDirMotor::setFrequencySteps(float)+0x120>
      dir = 0;
    2a3c:	462a      	mov	r2, r5
    if (step != dir) step = 0;
    2a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      lastPeriod = (unsigned long)lroundf(period);
    2a40:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (step != dir) step = 0;
    2a44:	42ab      	cmp	r3, r5
    currentFrequency = frequency;
    2a46:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
    if (step != dir) step = 0;
    2a4a:	d001      	beq.n	2a50 <StepDirMotor::setFrequencySteps(float)+0x90>
    2a4c:	2300      	movs	r3, #0
    2a4e:	6423      	str	r3, [r4, #64]	; 0x40
    if (lastPeriodSet != lastPeriod) {
    2a50:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    2a54:	4293      	cmp	r3, r2
    2a56:	d008      	beq.n	2a6a <StepDirMotor::setFrequencySteps(float)+0xaa>
      tasks.setPeriodSubMicros(taskHandle, lastPeriod);
    2a58:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    2a5c:	481d      	ldr	r0, [pc, #116]	; (2ad4 <StepDirMotor::setFrequencySteps(float)+0x114>)
    2a5e:	f003 fc83 	bl	6368 <Tasks::setPeriodSubMicros(unsigned char, unsigned long)>
      lastPeriodSet = lastPeriod;
    2a62:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2a66:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    step = dir;
    2a6a:	6425      	str	r5, [r4, #64]	; 0x40
    if (microstepModeControl == MMC_TRACKING_READY) microstepModeControl = MMC_TRACKING;
    2a6c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    2a70:	2b05      	cmp	r3, #5
    2a72:	d102      	bne.n	2a7a <StepDirMotor::setFrequencySteps(float)+0xba>
    2a74:	2300      	movs	r3, #0
    2a76:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if (microstepModeControl == MMC_SLEWING_READY) {
    2a7a:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    2a7e:	2b04      	cmp	r3, #4
    2a80:	d102      	bne.n	2a88 <StepDirMotor::setFrequencySteps(float)+0xc8>
      microstepModeControl = MMC_SLEWING;
    2a82:	2301      	movs	r3, #1
    2a84:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
}
    2a88:	ecbd 8b02 	vpop	{d8}
    2a8c:	bd38      	pop	{r3, r4, r5, pc}
    if (microstepModeControl == MMC_SLEWING || microstepModeControl == MMC_SLEWING_READY) frequency /= stepSize;
    2a8e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    2a92:	b21b      	sxth	r3, r3
    2a94:	ee07 3a90 	vmov	s15, r3
    2a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2a9c:	ee88 8a27 	vdiv.f32	s16, s16, s15
    2aa0:	e7b9      	b.n	2a16 <StepDirMotor::setFrequencySteps(float)+0x56>
    noInterrupts();
    2aa2:	b672      	cpsid	i
    step = dir;
    2aa4:	6425      	str	r5, [r4, #64]	; 0x40
    interrupts();
    2aa6:	b662      	cpsie	i
}
    2aa8:	ecbd 8b02 	vpop	{d8}
    2aac:	bd38      	pop	{r3, r4, r5, pc}
  if (frequency > 0.0F) dir = 1; else if (frequency < 0.0F) { frequency = -frequency; dir = -1; }
    2aae:	d40c      	bmi.n	2aca <StepDirMotor::setFrequencySteps(float)+0x10a>
  int dir = 0;
    2ab0:	2500      	movs	r5, #0
    2ab2:	e797      	b.n	29e4 <StepDirMotor::setFrequencySteps(float)+0x24>
  if (!inBacklash) modeSwitch();
    2ab4:	f7ff ff12 	bl	28dc <StepDirMotor::modeSwitch()>
    2ab8:	e78b      	b.n	29d2 <StepDirMotor::setFrequencySteps(float)+0x12>
      period *= 16.0F;
    2aba:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
      lastPeriod = (unsigned long)lroundf(period);
    2abe:	ee27 0a80 	vmul.f32	s0, s15, s0
    2ac2:	f018 ff4b 	bl	1b95c <lroundf>
    2ac6:	4602      	mov	r2, r0
    2ac8:	e7b9      	b.n	2a3e <StepDirMotor::setFrequencySteps(float)+0x7e>
  if (frequency > 0.0F) dir = 1; else if (frequency < 0.0F) { frequency = -frequency; dir = -1; }
    2aca:	eeb1 8a48 	vneg.f32	s16, s16
    2ace:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2ad2:	e787      	b.n	29e4 <StepDirMotor::setFrequencySteps(float)+0x24>
    2ad4:	2000634c 	.word	0x2000634c
    2ad8:	48f42400 	.word	0x48f42400
    2adc:	4cf7f490 	.word	0x4cf7f490
    2ae0:	00000000 	.word	0x00000000

00002ae4 <StepDirMotor::move(short)>:
  if (microstepModeControl == MMC_SLEWING_REQUEST && (motorSteps + backlashSteps) % homeSteps == 0 && direction < DirNone) {
    2ae4:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2ae8:	2b02      	cmp	r3, #2
IRAM_ATTR void StepDirMotor::move(const int16_t stepPin) {
    2aea:	b410      	push	{r4}
  if (microstepModeControl == MMC_SLEWING_REQUEST && (motorSteps + backlashSteps) % homeSteps == 0 && direction < DirNone) {
    2aec:	d043      	beq.n	2b76 <StepDirMotor::move(short)+0x92>
  if (microstepModeControl >= MMC_SLEWING_PAUSE) return;
    2aee:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2af2:	2b02      	cmp	r3, #2
    2af4:	d83c      	bhi.n	2b70 <StepDirMotor::move(short)+0x8c>
    if (takeStep) {
    2af6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    2afa:	b333      	cbz	r3, 2b4a <StepDirMotor::move(short)+0x66>
  long lastTargetSteps = targetSteps;
    2afc:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if (sync && !inBacklash) targetSteps += step;
    2afe:	7f43      	ldrb	r3, [r0, #29]
    2b00:	b12b      	cbz	r3, 2b0e <StepDirMotor::move(short)+0x2a>
    2b02:	7a03      	ldrb	r3, [r0, #8]
    2b04:	b91b      	cbnz	r3, 2b0e <StepDirMotor::move(short)+0x2a>
    2b06:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2b08:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2b0a:	4413      	add	r3, r2
    2b0c:	6343      	str	r3, [r0, #52]	; 0x34
  if (motorSteps > targetSteps || (inBacklash && direction == dirRev)) {
    2b0e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2b10:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2b12:	429a      	cmp	r2, r3
    2b14:	dc53      	bgt.n	2bbe <StepDirMotor::move(short)+0xda>
    2b16:	7a03      	ldrb	r3, [r0, #8]
    2b18:	b12b      	cbz	r3, 2b26 <StepDirMotor::move(short)+0x42>
    2b1a:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
    2b1e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    2b22:	429a      	cmp	r2, r3
    2b24:	d04b      	beq.n	2bbe <StepDirMotor::move(short)+0xda>
  if (motorSteps < targetSteps || (inBacklash && direction == dirFwd)) {
    2b26:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2b28:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2b2a:	429a      	cmp	r2, r3
    2b2c:	db63      	blt.n	2bf6 <StepDirMotor::move(short)+0x112>
    2b2e:	7a03      	ldrb	r3, [r0, #8]
    2b30:	b12b      	cbz	r3, 2b3e <StepDirMotor::move(short)+0x5a>
    2b32:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
    2b36:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    2b3a:	429a      	cmp	r2, r3
    2b3c:	d05b      	beq.n	2bf6 <StepDirMotor::move(short)+0x112>
  } else if (!inBacklash) direction = DirNone;
    2b3e:	7a03      	ldrb	r3, [r0, #8]
    2b40:	b983      	cbnz	r3, 2b64 <StepDirMotor::move(short)+0x80>
    2b42:	23fd      	movs	r3, #253	; 0xfd
    2b44:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    2b48:	e00c      	b.n	2b64 <StepDirMotor::move(short)+0x80>
    } else digitalWriteF(stepPin, stepClr);
    2b4a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
    2b4e:	b2c9      	uxtb	r1, r1
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    2b50:	2b00      	cmp	r3, #0
    2b52:	d147      	bne.n	2be4 <StepDirMotor::move(short)+0x100>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    2b54:	4b52      	ldr	r3, [pc, #328]	; (2ca0 <StepDirMotor::move(short)+0x1bc>)
    2b56:	010a      	lsls	r2, r1, #4
    2b58:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2b5c:	589b      	ldr	r3, [r3, r2]
    2b5e:	68ca      	ldr	r2, [r1, #12]
    2b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    takeStep = !takeStep;
    2b64:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    2b68:	f083 0301 	eor.w	r3, r3, #1
    2b6c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
    2b70:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b74:	4770      	bx	lr
  if (microstepModeControl == MMC_SLEWING_REQUEST && (motorSteps + backlashSteps) % homeSteps == 0 && direction < DirNone) {
    2b76:	6b84      	ldr	r4, [r0, #56]	; 0x38
    2b78:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2b7a:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
    2b7e:	fa14 f383 	uxtah	r3, r4, r3
    2b82:	b212      	sxth	r2, r2
    2b84:	fb93 fcf2 	sdiv	ip, r3, r2
    2b88:	fb02 331c 	mls	r3, r2, ip, r3
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d1ae      	bne.n	2aee <StepDirMotor::move(short)+0xa>
    2b90:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    2b94:	2bfc      	cmp	r3, #252	; 0xfc
    2b96:	d8aa      	bhi.n	2aee <StepDirMotor::move(short)+0xa>
    microstepModeControl = MMC_SLEWING_PAUSE;
    2b98:	2303      	movs	r3, #3
    2b9a:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
    tasks.immediate(monitorHandle);
    2b9e:	7a43      	ldrb	r3, [r0, #9]
    // values above 16M cause the timers to compensate by running slower
    // values below 16M cause the timers to compensate by running faster
    void setPeriodRatioSubMicros(unsigned long value);

    // set process to run immediately on the next pass (within its priority level)
    IRAM_ATTR inline void immediate(uint8_t handle) { if (handle != 0 && allocated[handle - 1]) { task[handle - 1]->immediate = true; } }
    2ba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d0a2      	beq.n	2aee <StepDirMotor::move(short)+0xa>
    2ba8:	4b3e      	ldr	r3, [pc, #248]	; (2ca4 <StepDirMotor::move(short)+0x1c0>)
    2baa:	189c      	adds	r4, r3, r2
    2bac:	7b24      	ldrb	r4, [r4, #12]
    2bae:	2c00      	cmp	r4, #0
    2bb0:	d09d      	beq.n	2aee <StepDirMotor::move(short)+0xa>
    2bb2:	3211      	adds	r2, #17
    2bb4:	2401      	movs	r4, #1
    2bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2bba:	705c      	strb	r4, [r3, #1]
    2bbc:	e797      	b.n	2aee <StepDirMotor::move(short)+0xa>
    if (direction != dirRev) {
    2bbe:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
    2bc2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d140      	bne.n	2c4c <StepDirMotor::move(short)+0x168>
    if (backlashSteps > 0) {
    2bca:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2bcc:	b29b      	uxth	r3, r3
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d12b      	bne.n	2c2a <StepDirMotor::move(short)+0x146>
      motorSteps--;
    2bd2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2bd4:	3a01      	subs	r2, #1
    2bd6:	6382      	str	r2, [r0, #56]	; 0x38
      inBacklash = false;
    2bd8:	7203      	strb	r3, [r0, #8]
    digitalWriteF(stepPin, stepSet);
    2bda:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
    2bde:	b2c9      	uxtb	r1, r1
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    2be0:	2b00      	cmp	r3, #0
    2be2:	d0b7      	beq.n	2b54 <StepDirMotor::move(short)+0x70>
    2be4:	4b2e      	ldr	r3, [pc, #184]	; (2ca0 <StepDirMotor::move(short)+0x1bc>)
    2be6:	010a      	lsls	r2, r1, #4
    2be8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2bec:	589b      	ldr	r3, [r3, r2]
    2bee:	68ca      	ldr	r2, [r1, #12]
    2bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2bf4:	e7b6      	b.n	2b64 <StepDirMotor::move(short)+0x80>
    if (direction != dirFwd) {
    2bf6:	f890 2069 	ldrb.w	r2, [r0, #105]	; 0x69
    2bfa:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
    2bfe:	429a      	cmp	r2, r3
    2c00:	d138      	bne.n	2c74 <StepDirMotor::move(short)+0x190>
    if (backlashSteps < backlashAmountSteps) {
    2c02:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    2c04:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2c06:	b292      	uxth	r2, r2
    2c08:	b29b      	uxth	r3, r3
    2c0a:	429a      	cmp	r2, r3
    2c0c:	d218      	bcs.n	2c40 <StepDirMotor::move(short)+0x15c>
      backlashSteps++;
    2c0e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2c10:	3301      	adds	r3, #1
    2c12:	b29b      	uxth	r3, r3
    2c14:	8503      	strh	r3, [r0, #40]	; 0x28
      inBacklash = backlashSteps < backlashAmountSteps;
    2c16:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2c18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2c1a:	b29b      	uxth	r3, r3
    2c1c:	b292      	uxth	r2, r2
    2c1e:	4293      	cmp	r3, r2
    2c20:	bf2c      	ite	cs
    2c22:	2300      	movcs	r3, #0
    2c24:	2301      	movcc	r3, #1
    2c26:	7203      	strb	r3, [r0, #8]
    2c28:	e7d7      	b.n	2bda <StepDirMotor::move(short)+0xf6>
      backlashSteps--;
    2c2a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2c2c:	3b01      	subs	r3, #1
    2c2e:	b29b      	uxth	r3, r3
    2c30:	8503      	strh	r3, [r0, #40]	; 0x28
      inBacklash = backlashSteps > 0;
    2c32:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    2c34:	b29b      	uxth	r3, r3
    2c36:	3b00      	subs	r3, #0
    2c38:	bf18      	it	ne
    2c3a:	2301      	movne	r3, #1
    2c3c:	7203      	strb	r3, [r0, #8]
    2c3e:	e7cc      	b.n	2bda <StepDirMotor::move(short)+0xf6>
      motorSteps++;
    2c40:	6b83      	ldr	r3, [r0, #56]	; 0x38
      inBacklash = false;
    2c42:	2200      	movs	r2, #0
      motorSteps++;
    2c44:	3301      	adds	r3, #1
    2c46:	6383      	str	r3, [r0, #56]	; 0x38
      inBacklash = false;
    2c48:	7202      	strb	r2, [r0, #8]
    2c4a:	e7c6      	b.n	2bda <StepDirMotor::move(short)+0xf6>
      targetSteps = lastTargetSteps;
    2c4c:	6344      	str	r4, [r0, #52]	; 0x34
        direction = dirRev;
    2c4e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
        digitalWriteF(Pins->dir, dirRev);
    2c52:	6e01      	ldr	r1, [r0, #96]	; 0x60
        direction = dirRev;
    2c54:	b2db      	uxtb	r3, r3
    2c56:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
        digitalWriteF(Pins->dir, dirRev);
    2c5a:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    2c5e:	790b      	ldrb	r3, [r1, #4]
    2c60:	b1a2      	cbz	r2, 2c8c <StepDirMotor::move(short)+0x1a8>
    2c62:	4a0f      	ldr	r2, [pc, #60]	; (2ca0 <StepDirMotor::move(short)+0x1bc>)
    2c64:	0119      	lsls	r1, r3, #4
    2c66:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2c6a:	5852      	ldr	r2, [r2, r1]
    2c6c:	68db      	ldr	r3, [r3, #12]
    2c6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    2c72:	e77d      	b.n	2b70 <StepDirMotor::move(short)+0x8c>
      targetSteps = lastTargetSteps;
    2c74:	6344      	str	r4, [r0, #52]	; 0x34
        direction = dirFwd;
    2c76:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
        digitalWriteF(Pins->dir, dirFwd);
    2c7a:	6e01      	ldr	r1, [r0, #96]	; 0x60
        direction = dirFwd;
    2c7c:	b2db      	uxtb	r3, r3
    2c7e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
        digitalWriteF(Pins->dir, dirFwd);
    2c82:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
    2c86:	790b      	ldrb	r3, [r1, #4]
    2c88:	2a00      	cmp	r2, #0
    2c8a:	d1ea      	bne.n	2c62 <StepDirMotor::move(short)+0x17e>
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    2c8c:	4a04      	ldr	r2, [pc, #16]	; (2ca0 <StepDirMotor::move(short)+0x1bc>)
    2c8e:	0119      	lsls	r1, r3, #4
    2c90:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2c94:	5852      	ldr	r2, [r2, r1]
    2c96:	68db      	ldr	r3, [r3, #12]
    2c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    2c9c:	e768      	b.n	2b70 <StepDirMotor::move(short)+0x8c>
    2c9e:	bf00      	nop
    2ca0:	20002b88 	.word	0x20002b88
    2ca4:	2000634c 	.word	0x2000634c

00002ca8 <moveStepDirMotorAxis1()>:
IRAM_ATTR void moveStepDirMotorAxis1() { stepDirMotorInstance[0]->move(AXIS1_STEP_PIN); }
    2ca8:	4b02      	ldr	r3, [pc, #8]	; (2cb4 <moveStepDirMotorAxis1()+0xc>)
    2caa:	2128      	movs	r1, #40	; 0x28
    2cac:	6818      	ldr	r0, [r3, #0]
    2cae:	f7ff bf19 	b.w	2ae4 <StepDirMotor::move(short)>
    2cb2:	bf00      	nop
    2cb4:	2000631c 	.word	0x2000631c

00002cb8 <moveStepDirMotorAxis2()>:
IRAM_ATTR void moveStepDirMotorAxis2() { stepDirMotorInstance[1]->move(AXIS2_STEP_PIN); }
    2cb8:	4b02      	ldr	r3, [pc, #8]	; (2cc4 <moveStepDirMotorAxis2()+0xc>)
    2cba:	2116      	movs	r1, #22
    2cbc:	6858      	ldr	r0, [r3, #4]
    2cbe:	f7ff bf11 	b.w	2ae4 <StepDirMotor::move(short)>
    2cc2:	bf00      	nop
    2cc4:	2000631c 	.word	0x2000631c

00002cc8 <moveStepDirMotorAxis3()>:
void moveStepDirMotorAxis3() { stepDirMotorInstance[2]->move(AXIS3_STEP_PIN); }
    2cc8:	4b02      	ldr	r3, [pc, #8]	; (2cd4 <moveStepDirMotorAxis3()+0xc>)
    2cca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cce:	6898      	ldr	r0, [r3, #8]
    2cd0:	f7ff bf08 	b.w	2ae4 <StepDirMotor::move(short)>
    2cd4:	2000631c 	.word	0x2000631c

00002cd8 <moveStepDirMotorAxis4()>:
void moveStepDirMotorAxis4() { stepDirMotorInstance[3]->move(AXIS4_STEP_PIN); }
    2cd8:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <moveStepDirMotorAxis4()+0xc>)
    2cda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cde:	68d8      	ldr	r0, [r3, #12]
    2ce0:	f7ff bf00 	b.w	2ae4 <StepDirMotor::move(short)>
    2ce4:	2000631c 	.word	0x2000631c

00002ce8 <moveStepDirMotorAxis5()>:
void moveStepDirMotorAxis5() { stepDirMotorInstance[4]->move(AXIS5_STEP_PIN); }
    2ce8:	4b02      	ldr	r3, [pc, #8]	; (2cf4 <moveStepDirMotorAxis5()+0xc>)
    2cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cee:	6918      	ldr	r0, [r3, #16]
    2cf0:	f7ff bef8 	b.w	2ae4 <StepDirMotor::move(short)>
    2cf4:	2000631c 	.word	0x2000631c

00002cf8 <moveStepDirMotorAxis6()>:
void moveStepDirMotorAxis6() { stepDirMotorInstance[5]->move(AXIS6_STEP_PIN); }
    2cf8:	4b02      	ldr	r3, [pc, #8]	; (2d04 <moveStepDirMotorAxis6()+0xc>)
    2cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cfe:	6958      	ldr	r0, [r3, #20]
    2d00:	f7ff bef0 	b.w	2ae4 <StepDirMotor::move(short)>
    2d04:	2000631c 	.word	0x2000631c

00002d08 <moveStepDirMotorAxis7()>:
void moveStepDirMotorAxis7() { stepDirMotorInstance[6]->move(AXIS7_STEP_PIN); }
    2d08:	4b02      	ldr	r3, [pc, #8]	; (2d14 <moveStepDirMotorAxis7()+0xc>)
    2d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d0e:	6998      	ldr	r0, [r3, #24]
    2d10:	f7ff bee8 	b.w	2ae4 <StepDirMotor::move(short)>
    2d14:	2000631c 	.word	0x2000631c

00002d18 <moveStepDirMotorAxis8()>:
void moveStepDirMotorAxis8() { stepDirMotorInstance[7]->move(AXIS8_STEP_PIN); }
    2d18:	4b02      	ldr	r3, [pc, #8]	; (2d24 <moveStepDirMotorAxis8()+0xc>)
    2d1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d1e:	69d8      	ldr	r0, [r3, #28]
    2d20:	f7ff bee0 	b.w	2ae4 <StepDirMotor::move(short)>
    2d24:	2000631c 	.word	0x2000631c

00002d28 <moveStepDirMotorAxis9()>:
void moveStepDirMotorAxis9() { stepDirMotorInstance[8]->move(AXIS9_STEP_PIN); }
    2d28:	4b02      	ldr	r3, [pc, #8]	; (2d34 <moveStepDirMotorAxis9()+0xc>)
    2d2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d2e:	6a18      	ldr	r0, [r3, #32]
    2d30:	f7ff bed8 	b.w	2ae4 <StepDirMotor::move(short)>
    2d34:	2000631c 	.word	0x2000631c

00002d38 <StepDirDriver::updateStatus()>:
      VF("SST"); if (status.standstill) VF("< "); else VF(". "); 
      VF("FLT"); if (status.fault) VLF("<"); else VLF("."); 
    }
    lastStatus = status;
  #endif
};
    2d38:	4770      	bx	lr
    2d3a:	bf00      	nop

00002d3c <StepDirDriver::getPulseWidth()>:
  long ns = DriverPulseWidth[settings.model];
    2d3c:	4b04      	ldr	r3, [pc, #16]	; (2d50 <StepDirDriver::getPulseWidth()+0x14>)
    2d3e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    2d42:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
  if (ns < 0) ns = 2000;
    2d46:	2800      	cmp	r0, #0
}
    2d48:	bfb8      	it	lt
    2d4a:	f44f 60fa 	movlt.w	r0, #2000	; 0x7d0
    2d4e:	4770      	bx	lr
    2d50:	20001f58 	.word	0x20001f58

00002d54 <StepDirDriver::subdivisionsToCode(long)>:
int StepDirDriver::subdivisionsToCode(long microsteps) {
    2d54:	b530      	push	{r4, r5, lr}
  int allowed[9] = {1,2,4,8,16,32,64,128,256};
    2d56:	4c13      	ldr	r4, [pc, #76]	; (2da4 <StepDirDriver::subdivisionsToCode(long)+0x50>)
int StepDirDriver::subdivisionsToCode(long microsteps) {
    2d58:	b08b      	sub	sp, #44	; 0x2c
  if (settings.model >= DRIVER_MODEL_COUNT) return OFF;
    2d5a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
int StepDirDriver::subdivisionsToCode(long microsteps) {
    2d5e:	468e      	mov	lr, r1
  int allowed[9] = {1,2,4,8,16,32,64,128,256};
    2d60:	f10d 0c04 	add.w	ip, sp, #4
  if (settings.model >= DRIVER_MODEL_COUNT) return OFF;
    2d64:	2d11      	cmp	r5, #17
  int allowed[9] = {1,2,4,8,16,32,64,128,256};
    2d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2d68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2d6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2d72:	6823      	ldr	r3, [r4, #0]
    2d74:	f8cc 3000 	str.w	r3, [ip]
  if (settings.model >= DRIVER_MODEL_COUNT) return OFF;
    2d78:	dc08      	bgt.n	2d8c <StepDirDriver::subdivisionsToCode(long)+0x38>
    2d7a:	466a      	mov	r2, sp
  for (int i = 0; i < 9; i++) {
    2d7c:	2300      	movs	r3, #0
    if (microsteps == allowed[i]) return steps[settings.model][i];
    2d7e:	f852 0f04 	ldr.w	r0, [r2, #4]!
    2d82:	4570      	cmp	r0, lr
    2d84:	d006      	beq.n	2d94 <StepDirDriver::subdivisionsToCode(long)+0x40>
  for (int i = 0; i < 9; i++) {
    2d86:	3301      	adds	r3, #1
    2d88:	2b09      	cmp	r3, #9
    2d8a:	d1f8      	bne.n	2d7e <StepDirDriver::subdivisionsToCode(long)+0x2a>
  if (settings.model >= DRIVER_MODEL_COUNT) return OFF;
    2d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2d90:	b00b      	add	sp, #44	; 0x2c
    2d92:	bd30      	pop	{r4, r5, pc}
    if (microsteps == allowed[i]) return steps[settings.model][i];
    2d94:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
    2d98:	4a03      	ldr	r2, [pc, #12]	; (2da8 <StepDirDriver::subdivisionsToCode(long)+0x54>)
    2d9a:	442a      	add	r2, r5
    2d9c:	56d0      	ldrsb	r0, [r2, r3]
}
    2d9e:	b00b      	add	sp, #44	; 0x2c
    2da0:	bd30      	pop	{r4, r5, pc}
    2da2:	bf00      	nop
    2da4:	20001e08 	.word	0x20001e08
    2da8:	20001fc4 	.word	0x20001fc4

00002dac <StepDirDriver::init(float, float, float, float, float, float)>:
  { return __builtin_roundf(__x); }
    2dac:	feb8 1a41 	vrinta.f32	s2, s2
  settings.currentHold = round(param3);
    2db0:	eebd 1ac1 	vcvt.s32.f32	s2, s2
    2db4:	fef8 0a60 	vrinta.f32	s1, s1
    2db8:	fef8 1a61 	vrinta.f32	s3, s3
  settings.microstepsSlewing = round(param2);
    2dbc:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    2dc0:	feb8 0a40 	vrinta.f32	s0, s0
  settings.currentRun  = round(param4);
    2dc4:	eefd 1ae1 	vcvt.s32.f32	s3, s3
  settings.currentHold = round(param3);
    2dc8:	ee11 1a10 	vmov	r1, s2
  settings.microsteps = round(param1);
    2dcc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    2dd0:	feb8 2a42 	vrinta.f32	s4, s4
  settings.microstepsSlewing = round(param2);
    2dd4:	ee10 2a90 	vmov	r2, s1
  settings.currentGoto = round(param5);
    2dd8:	eebd 2ac2 	vcvt.s32.f32	s4, s4
void StepDirDriver::init(float param1, float param2, float param3, float param4, float param5, float param6) {
    2ddc:	b570      	push	{r4, r5, r6, lr}
  if (settings.intpol == ON) settings.intpol = true; else settings.intpol = false;
    2dde:	f990 3012 	ldrsb.w	r3, [r0, #18]
void StepDirDriver::init(float param1, float param2, float param3, float param4, float param5, float param6) {
    2de2:	4604      	mov	r4, r0
  settings.currentHold = round(param3);
    2de4:	8181      	strh	r1, [r0, #12]
  settings.currentRun  = round(param4);
    2de6:	ee11 1a90 	vmov	r1, s3
  if (settings.intpol == ON) settings.intpol = true; else settings.intpol = false;
    2dea:	1c9d      	adds	r5, r3, #2
  settings.microstepsSlewing = round(param2);
    2dec:	b212      	sxth	r2, r2
  settings.currentRun  = round(param4);
    2dee:	81c1      	strh	r1, [r0, #14]
  if (settings.intpol == ON) settings.intpol = true; else settings.intpol = false;
    2df0:	bf18      	it	ne
    2df2:	2300      	movne	r3, #0
  if (settings.decay == OFF) settings.decay = STEALTHCHOP;
    2df4:	f990 1013 	ldrsb.w	r1, [r0, #19]
  if (settings.intpol == ON) settings.intpol = true; else settings.intpol = false;
    2df8:	bf08      	it	eq
    2dfa:	2301      	moveq	r3, #1
  settings.microstepsSlewing = round(param2);
    2dfc:	8142      	strh	r2, [r0, #10]
  if (settings.decay == OFF) settings.decay = STEALTHCHOP;
    2dfe:	3101      	adds	r1, #1
  settings.currentGoto = round(param5);
    2e00:	ee12 0a10 	vmov	r0, s4
  if (settings.intpol == ON) settings.intpol = true; else settings.intpol = false;
    2e04:	74a3      	strb	r3, [r4, #18]
  settings.microsteps = round(param1);
    2e06:	ee10 3a10 	vmov	r3, s0
  settings.currentGoto = round(param5);
    2e0a:	8220      	strh	r0, [r4, #16]
  settings.microsteps = round(param1);
    2e0c:	b21b      	sxth	r3, r3
  if (settings.decay == OFF) settings.decay = STEALTHCHOP;
    2e0e:	d101      	bne.n	2e14 <StepDirDriver::init(float, float, float, float, float, float)+0x68>
    2e10:	2106      	movs	r1, #6
    2e12:	74e1      	strb	r1, [r4, #19]
  if (settings.decaySlewing == OFF) settings.decaySlewing = SPREADCYCLE;
    2e14:	f994 1014 	ldrsb.w	r1, [r4, #20]
    2e18:	3101      	adds	r1, #1
    2e1a:	d101      	bne.n	2e20 <StepDirDriver::init(float, float, float, float, float, float)+0x74>
    2e1c:	2105      	movs	r1, #5
    2e1e:	7521      	strb	r1, [r4, #20]
  VF(" u-step mode "); if (settings.microsteps == OFF) { VF("OFF (assuming 1X)"); settings.microsteps = 1; } else { V(settings.microsteps); VF("X"); }
    2e20:	1c59      	adds	r1, r3, #1
  microstepCode = subdivisionsToCode(settings.microsteps);
    2e22:	4620      	mov	r0, r4
    2e24:	bf08      	it	eq
    2e26:	2301      	moveq	r3, #1
  if (settings.microstepsSlewing == OFF) settings.microstepsSlewing = settings.microsteps;
    2e28:	3201      	adds	r2, #1
  microstepCode = subdivisionsToCode(settings.microsteps);
    2e2a:	4619      	mov	r1, r3
    2e2c:	8123      	strh	r3, [r4, #8]
  if (settings.microstepsSlewing == OFF) settings.microstepsSlewing = settings.microsteps;
    2e2e:	bf08      	it	eq
    2e30:	8163      	strheq	r3, [r4, #10]
  VF(" u-step mode "); if (settings.microsteps == OFF) { VF("OFF (assuming 1X)"); settings.microsteps = 1; } else { V(settings.microsteps); VF("X"); }
    2e32:	461d      	mov	r5, r3
  microstepCode = subdivisionsToCode(settings.microsteps);
    2e34:	f7ff ff8e 	bl	2d54 <StepDirDriver::subdivisionsToCode(long)>
  microstepCodeSlewing = subdivisionsToCode(settings.microstepsSlewing);
    2e38:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
  microstepCode = subdivisionsToCode(settings.microsteps);
    2e3c:	8660      	strh	r0, [r4, #50]	; 0x32
  microstepCodeSlewing = subdivisionsToCode(settings.microstepsSlewing);
    2e3e:	4620      	mov	r0, r4
    2e40:	4631      	mov	r1, r6
    2e42:	f7ff ff87 	bl	2d54 <StepDirDriver::subdivisionsToCode(long)>
    2e46:	86a0      	strh	r0, [r4, #52]	; 0x34
  microstepRatio = settings.microsteps/settings.microstepsSlewing;
    2e48:	fb95 f5f6 	sdiv	r5, r5, r6
    2e4c:	8625      	strh	r5, [r4, #48]	; 0x30
}
    2e4e:	bd70      	pop	{r4, r5, r6, pc}

00002e50 <StepDirDriver::validateParameters(float, float, float, float, float, float)>:
    2e50:	feb8 0a40 	vrinta.f32	s0, s0
  long subdivisions = round(param1);
    2e54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    2e58:	fef8 0a60 	vrinta.f32	s1, s1
bool StepDirDriver::validateParameters(float param1, float param2, float param3, float param4, float param5, float param6) {
    2e5c:	b538      	push	{r3, r4, r5, lr}
  long subdivisions = round(param1);
    2e5e:	ee17 1a90 	vmov	r1, s15
  long subdivisionsGoto = round(param2);
    2e62:	eefd 7ae0 	vcvt.s32.f32	s15, s1
    subdivisions = 1;
    2e66:	1c4a      	adds	r2, r1, #1
  long subdivisionsGoto = round(param2);
    2e68:	ee17 4a90 	vmov	r4, s15
    subdivisions = 1;
    2e6c:	bf08      	it	eq
    2e6e:	2101      	moveq	r1, #1
  if (subdivisions <= subdivisionsGoto) {
    2e70:	42a1      	cmp	r1, r4
    2e72:	dd0f      	ble.n	2e94 <StepDirDriver::validateParameters(float, float, float, float, float, float)+0x44>
  if (subdivisions != OFF && (subdivisionsToCode(subdivisions) == OFF)) {
    2e74:	4605      	mov	r5, r0
    2e76:	f7ff ff6d 	bl	2d54 <StepDirDriver::subdivisionsToCode(long)>
    2e7a:	3001      	adds	r0, #1
    2e7c:	d00a      	beq.n	2e94 <StepDirDriver::validateParameters(float, float, float, float, float, float)+0x44>
  if (subdivisionsGoto != OFF && (subdivisionsToCode(subdivisionsGoto) == OFF)) {
    2e7e:	1c63      	adds	r3, r4, #1
    2e80:	d00a      	beq.n	2e98 <StepDirDriver::validateParameters(float, float, float, float, float, float)+0x48>
    2e82:	ee17 1a90 	vmov	r1, s15
    2e86:	4628      	mov	r0, r5
    2e88:	f7ff ff64 	bl	2d54 <StepDirDriver::subdivisionsToCode(long)>
    2e8c:	3001      	adds	r0, #1
    2e8e:	bf18      	it	ne
    2e90:	2001      	movne	r0, #1
}
    2e92:	bd38      	pop	{r3, r4, r5, pc}
    return false;
    2e94:	2000      	movs	r0, #0
}
    2e96:	bd38      	pop	{r3, r4, r5, pc}
  return true;
    2e98:	2001      	movs	r0, #1
}
    2e9a:	bd38      	pop	{r3, r4, r5, pc}

00002e9c <StepDirTmcSPI::getParameterTypeCode()>:
  public:
    // constructor
    StepDirTmcSPI(uint8_t axisNumber, const StepDirDriverPins *Pins, const StepDirDriverSettings *Settings);

    // get driver type code
    inline char getParameterTypeCode() { return 'T'; }
    2e9c:	2054      	movs	r0, #84	; 0x54
    2e9e:	4770      	bx	lr

00002ea0 <StepDirTmcSPI::modeMicrostepTracking()>:
  return true;
}

void StepDirTmcSPI::modeMicrostepTracking() {
  int16_t microsteps = 0;
  if (settings.microsteps > 1) microsteps = settings.microsteps;
    2ea0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
  switch (settings.model) {
    2ea4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  int16_t microsteps = 0;
    2ea8:	2901      	cmp	r1, #1
    2eaa:	bfd8      	it	le
    2eac:	2100      	movle	r1, #0
  switch (settings.model) {
    2eae:	2b0d      	cmp	r3, #13
    2eb0:	d00c      	beq.n	2ecc <StepDirTmcSPI::modeMicrostepTracking()+0x2c>
    2eb2:	dc05      	bgt.n	2ec0 <StepDirTmcSPI::modeMicrostepTracking()+0x20>
    2eb4:	2b0c      	cmp	r3, #12
    2eb6:	d108      	bne.n	2eca <StepDirTmcSPI::modeMicrostepTracking()+0x2a>
    case TMC2130: ((TMC2130Stepper*)driver)->microsteps(microsteps); break;
    case TMC2660: ((TMC2660Stepper*)driver)->microsteps(microsteps); break;
    case TMC5160: ((TMC5160Stepper*)driver)->microsteps(microsteps); break;
    case TMC5161: ((TMC5161Stepper*)driver)->microsteps(microsteps); break;
    2eb8:	b289      	uxth	r1, r1
    2eba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    2ebc:	f013 bbb0 	b.w	16620 <TMCStepper::microsteps(unsigned short)>
  switch (settings.model) {
    2ec0:	3b0e      	subs	r3, #14
    2ec2:	b29b      	uxth	r3, r3
    2ec4:	2b01      	cmp	r3, #1
    2ec6:	d9f7      	bls.n	2eb8 <StepDirTmcSPI::modeMicrostepTracking()+0x18>
    2ec8:	4770      	bx	lr
    2eca:	4770      	bx	lr
    case TMC2660: ((TMC2660Stepper*)driver)->microsteps(microsteps); break;
    2ecc:	b289      	uxth	r1, r1
    2ece:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    2ed0:	f013 ba4e 	b.w	16370 <TMC2660Stepper::microsteps(unsigned short)>

00002ed4 <StepDirTmcSPI::modeMicrostepSlewing()>:
  }
}

int StepDirTmcSPI::modeMicrostepSlewing() {
    2ed4:	b510      	push	{r4, lr}
    2ed6:	4604      	mov	r4, r0
  if (microstepRatio > 1) {
    2ed8:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
    2edc:	2801      	cmp	r0, #1
    2ede:	dd11      	ble.n	2f04 <StepDirTmcSPI::modeMicrostepSlewing()+0x30>
    int16_t microsteps = 0;
    if (settings.microstepsSlewing > 1) microsteps = settings.microstepsSlewing;
    2ee0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
    switch (settings.model) {
    2ee4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    int16_t microsteps = 0;
    2ee8:	2901      	cmp	r1, #1
    2eea:	bfd8      	it	le
    2eec:	2100      	movle	r1, #0
    switch (settings.model) {
    2eee:	2b0d      	cmp	r3, #13
    2ef0:	d014      	beq.n	2f1c <StepDirTmcSPI::modeMicrostepSlewing()+0x48>
    2ef2:	dc08      	bgt.n	2f06 <StepDirTmcSPI::modeMicrostepSlewing()+0x32>
    2ef4:	2b0c      	cmp	r3, #12
    2ef6:	d105      	bne.n	2f04 <StepDirTmcSPI::modeMicrostepSlewing()+0x30>
      case TMC2130: ((TMC2130Stepper*)driver)->microsteps(microsteps); break;
      case TMC2660: ((TMC2660Stepper*)driver)->microsteps(microsteps); break;
      case TMC5160: ((TMC5160Stepper*)driver)->microsteps(microsteps); break;
      case TMC5161: ((TMC5161Stepper*)driver)->microsteps(microsteps); break;
    2ef8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2efa:	b289      	uxth	r1, r1
    2efc:	f013 fb90 	bl	16620 <TMCStepper::microsteps(unsigned short)>
    }
  }
  return microstepRatio;
    2f00:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
}
    2f04:	bd10      	pop	{r4, pc}
    switch (settings.model) {
    2f06:	3b0e      	subs	r3, #14
    2f08:	b29b      	uxth	r3, r3
    2f0a:	2b01      	cmp	r3, #1
    2f0c:	d8fa      	bhi.n	2f04 <StepDirTmcSPI::modeMicrostepSlewing()+0x30>
      case TMC5161: ((TMC5161Stepper*)driver)->microsteps(microsteps); break;
    2f0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2f10:	b289      	uxth	r1, r1
    2f12:	f013 fb85 	bl	16620 <TMCStepper::microsteps(unsigned short)>
  return microstepRatio;
    2f16:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
    2f1a:	e7f3      	b.n	2f04 <StepDirTmcSPI::modeMicrostepSlewing()+0x30>
      case TMC2660: ((TMC2660Stepper*)driver)->microsteps(microsteps); break;
    2f1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2f1e:	b289      	uxth	r1, r1
    2f20:	f013 fa26 	bl	16370 <TMC2660Stepper::microsteps(unsigned short)>
  return microstepRatio;
    2f24:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
}
    2f28:	bd10      	pop	{r4, pc}
    2f2a:	bf00      	nop

00002f2c <StepDirTmcSPI::updateStatus()>:
  int IGOTO = settings.currentGoto;
  if (IGOTO == OFF) IGOTO = settings.currentRun;
  current(IGOTO, 1.0F);
}

void StepDirTmcSPI::updateStatus() {
    2f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (settings.status == ON) {
    2f30:	f990 3015 	ldrsb.w	r3, [r0, #21]
void StepDirTmcSPI::updateStatus() {
    2f34:	b082      	sub	sp, #8
    2f36:	4604      	mov	r4, r0
  if (settings.status == ON) {
    2f38:	1c9a      	adds	r2, r3, #2
    2f3a:	d025      	beq.n	2f88 <StepDirTmcSPI::updateStatus()+0x5c>
          status.overTemperatureWarning || status.overTemperature) status.fault = true; else status.fault = false;

      timeLastStatusUpdate = millis();
    }
  } else
  if (settings.status == LOW || settings.status == HIGH) {
    2f3c:	b2da      	uxtb	r2, r3
    2f3e:	2a01      	cmp	r2, #1
    2f40:	d905      	bls.n	2f4e <StepDirTmcSPI::updateStatus()+0x22>
    status.fault = digitalReadEx(Pins->fault) == settings.status;
  }

  StepDirDriver::updateStatus();
    2f42:	4620      	mov	r0, r4
}
    2f44:	b002      	add	sp, #8
    2f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  StepDirDriver::updateStatus();
    2f4a:	f7ff bef5 	b.w	2d38 <StepDirDriver::updateStatus()>
    status.fault = digitalReadEx(Pins->fault) == settings.status;
    2f4e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2f50:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
    2f54:	2a00      	cmp	r2, #0
    2f56:	db54      	blt.n	3002 <StepDirTmcSPI::updateStatus()+0xd6>
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    2f58:	b2d2      	uxtb	r2, r2
    2f5a:	4931      	ldr	r1, [pc, #196]	; (3020 <StepDirTmcSPI::updateStatus()+0xf4>)
    2f5c:	0110      	lsls	r0, r2, #4
    2f5e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    2f62:	5809      	ldr	r1, [r1, r0]
    2f64:	68d2      	ldr	r2, [r2, #12]
    2f66:	6889      	ldr	r1, [r1, #8]
    2f68:	4211      	tst	r1, r2
    2f6a:	bf14      	ite	ne
    2f6c:	2201      	movne	r2, #1
    2f6e:	2200      	moveq	r2, #0
    2f70:	1a9b      	subs	r3, r3, r2
  StepDirDriver::updateStatus();
    2f72:	4620      	mov	r0, r4
    status.fault = digitalReadEx(Pins->fault) == settings.status;
    2f74:	fab3 f383 	clz	r3, r3
    2f78:	095b      	lsrs	r3, r3, #5
    2f7a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
    2f7e:	b002      	add	sp, #8
    2f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  StepDirDriver::updateStatus();
    2f84:	f7ff bed8 	b.w	2d38 <StepDirDriver::updateStatus()>
	return systick_millis_count;
    2f88:	4d26      	ldr	r5, [pc, #152]	; (3024 <StepDirTmcSPI::updateStatus()+0xf8>)
    if ((long)(millis() - timeLastStatusUpdate) > 200) {
    2f8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    2f8c:	682b      	ldr	r3, [r5, #0]
    2f8e:	1a9b      	subs	r3, r3, r2
    2f90:	2bc8      	cmp	r3, #200	; 0xc8
    2f92:	ddd6      	ble.n	2f42 <StepDirTmcSPI::updateStatus()+0x16>
      switch (settings.model) {
    2f94:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    2f98:	3b0c      	subs	r3, #12
    2f9a:	2b03      	cmp	r3, #3
    2f9c:	d837      	bhi.n	300e <StepDirTmcSPI::updateStatus()+0xe2>
    2f9e:	e8df f003 	tbb	[pc, r3]
    2fa2:	3202      	.short	0x3202
    2fa4:	0202      	.short	0x0202
        case TMC5161: status_result.sr = ((TMC5161Stepper*)driver)->DRV_STATUS(); break;
    2fa6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    2fa8:	6803      	ldr	r3, [r0, #0]
    2faa:	691b      	ldr	r3, [r3, #16]
    2fac:	4798      	blx	r3
      status.outputA.shortToGround = status_result.s2ga;
    2fae:	f3c0 66c0 	ubfx	r6, r0, #27, #1
      status.outputB.shortToGround = status_result.s2gb;
    2fb2:	f3c0 7e00 	ubfx	lr, r0, #28, #1
      status.overTemperatureWarning= status_result.otpw;
    2fb6:	f3c0 6c80 	ubfx	ip, r0, #26, #1
      status.overTemperature       = status_result.ot;
    2fba:	f3c0 6140 	ubfx	r1, r0, #25, #1
    2fbe:	ea4e 0206 	orr.w	r2, lr, r6
      status.outputA.openLoad      = status_result.ola;
    2fc2:	f3c0 7840 	ubfx	r8, r0, #29, #1
      status.outputB.openLoad      = status_result.olb;
    2fc6:	f3c0 7780 	ubfx	r7, r0, #30, #1
      status.standstill            = status_result.stst;
    2fca:	0fc3      	lsrs	r3, r0, #31
    2fcc:	ea4c 0202 	orr.w	r2, ip, r2
        case TMC5161: status_result.sr = ((TMC5161Stepper*)driver)->DRV_STATUS(); break;
    2fd0:	9001      	str	r0, [sp, #4]
    2fd2:	430a      	orrs	r2, r1
    2fd4:	6828      	ldr	r0, [r5, #0]
      status.outputA.shortToGround = status_result.s2ga;
    2fd6:	77a6      	strb	r6, [r4, #30]
      timeLastStatusUpdate = millis();
    2fd8:	62a0      	str	r0, [r4, #40]	; 0x28
  StepDirDriver::updateStatus();
    2fda:	4620      	mov	r0, r4
      status.outputA.openLoad      = status_result.ola;
    2fdc:	f884 801f 	strb.w	r8, [r4, #31]
      status.outputB.shortToGround = status_result.s2gb;
    2fe0:	f884 e020 	strb.w	lr, [r4, #32]
      status.outputB.openLoad      = status_result.olb;
    2fe4:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
      status.overTemperatureWarning= status_result.otpw;
    2fe8:	f884 c022 	strb.w	ip, [r4, #34]	; 0x22
      status.overTemperature       = status_result.ot;
    2fec:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
      status.standstill            = status_result.stst;
    2ff0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      if (status.outputA.shortToGround || status.outputB.shortToGround ||
    2ff4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
}
    2ff8:	b002      	add	sp, #8
    2ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  StepDirDriver::updateStatus();
    2ffe:	f7ff be9b 	b.w	2d38 <StepDirDriver::updateStatus()>
    status.fault = digitalReadEx(Pins->fault) == settings.status;
    3002:	2200      	movs	r2, #0
    3004:	e7b4      	b.n	2f70 <StepDirTmcSPI::updateStatus()+0x44>
		uint8_t hend();
		uint8_t hstrt();
		uint8_t toff();

		// R: DRVSTATUS
		uint32_t DRV_STATUS() { return DRVSTATUS(); }
    3006:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    3008:	f012 fbde 	bl	157c8 <TMC2660Stepper::DRVSTATUS()>
    300c:	e7cf      	b.n	2fae <StepDirTmcSPI::updateStatus()+0x82>
      switch (settings.model) {
    300e:	2200      	movs	r2, #0
    3010:	4613      	mov	r3, r2
    3012:	4611      	mov	r1, r2
    3014:	4694      	mov	ip, r2
    3016:	4617      	mov	r7, r2
    3018:	4696      	mov	lr, r2
    301a:	4690      	mov	r8, r2
    301c:	4616      	mov	r6, r2
    301e:	e7d9      	b.n	2fd4 <StepDirTmcSPI::updateStatus()+0xa8>
    3020:	20002b88 	.word	0x20002b88
    3024:	20006344 	.word	0x20006344

00003028 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)>:
bool StepDirTmcSPI::validateParameters(float param1, float param2, float param3, float param4, float param5, float param6) {
    3028:	b510      	push	{r4, lr}
    302a:	ed2d 8b04 	vpush	{d8-d9}
    302e:	4604      	mov	r4, r0
    3030:	eeb0 8a41 	vmov.f32	s16, s2
    3034:	eef0 8a61 	vmov.f32	s17, s3
    3038:	eeb0 9a42 	vmov.f32	s18, s4
  if (!StepDirDriver::validateParameters(param1, param2, param3, param4, param5, param6)) return false;
    303c:	f7ff ff08 	bl	2e50 <StepDirDriver::validateParameters(float, float, float, float, float, float)>
    3040:	b140      	cbz	r0, 3054 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x2c>
  if (settings.model == TMC2130) maxCurrent = 1500; else
    3042:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    3046:	2b0c      	cmp	r3, #12
    3048:	d007      	beq.n	305a <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x32>
  if (settings.model == TMC2660) maxCurrent = 3000; else
    304a:	2b0e      	cmp	r3, #14
    304c:	dc2a      	bgt.n	30a4 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x7c>
    304e:	2b0c      	cmp	r3, #12
    3050:	dc2d      	bgt.n	30ae <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x86>
  if (!StepDirDriver::validateParameters(param1, param2, param3, param4, param5, param6)) return false;
    3052:	2000      	movs	r0, #0
}
    3054:	ecbd 8b04 	vpop	{d8-d9}
    3058:	bd10      	pop	{r4, pc}
  if (settings.model == TMC2130) maxCurrent = 1500; else
    305a:	f240 51dc 	movw	r1, #1500	; 0x5dc
    305e:	feb8 1a48 	vrinta.f32	s2, s16
  long currentHold = round(param3);
    3062:	eefd 7ac1 	vcvt.s32.f32	s15, s2
    3066:	fef8 1a68 	vrinta.f32	s3, s17
    306a:	ee17 3a90 	vmov	r3, s15
  long currentRun = round(param4);
    306e:	eefd 7ae1 	vcvt.s32.f32	s15, s3
  if (currentHold != OFF && (currentHold < 0 || currentHold > maxCurrent)) {
    3072:	1c5c      	adds	r4, r3, #1
  long currentRun = round(param4);
    3074:	ee17 2a90 	vmov	r2, s15
  if (currentHold != OFF && (currentHold < 0 || currentHold > maxCurrent)) {
    3078:	d001      	beq.n	307e <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x56>
    307a:	428b      	cmp	r3, r1
    307c:	d8e9      	bhi.n	3052 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x2a>
  if (currentRun != OFF && (currentRun < 0 || currentRun > maxCurrent)) {
    307e:	1c54      	adds	r4, r2, #1
    3080:	d001      	beq.n	3086 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x5e>
    3082:	4291      	cmp	r1, r2
    3084:	d3e5      	bcc.n	3052 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x2a>
    3086:	feb8 2a49 	vrinta.f32	s4, s18
  long currentGoto = round(param5);
    308a:	eefd 7ac2 	vcvt.s32.f32	s15, s4
    308e:	ee17 3a90 	vmov	r3, s15
  if (currentGoto != OFF && (currentGoto < 0 || currentGoto > maxCurrent)) {
    3092:	1c5a      	adds	r2, r3, #1
    3094:	d0de      	beq.n	3054 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x2c>
    3096:	428b      	cmp	r3, r1
}
    3098:	ecbd 8b04 	vpop	{d8-d9}
  if (currentGoto != OFF && (currentGoto < 0 || currentGoto > maxCurrent)) {
    309c:	bf8c      	ite	hi
    309e:	2000      	movhi	r0, #0
    30a0:	2001      	movls	r0, #1
}
    30a2:	bd10      	pop	{r4, pc}
    30a4:	2b0f      	cmp	r3, #15
    30a6:	d1d4      	bne.n	3052 <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x2a>
  if (settings.model == TMC2130) maxCurrent = 1500; else
    30a8:	f640 51ac 	movw	r1, #3500	; 0xdac
    30ac:	e7d7      	b.n	305e <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x36>
    30ae:	f640 31b8 	movw	r1, #3000	; 0xbb8
    30b2:	e7d4      	b.n	305e <StepDirTmcSPI::validateParameters(float, float, float, float, float, float)+0x36>

000030b4 <StepDirTmcSPI::init(float, float, float, float, float, float)>:
void StepDirTmcSPI::init(float param1, float param2, float param3, float param4, float param5, float param6) {
    30b4:	b538      	push	{r3, r4, r5, lr}
    30b6:	4604      	mov	r4, r0
  StepDirDriver::init(param1, param2, param3, param4, param5, param6);
    30b8:	f7ff fe78 	bl	2dac <StepDirDriver::init(float, float, float, float, float, float)>
  if (settings.currentRun != OFF) {
    30bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    30c0:	1c5a      	adds	r2, r3, #1
    30c2:	d03d      	beq.n	3140 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x8c>
    if (settings.currentGoto == OFF) settings.currentGoto = settings.currentRun;
    30c4:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
    30c8:	3201      	adds	r2, #1
    if (settings.currentHold == OFF) settings.currentHold = lround(settings.currentRun/2.0F);
    30ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    if (settings.currentGoto == OFF) settings.currentGoto = settings.currentRun;
    30ce:	bf08      	it	eq
    30d0:	8223      	strheq	r3, [r4, #16]
    if (settings.currentHold == OFF) settings.currentHold = lround(settings.currentRun/2.0F);
    30d2:	3201      	adds	r2, #1
    30d4:	f000 80f9 	beq.w	32ca <StepDirTmcSPI::init(float, float, float, float, float, float)+0x216>
    if (settings.model == TMC2130) settings.currentRun = 2500;
    30d8:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
  if (settings.model == TMC2130) {
    30dc:	2d0c      	cmp	r5, #12
    30de:	d044      	beq.n	316a <StepDirTmcSPI::init(float, float, float, float, float, float)+0xb6>
  if (settings.model == TMC2660) {
    30e0:	2d0d      	cmp	r5, #13
    30e2:	f000 80ac 	beq.w	323e <StepDirTmcSPI::init(float, float, float, float, float, float)+0x18a>
  if (settings.model == TMC5160) {
    30e6:	2d0e      	cmp	r5, #14
    30e8:	f000 80f9 	beq.w	32de <StepDirTmcSPI::init(float, float, float, float, float, float)+0x22a>
  if (settings.model == TMC5161) {
    30ec:	2d0f      	cmp	r5, #15
    30ee:	f000 8091 	beq.w	3214 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x160>
  status.active = settings.status != OFF;
    30f2:	f994 3015 	ldrsb.w	r3, [r4, #21]
    30f6:	1c5a      	adds	r2, r3, #1
    30f8:	bf18      	it	ne
    30fa:	2201      	movne	r2, #1
    30fc:	7762      	strb	r2, [r4, #29]
  if (settings.status == LOW) pinModeEx(Pins->fault, INPUT_PULLUP);
    30fe:	b99b      	cbnz	r3, 3128 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x74>
    3100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3102:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
    3106:	2800      	cmp	r0, #0
    3108:	da08      	bge.n	311c <StepDirTmcSPI::init(float, float, float, float, float, float)+0x68>
  modeSwitchAllowed = microstepRatio != 1;
    310a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
  modeSwitchFastAllowed = false;
    310e:	2200      	movs	r2, #0
  modeSwitchAllowed = microstepRatio != 1;
    3110:	3b01      	subs	r3, #1
  modeSwitchFastAllowed = false;
    3112:	7162      	strb	r2, [r4, #5]
  modeSwitchAllowed = microstepRatio != 1;
    3114:	bf18      	it	ne
    3116:	2301      	movne	r3, #1
    3118:	7123      	strb	r3, [r4, #4]
}
    311a:	bd38      	pop	{r3, r4, r5, pc}
  if (settings.status == LOW) pinModeEx(Pins->fault, INPUT_PULLUP);
    311c:	2102      	movs	r1, #2
    311e:	b2c0      	uxtb	r0, r0
    3120:	f015 f8ec 	bl	182fc <pinMode>
    if (settings.status == HIGH) pinModeEx(Pins->fault, INPUT);
    3124:	f994 3015 	ldrsb.w	r3, [r4, #21]
    3128:	2b01      	cmp	r3, #1
    312a:	d1ee      	bne.n	310a <StepDirTmcSPI::init(float, float, float, float, float, float)+0x56>
    312c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    312e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
    3132:	2800      	cmp	r0, #0
    3134:	dbe9      	blt.n	310a <StepDirTmcSPI::init(float, float, float, float, float, float)+0x56>
    3136:	2100      	movs	r1, #0
    3138:	b2c0      	uxtb	r0, r0
    313a:	f015 f8df 	bl	182fc <pinMode>
    313e:	e7e4      	b.n	310a <StepDirTmcSPI::init(float, float, float, float, float, float)+0x56>
    if (settings.model == TMC2130) settings.currentRun = 2500;
    3140:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
    3144:	f640 13c4 	movw	r3, #2500	; 0x9c4
    3148:	eddf 7a6d 	vldr	s15, [pc, #436]	; 3300 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x24c>
    314c:	2d0c      	cmp	r5, #12
    314e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 3304 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x250>
    3152:	bf18      	it	ne
    3154:	f44f 7316 	movne.w	r3, #600	; 0x258
  { return __builtin_lroundf(__x); }
    3158:	fe07 0a80 	vseleq.f32	s0, s15, s0
    315c:	81e3      	strh	r3, [r4, #14]
    settings.currentGoto = settings.currentRun;
    315e:	8223      	strh	r3, [r4, #16]
    3160:	f018 fbfc 	bl	1b95c <lroundf>
  if (settings.model == TMC2130) {
    3164:	2d0c      	cmp	r5, #12
    settings.currentHold = lround(settings.currentRun/2.0F);
    3166:	81a0      	strh	r0, [r4, #12]
  if (settings.model == TMC2130) {
    3168:	d1ba      	bne.n	30e0 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x2c>
    rSense = TMC2130_RSENSE;
    316a:	4b67      	ldr	r3, [pc, #412]	; (3308 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x254>)
      driver = new TMC2130Stepper(Pins->cs, rSense);
    316c:	2040      	movs	r0, #64	; 0x40
    rSense = TMC2130_RSENSE;
    316e:	61a3      	str	r3, [r4, #24]
      driver = new TMC2130Stepper(Pins->cs, rSense);
    3170:	f015 fa46 	bl	18600 <operator new(unsigned int)>
    3174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3176:	4605      	mov	r5, r0
    3178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    317c:	ed94 0a06 	vldr	s0, [r4, #24]
    3180:	8899      	ldrh	r1, [r3, #4]
    3182:	f012 fce9 	bl	15b58 <TMC2130Stepper::TMC2130Stepper(unsigned short, float, signed char)>
    ((TMC2130Stepper*)driver)->begin();
    3186:	4628      	mov	r0, r5
      driver = new TMC2130Stepper(Pins->cs, rSense);
    3188:	63e5      	str	r5, [r4, #60]	; 0x3c
    ((TMC2130Stepper*)driver)->begin();
    318a:	f012 fe49 	bl	15e20 <TMC2130Stepper::begin()>
    ((TMC5161Stepper*)driver)->intpol(settings.intpol);
    318e:	f994 1012 	ldrsb.w	r1, [r4, #18]
    3192:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3194:	3900      	subs	r1, #0
    3196:	bf18      	it	ne
    3198:	2101      	movne	r1, #1
    319a:	f012 fa05 	bl	155a8 <TMC2130Stepper::intpol(bool)>
    modeMicrostepTracking();
    319e:	6823      	ldr	r3, [r4, #0]
    31a0:	4620      	mov	r0, r4
    31a2:	68db      	ldr	r3, [r3, #12]
    31a4:	4798      	blx	r3
    ((TMC5161Stepper*)driver)->en_pwm_mode(false);
    31a6:	2100      	movs	r1, #0
    31a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    31aa:	f012 fb61 	bl	15870 <TMC2130Stepper::en_pwm_mode(bool)>
  current(settings.currentRun, (float)settings.currentHold/settings.currentRun);
    31ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    31b2:	ee07 3a90 	vmov	s15, r3
    31b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    31ba:	ee07 3a10 	vmov	s14, r3
    // set the decay mode STEALTH_CHOP or SPREAD_CYCLE
    void setDecayMode(int decayMode);

    // set peak current and hold current multiplier
    inline void current(float mA, float mult) {
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    31be:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    31c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    31c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    31ca:	2b0c      	cmp	r3, #12
    31cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
    31d0:	d010      	beq.n	31f4 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x140>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    31d2:	2b0d      	cmp	r3, #13
    31d4:	d06c      	beq.n	32b0 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x1fc>
      if (settings.model == TMC5160) { ((TMC5160Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    31d6:	2b0e      	cmp	r3, #14
    31d8:	d119      	bne.n	320e <StepDirTmcSPI::init(float, float, float, float, float, float)+0x15a>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    31da:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 330c <StepDirTmcSPI::init(float, float, float, float, float, float)+0x258>
		void rms_current(uint16_t mA, float mult) { TMC2160Stepper::rms_current(mA, mult); }
    31de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    31e0:	ee67 7a87 	vmul.f32	s15, s15, s14
    31e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    31e8:	ee17 3a90 	vmov	r3, s15
    31ec:	b299      	uxth	r1, r3
    31ee:	f012 ff07 	bl	16000 <TMC2160Stepper::rms_current(unsigned short, float)>
    31f2:	e77e      	b.n	30f2 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x3e>
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    31f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 330c <StepDirTmcSPI::init(float, float, float, float, float, float)+0x258>
    31f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    31fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    31fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3202:	ee17 3a90 	vmov	r3, s15
    3206:	b299      	uxth	r1, r3
    3208:	f013 fa06 	bl	16618 <TMCStepper::rms_current(unsigned short, float)>
    320c:	e771      	b.n	30f2 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x3e>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    320e:	2b0f      	cmp	r3, #15
    3210:	d0e3      	beq.n	31da <StepDirTmcSPI::init(float, float, float, float, float, float)+0x126>
    3212:	e76e      	b.n	30f2 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x3e>
    rSense = TMC5161_RSENSE;
    3214:	4b3e      	ldr	r3, [pc, #248]	; (3310 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x25c>)
      driver = new TMC5161Stepper(Pins->cs, rSense);
    3216:	2078      	movs	r0, #120	; 0x78
    rSense = TMC5161_RSENSE;
    3218:	61a3      	str	r3, [r4, #24]
      driver = new TMC5161Stepper(Pins->cs, rSense);
    321a:	f015 f9f1 	bl	18600 <operator new(unsigned int)>
    321e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3220:	4605      	mov	r5, r0
    TMC5161Stepper(uint16_t pinCS, float RS = default_RS, int8_t link_index = -1) : TMC5160Stepper(pinCS, RS, link_index) {}
    3222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3226:	8899      	ldrh	r1, [r3, #4]
    3228:	ed94 0a06 	vldr	s0, [r4, #24]
    322c:	f013 f926 	bl	1647c <TMC5160Stepper::TMC5160Stepper(unsigned short, float, signed char)>
    3230:	4b38      	ldr	r3, [pc, #224]	; (3314 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x260>)
    ((TMC5161Stepper*)driver)->begin();
    3232:	4628      	mov	r0, r5
      driver = new TMC5161Stepper(Pins->cs, rSense);
    3234:	63e5      	str	r5, [r4, #60]	; 0x3c
    3236:	602b      	str	r3, [r5, #0]
    ((TMC5161Stepper*)driver)->begin();
    3238:	f013 f90e 	bl	16458 <TMC5130Stepper::begin()>
    323c:	e7a7      	b.n	318e <StepDirTmcSPI::init(float, float, float, float, float, float)+0xda>
    rSense = TMC2660_RSENSE;
    323e:	4b34      	ldr	r3, [pc, #208]	; (3310 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x25c>)
      driver = new TMC2660Stepper(Pins->cs, rSense);
    3240:	203c      	movs	r0, #60	; 0x3c
    rSense = TMC2660_RSENSE;
    3242:	61a3      	str	r3, [r4, #24]
      driver = new TMC2660Stepper(Pins->cs, rSense);
    3244:	f015 f9dc 	bl	18600 <operator new(unsigned int)>
    3248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    324a:	4605      	mov	r5, r0
    324c:	ed94 0a06 	vldr	s0, [r4, #24]
    3250:	8899      	ldrh	r1, [r3, #4]
    3252:	f012 fee1 	bl	16018 <TMC2660Stepper::TMC2660Stepper(unsigned short, float)>
    ((TMC2660Stepper*)driver)->begin();
    3256:	4628      	mov	r0, r5
      driver = new TMC2660Stepper(Pins->cs, rSense);
    3258:	63e5      	str	r5, [r4, #60]	; 0x3c
    ((TMC2660Stepper*)driver)->begin();
    325a:	f013 f817 	bl	1628c <TMC2660Stepper::begin()>
    ((TMC2660Stepper*)driver)->tbl(3);
    325e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3260:	2103      	movs	r1, #3
    3262:	f012 f9fb 	bl	1565c <TMC2660Stepper::tbl(unsigned char)>
    ((TMC2660Stepper*)driver)->chm(0);
    3266:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3268:	2100      	movs	r1, #0
    326a:	f012 f9ed 	bl	15648 <TMC2660Stepper::chm(bool)>
    ((TMC2660Stepper*)driver)->hend(0);
    326e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3270:	2100      	movs	r1, #0
    3272:	f012 f9c5 	bl	15600 <TMC2660Stepper::hend(unsigned char)>
    ((TMC2660Stepper*)driver)->hstrt(0);
    3276:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3278:	2100      	movs	r1, #0
    327a:	f012 f9b7 	bl	155ec <TMC2660Stepper::hstrt(unsigned char)>
    ((TMC2660Stepper*)driver)->toff(3);
    327e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3280:	2103      	movs	r1, #3
    3282:	f012 f9a3 	bl	155cc <TMC2660Stepper::toff(unsigned char)>
    ((TMC2660Stepper*)driver)->rndtf(1);
    3286:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3288:	2101      	movs	r1, #1
    328a:	f012 f9d3 	bl	15634 <TMC2660Stepper::rndtf(bool)>
    ((TMC2660Stepper*)driver)->vsense(1);
    328e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3290:	2101      	movs	r1, #1
    3292:	f012 fa1b 	bl	156cc <TMC2660Stepper::vsense(bool)>
    ((TMC2660Stepper*)driver)->dedge(0);
    3296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3298:	2100      	movs	r1, #0
    329a:	f012 fa4d 	bl	15738 <TMC2660Stepper::dedge(bool)>
    ((TMC2660Stepper*)driver)->intpol(true);
    329e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    32a0:	2101      	movs	r1, #1
    32a2:	f012 fa25 	bl	156f0 <TMC2660Stepper::intpol(bool)>
    modeMicrostepTracking();
    32a6:	6823      	ldr	r3, [r4, #0]
    32a8:	4620      	mov	r0, r4
    32aa:	68db      	ldr	r3, [r3, #12]
    32ac:	4798      	blx	r3
    32ae:	e77e      	b.n	31ae <StepDirTmcSPI::init(float, float, float, float, float, float)+0xfa>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    32b0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 330c <StepDirTmcSPI::init(float, float, float, float, float, float)+0x258>
    32b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    32b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    32ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    32be:	ee17 3a90 	vmov	r3, s15
    32c2:	b299      	uxth	r1, r3
    32c4:	f012 fff8 	bl	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    32c8:	e713      	b.n	30f2 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x3e>
    32ca:	ee00 3a10 	vmov	s0, r3
    32ce:	eeba 0aef 	vcvt.f32.s32	s0, s0, #1
    32d2:	f018 fb43 	bl	1b95c <lroundf>
    if (settings.model == TMC2130) settings.currentRun = 2500;
    32d6:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
    if (settings.currentHold == OFF) settings.currentHold = lround(settings.currentRun/2.0F);
    32da:	81a0      	strh	r0, [r4, #12]
    32dc:	e6fe      	b.n	30dc <StepDirTmcSPI::init(float, float, float, float, float, float)+0x28>
    rSense = TMC5160_RSENSE;
    32de:	4b0c      	ldr	r3, [pc, #48]	; (3310 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x25c>)
      driver = new TMC5160Stepper(Pins->cs, rSense);
    32e0:	2078      	movs	r0, #120	; 0x78
    rSense = TMC5160_RSENSE;
    32e2:	61a3      	str	r3, [r4, #24]
      driver = new TMC5160Stepper(Pins->cs, rSense);
    32e4:	f015 f98c 	bl	18600 <operator new(unsigned int)>
    32e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    32ea:	4605      	mov	r5, r0
    32ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32f0:	ed94 0a06 	vldr	s0, [r4, #24]
    32f4:	8899      	ldrh	r1, [r3, #4]
    32f6:	f013 f8c1 	bl	1647c <TMC5160Stepper::TMC5160Stepper(unsigned short, float, signed char)>
    ((TMC5160Stepper*)driver)->begin();
    32fa:	4628      	mov	r0, r5
      driver = new TMC5160Stepper(Pins->cs, rSense);
    32fc:	63e5      	str	r5, [r4, #60]	; 0x3c
    ((TMC5160Stepper*)driver)->begin();
    32fe:	e79b      	b.n	3238 <StepDirTmcSPI::init(float, float, float, float, float, float)+0x184>
    3300:	449c4000 	.word	0x449c4000
    3304:	43960000 	.word	0x43960000
    3308:	3de147ae 	.word	0x3de147ae
    330c:	3f350481 	.word	0x3f350481
    3310:	3d99999a 	.word	0x3d99999a
    3314:	200025ac 	.word	0x200025ac

00003318 <StepDirTmcSPI::StepDirTmcSPI(unsigned char, StepDirDriverPins const*, StepDirDriverSettings const*)>:
  this->Pins = Pins;
    3318:	6382      	str	r2, [r0, #56]	; 0x38
class StepDirDriver {
    331a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  this->axisNumber = axisNumber;
    331e:	7701      	strb	r1, [r0, #28]
    3320:	8682      	strh	r2, [r0, #52]	; 0x34
    3322:	490f      	ldr	r1, [pc, #60]	; (3360 <StepDirTmcSPI::StepDirTmcSPI(unsigned char, StepDirDriverPins const*, StepDirDriverSettings const*)+0x48>)
StepDirTmcSPI::StepDirTmcSPI(uint8_t axisNumber, const StepDirDriverPins *Pins, const StepDirDriverSettings *Settings) {
    3324:	4a0f      	ldr	r2, [pc, #60]	; (3364 <StepDirTmcSPI::StepDirTmcSPI(unsigned char, StepDirDriverPins const*, StepDirDriverSettings const*)+0x4c>)
    3326:	6301      	str	r1, [r0, #48]	; 0x30
    3328:	6002      	str	r2, [r0, #0]
  settings = *Settings;
    332a:	685a      	ldr	r2, [r3, #4]
    332c:	6819      	ldr	r1, [r3, #0]
    332e:	f8c0 200a 	str.w	r2, [r0, #10]
    3332:	689a      	ldr	r2, [r3, #8]
    3334:	68db      	ldr	r3, [r3, #12]
    3336:	f8c0 1006 	str.w	r1, [r0, #6]
    333a:	f8c0 200e 	str.w	r2, [r0, #14]
    333e:	f8c0 3012 	str.w	r3, [r0, #18]
StepDirTmcSPI::StepDirTmcSPI(uint8_t axisNumber, const StepDirDriverPins *Pins, const StepDirDriverSettings *Settings) {
    3342:	b510      	push	{r4, lr}
    3344:	2400      	movs	r4, #0
    3346:	f8df e020 	ldr.w	lr, [pc, #32]	; 3368 <StepDirTmcSPI::StepDirTmcSPI(unsigned char, StepDirDriverPins const*, StepDirDriverSettings const*)+0x50>
    334a:	8084      	strh	r4, [r0, #4]
    334c:	f8c0 401d 	str.w	r4, [r0, #29]
    3350:	f8c0 4021 	str.w	r4, [r0, #33]	; 0x21
    3354:	f8c0 e018 	str.w	lr, [r0, #24]
    3358:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    335c:	6284      	str	r4, [r0, #40]	; 0x28
}
    335e:	bd10      	pop	{r4, pc}
    3360:	ffff0001 	.word	0xffff0001
    3364:	2000248c 	.word	0x2000248c
    3368:	3de147ae 	.word	0x3de147ae

0000336c <StepDirTmcSPI::setDecayMode(int)>:
  }
}

// set the decay mode STEALTHCHOP or SPREADCYCLE
void StepDirTmcSPI::setDecayMode(int decayMode) {
  switch (settings.model) {
    336c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    3370:	2b0c      	cmp	r3, #12
    3372:	d003      	beq.n	337c <StepDirTmcSPI::setDecayMode(int)+0x10>
    3374:	3b0e      	subs	r3, #14
    3376:	b29b      	uxth	r3, r3
    3378:	2b01      	cmp	r3, #1
    337a:	d805      	bhi.n	3388 <StepDirTmcSPI::setDecayMode(int)+0x1c>
    case TMC2130: ((TMC2130Stepper*)driver)->en_pwm_mode(decayMode != SPREADCYCLE); break;
    337c:	3905      	subs	r1, #5
    337e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    3380:	bf18      	it	ne
    3382:	2101      	movne	r1, #1
    3384:	f012 ba74 	b.w	15870 <TMC2130Stepper::en_pwm_mode(bool)>
    case TMC5160: ((TMC5160Stepper*)driver)->en_pwm_mode(decayMode != SPREADCYCLE); break;
    case TMC5161: ((TMC5161Stepper*)driver)->en_pwm_mode(decayMode != SPREADCYCLE); break;
  }
}
    3388:	4770      	bx	lr
    338a:	bf00      	nop

0000338c <StepDirTmcSPI::modeDecayTracking()>:
void StepDirTmcSPI::modeDecayTracking() {
    338c:	b510      	push	{r4, lr}
    338e:	4604      	mov	r4, r0
  setDecayMode(settings.decay);
    3390:	f990 1013 	ldrsb.w	r1, [r0, #19]
    3394:	f7ff ffea 	bl	336c <StepDirTmcSPI::setDecayMode(int)>
  current(settings.currentRun, (float)settings.currentHold/settings.currentRun);
    3398:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    339c:	ee07 3a90 	vmov	s15, r3
    33a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    33a4:	ee07 3a10 	vmov	s14, r3
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    33a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    33ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    33b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    33b4:	2b0c      	cmp	r3, #12
    33b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
    33ba:	d014      	beq.n	33e6 <StepDirTmcSPI::modeDecayTracking()+0x5a>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    33bc:	2b0d      	cmp	r3, #13
    33be:	d020      	beq.n	3402 <StepDirTmcSPI::modeDecayTracking()+0x76>
      if (settings.model == TMC5160) { ((TMC5160Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    33c0:	2b0e      	cmp	r3, #14
    33c2:	d002      	beq.n	33ca <StepDirTmcSPI::modeDecayTracking()+0x3e>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    33c4:	2b0f      	cmp	r3, #15
    33c6:	d000      	beq.n	33ca <StepDirTmcSPI::modeDecayTracking()+0x3e>
}
    33c8:	bd10      	pop	{r4, pc}
    33ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 3420 <StepDirTmcSPI::modeDecayTracking()+0x94>
		void rms_current(uint16_t mA, float mult) { TMC2160Stepper::rms_current(mA, mult); }
    33ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    33d0:	ee67 7a87 	vmul.f32	s15, s15, s14
    33d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    33dc:	ee17 3a90 	vmov	r3, s15
    33e0:	b299      	uxth	r1, r3
    33e2:	f012 be0d 	b.w	16000 <TMC2160Stepper::rms_current(unsigned short, float)>
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    33e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 3420 <StepDirTmcSPI::modeDecayTracking()+0x94>
    33ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    33ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    33f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    33f8:	ee17 3a90 	vmov	r3, s15
    33fc:	b299      	uxth	r1, r3
    33fe:	f013 b90b 	b.w	16618 <TMCStepper::rms_current(unsigned short, float)>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    3402:	ed9f 7a07 	vldr	s14, [pc, #28]	; 3420 <StepDirTmcSPI::modeDecayTracking()+0x94>
    3406:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3408:	ee67 7a87 	vmul.f32	s15, s15, s14
    340c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3414:	ee17 3a90 	vmov	r3, s15
    3418:	b299      	uxth	r1, r3
    341a:	f012 bf4d 	b.w	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    341e:	bf00      	nop
    3420:	3f350481 	.word	0x3f350481

00003424 <StepDirTmcSPI::modeDecaySlewing()>:
void StepDirTmcSPI::modeDecaySlewing() {
    3424:	b510      	push	{r4, lr}
    3426:	4604      	mov	r4, r0
  setDecayMode(settings.decaySlewing);
    3428:	f990 1014 	ldrsb.w	r1, [r0, #20]
    342c:	f7ff ff9e 	bl	336c <StepDirTmcSPI::setDecayMode(int)>
  int IGOTO = settings.currentGoto;
    3430:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  if (IGOTO == OFF) IGOTO = settings.currentRun;
    3434:	1c5a      	adds	r2, r3, #1
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    3436:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    343a:	bf08      	it	eq
    343c:	f9b4 300e 	ldrsheq.w	r3, [r4, #14]
    3440:	2a0c      	cmp	r2, #12
  current(IGOTO, 1.0F);
    3442:	ee07 3a90 	vmov	s15, r3
    3446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    344a:	d016      	beq.n	347a <StepDirTmcSPI::modeDecaySlewing()+0x56>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    344c:	2a0d      	cmp	r2, #13
    344e:	d024      	beq.n	349a <StepDirTmcSPI::modeDecaySlewing()+0x76>
      if (settings.model == TMC5160) { ((TMC5160Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    3450:	2a0e      	cmp	r2, #14
    3452:	d002      	beq.n	345a <StepDirTmcSPI::modeDecaySlewing()+0x36>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    3454:	2a0f      	cmp	r2, #15
    3456:	d000      	beq.n	345a <StepDirTmcSPI::modeDecaySlewing()+0x36>
}
    3458:	bd10      	pop	{r4, pc}
    345a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 34b8 <StepDirTmcSPI::modeDecaySlewing()+0x94>
    345e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3462:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3464:	ee67 7a87 	vmul.f32	s15, s15, s14
    3468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    346c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3470:	ee17 3a90 	vmov	r3, s15
    3474:	b299      	uxth	r1, r3
    3476:	f012 bdc3 	b.w	16000 <TMC2160Stepper::rms_current(unsigned short, float)>
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    347a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 34b8 <StepDirTmcSPI::modeDecaySlewing()+0x94>
    347e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3482:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3484:	ee67 7a87 	vmul.f32	s15, s15, s14
    3488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    348c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3490:	ee17 3a90 	vmov	r3, s15
    3494:	b299      	uxth	r1, r3
    3496:	f013 b8bf 	b.w	16618 <TMCStepper::rms_current(unsigned short, float)>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    349a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 34b8 <StepDirTmcSPI::modeDecaySlewing()+0x94>
    349e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    34a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    34a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    34ac:	ee17 3a90 	vmov	r3, s15
    34b0:	b299      	uxth	r1, r3
    34b2:	f012 bf01 	b.w	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    34b6:	bf00      	nop
    34b8:	3f350481 	.word	0x3f350481

000034bc <StepDirTmcSPI::enable(bool)>:
bool StepDirTmcSPI::enable(bool state) {
    34bc:	b538      	push	{r3, r4, r5, lr}
    34be:	4604      	mov	r4, r0
  if (state) {
    34c0:	b311      	cbz	r1, 3508 <StepDirTmcSPI::enable(bool)+0x4c>
    modeDecayTracking();
    34c2:	6803      	ldr	r3, [r0, #0]
    34c4:	4a34      	ldr	r2, [pc, #208]	; (3598 <StepDirTmcSPI::enable(bool)+0xdc>)
    34c6:	695b      	ldr	r3, [r3, #20]
    34c8:	4293      	cmp	r3, r2
    34ca:	d141      	bne.n	3550 <StepDirTmcSPI::enable(bool)+0x94>
  setDecayMode(settings.decay);
    34cc:	f990 1013 	ldrsb.w	r1, [r0, #19]
    34d0:	f7ff ff4c 	bl	336c <StepDirTmcSPI::setDecayMode(int)>
  current(settings.currentRun, (float)settings.currentHold/settings.currentRun);
    34d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    34d8:	ee07 3a90 	vmov	s15, r3
    34dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    34e0:	ee07 3a10 	vmov	s14, r3
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    34e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    34e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    34ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    34f0:	2b0c      	cmp	r3, #12
    34f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
    34f6:	d01d      	beq.n	3534 <StepDirTmcSPI::enable(bool)+0x78>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    34f8:	2b0d      	cmp	r3, #13
    34fa:	d03a      	beq.n	3572 <StepDirTmcSPI::enable(bool)+0xb6>
      if (settings.model == TMC5160) { ((TMC5160Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    34fc:	2b0e      	cmp	r3, #14
    34fe:	d02a      	beq.n	3556 <StepDirTmcSPI::enable(bool)+0x9a>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    3500:	2b0f      	cmp	r3, #15
    3502:	d028      	beq.n	3556 <StepDirTmcSPI::enable(bool)+0x9a>
}
    3504:	2001      	movs	r0, #1
    3506:	bd38      	pop	{r3, r4, r5, pc}
    3508:	460d      	mov	r5, r1
    setDecayMode(STEALTHCHOP);
    350a:	2106      	movs	r1, #6
    350c:	f7ff ff2e 	bl	336c <StepDirTmcSPI::setDecayMode(int)>
    switch (settings.model) {
    3510:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    3514:	2b0d      	cmp	r3, #13
    3516:	d039      	beq.n	358c <StepDirTmcSPI::enable(bool)+0xd0>
    3518:	dd09      	ble.n	352e <StepDirTmcSPI::enable(bool)+0x72>
    351a:	3b0e      	subs	r3, #14
    351c:	b29b      	uxth	r3, r3
    351e:	2b01      	cmp	r3, #1
    3520:	d8f0      	bhi.n	3504 <StepDirTmcSPI::enable(bool)+0x48>
      case TMC2130: ((TMC2130Stepper*)driver)->ihold(0); break;
    3522:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3524:	2100      	movs	r1, #0
    3526:	f012 f9c7 	bl	158b8 <TMCStepper::ihold(unsigned char)>
}
    352a:	2001      	movs	r0, #1
    352c:	bd38      	pop	{r3, r4, r5, pc}
    switch (settings.model) {
    352e:	2b0c      	cmp	r3, #12
    3530:	d0f7      	beq.n	3522 <StepDirTmcSPI::enable(bool)+0x66>
    3532:	e7e7      	b.n	3504 <StepDirTmcSPI::enable(bool)+0x48>
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    3534:	ed9f 7a19 	vldr	s14, [pc, #100]	; 359c <StepDirTmcSPI::enable(bool)+0xe0>
    3538:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    353a:	ee67 7a87 	vmul.f32	s15, s15, s14
    353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3542:	ee17 3a90 	vmov	r3, s15
    3546:	b299      	uxth	r1, r3
    3548:	f013 f866 	bl	16618 <TMCStepper::rms_current(unsigned short, float)>
}
    354c:	2001      	movs	r0, #1
    354e:	bd38      	pop	{r3, r4, r5, pc}
    modeDecayTracking();
    3550:	4798      	blx	r3
}
    3552:	2001      	movs	r0, #1
    3554:	bd38      	pop	{r3, r4, r5, pc}
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    3556:	ed9f 7a11 	vldr	s14, [pc, #68]	; 359c <StepDirTmcSPI::enable(bool)+0xe0>
    355a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    355c:	ee67 7a87 	vmul.f32	s15, s15, s14
    3560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3564:	ee17 3a90 	vmov	r3, s15
    3568:	b299      	uxth	r1, r3
    356a:	f012 fd49 	bl	16000 <TMC2160Stepper::rms_current(unsigned short, float)>
    356e:	2001      	movs	r0, #1
    3570:	bd38      	pop	{r3, r4, r5, pc}
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    3572:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 359c <StepDirTmcSPI::enable(bool)+0xe0>
    3576:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3578:	ee67 7a87 	vmul.f32	s15, s15, s14
    357c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3580:	ee17 3a90 	vmov	r3, s15
    3584:	b299      	uxth	r1, r3
    3586:	f012 fe97 	bl	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    358a:	e7bb      	b.n	3504 <StepDirTmcSPI::enable(bool)+0x48>
      case TMC2660: ((TMC2660Stepper*)driver)->rms_current(0); break;
    358c:	4629      	mov	r1, r5
    358e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3590:	f012 fe92 	bl	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    3594:	e7b6      	b.n	3504 <StepDirTmcSPI::enable(bool)+0x48>
    3596:	bf00      	nop
    3598:	0000338d 	.word	0x0000338d
    359c:	3f350481 	.word	0x3f350481

000035a0 <StepDirTmcSPI::calibrateDriver()>:
void StepDirTmcSPI::calibrateDriver() {
    35a0:	b510      	push	{r4, lr}
  if (settings.decay == STEALTHCHOP || settings.decaySlewing == STEALTHCHOP) {
    35a2:	f990 3013 	ldrsb.w	r3, [r0, #19]
void StepDirTmcSPI::calibrateDriver() {
    35a6:	4604      	mov	r4, r0
  if (settings.decay == STEALTHCHOP || settings.decaySlewing == STEALTHCHOP) {
    35a8:	2b06      	cmp	r3, #6
    35aa:	d004      	beq.n	35b6 <StepDirTmcSPI::calibrateDriver()+0x16>
    35ac:	f990 3014 	ldrsb.w	r3, [r0, #20]
    35b0:	2b06      	cmp	r3, #6
    35b2:	d000      	beq.n	35b6 <StepDirTmcSPI::calibrateDriver()+0x16>
}
    35b4:	bd10      	pop	{r4, pc}
    current(settings.currentRun, 1.0F);
    35b6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    35ba:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    35be:	ee07 3a90 	vmov	s15, r3
    35c2:	2a0c      	cmp	r2, #12
    35c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    35c8:	d05d      	beq.n	3686 <StepDirTmcSPI::calibrateDriver()+0xe6>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    35ca:	2a0d      	cmp	r2, #13
    35cc:	f000 8085 	beq.w	36da <StepDirTmcSPI::calibrateDriver()+0x13a>
      if (settings.model == TMC5160) { ((TMC5160Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    35d0:	2a0e      	cmp	r2, #14
    35d2:	d035      	beq.n	3640 <StepDirTmcSPI::calibrateDriver()+0xa0>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    35d4:	2a0f      	cmp	r2, #15
    35d6:	d033      	beq.n	3640 <StepDirTmcSPI::calibrateDriver()+0xa0>
    delay(1000);
    35d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    35dc:	f014 fdd4 	bl	18188 <delay>
    modeDecayTracking();
    35e0:	6823      	ldr	r3, [r4, #0]
    35e2:	4a4b      	ldr	r2, [pc, #300]	; (3710 <StepDirTmcSPI::calibrateDriver()+0x170>)
    35e4:	695b      	ldr	r3, [r3, #20]
    35e6:	4293      	cmp	r3, r2
    35e8:	d165      	bne.n	36b6 <StepDirTmcSPI::calibrateDriver()+0x116>
  setDecayMode(settings.decay);
    35ea:	f994 1013 	ldrsb.w	r1, [r4, #19]
    35ee:	4620      	mov	r0, r4
    35f0:	f7ff febc 	bl	336c <StepDirTmcSPI::setDecayMode(int)>
  current(settings.currentRun, (float)settings.currentHold/settings.currentRun);
    35f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    35f8:	ee07 3a90 	vmov	s15, r3
    35fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3600:	ee07 3a10 	vmov	s14, r3
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    3604:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    3608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    360c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3610:	2b0c      	cmp	r3, #12
    3612:	ee87 0a27 	vdiv.f32	s0, s14, s15
    3616:	d052      	beq.n	36be <StepDirTmcSPI::calibrateDriver()+0x11e>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    3618:	2b0d      	cmp	r3, #13
    361a:	d06b      	beq.n	36f4 <StepDirTmcSPI::calibrateDriver()+0x154>
      if (settings.model == TMC5160) { ((TMC5160Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    361c:	2b0e      	cmp	r3, #14
    361e:	d001      	beq.n	3624 <StepDirTmcSPI::calibrateDriver()+0x84>
      if (settings.model == TMC5161) { ((TMC5161Stepper*)driver)->rms_current(mA*0.7071F, mult); }
    3620:	2b0f      	cmp	r3, #15
    3622:	d1c7      	bne.n	35b4 <StepDirTmcSPI::calibrateDriver()+0x14>
    3624:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 3714 <StepDirTmcSPI::calibrateDriver()+0x174>
    3628:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    362a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
    362e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3636:	ee17 3a90 	vmov	r3, s15
    363a:	b299      	uxth	r1, r3
    363c:	f012 bce0 	b.w	16000 <TMC2160Stepper::rms_current(unsigned short, float)>
    3640:	ed9f 7a34 	vldr	s14, [pc, #208]	; 3714 <StepDirTmcSPI::calibrateDriver()+0x174>
    3644:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3648:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    364a:	ee67 7a87 	vmul.f32	s15, s15, s14
    364e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3652:	ee17 3a90 	vmov	r3, s15
    3656:	b299      	uxth	r1, r3
    3658:	f012 fcd2 	bl	16000 <TMC2160Stepper::rms_current(unsigned short, float)>
    if (settings.model == TMC2130) {
    365c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    3660:	2b0c      	cmp	r3, #12
    3662:	d01f      	beq.n	36a4 <StepDirTmcSPI::calibrateDriver()+0x104>
    if (settings.model == TMC5160) {
    3664:	3b0e      	subs	r3, #14
    3666:	b29b      	uxth	r3, r3
    3668:	2b01      	cmp	r3, #1
    366a:	d8b5      	bhi.n	35d8 <StepDirTmcSPI::calibrateDriver()+0x38>
      ((TMC5160Stepper*)driver)->pwm_autograd(DRIVER_TMC_STEPPER_AUTOGRAD);
    366c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    366e:	2100      	movs	r1, #0
    3670:	f012 f982 	bl	15978 <TMC2160Stepper::pwm_autograd(bool)>
      ((TMC5160Stepper*)driver)->pwm_autoscale(true);
    3674:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3676:	2101      	movs	r1, #1
    3678:	f012 f96e 	bl	15958 <TMC2160Stepper::pwm_autoscale(bool)>
      ((TMC5160Stepper*)driver)->en_pwm_mode(true);
    367c:	2101      	movs	r1, #1
    367e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3680:	f012 f8f6 	bl	15870 <TMC2130Stepper::en_pwm_mode(bool)>
    3684:	e7a8      	b.n	35d8 <StepDirTmcSPI::calibrateDriver()+0x38>
      if (settings.model == TMC2130) { ((TMC2130Stepper*)driver)->rms_current(mA*0.7071F, mult); } else
    3686:	ed9f 7a23 	vldr	s14, [pc, #140]	; 3714 <StepDirTmcSPI::calibrateDriver()+0x174>
    368a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    368e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3690:	ee67 7a87 	vmul.f32	s15, s15, s14
    3694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3698:	ee17 3a90 	vmov	r3, s15
    369c:	b299      	uxth	r1, r3
    369e:	f012 ffbb 	bl	16618 <TMCStepper::rms_current(unsigned short, float)>
    36a2:	e7db      	b.n	365c <StepDirTmcSPI::calibrateDriver()+0xbc>
      ((TMC2130Stepper*)driver)->pwm_autoscale(true);
    36a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    36a6:	2101      	movs	r1, #1
    36a8:	f012 f93a 	bl	15920 <TMC2130Stepper::pwm_autoscale(bool)>
      ((TMC2130Stepper*)driver)->en_pwm_mode(true);
    36ac:	2101      	movs	r1, #1
    36ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    36b0:	f012 f8de 	bl	15870 <TMC2130Stepper::en_pwm_mode(bool)>
    36b4:	e790      	b.n	35d8 <StepDirTmcSPI::calibrateDriver()+0x38>
    modeDecayTracking();
    36b6:	4620      	mov	r0, r4
}
    36b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    modeDecayTracking();
    36bc:	4718      	bx	r3
    36be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 3714 <StepDirTmcSPI::calibrateDriver()+0x174>
    36c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    36c4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
    36c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    36d0:	ee17 3a90 	vmov	r3, s15
    36d4:	b299      	uxth	r1, r3
    36d6:	f012 bf9f 	b.w	16618 <TMCStepper::rms_current(unsigned short, float)>
      if (settings.model == TMC2660) { ((TMC2660Stepper*)driver)->rms_current(mA*0.7071F); } else
    36da:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 3714 <StepDirTmcSPI::calibrateDriver()+0x174>
    36de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    36e0:	ee67 7a87 	vmul.f32	s15, s15, s14
    36e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    36e8:	ee17 3a90 	vmov	r3, s15
    36ec:	b299      	uxth	r1, r3
    36ee:	f012 fde3 	bl	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    36f2:	e7b3      	b.n	365c <StepDirTmcSPI::calibrateDriver()+0xbc>
    36f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 3714 <StepDirTmcSPI::calibrateDriver()+0x174>
    36f8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    36fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    36fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3706:	ee17 3a90 	vmov	r3, s15
    370a:	b299      	uxth	r1, r3
    370c:	f012 bdd4 	b.w	162b8 <TMC2660Stepper::rms_current(unsigned short)>
    3710:	0000338d 	.word	0x0000338d
    3714:	3f350481 	.word	0x3f350481

00003718 <Calendars::gregorianToJulianDay(GregorianDate)>:

  return date;
}

// convert from Gregorian to Julian date (does not handle hours)
JulianDate Calendars::gregorianToJulianDay(GregorianDate date) {
    3718:	b082      	sub	sp, #8
    371a:	ed2d 8b02 	vpush	{d8}
    371e:	b088      	sub	sp, #32
    3720:	a90a      	add	r1, sp, #40	; 0x28
    3722:	e881 000c 	stmia.w	r1, {r2, r3}
  JulianDate julianDay;
  
  int y = date.year;
  int m = date.month;
    3726:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  int y = date.year;
    372a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  if (m == 1 || m == 2) { y--; m += 12; }
    372e:	1e59      	subs	r1, r3, #1
    3730:	2901      	cmp	r1, #1
    3732:	d801      	bhi.n	3738 <Calendars::gregorianToJulianDay(GregorianDate)+0x20>
    3734:	3a01      	subs	r2, #1
    3736:	330c      	adds	r3, #12
  double B = 2.0 - floor(y/100.0) + floor(y/400.0);
    3738:	ee07 2a90 	vmov	s15, r2
  julianDay.day = B + floor(365.25*y) + floor(30.6001*(m + 1.0)) + date.day + 1720994.5;
    373c:	ee06 3a90 	vmov	s13, r3
    3740:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    3744:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
  double B = 2.0 - floor(y/100.0) + floor(y/400.0);
    3748:	eeb8 5be7 	vcvt.f64.s32	d5, s15
  julianDay.day = B + floor(365.25*y) + floor(30.6001*(m + 1.0)) + date.day + 1720994.5;
    374c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  double B = 2.0 - floor(y/100.0) + floor(y/400.0);
    3750:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 37c0 <Calendars::gregorianToJulianDay(GregorianDate)+0xa8>
    3754:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 37c8 <Calendars::gregorianToJulianDay(GregorianDate)+0xb0>
  julianDay.day = B + floor(365.25*y) + floor(30.6001*(m + 1.0)) + date.day + 1720994.5;
    3758:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 37d0 <Calendars::gregorianToJulianDay(GregorianDate)+0xb8>
  double B = 2.0 - floor(y/100.0) + floor(y/400.0);
    375c:	ee85 2b07 	vdiv.f64	d2, d5, d7
    3760:	ee85 3b00 	vdiv.f64	d3, d5, d0
    3764:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
  julianDay.day = B + floor(365.25*y) + floor(30.6001*(m + 1.0)) + date.day + 1720994.5;
    3768:	ee36 6b04 	vadd.f64	d6, d6, d4
    376c:	ee04 3a10 	vmov	s8, r3
    3770:	ee25 5b01 	vmul.f64	d5, d5, d1
    3774:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
    3778:	ed9f 8b17 	vldr	d8, [pc, #92]	; 37d8 <Calendars::gregorianToJulianDay(GregorianDate)+0xc0>
    377c:	febb 5b45 	vrintm.f64	d5, d5
    3780:	ed9f 0b17 	vldr	d0, [pc, #92]	; 37e0 <Calendars::gregorianToJulianDay(GregorianDate)+0xc8>
  julianDay.hour = 0;

  return julianDay;
}
    3784:	ed9f 1b18 	vldr	d1, [pc, #96]	; 37e8 <Calendars::gregorianToJulianDay(GregorianDate)+0xd0>
  julianDay.day = B + floor(365.25*y) + floor(30.6001*(m + 1.0)) + date.day + 1720994.5;
    3788:	ee26 6b08 	vmul.f64	d6, d6, d8
    378c:	febb 6b46 	vrintm.f64	d6, d6
  double B = 2.0 - floor(y/100.0) + floor(y/400.0);
    3790:	febb 2b42 	vrintm.f64	d2, d2
    3794:	ee37 7b42 	vsub.f64	d7, d7, d2
    3798:	febb 3b43 	vrintm.f64	d3, d3
    379c:	ee37 7b03 	vadd.f64	d7, d7, d3
  julianDay.day = B + floor(365.25*y) + floor(30.6001*(m + 1.0)) + date.day + 1720994.5;
    37a0:	ee37 7b05 	vadd.f64	d7, d7, d5
    37a4:	ee37 7b06 	vadd.f64	d7, d7, d6
    37a8:	ee37 7b04 	vadd.f64	d7, d7, d4
}
    37ac:	ee37 0b00 	vadd.f64	d0, d7, d0
    37b0:	b008      	add	sp, #32
    37b2:	ecbd 8b02 	vpop	{d8}
    37b6:	b002      	add	sp, #8
    37b8:	4770      	bx	lr
    37ba:	bf00      	nop
    37bc:	f3af 8000 	nop.w
    37c0:	00000000 	.word	0x00000000
    37c4:	40590000 	.word	0x40590000
    37c8:	00000000 	.word	0x00000000
    37cc:	40790000 	.word	0x40790000
    37d0:	00000000 	.word	0x00000000
    37d4:	4076d400 	.word	0x4076d400
    37d8:	27525461 	.word	0x27525461
    37dc:	403e99a0 	.word	0x403e99a0
    37e0:	80000000 	.word	0x80000000
    37e4:	413a42a2 	.word	0x413a42a2
	...

000037f0 <Calendars::gregorianToJulian(GregorianDate)>:
JulianDate Calendars::gregorianToJulian(GregorianDate date) {
    37f0:	b082      	sub	sp, #8
    37f2:	b500      	push	{lr}
    37f4:	b091      	sub	sp, #68	; 0x44
    37f6:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  JulianDate jd = gregorianToJulianDay(date);
    37fa:	a914      	add	r1, sp, #80	; 0x50
JulianDate Calendars::gregorianToJulian(GregorianDate date) {
    37fc:	e88c 000c 	stmia.w	ip, {r2, r3}
    3800:	4684      	mov	ip, r0
  JulianDate jd = gregorianToJulianDay(date);
    3802:	c90f      	ldmia	r1, {r0, r1, r2, r3}
    3804:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3808:	ab12      	add	r3, sp, #72	; 0x48
    380a:	4660      	mov	r0, ip
    380c:	cb0c      	ldmia	r3, {r2, r3}
    380e:	f7ff ff83 	bl	3718 <Calendars::gregorianToJulianDay(GregorianDate)>
  while (jd.hour >= 24.0) { jd.hour -= 24.0; jd.day += 1.0; }
    3812:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  jd.hour = date.hour;
    3816:	ed9d 1b14 	vldr	d1, [sp, #80]	; 0x50
  while (jd.hour >= 24.0) { jd.hour -= 24.0; jd.day += 1.0; }
    381a:	eeb4 1bc7 	vcmpe.f64	d1, d7
    381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3822:	db0a      	blt.n	383a <Calendars::gregorianToJulian(GregorianDate)+0x4a>
    3824:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    3828:	ee31 1b47 	vsub.f64	d1, d1, d7
    382c:	ee30 0b06 	vadd.f64	d0, d0, d6
    3830:	eeb4 1bc7 	vcmpe.f64	d1, d7
    3834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3838:	daf6      	bge.n	3828 <Calendars::gregorianToJulian(GregorianDate)+0x38>
  while (jd.hour < 0.0) { jd.hour += 24.0; jd.day -= 1.0; }
    383a:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
    383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3842:	d50c      	bpl.n	385e <Calendars::gregorianToJulian(GregorianDate)+0x6e>
    3844:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
    3848:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    384c:	ee31 1b06 	vadd.f64	d1, d1, d6
    3850:	ee30 0b47 	vsub.f64	d0, d0, d7
    3854:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
    3858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    385c:	d4f6      	bmi.n	384c <Calendars::gregorianToJulian(GregorianDate)+0x5c>
}
    385e:	b011      	add	sp, #68	; 0x44
    3860:	f85d eb04 	ldr.w	lr, [sp], #4
    3864:	b002      	add	sp, #8
    3866:	4770      	bx	lr

00003868 <Calendars::julianDayToGregorian(JulianDate)>:
// convert from Julian to Gregorian date (does not handle hours)
GregorianDate Calendars::julianDayToGregorian(JulianDate julianDate) {
  double A, B, C, D, D1, E, F, G, I;
  GregorianDate date;
  
  I = floor(julianDate.day + 0.5);
    3868:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
GregorianDate Calendars::julianDayToGregorian(JulianDate julianDate) {
    386c:	b086      	sub	sp, #24
 
  F = 0.0;
  if (I > 2299160.0) {
    386e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 3988 <Calendars::julianDayToGregorian(JulianDate)+0x120>
  I = floor(julianDate.day + 0.5);
    3872:	ee30 7b07 	vadd.f64	d7, d0, d7
    3876:	febb 7b47 	vrintm.f64	d7, d7
  if (I > 2299160.0) {
    387a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3882:	dd19      	ble.n	38b8 <Calendars::julianDayToGregorian(JulianDate)+0x50>
    A = int((I - 1867216.25)/36524.25);
    B = I + 1.0 + A - floor(A/4.0);
    3884:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    3888:	eeb5 6b00 	vmov.f64	d6, #80	; 0x3e800000  0.250
    A = int((I - 1867216.25)/36524.25);
    388c:	ed9f 4b40 	vldr	d4, [pc, #256]	; 3990 <Calendars::julianDayToGregorian(JulianDate)+0x128>
    3890:	ed9f 3b41 	vldr	d3, [pc, #260]	; 3998 <Calendars::julianDayToGregorian(JulianDate)+0x130>
    B = I + 1.0 + A - floor(A/4.0);
    3894:	ee37 5b05 	vadd.f64	d5, d7, d5
    A = int((I - 1867216.25)/36524.25);
    3898:	ee37 4b44 	vsub.f64	d4, d7, d4
    389c:	ee84 7b03 	vdiv.f64	d7, d4, d3
    38a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    38a4:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    B = I + 1.0 + A - floor(A/4.0);
    38a8:	ee27 6b06 	vmul.f64	d6, d7, d6
    38ac:	ee35 5b07 	vadd.f64	d5, d5, d7
    38b0:	febb 7b46 	vrintm.f64	d7, d6
    38b4:	ee35 7b47 	vsub.f64	d7, d5, d7
  E = floor(365.25*D);
  G = floor((C - E)/30.6001);

  D1 = C - E + F - floor(30.6001*G);
  date.day = floor(D1);
  if (G < 13.5)         date.month = floor(G - 1.0);    else date.month = floor(G - 13.0);
    38b8:	eeb2 3b0b 	vmov.f64	d3, #43	; 0x41580000  13.5
  C = B + 1524.0;
    38bc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 39a0 <Calendars::julianDayToGregorian(JulianDate)+0x138>
  D = floor((C - 122.1)/365.25);
    38c0:	ed9f 1b39 	vldr	d1, [pc, #228]	; 39a8 <Calendars::julianDayToGregorian(JulianDate)+0x140>
    38c4:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 39b0 <Calendars::julianDayToGregorian(JulianDate)+0x148>
  C = B + 1524.0;
    38c8:	ee37 7b06 	vadd.f64	d7, d7, d6
  G = floor((C - E)/30.6001);
    38cc:	ed9f 4b3a 	vldr	d4, [pc, #232]	; 39b8 <Calendars::julianDayToGregorian(JulianDate)+0x150>
  D = floor((C - 122.1)/365.25);
    38d0:	ee37 1b41 	vsub.f64	d1, d7, d1
  D1 = C - E + F - floor(30.6001*G);
    38d4:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 39c0 <Calendars::julianDayToGregorian(JulianDate)+0x158>
  D = floor((C - 122.1)/365.25);
    38d8:	ee81 6b05 	vdiv.f64	d6, d1, d5
    38dc:	febb 6b46 	vrintm.f64	d6, d6
  E = floor(365.25*D);
    38e0:	ee26 5b05 	vmul.f64	d5, d6, d5
    38e4:	febb 5b45 	vrintm.f64	d5, d5
  G = floor((C - E)/30.6001);
    38e8:	ee37 7b45 	vsub.f64	d7, d7, d5
    38ec:	ee87 5b04 	vdiv.f64	d5, d7, d4
  D1 = C - E + F - floor(30.6001*G);
    38f0:	ee37 7b02 	vadd.f64	d7, d7, d2
  G = floor((C - E)/30.6001);
    38f4:	febb 5b45 	vrintm.f64	d5, d5
  D1 = C - E + F - floor(30.6001*G);
    38f8:	ee25 4b04 	vmul.f64	d4, d5, d4
  if (G < 13.5)         date.month = floor(G - 1.0);    else date.month = floor(G - 13.0);
    38fc:	eeb4 5bc3 	vcmpe.f64	d5, d3
  D1 = C - E + F - floor(30.6001*G);
    3900:	febb 4b44 	vrintm.f64	d4, d4
    3904:	ee37 7b44 	vsub.f64	d7, d7, d4
  if (G < 13.5)         date.month = floor(G - 1.0);    else date.month = floor(G - 13.0);
    3908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  date.day = floor(D1);
    390c:	febb 7b47 	vrintm.f64	d7, d7
    3910:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    3914:	ee17 3a90 	vmov	r3, s15
    3918:	70c3      	strb	r3, [r0, #3]
  if (G < 13.5)         date.month = floor(G - 1.0);    else date.month = floor(G - 13.0);
    391a:	d51c      	bpl.n	3956 <Calendars::julianDayToGregorian(JulianDate)+0xee>
    391c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    3920:	ee35 5b47 	vsub.f64	d5, d5, d7
    3924:	eefc 7bc5 	vcvt.u32.f64	s15, d5
    3928:	edcd 7a01 	vstr	s15, [sp, #4]
    392c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (date.month > 2.5) date.year  = floor(D - 4716.0); else date.year  = floor(D - 4715.0);
    3930:	2b02      	cmp	r3, #2
    3932:	7083      	strb	r3, [r0, #2]
    3934:	d91c      	bls.n	3970 <Calendars::julianDayToGregorian(JulianDate)+0x108>
    3936:	ed9f 7b24 	vldr	d7, [pc, #144]	; 39c8 <Calendars::julianDayToGregorian(JulianDate)+0x160>
    393a:	ee36 7b47 	vsub.f64	d7, d6, d7
    393e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    3942:	ee17 3a10 	vmov	r3, s14
    3946:	b21b      	sxth	r3, r3
    3948:	8003      	strh	r3, [r0, #0]
  date.hour = 0.0;
    394a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 39c0 <Calendars::julianDayToGregorian(JulianDate)+0x158>
    394e:	ed80 7b02 	vstr	d7, [r0, #8]

  return date;
}
    3952:	b006      	add	sp, #24
    3954:	4770      	bx	lr
  if (G < 13.5)         date.month = floor(G - 1.0);    else date.month = floor(G - 13.0);
    3956:	eeb2 7b0a 	vmov.f64	d7, #42	; 0x41500000  13.0
    395a:	ee35 5b47 	vsub.f64	d5, d5, d7
    395e:	eefc 7bc5 	vcvt.u32.f64	s15, d5
    3962:	edcd 7a01 	vstr	s15, [sp, #4]
    3966:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (date.month > 2.5) date.year  = floor(D - 4716.0); else date.year  = floor(D - 4715.0);
    396a:	2b02      	cmp	r3, #2
    396c:	7083      	strb	r3, [r0, #2]
    396e:	d8e2      	bhi.n	3936 <Calendars::julianDayToGregorian(JulianDate)+0xce>
    3970:	ed9f 7b17 	vldr	d7, [pc, #92]	; 39d0 <Calendars::julianDayToGregorian(JulianDate)+0x168>
    3974:	ee36 6b47 	vsub.f64	d6, d6, d7
    3978:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    397c:	ee16 3a10 	vmov	r3, s12
    3980:	b21b      	sxth	r3, r3
    3982:	e7e1      	b.n	3948 <Calendars::julianDayToGregorian(JulianDate)+0xe0>
    3984:	f3af 8000 	nop.w
    3988:	00000000 	.word	0x00000000
    398c:	41418a8c 	.word	0x41418a8c
    3990:	40000000 	.word	0x40000000
    3994:	413c7dd0 	.word	0x413c7dd0
    3998:	00000000 	.word	0x00000000
    399c:	40e1d588 	.word	0x40e1d588
    39a0:	00000000 	.word	0x00000000
    39a4:	4097d000 	.word	0x4097d000
    39a8:	66666666 	.word	0x66666666
    39ac:	405e8666 	.word	0x405e8666
    39b0:	00000000 	.word	0x00000000
    39b4:	4076d400 	.word	0x4076d400
    39b8:	27525461 	.word	0x27525461
    39bc:	403e99a0 	.word	0x403e99a0
	...
    39cc:	40b26c00 	.word	0x40b26c00
    39d0:	00000000 	.word	0x00000000
    39d4:	40b26b00 	.word	0x40b26b00

000039d8 <Calendars::julianToGregorian(JulianDate)>:
  while (julianDate.hour >= 24.0) { julianDate.hour -= 24.0; julianDate.day += 1.0; }
    39d8:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
GregorianDate Calendars::julianToGregorian(JulianDate julianDate) {
    39dc:	b500      	push	{lr}
  while (julianDate.hour >= 24.0) { julianDate.hour -= 24.0; julianDate.day += 1.0; }
    39de:	eeb4 1bc7 	vcmpe.f64	d1, d7
GregorianDate Calendars::julianToGregorian(JulianDate julianDate) {
    39e2:	ed2d 8b02 	vpush	{d8}
  while (julianDate.hour >= 24.0) { julianDate.hour -= 24.0; julianDate.day += 1.0; }
    39e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
GregorianDate Calendars::julianToGregorian(JulianDate julianDate) {
    39ea:	b085      	sub	sp, #20
    39ec:	eeb0 8b41 	vmov.f64	d8, d1
  while (julianDate.hour >= 24.0) { julianDate.hour -= 24.0; julianDate.day += 1.0; }
    39f0:	db0a      	blt.n	3a08 <Calendars::julianToGregorian(JulianDate)+0x30>
    39f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    39f6:	ee38 8b47 	vsub.f64	d8, d8, d7
    39fa:	ee30 0b06 	vadd.f64	d0, d0, d6
    39fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
    3a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a06:	daf6      	bge.n	39f6 <Calendars::julianToGregorian(JulianDate)+0x1e>
  while (julianDate.hour < 0.0) { julianDate.hour += 24.0; julianDate.day -= 1.0; }
    3a08:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    3a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a10:	d50c      	bpl.n	3a2c <Calendars::julianToGregorian(JulianDate)+0x54>
    3a12:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
    3a16:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    3a1a:	ee38 8b06 	vadd.f64	d8, d8, d6
    3a1e:	ee30 0b47 	vsub.f64	d0, d0, d7
    3a22:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    3a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a2a:	d4f6      	bmi.n	3a1a <Calendars::julianToGregorian(JulianDate)+0x42>
  GregorianDate date = julianDayToGregorian(julianDate);
    3a2c:	eeb0 1b48 	vmov.f64	d1, d8
    3a30:	f7ff ff1a 	bl	3868 <Calendars::julianDayToGregorian(JulianDate)>
  date.hour = julianDate.hour;
    3a34:	ed80 8b02 	vstr	d8, [r0, #8]
}
    3a38:	b005      	add	sp, #20
    3a3a:	ecbd 8b02 	vpop	{d8}
    3a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a42:	bf00      	nop

00003a44 <Buffer::add(char)>:
  this->mountType = mountType;
}

bool Buffer::add(char c) {
  // (chr)6 is a special status command for the LX200 protocol
  if (c == (char)6 && cbp == 0) {
    3a44:	2906      	cmp	r1, #6
bool Buffer::add(char c) {
    3a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a4a:	4604      	mov	r4, r0
    3a4c:	b084      	sub	sp, #16
  if (c == (char)6 && cbp == 0) {
    3a4e:	d009      	beq.n	3a64 <Buffer::add(char)+0x20>
    if (mountType == 3) cb[2] = 'A'; else cb[2] = 'P';
    cb[3] = 0; cbp = 3; c = '#';
  }

  // ignore spaces/lf/cr
  if (c != (char)32 && c != (char)10 && c != (char)13 && c != (char)6) {
    3a50:	2920      	cmp	r1, #32
    3a52:	d001      	beq.n	3a58 <Buffer::add(char)+0x14>
    3a54:	290a      	cmp	r1, #10
    3a56:	d17b      	bne.n	3b50 <Buffer::add(char)+0x10c>
    if (cbp > bufferSize-2) cbp = bufferSize - 2;
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
  }

  if (c == '#') {
    3a58:	2923      	cmp	r1, #35	; 0x23
    3a5a:	d01b      	beq.n	3a94 <Buffer::add(char)+0x50>
      --len; --len; cb[--len] = 0;
    }

    return true;
  } else {
    return false;
    3a5c:	2000      	movs	r0, #0
  }
}
    3a5e:	b004      	add	sp, #16
    3a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (c == (char)6 && cbp == 0) {
    3a64:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d1f7      	bne.n	3a5c <Buffer::add(char)+0x18>
    if (mountType == 3) cb[2] = 'A'; else cb[2] = 'P';
    3a6c:	6840      	ldr	r0, [r0, #4]
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
    3a6e:	2223      	movs	r2, #35	; 0x23
    3a70:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    cb[0] = ':'; cb[1] = (char)6;
    3a74:	f240 613a 	movw	r1, #1594	; 0x63a
    if (mountType == 3) cb[2] = 'A'; else cb[2] = 'P';
    3a78:	2803      	cmp	r0, #3
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
    3a7a:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
    3a7e:	f04f 0204 	mov.w	r2, #4
    cb[0] = ':'; cb[1] = (char)6;
    3a82:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
    if (mountType == 3) cb[2] = 'A'; else cb[2] = 'P';
    3a86:	bf0c      	ite	eq
    3a88:	2341      	moveq	r3, #65	; 0x41
    3a8a:	2350      	movne	r3, #80	; 0x50
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
    3a8c:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    3a90:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    if (!(cbp > 1) && ((cb[0] == ':') || (cb[0] == ';')) && (cb[cbp-1] == '#')) { flush(); return false; }
    3a94:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
    3a98:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    3a9c:	2a01      	cmp	r2, #1
    3a9e:	dd09      	ble.n	3ab4 <Buffer::add(char)+0x70>
    if (((cb[0] == ':') || (cb[0] == ';')) && (cb[1] == '#') && (cb[2] == 0)) { flush(); return false; }
    3aa0:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
    3aa4:	2a01      	cmp	r2, #1
    3aa6:	d90e      	bls.n	3ac6 <Buffer::add(char)+0x82>
    checksum = (cb[0] == ';');
    3aa8:	2300      	movs	r3, #0
    return true;
    3aaa:	2001      	movs	r0, #1
    checksum = (cb[0] == ';');
    3aac:	7023      	strb	r3, [r4, #0]
}
    3aae:	b004      	add	sp, #16
    3ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!(cbp > 1) && ((cb[0] == ':') || (cb[0] == ';')) && (cb[cbp-1] == '#')) { flush(); return false; }
    3ab4:	f1a3 013a 	sub.w	r1, r3, #58	; 0x3a
    3ab8:	2901      	cmp	r1, #1
    3aba:	d8f5      	bhi.n	3aa8 <Buffer::add(char)+0x64>
    3abc:	4422      	add	r2, r4
    3abe:	f892 2067 	ldrb.w	r2, [r2, #103]	; 0x67
    3ac2:	2a23      	cmp	r2, #35	; 0x23
    3ac4:	d05a      	beq.n	3b7c <Buffer::add(char)+0x138>
    if (((cb[0] == ':') || (cb[0] == ';')) && (cb[1] == '#') && (cb[2] == 0)) { flush(); return false; }
    3ac6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    3ac8:	4a36      	ldr	r2, [pc, #216]	; (3ba4 <Buffer::add(char)+0x160>)
    3aca:	400a      	ands	r2, r1
    3acc:	f5b2 5f0c 	cmp.w	r2, #8960	; 0x2300
    3ad0:	d054      	beq.n	3b7c <Buffer::add(char)+0x138>
    checksum = (cb[0] == ';');
    3ad2:	2b3b      	cmp	r3, #59	; 0x3b
    3ad4:	bf0c      	ite	eq
    3ad6:	2301      	moveq	r3, #1
    3ad8:	2300      	movne	r3, #0
    3ada:	7023      	strb	r3, [r4, #0]
    if (checksum) {
    3adc:	d15d      	bne.n	3b9a <Buffer::add(char)+0x156>
      byte len = strlen(cb) - 1;
    3ade:	f104 0568 	add.w	r5, r4, #104	; 0x68
    3ae2:	4628      	mov	r0, r5
    3ae4:	f01c f94c 	bl	1fd80 <strlen>
    3ae8:	b2c7      	uxtb	r7, r0
    3aea:	1e7e      	subs	r6, r7, #1
    3aec:	b2f6      	uxtb	r6, r6
      if (len < 5) {
    3aee:	2e04      	cmp	r6, #4
    3af0:	d922      	bls.n	3b38 <Buffer::add(char)+0xf4>
      for (int cksCount0 = 1; cksCount0 < len - 3; cksCount0++) {  cks += cb[cksCount0]; }
    3af2:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3af6:	f1a6 0803 	sub.w	r8, r6, #3
    3afa:	4628      	mov	r0, r5
      byte cks = 0;
    3afc:	2200      	movs	r2, #0
    3afe:	4431      	add	r1, r6
      for (int cksCount0 = 1; cksCount0 < len - 3; cksCount0++) {  cks += cb[cksCount0]; }
    3b00:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    3b04:	441a      	add	r2, r3
    3b06:	4281      	cmp	r1, r0
    3b08:	b2d2      	uxtb	r2, r2
    3b0a:	d1f9      	bne.n	3b00 <Buffer::add(char)+0xbc>
      seq = cb[len - 1];
    3b0c:	4426      	add	r6, r4
      sprintf(chkSum, "%02X", cks);
    3b0e:	4926      	ldr	r1, [pc, #152]	; (3ba8 <Buffer::add(char)+0x164>)
    3b10:	a801      	add	r0, sp, #4
      if (!((chkSum[0] == cb[len - 3]) && (chkSum[1] == cb[len - 2]))) { 
    3b12:	44a0      	add	r8, r4
      sprintf(chkSum, "%02X", cks);
    3b14:	f01b f9ec 	bl	1eef0 <sprintf>
      seq = cb[len - 1];
    3b18:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
      if (!((chkSum[0] == cb[len - 3]) && (chkSum[1] == cb[len - 2]))) { 
    3b1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
      seq = cb[len - 1];
    3b20:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      if (!((chkSum[0] == cb[len - 3]) && (chkSum[1] == cb[len - 2]))) { 
    3b24:	f898 3068 	ldrb.w	r3, [r8, #104]	; 0x68
    3b28:	429a      	cmp	r2, r3
    3b2a:	d105      	bne.n	3b38 <Buffer::add(char)+0xf4>
    3b2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    3b30:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
    3b34:	429a      	cmp	r2, r3
    3b36:	d028      	beq.n	3b8a <Buffer::add(char)+0x146>
        cb[0] = ':'; cb[1] = (char)6; cb[2] = '0'; cb[3] = '#'; cb[4] = 0; cbp = 4; 
    3b38:	491c      	ldr	r1, [pc, #112]	; (3bac <Buffer::add(char)+0x168>)
    3b3a:	2200      	movs	r2, #0
    3b3c:	2304      	movs	r3, #4
        return true; 
    3b3e:	2001      	movs	r0, #1
        cb[0] = ':'; cb[1] = (char)6; cb[2] = '0'; cb[3] = '#'; cb[4] = 0; cbp = 4; 
    3b40:	66a1      	str	r1, [r4, #104]	; 0x68
    3b42:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
    3b46:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
}
    3b4a:	b004      	add	sp, #16
    3b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (c != (char)32 && c != (char)10 && c != (char)13 && c != (char)6) {
    3b50:	290d      	cmp	r1, #13
    3b52:	d083      	beq.n	3a5c <Buffer::add(char)+0x18>
  if (c == (char)6 && cbp == 0) {
    3b54:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    if (cbp > bufferSize-2) cbp = bufferSize - 2;
    3b58:	2b4e      	cmp	r3, #78	; 0x4e
    3b5a:	dd20      	ble.n	3b9e <Buffer::add(char)+0x15a>
    3b5c:	224f      	movs	r2, #79	; 0x4f
    3b5e:	234e      	movs	r3, #78	; 0x4e
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
    3b60:	4423      	add	r3, r4
    3b62:	18a0      	adds	r0, r4, r2
  if (c == '#') {
    3b64:	2923      	cmp	r1, #35	; 0x23
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
    3b66:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
    3b6a:	f04f 0300 	mov.w	r3, #0
    3b6e:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    3b72:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  if (c == '#') {
    3b76:	f47f af71 	bne.w	3a5c <Buffer::add(char)+0x18>
    3b7a:	e78b      	b.n	3a94 <Buffer::add(char)+0x50>
  if (cb[cbp-1] == '#' && cbp == 1) flush();
  return (cb[cbp-1] == '#');
}

bool Buffer::flush() {
  cbp = 0;
    3b7c:	2300      	movs	r3, #0
    if (!(cbp > 1) && ((cb[0] == ':') || (cb[0] == ';')) && (cb[cbp-1] == '#')) { flush(); return false; }
    3b7e:	4618      	mov	r0, r3
  cbp = 0;
    3b80:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  cb[0] = (char)0;
    3b84:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    if (!(cbp > 1) && ((cb[0] == ':') || (cb[0] == ';')) && (cb[cbp-1] == '#')) { flush(); return false; }
    3b88:	e769      	b.n	3a5e <Buffer::add(char)+0x1a>
      --len; --len; cb[--len] = 0;
    3b8a:	3f04      	subs	r7, #4
    3b8c:	2300      	movs	r3, #0
    return true;
    3b8e:	2001      	movs	r0, #1
      --len; --len; cb[--len] = 0;
    3b90:	fa54 f787 	uxtab	r7, r4, r7
    3b94:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
    3b98:	e761      	b.n	3a5e <Buffer::add(char)+0x1a>
    return true;
    3b9a:	2001      	movs	r0, #1
    3b9c:	e75f      	b.n	3a5e <Buffer::add(char)+0x1a>
    cb[cbp] = c; cbp++; cb[cbp] = (char)0;
    3b9e:	1c5a      	adds	r2, r3, #1
    3ba0:	e7de      	b.n	3b60 <Buffer::add(char)+0x11c>
    3ba2:	bf00      	nop
    3ba4:	00ffff00 	.word	0x00ffff00
    3ba8:	20002270 	.word	0x20002270
    3bac:	2330063a 	.word	0x2330063a

00003bb0 <Buffer::getCmd()>:
  memmove(cmd, (char *)&cb[1], 2);
    3bb0:	f8b0 1069 	ldrh.w	r1, [r0, #105]	; 0x69
  cmd[2] = 0;
    3bb4:	2200      	movs	r2, #0
  if (cmd[1] == '#' && cmd[2] == 0) cmd[1] = 0;
    3bb6:	4b05      	ldr	r3, [pc, #20]	; (3bcc <Buffer::getCmd()+0x1c>)
}
    3bb8:	3014      	adds	r0, #20
  memmove(cmd, (char *)&cb[1], 2);
    3bba:	8001      	strh	r1, [r0, #0]
  cmd[2] = 0;
    3bbc:	7082      	strb	r2, [r0, #2]
  if (cmd[1] == '#' && cmd[2] == 0) cmd[1] = 0;
    3bbe:	6801      	ldr	r1, [r0, #0]
    3bc0:	400b      	ands	r3, r1
    3bc2:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
    3bc6:	bf08      	it	eq
    3bc8:	7042      	strbeq	r2, [r0, #1]
}
    3bca:	4770      	bx	lr
    3bcc:	00ffff00 	.word	0x00ffff00

00003bd0 <Buffer::getParameter()>:
  if (cbp > 4) memmove(pb, (char *)&cb[3], cbp-4);
    3bd0:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
  pb[0] = 0;
    3bd4:	2300      	movs	r3, #0
  if (cbp > 4) memmove(pb, (char *)&cb[3], cbp-4);
    3bd6:	2a04      	cmp	r2, #4
char* Buffer::getParameter() {
    3bd8:	b510      	push	{r4, lr}
  pb[0] = 0;
    3bda:	7603      	strb	r3, [r0, #24]
char* Buffer::getParameter() {
    3bdc:	4604      	mov	r4, r0
  if (cbp > 4) memmove(pb, (char *)&cb[3], cbp-4);
    3bde:	f100 0318 	add.w	r3, r0, #24
    3be2:	dc04      	bgt.n	3bee <Buffer::getParameter()+0x1e>
  pb[cbp-4] = 0;
    3be4:	4414      	add	r4, r2
    3be6:	2200      	movs	r2, #0
}
    3be8:	4618      	mov	r0, r3
  pb[cbp-4] = 0;
    3bea:	7522      	strb	r2, [r4, #20]
}
    3bec:	bd10      	pop	{r4, pc}
  if (cbp > 4) memmove(pb, (char *)&cb[3], cbp-4);
    3bee:	f100 016b 	add.w	r1, r0, #107	; 0x6b
    3bf2:	3a04      	subs	r2, #4
    3bf4:	4618      	mov	r0, r3
    3bf6:	f01b fa7f 	bl	1f0f8 <memmove>
  pb[cbp-4] = 0;
    3bfa:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
  if (cbp > 4) memmove(pb, (char *)&cb[3], cbp-4);
    3bfe:	4603      	mov	r3, r0
  pb[cbp-4] = 0;
    3c00:	4414      	add	r4, r2
    3c02:	2200      	movs	r2, #0
}
    3c04:	4618      	mov	r0, r3
  pb[cbp-4] = 0;
    3c06:	7522      	strb	r2, [r4, #20]
}
    3c08:	bd10      	pop	{r4, pc}
    3c0a:	bf00      	nop

00003c0c <Buffer::getSeq()>:
  s[0] = seq;
    3c0c:	4b02      	ldr	r3, [pc, #8]	; (3c18 <Buffer::getSeq()+0xc>)
    3c0e:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
}
    3c12:	4618      	mov	r0, r3
  s[0] = seq;
    3c14:	701a      	strb	r2, [r3, #0]
}
    3c16:	4770      	bx	lr
    3c18:	20003e30 	.word	0x20003e30

00003c1c <Buffer::ready()>:
  if (!cbp) return false;
    3c1c:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    3c20:	b16a      	cbz	r2, 3c3e <Buffer::ready()+0x22>
  if (cb[cbp-1] == '#' && cbp == 1) flush();
    3c22:	1883      	adds	r3, r0, r2
    3c24:	2a01      	cmp	r2, #1
    3c26:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    3c2a:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    3c2e:	fab3 f383 	clz	r3, r3
    3c32:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3c36:	d100      	bne.n	3c3a <Buffer::ready()+0x1e>
    3c38:	b923      	cbnz	r3, 3c44 <Buffer::ready()+0x28>
}
    3c3a:	4618      	mov	r0, r3
    3c3c:	4770      	bx	lr
  if (!cbp) return false;
    3c3e:	4613      	mov	r3, r2
}
    3c40:	4618      	mov	r0, r3
    3c42:	4770      	bx	lr
  return (cb[cbp-1] == '#');
    3c44:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
  cbp = 0;
    3c48:	2200      	movs	r2, #0
  return (cb[cbp-1] == '#');
    3c4a:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
  cbp = 0;
    3c4e:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  cb[0] = (char)0;
    3c52:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  return (cb[cbp-1] == '#');
    3c56:	fab3 f383 	clz	r3, r3
    3c5a:	095b      	lsrs	r3, r3, #5
    3c5c:	e7ed      	b.n	3c3a <Buffer::ready()+0x1e>
    3c5e:	bf00      	nop

00003c60 <Buffer::flush()>:
bool Buffer::flush() {
    3c60:	4603      	mov	r3, r0
  cbp = 0;
    3c62:	2200      	movs	r2, #0
  return true;
}
    3c64:	2001      	movs	r0, #1
  cbp = 0;
    3c66:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  cb[0] = (char)0;
    3c6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
    3c6e:	4770      	bx	lr

00003c70 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    3c70:	2000      	movs	r0, #0
    3c72:	4770      	bx	lr

00003c74 <SerialWrapper::write(unsigned char const*, unsigned int)>:
  UNUSED(data);
  UNUSED(channel);
  return -1;
}

size_t SerialWrapper::write(const uint8_t *data, size_t quantity) {
    3c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t channel = 0;
  #ifdef SERIAL_A
    if (isChannel(channel++)) return SERIAL_A.write(data, quantity);
    3c76:	7b43      	ldrb	r3, [r0, #13]
size_t SerialWrapper::write(const uint8_t *data, size_t quantity) {
    3c78:	4617      	mov	r7, r2
    3c7a:	4608      	mov	r0, r1
    if (isChannel(channel++)) return SERIAL_A.write(data, quantity);
    3c7c:	b143      	cbz	r3, 3c90 <SerialWrapper::write(unsigned char const*, unsigned int)+0x1c>
  #endif
  #ifdef SERIAL_B
    if (isChannel(channel++)) return SERIAL_B.write(data, quantity);
    3c7e:	2b01      	cmp	r3, #1
    3c80:	d02d      	beq.n	3cde <SerialWrapper::write(unsigned char const*, unsigned int)+0x6a>
  #endif
  #ifdef SERIAL_C
    if (isChannel(channel++)) return SERIAL_C.write(data, quantity);
    3c82:	2b02      	cmp	r3, #2
    3c84:	d009      	beq.n	3c9a <SerialWrapper::write(unsigned char const*, unsigned int)+0x26>
  #endif
  #ifdef SERIAL_SIP
    if (isChannel(channel++)) return SERIAL_SIP.write(data, quantity);
  #endif
  #ifdef SERIAL_LOCAL
    if (isChannel(channel++)) return SERIAL_LOCAL.write(data, quantity);
    3c86:	2b03      	cmp	r3, #3
    3c88:	d00c      	beq.n	3ca4 <SerialWrapper::write(unsigned char const*, unsigned int)+0x30>
  #endif
  UNUSED(data);
  UNUSED(quantity);
  UNUSED(channel);
  return -1;
    3c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3c90:	4611      	mov	r1, r2
    3c92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3c96:	f016 b891 	b.w	19dbc <usb_serial_write>
    if (isChannel(channel++)) return SERIAL_C.write(data, quantity);
    3c9a:	4813      	ldr	r0, [pc, #76]	; (3ce8 <SerialWrapper::write(unsigned char const*, unsigned int)+0x74>)
}
    3c9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if (isChannel(channel++)) return SERIAL_C.write(data, quantity);
    3ca0:	f014 b83c 	b.w	17d1c <Print::write(unsigned char const*, unsigned int)>
      #endif
      return 1;
    }

    size_t write(const uint8_t* data, size_t count) {
      for (int i = 0; i < (int)count; i++) { if (!write(data[i])) return i; }
    3ca4:	2a00      	cmp	r2, #0
    3ca6:	dd18      	ble.n	3cda <SerialWrapper::write(unsigned char const*, unsigned int)+0x66>
    3ca8:	3a01      	subs	r2, #1
      xmit_buffer[xmit_tail] = data;
    3caa:	4c10      	ldr	r4, [pc, #64]	; (3cec <SerialWrapper::write(unsigned char const*, unsigned int)+0x78>)
    3cac:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    3cb0:	eb01 0c02 	add.w	ip, r1, r2
    3cb4:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    3cb8:	2200      	movs	r2, #0
      for (int i = 0; i < (int)count; i++) { if (!write(data[i])) return i; }
    3cba:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
      xmit_tail++;
    3cbe:	1c5d      	adds	r5, r3, #1
      xmit_buffer[xmit_tail] = data;
    3cc0:	4423      	add	r3, r4
      for (int i = 0; i < (int)count; i++) { if (!write(data[i])) return i; }
    3cc2:	45f4      	cmp	ip, lr
      xmit_buffer[xmit_tail] = data;
    3cc4:	f883 610f 	strb.w	r6, [r3, #271]	; 0x10f
      xmit_tail &= 0b1111111;
    3cc8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
      xmit_buffer[xmit_tail] = 0;
    3ccc:	eb04 0503 	add.w	r5, r4, r3
      xmit_tail &= 0b1111111;
    3cd0:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    3cd4:	f885 210f 	strb.w	r2, [r5, #271]	; 0x10f
      for (int i = 0; i < (int)count; i++) { if (!write(data[i])) return i; }
    3cd8:	d1ef      	bne.n	3cba <SerialWrapper::write(unsigned char const*, unsigned int)+0x46>
size_t SerialWrapper::write(const uint8_t *data, size_t quantity) {
    3cda:	4638      	mov	r0, r7
}
    3cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isChannel(channel++)) return SERIAL_B.write(data, quantity);
    3cde:	4804      	ldr	r0, [pc, #16]	; (3cf0 <SerialWrapper::write(unsigned char const*, unsigned int)+0x7c>)
}
    3ce0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if (isChannel(channel++)) return SERIAL_B.write(data, quantity);
    3ce4:	f014 b81a 	b.w	17d1c <Print::write(unsigned char const*, unsigned int)>
    3ce8:	20003738 	.word	0x20003738
    3cec:	20004678 	.word	0x20004678
    3cf0:	200037f8 	.word	0x200037f8

00003cf4 <SerialWrapper::SerialWrapper()>:
SerialWrapper::SerialWrapper() {
    3cf4:	4a20      	ldr	r2, [pc, #128]	; (3d78 <SerialWrapper::SerialWrapper()+0x84>)
	constexpr Print() : write_error(0) {}
    3cf6:	2300      	movs	r3, #0
    3cf8:	b430      	push	{r4, r5}
    3cfa:	6002      	str	r2, [r0, #0]
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d00:	4c1e      	ldr	r4, [pc, #120]	; (3d7c <SerialWrapper::SerialWrapper()+0x88>)
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }

    inline bool hasChannel(uint8_t channel) { return bitRead(_wrapper_channels, channel); }
    3d02:	4d1f      	ldr	r5, [pc, #124]	; (3d80 <SerialWrapper::SerialWrapper()+0x8c>)
    3d04:	6043      	str	r3, [r0, #4]
    3d06:	8183      	strh	r3, [r0, #12]
    3d08:	6082      	str	r2, [r0, #8]
    3d0a:	7823      	ldrb	r3, [r4, #0]
    3d0c:	782a      	ldrb	r2, [r5, #0]
    3d0e:	fa42 f103 	asr.w	r1, r2, r3
    3d12:	07c9      	lsls	r1, r1, #31
    3d14:	d522      	bpl.n	3d5c <SerialWrapper::SerialWrapper()+0x68>
    channel++;
    3d16:	1c59      	adds	r1, r3, #1
    3d18:	b2c9      	uxtb	r1, r1
    3d1a:	fa42 fc01 	asr.w	ip, r2, r1
    3d1e:	7021      	strb	r1, [r4, #0]
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d20:	f01c 0f01 	tst.w	ip, #1
    3d24:	d013      	beq.n	3d4e <SerialWrapper::SerialWrapper()+0x5a>
    channel++;
    3d26:	1c99      	adds	r1, r3, #2
    3d28:	b2c9      	uxtb	r1, r1
    3d2a:	fa42 fc01 	asr.w	ip, r2, r1
    3d2e:	7021      	strb	r1, [r4, #0]
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d30:	f01c 0f01 	tst.w	ip, #1
    3d34:	d00b      	beq.n	3d4e <SerialWrapper::SerialWrapper()+0x5a>
    channel++;
    3d36:	1cd9      	adds	r1, r3, #3
    3d38:	b2c9      	uxtb	r1, r1
    3d3a:	fa42 fc01 	asr.w	ip, r2, r1
    3d3e:	7021      	strb	r1, [r4, #0]
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d40:	f01c 0f01 	tst.w	ip, #1
    3d44:	d012      	beq.n	3d6c <SerialWrapper::SerialWrapper()+0x78>
    channel++;
    3d46:	3304      	adds	r3, #4
    3d48:	7023      	strb	r3, [r4, #0]
}
    3d4a:	bc30      	pop	{r4, r5}
    3d4c:	4770      	bx	lr
    inline void setChannel(uint8_t channel) { bitSet(_wrapper_channels, channel); }
    3d4e:	2301      	movs	r3, #1
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d50:	7341      	strb	r1, [r0, #13]
    3d52:	408b      	lsls	r3, r1
    3d54:	4313      	orrs	r3, r2
    3d56:	702b      	strb	r3, [r5, #0]
}
    3d58:	bc30      	pop	{r4, r5}
    3d5a:	4770      	bx	lr
    3d5c:	2101      	movs	r1, #1
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d5e:	7343      	strb	r3, [r0, #13]
    3d60:	fa01 f303 	lsl.w	r3, r1, r3
    3d64:	4313      	orrs	r3, r2
    3d66:	702b      	strb	r3, [r5, #0]
}
    3d68:	bc30      	pop	{r4, r5}
    3d6a:	4770      	bx	lr
    3d6c:	2301      	movs	r3, #1
    if (!hasChannel(channel)) { thisChannel = channel; setChannel(channel); return; }
    3d6e:	7341      	strb	r1, [r0, #13]
    3d70:	408b      	lsls	r3, r1
    3d72:	431a      	orrs	r2, r3
    3d74:	702a      	strb	r2, [r5, #0]
    3d76:	e7ef      	b.n	3d58 <SerialWrapper::SerialWrapper()+0x64>
    3d78:	20002468 	.word	0x20002468
    3d7c:	20006aa4 	.word	0x20006aa4
    3d80:	20006a9c 	.word	0x20006a9c

00003d84 <SerialWrapper::begin(long)>:
void SerialWrapper::begin(long baud) {
    3d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (isChannel(channel++))
    3d88:	7b43      	ldrb	r3, [r0, #13]
void SerialWrapper::begin(long baud) {
    3d8a:	4606      	mov	r6, r0
    3d8c:	4688      	mov	r8, r1
    if (isChannel(channel++))
    3d8e:	b13b      	cbz	r3, 3da0 <SerialWrapper::begin(long)+0x1c>
    if (isChannel(channel++))
    3d90:	2b01      	cmp	r3, #1
    3d92:	d01f      	beq.n	3dd4 <SerialWrapper::begin(long)+0x50>
    if (isChannel(channel++))
    3d94:	2b02      	cmp	r3, #2
    3d96:	d025      	beq.n	3de4 <SerialWrapper::begin(long)+0x60>
    if (isChannel(channel++)) SERIAL_LOCAL.begin(baud);
    3d98:	2b03      	cmp	r3, #3
    3d9a:	d02b      	beq.n	3df4 <SerialWrapper::begin(long)+0x70>
}
    3d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t millis_begin = systick_millis_count;
    3da0:	4d1e      	ldr	r5, [pc, #120]	; (3e1c <SerialWrapper::begin(long)+0x98>)
				if (elapsed > 750) break;
    3da2:	f240 2aee 	movw	sl, #750	; 0x2ee
    3da6:	4c1e      	ldr	r4, [pc, #120]	; (3e20 <SerialWrapper::begin(long)+0x9c>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    3da8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3e30 <SerialWrapper::begin(long)+0xac>
		uint32_t millis_begin = systick_millis_count;
    3dac:	682f      	ldr	r7, [r5, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    3dae:	f8df b084 	ldr.w	fp, [pc, #132]	; 3e34 <SerialWrapper::begin(long)+0xb0>
		yield();
    3db2:	f016 f881 	bl	19eb8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    3db6:	7823      	ldrb	r3, [r4, #0]
    3db8:	b313      	cbz	r3, 3e00 <SerialWrapper::begin(long)+0x7c>
    3dba:	f899 3000 	ldrb.w	r3, [r9]
    3dbe:	07db      	lsls	r3, r3, #31
    3dc0:	d51e      	bpl.n	3e00 <SerialWrapper::begin(long)+0x7c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    3dc2:	682b      	ldr	r3, [r5, #0]
    3dc4:	f8db 2000 	ldr.w	r2, [fp]
    3dc8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    3dca:	2b0e      	cmp	r3, #14
    3dcc:	d918      	bls.n	3e00 <SerialWrapper::begin(long)+0x7c>
    if (isChannel(channel++))
    3dce:	7b73      	ldrb	r3, [r6, #13]
    3dd0:	2b01      	cmp	r3, #1
    3dd2:	d1df      	bne.n	3d94 <SerialWrapper::begin(long)+0x10>
        SERIAL_B.begin(baud);
    3dd4:	2200      	movs	r2, #0
    3dd6:	4641      	mov	r1, r8
    3dd8:	4812      	ldr	r0, [pc, #72]	; (3e24 <SerialWrapper::begin(long)+0xa0>)
    3dda:	f013 fbdf 	bl	1759c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
    if (isChannel(channel++))
    3dde:	7b73      	ldrb	r3, [r6, #13]
    3de0:	2b02      	cmp	r3, #2
    3de2:	d1d9      	bne.n	3d98 <SerialWrapper::begin(long)+0x14>
        SERIAL_C.begin(baud);
    3de4:	2200      	movs	r2, #0
    3de6:	4641      	mov	r1, r8
    3de8:	480f      	ldr	r0, [pc, #60]	; (3e28 <SerialWrapper::begin(long)+0xa4>)
    3dea:	f013 fbd7 	bl	1759c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
    if (isChannel(channel++)) SERIAL_LOCAL.begin(baud);
    3dee:	7b73      	ldrb	r3, [r6, #13]
    3df0:	2b03      	cmp	r3, #3
    3df2:	d1d3      	bne.n	3d9c <SerialWrapper::begin(long)+0x18>
    3df4:	4641      	mov	r1, r8
    3df6:	480d      	ldr	r0, [pc, #52]	; (3e2c <SerialWrapper::begin(long)+0xa8>)
}
    3df8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (isChannel(channel++)) SERIAL_LOCAL.begin(baud);
    3dfc:	f001 bc2e 	b.w	565c <SerialLocal::begin(long)>
			uint32_t elapsed = systick_millis_count - millis_begin;
    3e00:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    3e02:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    3e04:	1bdb      	subs	r3, r3, r7
			if (usb_configuration) {
    3e06:	b12a      	cbz	r2, 3e14 <SerialWrapper::begin(long)+0x90>
				if (elapsed > 2000) break;
    3e08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    3e0c:	d8df      	bhi.n	3dce <SerialWrapper::begin(long)+0x4a>
			yield();
    3e0e:	f016 f853 	bl	19eb8 <yield>
    3e12:	e7ce      	b.n	3db2 <SerialWrapper::begin(long)+0x2e>
				if (elapsed > 750) break;
    3e14:	4553      	cmp	r3, sl
    3e16:	d9fa      	bls.n	3e0e <SerialWrapper::begin(long)+0x8a>
    3e18:	e7d9      	b.n	3dce <SerialWrapper::begin(long)+0x4a>
    3e1a:	bf00      	nop
    3e1c:	20006344 	.word	0x20006344
    3e20:	20006ab7 	.word	0x20006ab7
    3e24:	200037f8 	.word	0x200037f8
    3e28:	20003738 	.word	0x20003738
    3e2c:	20004678 	.word	0x20004678
    3e30:	20006ab6 	.word	0x20006ab6
    3e34:	20006a7c 	.word	0x20006a7c

00003e38 <SerialWrapper::end()>:
void SerialWrapper::end() {
    3e38:	b510      	push	{r4, lr}
    if (isChannel(channel++)) SERIAL_A.end();
    3e3a:	7b43      	ldrb	r3, [r0, #13]
void SerialWrapper::end() {
    3e3c:	4604      	mov	r4, r0
    if (isChannel(channel++)) SERIAL_B.end();
    3e3e:	2b01      	cmp	r3, #1
    3e40:	d004      	beq.n	3e4c <SerialWrapper::end()+0x14>
    if (isChannel(channel++)) SERIAL_C.end();
    3e42:	2b02      	cmp	r3, #2
    3e44:	d008      	beq.n	3e58 <SerialWrapper::end()+0x20>
    if (isChannel(channel++)) SERIAL_LOCAL.end();
    3e46:	2b03      	cmp	r3, #3
    3e48:	d00c      	beq.n	3e64 <SerialWrapper::end()+0x2c>
}
    3e4a:	bd10      	pop	{r4, pc}
    if (isChannel(channel++)) SERIAL_B.end();
    3e4c:	4808      	ldr	r0, [pc, #32]	; (3e70 <SerialWrapper::end()+0x38>)
    3e4e:	f013 fb71 	bl	17534 <HardwareSerialIMXRT::end()>
    if (isChannel(channel++)) SERIAL_C.end();
    3e52:	7b63      	ldrb	r3, [r4, #13]
    3e54:	2b02      	cmp	r3, #2
    3e56:	d1f6      	bne.n	3e46 <SerialWrapper::end()+0xe>
    3e58:	4806      	ldr	r0, [pc, #24]	; (3e74 <SerialWrapper::end()+0x3c>)
    3e5a:	f013 fb6b 	bl	17534 <HardwareSerialIMXRT::end()>
    if (isChannel(channel++)) SERIAL_LOCAL.end();
    3e5e:	7b63      	ldrb	r3, [r4, #13]
    3e60:	2b03      	cmp	r3, #3
    3e62:	d1f2      	bne.n	3e4a <SerialWrapper::end()+0x12>
    3e64:	4804      	ldr	r0, [pc, #16]	; (3e78 <SerialWrapper::end()+0x40>)
}
    3e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isChannel(channel++)) SERIAL_LOCAL.end();
    3e6a:	f001 bc01 	b.w	5670 <SerialLocal::end()>
    3e6e:	bf00      	nop
    3e70:	200037f8 	.word	0x200037f8
    3e74:	20003738 	.word	0x20003738
    3e78:	20004678 	.word	0x20004678

00003e7c <SerialWrapper::write(unsigned char)>:
    if (isChannel(channel++)) return SERIAL_A.write(data);
    3e7c:	7b43      	ldrb	r3, [r0, #13]
size_t SerialWrapper::write(uint8_t data) {
    3e7e:	460a      	mov	r2, r1
    if (isChannel(channel++)) return SERIAL_A.write(data);
    3e80:	b1d3      	cbz	r3, 3eb8 <SerialWrapper::write(unsigned char)+0x3c>
    if (isChannel(channel++)) return SERIAL_B.write(data);
    3e82:	2b01      	cmp	r3, #1
    3e84:	d021      	beq.n	3eca <SerialWrapper::write(unsigned char)+0x4e>
    if (isChannel(channel++)) return SERIAL_C.write(data);
    3e86:	2b02      	cmp	r3, #2
    3e88:	d01c      	beq.n	3ec4 <SerialWrapper::write(unsigned char)+0x48>
    if (isChannel(channel++)) return SERIAL_LOCAL.write(data);
    3e8a:	2b03      	cmp	r3, #3
    3e8c:	d117      	bne.n	3ebe <SerialWrapper::write(unsigned char)+0x42>
      xmit_buffer[xmit_tail] = data;
    3e8e:	4b10      	ldr	r3, [pc, #64]	; (3ed0 <SerialWrapper::write(unsigned char)+0x54>)
      xmit_buffer[xmit_tail] = 0;
    3e90:	2001      	movs	r0, #1
size_t SerialWrapper::write(uint8_t data) {
    3e92:	b500      	push	{lr}
      xmit_buffer[xmit_tail] = data;
    3e94:	f893 c210 	ldrb.w	ip, [r3, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    3e98:	f04f 0e00 	mov.w	lr, #0
      xmit_tail++;
    3e9c:	eb0c 0100 	add.w	r1, ip, r0
      xmit_buffer[xmit_tail] = data;
    3ea0:	449c      	add	ip, r3
    3ea2:	f88c 210f 	strb.w	r2, [ip, #271]	; 0x10f
      xmit_tail &= 0b1111111;
    3ea6:	f001 027f 	and.w	r2, r1, #127	; 0x7f
      xmit_buffer[xmit_tail] = 0;
    3eaa:	1899      	adds	r1, r3, r2
      xmit_tail &= 0b1111111;
    3eac:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    3eb0:	f881 e10f 	strb.w	lr, [r1, #271]	; 0x10f
}
    3eb4:	f85d fb04 	ldr.w	pc, [sp], #4
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3eb8:	4608      	mov	r0, r1
    3eba:	f015 bf69 	b.w	19d90 <usb_serial_putchar>
  return -1;
    3ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3ec2:	4770      	bx	lr
    if (isChannel(channel++)) return SERIAL_C.write(data);
    3ec4:	4803      	ldr	r0, [pc, #12]	; (3ed4 <SerialWrapper::write(unsigned char)+0x58>)
    3ec6:	f013 bd45 	b.w	17954 <HardwareSerialIMXRT::write(unsigned char)>
    if (isChannel(channel++)) return SERIAL_B.write(data);
    3eca:	4803      	ldr	r0, [pc, #12]	; (3ed8 <SerialWrapper::write(unsigned char)+0x5c>)
    3ecc:	f013 bd42 	b.w	17954 <HardwareSerialIMXRT::write(unsigned char)>
    3ed0:	20004678 	.word	0x20004678
    3ed4:	20003738 	.word	0x20003738
    3ed8:	200037f8 	.word	0x200037f8

00003edc <SerialWrapper::available()>:

int SerialWrapper::available() {
  uint8_t channel = 0;
  #ifdef SERIAL_A
    if (isChannel(channel++)) return SERIAL_A.available();
    3edc:	7b43      	ldrb	r3, [r0, #13]
    3ede:	b13b      	cbz	r3, 3ef0 <SerialWrapper::available()+0x14>
  #endif
  #ifdef SERIAL_B
    if (isChannel(channel++)) return SERIAL_B.available();
    3ee0:	2b01      	cmp	r3, #1
    3ee2:	d028      	beq.n	3f36 <SerialWrapper::available()+0x5a>
  #endif
  #ifdef SERIAL_C
    if (isChannel(channel++)) return SERIAL_C.available();
    3ee4:	2b02      	cmp	r3, #2
    3ee6:	d005      	beq.n	3ef4 <SerialWrapper::available()+0x18>
  #endif
  #ifdef SERIAL_SIP
    if (isChannel(channel++)) return SERIAL_SIP.available();
  #endif
  #ifdef SERIAL_LOCAL
    if (isChannel(channel++)) return SERIAL_LOCAL.available();
    3ee8:	2b03      	cmp	r3, #3
    3eea:	d006      	beq.n	3efa <SerialWrapper::available()+0x1e>
  #endif
  UNUSED(channel);
  return 0;
    3eec:	2000      	movs	r0, #0
}
    3eee:	4770      	bx	lr
        virtual int available() { return usb_serial_available(); }
    3ef0:	f015 befa 	b.w	19ce8 <usb_serial_available>
    if (isChannel(channel++)) return SERIAL_C.available();
    3ef4:	4811      	ldr	r0, [pc, #68]	; (3f3c <SerialWrapper::available()+0x60>)
    3ef6:	f013 ba73 	b.w	173e0 <HardwareSerialIMXRT::available()>
      uint8_t p = recv_head;
    3efa:	4911      	ldr	r1, [pc, #68]	; (3f40 <SerialWrapper::available()+0x64>)
    3efc:	f891 c10d 	ldrb.w	ip, [r1, #269]	; 0x10d
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    3f00:	eb01 030c 	add.w	r3, r1, ip
    3f04:	7b58      	ldrb	r0, [r3, #13]
    3f06:	2800      	cmp	r0, #0
    3f08:	d0f1      	beq.n	3eee <SerialWrapper::available()+0x12>
    3f0a:	f891 210e 	ldrb.w	r2, [r1, #270]	; 0x10e
      uint8_t c = 0;
    3f0e:	2000      	movs	r0, #0
    3f10:	eba2 020c 	sub.w	r2, r2, ip
    3f14:	b2d2      	uxtb	r2, r2
    3f16:	e007      	b.n	3f28 <SerialWrapper::available()+0x4c>
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    3f18:	b2d8      	uxtb	r0, r3
    3f1a:	eb0c 0300 	add.w	r3, ip, r0
    3f1e:	fa51 f383 	uxtab	r3, r1, r3
    3f22:	7b5b      	ldrb	r3, [r3, #13]
    3f24:	2b00      	cmp	r3, #0
    3f26:	d0e2      	beq.n	3eee <SerialWrapper::available()+0x12>
    3f28:	4290      	cmp	r0, r2
    3f2a:	f100 0301 	add.w	r3, r0, #1
    3f2e:	d0de      	beq.n	3eee <SerialWrapper::available()+0x12>
    3f30:	28ff      	cmp	r0, #255	; 0xff
    3f32:	d1f1      	bne.n	3f18 <SerialWrapper::available()+0x3c>
    3f34:	4770      	bx	lr
    if (isChannel(channel++)) return SERIAL_B.available();
    3f36:	4803      	ldr	r0, [pc, #12]	; (3f44 <SerialWrapper::available()+0x68>)
    3f38:	f013 ba52 	b.w	173e0 <HardwareSerialIMXRT::available()>
    3f3c:	20003738 	.word	0x20003738
    3f40:	20004678 	.word	0x20004678
    3f44:	200037f8 	.word	0x200037f8

00003f48 <SerialWrapper::read()>:

int SerialWrapper::read() {
  uint8_t channel = 0;
  #ifdef SERIAL_A
    if (isChannel(channel++)) return SERIAL_A.read();
    3f48:	7b43      	ldrb	r3, [r0, #13]
    3f4a:	b143      	cbz	r3, 3f5e <SerialWrapper::read()+0x16>
  #endif
  #ifdef SERIAL_B
    if (isChannel(channel++)) return SERIAL_B.read();
    3f4c:	2b01      	cmp	r3, #1
    3f4e:	d00b      	beq.n	3f68 <SerialWrapper::read()+0x20>
  #endif
  #ifdef SERIAL_C
    if (isChannel(channel++)) return SERIAL_C.read();
    3f50:	2b02      	cmp	r3, #2
    3f52:	d006      	beq.n	3f62 <SerialWrapper::read()+0x1a>
  #endif
  #ifdef SERIAL_SIP
    if (isChannel(channel++)) return SERIAL_SIP.read();
  #endif
  #ifdef SERIAL_LOCAL
    if (isChannel(channel++)) return SERIAL_LOCAL.read();
    3f54:	2b03      	cmp	r3, #3
    3f56:	d10a      	bne.n	3f6e <SerialWrapper::read()+0x26>
    3f58:	4806      	ldr	r0, [pc, #24]	; (3f74 <SerialWrapper::read()+0x2c>)
    3f5a:	f001 bb47 	b.w	55ec <SerialLocal::read()>
        virtual int read() { return usb_serial_getchar(); }
    3f5e:	f015 bf07 	b.w	19d70 <usb_serial_getchar>
    if (isChannel(channel++)) return SERIAL_C.read();
    3f62:	4805      	ldr	r0, [pc, #20]	; (3f78 <SerialWrapper::read()+0x30>)
    3f64:	f013 ba8e 	b.w	17484 <HardwareSerialIMXRT::read()>
    if (isChannel(channel++)) return SERIAL_B.read();
    3f68:	4804      	ldr	r0, [pc, #16]	; (3f7c <SerialWrapper::read()+0x34>)
    3f6a:	f013 ba8b 	b.w	17484 <HardwareSerialIMXRT::read()>
  #endif
  UNUSED(channel);
  return -1;
}
    3f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f72:	4770      	bx	lr
    3f74:	20004678 	.word	0x20004678
    3f78:	20003738 	.word	0x20003738
    3f7c:	200037f8 	.word	0x200037f8

00003f80 <SerialWrapper::peek()>:

int SerialWrapper::peek() {
  uint8_t channel = 0;
  #ifdef SERIAL_A
    if (isChannel(channel++)) return SERIAL_A.peek();
    3f80:	7b43      	ldrb	r3, [r0, #13]
    3f82:	b333      	cbz	r3, 3fd2 <SerialWrapper::peek()+0x52>
  #endif
  #ifdef SERIAL_B
    if (isChannel(channel++)) return SERIAL_B.peek();
    3f84:	2b01      	cmp	r3, #1
    3f86:	d029      	beq.n	3fdc <SerialWrapper::peek()+0x5c>
  #endif
  #ifdef SERIAL_C
    if (isChannel(channel++)) return SERIAL_C.peek();
    3f88:	2b02      	cmp	r3, #2
    3f8a:	d024      	beq.n	3fd6 <SerialWrapper::peek()+0x56>
  #endif
  #ifdef SERIAL_SIP
    if (isChannel(channel++)) return SERIAL_SIP.peek();
  #endif
  #ifdef SERIAL_LOCAL
    if (isChannel(channel++)) return SERIAL_LOCAL.peek();
    3f8c:	2b03      	cmp	r3, #3
    3f8e:	d12b      	bne.n	3fe8 <SerialWrapper::peek()+0x68>
int SerialWrapper::peek() {
    3f90:	b510      	push	{r4, lr}
      uint8_t p = recv_head;
    3f92:	4c17      	ldr	r4, [pc, #92]	; (3ff0 <SerialWrapper::peek()+0x70>)
    3f94:	f894 c10d 	ldrb.w	ip, [r4, #269]	; 0x10d
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    3f98:	eb04 030c 	add.w	r3, r4, ip
    3f9c:	7b58      	ldrb	r0, [r3, #13]
    3f9e:	b300      	cbz	r0, 3fe2 <SerialWrapper::peek()+0x62>
    3fa0:	f894 e10e 	ldrb.w	lr, [r4, #270]	; 0x10e
    3fa4:	2300      	movs	r3, #0
    3fa6:	ebae 0e0c 	sub.w	lr, lr, ip
    3faa:	f10c 0c01 	add.w	ip, ip, #1
    3fae:	fa5f fe8e 	uxtb.w	lr, lr
    3fb2:	e007      	b.n	3fc4 <SerialWrapper::peek()+0x44>
    3fb4:	2bff      	cmp	r3, #255	; 0xff
    3fb6:	fa54 f282 	uxtab	r2, r4, r2
    3fba:	f103 0301 	add.w	r3, r3, #1
    3fbe:	d007      	beq.n	3fd0 <SerialWrapper::peek()+0x50>
    3fc0:	7b52      	ldrb	r2, [r2, #13]
    3fc2:	b12a      	cbz	r2, 3fd0 <SerialWrapper::peek()+0x50>
    3fc4:	b2d9      	uxtb	r1, r3
    3fc6:	459e      	cmp	lr, r3
    3fc8:	eb01 020c 	add.w	r2, r1, ip
    3fcc:	d1f2      	bne.n	3fb4 <SerialWrapper::peek()+0x34>
      if (!available()) return -1;
    3fce:	b141      	cbz	r1, 3fe2 <SerialWrapper::peek()+0x62>
  #endif
  UNUSED(channel);
  return -1;
}
    3fd0:	bd10      	pop	{r4, pc}
        virtual int peek() { return usb_serial_peekchar(); }
    3fd2:	f015 be67 	b.w	19ca4 <usb_serial_peekchar>
    if (isChannel(channel++)) return SERIAL_C.peek();
    3fd6:	4807      	ldr	r0, [pc, #28]	; (3ff4 <SerialWrapper::peek()+0x74>)
    3fd8:	f013 ba16 	b.w	17408 <HardwareSerialIMXRT::peek()>
    if (isChannel(channel++)) return SERIAL_B.peek();
    3fdc:	4806      	ldr	r0, [pc, #24]	; (3ff8 <SerialWrapper::peek()+0x78>)
    3fde:	f013 ba13 	b.w	17408 <HardwareSerialIMXRT::peek()>
  return -1;
    3fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3fe6:	bd10      	pop	{r4, pc}
  return -1;
    3fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop
    3ff0:	20004678 	.word	0x20004678
    3ff4:	20003738 	.word	0x20003738
    3ff8:	200037f8 	.word	0x200037f8

00003ffc <SerialWrapper::flush()>:

void SerialWrapper::flush() {
    3ffc:	b510      	push	{r4, lr}
  uint8_t channel = 0;
  #ifdef SERIAL_A
    if (isChannel(channel++)) SERIAL_A.flush();
    3ffe:	7b43      	ldrb	r3, [r0, #13]
void SerialWrapper::flush() {
    4000:	4604      	mov	r4, r0
    if (isChannel(channel++)) SERIAL_A.flush();
    4002:	b123      	cbz	r3, 400e <SerialWrapper::flush()+0x12>
  #endif
  #ifdef SERIAL_B
    if (isChannel(channel++)) SERIAL_B.flush();
    4004:	2b01      	cmp	r3, #1
    4006:	d007      	beq.n	4018 <SerialWrapper::flush()+0x1c>
  #endif
  #ifdef SERIAL_C
    if (isChannel(channel++)) SERIAL_C.flush();
    4008:	2b02      	cmp	r3, #2
    400a:	d00b      	beq.n	4024 <SerialWrapper::flush()+0x28>
  #endif
  #ifdef SERIAL_LOCAL
    if (isChannel(channel++)) SERIAL_LOCAL.flush();
  #endif
  UNUSED(channel);
}
    400c:	bd10      	pop	{r4, pc}
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    400e:	f015 ff09 	bl	19e24 <usb_serial_flush_output>
    if (isChannel(channel++)) SERIAL_B.flush();
    4012:	7b63      	ldrb	r3, [r4, #13]
    4014:	2b01      	cmp	r3, #1
    4016:	d1f7      	bne.n	4008 <SerialWrapper::flush()+0xc>
    4018:	4805      	ldr	r0, [pc, #20]	; (4030 <SerialWrapper::flush()+0x34>)
    401a:	f013 fa7d 	bl	17518 <HardwareSerialIMXRT::flush()>
    if (isChannel(channel++)) SERIAL_C.flush();
    401e:	7b63      	ldrb	r3, [r4, #13]
    4020:	2b02      	cmp	r3, #2
    4022:	d1f3      	bne.n	400c <SerialWrapper::flush()+0x10>
    4024:	4803      	ldr	r0, [pc, #12]	; (4034 <SerialWrapper::flush()+0x38>)
}
    4026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isChannel(channel++)) SERIAL_C.flush();
    402a:	f013 ba75 	b.w	17518 <HardwareSerialIMXRT::flush()>
    402e:	bf00      	nop
    4030:	200037f8 	.word	0x200037f8
    4034:	20003738 	.word	0x20003738

00004038 <sprintF(char*, char const*, double)>:
#if defined(ARDUINO_ARDUINO_NANO33BLE) || defined(ARDUINO_ARCH_SAMD) || defined(ARDUINO_ARCH_MBED_RP2040) || defined(ARDUINO_ARCH_RP2040)
  void sprintF(char *result, const char *source, double f) {
    sprintf(result, source, f);
  }
#else
  void sprintF(char *result, const char *source, double f) {
    4038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    403c:	ed2d 8b02 	vpush	{d8}
    4040:	eeb0 8b40 	vmov.f64	d8, d0
    4044:	b087      	sub	sp, #28
    4046:	4606      	mov	r6, r0
    4048:	460d      	mov	r5, r1
    bool ok = false;
    uint8_t mas = 0, frac = 0, len = 0;
    char* a;
    do {
      a = (char*)strchr(source, '%');
    404a:	2125      	movs	r1, #37	; 0x25
    404c:	4628      	mov	r0, r5
    404e:	f01b f941 	bl	1f2d4 <strchr>
    4052:	4604      	mov	r4, r0
      if (a == NULL) return;
    4054:	2c00      	cmp	r4, #0
    4056:	d064      	beq.n	4122 <sprintF(char*, char const*, double)+0xea>
      // "%f" form
      if (a[1] == 'f') { len = 2; ok = true; break; }
    4058:	7863      	ldrb	r3, [r4, #1]
      // "%.2f" form
      if (a[1] == '.' && a[2] >= '0' && a[2] <= '9' && a[3] == 'f') { frac = a[2] - '0'; len = 4; ok = true; break; }
      // "%1.2f" form
      if (a[1] >= '0' && a[1] <= '9' && a[2] == '.' && a[3] >= '0' && a[3] <= '9' && a[4] == 'f') {
    405a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
      if (a[1] == 'f') { len = 2; ok = true; break; }
    405e:	2b66      	cmp	r3, #102	; 0x66
      if (a[1] >= '0' && a[1] <= '9' && a[2] == '.' && a[3] >= '0' && a[3] <= '9' && a[4] == 'f') {
    4060:	b2d2      	uxtb	r2, r2
      if (a[1] == 'f') { len = 2; ok = true; break; }
    4062:	d021      	beq.n	40a8 <sprintF(char*, char const*, double)+0x70>
      if (a[1] == '.' && a[2] >= '0' && a[2] <= '9' && a[3] == 'f') { frac = a[2] - '0'; len = 4; ok = true; break; }
    4064:	2b2e      	cmp	r3, #46	; 0x2e
    4066:	d012      	beq.n	408e <sprintF(char*, char const*, double)+0x56>
      if (a[1] >= '0' && a[1] <= '9' && a[2] == '.' && a[3] >= '0' && a[3] <= '9' && a[4] == 'f') {
    4068:	2a09      	cmp	r2, #9
    406a:	d8f3      	bhi.n	4054 <sprintF(char*, char const*, double)+0x1c>
    406c:	78a3      	ldrb	r3, [r4, #2]
    406e:	2b2e      	cmp	r3, #46	; 0x2e
    4070:	d1f0      	bne.n	4054 <sprintF(char*, char const*, double)+0x1c>
    4072:	78e3      	ldrb	r3, [r4, #3]
    4074:	2b2f      	cmp	r3, #47	; 0x2f
    4076:	d9ed      	bls.n	4054 <sprintF(char*, char const*, double)+0x1c>
    4078:	2b39      	cmp	r3, #57	; 0x39
    407a:	d8eb      	bhi.n	4054 <sprintF(char*, char const*, double)+0x1c>
    407c:	7921      	ldrb	r1, [r4, #4]
    407e:	2966      	cmp	r1, #102	; 0x66
    4080:	d1e3      	bne.n	404a <sprintF(char*, char const*, double)+0x12>
        mas = a[1] - '0';
        frac = a[3] - '0';
    4082:	3b30      	subs	r3, #48	; 0x30
        break;
      }
    } while (!ok);

    char s[20];
    dtostrf(f, mas, frac, s);
    4084:	4610      	mov	r0, r2
        len = 5;
    4086:	f04f 0805 	mov.w	r8, #5
    dtostrf(f, mas, frac, s);
    408a:	b2d9      	uxtb	r1, r3
        break;
    408c:	e010      	b.n	40b0 <sprintF(char*, char const*, double)+0x78>
      if (a[1] == '.' && a[2] >= '0' && a[2] <= '9' && a[3] == 'f') { frac = a[2] - '0'; len = 4; ok = true; break; }
    408e:	78a3      	ldrb	r3, [r4, #2]
    4090:	3b30      	subs	r3, #48	; 0x30
    4092:	b2db      	uxtb	r3, r3
    4094:	2b09      	cmp	r3, #9
    4096:	d8dd      	bhi.n	4054 <sprintF(char*, char const*, double)+0x1c>
    4098:	78e2      	ldrb	r2, [r4, #3]
    409a:	2a66      	cmp	r2, #102	; 0x66
    409c:	d1da      	bne.n	4054 <sprintF(char*, char const*, double)+0x1c>
    dtostrf(f, mas, frac, s);
    409e:	4619      	mov	r1, r3
    40a0:	2000      	movs	r0, #0
      if (a[1] == '.' && a[2] >= '0' && a[2] <= '9' && a[3] == 'f') { frac = a[2] - '0'; len = 4; ok = true; break; }
    40a2:	f04f 0804 	mov.w	r8, #4
    40a6:	e003      	b.n	40b0 <sprintF(char*, char const*, double)+0x78>
    40a8:	2100      	movs	r1, #0
      if (a[1] == 'f') { len = 2; ok = true; break; }
    40aa:	f04f 0802 	mov.w	r8, #2
    40ae:	4608      	mov	r0, r1
    dtostrf(f, mas, frac, s);
    40b0:	eeb7 0bc8 	vcvt.f32.f64	s0, d8
    40b4:	aa01      	add	r2, sp, #4
    40b6:	f014 fadb 	bl	18670 <dtostrf>

    uint8_t j = 0;
    for (uint8_t i = 0; i < a - source; i++) result[j++] = source[i];
    40ba:	1b60      	subs	r0, r4, r5
    uint8_t j = 0;
    40bc:	f04f 0900 	mov.w	r9, #0
    for (uint8_t i = 0; i < a - source; i++) result[j++] = source[i];
    40c0:	2800      	cmp	r0, #0
    40c2:	dd09      	ble.n	40d8 <sprintF(char*, char const*, double)+0xa0>
    40c4:	f109 0101 	add.w	r1, r9, #1
    40c8:	464b      	mov	r3, r9
    40ca:	f815 2009 	ldrb.w	r2, [r5, r9]
    40ce:	fa5f f981 	uxtb.w	r9, r1
    40d2:	54f2      	strb	r2, [r6, r3]
    40d4:	4581      	cmp	r9, r0
    40d6:	dbf5      	blt.n	40c4 <sprintF(char*, char const*, double)+0x8c>
    for (uint8_t i = 0; i < strlen(s); i++) result[j++] = s[i];
    40d8:	2700      	movs	r7, #0
    40da:	e002      	b.n	40e2 <sprintF(char*, char const*, double)+0xaa>
    40dc:	f812 3c14 	ldrb.w	r3, [r2, #-20]
    40e0:	5573      	strb	r3, [r6, r5]
    40e2:	a801      	add	r0, sp, #4
    40e4:	eb09 0507 	add.w	r5, r9, r7
    40e8:	f01b fe4a 	bl	1fd80 <strlen>
    40ec:	f107 0318 	add.w	r3, r7, #24
    40f0:	4287      	cmp	r7, r0
    40f2:	b2ed      	uxtb	r5, r5
    40f4:	eb0d 0203 	add.w	r2, sp, r3
    40f8:	f107 0301 	add.w	r3, r7, #1
    40fc:	b2df      	uxtb	r7, r3
    40fe:	d3ed      	bcc.n	40dc <sprintF(char*, char const*, double)+0xa4>
    4100:	eba8 0805 	sub.w	r8, r8, r5
    4104:	e002      	b.n	410c <sprintF(char*, char const*, double)+0xd4>
    for (uint8_t i = len; i < strlen(a); i++) result[j++] = a[i];
    4106:	5de2      	ldrb	r2, [r4, r7]
    4108:	5572      	strb	r2, [r6, r5]
    410a:	b2dd      	uxtb	r5, r3
    410c:	eb05 0708 	add.w	r7, r5, r8
    4110:	4620      	mov	r0, r4
    4112:	f01b fe35 	bl	1fd80 <strlen>
    4116:	1c6b      	adds	r3, r5, #1
    4118:	b2ff      	uxtb	r7, r7
    411a:	4287      	cmp	r7, r0
    411c:	d3f3      	bcc.n	4106 <sprintF(char*, char const*, double)+0xce>
    result[j++] = 0;
    411e:	2300      	movs	r3, #0
    4120:	5573      	strb	r3, [r6, r5]
  }
    4122:	b007      	add	sp, #28
    4124:	ecbd 8b02 	vpop	{d8}
    4128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    412c:	0000      	movs	r0, r0
	...

00004130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>:
    if (!dmsToDouble(value, dms, signPresent, PM_HIGH))
      if (!dmsToDouble(value, dms, signPresent, PM_LOW)) return false;
  return true;
}

void Convert::doubleToHms(char *reply, double value, bool signPresent, PrecisionMode p) {
    4130:	b530      	push	{r4, r5, lr}
    4132:	468e      	mov	lr, r1
    4134:	b08d      	sub	sp, #52	; 0x34
    4136:	461d      	mov	r5, r3
  char sign[2] = "";
  double hour, minute, second, decimal = 0;

  // setup formatting, handle adding the sign
  if (signPresent) {
    4138:	2a00      	cmp	r2, #0
    413a:	d138      	bne.n	41ae <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x7e>
  char sign[2] = "";
    413c:	f8ad 2014 	strh.w	r2, [sp, #20]
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
  }
  
  // round to 0.00005 second or 0.5 second, depending on precision mode
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    4140:	2d03      	cmp	r5, #3
    4142:	d03e      	beq.n	41c2 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x92>
  hour = floor(value);
  minute = (value - hour)*60.0;
  second = (minute - floor(minute))*60.0;

  // finish off calculations for hms and form string template
  char form[]="%s%02d:%02d:%02d.%04d";
    4144:	4c5a      	ldr	r4, [pc, #360]	; (42b0 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x180>)
    4146:	f10d 0c18 	add.w	ip, sp, #24
  if (p == PM_HIGHEST) { decimal = (second - floor(second))*10000.0; } else
  if (p == PM_HIGH)    { form[16] = 0; } else
    414a:	2d02      	cmp	r5, #2
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    414c:	ed9f 7b50 	vldr	d7, [pc, #320]	; 4290 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x160>
  minute = (value - hour)*60.0;
    4150:	ed9f 5b51 	vldr	d5, [pc, #324]	; 4298 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x168>
  char form[]="%s%02d:%02d:%02d.%04d";
    4154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    4156:	ee30 0b07 	vadd.f64	d0, d0, d7
  char form[]="%s%02d:%02d:%02d.%04d";
    415a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  hour = floor(value);
    415e:	febb 6b40 	vrintm.f64	d6, d0
  minute = (value - hour)*60.0;
    4162:	ee30 0b46 	vsub.f64	d0, d0, d6
  char form[]="%s%02d:%02d:%02d.%04d";
    4166:	e894 0003 	ldmia.w	r4, {r0, r1}
  minute = (value - hour)*60.0;
    416a:	ee20 0b05 	vmul.f64	d0, d0, d5
  char form[]="%s%02d:%02d:%02d.%04d";
    416e:	f84c 0b04 	str.w	r0, [ip], #4
    4172:	f8ac 1000 	strh.w	r1, [ip]
  second = (minute - floor(minute))*60.0;
    4176:	febb 7b40 	vrintm.f64	d7, d0
    417a:	ee30 7b47 	vsub.f64	d7, d0, d7
    417e:	ee27 7b05 	vmul.f64	d7, d7, d5
  if (p == PM_HIGH)    { form[16] = 0; } else
    4182:	d058      	beq.n	4236 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x106>
  if (p == PM_LOW)     { form[16] = 0; form[11] = '.'; form[14] = '1'; second = second/6.0; } else
    4184:	2d01      	cmp	r5, #1
    4186:	d072      	beq.n	426e <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x13e>
  if (p == PM_LOWEST)  { form[11] = 0; second = 0; }
    4188:	2d00      	cmp	r5, #0
    418a:	d157      	bne.n	423c <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x10c>

  // set sign and return result string
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
  if (p == PM_LOWEST)  sprintf(reply, form, sign, (int)hour, (int)minute); else
    418c:	eefd 7bc6 	vcvt.s32.f64	s15, d6
    4190:	a906      	add	r1, sp, #24
    4192:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    4196:	aa05      	add	r2, sp, #20
    4198:	4670      	mov	r0, lr
  if (p == PM_LOWEST)  { form[11] = 0; second = 0; }
    419a:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
  if (p == PM_LOWEST)  sprintf(reply, form, sign, (int)hour, (int)minute); else
    419e:	ee17 3a90 	vmov	r3, s15
    41a2:	ed8d 0a00 	vstr	s0, [sp]
    41a6:	f01a fea3 	bl	1eef0 <sprintf>
                       sprintf(reply, form, sign, (int)hour, (int)minute, (int)second);
}
    41aa:	b00d      	add	sp, #52	; 0x34
    41ac:	bd30      	pop	{r4, r5, pc}
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    41ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    41b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41b6:	d454      	bmi.n	4262 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x132>
    41b8:	232b      	movs	r3, #43	; 0x2b
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    41ba:	2d03      	cmp	r5, #3
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    41bc:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    41c0:	d1c0      	bne.n	4144 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x14>
  char form[]="%s%02d:%02d:%02d.%04d";
    41c2:	4d3b      	ldr	r5, [pc, #236]	; (42b0 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x180>)
    41c4:	ac06      	add	r4, sp, #24
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    41c6:	ed9f 7b36 	vldr	d7, [pc, #216]	; 42a0 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x170>
  minute = (value - hour)*60.0;
    41ca:	ed9f 6b33 	vldr	d6, [pc, #204]	; 4298 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x168>
  if (p == PM_HIGHEST) { decimal = (second - floor(second))*10000.0; } else
    41ce:	ed9f 4b36 	vldr	d4, [pc, #216]	; 42a8 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x178>
  if (p == PM_HIGHEST) value += 0.0000000139; else value += 0.000139;
    41d2:	ee30 0b07 	vadd.f64	d0, d0, d7
  char form[]="%s%02d:%02d:%02d.%04d";
    41d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  hour = floor(value);
    41d8:	febb 5b40 	vrintm.f64	d5, d0
  minute = (value - hour)*60.0;
    41dc:	ee30 0b45 	vsub.f64	d0, d0, d5
    41e0:	ee20 0b06 	vmul.f64	d0, d0, d6
  second = (minute - floor(minute))*60.0;
    41e4:	febb 7b40 	vrintm.f64	d7, d0
    41e8:	ee30 7b47 	vsub.f64	d7, d0, d7
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    41ec:	eebd 0bc0 	vcvt.s32.f64	s0, d0
  second = (minute - floor(minute))*60.0;
    41f0:	ee27 7b06 	vmul.f64	d7, d7, d6
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    41f4:	ed8d 0a00 	vstr	s0, [sp]
  if (p == PM_HIGHEST) { decimal = (second - floor(second))*10000.0; } else
    41f8:	febb 6b47 	vrintm.f64	d6, d7
    41fc:	ee37 6b46 	vsub.f64	d6, d7, d6
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    4200:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    4204:	eefd 7bc5 	vcvt.s32.f64	s15, d5
  if (p == PM_HIGHEST) { decimal = (second - floor(second))*10000.0; } else
    4208:	ee26 6b04 	vmul.f64	d6, d6, d4
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    420c:	ed8d 7a01 	vstr	s14, [sp, #4]
    4210:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    4214:	ed8d 6a02 	vstr	s12, [sp, #8]
  char form[]="%s%02d:%02d:%02d.%04d";
    4218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    421a:	e895 0003 	ldmia.w	r5, {r0, r1}
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    421e:	ee17 3a90 	vmov	r3, s15
    4222:	aa05      	add	r2, sp, #20
  char form[]="%s%02d:%02d:%02d.%04d";
    4224:	f844 0b04 	str.w	r0, [r4], #4
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    4228:	4670      	mov	r0, lr
  char form[]="%s%02d:%02d:%02d.%04d";
    422a:	8021      	strh	r1, [r4, #0]
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)hour, (int)minute, (int)second, (int)decimal); else
    422c:	a906      	add	r1, sp, #24
    422e:	f01a fe5f 	bl	1eef0 <sprintf>
}
    4232:	b00d      	add	sp, #52	; 0x34
    4234:	bd30      	pop	{r4, r5, pc}
  if (p == PM_HIGH)    { form[16] = 0; } else
    4236:	2300      	movs	r3, #0
    4238:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                       sprintf(reply, form, sign, (int)hour, (int)minute, (int)second);
    423c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    4240:	a906      	add	r1, sp, #24
    4242:	eefd 7bc6 	vcvt.s32.f64	s15, d6
    4246:	aa05      	add	r2, sp, #20
    4248:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    424c:	4670      	mov	r0, lr
    424e:	ed8d 7a01 	vstr	s14, [sp, #4]
    4252:	ee17 3a90 	vmov	r3, s15
    4256:	ed8d 0a00 	vstr	s0, [sp]
    425a:	f01a fe49 	bl	1eef0 <sprintf>
}
    425e:	b00d      	add	sp, #52	; 0x34
    4260:	bd30      	pop	{r4, r5, pc}
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    4262:	232d      	movs	r3, #45	; 0x2d
    4264:	eeb1 0b40 	vneg.f64	d0, d0
    4268:	f8ad 3014 	strh.w	r3, [sp, #20]
    426c:	e768      	b.n	4140 <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x10>
  if (p == PM_LOW)     { form[16] = 0; form[11] = '.'; form[14] = '1'; second = second/6.0; } else
    426e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
    4272:	2100      	movs	r1, #0
    4274:	222e      	movs	r2, #46	; 0x2e
    4276:	2331      	movs	r3, #49	; 0x31
    4278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    427c:	ee87 7b05 	vdiv.f64	d7, d7, d5
    4280:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    4284:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    4288:	e7d8      	b.n	423c <Convert::doubleToHms(char*, double, bool, PrecisionMode)+0x10c>
    428a:	bf00      	nop
    428c:	f3af 8000 	nop.w
    4290:	e8858ff7 	.word	0xe8858ff7
    4294:	3f223810 	.word	0x3f223810
    4298:	00000000 	.word	0x00000000
    429c:	404e0000 	.word	0x404e0000
    42a0:	16904809 	.word	0x16904809
    42a4:	3e4dd99b 	.word	0x3e4dd99b
    42a8:	00000000 	.word	0x00000000
    42ac:	40c38800 	.word	0x40c38800
    42b0:	200022d8 	.word	0x200022d8
    42b4:	00000000 	.word	0x00000000

000042b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>:
// DDD:MM          PM_LOW
// sDD*MM          PM_LOW
// DDD*MM          PM_LOW
// DDD:MM:SS       PM_HIGH
// sDD:MM:SS.SSS   PM_HIGHEST
void Convert::doubleToDms(char *reply, double value, bool fullRange, bool signPresent, PrecisionMode p) {
    42b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42bc:	b08c      	sub	sp, #48	; 0x30
    42be:	460e      	mov	r6, r1
    42c0:	4615      	mov	r5, r2
    42c2:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
  char sign[2] = "";
  double deg, minute, second = 0, decimal = 0;

  // setup formatting, handle adding the sign
  if (signPresent) {
    42c6:	b12b      	cbz	r3, 42d4 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x1c>
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    42c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    42cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    42d0:	d453      	bmi.n	437a <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0xc2>
    42d2:	232b      	movs	r3, #43	; 0x2b
  }

  // round to 0.0005 arc-second or 0.5 arc-second, depending on precision mode
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    42d4:	f1be 0f03 	cmp.w	lr, #3
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    42d8:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    42dc:	d055      	beq.n	438a <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0xd2>
  deg = floor(value);
  minute = (value - deg)*60.0;
  second = (minute - floor(minute))*60.0;

  // finish off calculations for dms and form string template
  char form[]="%s%02d*%02d:%02d.%03d";
    42de:	af06      	add	r7, sp, #24
    42e0:	4c5b      	ldr	r4, [pc, #364]	; (4450 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x198>)
  if (p != PM_HIGHEST) form[16] = 0; else decimal = (second - floor(second))*1000.0;
    42e2:	f04f 0800 	mov.w	r8, #0
  if (p == PM_LOW)     form[11] = 0;
    42e6:	f1be 0f01 	cmp.w	lr, #1
  char form[]="%s%02d*%02d:%02d.%03d";
    42ea:	46bc      	mov	ip, r7
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    42ec:	ed9f 7b50 	vldr	d7, [pc, #320]	; 4430 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x178>
  minute = (value - deg)*60.0;
    42f0:	ed9f 6b51 	vldr	d6, [pc, #324]	; 4438 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x180>
  char form[]="%s%02d*%02d:%02d.%03d";
    42f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    42f6:	ee30 0b07 	vadd.f64	d0, d0, d7
  char form[]="%s%02d*%02d:%02d.%03d";
    42fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  deg = floor(value);
    42fe:	febb 5b40 	vrintm.f64	d5, d0
  minute = (value - deg)*60.0;
    4302:	ee30 0b45 	vsub.f64	d0, d0, d5
  char form[]="%s%02d*%02d:%02d.%03d";
    4306:	e894 0003 	ldmia.w	r4, {r0, r1}
  minute = (value - deg)*60.0;
    430a:	ee20 0b06 	vmul.f64	d0, d0, d6
  char form[]="%s%02d*%02d:%02d.%03d";
    430e:	f84c 0b04 	str.w	r0, [ip], #4
  if (p != PM_HIGHEST) form[16] = 0; else decimal = (second - floor(second))*1000.0;
    4312:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
  char form[]="%s%02d*%02d:%02d.%03d";
    4316:	f8ac 1000 	strh.w	r1, [ip]
  second = (minute - floor(minute))*60.0;
    431a:	febb 7b40 	vrintm.f64	d7, d0
    431e:	ee30 7b47 	vsub.f64	d7, d0, d7
    4322:	ee27 7b06 	vmul.f64	d7, d7, d6
  if (p == PM_LOW)     form[11] = 0;
    4326:	d10f      	bne.n	4348 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x90>
    4328:	f88d 8023 	strb.w	r8, [sp, #35]	; 0x23
  if (fullRange)                   form[4]  = '3';
    432c:	2d00      	cmp	r5, #0
    432e:	d06e      	beq.n	440e <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x156>
    4330:	2333      	movs	r3, #51	; 0x33
 
  // return result string
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)deg, (int)minute, (int)second, (int)decimal); else
  if (p == PM_HIGH)    sprintf(reply, form, sign, (int)deg, (int)minute, (int)second); else
    4332:	f1be 0f02 	cmp.w	lr, #2
  if (fullRange)                   form[4]  = '3';
    4336:	f88d 301c 	strb.w	r3, [sp, #28]
  if (p == PM_HIGH)    sprintf(reply, form, sign, (int)deg, (int)minute, (int)second); else
    433a:	d00a      	beq.n	4352 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x9a>
  if (p == PM_LOW)     sprintf(reply, form, sign, (int)deg, (int)minute);
    433c:	f1be 0f01 	cmp.w	lr, #1
    4340:	d065      	beq.n	440e <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x156>
}
    4342:	b00c      	add	sp, #48	; 0x30
    4344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (fullRange)                   form[4]  = '3';
    4348:	2d00      	cmp	r5, #0
    434a:	d1f1      	bne.n	4330 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x78>
  if (p == PM_HIGH)    sprintf(reply, form, sign, (int)deg, (int)minute, (int)second); else
    434c:	f1be 0f02 	cmp.w	lr, #2
    4350:	d1f7      	bne.n	4342 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x8a>
    4352:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    4356:	4639      	mov	r1, r7
    4358:	eefd 7bc5 	vcvt.s32.f64	s15, d5
    435c:	aa05      	add	r2, sp, #20
    435e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    4362:	4630      	mov	r0, r6
    4364:	ed8d 7a01 	vstr	s14, [sp, #4]
    4368:	ee17 3a90 	vmov	r3, s15
    436c:	ed8d 0a00 	vstr	s0, [sp]
    4370:	f01a fdbe 	bl	1eef0 <sprintf>
}
    4374:	b00c      	add	sp, #48	; 0x30
    4376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    437a:	232d      	movs	r3, #45	; 0x2d
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    437c:	f1be 0f03 	cmp.w	lr, #3
    if (value < 0) { value = -value; strcpy(sign,"-"); } else strcpy(sign,"+");
    4380:	eeb1 0b40 	vneg.f64	d0, d0
    4384:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    4388:	d1a9      	bne.n	42de <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x26>
  char form[]="%s%02d*%02d:%02d.%03d";
    438a:	af06      	add	r7, sp, #24
    438c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 4450 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x198>
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    4390:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 4440 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x188>
  minute = (value - deg)*60.0;
    4394:	ed9f 6b28 	vldr	d6, [pc, #160]	; 4438 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x180>
  char form[]="%s%02d*%02d:%02d.%03d";
    4398:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  if (p == PM_HIGHEST) value += 0.000000139; else value += 0.000139; 
    439c:	ee30 0b07 	vadd.f64	d0, d0, d7
  char form[]="%s%02d*%02d:%02d.%03d";
    43a0:	463c      	mov	r4, r7
  if (p != PM_HIGHEST) form[16] = 0; else decimal = (second - floor(second))*1000.0;
    43a2:	ed9f 4b29 	vldr	d4, [pc, #164]	; 4448 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x190>
  deg = floor(value);
    43a6:	febb 5b40 	vrintm.f64	d5, d0
  minute = (value - deg)*60.0;
    43aa:	ee30 0b45 	vsub.f64	d0, d0, d5
  char form[]="%s%02d*%02d:%02d.%03d";
    43ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  minute = (value - deg)*60.0;
    43b0:	ee20 0b06 	vmul.f64	d0, d0, d6
  char form[]="%s%02d*%02d:%02d.%03d";
    43b4:	e89c 0003 	ldmia.w	ip, {r0, r1}
  second = (minute - floor(minute))*60.0;
    43b8:	febb 7b40 	vrintm.f64	d7, d0
    43bc:	ee30 7b47 	vsub.f64	d7, d0, d7
  char form[]="%s%02d*%02d:%02d.%03d";
    43c0:	f844 0b04 	str.w	r0, [r4], #4
    43c4:	8021      	strh	r1, [r4, #0]
  second = (minute - floor(minute))*60.0;
    43c6:	ee27 7b06 	vmul.f64	d7, d7, d6
  if (p != PM_HIGHEST) form[16] = 0; else decimal = (second - floor(second))*1000.0;
    43ca:	febb 6b47 	vrintm.f64	d6, d7
    43ce:	ee37 6b46 	vsub.f64	d6, d7, d6
    43d2:	ee26 6b04 	vmul.f64	d6, d6, d4
  if (fullRange)                   form[4]  = '3';
    43d6:	b115      	cbz	r5, 43de <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)+0x126>
    43d8:	2333      	movs	r3, #51	; 0x33
    43da:	f88d 301c 	strb.w	r3, [sp, #28]
  if (p == PM_HIGHEST) sprintf(reply, form, sign, (int)deg, (int)minute, (int)second, (int)decimal); else
    43de:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    43e2:	4639      	mov	r1, r7
    43e4:	eefd 7bc5 	vcvt.s32.f64	s15, d5
    43e8:	aa05      	add	r2, sp, #20
    43ea:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    43ee:	4630      	mov	r0, r6
    43f0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    43f4:	ed8d 7a01 	vstr	s14, [sp, #4]
    43f8:	ee17 3a90 	vmov	r3, s15
    43fc:	ed8d 6a02 	vstr	s12, [sp, #8]
    4400:	ed8d 0a00 	vstr	s0, [sp]
    4404:	f01a fd74 	bl	1eef0 <sprintf>
}
    4408:	b00c      	add	sp, #48	; 0x30
    440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (p == PM_LOW)     sprintf(reply, form, sign, (int)deg, (int)minute);
    440e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
    4412:	aa05      	add	r2, sp, #20
    4414:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    4418:	4639      	mov	r1, r7
    441a:	4630      	mov	r0, r6
    441c:	ee17 3a90 	vmov	r3, s15
    4420:	ed8d 0a00 	vstr	s0, [sp]
    4424:	f01a fd64 	bl	1eef0 <sprintf>
}
    4428:	b00c      	add	sp, #48	; 0x30
    442a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    442e:	bf00      	nop
    4430:	e8858ff7 	.word	0xe8858ff7
    4434:	3f223810 	.word	0x3f223810
    4438:	00000000 	.word	0x00000000
    443c:	404e0000 	.word	0x404e0000
    4440:	ee1a2d05 	.word	0xee1a2d05
    4444:	3e82a800 	.word	0x3e82a800
    4448:	00000000 	.word	0x00000000
    444c:	408f4000 	.word	0x408f4000
    4450:	200022c0 	.word	0x200022c0

00004454 <Convert::atoi2(char*, short*, bool)>:

bool Convert::atoi2(char *a, int16_t *i, bool sign) {
    4454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int16_t len = strlen(a);
    4456:	4608      	mov	r0, r1
bool Convert::atoi2(char *a, int16_t *i, bool sign) {
    4458:	460d      	mov	r5, r1
    445a:	4616      	mov	r6, r2
    445c:	461f      	mov	r7, r3
  int16_t len = strlen(a);
    445e:	f01b fc8f 	bl	1fd80 <strlen>
    4462:	b200      	sxth	r0, r0
  if (len == 0 || len > 6) return false;
    4464:	b320      	cbz	r0, 44b0 <Convert::atoi2(char*, short*, bool)+0x5c>
    4466:	2806      	cmp	r0, #6
    4468:	bfd4      	ite	le
    446a:	2400      	movle	r4, #0
    446c:	2401      	movgt	r4, #1
    446e:	b9fc      	cbnz	r4, 44b0 <Convert::atoi2(char*, short*, bool)+0x5c>
  for (int l = 0; l < len; l++) {
    4470:	2800      	cmp	r0, #0
    4472:	dd10      	ble.n	4496 <Convert::atoi2(char*, short*, bool)+0x42>
    if (l == 0 && (a[l] == '+' || a[l] == '-') && sign) continue;
    4474:	b92c      	cbnz	r4, 4482 <Convert::atoi2(char*, short*, bool)+0x2e>
    4476:	782a      	ldrb	r2, [r5, #0]
    4478:	2a2d      	cmp	r2, #45	; 0x2d
    447a:	bf18      	it	ne
    447c:	2a2b      	cmpne	r2, #43	; 0x2b
    447e:	d100      	bne.n	4482 <Convert::atoi2(char*, short*, bool)+0x2e>
    4480:	b937      	cbnz	r7, 4490 <Convert::atoi2(char*, short*, bool)+0x3c>
    if (a[l] < '0' || a[l] > '9') return false; 
    4482:	f815 c004 	ldrb.w	ip, [r5, r4]
    4486:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
    448a:	f1bc 0f09 	cmp.w	ip, #9
    448e:	d80f      	bhi.n	44b0 <Convert::atoi2(char*, short*, bool)+0x5c>
  for (int l = 0; l < len; l++) {
    4490:	3401      	adds	r4, #1
    4492:	4284      	cmp	r4, r0
    4494:	d1ee      	bne.n	4474 <Convert::atoi2(char*, short*, bool)+0x20>
  }
  long l = atol(a);
    4496:	4628      	mov	r0, r5
    4498:	f019 f874 	bl	1d584 <atol>
  if (l < -32767 || l > 32768) return false;
    449c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  long l = atol(a);
    44a0:	4603      	mov	r3, r0
  if (l < -32767 || l > 32768) return false;
    44a2:	4402      	add	r2, r0
    44a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    44a8:	d202      	bcs.n	44b0 <Convert::atoi2(char*, short*, bool)+0x5c>
  *i = l;
  return true;
    44aa:	2001      	movs	r0, #1
  *i = l;
    44ac:	8033      	strh	r3, [r6, #0]
}
    44ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (len == 0 || len > 6) return false;
    44b0:	2000      	movs	r0, #0
}
    44b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000044b4 <Convert::atoi2(char*, unsigned char*, bool)>:

bool Convert::atoi2(char *a, uint8_t *u, bool sign) {
    44b4:	b510      	push	{r4, lr}
    44b6:	4614      	mov	r4, r2
    44b8:	b082      	sub	sp, #8
  int16_t i = *u;
    44ba:	7812      	ldrb	r2, [r2, #0]
    44bc:	f8ad 2006 	strh.w	r2, [sp, #6]
  bool result = atoi2(a, &i, sign);
    44c0:	f10d 0206 	add.w	r2, sp, #6
    44c4:	f7ff ffc6 	bl	4454 <Convert::atoi2(char*, short*, bool)>
  if (i >= 0 && i <= 255) { *u = i; return result; } else return false;
    44c8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    44cc:	b29a      	uxth	r2, r3
    44ce:	2aff      	cmp	r2, #255	; 0xff
    44d0:	bf8c      	ite	hi
    44d2:	2000      	movhi	r0, #0
    44d4:	7023      	strbls	r3, [r4, #0]
}
    44d6:	b002      	add	sp, #8
    44d8:	bd10      	pop	{r4, pc}
    44da:	bf00      	nop

000044dc <Convert::atof2(char*, double*, bool)>:
              
bool Convert::atof2(char *a, double *d, bool sign) {
    44dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int16_t dc = 0;
  int16_t len = strlen(a);
    44de:	4608      	mov	r0, r1
bool Convert::atof2(char *a, double *d, bool sign) {
    44e0:	460d      	mov	r5, r1
    44e2:	4616      	mov	r6, r2
    44e4:	461f      	mov	r7, r3
  int16_t len = strlen(a);
    44e6:	f01b fc4b 	bl	1fd80 <strlen>
  for (int l = 0; l < len; l++) {
    44ea:	b200      	sxth	r0, r0
    44ec:	2800      	cmp	r0, #0
    44ee:	dd14      	ble.n	451a <Convert::atof2(char*, double*, bool)+0x3e>
    44f0:	2400      	movs	r4, #0
  int16_t dc = 0;
    44f2:	4623      	mov	r3, r4
    if (l == 0 && (a[l] == '+' || a[l] == '-') && sign) continue;
    44f4:	b92c      	cbnz	r4, 4502 <Convert::atof2(char*, double*, bool)+0x26>
    44f6:	7829      	ldrb	r1, [r5, #0]
    44f8:	292d      	cmp	r1, #45	; 0x2d
    44fa:	bf18      	it	ne
    44fc:	292b      	cmpne	r1, #43	; 0x2b
    44fe:	d100      	bne.n	4502 <Convert::atof2(char*, double*, bool)+0x26>
    4500:	b947      	cbnz	r7, 4514 <Convert::atof2(char*, double*, bool)+0x38>
    if (a[l] == '.') { if (dc == 0) { dc++; continue; } else return false; }
    4502:	f815 c004 	ldrb.w	ip, [r5, r4]
    4506:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    if (a[l] < '0' || a[l] > '9') return false;
    450a:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
    if (a[l] == '.') { if (dc == 0) { dc++; continue; } else return false; }
    450e:	d00b      	beq.n	4528 <Convert::atof2(char*, double*, bool)+0x4c>
    if (a[l] < '0' || a[l] > '9') return false;
    4510:	2909      	cmp	r1, #9
    4512:	d80c      	bhi.n	452e <Convert::atof2(char*, double*, bool)+0x52>
  for (int l = 0; l < len; l++) {
    4514:	3401      	adds	r4, #1
    4516:	4284      	cmp	r4, r0
    4518:	d1ec      	bne.n	44f4 <Convert::atof2(char*, double*, bool)+0x18>
  }
  *d = atof(a);
    451a:	4628      	mov	r0, r5
    451c:	f019 f82e 	bl	1d57c <atof>
  return true;
    4520:	2001      	movs	r0, #1
  *d = atof(a);
    4522:	ed86 0b00 	vstr	d0, [r6]
}
    4526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (a[l] == '.') { if (dc == 0) { dc++; continue; } else return false; }
    4528:	b90b      	cbnz	r3, 452e <Convert::atof2(char*, double*, bool)+0x52>
    452a:	2301      	movs	r3, #1
    452c:	e7f2      	b.n	4514 <Convert::atof2(char*, double*, bool)+0x38>
    452e:	2000      	movs	r0, #0
}
    4530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4532:	bf00      	nop
    4534:	0000      	movs	r0, r0
	...

00004538 <Convert::tzToDouble(double*, char*)>:
bool Convert::tzToDouble(double *value, char *hm) {
    4538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int16_t hour, minute = 0;
    453c:	2300      	movs	r3, #0
bool Convert::tzToDouble(double *value, char *hm) {
    453e:	b083      	sub	sp, #12
  if (strlen(hm) < 1 || strlen(hm) > 6) return false;
    4540:	7815      	ldrb	r5, [r2, #0]
  int16_t hour, minute = 0;
    4542:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (strlen(hm) < 1 || strlen(hm) > 6) return false;
    4546:	2d00      	cmp	r5, #0
    4548:	d041      	beq.n	45ce <Convert::tzToDouble(double*, char*)+0x96>
    454a:	4606      	mov	r6, r0
    454c:	4610      	mov	r0, r2
    454e:	4614      	mov	r4, r2
    4550:	460f      	mov	r7, r1
    4552:	f01b fc15 	bl	1fd80 <strlen>
    4556:	2806      	cmp	r0, #6
    4558:	d839      	bhi.n	45ce <Convert::tzToDouble(double*, char*)+0x96>
  if (strchr(hm, '.') != NULL) { return atof2(hm, value); }
    455a:	212e      	movs	r1, #46	; 0x2e
    455c:	4620      	mov	r0, r4
    455e:	f01a feb9 	bl	1f2d4 <strchr>
    4562:	b140      	cbz	r0, 4576 <Convert::tzToDouble(double*, char*)+0x3e>
    4564:	2301      	movs	r3, #1
    4566:	463a      	mov	r2, r7
    4568:	4621      	mov	r1, r4
    456a:	4630      	mov	r0, r6
}
    456c:	b003      	add	sp, #12
    456e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (strchr(hm, '.') != NULL) { return atof2(hm, value); }
    4572:	f7ff bfb3 	b.w	44dc <Convert::atof2(char*, double*, bool)>
  if (hm[0] == '-') { sign = -1; hm++; } else if (hm[0] == '+') hm++;
    4576:	2d2d      	cmp	r5, #45	; 0x2d
    4578:	d02d      	beq.n	45d6 <Convert::tzToDouble(double*, char*)+0x9e>
    457a:	2d2b      	cmp	r5, #43	; 0x2b
  int16_t sign = 1;
    457c:	f04f 0801 	mov.w	r8, #1
  if (hm[0] == '-') { sign = -1; hm++; } else if (hm[0] == '+') hm++;
    4580:	bf08      	it	eq
    4582:	3401      	addeq	r4, #1
  char* m = strchr(hm, ':');
    4584:	213a      	movs	r1, #58	; 0x3a
    4586:	4620      	mov	r0, r4
    4588:	f01a fea4 	bl	1f2d4 <strchr>
  if (m != NULL) {
    458c:	b1c0      	cbz	r0, 45c0 <Convert::tzToDouble(double*, char*)+0x88>
    m[0] = 0;
    458e:	4605      	mov	r5, r0
    4590:	f04f 0900 	mov.w	r9, #0
    4594:	f805 9b01 	strb.w	r9, [r5], #1
    if (strlen(m) != 2) return false;
    4598:	4628      	mov	r0, r5
    459a:	f01b fbf1 	bl	1fd80 <strlen>
    459e:	2802      	cmp	r0, #2
    45a0:	d115      	bne.n	45ce <Convert::tzToDouble(double*, char*)+0x96>
    if (!atoi2(m, &minute, false)) return false;
    45a2:	464b      	mov	r3, r9
    45a4:	4629      	mov	r1, r5
    45a6:	f10d 0206 	add.w	r2, sp, #6
    45aa:	4630      	mov	r0, r6
    45ac:	f7ff ff52 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    45b0:	b168      	cbz	r0, 45ce <Convert::tzToDouble(double*, char*)+0x96>
    if (minute != 45 && minute != 30 && minute != 0) return false;
    45b2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    45b6:	2b2d      	cmp	r3, #45	; 0x2d
    45b8:	bf18      	it	ne
    45ba:	2b1e      	cmpne	r3, #30
    45bc:	d000      	beq.n	45c0 <Convert::tzToDouble(double*, char*)+0x88>
    45be:	b933      	cbnz	r3, 45ce <Convert::tzToDouble(double*, char*)+0x96>
  if (!atoi2(hm, &hour, false)) return false;
    45c0:	2300      	movs	r3, #0
    45c2:	4621      	mov	r1, r4
    45c4:	4630      	mov	r0, r6
    45c6:	aa01      	add	r2, sp, #4
    45c8:	f7ff ff44 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    45cc:	b938      	cbnz	r0, 45de <Convert::tzToDouble(double*, char*)+0xa6>
  if (strlen(hm) < 1 || strlen(hm) > 6) return false;
    45ce:	2000      	movs	r0, #0
}
    45d0:	b003      	add	sp, #12
    45d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (hm[0] == '-') { sign = -1; hm++; } else if (hm[0] == '+') hm++;
    45d6:	3401      	adds	r4, #1
    45d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    45dc:	e7d2      	b.n	4584 <Convert::tzToDouble(double*, char*)+0x4c>
  *value = sign*(hour + minute/60.0);
    45de:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    45e2:	ee07 8a90 	vmov	s15, r8
    45e6:	ee04 3a10 	vmov	s8, r3
    45ea:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    45ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    45f2:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
    45f6:	ee05 3a10 	vmov	s10, r3
    45fa:	ed9f 3b07 	vldr	d3, [pc, #28]	; 4618 <Convert::tzToDouble(double*, char*)+0xe0>
    45fe:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    4602:	ee84 6b03 	vdiv.f64	d6, d4, d3
    4606:	ee36 6b05 	vadd.f64	d6, d6, d5
    460a:	ee26 7b07 	vmul.f64	d7, d6, d7
    460e:	ed87 7b00 	vstr	d7, [r7]
  return true;
    4612:	e7dd      	b.n	45d0 <Convert::tzToDouble(double*, char*)+0x98>
    4614:	f3af 8000 	nop.w
    4618:	00000000 	.word	0x00000000
    461c:	404e0000 	.word	0x404e0000

00004620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>:
bool Convert::hmsToDouble(double *value, char *hms, PrecisionMode p) {
    4620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4624:	4614      	mov	r4, r2
    4626:	b086      	sub	sp, #24
    4628:	461e      	mov	r6, r3
  double second = 0;
    462a:	2200      	movs	r2, #0
  while (*hms == ' ') hms++;
    462c:	7825      	ldrb	r5, [r4, #0]
  double second = 0;
    462e:	2300      	movs	r3, #0
bool Convert::hmsToDouble(double *value, char *hms, PrecisionMode p) {
    4630:	4607      	mov	r7, r0
    4632:	4688      	mov	r8, r1
  while (*hms == ' ') hms++;
    4634:	2d20      	cmp	r5, #32
  double second = 0;
    4636:	e9cd 2304 	strd	r2, r3, [sp, #16]
  while (*hms == ' ') hms++;
    463a:	d103      	bne.n	4644 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x24>
    463c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    4640:	2d20      	cmp	r5, #32
    4642:	d0fb      	beq.n	463c <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x1c>
  if (strlen(hms) > 13) hms[13] = 0;
    4644:	4620      	mov	r0, r4
    4646:	f01b fb9b 	bl	1fd80 <strlen>
    464a:	280d      	cmp	r0, #13
    464c:	d925      	bls.n	469a <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x7a>
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 8 && length < 10) return false; } else
    464e:	f1a6 0902 	sub.w	r9, r6, #2
  if (strlen(hms) > 13) hms[13] = 0;
    4652:	2300      	movs	r3, #0
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 8 && length < 10) return false; } else
    4654:	fa5f f989 	uxtb.w	r9, r9
  if (strlen(hms) > 13) hms[13] = 0;
    4658:	7363      	strb	r3, [r4, #13]
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 8 && length < 10) return false; } else
    465a:	f1b9 0f01 	cmp.w	r9, #1
    465e:	d904      	bls.n	466a <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x4a>
  int16_t length = strlen(hms);
    4660:	220d      	movs	r2, #13
  if (p == PM_LOW) { if (length != 7) return false; }
    4662:	2e01      	cmp	r6, #1
    4664:	d101      	bne.n	466a <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x4a>
    4666:	2a07      	cmp	r2, #7
    4668:	d112      	bne.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
  h[0] = *hms++; h[1] = *hms++; h[2] = 0;
    466a:	f04f 0a00 	mov.w	sl, #0
    466e:	7863      	ldrb	r3, [r4, #1]
  if (!atoi2(h, &hour, false)) return false;
    4670:	466a      	mov	r2, sp
    4672:	a901      	add	r1, sp, #4
  h[0] = *hms++; h[1] = *hms++; h[2] = 0;
    4674:	f88d 3005 	strb.w	r3, [sp, #5]
  if (!atoi2(h, &hour, false)) return false;
    4678:	4638      	mov	r0, r7
    467a:	4653      	mov	r3, sl
  h[0] = *hms++; h[1] = *hms++; h[2] = 0;
    467c:	f88d 5004 	strb.w	r5, [sp, #4]
    4680:	f88d a006 	strb.w	sl, [sp, #6]
  if (!atoi2(h, &hour, false)) return false;
    4684:	f7ff fee6 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    4688:	b110      	cbz	r0, 4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
  if (*hms++ != ':') return false;
    468a:	78a3      	ldrb	r3, [r4, #2]
    468c:	2b3a      	cmp	r3, #58	; 0x3a
    468e:	d011      	beq.n	46b4 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x94>
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 8 && length < 10) return false; } else
    4690:	2500      	movs	r5, #0
}
    4692:	4628      	mov	r0, r5
    4694:	b006      	add	sp, #24
    4696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 8 && length < 10) return false; } else
    469a:	f1a6 0902 	sub.w	r9, r6, #2
  int16_t length = strlen(hms);
    469e:	b202      	sxth	r2, r0
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 8 && length < 10) return false; } else
    46a0:	fa5f f989 	uxtb.w	r9, r9
    46a4:	f1b9 0f01 	cmp.w	r9, #1
    46a8:	d8db      	bhi.n	4662 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x42>
    46aa:	2a08      	cmp	r2, #8
    46ac:	d0dd      	beq.n	466a <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x4a>
    46ae:	2a09      	cmp	r2, #9
    46b0:	ddee      	ble.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    46b2:	e7da      	b.n	466a <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x4a>
  m[0] = *hms++; m[1] = *hms++; m[2] = 0;
    46b4:	78e3      	ldrb	r3, [r4, #3]
  if (!atoi2(m, &minute, false)) return false;
    46b6:	f10d 0202 	add.w	r2, sp, #2
    46ba:	a902      	add	r1, sp, #8
    46bc:	4638      	mov	r0, r7
  m[0] = *hms++; m[1] = *hms++; m[2] = 0;
    46be:	f88d 3008 	strb.w	r3, [sp, #8]
    46c2:	7923      	ldrb	r3, [r4, #4]
    46c4:	f88d a00a 	strb.w	sl, [sp, #10]
    46c8:	f88d 3009 	strb.w	r3, [sp, #9]
  if (!atoi2(m, &minute, false)) return false;
    46cc:	4653      	mov	r3, sl
    46ce:	f7ff fec1 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    46d2:	4605      	mov	r5, r0
    46d4:	2800      	cmp	r0, #0
    46d6:	d0db      	beq.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
  if (p == PM_HIGHEST || p == PM_HIGH) {
    46d8:	f1b9 0f01 	cmp.w	r9, #1
    46dc:	d945      	bls.n	476a <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x14a>
  if (p == PM_LOW) {
    46de:	2e01      	cmp	r6, #1
    46e0:	d03c      	beq.n	475c <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x13c>
  int16_t hour, minute, decimal = 0;
    46e2:	2200      	movs	r2, #0
  if (hour < 0 || hour > 23 || minute < 0 || minute > 59 || decimal < 0 || decimal > 9 || second < 0 || second > 59.9999) return false;
    46e4:	f9bd 3000 	ldrsh.w	r3, [sp]
    46e8:	b299      	uxth	r1, r3
    46ea:	2917      	cmp	r1, #23
    46ec:	d8d0      	bhi.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    46ee:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
    46f2:	b288      	uxth	r0, r1
    46f4:	283b      	cmp	r0, #59	; 0x3b
    46f6:	d8cb      	bhi.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    46f8:	b290      	uxth	r0, r2
    46fa:	2809      	cmp	r0, #9
    46fc:	d8c8      	bhi.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    46fe:	ed9d 3b04 	vldr	d3, [sp, #16]
    4702:	eeb5 3bc0 	vcmpe.f64	d3, #0.0
    4706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    470a:	d4c1      	bmi.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    470c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 4788 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x168>
    4710:	eeb4 3bc7 	vcmpe.f64	d3, d7
    4714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4718:	dcba      	bgt.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
  *value = hour + minute/60.0 + (double)decimal/600.0 + second/3600.0;
    471a:	ee07 1a90 	vmov	s15, r1
    471e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 4790 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x170>
    4722:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    4726:	ee07 2a90 	vmov	s15, r2
    472a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 4798 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x178>
    472e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    4732:	ee07 3a90 	vmov	s15, r3
    4736:	ee85 4b00 	vdiv.f64	d4, d5, d0
    473a:	ee86 5b01 	vdiv.f64	d5, d6, d1
    473e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    4742:	ed9f 2b17 	vldr	d2, [pc, #92]	; 47a0 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x180>
    4746:	ee83 6b02 	vdiv.f64	d6, d3, d2
    474a:	ee34 7b07 	vadd.f64	d7, d4, d7
    474e:	ee37 7b05 	vadd.f64	d7, d7, d5
    4752:	ee37 7b06 	vadd.f64	d7, d7, d6
    4756:	ed88 7b00 	vstr	d7, [r8]
  return true;
    475a:	e79a      	b.n	4692 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x72>
    if (*hms++ != '.') return false;
    475c:	7963      	ldrb	r3, [r4, #5]
    475e:	2b2e      	cmp	r3, #46	; 0x2e
    4760:	d196      	bne.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    decimal = (*hms++) - '0';
    4762:	79a2      	ldrb	r2, [r4, #6]
    4764:	3a30      	subs	r2, #48	; 0x30
    4766:	b212      	sxth	r2, r2
    4768:	e7bc      	b.n	46e4 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0xc4>
    if (*hms++ != ':') return false;
    476a:	7963      	ldrb	r3, [r4, #5]
    476c:	2b3a      	cmp	r3, #58	; 0x3a
    476e:	d18f      	bne.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    if (!atof2(hms, &second, false)) return false;
    4770:	4653      	mov	r3, sl
    4772:	1da1      	adds	r1, r4, #6
    4774:	4638      	mov	r0, r7
    4776:	aa04      	add	r2, sp, #16
    4778:	f7ff feb0 	bl	44dc <Convert::atof2(char*, double*, bool)>
    477c:	2800      	cmp	r0, #0
    477e:	d1b0      	bne.n	46e2 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0xc2>
    4780:	e786      	b.n	4690 <Convert::hmsToDouble(double*, char*, PrecisionMode)+0x70>
    4782:	bf00      	nop
    4784:	f3af 8000 	nop.w
    4788:	b923a29c 	.word	0xb923a29c
    478c:	404dfffc 	.word	0x404dfffc
    4790:	00000000 	.word	0x00000000
    4794:	404e0000 	.word	0x404e0000
    4798:	00000000 	.word	0x00000000
    479c:	4082c000 	.word	0x4082c000
    47a0:	00000000 	.word	0x00000000
    47a4:	40ac2000 	.word	0x40ac2000

000047a8 <Convert::hmsToDouble(double*, char*)>:
bool Convert::hmsToDouble(double *value, char *hms) {
    47a8:	b570      	push	{r4, r5, r6, lr}
  if (!hmsToDouble(value, hms, PM_HIGHEST))
    47aa:	2303      	movs	r3, #3
bool Convert::hmsToDouble(double *value, char *hms) {
    47ac:	4604      	mov	r4, r0
    47ae:	460d      	mov	r5, r1
    47b0:	4616      	mov	r6, r2
  if (!hmsToDouble(value, hms, PM_HIGHEST))
    47b2:	f7ff ff35 	bl	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
    47b6:	b108      	cbz	r0, 47bc <Convert::hmsToDouble(double*, char*)+0x14>
}
    47b8:	2001      	movs	r0, #1
    47ba:	bd70      	pop	{r4, r5, r6, pc}
    if (!hmsToDouble(value, hms, PM_HIGH))
    47bc:	2302      	movs	r3, #2
    47be:	4632      	mov	r2, r6
    47c0:	4629      	mov	r1, r5
    47c2:	4620      	mov	r0, r4
    47c4:	f7ff ff2c 	bl	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
    47c8:	2800      	cmp	r0, #0
    47ca:	d1f5      	bne.n	47b8 <Convert::hmsToDouble(double*, char*)+0x10>
      if (!hmsToDouble(value, hms, PM_LOW)) return false;
    47cc:	4632      	mov	r2, r6
    47ce:	4629      	mov	r1, r5
    47d0:	4620      	mov	r0, r4
    47d2:	2301      	movs	r3, #1
}
    47d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      if (!hmsToDouble(value, hms, PM_LOW)) return false;
    47d8:	f7ff bf22 	b.w	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
    47dc:	0000      	movs	r0, r0
	...

000047e0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)>:
bool Convert::dmsToDouble(double *value, char *dms, bool signPresent, PrecisionMode p) {
    47e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (*dms == ' ') dms++;
    47e4:	7815      	ldrb	r5, [r2, #0]
bool Convert::dmsToDouble(double *value, char *dms, bool signPresent, PrecisionMode p) {
    47e6:	b087      	sub	sp, #28
    47e8:	4614      	mov	r4, r2
    47ea:	461e      	mov	r6, r3
  double second = 0;
    47ec:	2200      	movs	r2, #0
    47ee:	2300      	movs	r3, #0
  while (*dms == ' ') dms++;
    47f0:	2d20      	cmp	r5, #32
bool Convert::dmsToDouble(double *value, char *dms, bool signPresent, PrecisionMode p) {
    47f2:	4680      	mov	r8, r0
    47f4:	4689      	mov	r9, r1
    47f6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
  double second = 0;
    47fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  while (*dms == ' ') dms++;
    47fe:	d103      	bne.n	4808 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x28>
    4800:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    4804:	2d20      	cmp	r5, #32
    4806:	d0fb      	beq.n	4800 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x20>
  if (strlen(dms) > 13) dms[13] = 0;
    4808:	4620      	mov	r0, r4
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    480a:	f1aa 0702 	sub.w	r7, sl, #2
  if (strlen(dms) > 13) dms[13] = 0;
    480e:	f01b fab7 	bl	1fd80 <strlen>
    4812:	280d      	cmp	r0, #13
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    4814:	b2ff      	uxtb	r7, r7
  if (strlen(dms) > 13) dms[13] = 0;
    4816:	d92f      	bls.n	4878 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x98>
    4818:	2300      	movs	r3, #0
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    481a:	2f01      	cmp	r7, #1
  if (strlen(dms) > 13) dms[13] = 0;
    481c:	7363      	strb	r3, [r4, #13]
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    481e:	d905      	bls.n	482c <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x4c>
    4820:	200d      	movs	r0, #13
  length = strlen(dms);
    4822:	4603      	mov	r3, r0
  if (p == PM_LOW) {
    4824:	f1ba 0f01 	cmp.w	sl, #1
    4828:	f000 80a6 	beq.w	4978 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x198>
  bool secondsOff = false;
    482c:	f04f 0a00 	mov.w	sl, #0
  if (signPresent) {
    4830:	b39e      	cbz	r6, 489a <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0xba>
    if (*dms == '-') sign = -1; else if (*dms != '+') return false;
    4832:	2d2d      	cmp	r5, #45	; 0x2d
    4834:	f000 80a7 	beq.w	4986 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1a6>
    4838:	2d2b      	cmp	r5, #43	; 0x2b
    483a:	d118      	bne.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
  int16_t sign = 1, deg, minute, lowLimit = 0, highLimit = 360;
    483c:	f04f 0b01 	mov.w	fp, #1
    dms++; d[0] = *dms++; d[1] = *dms++; d[2] = 0;
    4840:	7862      	ldrb	r2, [r4, #1]
    4842:	2300      	movs	r3, #0
    if (!atoi2(d, &deg, false)) return false;
    4844:	a901      	add	r1, sp, #4
    4846:	4640      	mov	r0, r8
    dms++; d[0] = *dms++; d[1] = *dms++; d[2] = 0;
    4848:	f88d 2004 	strb.w	r2, [sp, #4]
    484c:	78a2      	ldrb	r2, [r4, #2]
    484e:	f88d 3006 	strb.w	r3, [sp, #6]
    4852:	f88d 2005 	strb.w	r2, [sp, #5]
    if (!atoi2(d, &deg, false)) return false;
    4856:	466a      	mov	r2, sp
    4858:	f7ff fdfc 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    485c:	b138      	cbz	r0, 486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
  if (*dms != ':' && *dms != '*' && *dms != char(223)) return false; else dms++;
    485e:	78e3      	ldrb	r3, [r4, #3]
    dms++; d[0] = *dms++; d[1] = *dms++; d[2] = 0;
    4860:	3403      	adds	r4, #3
  if (*dms != ':' && *dms != '*' && *dms != char(223)) return false; else dms++;
    4862:	f003 02ef 	and.w	r2, r3, #239	; 0xef
    4866:	2a2a      	cmp	r2, #42	; 0x2a
    4868:	d031      	beq.n	48ce <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0xee>
    486a:	2bdf      	cmp	r3, #223	; 0xdf
    486c:	d02f      	beq.n	48ce <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0xee>
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    486e:	2500      	movs	r5, #0
}
    4870:	4628      	mov	r0, r5
    4872:	b007      	add	sp, #28
    4874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    4878:	2f01      	cmp	r7, #1
  length = strlen(dms);
    487a:	b203      	sxth	r3, r0
  if (p == PM_HIGHEST || p == PM_HIGH) { if (length != 9 && length < 11) return false; } else
    487c:	d8d2      	bhi.n	4824 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x44>
    487e:	f1b3 0a09 	subs.w	sl, r3, #9
    4882:	bf18      	it	ne
    4884:	f04f 0a01 	movne.w	sl, #1
    4888:	2b0a      	cmp	r3, #10
    488a:	bfc8      	it	gt
    488c:	f04f 0a00 	movgt.w	sl, #0
    4890:	f1ba 0f00 	cmp.w	sl, #0
    4894:	d1eb      	bne.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
  if (signPresent) {
    4896:	2e00      	cmp	r6, #0
    4898:	d1cb      	bne.n	4832 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x52>
    d[0] = *dms++; d[1] = *dms++; d[2] = *dms++; d[3] = 0;
    489a:	7863      	ldrb	r3, [r4, #1]
    if (!atoi2(d, &deg, false)) return false;
    489c:	466a      	mov	r2, sp
    489e:	a901      	add	r1, sp, #4
    48a0:	4640      	mov	r0, r8
    d[0] = *dms++; d[1] = *dms++; d[2] = *dms++; d[3] = 0;
    48a2:	f88d 3005 	strb.w	r3, [sp, #5]
    48a6:	78a3      	ldrb	r3, [r4, #2]
    48a8:	f88d 5004 	strb.w	r5, [sp, #4]
    48ac:	f88d 3006 	strb.w	r3, [sp, #6]
    if (!atoi2(d, &deg, false)) return false;
    48b0:	4633      	mov	r3, r6
    d[0] = *dms++; d[1] = *dms++; d[2] = *dms++; d[3] = 0;
    48b2:	f88d 6007 	strb.w	r6, [sp, #7]
    if (!atoi2(d, &deg, false)) return false;
    48b6:	f7ff fdcd 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    48ba:	2800      	cmp	r0, #0
    48bc:	d0d7      	beq.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
  if (*dms != ':' && *dms != '*' && *dms != char(223)) return false; else dms++;
    48be:	78e3      	ldrb	r3, [r4, #3]
    d[0] = *dms++; d[1] = *dms++; d[2] = *dms++; d[3] = 0;
    48c0:	3403      	adds	r4, #3
  int16_t sign = 1, deg, minute, lowLimit = 0, highLimit = 360;
    48c2:	f04f 0b01 	mov.w	fp, #1
  if (*dms != ':' && *dms != '*' && *dms != char(223)) return false; else dms++;
    48c6:	f003 02ef 	and.w	r2, r3, #239	; 0xef
    48ca:	2a2a      	cmp	r2, #42	; 0x2a
    48cc:	d1cd      	bne.n	486a <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8a>
  m[0] = *dms++; m[1] = *dms++; m[2] = 0;
    48ce:	7862      	ldrb	r2, [r4, #1]
    48d0:	2300      	movs	r3, #0
  if (!atoi2(m, &minute, false)) return false;
    48d2:	a902      	add	r1, sp, #8
    48d4:	4640      	mov	r0, r8
  m[0] = *dms++; m[1] = *dms++; m[2] = 0;
    48d6:	f88d 2008 	strb.w	r2, [sp, #8]
    48da:	78a2      	ldrb	r2, [r4, #2]
    48dc:	f88d 300a 	strb.w	r3, [sp, #10]
    48e0:	f88d 2009 	strb.w	r2, [sp, #9]
  if (!atoi2(m, &minute, false)) return false;
    48e4:	f10d 0202 	add.w	r2, sp, #2
    48e8:	f7ff fdb4 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    48ec:	4605      	mov	r5, r0
    48ee:	2800      	cmp	r0, #0
    48f0:	d0bd      	beq.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
  if ((p == PM_HIGHEST || p == PM_HIGH) && !secondsOff) {
    48f2:	2f01      	cmp	r7, #1
    48f4:	d802      	bhi.n	48fc <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x11c>
    48f6:	f1ba 0f00 	cmp.w	sl, #0
    48fa:	d047      	beq.n	498c <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1ac>
  int16_t sign = 1, deg, minute, lowLimit = 0, highLimit = 360;
    48fc:	2e00      	cmp	r6, #0
  if (deg < lowLimit || deg > highLimit || minute < 0 || minute > 59 || second < 0 || second > 59.999) return false;
    48fe:	f9bd 3000 	ldrsh.w	r3, [sp]
  int16_t sign = 1, deg, minute, lowLimit = 0, highLimit = 360;
    4902:	bf15      	itete	ne
    4904:	f06f 0259 	mvnne.w	r2, #89	; 0x59
    4908:	2200      	moveq	r2, #0
    490a:	215a      	movne	r1, #90	; 0x5a
    490c:	f44f 71b4 	moveq.w	r1, #360	; 0x168
  if (deg < lowLimit || deg > highLimit || minute < 0 || minute > 59 || second < 0 || second > 59.999) return false;
    4910:	4293      	cmp	r3, r2
    4912:	dbac      	blt.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    4914:	428b      	cmp	r3, r1
    4916:	dcaa      	bgt.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    4918:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
    491c:	b291      	uxth	r1, r2
    491e:	293b      	cmp	r1, #59	; 0x3b
    4920:	d8a5      	bhi.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    4922:	ed9d 4b04 	vldr	d4, [sp, #16]
    4926:	eeb5 4bc0 	vcmpe.f64	d4, #0.0
    492a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    492e:	d49e      	bmi.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    4930:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 49b0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1d0>
    4934:	eeb4 4bc7 	vcmpe.f64	d4, d7
    4938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    493c:	dc97      	bgt.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
  *value = sign*(deg + minute/60.0 + second/3600.0);
    493e:	ee07 2a90 	vmov	s15, r2
    4942:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 49b8 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1d8>
    4946:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    494a:	ee07 3a90 	vmov	s15, r3
    494e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 49c0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1e0>
    4952:	ee85 3b01 	vdiv.f64	d3, d5, d1
    4956:	ee84 5b02 	vdiv.f64	d5, d4, d2
    495a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    495e:	ee07 ba90 	vmov	s15, fp
    4962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    4966:	ee33 6b06 	vadd.f64	d6, d3, d6
    496a:	ee36 6b05 	vadd.f64	d6, d6, d5
    496e:	ee26 7b07 	vmul.f64	d7, d6, d7
    4972:	ed89 7b00 	vstr	d7, [r9]
  return true;
    4976:	e77b      	b.n	4870 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x90>
    if (length == 6) secondsOff = true; else
    4978:	2806      	cmp	r0, #6
    497a:	f43f af59 	beq.w	4830 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x50>
    if (length == 9) secondsOff = false; else return false;
    497e:	2b09      	cmp	r3, #9
    4980:	f47f af75 	bne.w	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    4984:	e752      	b.n	482c <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x4c>
    if (*dms == '-') sign = -1; else if (*dms != '+') return false;
    4986:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    498a:	e759      	b.n	4840 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x60>
    if (*dms++ != ':' && *dms++ != '\'') return false;
    498c:	78e3      	ldrb	r3, [r4, #3]
    498e:	2b3a      	cmp	r3, #58	; 0x3a
    4990:	d00c      	beq.n	49ac <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1cc>
    4992:	7923      	ldrb	r3, [r4, #4]
    4994:	2b27      	cmp	r3, #39	; 0x27
    4996:	f47f af6a 	bne.w	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    499a:	1d61      	adds	r1, r4, #5
    if (!atof2(dms, &second, false)) return false;
    499c:	4640      	mov	r0, r8
    499e:	2300      	movs	r3, #0
    49a0:	aa04      	add	r2, sp, #16
    49a2:	f7ff fd9b 	bl	44dc <Convert::atof2(char*, double*, bool)>
    49a6:	2800      	cmp	r0, #0
    49a8:	d1a8      	bne.n	48fc <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x11c>
    49aa:	e760      	b.n	486e <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x8e>
    if (*dms++ != ':' && *dms++ != '\'') return false;
    49ac:	1d21      	adds	r1, r4, #4
    49ae:	e7f5      	b.n	499c <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)+0x1bc>
    49b0:	3b645a1d 	.word	0x3b645a1d
    49b4:	404dffdf 	.word	0x404dffdf
    49b8:	00000000 	.word	0x00000000
    49bc:	404e0000 	.word	0x404e0000
    49c0:	00000000 	.word	0x00000000
    49c4:	40ac2000 	.word	0x40ac2000

000049c8 <Convert::dmsToDouble(double*, char*, bool)>:
bool Convert::dmsToDouble(double *value, char *dms, bool signPresent) {
    49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!dmsToDouble(value, dms, signPresent, PM_HIGHEST))
    49ca:	2503      	movs	r5, #3
bool Convert::dmsToDouble(double *value, char *dms, bool signPresent) {
    49cc:	b083      	sub	sp, #12
    49ce:	4604      	mov	r4, r0
    49d0:	460f      	mov	r7, r1
  if (!dmsToDouble(value, dms, signPresent, PM_HIGHEST))
    49d2:	9500      	str	r5, [sp, #0]
bool Convert::dmsToDouble(double *value, char *dms, bool signPresent) {
    49d4:	4616      	mov	r6, r2
    49d6:	461d      	mov	r5, r3
  if (!dmsToDouble(value, dms, signPresent, PM_HIGHEST))
    49d8:	f7ff ff02 	bl	47e0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)>
    49dc:	b110      	cbz	r0, 49e4 <Convert::dmsToDouble(double*, char*, bool)+0x1c>
  return true;
    49de:	2001      	movs	r0, #1
}
    49e0:	b003      	add	sp, #12
    49e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!dmsToDouble(value, dms, signPresent, PM_HIGH))
    49e4:	2302      	movs	r3, #2
    49e6:	4632      	mov	r2, r6
    49e8:	4639      	mov	r1, r7
    49ea:	4620      	mov	r0, r4
    49ec:	9300      	str	r3, [sp, #0]
    49ee:	462b      	mov	r3, r5
    49f0:	f7ff fef6 	bl	47e0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)>
    49f4:	2800      	cmp	r0, #0
    49f6:	d1f2      	bne.n	49de <Convert::dmsToDouble(double*, char*, bool)+0x16>
      if (!dmsToDouble(value, dms, signPresent, PM_LOW)) return false;
    49f8:	f04f 0c01 	mov.w	ip, #1
    49fc:	462b      	mov	r3, r5
    49fe:	4632      	mov	r2, r6
    4a00:	4639      	mov	r1, r7
    4a02:	4620      	mov	r0, r4
    4a04:	f8cd c000 	str.w	ip, [sp]
    4a08:	f7ff feea 	bl	47e0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)>
}
    4a0c:	b003      	add	sp, #12
    4a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a10 <Gpio::init()>:

#if defined(GPIO_DEVICE) && GPIO_DEVICE == OFF

bool Gpio::init() {
  return true;
}
    4a10:	2001      	movs	r0, #1
    4a12:	4770      	bx	lr

00004a14 <Gpio::command(char*, char*, char*, bool*, bool*, CommandError*)>:
  UNUSED(parameter);
  UNUSED(supressFrame);
  UNUSED(numericReply);
  UNUSED(commandError);
  return false;
}
    4a14:	2000      	movs	r0, #0
    4a16:	4770      	bx	lr

00004a18 <NonVolatileStorage::writePageToStorage(unsigned short, unsigned char*, unsigned char)>:
    // write value j to position i in storage 
    virtual void writeToStorage(uint16_t i, uint8_t j);

    // write value j of count bytes to position starting at i in storage
    // these writes must be aligned with the page size!
    virtual void writePageToStorage(uint16_t i, uint8_t *j, uint8_t count) { writeToStorage(i, *j); (void)(count); }
    4a18:	6803      	ldr	r3, [r0, #0]
    4a1a:	7812      	ldrb	r2, [r2, #0]
    4a1c:	695b      	ldr	r3, [r3, #20]
    4a1e:	4718      	bx	r3

00004a20 <NonVolatileStorage::committed()>:

  // stop compiler warnings
  (void)(disableInterrupts);
}

bool NonVolatileStorage::committed() {
    4a20:	b570      	push	{r4, r5, r6, lr}
  cacheSizeDirtyCount = 0;
    4a22:	2100      	movs	r1, #0

  for (uint16_t i = 0; i < cacheSize; i++) {
    4a24:	8a05      	ldrh	r5, [r0, #16]
  cacheSizeDirtyCount = 0;
    4a26:	8481      	strh	r1, [r0, #36]	; 0x24
  for (uint16_t i = 0; i < cacheSize; i++) {
    4a28:	b1c5      	cbz	r5, 4a5c <NonVolatileStorage::committed()+0x3c>
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4a2a:	6a06      	ldr	r6, [r0, #32]
    4a2c:	468c      	mov	ip, r1
    4a2e:	460b      	mov	r3, r1
    4a30:	08da      	lsrs	r2, r3, #3
    4a32:	f003 0e07 	and.w	lr, r3, #7
  for (uint16_t i = 0; i < cacheSize; i++) {
    4a36:	3101      	adds	r1, #1
      cacheSizeDirtyCount++;
    4a38:	f10c 0401 	add.w	r4, ip, #1
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4a3c:	5cb2      	ldrb	r2, [r6, r2]
  for (uint16_t i = 0; i < cacheSize; i++) {
    4a3e:	b28b      	uxth	r3, r1
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4a40:	fa42 f20e 	asr.w	r2, r2, lr
    4a44:	07d2      	lsls	r2, r2, #31
    4a46:	d503      	bpl.n	4a50 <NonVolatileStorage::committed()+0x30>
      cacheSizeDirtyCount++;
    4a48:	fa1f fc84 	uxth.w	ip, r4
    4a4c:	f8a0 c024 	strh.w	ip, [r0, #36]	; 0x24
  for (uint16_t i = 0; i < cacheSize; i++) {
    4a50:	429d      	cmp	r5, r3
    4a52:	d8ed      	bhi.n	4a30 <NonVolatileStorage::committed()+0x10>
    }
  }

  return !cacheSizeDirtyCount;
    4a54:	fabc f08c 	clz	r0, ip
    4a58:	0940      	lsrs	r0, r0, #5
}
    4a5a:	bd70      	pop	{r4, r5, r6, pc}
  for (uint16_t i = 0; i < cacheSize; i++) {
    4a5c:	2001      	movs	r0, #1
}
    4a5e:	bd70      	pop	{r4, r5, r6, pc}

00004a60 <NonVolatileStorage::busy()>:
  }
}

bool NonVolatileStorage::busy() {
  return false;
}
    4a60:	2000      	movs	r0, #0
    4a62:	4770      	bx	lr

00004a64 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)>:
bool NonVolatileStorage::init(uint16_t size, bool cacheEnable, uint16_t wait, bool checkEnable, TwoWire* wire, uint8_t address) {
    4a64:	b510      	push	{r4, lr}
    4a66:	4604      	mov	r4, r0
  this->size = size;
    4a68:	8081      	strh	r1, [r0, #4]
  if (cacheEnable) cacheSize = size; else cacheSize = 0;
    4a6a:	b95a      	cbnz	r2, 4a84 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)+0x20>
  if (waitMs == 0) delayedCommitEnabled = false; else delayedCommitEnabled = true;
    4a6c:	1e18      	subs	r0, r3, #0
  cacheStateSize = cacheSize/8 + 1;
    4a6e:	f04f 0101 	mov.w	r1, #1
    4a72:	8222      	strh	r2, [r4, #16]
  if (waitMs == 0) delayedCommitEnabled = false; else delayedCommitEnabled = true;
    4a74:	bf18      	it	ne
    4a76:	2001      	movne	r0, #1
  waitMs = wait;
    4a78:	62a3      	str	r3, [r4, #40]	; 0x28
  cacheStateSize = cacheSize/8 + 1;
    4a7a:	8321      	strh	r1, [r4, #24]
  if (waitMs == 0) delayedCommitEnabled = false; else delayedCommitEnabled = true;
    4a7c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
}
    4a80:	2001      	movs	r0, #1
    4a82:	bd10      	pop	{r4, pc}
  cacheStateSize = cacheSize/8 + 1;
    4a84:	08ca      	lsrs	r2, r1, #3
  if (waitMs == 0) delayedCommitEnabled = false; else delayedCommitEnabled = true;
    4a86:	1e18      	subs	r0, r3, #0
  waitMs = wait;
    4a88:	62a3      	str	r3, [r4, #40]	; 0x28
  cacheStateSize = cacheSize/8 + 1;
    4a8a:	4613      	mov	r3, r2
  if (waitMs == 0) delayedCommitEnabled = false; else delayedCommitEnabled = true;
    4a8c:	bf18      	it	ne
    4a8e:	2001      	movne	r0, #1
    4a90:	8221      	strh	r1, [r4, #16]
  cacheStateSize = cacheSize/8 + 1;
    4a92:	3301      	adds	r3, #1
  if (waitMs == 0) delayedCommitEnabled = false; else delayedCommitEnabled = true;
    4a94:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  cacheStateSize = cacheSize/8 + 1;
    4a98:	8323      	strh	r3, [r4, #24]
  if (cacheSize == 0) return true;
    4a9a:	2900      	cmp	r1, #0
    4a9c:	d0f0      	beq.n	4a80 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)+0x1c>
  cache = new uint8_t[cacheSize];
    4a9e:	4608      	mov	r0, r1
    4aa0:	f013 fdb0 	bl	18604 <operator new[](unsigned int)>
    4aa4:	4603      	mov	r3, r0
  cacheStateRead  = new uint8_t[cacheStateSize];
    4aa6:	8b20      	ldrh	r0, [r4, #24]
  cache = new uint8_t[cacheSize];
    4aa8:	6163      	str	r3, [r4, #20]
  cacheStateRead  = new uint8_t[cacheStateSize];
    4aaa:	f013 fdab 	bl	18604 <operator new[](unsigned int)>
    4aae:	4603      	mov	r3, r0
  cacheStateWrite = new uint8_t[cacheStateSize];
    4ab0:	8b20      	ldrh	r0, [r4, #24]
  cacheStateRead  = new uint8_t[cacheStateSize];
    4ab2:	61e3      	str	r3, [r4, #28]
  cacheStateWrite = new uint8_t[cacheStateSize];
    4ab4:	f013 fda6 	bl	18604 <operator new[](unsigned int)>
  for (uint16_t i = 0; i < cacheStateSize; i++) cacheStateRead[i] = 255;
    4ab8:	8b23      	ldrh	r3, [r4, #24]
  cacheStateWrite = new uint8_t[cacheStateSize];
    4aba:	6220      	str	r0, [r4, #32]
  for (uint16_t i = 0; i < cacheStateSize; i++) cacheStateRead[i] = 255;
    4abc:	2b00      	cmp	r3, #0
    4abe:	d0df      	beq.n	4a80 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)+0x1c>
    4ac0:	2300      	movs	r3, #0
    4ac2:	20ff      	movs	r0, #255	; 0xff
    4ac4:	b29a      	uxth	r2, r3
    4ac6:	69e1      	ldr	r1, [r4, #28]
    4ac8:	3301      	adds	r3, #1
    4aca:	5488      	strb	r0, [r1, r2]
    4acc:	b299      	uxth	r1, r3
    4ace:	8b22      	ldrh	r2, [r4, #24]
    4ad0:	428a      	cmp	r2, r1
    4ad2:	d8f7      	bhi.n	4ac4 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)+0x60>
  for (uint16_t i = 0; i < cacheStateSize; i++) cacheStateWrite[i] = 0;
    4ad4:	2a00      	cmp	r2, #0
    4ad6:	d0d3      	beq.n	4a80 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)+0x1c>
    4ad8:	2300      	movs	r3, #0
    4ada:	4618      	mov	r0, r3
    4adc:	b29a      	uxth	r2, r3
    4ade:	6a21      	ldr	r1, [r4, #32]
    4ae0:	3301      	adds	r3, #1
    4ae2:	5488      	strb	r0, [r1, r2]
    4ae4:	b29a      	uxth	r2, r3
    4ae6:	8b21      	ldrh	r1, [r4, #24]
    4ae8:	4291      	cmp	r1, r2
    4aea:	d8f7      	bhi.n	4adc <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)+0x78>
}
    4aec:	2001      	movs	r0, #1
    4aee:	bd10      	pop	{r4, pc}

00004af0 <NonVolatileStorage::poll(bool)>:
  if (cacheSize == 0 || cacheClean) return;
    4af0:	8a01      	ldrh	r1, [r0, #16]
    4af2:	2900      	cmp	r1, #0
    4af4:	d052      	beq.n	4b9c <NonVolatileStorage::poll(bool)+0xac>
void NonVolatileStorage::poll(bool disableInterrupts) {
    4af6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cacheSize == 0 || cacheClean) return;
    4afa:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
    4afe:	4605      	mov	r5, r0
    4b00:	bbb3      	cbnz	r3, 4b70 <NonVolatileStorage::poll(bool)+0x80>
  if (busy()) return;
    4b02:	6803      	ldr	r3, [r0, #0]
    4b04:	4a5c      	ldr	r2, [pc, #368]	; (4c78 <NonVolatileStorage::poll(bool)+0x188>)
    4b06:	68db      	ldr	r3, [r3, #12]
    4b08:	4293      	cmp	r3, r2
    4b0a:	f040 8082 	bne.w	4c12 <NonVolatileStorage::poll(bool)+0x122>
    if (!delayedCommitEnabled || (long)(millis() - commitReadyTimeMs) >= 0)
    4b0e:	f895 602d 	ldrb.w	r6, [r5, #45]	; 0x2d
    cacheIndex++;
    4b12:	2214      	movs	r2, #20
    dirtyR = bitRead(cacheStateRead[cacheIndex/8], cacheIndex%8);
    4b14:	69e8      	ldr	r0, [r5, #28]
      cacheIndex = 0;
    4b16:	f04f 0e00 	mov.w	lr, #0
    cacheIndex++;
    4b1a:	89ec      	ldrh	r4, [r5, #14]
      cacheCleanThisPass = true;
    4b1c:	f04f 0c01 	mov.w	ip, #1
    4b20:	f8df b15c 	ldr.w	fp, [pc, #348]	; 4c80 <NonVolatileStorage::poll(bool)+0x190>
    cacheIndex++;
    4b24:	3401      	adds	r4, #1
    4b26:	b2a4      	uxth	r4, r4
    if (cacheIndex >= cacheSize) {
    4b28:	428c      	cmp	r4, r1
    cacheIndex++;
    4b2a:	81ec      	strh	r4, [r5, #14]
    if (cacheIndex >= cacheSize) {
    4b2c:	d222      	bcs.n	4b74 <NonVolatileStorage::poll(bool)+0x84>
      dirtyW = bitRead(cacheStateWrite[cacheIndex/8], cacheIndex%8); else cacheCleanThisPass = false;
    4b2e:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    4b32:	f004 0907 	and.w	r9, r4, #7
    dirtyR = bitRead(cacheStateRead[cacheIndex/8], cacheIndex%8);
    4b36:	eb00 0ad4 	add.w	sl, r0, r4, lsr #3
    if (!delayedCommitEnabled || (long)(millis() - commitReadyTimeMs) >= 0)
    4b3a:	b12e      	cbz	r6, 4b48 <NonVolatileStorage::poll(bool)+0x58>
    4b3c:	f8db 3000 	ldr.w	r3, [fp]
    4b40:	6b2f      	ldr	r7, [r5, #48]	; 0x30
    4b42:	1bdb      	subs	r3, r3, r7
    4b44:	2b00      	cmp	r3, #0
    4b46:	db24      	blt.n	4b92 <NonVolatileStorage::poll(bool)+0xa2>
      dirtyW = bitRead(cacheStateWrite[cacheIndex/8], cacheIndex%8); else cacheCleanThisPass = false;
    4b48:	6a2b      	ldr	r3, [r5, #32]
    4b4a:	f813 8008 	ldrb.w	r8, [r3, r8]
    4b4e:	fa48 f809 	asr.w	r8, r8, r9
    4b52:	f008 0801 	and.w	r8, r8, #1
    dirtyR = bitRead(cacheStateRead[cacheIndex/8], cacheIndex%8);
    4b56:	f89a 3000 	ldrb.w	r3, [sl]
    4b5a:	fa43 f309 	asr.w	r3, r3, r9
    4b5e:	f003 0301 	and.w	r3, r3, #1
    if (dirtyW || dirtyR) { cacheCleanThisPass = false; break; }
    4b62:	ea58 0303 	orrs.w	r3, r8, r3
    4b66:	d11a      	bne.n	4b9e <NonVolatileStorage::poll(bool)+0xae>
  for (uint8_t j = 0; j < 20; j++) {
    4b68:	3a01      	subs	r2, #1
    4b6a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4b6e:	d1d9      	bne.n	4b24 <NonVolatileStorage::poll(bool)+0x34>
}
    4b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cacheCleanThisPass) cacheClean = true;
    4b74:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    4b78:	b10b      	cbz	r3, 4b7e <NonVolatileStorage::poll(bool)+0x8e>
    4b7a:	f885 c02f 	strb.w	ip, [r5, #47]	; 0x2f
      cacheIndex = 0;
    4b7e:	f04f 0900 	mov.w	r9, #0
    4b82:	4682      	mov	sl, r0
    4b84:	f8a5 e00e 	strh.w	lr, [r5, #14]
      cacheCleanThisPass = true;
    4b88:	46c8      	mov	r8, r9
    4b8a:	464c      	mov	r4, r9
    4b8c:	f885 c02e 	strb.w	ip, [r5, #46]	; 0x2e
    4b90:	e7d3      	b.n	4b3a <NonVolatileStorage::poll(bool)+0x4a>
      dirtyW = bitRead(cacheStateWrite[cacheIndex/8], cacheIndex%8); else cacheCleanThisPass = false;
    4b92:	f04f 0800 	mov.w	r8, #0
    4b96:	f885 e02e 	strb.w	lr, [r5, #46]	; 0x2e
    4b9a:	e7dc      	b.n	4b56 <NonVolatileStorage::poll(bool)+0x66>
    4b9c:	4770      	bx	lr
    if (dirtyW || dirtyR) { cacheCleanThisPass = false; break; }
    4b9e:	2300      	movs	r3, #0
    4ba0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
  if (dirtyW) {
    4ba4:	f1b8 0f00 	cmp.w	r8, #0
    4ba8:	d01f      	beq.n	4bea <NonVolatileStorage::poll(bool)+0xfa>
    uint16_t p = pageWriteSize;
    4baa:	f8d5 c008 	ldr.w	ip, [r5, #8]
    4bae:	fa1f f68c 	uxth.w	r6, ip
    if ((cacheIndex % p) != 0) p = 1; else
    4bb2:	fbb4 f3f6 	udiv	r3, r4, r6
    4bb6:	fb06 4313 	mls	r3, r6, r3, r4
    4bba:	b29b      	uxth	r3, r3
    4bbc:	bb73      	cbnz	r3, 4c1c <NonVolatileStorage::poll(bool)+0x12c>
    for (uint16_t k = 0; k < p; k++) {
    4bbe:	b196      	cbz	r6, 4be6 <NonVolatileStorage::poll(bool)+0xf6>
    4bc0:	4623      	mov	r3, r4
    4bc2:	fa14 fe8c 	uxtah	lr, r4, ip
    4bc6:	e005      	b.n	4bd4 <NonVolatileStorage::poll(bool)+0xe4>
      if (bitRead(cacheStateRead[(cacheIndex + k)/8], (cacheIndex + k)%8)) { p = 1; break; }
    4bc8:	5c82      	ldrb	r2, [r0, r2]
    4bca:	413a      	asrs	r2, r7
    4bcc:	07d2      	lsls	r2, r2, #31
    4bce:	d409      	bmi.n	4be4 <NonVolatileStorage::poll(bool)+0xf4>
    for (uint16_t k = 0; k < p; k++) {
    4bd0:	459e      	cmp	lr, r3
    4bd2:	d04d      	beq.n	4c70 <NonVolatileStorage::poll(bool)+0x180>
      if (cacheIndex + k >= cacheSize) { p = 1; break; }
    4bd4:	428b      	cmp	r3, r1
      if (bitRead(cacheStateRead[(cacheIndex + k)/8], (cacheIndex + k)%8)) { p = 1; break; }
    4bd6:	ea4f 02e3 	mov.w	r2, r3, asr #3
    4bda:	f003 0707 	and.w	r7, r3, #7
    for (uint16_t k = 0; k < p; k++) {
    4bde:	f103 0301 	add.w	r3, r3, #1
      if (cacheIndex + k >= cacheSize) { p = 1; break; }
    4be2:	dbf1      	blt.n	4bc8 <NonVolatileStorage::poll(bool)+0xd8>
    4be4:	2601      	movs	r6, #1
    if ((cacheIndex % p) != 0) p = 1; else
    4be6:	4633      	mov	r3, r6
    4be8:	e01a      	b.n	4c20 <NonVolatileStorage::poll(bool)+0x130>
      cache[cacheIndex] = readFromStorage(cacheIndex);
    4bea:	682b      	ldr	r3, [r5, #0]
    4bec:	4621      	mov	r1, r4
    4bee:	696e      	ldr	r6, [r5, #20]
    4bf0:	4628      	mov	r0, r5
    4bf2:	691b      	ldr	r3, [r3, #16]
    4bf4:	4798      	blx	r3
    4bf6:	5530      	strb	r0, [r6, r4]
      bitWrite(cacheStateRead[cacheIndex/8], cacheIndex%8, 0);
    4bf8:	89eb      	ldrh	r3, [r5, #14]
    4bfa:	2101      	movs	r1, #1
    4bfc:	69ec      	ldr	r4, [r5, #28]
    4bfe:	08d8      	lsrs	r0, r3, #3
    4c00:	f003 0307 	and.w	r3, r3, #7
    4c04:	5c22      	ldrb	r2, [r4, r0]
    4c06:	fa01 f303 	lsl.w	r3, r1, r3
    4c0a:	ea22 0303 	bic.w	r3, r2, r3
    4c0e:	5423      	strb	r3, [r4, r0]
  (void)(disableInterrupts);
    4c10:	e7ae      	b.n	4b70 <NonVolatileStorage::poll(bool)+0x80>
  if (busy()) return;
    4c12:	4798      	blx	r3
    4c14:	2800      	cmp	r0, #0
    4c16:	d1ab      	bne.n	4b70 <NonVolatileStorage::poll(bool)+0x80>
    if (cacheIndex >= cacheSize) {
    4c18:	8a29      	ldrh	r1, [r5, #16]
    4c1a:	e778      	b.n	4b0e <NonVolatileStorage::poll(bool)+0x1e>
    4c1c:	2301      	movs	r3, #1
    if ((cacheIndex % p) != 0) p = 1; else
    4c1e:	461e      	mov	r6, r3
    writePageToStorage(cacheIndex, &cache[cacheIndex], p);
    4c20:	6828      	ldr	r0, [r5, #0]
    4c22:	4a16      	ldr	r2, [pc, #88]	; (4c7c <NonVolatileStorage::poll(bool)+0x18c>)
    4c24:	6987      	ldr	r7, [r0, #24]
    4c26:	6969      	ldr	r1, [r5, #20]
    4c28:	4297      	cmp	r7, r2
    4c2a:	eb01 0c04 	add.w	ip, r1, r4
    4c2e:	d11a      	bne.n	4c66 <NonVolatileStorage::poll(bool)+0x176>
    4c30:	6943      	ldr	r3, [r0, #20]
    4c32:	4628      	mov	r0, r5
    4c34:	5d0a      	ldrb	r2, [r1, r4]
    4c36:	4621      	mov	r1, r4
    4c38:	4798      	blx	r3
    for (uint16_t k = 0; k < p; k++) {
    4c3a:	2e00      	cmp	r6, #0
    4c3c:	d098      	beq.n	4b70 <NonVolatileStorage::poll(bool)+0x80>
    4c3e:	2200      	movs	r2, #0
      bitWrite(cacheStateWrite[(cacheIndex + k)/8], (cacheIndex + k)%8, 0);
    4c40:	2701      	movs	r7, #1
    4c42:	89eb      	ldrh	r3, [r5, #14]
    4c44:	6a2c      	ldr	r4, [r5, #32]
    4c46:	4413      	add	r3, r2
    for (uint16_t k = 0; k < p; k++) {
    4c48:	3201      	adds	r2, #1
      bitWrite(cacheStateWrite[(cacheIndex + k)/8], (cacheIndex + k)%8, 0);
    4c4a:	10d8      	asrs	r0, r3, #3
    4c4c:	f003 0307 	and.w	r3, r3, #7
    4c50:	5c21      	ldrb	r1, [r4, r0]
    4c52:	fa07 f303 	lsl.w	r3, r7, r3
    4c56:	ea21 0303 	bic.w	r3, r1, r3
    4c5a:	5423      	strb	r3, [r4, r0]
    for (uint16_t k = 0; k < p; k++) {
    4c5c:	b293      	uxth	r3, r2
    4c5e:	429e      	cmp	r6, r3
    4c60:	d8ef      	bhi.n	4c42 <NonVolatileStorage::poll(bool)+0x152>
}
    4c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writePageToStorage(cacheIndex, &cache[cacheIndex], p);
    4c66:	4662      	mov	r2, ip
    4c68:	4621      	mov	r1, r4
    4c6a:	4628      	mov	r0, r5
    4c6c:	47b8      	blx	r7
    4c6e:	e7e4      	b.n	4c3a <NonVolatileStorage::poll(bool)+0x14a>
    4c70:	fa5f f38c 	uxtb.w	r3, ip
    4c74:	e7d4      	b.n	4c20 <NonVolatileStorage::poll(bool)+0x130>
    4c76:	bf00      	nop
    4c78:	00004a61 	.word	0x00004a61
    4c7c:	00004a19 	.word	0x00004a19
    4c80:	20006344 	.word	0x20006344

00004c84 <NonVolatileStorage::wait()>:
void NonVolatileStorage::wait() {
    4c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  committed();
    4c88:	f8d0 e000 	ldr.w	lr, [r0]
void NonVolatileStorage::wait() {
    4c8c:	4681      	mov	r9, r0
    4c8e:	4d33      	ldr	r5, [pc, #204]	; (4d5c <NonVolatileStorage::wait()+0xd8>)
  committed();
    4c90:	f8de 1008 	ldr.w	r1, [lr, #8]
    4c94:	42a9      	cmp	r1, r5
    4c96:	d15b      	bne.n	4d50 <NonVolatileStorage::wait()+0xcc>
  cacheSizeDirtyCount = 0;
    4c98:	2000      	movs	r0, #0
  for (uint16_t i = 0; i < cacheSize; i++) {
    4c9a:	f8b9 6010 	ldrh.w	r6, [r9, #16]
  cacheSizeDirtyCount = 0;
    4c9e:	f8a9 0024 	strh.w	r0, [r9, #36]	; 0x24
  for (uint16_t i = 0; i < cacheSize; i++) {
    4ca2:	b196      	cbz	r6, 4cca <NonVolatileStorage::wait()+0x46>
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4ca4:	f8d9 7020 	ldr.w	r7, [r9, #32]
    4ca8:	4603      	mov	r3, r0
    4caa:	08da      	lsrs	r2, r3, #3
    4cac:	f003 0407 	and.w	r4, r3, #7
  for (uint16_t i = 0; i < cacheSize; i++) {
    4cb0:	3001      	adds	r0, #1
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4cb2:	5cba      	ldrb	r2, [r7, r2]
  for (uint16_t i = 0; i < cacheSize; i++) {
    4cb4:	b283      	uxth	r3, r0
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4cb6:	4122      	asrs	r2, r4
    4cb8:	07d4      	lsls	r4, r2, #31
    4cba:	d504      	bpl.n	4cc6 <NonVolatileStorage::wait()+0x42>
      cacheSizeDirtyCount++;
    4cbc:	f8b9 2024 	ldrh.w	r2, [r9, #36]	; 0x24
    4cc0:	3201      	adds	r2, #1
    4cc2:	f8a9 2024 	strh.w	r2, [r9, #36]	; 0x24
  for (uint16_t i = 0; i < cacheSize; i++) {
    4cc6:	429e      	cmp	r6, r3
    4cc8:	d8ef      	bhi.n	4caa <NonVolatileStorage::wait()+0x26>
    4cca:	4e25      	ldr	r6, [pc, #148]	; (4d60 <NonVolatileStorage::wait()+0xdc>)
    4ccc:	42a9      	cmp	r1, r5
    if ((long)(millis() - startTime) > 180000) {
    4cce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4d64 <NonVolatileStorage::wait()+0xe0>
    4cd2:	6837      	ldr	r7, [r6, #0]
  while (!committed()) {
    4cd4:	d131      	bne.n	4d3a <NonVolatileStorage::wait()+0xb6>
  cacheSizeDirtyCount = 0;
    4cd6:	f04f 0300 	mov.w	r3, #0
  for (uint16_t i = 0; i < cacheSize; i++) {
    4cda:	f8b9 c010 	ldrh.w	ip, [r9, #16]
  cacheSizeDirtyCount = 0;
    4cde:	f8a9 3024 	strh.w	r3, [r9, #36]	; 0x24
  for (uint16_t i = 0; i < cacheSize; i++) {
    4ce2:	f1bc 0f00 	cmp.w	ip, #0
    4ce6:	d031      	beq.n	4d4c <NonVolatileStorage::wait()+0xc8>
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4ce8:	2100      	movs	r1, #0
    4cea:	f8d9 a020 	ldr.w	sl, [r9, #32]
    4cee:	4608      	mov	r0, r1
    4cf0:	460b      	mov	r3, r1
    4cf2:	08da      	lsrs	r2, r3, #3
    4cf4:	f003 0b07 	and.w	fp, r3, #7
  for (uint16_t i = 0; i < cacheSize; i++) {
    4cf8:	3101      	adds	r1, #1
      cacheSizeDirtyCount++;
    4cfa:	1c44      	adds	r4, r0, #1
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4cfc:	f81a 2002 	ldrb.w	r2, [sl, r2]
  for (uint16_t i = 0; i < cacheSize; i++) {
    4d00:	b28b      	uxth	r3, r1
    if (bitRead(cacheStateWrite[i/8], i%8)) {
    4d02:	fa42 f20b 	asr.w	r2, r2, fp
    4d06:	07d2      	lsls	r2, r2, #31
    4d08:	d502      	bpl.n	4d10 <NonVolatileStorage::wait()+0x8c>
      cacheSizeDirtyCount++;
    4d0a:	b2a0      	uxth	r0, r4
    4d0c:	f8a9 0024 	strh.w	r0, [r9, #36]	; 0x24
  for (uint16_t i = 0; i < cacheSize; i++) {
    4d10:	459c      	cmp	ip, r3
    4d12:	d8ee      	bhi.n	4cf2 <NonVolatileStorage::wait()+0x6e>
  while (!committed()) {
    4d14:	b1d0      	cbz	r0, 4d4c <NonVolatileStorage::wait()+0xc8>
    poll(false);
    4d16:	f8de 3004 	ldr.w	r3, [lr, #4]
    4d1a:	2100      	movs	r1, #0
    4d1c:	4648      	mov	r0, r9
    4d1e:	4798      	blx	r3
    delay(1);
    4d20:	2001      	movs	r0, #1
    4d22:	f013 fa31 	bl	18188 <delay>
    4d26:	6833      	ldr	r3, [r6, #0]
    if ((long)(millis() - startTime) > 180000) {
    4d28:	1bdb      	subs	r3, r3, r7
    4d2a:	4543      	cmp	r3, r8
    4d2c:	dc0b      	bgt.n	4d46 <NonVolatileStorage::wait()+0xc2>
  while (!committed()) {
    4d2e:	f8d9 e000 	ldr.w	lr, [r9]
    4d32:	f8de 1008 	ldr.w	r1, [lr, #8]
    4d36:	42a9      	cmp	r1, r5
    4d38:	d0cd      	beq.n	4cd6 <NonVolatileStorage::wait()+0x52>
    4d3a:	4648      	mov	r0, r9
    4d3c:	4788      	blx	r1
    4d3e:	b928      	cbnz	r0, 4d4c <NonVolatileStorage::wait()+0xc8>
    poll(false);
    4d40:	f8d9 e000 	ldr.w	lr, [r9]
    4d44:	e7e7      	b.n	4d16 <NonVolatileStorage::wait()+0x92>
      initError = true;
    4d46:	2301      	movs	r3, #1
    4d48:	f889 3006 	strb.w	r3, [r9, #6]
}
    4d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  committed();
    4d50:	4788      	blx	r1
  while (!committed()) {
    4d52:	f8d9 e000 	ldr.w	lr, [r9]
    4d56:	f8de 1008 	ldr.w	r1, [lr, #8]
    4d5a:	e7b6      	b.n	4cca <NonVolatileStorage::wait()+0x46>
    4d5c:	00004a21 	.word	0x00004a21
    4d60:	20006344 	.word	0x20006344
    4d64:	0002bf20 	.word	0x0002bf20

00004d68 <NonVolatileStorage::ignoreCache(bool)>:
  readAndWriteThrough = state;
    4d68:	7301      	strb	r1, [r0, #12]
}
    4d6a:	4770      	bx	lr

00004d6c <NonVolatileStorage::readFromCache(unsigned short)>:
  if (cacheSize == 0 || readAndWriteThrough) return readFromStorage(i);
    4d6c:	8a03      	ldrh	r3, [r0, #16]
uint8_t NonVolatileStorage::readFromCache(uint16_t i) {
    4d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d72:	4604      	mov	r4, r0
    4d74:	460d      	mov	r5, r1
  if (cacheSize == 0 || readAndWriteThrough) return readFromStorage(i);
    4d76:	b10b      	cbz	r3, 4d7c <NonVolatileStorage::readFromCache(unsigned short)+0x10>
    4d78:	7b03      	ldrb	r3, [r0, #12]
    4d7a:	b133      	cbz	r3, 4d8a <NonVolatileStorage::readFromCache(unsigned short)+0x1e>
    4d7c:	6823      	ldr	r3, [r4, #0]
    4d7e:	4629      	mov	r1, r5
    4d80:	4620      	mov	r0, r4
    4d82:	691b      	ldr	r3, [r3, #16]
}
    4d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (cacheSize == 0 || readAndWriteThrough) return readFromStorage(i);
    4d88:	4718      	bx	r3
  uint8_t dirty = bitRead(cacheStateRead[i/8], i%8);
    4d8a:	08ce      	lsrs	r6, r1, #3
    4d8c:	69c3      	ldr	r3, [r0, #28]
    4d8e:	f001 0707 	and.w	r7, r1, #7
    4d92:	5d9b      	ldrb	r3, [r3, r6]
    4d94:	413b      	asrs	r3, r7
  if (dirty) {
    4d96:	07db      	lsls	r3, r3, #31
    4d98:	d403      	bmi.n	4da2 <NonVolatileStorage::readFromCache(unsigned short)+0x36>
  } else return cache[i];
    4d9a:	6943      	ldr	r3, [r0, #20]
    4d9c:	5c58      	ldrb	r0, [r3, r1]
}
    4d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t j = readFromStorage(i);
    4da2:	6803      	ldr	r3, [r0, #0]
    4da4:	691b      	ldr	r3, [r3, #16]
    4da6:	4798      	blx	r3
    cache[i] = j;
    4da8:	6963      	ldr	r3, [r4, #20]
    bitWrite(cacheStateRead[i/8], i%8, 0);
    4daa:	2201      	movs	r2, #1
    cache[i] = j;
    4dac:	5558      	strb	r0, [r3, r5]
    bitWrite(cacheStateRead[i/8], i%8, 0);
    4dae:	69e1      	ldr	r1, [r4, #28]
    4db0:	40ba      	lsls	r2, r7
    4db2:	5d8b      	ldrb	r3, [r1, r6]
    4db4:	ea23 0302 	bic.w	r3, r3, r2
    4db8:	558b      	strb	r3, [r1, r6]
}
    4dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dbe:	bf00      	nop

00004dc0 <NonVolatileStorage::isKeyValid(unsigned long)>:
bool NonVolatileStorage::isKeyValid(uint32_t uniqueKey) {
    4dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dc4:	b082      	sub	sp, #8
    readAndWriteThrough = true;
    4dc6:	2301      	movs	r3, #1
    4dc8:	2400      	movs	r4, #0
bool NonVolatileStorage::isKeyValid(uint32_t uniqueKey) {
    4dca:	4606      	mov	r6, r0
    4dcc:	460f      	mov	r7, r1
    readAndWriteThrough = true;
    4dce:	ad01      	add	r5, sp, #4
    bool state = readAndWriteThrough;
    4dd0:	f890 800c 	ldrb.w	r8, [r0, #12]
    readAndWriteThrough = true;
    4dd4:	7303      	strb	r3, [r0, #12]
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4dd6:	b2a1      	uxth	r1, r4
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4dd8:	3401      	adds	r4, #1
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4dda:	4630      	mov	r0, r6
    4ddc:	f7ff ffc6 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4de0:	2c04      	cmp	r4, #4
    4de2:	f805 0b01 	strb.w	r0, [r5], #1
    4de6:	d1f6      	bne.n	4dd6 <NonVolatileStorage::isKeyValid(unsigned long)+0x16>
uint32_t NonVolatileStorage::readUL(uint16_t i) { uint32_t j; readBytes(i, (uint8_t*)&j, sizeof(uint32_t)); return j; }
    4de8:	9b01      	ldr	r3, [sp, #4]
    readAndWriteThrough = state;
    4dea:	f886 800c 	strb.w	r8, [r6, #12]
    keyMatches = readUL(0) == uniqueKey;
    4dee:	1af8      	subs	r0, r7, r3
    4df0:	fab0 f080 	clz	r0, r0
    4df4:	0940      	lsrs	r0, r0, #5
    4df6:	f886 002c 	strb.w	r0, [r6, #44]	; 0x2c
};
    4dfa:	b002      	add	sp, #8
    4dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>:
  cacheClean = false;
    4e00:	2300      	movs	r3, #0
void NonVolatileStorage::writeToCache(uint16_t i, uint8_t j) {
    4e02:	b570      	push	{r4, r5, r6, lr}
  cacheClean = false;
    4e04:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
void NonVolatileStorage::writeToCache(uint16_t i, uint8_t j) {
    4e08:	4604      	mov	r4, r0
  if (readAndWriteThrough) if (!readOnlyMode) writeToStorage(i, j);
    4e0a:	7b03      	ldrb	r3, [r0, #12]
void NonVolatileStorage::writeToCache(uint16_t i, uint8_t j) {
    4e0c:	460d      	mov	r5, r1
    4e0e:	4616      	mov	r6, r2
  if (readAndWriteThrough) if (!readOnlyMode) writeToStorage(i, j);
    4e10:	b123      	cbz	r3, 4e1c <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x1c>
    4e12:	7b43      	ldrb	r3, [r0, #13]
    4e14:	b9b3      	cbnz	r3, 4e44 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x44>
    4e16:	6803      	ldr	r3, [r0, #0]
    4e18:	695b      	ldr	r3, [r3, #20]
    4e1a:	4798      	blx	r3
  if (cacheSize == 0) {
    4e1c:	8a23      	ldrh	r3, [r4, #16]
    4e1e:	b99b      	cbnz	r3, 4e48 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x48>
    if (!readOnlyMode) {
    4e20:	7b63      	ldrb	r3, [r4, #13]
    4e22:	bb43      	cbnz	r3, 4e76 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x76>
      if (!readAndWriteThrough) {
    4e24:	7b23      	ldrb	r3, [r4, #12]
    4e26:	b933      	cbnz	r3, 4e36 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x36>
        if (j != readFromStorage(i)) writeToStorage(i, j);
    4e28:	6823      	ldr	r3, [r4, #0]
    4e2a:	4629      	mov	r1, r5
    4e2c:	4620      	mov	r0, r4
    4e2e:	691b      	ldr	r3, [r3, #16]
    4e30:	4798      	blx	r3
    4e32:	42b0      	cmp	r0, r6
    4e34:	d01f      	beq.n	4e76 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x76>
      } else writeToStorage(i, j);
    4e36:	6823      	ldr	r3, [r4, #0]
    4e38:	4632      	mov	r2, r6
    4e3a:	4629      	mov	r1, r5
    4e3c:	4620      	mov	r0, r4
    4e3e:	695b      	ldr	r3, [r3, #20]
    4e40:	4798      	blx	r3
    4e42:	e018      	b.n	4e76 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x76>
  if (cacheSize == 0) {
    4e44:	8a03      	ldrh	r3, [r0, #16]
    4e46:	b1b3      	cbz	r3, 4e76 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x76>
  uint8_t k = readFromCache(i);
    4e48:	4629      	mov	r1, r5
    4e4a:	4620      	mov	r0, r4
    4e4c:	f7ff ff8e 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
  if (j != k) {
    4e50:	4286      	cmp	r6, r0
    4e52:	d010      	beq.n	4e76 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x76>
    cache[i] = j;
    4e54:	6963      	ldr	r3, [r4, #20]
    bitWrite(cacheStateWrite[i/8], i%8, 1);
    4e56:	f005 0107 	and.w	r1, r5, #7
    4e5a:	08ea      	lsrs	r2, r5, #3
    cache[i] = j;
    4e5c:	555e      	strb	r6, [r3, r5]
    bitWrite(cacheStateWrite[i/8], i%8, 1);
    4e5e:	2301      	movs	r3, #1
    4e60:	6a20      	ldr	r0, [r4, #32]
    4e62:	408b      	lsls	r3, r1
    4e64:	5c81      	ldrb	r1, [r0, r2]
    4e66:	b2db      	uxtb	r3, r3
    4e68:	4319      	orrs	r1, r3
    4e6a:	5481      	strb	r1, [r0, r2]
    bitWrite(cacheStateRead[i/8], i%8, 0);
    4e6c:	69e0      	ldr	r0, [r4, #28]
    4e6e:	5c81      	ldrb	r1, [r0, r2]
    4e70:	ea21 0303 	bic.w	r3, r1, r3
    4e74:	5483      	strb	r3, [r0, r2]
    4e76:	4b03      	ldr	r3, [pc, #12]	; (4e84 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)+0x84>)
  commitReadyTimeMs = millis() + waitMs;
    4e78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e7a:	681b      	ldr	r3, [r3, #0]
    4e7c:	4413      	add	r3, r2
    commitReadyTimeMs = millis() + waitMs;
    4e7e:	6323      	str	r3, [r4, #48]	; 0x30
}
    4e80:	bd70      	pop	{r4, r5, r6, pc}
    4e82:	bf00      	nop
    4e84:	20006344 	.word	0x20006344

00004e88 <NonVolatileStorage::writeKey(unsigned long)>:
void NonVolatileStorage::writeKey(uint32_t uniqueKey) {
    4e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e8a:	b083      	sub	sp, #12
  readAndWriteThrough = true;
    4e8c:	2301      	movs	r3, #1
    for (int16_t k = 0; k < count; k++) { update(i++, *(uint8_t*)j); j = (uint8_t*)j + 1; }
    4e8e:	2400      	movs	r4, #0
void NonVolatileStorage::writeKey(uint32_t uniqueKey) {
    4e90:	4606      	mov	r6, r0
  readAndWriteThrough = true;
    4e92:	ad01      	add	r5, sp, #4
  bool readAndWriteState = readAndWriteThrough;
    4e94:	8987      	ldrh	r7, [r0, #12]
  readAndWriteThrough = true;
    4e96:	9101      	str	r1, [sp, #4]
    4e98:	8183      	strh	r3, [r0, #12]
    for (int16_t k = 0; k < count; k++) { update(i++, *(uint8_t*)j); j = (uint8_t*)j + 1; }
    4e9a:	b2a4      	uxth	r4, r4
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    4e9c:	f815 2b01 	ldrb.w	r2, [r5], #1
    4ea0:	4630      	mov	r0, r6
    4ea2:	4621      	mov	r1, r4
    4ea4:	3401      	adds	r4, #1
    4ea6:	f7ff ffab 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    4eaa:	b2a3      	uxth	r3, r4
    4eac:	b224      	sxth	r4, r4
    4eae:	2b04      	cmp	r3, #4
    4eb0:	d1f3      	bne.n	4e9a <NonVolatileStorage::writeKey(unsigned long)+0x12>
  readAndWriteThrough = readAndWriteState;
    4eb2:	81b7      	strh	r7, [r6, #12]
}
    4eb4:	b003      	add	sp, #12
    4eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004eb8 <NonVolatileStorage::verify()>:
bool NonVolatileStorage::verify() {
    4eb8:	b570      	push	{r4, r5, r6, lr}
  initError = false;
    4eba:	2500      	movs	r5, #0
bool NonVolatileStorage::verify() {
    4ebc:	b082      	sub	sp, #8
    4ebe:	4604      	mov	r4, r0
  sprintf(s, "%02X", j);
    4ec0:	22ff      	movs	r2, #255	; 0xff
  initError = false;
    4ec2:	7185      	strb	r5, [r0, #6]
  sprintf(s, "%02X", j);
    4ec4:	4668      	mov	r0, sp
    4ec6:	492e      	ldr	r1, [pc, #184]	; (4f80 <NonVolatileStorage::verify()+0xc8>)
    4ec8:	f01a f812 	bl	1eef0 <sprintf>
  for (uint16_t i = 0; i < size; i++) write(i, (char)j);
    4ecc:	88a3      	ldrh	r3, [r4, #4]
    4ece:	b14b      	cbz	r3, 4ee4 <NonVolatileStorage::verify()+0x2c>
    4ed0:	4629      	mov	r1, r5
    4ed2:	3501      	adds	r5, #1
    4ed4:	22ff      	movs	r2, #255	; 0xff
    4ed6:	4620      	mov	r0, r4
    4ed8:	f7ff ff92 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    4edc:	88a3      	ldrh	r3, [r4, #4]
    4ede:	b2a9      	uxth	r1, r5
    4ee0:	428b      	cmp	r3, r1
    4ee2:	d8f6      	bhi.n	4ed2 <NonVolatileStorage::verify()+0x1a>
  wait();
    4ee4:	4620      	mov	r0, r4
    4ee6:	f7ff fecd 	bl	4c84 <NonVolatileStorage::wait()>
  readAndWriteThrough = state;
    4eea:	2201      	movs	r2, #1
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0xff) errors++; }
    4eec:	88a3      	ldrh	r3, [r4, #4]
  readAndWriteThrough = state;
    4eee:	7322      	strb	r2, [r4, #12]
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0xff) errors++; }
    4ef0:	4293      	cmp	r3, r2
    4ef2:	d942      	bls.n	4f7a <NonVolatileStorage::verify()+0xc2>
    4ef4:	2500      	movs	r5, #0
  long errors = 0;
    4ef6:	462e      	mov	r6, r5
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4ef8:	4629      	mov	r1, r5
    4efa:	4620      	mov	r0, r4
    4efc:	f7ff ff36 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0xff) errors++; }
    4f00:	3501      	adds	r5, #1
    4f02:	88a3      	ldrh	r3, [r4, #4]
    4f04:	28ff      	cmp	r0, #255	; 0xff
    4f06:	b2ad      	uxth	r5, r5
    4f08:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    4f0c:	bf18      	it	ne
    4f0e:	3601      	addne	r6, #1
    4f10:	429d      	cmp	r5, r3
    4f12:	dbf1      	blt.n	4ef8 <NonVolatileStorage::verify()+0x40>
  readAndWriteThrough = state;
    4f14:	2500      	movs	r5, #0
  sprintf(s, "%02X", j);
    4f16:	4668      	mov	r0, sp
    4f18:	4919      	ldr	r1, [pc, #100]	; (4f80 <NonVolatileStorage::verify()+0xc8>)
    4f1a:	462a      	mov	r2, r5
  readAndWriteThrough = state;
    4f1c:	7325      	strb	r5, [r4, #12]
  sprintf(s, "%02X", j);
    4f1e:	f019 ffe7 	bl	1eef0 <sprintf>
  for (uint16_t i = 0; i < size; i++) write(i, (char)j);
    4f22:	88a3      	ldrh	r3, [r4, #4]
    4f24:	b14b      	cbz	r3, 4f3a <NonVolatileStorage::verify()+0x82>
    4f26:	4629      	mov	r1, r5
    4f28:	3501      	adds	r5, #1
    4f2a:	2200      	movs	r2, #0
    4f2c:	4620      	mov	r0, r4
    4f2e:	f7ff ff67 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    4f32:	88a3      	ldrh	r3, [r4, #4]
    4f34:	b2a9      	uxth	r1, r5
    4f36:	428b      	cmp	r3, r1
    4f38:	d8f6      	bhi.n	4f28 <NonVolatileStorage::verify()+0x70>
  wait();
    4f3a:	4620      	mov	r0, r4
    4f3c:	f7ff fea2 	bl	4c84 <NonVolatileStorage::wait()>
  readAndWriteThrough = state;
    4f40:	2201      	movs	r2, #1
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0x00) errors++; }
    4f42:	88a3      	ldrh	r3, [r4, #4]
  readAndWriteThrough = state;
    4f44:	7322      	strb	r2, [r4, #12]
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0x00) errors++; }
    4f46:	4293      	cmp	r3, r2
    4f48:	d90c      	bls.n	4f64 <NonVolatileStorage::verify()+0xac>
    4f4a:	2500      	movs	r5, #0
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4f4c:	4629      	mov	r1, r5
    4f4e:	4620      	mov	r0, r4
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0x00) errors++; }
    4f50:	3501      	adds	r5, #1
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4f52:	f7ff ff0b 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
  for (uint16_t i = 0; i < size - 1; i++) { if (read(i) != 0x00) errors++; }
    4f56:	b100      	cbz	r0, 4f5a <NonVolatileStorage::verify()+0xa2>
    4f58:	3601      	adds	r6, #1
    4f5a:	88a3      	ldrh	r3, [r4, #4]
    4f5c:	b2ad      	uxth	r5, r5
    4f5e:	3b01      	subs	r3, #1
    4f60:	429d      	cmp	r5, r3
    4f62:	dbf3      	blt.n	4f4c <NonVolatileStorage::verify()+0x94>
  readAndWriteThrough = state;
    4f64:	2300      	movs	r3, #0
    4f66:	7323      	strb	r3, [r4, #12]
  if (errors == 0) {
    4f68:	b916      	cbnz	r6, 4f70 <NonVolatileStorage::verify()+0xb8>
  return initError;
    4f6a:	79a0      	ldrb	r0, [r4, #6]
}
    4f6c:	b002      	add	sp, #8
    4f6e:	bd70      	pop	{r4, r5, r6, pc}
    initError = true;
    4f70:	2301      	movs	r3, #1
    4f72:	4618      	mov	r0, r3
    4f74:	71a3      	strb	r3, [r4, #6]
}
    4f76:	b002      	add	sp, #8
    4f78:	bd70      	pop	{r4, r5, r6, pc}
  long errors = 0;
    4f7a:	2600      	movs	r6, #0
    4f7c:	e7ca      	b.n	4f14 <NonVolatileStorage::verify()+0x5c>
    4f7e:	bf00      	nop
    4f80:	20002270 	.word	0x20002270

00004f84 <NonVolatileStorage::read(unsigned short)>:
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4f84:	f7ff bef2 	b.w	4d6c <NonVolatileStorage::readFromCache(unsigned short)>

00004f88 <NonVolatileStorage::readUC(unsigned short)>:
    4f88:	f7ff bef0 	b.w	4d6c <NonVolatileStorage::readFromCache(unsigned short)>

00004f8c <NonVolatileStorage::readC(unsigned short)>:
int8_t   NonVolatileStorage::readC (uint16_t i) { return read(i); }
    4f8c:	b508      	push	{r3, lr}
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4f8e:	f7ff feed 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
int8_t   NonVolatileStorage::readC (uint16_t i) { return read(i); }
    4f92:	b240      	sxtb	r0, r0
    4f94:	bd08      	pop	{r3, pc}
    4f96:	bf00      	nop

00004f98 <NonVolatileStorage::readUI(unsigned short)>:
uint16_t NonVolatileStorage::readUI(uint16_t i) { uint16_t j; readBytes(i, (uint8_t*)&j, sizeof(uint16_t)); return j; }
    4f98:	b538      	push	{r3, r4, r5, lr}
    4f9a:	460c      	mov	r4, r1
    4f9c:	4605      	mov	r5, r0
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4f9e:	f7ff fee5 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
    4fa2:	4603      	mov	r3, r0
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4fa4:	1c61      	adds	r1, r4, #1
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4fa6:	4628      	mov	r0, r5
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4fa8:	b2dc      	uxtb	r4, r3
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4faa:	b289      	uxth	r1, r1
    4fac:	f7ff fede 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4fb0:	f360 240f 	bfi	r4, r0, #8, #8
uint16_t NonVolatileStorage::readUI(uint16_t i) { uint16_t j; readBytes(i, (uint8_t*)&j, sizeof(uint16_t)); return j; }
    4fb4:	b2a0      	uxth	r0, r4
    4fb6:	bd38      	pop	{r3, r4, r5, pc}

00004fb8 <NonVolatileStorage::readF(unsigned short)>:
float    NonVolatileStorage::readF (uint16_t i) { float j;    readBytes(i, (uint8_t*)&j, sizeof(float));    return j; }
    4fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fba:	1d0e      	adds	r6, r1, #4
    4fbc:	b083      	sub	sp, #12
    4fbe:	460c      	mov	r4, r1
    4fc0:	4607      	mov	r7, r0
    4fc2:	ad01      	add	r5, sp, #4
    4fc4:	b2b6      	uxth	r6, r6
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4fc6:	1c63      	adds	r3, r4, #1
    4fc8:	4621      	mov	r1, r4
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4fca:	4638      	mov	r0, r7
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4fcc:	b29c      	uxth	r4, r3
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    4fce:	f7ff fecd 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    4fd2:	f805 0b01 	strb.w	r0, [r5], #1
    4fd6:	42b4      	cmp	r4, r6
    4fd8:	d1f5      	bne.n	4fc6 <NonVolatileStorage::readF(unsigned short)+0xe>
float    NonVolatileStorage::readF (uint16_t i) { float j;    readBytes(i, (uint8_t*)&j, sizeof(float));    return j; }
    4fda:	ed9d 0a01 	vldr	s0, [sp, #4]
    4fde:	b003      	add	sp, #12
    4fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fe2:	bf00      	nop

00004fe4 <NonVolatileStorage::isNull(unsigned short, short)>:
  if (count < 0) count = -count;
    4fe4:	2a00      	cmp	r2, #0
bool NonVolatileStorage::isNull(uint16_t i, int16_t count) {
    4fe6:	b570      	push	{r4, r5, r6, lr}
    4fe8:	4606      	mov	r6, r0
    4fea:	460c      	mov	r4, r1
  if (count < 0) count = -count;
    4fec:	da01      	bge.n	4ff2 <NonVolatileStorage::isNull(unsigned short, short)+0xe>
    4fee:	4252      	negs	r2, r2
    4ff0:	b212      	sxth	r2, r2
  for (int16_t k = 0; k < count; k++) { if (read(i++) != 0) return false; }
    4ff2:	2a00      	cmp	r2, #0
    4ff4:	dd0e      	ble.n	5014 <NonVolatileStorage::isNull(unsigned short, short)+0x30>
    4ff6:	4422      	add	r2, r4
    4ff8:	b295      	uxth	r5, r2
    4ffa:	e001      	b.n	5000 <NonVolatileStorage::isNull(unsigned short, short)+0x1c>
    4ffc:	42a5      	cmp	r5, r4
    4ffe:	d009      	beq.n	5014 <NonVolatileStorage::isNull(unsigned short, short)+0x30>
    5000:	1c63      	adds	r3, r4, #1
    5002:	4621      	mov	r1, r4
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    5004:	4630      	mov	r0, r6
  for (int16_t k = 0; k < count; k++) { if (read(i++) != 0) return false; }
    5006:	b29c      	uxth	r4, r3
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    5008:	f7ff feb0 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
  for (int16_t k = 0; k < count; k++) { if (read(i++) != 0) return false; }
    500c:	2800      	cmp	r0, #0
    500e:	d0f5      	beq.n	4ffc <NonVolatileStorage::isNull(unsigned short, short)+0x18>
    5010:	2000      	movs	r0, #0
}
    5012:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    5014:	2001      	movs	r0, #1
}
    5016:	bd70      	pop	{r4, r5, r6, pc}

00005018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>:
void NonVolatileStorage::readBytes(uint16_t i, void *j, int16_t count) {
    5018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (count < 0) {
    501a:	2b00      	cmp	r3, #0
void NonVolatileStorage::readBytes(uint16_t i, void *j, int16_t count) {
    501c:	4607      	mov	r7, r0
    501e:	460c      	mov	r4, r1
  if (count < 0) {
    5020:	db0d      	blt.n	503e <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x26>
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    5022:	d00b      	beq.n	503c <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x24>
    5024:	4615      	mov	r5, r2
    5026:	18d6      	adds	r6, r2, r3
    5028:	1a8c      	subs	r4, r1, r2
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    502a:	1929      	adds	r1, r5, r4
    502c:	4638      	mov	r0, r7
    502e:	b289      	uxth	r1, r1
    5030:	f7ff fe9c 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); j = (uint8_t*)j + 1; }
    5034:	f805 0b01 	strb.w	r0, [r5], #1
    5038:	42ae      	cmp	r6, r5
    503a:	d1f6      	bne.n	502a <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x12>
}
    503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    count = -count;
    503e:	b29b      	uxth	r3, r3
    5040:	4259      	negs	r1, r3
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); if (*(uint8_t*)j == 0) return; else j = (uint8_t*)j + 1; }
    5042:	b209      	sxth	r1, r1
    5044:	2900      	cmp	r1, #0
    5046:	ddf9      	ble.n	503c <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x24>
    5048:	1ae3      	subs	r3, r4, r3
    504a:	1e55      	subs	r5, r2, #1
    504c:	b29e      	uxth	r6, r3
    504e:	e001      	b.n	5054 <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x3c>
    5050:	42b4      	cmp	r4, r6
    5052:	d0f3      	beq.n	503c <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x24>
    5054:	1c63      	adds	r3, r4, #1
    5056:	4621      	mov	r1, r4
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    5058:	4638      	mov	r0, r7
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); if (*(uint8_t*)j == 0) return; else j = (uint8_t*)j + 1; }
    505a:	b29c      	uxth	r4, r3
uint8_t  NonVolatileStorage::read(uint16_t i)   { return readFromCache(i); }
    505c:	f7ff fe86 	bl	4d6c <NonVolatileStorage::readFromCache(unsigned short)>
    for (int16_t k = 0; k < count; k++) { *(uint8_t*)j = read(i++); if (*(uint8_t*)j == 0) return; else j = (uint8_t*)j + 1; }
    5060:	f805 0f01 	strb.w	r0, [r5, #1]!
    5064:	2800      	cmp	r0, #0
    5066:	d1f3      	bne.n	5050 <NonVolatileStorage::readBytes(unsigned short, void*, short)+0x38>
}
    5068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    506a:	bf00      	nop

0000506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>:
void NonVolatileStorage::updateBytes(uint16_t i, void *j, int16_t count) {
    506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (count < 0) {
    506e:	2b00      	cmp	r3, #0
void NonVolatileStorage::updateBytes(uint16_t i, void *j, int16_t count) {
    5070:	4606      	mov	r6, r0
  if (count < 0) {
    5072:	db0d      	blt.n	5090 <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x24>
    for (int16_t k = 0; k < count; k++) { update(i++, *(uint8_t*)j); j = (uint8_t*)j + 1; }
    5074:	d00b      	beq.n	508e <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x22>
    5076:	4614      	mov	r4, r2
    5078:	18d7      	adds	r7, r2, r3
    507a:	1a8d      	subs	r5, r1, r2
    507c:	1961      	adds	r1, r4, r5
    507e:	7822      	ldrb	r2, [r4, #0]
    5080:	3401      	adds	r4, #1
    5082:	4630      	mov	r0, r6
    5084:	b289      	uxth	r1, r1
    5086:	f7ff febb 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    508a:	42bc      	cmp	r4, r7
    508c:	d1f6      	bne.n	507c <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x10>
}
    508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    count = -count;
    5090:	b29b      	uxth	r3, r3
    5092:	4258      	negs	r0, r3
    for (int16_t k = 0; k < count; k++) { update(i++, *(uint8_t*)j); if (*(uint8_t*)j == 0) return; else j = (uint8_t*)j + 1; }
    5094:	b200      	sxth	r0, r0
    5096:	2800      	cmp	r0, #0
    5098:	ddf9      	ble.n	508e <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x22>
    509a:	43db      	mvns	r3, r3
    509c:	1e54      	subs	r4, r2, #1
    509e:	fa12 f783 	uxtah	r7, r2, r3
    50a2:	1b0d      	subs	r5, r1, r4
    50a4:	e001      	b.n	50aa <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x3e>
    50a6:	42a7      	cmp	r7, r4
    50a8:	d0f1      	beq.n	508e <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x22>
    50aa:	1929      	adds	r1, r5, r4
    50ac:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    50b0:	4630      	mov	r0, r6
    50b2:	b289      	uxth	r1, r1
    50b4:	f7ff fea4 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    50b8:	7823      	ldrb	r3, [r4, #0]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d1f3      	bne.n	50a6 <NonVolatileStorage::updateBytes(unsigned short, void*, short)+0x3a>
}
    50be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000050c0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    50c0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    50c4:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    50c8:	1a10      	subs	r0, r2, r0
    50ca:	4770      	bx	lr

000050cc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    50cc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    50d0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    50d4:	429a      	cmp	r2, r3
    50d6:	d905      	bls.n	50e4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    50d8:	1c5a      	adds	r2, r3, #1
    50da:	4403      	add	r3, r0
    50dc:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    50e0:	7e98      	ldrb	r0, [r3, #26]
    50e2:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    50e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    50e8:	4770      	bx	lr
    50ea:	bf00      	nop

000050ec <_GLOBAL__sub_I__ZN24NonVolatileStorageEEPROM4initEtbtbP7TwoWireh>:
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    50ec:	f013 b93e 	b.w	1836c <eeprom_initialize>

000050f0 <NonVolatileStorageMB85RC::busy()>:
    50f0:	4a02      	ldr	r2, [pc, #8]	; (50fc <NonVolatileStorageMB85RC::busy()+0xc>)
  bool error = wire->endTransmission();
  return !error;
}

bool NonVolatileStorageMB85RC::busy() {
  return (int32_t)(millis() - nextOpMs) < 0;
    50f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    50f4:	6810      	ldr	r0, [r2, #0]
    50f6:	1ac0      	subs	r0, r0, r3
  // posssibly a better way?
  // wire->beginTransmission(framAddress);
  // return wire->endTransmission() == 0;
}
    50f8:	0fc0      	lsrs	r0, r0, #31
    50fa:	4770      	bx	lr
    50fc:	20006344 	.word	0x20006344

00005100 <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)>:
  if (result != 1) return 0;

  return wire->read();
}

void NonVolatileStorageMB85RC::writeToStorage(uint16_t i,  uint8_t j) {
    5100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5104:	f8df 8070 	ldr.w	r8, [pc, #112]	; 5178 <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)+0x78>
    5108:	4604      	mov	r4, r0
    510a:	460e      	mov	r6, r1
    510c:	4617      	mov	r7, r2
    510e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 517c <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)+0x7c>
    5112:	6825      	ldr	r5, [r4, #0]
  while (busy()) {}
    5114:	68eb      	ldr	r3, [r5, #12]
    5116:	4543      	cmp	r3, r8
    5118:	d128      	bne.n	516c <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)+0x6c>
    511a:	f8d9 3000 	ldr.w	r3, [r9]
  return (int32_t)(millis() - nextOpMs) < 0;
    511e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    5120:	1a1b      	subs	r3, r3, r0
  while (busy()) {}
    5122:	2b00      	cmp	r3, #0
    5124:	dbf6      	blt.n	5114 <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)+0x14>
		txBuffer[0] = (address << 1);
    5126:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		transmitting = 1;
    512a:	2501      	movs	r5, #1
    
  wire->beginTransmission(framAddress);
    512c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    512e:	0a31      	lsrs	r1, r6, #8
		txBuffer[0] = (address << 1);
    5130:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    5132:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBuffer[0] = (address << 1);
    5136:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		txBufferLength = 1;
    513a:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
  wire->write(MSB(i));
    513e:	6b60      	ldr	r0, [r4, #52]	; 0x34
		return write((uint8_t)n);
    5140:	6803      	ldr	r3, [r0, #0]
    5142:	681b      	ldr	r3, [r3, #0]
    5144:	4798      	blx	r3
  wire->write(LSB(i));
    5146:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5148:	b2f1      	uxtb	r1, r6
    514a:	6803      	ldr	r3, [r0, #0]
    514c:	681b      	ldr	r3, [r3, #0]
    514e:	4798      	blx	r3
  wire->write(j);
    5150:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5152:	4639      	mov	r1, r7
    5154:	6803      	ldr	r3, [r0, #0]
    5156:	681b      	ldr	r3, [r3, #0]
    5158:	4798      	blx	r3
		return endTransmission(1);
    515a:	4629      	mov	r1, r5
    515c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    515e:	f00f ffbb 	bl	150d8 <TwoWire::endTransmission(unsigned char)>
    5162:	f8d9 3000 	ldr.w	r3, [r9]
  wire->endTransmission();
  nextOpMs = millis() + FRAM_WRITE_WAIT;
    5166:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    5168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while (busy()) {}
    516c:	4620      	mov	r0, r4
    516e:	4798      	blx	r3
    5170:	2800      	cmp	r0, #0
    5172:	d1ce      	bne.n	5112 <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)+0x12>
    5174:	e7d7      	b.n	5126 <NonVolatileStorageMB85RC::writeToStorage(unsigned short, unsigned char)+0x26>
    5176:	bf00      	nop
    5178:	000050f1 	.word	0x000050f1
    517c:	20006344 	.word	0x20006344

00005180 <NonVolatileStorageMB85RC::readFromStorage(unsigned short)>:
uint8_t NonVolatileStorageMB85RC::readFromStorage(uint16_t i) {
    5180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5182:	4d26      	ldr	r5, [pc, #152]	; (521c <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0x9c>)
    5184:	4604      	mov	r4, r0
    5186:	4f26      	ldr	r7, [pc, #152]	; (5220 <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0xa0>)
    5188:	460e      	mov	r6, r1
    518a:	6820      	ldr	r0, [r4, #0]
  while (busy()) {}
    518c:	68c3      	ldr	r3, [r0, #12]
    518e:	42ab      	cmp	r3, r5
    5190:	d128      	bne.n	51e4 <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0x64>
    5192:	683b      	ldr	r3, [r7, #0]
  return (int32_t)(millis() - nextOpMs) < 0;
    5194:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5196:	1a9b      	subs	r3, r3, r2
  while (busy()) {}
    5198:	2b00      	cmp	r3, #0
    519a:	dbf7      	blt.n	518c <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0xc>
		transmitting = 1;
    519c:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    519e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
  wire->beginTransmission(framAddress);
    51a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
		return write((uint8_t)n);
    51a4:	0a31      	lsrs	r1, r6, #8
		txBuffer[0] = (address << 1);
    51a6:	40aa      	lsls	r2, r5
		transmitting = 1;
    51a8:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBuffer[0] = (address << 1);
    51ac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		txBufferLength = 1;
    51b0:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
  wire->write(MSB(i));
    51b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
		return write((uint8_t)n);
    51b6:	6803      	ldr	r3, [r0, #0]
    51b8:	681b      	ldr	r3, [r3, #0]
    51ba:	4798      	blx	r3
  wire->write(LSB(i));
    51bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51be:	b2f1      	uxtb	r1, r6
    51c0:	6803      	ldr	r3, [r0, #0]
    51c2:	681b      	ldr	r3, [r3, #0]
    51c4:	4798      	blx	r3
		return endTransmission(1);
    51c6:	4629      	mov	r1, r5
    51c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51ca:	f00f ff85 	bl	150d8 <TwoWire::endTransmission(unsigned char)>
		return requestFrom(address, quantity, (uint8_t)1);
    51ce:	462b      	mov	r3, r5
    51d0:	462a      	mov	r2, r5
    51d2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    51d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51d8:	f00f fffe 	bl	151d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
  if (result != 1) return 0;
    51dc:	42a8      	cmp	r0, r5
    51de:	d006      	beq.n	51ee <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0x6e>
    51e0:	2000      	movs	r0, #0
}
    51e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (busy()) {}
    51e4:	4620      	mov	r0, r4
    51e6:	4798      	blx	r3
    51e8:	2800      	cmp	r0, #0
    51ea:	d1ce      	bne.n	518a <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0xa>
    51ec:	e7d6      	b.n	519c <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0x1c>
  return wire->read();
    51ee:	6b60      	ldr	r0, [r4, #52]	; 0x34
    51f0:	4a0c      	ldr	r2, [pc, #48]	; (5224 <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0xa4>)
    51f2:	6803      	ldr	r3, [r0, #0]
    51f4:	695b      	ldr	r3, [r3, #20]
    51f6:	4293      	cmp	r3, r2
    51f8:	d10b      	bne.n	5212 <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0x92>
		if (rxBufferIndex >= rxBufferLength) return -1;
    51fa:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    51fe:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    5202:	429a      	cmp	r2, r3
    5204:	d908      	bls.n	5218 <NonVolatileStorageMB85RC::readFromStorage(unsigned short)+0x98>
		return rxBuffer[rxBufferIndex++];
    5206:	1c5a      	adds	r2, r3, #1
    5208:	4403      	add	r3, r0
    520a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    520e:	7e98      	ldrb	r0, [r3, #26]
}
    5210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return wire->read();
    5212:	4798      	blx	r3
    5214:	b2c0      	uxtb	r0, r0
}
    5216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5218:	20ff      	movs	r0, #255	; 0xff
    521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    521c:	000050f1 	.word	0x000050f1
    5220:	20006344 	.word	0x20006344
    5224:	000050cd 	.word	0x000050cd

00005228 <NonVolatileStorageMB85RC::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)>:
bool NonVolatileStorageMB85RC::init(uint16_t size, bool cacheEnable, uint16_t wait, bool checkEnable, TwoWire* wire, uint8_t address) {
    5228:	b5f0      	push	{r4, r5, r6, r7, lr}
    522a:	b085      	sub	sp, #20
    522c:	4605      	mov	r5, r0
    522e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    5230:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    5234:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
  NonVolatileStorage::init(size, cacheEnable, wait, checkEnable, wire, address);
    5238:	9401      	str	r4, [sp, #4]
    523a:	9602      	str	r6, [sp, #8]
    523c:	9700      	str	r7, [sp, #0]
    523e:	f7ff fc11 	bl	4a64 <NonVolatileStorage::init(unsigned short, bool, unsigned short, bool, TwoWire*, unsigned char)>
  wire->begin();
    5242:	4620      	mov	r0, r4
  this->wire = wire;
    5244:	636c      	str	r4, [r5, #52]	; 0x34
  framAddress = address;
    5246:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
  wire->begin();
    524a:	f020 fe1d 	bl	25e88 <___ZN7TwoWire5beginEv_veneer>
		txBuffer[0] = (address << 1);
    524e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
		transmitting = 1;
    5252:	2101      	movs	r1, #1
		return endTransmission(1);
    5254:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    5256:	408b      	lsls	r3, r1
		transmitting = 1;
    5258:	f884 1130 	strb.w	r1, [r4, #304]	; 0x130
		txBufferLength = 1;
    525c:	f884 112f 	strb.w	r1, [r4, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    5260:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return endTransmission(1);
    5264:	f00f ff38 	bl	150d8 <TwoWire::endTransmission(unsigned char)>
}
    5268:	fab0 f080 	clz	r0, r0
    526c:	0940      	lsrs	r0, r0, #5
    526e:	b005      	add	sp, #20
    5270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5272:	bf00      	nop

00005274 <SenseInput::isOn()>:
int SenseInput::isOn() {
    5274:	b538      	push	{r3, r4, r5, lr}
  if (isAnalog) {
    5276:	7a43      	ldrb	r3, [r0, #9]
int SenseInput::isOn() {
    5278:	4604      	mov	r4, r0
  int value = lastValue;
    527a:	6985      	ldr	r5, [r0, #24]
  if (isAnalog) {
    527c:	2b00      	cmp	r3, #0
    527e:	d12a      	bne.n	52d6 <SenseInput::isOn()+0x62>
    int sample = digitalReadEx(pin);
    5280:	6802      	ldr	r2, [r0, #0]
    5282:	2a00      	cmp	r2, #0
    5284:	db0b      	blt.n	529e <SenseInput::isOn()+0x2a>
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    5286:	b2d2      	uxtb	r2, r2
    5288:	4b1c      	ldr	r3, [pc, #112]	; (52fc <SenseInput::isOn()+0x88>)
    528a:	0111      	lsls	r1, r2, #4
    528c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5290:	5859      	ldr	r1, [r3, r1]
    5292:	68d3      	ldr	r3, [r2, #12]
    5294:	688a      	ldr	r2, [r1, #8]
    5296:	421a      	tst	r2, r3
    5298:	bf14      	ite	ne
    529a:	2301      	movne	r3, #1
    529c:	2300      	moveq	r3, #0
    if (stableSample != sample) { stableStartMs = millis(); stableSample = sample; }
    529e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    52a0:	429a      	cmp	r2, r3
    52a2:	d015      	beq.n	52d0 <SenseInput::isOn()+0x5c>
	return systick_millis_count;
    52a4:	4916      	ldr	r1, [pc, #88]	; (5300 <SenseInput::isOn()+0x8c>)
    52a6:	6263      	str	r3, [r4, #36]	; 0x24
    52a8:	680a      	ldr	r2, [r1, #0]
    52aa:	62a2      	str	r2, [r4, #40]	; 0x28
    52ac:	680b      	ldr	r3, [r1, #0]
    if (stableMs >= hysteresis) value = stableSample;
    52ae:	6921      	ldr	r1, [r4, #16]
    long stableMs = (long)(millis() - stableStartMs);
    52b0:	1a9b      	subs	r3, r3, r2
    if (stableMs >= hysteresis) value = stableSample;
    52b2:	4299      	cmp	r1, r3
    52b4:	bfd8      	it	le
    52b6:	6a65      	ldrle	r5, [r4, #36]	; 0x24
  if (reverseState) { if (value == LOW) value = HIGH; else value = LOW; }
    52b8:	7a23      	ldrb	r3, [r4, #8]
    52ba:	b113      	cbz	r3, 52c2 <SenseInput::isOn()+0x4e>
    52bc:	fab5 f585 	clz	r5, r5
    52c0:	096d      	lsrs	r5, r5, #5
  return value == activeState;
    52c2:	6860      	ldr	r0, [r4, #4]
  lastValue = value;
    52c4:	61a5      	str	r5, [r4, #24]
}
    52c6:	1b40      	subs	r0, r0, r5
    52c8:	fab0 f080 	clz	r0, r0
    52cc:	0940      	lsrs	r0, r0, #5
    52ce:	bd38      	pop	{r3, r4, r5, pc}
    long stableMs = (long)(millis() - stableStartMs);
    52d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    52d2:	490b      	ldr	r1, [pc, #44]	; (5300 <SenseInput::isOn()+0x8c>)
    52d4:	e7ea      	b.n	52ac <SenseInput::isOn()+0x38>
      int sample = analogRead(pin);
    52d6:	7800      	ldrb	r0, [r0, #0]
    52d8:	f012 fd56 	bl	17d88 <analogRead>
    if (sample >= threshold + hysteresis) value = HIGH;
    52dc:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    52e0:	1899      	adds	r1, r3, r2
    if (sample <= threshold - hysteresis) value = LOW;
    52e2:	1a9b      	subs	r3, r3, r2
    if (sample >= threshold + hysteresis) value = HIGH;
    52e4:	4281      	cmp	r1, r0
    52e6:	dc05      	bgt.n	52f4 <SenseInput::isOn()+0x80>
    if (sample <= threshold - hysteresis) value = LOW;
    52e8:	4298      	cmp	r0, r3
    52ea:	dd05      	ble.n	52f8 <SenseInput::isOn()+0x84>
  if (reverseState) { if (value == LOW) value = HIGH; else value = LOW; }
    52ec:	7a25      	ldrb	r5, [r4, #8]
    52ee:	f085 0501 	eor.w	r5, r5, #1
    52f2:	e7e6      	b.n	52c2 <SenseInput::isOn()+0x4e>
    if (sample <= threshold - hysteresis) value = LOW;
    52f4:	4283      	cmp	r3, r0
    52f6:	dbdf      	blt.n	52b8 <SenseInput::isOn()+0x44>
  if (reverseState) { if (value == LOW) value = HIGH; else value = LOW; }
    52f8:	7a25      	ldrb	r5, [r4, #8]
    52fa:	e7e2      	b.n	52c2 <SenseInput::isOn()+0x4e>
    52fc:	20002b88 	.word	0x20002b88
    5300:	20006344 	.word	0x20006344

00005304 <SenseInput::poll()>:

void SenseInput::poll() {
  int value = lastValue;
  if (!isAnalog) {
    5304:	7a43      	ldrb	r3, [r0, #9]
  int value = lastValue;
    5306:	6981      	ldr	r1, [r0, #24]
  if (!isAnalog) {
    5308:	bb2b      	cbnz	r3, 5356 <SenseInput::poll()+0x52>
    int sample = digitalReadEx(pin);
    530a:	6802      	ldr	r2, [r0, #0]
    530c:	2a00      	cmp	r2, #0
void SenseInput::poll() {
    530e:	b410      	push	{r4}
    int sample = digitalReadEx(pin);
    5310:	db0b      	blt.n	532a <SenseInput::poll()+0x26>
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    5312:	b2d2      	uxtb	r2, r2
    5314:	4b12      	ldr	r3, [pc, #72]	; (5360 <SenseInput::poll()+0x5c>)
    5316:	0114      	lsls	r4, r2, #4
    5318:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    531c:	591c      	ldr	r4, [r3, r4]
    531e:	68d3      	ldr	r3, [r2, #12]
    5320:	68a2      	ldr	r2, [r4, #8]
    5322:	421a      	tst	r2, r3
    5324:	bf14      	ite	ne
    5326:	2301      	movne	r3, #1
    5328:	2300      	moveq	r3, #0
    if (stableSample != sample) { stableStartMs = millis(); stableSample = sample; }
    532a:	6a42      	ldr	r2, [r0, #36]	; 0x24
    532c:	429a      	cmp	r2, r3
    532e:	d014      	beq.n	535a <SenseInput::poll()+0x56>
	return systick_millis_count;
    5330:	4c0c      	ldr	r4, [pc, #48]	; (5364 <SenseInput::poll()+0x60>)
    5332:	6243      	str	r3, [r0, #36]	; 0x24
    5334:	6822      	ldr	r2, [r4, #0]
    5336:	6282      	str	r2, [r0, #40]	; 0x28
    5338:	6823      	ldr	r3, [r4, #0]
    long stableMs = (long)(millis() - stableStartMs);
    if (stableMs > hysteresis) value = stableSample;
    533a:	6904      	ldr	r4, [r0, #16]
    long stableMs = (long)(millis() - stableStartMs);
    533c:	1a9b      	subs	r3, r3, r2
    if (stableMs > hysteresis) value = stableSample;
    533e:	429c      	cmp	r4, r3
    if (reverseState) { if (value == LOW) value = HIGH; else value = LOW; }
    5340:	7a03      	ldrb	r3, [r0, #8]
    if (stableMs > hysteresis) value = stableSample;
    5342:	bfb8      	it	lt
    5344:	6a41      	ldrlt	r1, [r0, #36]	; 0x24
    if (reverseState) { if (value == LOW) value = HIGH; else value = LOW; }
    5346:	b113      	cbz	r3, 534e <SenseInput::poll()+0x4a>
    5348:	fab1 f181 	clz	r1, r1
    534c:	0949      	lsrs	r1, r1, #5
  }
  lastValue = value;
}
    534e:	f85d 4b04 	ldr.w	r4, [sp], #4
  lastValue = value;
    5352:	6181      	str	r1, [r0, #24]
}
    5354:	4770      	bx	lr
  lastValue = value;
    5356:	6181      	str	r1, [r0, #24]
    5358:	4770      	bx	lr
    long stableMs = (long)(millis() - stableStartMs);
    535a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    535c:	4c01      	ldr	r4, [pc, #4]	; (5364 <SenseInput::poll()+0x60>)
    535e:	e7eb      	b.n	5338 <SenseInput::poll()+0x34>
    5360:	20002b88 	.word	0x20002b88
    5364:	20006344 	.word	0x20006344

00005368 <SenseInput::reset()>:

void SenseInput::reset() {
    5368:	b510      	push	{r4, lr}
    536a:	4604      	mov	r4, r0
  if (isAnalog) {
    536c:	7a40      	ldrb	r0, [r0, #9]
    536e:	b988      	cbnz	r0, 5394 <SenseInput::reset()+0x2c>
    #else
      int sample = analogRead(pin);
    #endif
    if (sample > threshold) lastValue = HIGH; else lastValue = LOW;
  } else {
    lastValue = digitalReadEx(pin);
    5370:	6823      	ldr	r3, [r4, #0]
    5372:	2b00      	cmp	r3, #0
    5374:	db0b      	blt.n	538e <SenseInput::reset()+0x26>
		return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
    5376:	b2db      	uxtb	r3, r3
    5378:	4a0c      	ldr	r2, [pc, #48]	; (53ac <SenseInput::reset()+0x44>)
    537a:	0119      	lsls	r1, r3, #4
    537c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5380:	5852      	ldr	r2, [r2, r1]
    5382:	68db      	ldr	r3, [r3, #12]
    5384:	6892      	ldr	r2, [r2, #8]
    5386:	421a      	tst	r2, r3
    5388:	bf14      	ite	ne
    538a:	2001      	movne	r0, #1
    538c:	2000      	moveq	r0, #0
    if (sample > threshold) lastValue = HIGH; else lastValue = LOW;
    538e:	61a0      	str	r0, [r4, #24]
  }

  stableSample = lastValue;
    5390:	6260      	str	r0, [r4, #36]	; 0x24
}
    5392:	bd10      	pop	{r4, pc}
      int sample = analogRead(pin);
    5394:	7820      	ldrb	r0, [r4, #0]
    5396:	f012 fcf7 	bl	17d88 <analogRead>
    if (sample > threshold) lastValue = HIGH; else lastValue = LOW;
    539a:	68e3      	ldr	r3, [r4, #12]
    539c:	4283      	cmp	r3, r0
    539e:	bfac      	ite	ge
    53a0:	2000      	movge	r0, #0
    53a2:	2001      	movlt	r0, #1
    53a4:	61a0      	str	r0, [r4, #24]
  stableSample = lastValue;
    53a6:	6260      	str	r0, [r4, #36]	; 0x24
}
    53a8:	bd10      	pop	{r4, pc}
    53aa:	bf00      	nop
    53ac:	20002b88 	.word	0x20002b88

000053b0 <SenseInput::SenseInput(int, int, long)>:
SenseInput::SenseInput(int pin, int initState, int32_t trigger) {
    53b0:	b538      	push	{r3, r4, r5, lr}
    53b2:	4604      	mov	r4, r0
    53b4:	2500      	movs	r5, #0
    53b6:	4608      	mov	r0, r1
  activeState = (trigger & 0b0000000000000000000001);
    53b8:	f003 0101 	and.w	r1, r3, #1
SenseInput::SenseInput(int pin, int initState, int32_t trigger) {
    53bc:	7225      	strb	r5, [r4, #8]
    53be:	62a5      	str	r5, [r4, #40]	; 0x28
    53c0:	e9c4 5506 	strd	r5, r5, [r4, #24]
    53c4:	e9c4 5508 	strd	r5, r5, [r4, #32]
  threshold   = (trigger & 0b0000000000011111111110) >> 1;
    53c8:	f3c3 0549 	ubfx	r5, r3, #1, #10
  hysteresis  = (trigger & 0b0111111111100000000000) >> 11;
    53cc:	f3c3 23c9 	ubfx	r3, r3, #11, #10
  isAnalog    = threshold != 0;
    53d0:	2d00      	cmp	r5, #0
  activeState = (trigger & 0b0000000000000000000001);
    53d2:	e9c4 0100 	strd	r0, r1, [r4]
  isAnalog    = threshold != 0;
    53d6:	bf14      	ite	ne
    53d8:	2101      	movne	r1, #1
    53da:	2100      	moveq	r1, #0
  hysteresis  = (trigger & 0b0111111111100000000000) >> 11;
    53dc:	e9c4 5303 	strd	r5, r3, [r4, #12]
  isAnalog    = threshold != 0;
    53e0:	7261      	strb	r1, [r4, #9]
  if (isAnalog) {
    53e2:	d005      	beq.n	53f0 <SenseInput::SenseInput(int, int, long)+0x40>
	  if (threshold - hysteresis < 0) {
    53e4:	429d      	cmp	r5, r3
    53e6:	db12      	blt.n	540e <SenseInput::SenseInput(int, int, long)+0x5e>
  	if (threshold + hysteresis > ANALOG_READ_RANGE) {
    53e8:	442b      	add	r3, r5
    53ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    53ee:	da0a      	bge.n	5406 <SenseInput::SenseInput(int, int, long)+0x56>
  pinModeEx(pin, initState);
    53f0:	2800      	cmp	r0, #0
    53f2:	db03      	blt.n	53fc <SenseInput::SenseInput(int, int, long)+0x4c>
    53f4:	b2d1      	uxtb	r1, r2
    53f6:	b2c0      	uxtb	r0, r0
    53f8:	f012 ff80 	bl	182fc <pinMode>
  reset();
    53fc:	4620      	mov	r0, r4
    53fe:	f7ff ffb3 	bl	5368 <SenseInput::reset()>
}
    5402:	4620      	mov	r0, r4
    5404:	bd38      	pop	{r3, r4, r5, pc}
    5406:	f240 3cff 	movw	ip, #1023	; 0x3ff
      hysteresis = ANALOG_READ_RANGE - threshold;
    540a:	ebac 0505 	sub.w	r5, ip, r5
    540e:	6125      	str	r5, [r4, #16]
      VF("WRN: SenseInput::SenseInput(), Threshold + Hysteresis for pin "); V(pin); VF(" is above Analog range setting Hysteresis to "); VL(hysteresis);
    5410:	e7ee      	b.n	53f0 <SenseInput::SenseInput(int, int, long)+0x40>
    5412:	bf00      	nop

00005414 <Sense::add(int, int, long, bool)>:

// Manage sense pins

uint8_t Sense::add(int pin, int initState, int32_t trigger, bool force) {
  if ((pin == OFF || trigger == OFF) && !force) return 0;
    5414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5418:	bf18      	it	ne
    541a:	f1b1 3fff 	cmpne.w	r1, #4294967295	; 0xffffffff
uint8_t Sense::add(int pin, int initState, int32_t trigger, bool force) {
    541e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5420:	4604      	mov	r4, r0
    5422:	460d      	mov	r5, r1
    5424:	461f      	mov	r7, r3
    5426:	4616      	mov	r6, r2
    5428:	f89d 0018 	ldrb.w	r0, [sp, #24]
  if ((pin == OFF || trigger == OFF) && !force) return 0;
    542c:	d100      	bne.n	5430 <Sense::add(int, int, long, bool)+0x1c>
    542e:	b150      	cbz	r0, 5446 <Sense::add(int, int, long, bool)+0x32>
  if (senseCount >= SENSE_MAX) { VF("WRN: Sense::add(), senseCount exceeded ignoring pin "); VL(pin); return 0; }
    5430:	7822      	ldrb	r2, [r4, #0]
    5432:	2a07      	cmp	r2, #7
    5434:	d806      	bhi.n	5444 <Sense::add(int, int, long, bool)+0x30>
  if (trigger < 0 || trigger >= SENSE_MAX_TRIGGER) { VF("WRN: Sense::add(), trigger value invalid ignoring pin "); VL(pin); return 0; }
    5436:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
    543a:	d203      	bcs.n	5444 <Sense::add(int, int, long, bool)+0x30>
  if (initState != INPUT && initState != INPUT_PULLUP && initState != INPUT_PULLDOWN) {
    543c:	1eb2      	subs	r2, r6, #2
    543e:	2a01      	cmp	r2, #1
    5440:	d902      	bls.n	5448 <Sense::add(int, int, long, bool)+0x34>
    5442:	b10e      	cbz	r6, 5448 <Sense::add(int, int, long, bool)+0x34>
  if ((pin == OFF || trigger == OFF) && !force) return 0;
    5444:	2000      	movs	r0, #0
  }
  VF("MSG: Sense"); V(senseCount); V(", init ");
  senseInput[senseCount] = new SenseInput(pin, initState, trigger);
  senseCount++;
  return senseCount;
}
    5446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  senseInput[senseCount] = new SenseInput(pin, initState, trigger);
    5448:	202c      	movs	r0, #44	; 0x2c
    544a:	f013 f8d9 	bl	18600 <operator new(unsigned int)>
    544e:	463b      	mov	r3, r7
    5450:	4632      	mov	r2, r6
    5452:	4629      	mov	r1, r5
    5454:	4605      	mov	r5, r0
    5456:	f7ff ffab 	bl	53b0 <SenseInput::SenseInput(int, int, long)>
    545a:	7822      	ldrb	r2, [r4, #0]
  senseCount++;
    545c:	1c53      	adds	r3, r2, #1
  senseInput[senseCount] = new SenseInput(pin, initState, trigger);
    545e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  senseCount++;
    5462:	b2d8      	uxtb	r0, r3
  senseInput[senseCount] = new SenseInput(pin, initState, trigger);
    5464:	6055      	str	r5, [r2, #4]
  senseCount++;
    5466:	7020      	strb	r0, [r4, #0]
}
    5468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    546a:	bf00      	nop

0000546c <Sense::isOn(unsigned char)>:

int Sense::isOn(uint8_t handle) {
  if (handle == 0) return false;
    546c:	b909      	cbnz	r1, 5472 <Sense::isOn(unsigned char)+0x6>
  return senseInput[handle - 1]->isOn();
}
    546e:	4608      	mov	r0, r1
    5470:	4770      	bx	lr
  return senseInput[handle - 1]->isOn();
    5472:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5476:	f7ff befd 	b.w	5274 <SenseInput::isOn()>
    547a:	bf00      	nop

0000547c <Sense::reverse(unsigned char, bool)>:
  if (handle == 0) return false;
  return senseInput[handle - 1]->changed();
}

void Sense::reverse(uint8_t handle, bool state) {
  if (handle == 0) return;
    547c:	b111      	cbz	r1, 5484 <Sense::reverse(unsigned char, bool)+0x8>
  public:
    SenseInput(int pin, int initState, int32_t trigger);

    int isOn();
    int changed();
    inline void reverse(bool state) { reverseState = state; }
    547e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
    5482:	721a      	strb	r2, [r3, #8]
  senseInput[handle - 1]->reverse(state);
}
    5484:	4770      	bx	lr
    5486:	bf00      	nop

00005488 <Sense::poll()>:

void Sense::poll() {
    5488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < senseCount; i++) { senseInput[i]->poll(); Y; }
    548a:	7803      	ldrb	r3, [r0, #0]
    548c:	b173      	cbz	r3, 54ac <Sense::poll()+0x24>
    548e:	4606      	mov	r6, r0
    5490:	4605      	mov	r5, r0
    5492:	2400      	movs	r4, #0
    5494:	4f06      	ldr	r7, [pc, #24]	; (54b0 <Sense::poll()+0x28>)
    5496:	f855 0f04 	ldr.w	r0, [r5, #4]!
    549a:	3401      	adds	r4, #1
    549c:	f7ff ff32 	bl	5304 <SenseInput::poll()>
    54a0:	4638      	mov	r0, r7
    54a2:	f000 ffcd 	bl	6440 <Tasks::yield()>
    54a6:	7833      	ldrb	r3, [r6, #0]
    54a8:	42a3      	cmp	r3, r4
    54aa:	dcf4      	bgt.n	5496 <Sense::poll()+0xe>
}
    54ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54ae:	bf00      	nop
    54b0:	2000634c 	.word	0x2000634c

000054b4 <_GLOBAL__sub_I__ZN10SenseInputC2Eiil>:
    int lastResult = LOW;
    int stableSample = 0;
    unsigned long stableStartMs = 0;
};

class Sense {
    54b4:	4b01      	ldr	r3, [pc, #4]	; (54bc <_GLOBAL__sub_I__ZN10SenseInputC2Eiil+0x8>)
    54b6:	2200      	movs	r2, #0
    54b8:	701a      	strb	r2, [r3, #0]

Sense sense;
    54ba:	4770      	bx	lr
    54bc:	200062f8 	.word	0x200062f8

000054c0 <SerialLocal::available()>:
      uint8_t p = recv_head;
    54c0:	f890 c10d 	ldrb.w	ip, [r0, #269]	; 0x10d
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    54c4:	eb00 030c 	add.w	r3, r0, ip
    54c8:	7b5b      	ldrb	r3, [r3, #13]
    54ca:	b19b      	cbz	r3, 54f4 <SerialLocal::available()+0x34>
    54cc:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
      uint8_t c = 0;
    54d0:	2300      	movs	r3, #0
    54d2:	eba1 010c 	sub.w	r1, r1, ip
    54d6:	b2c9      	uxtb	r1, r1
    54d8:	e008      	b.n	54ec <SerialLocal::available()+0x2c>
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    54da:	2bff      	cmp	r3, #255	; 0xff
    54dc:	d00a      	beq.n	54f4 <SerialLocal::available()+0x34>
    54de:	b2d3      	uxtb	r3, r2
    54e0:	eb0c 0203 	add.w	r2, ip, r3
    54e4:	fa50 f282 	uxtab	r2, r0, r2
    54e8:	7b52      	ldrb	r2, [r2, #13]
    54ea:	b11a      	cbz	r2, 54f4 <SerialLocal::available()+0x34>
    54ec:	428b      	cmp	r3, r1
    54ee:	f103 0201 	add.w	r2, r3, #1
    54f2:	d1f2      	bne.n	54da <SerialLocal::available()+0x1a>
    54f4:	4618      	mov	r0, r3
    }
    54f6:	4770      	bx	lr

000054f8 <SerialLocal::flush()>:
    }
    54f8:	4770      	bx	lr
    54fa:	bf00      	nop

000054fc <SerialLocal::write(unsigned char)>:
    inline size_t write(uint8_t data) {
    54fc:	4603      	mov	r3, r0
    }
    54fe:	2001      	movs	r0, #1
    inline size_t write(uint8_t data) {
    5500:	b500      	push	{lr}
      xmit_buffer[xmit_tail] = data;
    5502:	f893 c210 	ldrb.w	ip, [r3, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    5506:	f04f 0e00 	mov.w	lr, #0
      xmit_tail++;
    550a:	eb0c 0200 	add.w	r2, ip, r0
      xmit_buffer[xmit_tail] = data;
    550e:	449c      	add	ip, r3
      xmit_tail &= 0b1111111;
    5510:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      xmit_buffer[xmit_tail] = data;
    5514:	f88c 110f 	strb.w	r1, [ip, #271]	; 0x10f
      xmit_buffer[xmit_tail] = 0;
    5518:	1899      	adds	r1, r3, r2
      xmit_tail &= 0b1111111;
    551a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    551e:	f881 e10f 	strb.w	lr, [r1, #271]	; 0x10f
    }
    5522:	f85d fb04 	ldr.w	pc, [sp], #4
    5526:	bf00      	nop

00005528 <SerialLocal::write(unsigned char const*, unsigned int)>:
    size_t write(const uint8_t* data, size_t count) {
    5528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      for (int i = 0; i < (int)count; i++) { if (!write(data[i])) return i; }
    552c:	f1b2 0800 	subs.w	r8, r2, #0
    5530:	dd27      	ble.n	5582 <SerialLocal::write(unsigned char const*, unsigned int)+0x5a>
    5532:	1e4d      	subs	r5, r1, #1
    5534:	4604      	mov	r4, r0
    5536:	f1c1 0601 	rsb	r6, r1, #1
    553a:	4f14      	ldr	r7, [pc, #80]	; (558c <SerialLocal::write(unsigned char const*, unsigned int)+0x64>)
    553c:	eb05 0908 	add.w	r9, r5, r8
      xmit_buffer[xmit_tail] = 0;
    5540:	f04f 0a00 	mov.w	sl, #0
    5544:	e00e      	b.n	5564 <SerialLocal::write(unsigned char const*, unsigned int)+0x3c>
      xmit_buffer[xmit_tail] = data;
    5546:	f894 0210 	ldrb.w	r0, [r4, #528]	; 0x210
      xmit_tail++;
    554a:	1c43      	adds	r3, r0, #1
      xmit_buffer[xmit_tail] = data;
    554c:	4420      	add	r0, r4
      xmit_tail &= 0b1111111;
    554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      xmit_buffer[xmit_tail] = data;
    5552:	f880 110f 	strb.w	r1, [r0, #271]	; 0x10f
      xmit_buffer[xmit_tail] = 0;
    5556:	18e2      	adds	r2, r4, r3
      xmit_tail &= 0b1111111;
    5558:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
      xmit_buffer[xmit_tail] = 0;
    555c:	f882 a10f 	strb.w	sl, [r2, #271]	; 0x10f
      for (int i = 0; i < (int)count; i++) { if (!write(data[i])) return i; }
    5560:	454d      	cmp	r5, r9
    5562:	d00e      	beq.n	5582 <SerialLocal::write(unsigned char const*, unsigned int)+0x5a>
    5564:	6823      	ldr	r3, [r4, #0]
    5566:	eb06 0b05 	add.w	fp, r6, r5
    556a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    556e:	681b      	ldr	r3, [r3, #0]
    5570:	42bb      	cmp	r3, r7
    5572:	d0e8      	beq.n	5546 <SerialLocal::write(unsigned char const*, unsigned int)+0x1e>
    5574:	4620      	mov	r0, r4
    5576:	4798      	blx	r3
    5578:	2800      	cmp	r0, #0
    557a:	d1f1      	bne.n	5560 <SerialLocal::write(unsigned char const*, unsigned int)+0x38>
      return count;
    }
    557c:	4658      	mov	r0, fp
    557e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t write(const uint8_t* data, size_t count) {
    5582:	46c3      	mov	fp, r8
    }
    5584:	4658      	mov	r0, fp
    5586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    558a:	bf00      	nop
    558c:	000054fd 	.word	0x000054fd

00005590 <SerialLocal::peek()>:
      if (!available()) return -1;
    5590:	6803      	ldr	r3, [r0, #0]
    5592:	4a15      	ldr	r2, [pc, #84]	; (55e8 <SerialLocal::peek()+0x58>)
    5594:	691b      	ldr	r3, [r3, #16]
    5596:	4293      	cmp	r3, r2
    inline int peek(void) {
    5598:	b510      	push	{r4, lr}
    559a:	4604      	mov	r4, r0
    559c:	d11d      	bne.n	55da <SerialLocal::peek()+0x4a>
      uint8_t p = recv_head;
    559e:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    55a2:	1823      	adds	r3, r4, r0
    55a4:	7b5b      	ldrb	r3, [r3, #13]
    55a6:	b1db      	cbz	r3, 55e0 <SerialLocal::peek()+0x50>
    55a8:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
      uint8_t c = 0;
    55ac:	2300      	movs	r3, #0
    55ae:	1a09      	subs	r1, r1, r0
    55b0:	b2c9      	uxtb	r1, r1
    55b2:	e008      	b.n	55c6 <SerialLocal::peek()+0x36>
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    55b4:	2bff      	cmp	r3, #255	; 0xff
    55b6:	b2d3      	uxtb	r3, r2
    55b8:	eb00 0203 	add.w	r2, r0, r3
    55bc:	d00a      	beq.n	55d4 <SerialLocal::peek()+0x44>
    55be:	fa54 f282 	uxtab	r2, r4, r2
    55c2:	7b52      	ldrb	r2, [r2, #13]
    55c4:	b132      	cbz	r2, 55d4 <SerialLocal::peek()+0x44>
    55c6:	428b      	cmp	r3, r1
    55c8:	f103 0201 	add.w	r2, r3, #1
    55cc:	d1f2      	bne.n	55b4 <SerialLocal::peek()+0x24>
      if (!available()) return -1;
    55ce:	b13b      	cbz	r3, 55e0 <SerialLocal::peek()+0x50>
    55d0:	f894 010d 	ldrb.w	r0, [r4, #269]	; 0x10d
      char c = recv_buffer[recv_head];
    55d4:	4404      	add	r4, r0
      return c;
    55d6:	7b60      	ldrb	r0, [r4, #13]
    }
    55d8:	bd10      	pop	{r4, pc}
      if (!available()) return -1;
    55da:	4798      	blx	r3
    55dc:	4603      	mov	r3, r0
    55de:	e7f6      	b.n	55ce <SerialLocal::peek()+0x3e>
    55e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    55e4:	bd10      	pop	{r4, pc}
    55e6:	bf00      	nop
    55e8:	000054c1 	.word	0x000054c1

000055ec <SerialLocal::read()>:

int SerialLocal::read(void) {
  if (!available()) return -1;
    55ec:	6803      	ldr	r3, [r0, #0]
    55ee:	4a1a      	ldr	r2, [pc, #104]	; (5658 <SerialLocal::read()+0x6c>)
    55f0:	691b      	ldr	r3, [r3, #16]
    55f2:	4293      	cmp	r3, r2
int SerialLocal::read(void) {
    55f4:	b510      	push	{r4, lr}
    55f6:	4604      	mov	r4, r0
    55f8:	d128      	bne.n	564c <SerialLocal::read()+0x60>
      uint8_t p = recv_head;
    55fa:	f890 010d 	ldrb.w	r0, [r0, #269]	; 0x10d
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    55fe:	1823      	adds	r3, r4, r0
    5600:	7b5b      	ldrb	r3, [r3, #13]
    5602:	b333      	cbz	r3, 5652 <SerialLocal::read()+0x66>
    5604:	f894 c10e 	ldrb.w	ip, [r4, #270]	; 0x10e
      uint8_t c = 0;
    5608:	2300      	movs	r3, #0
    560a:	ebac 0100 	sub.w	r1, ip, r0
    560e:	b2c9      	uxtb	r1, r1
    5610:	e008      	b.n	5624 <SerialLocal::read()+0x38>
      while (recv_buffer[p] && p != recv_tail && c < 255) { c++; p++; }
    5612:	2bff      	cmp	r3, #255	; 0xff
    5614:	b2d3      	uxtb	r3, r2
    5616:	eb00 0203 	add.w	r2, r0, r3
    561a:	d00a      	beq.n	5632 <SerialLocal::read()+0x46>
    561c:	fa54 f282 	uxtab	r2, r4, r2
    5620:	7b52      	ldrb	r2, [r2, #13]
    5622:	b132      	cbz	r2, 5632 <SerialLocal::read()+0x46>
    5624:	428b      	cmp	r3, r1
    5626:	f103 0201 	add.w	r2, r3, #1
    562a:	d1f2      	bne.n	5612 <SerialLocal::read()+0x26>
  if (!available()) return -1;
    562c:	b18b      	cbz	r3, 5652 <SerialLocal::read()+0x66>
    562e:	f894 c10e 	ldrb.w	ip, [r4, #270]	; 0x10e

  #ifdef ESP32
    xSemaphoreTake(mutex, portMAX_DELAY);
  #endif

  recv_buffer[recv_tail] = 0;
    5632:	2300      	movs	r3, #0
    5634:	44a4      	add	ip, r4
    5636:	f88c 300d 	strb.w	r3, [ip, #13]
  char c = recv_buffer[recv_head];
    563a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    563e:	18e2      	adds	r2, r4, r3
    5640:	7b50      	ldrb	r0, [r2, #13]
  if (c) recv_head++;
    5642:	b110      	cbz	r0, 564a <SerialLocal::read()+0x5e>
    5644:	3301      	adds	r3, #1
    5646:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d

  #ifdef ESP32
    xSemaphoreGive(mutex);
  #endif
  return c;
}
    564a:	bd10      	pop	{r4, pc}
  if (!available()) return -1;
    564c:	4798      	blx	r3
    564e:	4603      	mov	r3, r0
    5650:	e7ec      	b.n	562c <SerialLocal::read()+0x40>
    5652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5656:	bd10      	pop	{r4, pc}
    5658:	000054c1 	.word	0x000054c1

0000565c <SerialLocal::begin(long)>:
  xmit_index = 0;
    565c:	2300      	movs	r3, #0
    565e:	f880 320f 	strb.w	r3, [r0, #527]	; 0x20f
  recv_head = 0;
    5662:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
  recv_tail = 0;
    5666:	f8a0 310e 	strh.w	r3, [r0, #270]	; 0x10e
  recv_buffer[0] = 0;
    566a:	7343      	strb	r3, [r0, #13]
}
    566c:	4770      	bx	lr
    566e:	bf00      	nop

00005670 <SerialLocal::end()>:
void SerialLocal::end() { }
    5670:	4770      	bx	lr
    5672:	bf00      	nop

00005674 <Sound::alert()>:
    #endif
    #if STATUS_BUZZER >= 0
      tone(STATUS_BUZZER_PIN, STATUS_BUZZER, 1000);
    #endif
  }
}
    5674:	4770      	bx	lr
    5676:	bf00      	nop

00005678 <Sound::beep()>:
    5678:	4770      	bx	lr
    567a:	bf00      	nop

0000567c <Sound::click()>:
    567c:	4770      	bx	lr
    567e:	bf00      	nop

00005680 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
    5680:	6803      	ldr	r3, [r0, #0]
    5682:	4718      	bx	r3

00005684 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    5684:	680b      	ldr	r3, [r1, #0]
    5686:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    5688:	4770      	bx	lr
    568a:	bf00      	nop

0000568c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    568c:	680b      	ldr	r3, [r1, #0]
    568e:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    5690:	4770      	bx	lr
    5692:	bf00      	nop

00005694 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    5694:	4770      	bx	lr
    5696:	bf00      	nop

00005698 <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    5698:	b510      	push	{r4, lr}
    569a:	4604      	mov	r4, r0
		end();
    569c:	f012 faf0 	bl	17c80 <IntervalTimer::end()>
	}
    56a0:	4620      	mov	r0, r4
    56a2:	bd10      	pop	{r4, pc}

000056a4 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]>:
  for (uint8_t c = 0; c < TASKS_MAX; c++) {
    if (allocated[c]) delete task[c];
  }
}

uint8_t Tasks::add(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)()) {
    56a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a8:	469a      	mov	sl, r3
    56aa:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  // check priority
  if (priority > 7) return false;
  if (priority > highest_priority) highest_priority = priority;
    56ae:	7843      	ldrb	r3, [r0, #1]
uint8_t Tasks::add(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)()) {
    56b0:	4680      	mov	r8, r0
    56b2:	460f      	mov	r7, r1
    56b4:	4693      	mov	fp, r2
  if (priority > highest_priority) highest_priority = priority;
    56b6:	454b      	cmp	r3, r9
    56b8:	f100 0c0c 	add.w	ip, r0, #12
uint8_t Tasks::add(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)()) {
    56bc:	f04f 0400 	mov.w	r4, #0
  if (priority > highest_priority) highest_priority = priority;
    56c0:	bf38      	it	cc
    56c2:	f880 9001 	strbcc.w	r9, [r0, #1]

  // find the next free task
  int8_t e = -1;
  for (uint8_t c = 0; c < TASKS_MAX; c++) {
    56c6:	e002      	b.n	56ce <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0x2a>
    56c8:	3401      	adds	r4, #1
    56ca:	2c34      	cmp	r4, #52	; 0x34
    56cc:	d045      	beq.n	575a <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0xb6>
    if (!allocated[c]) { e = c; break; }
    56ce:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
    56d2:	b2e6      	uxtb	r6, r4
    56d4:	2d00      	cmp	r5, #0
    56d6:	d1f7      	bne.n	56c8 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0x24>
  }
  // no tasks available
  if (e == -1) return false;

  // create the task handler
  task[e] = new Task(period, duration, repeat, priority, callback);
    56d8:	2034      	movs	r0, #52	; 0x34
    56da:	f012 ff91 	bl	18600 <operator new(unsigned int)>
  idle = period == 0;
    56de:	fab7 f387 	clz	r3, r7
  this->duration = duration;
    56e2:	f8c0 b014 	str.w	fp, [r0, #20]
  idle = period == 0;
    56e6:	095b      	lsrs	r3, r3, #5
Task::Task(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)()) {
    56e8:	7005      	strb	r5, [r0, #0]
    56ea:	6105      	str	r5, [r0, #16]
  idle = period == 0;
    56ec:	7683      	strb	r3, [r0, #26]
Task::Task(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)()) {
    56ee:	2301      	movs	r3, #1
    56f0:	76c5      	strb	r5, [r0, #27]
    56f2:	7043      	strb	r3, [r0, #1]
    56f4:	6245      	str	r5, [r0, #36]	; 0x24
    56f6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
  this->period   = period;
    56fa:	60c7      	str	r7, [r0, #12]
  this->repeat   = repeat;
    56fc:	f880 a018 	strb.w	sl, [r0, #24]
Task::Task(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)()) {
    5700:	8383      	strh	r3, [r0, #28]
    5702:	6305      	str	r5, [r0, #48]	; 0x30
  if (!repeat) immediate = false;
    5704:	f1ba 0f00 	cmp.w	sl, #0
    5708:	d024      	beq.n	5754 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0xb0>
  this->callback = callback;
    570a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  strcpy(processName, "");
    570c:	2100      	movs	r1, #0
  this->priority = priority;
    570e:	f880 9019 	strb.w	r9, [r0, #25]
  this->callback = callback;
    5712:	6303      	str	r3, [r0, #48]	; 0x30
	return systick_millis_count;
    5714:	4b12      	ldr	r3, [pc, #72]	; (5760 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0xbc>)
  strcpy(processName, "");
    5716:	7081      	strb	r1, [r0, #2]
    5718:	681a      	ldr	r2, [r3, #0]
  next_task_time = start_time + period;
    571a:	18bb      	adds	r3, r7, r2
  start_time     = millis();
    571c:	6202      	str	r2, [r0, #32]
  }
}

void Tasks::updateEventRange() {
  // scan for highest task handle
  highest_task = 0;
    571e:	4642      	mov	r2, r8
  next_task_time = start_time + period;
    5720:	6283      	str	r3, [r0, #40]	; 0x28
  task[e] = new Task(period, duration, repeat, priority, callback);
    5722:	f104 0312 	add.w	r3, r4, #18
  if (task[e] != NULL) allocated[e] = true; else return false;
    5726:	4444      	add	r4, r8
  task[e] = new Task(period, duration, repeat, priority, callback);
    5728:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  if (task[e] != NULL) allocated[e] = true; else return false;
    572c:	2301      	movs	r3, #1
    572e:	7363      	strb	r3, [r4, #13]
  highest_task = 0;
    5730:	2333      	movs	r3, #51	; 0x33
    5732:	f802 1b41 	strb.w	r1, [r2], #65
  for (int8_t e = TASKS_MAX - 1; e >= 0 ; e--) {
    5736:	e001      	b.n	573c <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0x98>
    5738:	1c59      	adds	r1, r3, #1
    573a:	d007      	beq.n	574c <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0xa8>
    if (allocated[e]) {
    573c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    5740:	b2dc      	uxtb	r4, r3
  for (int8_t e = TASKS_MAX - 1; e >= 0 ; e--) {
    5742:	3b01      	subs	r3, #1
    if (allocated[e]) {
    5744:	2900      	cmp	r1, #0
    5746:	d0f7      	beq.n	5738 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0x94>
      highest_task = e;
    5748:	f888 4000 	strb.w	r4, [r8]
  return e + 1;
    574c:	1c70      	adds	r0, r6, #1
    574e:	b2c0      	uxtb	r0, r0
}
    5750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!repeat) immediate = false;
    5754:	f880 a001 	strb.w	sl, [r0, #1]
    5758:	e7d7      	b.n	570a <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]+0x66>
  if (e == -1) return false;
    575a:	2000      	movs	r0, #0
}
    575c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5760:	20006344 	.word	0x20006344
    5764:	00000000 	.word	0x00000000

00005768 <HAL_HWTIMER1_WRAPPER()>:

  #define HAL_HWTIMER1_SET_PERIOD() itimer1.update(_nextPeriod1)
  void HAL_HWTIMER1_WRAPPER() {
    TASKS_HWTIMER1_PROFILER_PREFIX;
    static uint16_t count = 0;
    if (_nextRep1 > 1) { count++; if (count%_nextRep1 != 0) goto done; }
    5768:	4a1f      	ldr	r2, [pc, #124]	; (57e8 <HAL_HWTIMER1_WRAPPER()+0x80>)
  void HAL_HWTIMER1_WRAPPER() {
    576a:	b508      	push	{r3, lr}
    if (_nextRep1 > 1) { count++; if (count%_nextRep1 != 0) goto done; }
    576c:	8813      	ldrh	r3, [r2, #0]
    576e:	b29b      	uxth	r3, r3
    5770:	2b01      	cmp	r3, #1
    5772:	d90c      	bls.n	578e <HAL_HWTIMER1_WRAPPER()+0x26>
    5774:	481d      	ldr	r0, [pc, #116]	; (57ec <HAL_HWTIMER1_WRAPPER()+0x84>)
    5776:	8811      	ldrh	r1, [r2, #0]
    5778:	8803      	ldrh	r3, [r0, #0]
    577a:	b289      	uxth	r1, r1
    577c:	3301      	adds	r3, #1
    577e:	b29b      	uxth	r3, r3
    5780:	fbb3 fcf1 	udiv	ip, r3, r1
    5784:	8003      	strh	r3, [r0, #0]
    5786:	fb01 331c 	mls	r3, r1, ip, r3
    578a:	b29b      	uxth	r3, r3
    578c:	bb13      	cbnz	r3, 57d4 <HAL_HWTIMER1_WRAPPER()+0x6c>
    if (_nextRep1) HAL_HWTIMER1_FUN();
    578e:	8813      	ldrh	r3, [r2, #0]
    5790:	b29b      	uxth	r3, r3
    5792:	bb03      	cbnz	r3, 57d6 <HAL_HWTIMER1_WRAPPER()+0x6e>
    HAL_HWTIMER1_SET_PERIOD();
    5794:	4b16      	ldr	r3, [pc, #88]	; (57f0 <HAL_HWTIMER1_WRAPPER()+0x88>)
    5796:	ed93 7b00 	vldr	d7, [r3]

	template <typename period_t>
	uint32_t cyclesFromPeriod(period_t period) {
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
    579a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57a2:	d417      	bmi.n	57d4 <HAL_HWTIMER1_WRAPPER()+0x6c>
    57a4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 57e0 <HAL_HWTIMER1_WRAPPER()+0x78>
    57a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    57ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57b0:	dc10      	bgt.n	57d4 <HAL_HWTIMER1_WRAPPER()+0x6c>
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
		if constexpr (std::is_floating_point_v<period_t>) // handles all float types
			return (float)(24000000 / 1000000) * period - 0.5f;
    57b2:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
    57b6:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    57ba:	eea7 6b05 	vfma.f64	d6, d7, d5
    57be:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    57c2:	ee17 3a90 	vmov	r3, s15
		if (cycles < 17) return;
    57c6:	2b10      	cmp	r3, #16
    57c8:	d904      	bls.n	57d4 <HAL_HWTIMER1_WRAPPER()+0x6c>
		if (channel) channel->LDVAL = cycles;
    57ca:	4a0a      	ldr	r2, [pc, #40]	; (57f4 <HAL_HWTIMER1_WRAPPER()+0x8c>)
    57cc:	6812      	ldr	r2, [r2, #0]
    57ce:	b10a      	cbz	r2, 57d4 <HAL_HWTIMER1_WRAPPER()+0x6c>
    57d0:	edc2 7a00 	vstr	s15, [r2]
    done: {}
    TASKS_HWTIMER1_PROFILER_SUFFIX;
  }
    57d4:	bd08      	pop	{r3, pc}
    if (_nextRep1) HAL_HWTIMER1_FUN();
    57d6:	4b08      	ldr	r3, [pc, #32]	; (57f8 <HAL_HWTIMER1_WRAPPER()+0x90>)
    57d8:	681b      	ldr	r3, [r3, #0]
    57da:	4798      	blx	r3
    57dc:	e7da      	b.n	5794 <HAL_HWTIMER1_WRAPPER()+0x2c>
    57de:	bf00      	nop
    57e0:	54000000 	.word	0x54000000
    57e4:	41a55555 	.word	0x41a55555
    57e8:	20006a8e 	.word	0x20006a8e
    57ec:	20006a88 	.word	0x20006a88
    57f0:	20003668 	.word	0x20003668
    57f4:	20004614 	.word	0x20004614
    57f8:	20005658 	.word	0x20005658
    57fc:	00000000 	.word	0x00000000

00005800 <HAL_HWTIMER2_WRAPPER()>:
  
  #define HAL_HWTIMER2_SET_PERIOD() itimer2.update(_nextPeriod2)
  void HAL_HWTIMER2_WRAPPER() {
    TASKS_HWTIMER2_PROFILER_PREFIX;
    static uint16_t count = 0;
    if (_nextRep2 > 1) { count++; if (count%_nextRep2 != 0) goto done; }
    5800:	4a1f      	ldr	r2, [pc, #124]	; (5880 <HAL_HWTIMER2_WRAPPER()+0x80>)
  void HAL_HWTIMER2_WRAPPER() {
    5802:	b508      	push	{r3, lr}
    if (_nextRep2 > 1) { count++; if (count%_nextRep2 != 0) goto done; }
    5804:	8813      	ldrh	r3, [r2, #0]
    5806:	b29b      	uxth	r3, r3
    5808:	2b01      	cmp	r3, #1
    580a:	d90c      	bls.n	5826 <HAL_HWTIMER2_WRAPPER()+0x26>
    580c:	481d      	ldr	r0, [pc, #116]	; (5884 <HAL_HWTIMER2_WRAPPER()+0x84>)
    580e:	8811      	ldrh	r1, [r2, #0]
    5810:	8803      	ldrh	r3, [r0, #0]
    5812:	b289      	uxth	r1, r1
    5814:	3301      	adds	r3, #1
    5816:	b29b      	uxth	r3, r3
    5818:	fbb3 fcf1 	udiv	ip, r3, r1
    581c:	8003      	strh	r3, [r0, #0]
    581e:	fb01 331c 	mls	r3, r1, ip, r3
    5822:	b29b      	uxth	r3, r3
    5824:	bb13      	cbnz	r3, 586c <HAL_HWTIMER2_WRAPPER()+0x6c>
    if (_nextRep2) HAL_HWTIMER2_FUN();
    5826:	8813      	ldrh	r3, [r2, #0]
    5828:	b29b      	uxth	r3, r3
    582a:	bb03      	cbnz	r3, 586e <HAL_HWTIMER2_WRAPPER()+0x6e>
    HAL_HWTIMER2_SET_PERIOD();
    582c:	4b16      	ldr	r3, [pc, #88]	; (5888 <HAL_HWTIMER2_WRAPPER()+0x88>)
    582e:	ed93 7b00 	vldr	d7, [r3]
		if (period < 0 || period > MAX_PERIOD)
    5832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    5836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    583a:	d417      	bmi.n	586c <HAL_HWTIMER2_WRAPPER()+0x6c>
    583c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 5878 <HAL_HWTIMER2_WRAPPER()+0x78>
    5840:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5848:	dc10      	bgt.n	586c <HAL_HWTIMER2_WRAPPER()+0x6c>
			return (float)(24000000 / 1000000) * period - 0.5f;
    584a:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
    584e:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    5852:	eea7 6b05 	vfma.f64	d6, d7, d5
    5856:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    585a:	ee17 3a90 	vmov	r3, s15
		if (cycles < 17) return;
    585e:	2b10      	cmp	r3, #16
    5860:	d904      	bls.n	586c <HAL_HWTIMER2_WRAPPER()+0x6c>
		if (channel) channel->LDVAL = cycles;
    5862:	4a0a      	ldr	r2, [pc, #40]	; (588c <HAL_HWTIMER2_WRAPPER()+0x8c>)
    5864:	6812      	ldr	r2, [r2, #0]
    5866:	b10a      	cbz	r2, 586c <HAL_HWTIMER2_WRAPPER()+0x6c>
    5868:	edc2 7a00 	vstr	s15, [r2]
    done: {}
    TASKS_HWTIMER2_PROFILER_SUFFIX;
  }
    586c:	bd08      	pop	{r3, pc}
    if (_nextRep2) HAL_HWTIMER2_FUN();
    586e:	4b08      	ldr	r3, [pc, #32]	; (5890 <HAL_HWTIMER2_WRAPPER()+0x90>)
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	4798      	blx	r3
    5874:	e7da      	b.n	582c <HAL_HWTIMER2_WRAPPER()+0x2c>
    5876:	bf00      	nop
    5878:	54000000 	.word	0x54000000
    587c:	41a55555 	.word	0x41a55555
    5880:	20006a90 	.word	0x20006a90
    5884:	20006a8a 	.word	0x20006a8a
    5888:	20003670 	.word	0x20003670
    588c:	2000461c 	.word	0x2000461c
    5890:	2000565c 	.word	0x2000565c
    5894:	00000000 	.word	0x00000000

00005898 <HAL_HWTIMER3_WRAPPER()>:
  
  #define HAL_HWTIMER3_SET_PERIOD() itimer3.update(_nextPeriod3)
  void HAL_HWTIMER3_WRAPPER() {
    TASKS_HWTIMER3_PROFILER_PREFIX;
    static uint16_t count = 0;
    if (_nextRep3 > 1) { count++; if (count%_nextRep3 != 0) goto done; }
    5898:	4a1f      	ldr	r2, [pc, #124]	; (5918 <HAL_HWTIMER3_WRAPPER()+0x80>)
  void HAL_HWTIMER3_WRAPPER() {
    589a:	b508      	push	{r3, lr}
    if (_nextRep3 > 1) { count++; if (count%_nextRep3 != 0) goto done; }
    589c:	8813      	ldrh	r3, [r2, #0]
    589e:	b29b      	uxth	r3, r3
    58a0:	2b01      	cmp	r3, #1
    58a2:	d90c      	bls.n	58be <HAL_HWTIMER3_WRAPPER()+0x26>
    58a4:	481d      	ldr	r0, [pc, #116]	; (591c <HAL_HWTIMER3_WRAPPER()+0x84>)
    58a6:	8811      	ldrh	r1, [r2, #0]
    58a8:	8803      	ldrh	r3, [r0, #0]
    58aa:	b289      	uxth	r1, r1
    58ac:	3301      	adds	r3, #1
    58ae:	b29b      	uxth	r3, r3
    58b0:	fbb3 fcf1 	udiv	ip, r3, r1
    58b4:	8003      	strh	r3, [r0, #0]
    58b6:	fb01 331c 	mls	r3, r1, ip, r3
    58ba:	b29b      	uxth	r3, r3
    58bc:	bb13      	cbnz	r3, 5904 <HAL_HWTIMER3_WRAPPER()+0x6c>
    if (_nextRep3) HAL_HWTIMER3_FUN();
    58be:	8813      	ldrh	r3, [r2, #0]
    58c0:	b29b      	uxth	r3, r3
    58c2:	bb03      	cbnz	r3, 5906 <HAL_HWTIMER3_WRAPPER()+0x6e>
    HAL_HWTIMER3_SET_PERIOD();
    58c4:	4b16      	ldr	r3, [pc, #88]	; (5920 <HAL_HWTIMER3_WRAPPER()+0x88>)
    58c6:	ed93 7b00 	vldr	d7, [r3]
		if (period < 0 || period > MAX_PERIOD)
    58ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    58ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58d2:	d417      	bmi.n	5904 <HAL_HWTIMER3_WRAPPER()+0x6c>
    58d4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 5910 <HAL_HWTIMER3_WRAPPER()+0x78>
    58d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    58dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58e0:	dc10      	bgt.n	5904 <HAL_HWTIMER3_WRAPPER()+0x6c>
			return (float)(24000000 / 1000000) * period - 0.5f;
    58e2:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
    58e6:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    58ea:	eea7 6b05 	vfma.f64	d6, d7, d5
    58ee:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    58f2:	ee17 3a90 	vmov	r3, s15
		if (cycles < 17) return;
    58f6:	2b10      	cmp	r3, #16
    58f8:	d904      	bls.n	5904 <HAL_HWTIMER3_WRAPPER()+0x6c>
		if (channel) channel->LDVAL = cycles;
    58fa:	4a0a      	ldr	r2, [pc, #40]	; (5924 <HAL_HWTIMER3_WRAPPER()+0x8c>)
    58fc:	6812      	ldr	r2, [r2, #0]
    58fe:	b10a      	cbz	r2, 5904 <HAL_HWTIMER3_WRAPPER()+0x6c>
    5900:	edc2 7a00 	vstr	s15, [r2]
    done: {}
    TASKS_HWTIMER3_PROFILER_SUFFIX;
  }
    5904:	bd08      	pop	{r3, pc}
    if (_nextRep3) HAL_HWTIMER3_FUN();
    5906:	4b08      	ldr	r3, [pc, #32]	; (5928 <HAL_HWTIMER3_WRAPPER()+0x90>)
    5908:	681b      	ldr	r3, [r3, #0]
    590a:	4798      	blx	r3
    590c:	e7da      	b.n	58c4 <HAL_HWTIMER3_WRAPPER()+0x2c>
    590e:	bf00      	nop
    5910:	54000000 	.word	0x54000000
    5914:	41a55555 	.word	0x41a55555
    5918:	20006a92 	.word	0x20006a92
    591c:	20006a8c 	.word	0x20006a8c
    5920:	20003678 	.word	0x20003678
    5924:	20004624 	.word	0x20004624
    5928:	20005660 	.word	0x20005660
    592c:	00000000 	.word	0x00000000

00005930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>:
    if (period != 0 && period <= 2144000000) {
    5930:	4b29      	ldr	r3, [pc, #164]	; (59d8 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xa8>)
    5932:	1e4a      	subs	r2, r1, #1
    5934:	429a      	cmp	r2, r3
    5936:	d82a      	bhi.n	598e <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0x5e>
      double fperiod = period/timerRate16MHzTicks;
    5938:	2910      	cmp	r1, #16
      reps           = fperiod/4194304.0 + 1.0;
    593a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
      double fperiod = period/timerRate16MHzTicks;
    593e:	bf38      	it	cc
    5940:	2110      	movcc	r1, #16
    5942:	ee07 1a90 	vmov	s15, r1
      reps           = fperiod/4194304.0 + 1.0;
    5946:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 59c0 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0x90>
      double fperiod = period/timerRate16MHzTicks;
    594a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
      counts         = fperiod/reps/16.0;
    594e:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 59c8 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0x98>
      reps           = fperiod/4194304.0 + 1.0;
    5952:	eea7 6b04 	vfma.f64	d6, d7, d4
    5956:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    595a:	ee16 3a10 	vmov	r3, s12
    595e:	b29b      	uxth	r3, r3
      counts         = fperiod/reps/16.0;
    5960:	ee06 3a90 	vmov	s13, r3
    5964:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    5968:	ee87 6b04 	vdiv.f64	d6, d7, d4
    596c:	ee26 6b05 	vmul.f64	d6, d6, d5
    noInterrupts();
    5970:	b672      	cpsid	i
    switch (num) {
    5972:	3801      	subs	r0, #1
    5974:	2803      	cmp	r0, #3
    5976:	d808      	bhi.n	598a <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0x5a>
    5978:	e8df f000 	tbb	[pc, r0]
    597c:	0d02141b 	.word	0x0d02141b
      case 3: _nextPeriod3 = counts; _nextRep3 = reps; break;
    5980:	4916      	ldr	r1, [pc, #88]	; (59dc <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xac>)
    5982:	4a17      	ldr	r2, [pc, #92]	; (59e0 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xb0>)
    5984:	ed81 6b00 	vstr	d6, [r1]
    5988:	8013      	strh	r3, [r2, #0]
    interrupts();
    598a:	b662      	cpsie	i
  }
    598c:	4770      	bx	lr
    } else counts = 1000.0;                   // set for a 1ms period, stopped
    598e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 59d0 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xa0>
    uint16_t reps = 0;
    5992:	2300      	movs	r3, #0
    5994:	e7ec      	b.n	5970 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0x40>
      case 4: _nextPeriod4 = counts; _nextRep4 = reps; break;
    5996:	4913      	ldr	r1, [pc, #76]	; (59e4 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xb4>)
    5998:	4a13      	ldr	r2, [pc, #76]	; (59e8 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xb8>)
    599a:	ed81 6b00 	vstr	d6, [r1]
    599e:	8013      	strh	r3, [r2, #0]
    interrupts();
    59a0:	b662      	cpsie	i
  }
    59a2:	4770      	bx	lr
      case 2: _nextPeriod2 = counts; _nextRep2 = reps; break;
    59a4:	4911      	ldr	r1, [pc, #68]	; (59ec <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xbc>)
    59a6:	4a12      	ldr	r2, [pc, #72]	; (59f0 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xc0>)
    59a8:	ed81 6b00 	vstr	d6, [r1]
    59ac:	8013      	strh	r3, [r2, #0]
    interrupts();
    59ae:	b662      	cpsie	i
  }
    59b0:	4770      	bx	lr
      case 1: _nextPeriod1 = counts; _nextRep1 = reps; break;
    59b2:	4910      	ldr	r1, [pc, #64]	; (59f4 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xc4>)
    59b4:	4a10      	ldr	r2, [pc, #64]	; (59f8 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)+0xc8>)
    59b6:	ed81 6b00 	vstr	d6, [r1]
    59ba:	8013      	strh	r3, [r2, #0]
    interrupts();
    59bc:	b662      	cpsie	i
  }
    59be:	4770      	bx	lr
    59c0:	00000000 	.word	0x00000000
    59c4:	3e900000 	.word	0x3e900000
    59c8:	00000000 	.word	0x00000000
    59cc:	3fb00000 	.word	0x3fb00000
    59d0:	00000000 	.word	0x00000000
    59d4:	408f4000 	.word	0x408f4000
    59d8:	7fcad7ff 	.word	0x7fcad7ff
    59dc:	20003678 	.word	0x20003678
    59e0:	20006a92 	.word	0x20006a92
    59e4:	20003680 	.word	0x20003680
    59e8:	20006a94 	.word	0x20006a94
    59ec:	20003670 	.word	0x20003670
    59f0:	20006a90 	.word	0x20006a90
    59f4:	20003668 	.word	0x20003668
    59f8:	20006a8e 	.word	0x20006a8e
    59fc:	00000000 	.word	0x00000000

00005a00 <Task::setHardwareTimerPeriod() [clone .part.0]>:
void Task::setHardwareTimerPeriod() {
    5a00:	b538      	push	{r3, r4, r5, lr}
    5a02:	4604      	mov	r4, r0
    period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    5a04:	4a44      	ldr	r2, [pc, #272]	; (5b18 <Task::setHardwareTimerPeriod() [clone .part.0]+0x118>)
    5a06:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    period_units = PU_SUB_MICROS;
    5a0a:	2303      	movs	r3, #3
    period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    5a0c:	edd4 6a04 	vldr	s13, [r4, #16]
    unsigned long lastPeriod = period;
    5a10:	68c5      	ldr	r5, [r0, #12]
    period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    5a12:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    period_units = PU_SUB_MICROS;
    5a16:	8383      	strh	r3, [r0, #28]
    HAL_HWTIMER_PREPARE_PERIOD(hardware_timer, period);
    5a18:	7800      	ldrb	r0, [r0, #0]
    period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    5a1a:	ed92 5b00 	vldr	d5, [r2]
    5a1e:	eea6 7b05 	vfma.f64	d7, d6, d5
    5a22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    5a26:	ee17 1a90 	vmov	r1, s15
    5a2a:	edc4 7a03 	vstr	s15, [r4, #12]
    HAL_HWTIMER_PREPARE_PERIOD(hardware_timer, period);
    5a2e:	f7ff ff7f 	bl	5930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>
    if (lastPeriod > 1600000UL && period < lastPeriod) {
    5a32:	4b3a      	ldr	r3, [pc, #232]	; (5b1c <Task::setHardwareTimerPeriod() [clone .part.0]+0x11c>)
    5a34:	429d      	cmp	r5, r3
    5a36:	d909      	bls.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
    5a38:	68e3      	ldr	r3, [r4, #12]
    5a3a:	429d      	cmp	r5, r3
    5a3c:	d906      	bls.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
      switch (hardware_timer) {
    5a3e:	7823      	ldrb	r3, [r4, #0]
    5a40:	2b02      	cmp	r3, #2
    5a42:	d043      	beq.n	5acc <Task::setHardwareTimerPeriod() [clone .part.0]+0xcc>
    5a44:	2b03      	cmp	r3, #3
    5a46:	d022      	beq.n	5a8e <Task::setHardwareTimerPeriod() [clone .part.0]+0x8e>
    5a48:	2b01      	cmp	r3, #1
    5a4a:	d000      	beq.n	5a4e <Task::setHardwareTimerPeriod() [clone .part.0]+0x4e>
}
    5a4c:	bd38      	pop	{r3, r4, r5, pc}
        case 1: HAL_HWTIMER1_SET_PERIOD(); break;
    5a4e:	4b34      	ldr	r3, [pc, #208]	; (5b20 <Task::setHardwareTimerPeriod() [clone .part.0]+0x120>)
    5a50:	ed93 7b00 	vldr	d7, [r3]
		if (period < 0 || period > MAX_PERIOD)
    5a54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    5a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a5c:	d4f6      	bmi.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
    5a5e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 5b10 <Task::setHardwareTimerPeriod() [clone .part.0]+0x110>
    5a62:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a6a:	dcef      	bgt.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
			return (float)(24000000 / 1000000) * period - 0.5f;
    5a6c:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
    5a70:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    5a74:	eea7 6b05 	vfma.f64	d6, d7, d5
    5a78:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    5a7c:	ee17 3a90 	vmov	r3, s15
		if (cycles < 17) return;
    5a80:	2b10      	cmp	r3, #16
    5a82:	d9e3      	bls.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
		if (channel) channel->LDVAL = cycles;
    5a84:	4a27      	ldr	r2, [pc, #156]	; (5b24 <Task::setHardwareTimerPeriod() [clone .part.0]+0x124>)
    5a86:	6812      	ldr	r2, [r2, #0]
    5a88:	2a00      	cmp	r2, #0
    5a8a:	d13e      	bne.n	5b0a <Task::setHardwareTimerPeriod() [clone .part.0]+0x10a>
}
    5a8c:	bd38      	pop	{r3, r4, r5, pc}
        case 3: HAL_HWTIMER3_SET_PERIOD(); break;
    5a8e:	4b26      	ldr	r3, [pc, #152]	; (5b28 <Task::setHardwareTimerPeriod() [clone .part.0]+0x128>)
    5a90:	ed93 7b00 	vldr	d7, [r3]
		if (period < 0 || period > MAX_PERIOD)
    5a94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    5a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a9c:	d4d6      	bmi.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
    5a9e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 5b10 <Task::setHardwareTimerPeriod() [clone .part.0]+0x110>
    5aa2:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5aaa:	dccf      	bgt.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
			return (float)(24000000 / 1000000) * period - 0.5f;
    5aac:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
    5ab0:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    5ab4:	eea7 6b05 	vfma.f64	d6, d7, d5
    5ab8:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    5abc:	ee17 3a90 	vmov	r3, s15
		if (cycles < 17) return;
    5ac0:	2b10      	cmp	r3, #16
    5ac2:	d9c3      	bls.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
		if (channel) channel->LDVAL = cycles;
    5ac4:	4a19      	ldr	r2, [pc, #100]	; (5b2c <Task::setHardwareTimerPeriod() [clone .part.0]+0x12c>)
    5ac6:	6812      	ldr	r2, [r2, #0]
    5ac8:	b9fa      	cbnz	r2, 5b0a <Task::setHardwareTimerPeriod() [clone .part.0]+0x10a>
}
    5aca:	bd38      	pop	{r3, r4, r5, pc}
        case 2: HAL_HWTIMER2_SET_PERIOD(); break;
    5acc:	4b18      	ldr	r3, [pc, #96]	; (5b30 <Task::setHardwareTimerPeriod() [clone .part.0]+0x130>)
    5ace:	ed93 7b00 	vldr	d7, [r3]
		if (period < 0 || period > MAX_PERIOD)
    5ad2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    5ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ada:	d4b7      	bmi.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
    5adc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 5b10 <Task::setHardwareTimerPeriod() [clone .part.0]+0x110>
    5ae0:	eeb4 7bc6 	vcmpe.f64	d7, d6
    5ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ae8:	dcb0      	bgt.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
			return (float)(24000000 / 1000000) * period - 0.5f;
    5aea:	eeb3 5b08 	vmov.f64	d5, #56	; 0x41c00000  24.0
    5aee:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    5af2:	eea7 6b05 	vfma.f64	d6, d7, d5
    5af6:	eefc 7bc6 	vcvt.u32.f64	s15, d6
    5afa:	ee17 3a90 	vmov	r3, s15
		if (cycles < 17) return;
    5afe:	2b10      	cmp	r3, #16
    5b00:	d9a4      	bls.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
		if (channel) channel->LDVAL = cycles;
    5b02:	4a0c      	ldr	r2, [pc, #48]	; (5b34 <Task::setHardwareTimerPeriod() [clone .part.0]+0x134>)
    5b04:	6812      	ldr	r2, [r2, #0]
    5b06:	2a00      	cmp	r2, #0
    5b08:	d0a0      	beq.n	5a4c <Task::setHardwareTimerPeriod() [clone .part.0]+0x4c>
    5b0a:	6013      	str	r3, [r2, #0]
}
    5b0c:	bd38      	pop	{r3, r4, r5, pc}
    5b0e:	bf00      	nop
    5b10:	54000000 	.word	0x54000000
    5b14:	41a55555 	.word	0x41a55555
    5b18:	20003688 	.word	0x20003688
    5b1c:	00186a00 	.word	0x00186a00
    5b20:	20003668 	.word	0x20003668
    5b24:	20004614 	.word	0x20004614
    5b28:	20003678 	.word	0x20003678
    5b2c:	20004624 	.word	0x20004624
    5b30:	20003670 	.word	0x20003670
    5b34:	2000461c 	.word	0x2000461c

00005b38 <tasksMonitor()>:
void tasksMonitor() {
    5b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (_lastPpsAverageSubMicros != _task_ppsAverageSubMicros) {
    5b3c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5be8 <tasksMonitor()+0xb0>
    5b40:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5bec <tasksMonitor()+0xb4>
    5b44:	f8d8 3000 	ldr.w	r3, [r8]
    5b48:	f8d9 2000 	ldr.w	r2, [r9]
    5b4c:	429a      	cmp	r2, r3
    5b4e:	d039      	beq.n	5bc4 <tasksMonitor()+0x8c>
    _task_masterFrequencyRatio = (double)_task_ppsAverageSubMicros/16000000.0L;
    5b50:	ed98 7a00 	vldr	s14, [r8]
  } while (++handle < highest_task);
    5b54:	2300      	movs	r3, #0
    5b56:	4d22      	ldr	r5, [pc, #136]	; (5be0 <tasksMonitor()+0xa8>)
    _task_masterFrequencyRatio = (double)_task_ppsAverageSubMicros/16000000.0L;
    5b58:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    5b5c:	4821      	ldr	r0, [pc, #132]	; (5be4 <tasksMonitor()+0xac>)
  } while (++handle < highest_task);
    5b5e:	462a      	mov	r2, r5
    5b60:	4619      	mov	r1, r3
    _task_masterFrequencyRatio = (double)_task_ppsAverageSubMicros/16000000.0L;
    5b62:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 5bd8 <tasksMonitor()+0xa0>
  } while (++handle < highest_task);
    5b66:	f812 4b0c 	ldrb.w	r4, [r2], #12
    _task_masterFrequencyRatio = (double)_task_ppsAverageSubMicros/16000000.0L;
    5b6a:	ee87 6b05 	vdiv.f64	d6, d7, d5
    5b6e:	ed80 6b00 	vstr	d6, [r0]
uint8_t Tasks::getNextHandle(uint8_t handle) {
    5b72:	e002      	b.n	5b7a <tasksMonitor()+0x42>
  } while (++handle < highest_task);
    5b74:	b2d9      	uxtb	r1, r3
    5b76:	428c      	cmp	r4, r1
    5b78:	d920      	bls.n	5bbc <tasksMonitor()+0x84>
    if (allocated[handle]) {
    5b7a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  } while (++handle < highest_task);
    5b7e:	3301      	adds	r3, #1
    if (allocated[handle]) {
    5b80:	2800      	cmp	r0, #0
    5b82:	d0f7      	beq.n	5b74 <tasksMonitor()+0x3c>
      return handle + 1;
    5b84:	3101      	adds	r1, #1
    5b86:	2634      	movs	r6, #52	; 0x34
    next_period_units = PU_SUB_MICROS;
    5b88:	2703      	movs	r7, #3
      return handle + 1;
    5b8a:	b2cc      	uxtb	r4, r1
  if (handle != 0 && allocated[handle - 1]) {
    5b8c:	192b      	adds	r3, r5, r4
    5b8e:	7b1b      	ldrb	r3, [r3, #12]
    5b90:	b12b      	cbz	r3, 5b9e <tasksMonitor()+0x66>
    task[handle - 1]->refreshPeriod();
    5b92:	f104 0311 	add.w	r3, r4, #17
    5b96:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
  if (hardware_timer) {
    5b9a:	7803      	ldrb	r3, [r0, #0]
    5b9c:	b9b3      	cbnz	r3, 5bcc <tasksMonitor()+0x94>
  } while (++handle < highest_task);
    5b9e:	7829      	ldrb	r1, [r5, #0]
}
    5ba0:	e002      	b.n	5ba8 <tasksMonitor()+0x70>
  } while (++handle < highest_task);
    5ba2:	b2d4      	uxtb	r4, r2
    5ba4:	428c      	cmp	r4, r1
    5ba6:	d20f      	bcs.n	5bc8 <tasksMonitor()+0x90>
    if (allocated[handle]) {
    5ba8:	192b      	adds	r3, r5, r4
  } while (++handle < highest_task);
    5baa:	1c62      	adds	r2, r4, #1
    if (allocated[handle]) {
    5bac:	7b5b      	ldrb	r3, [r3, #13]
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d0f7      	beq.n	5ba2 <tasksMonitor()+0x6a>
      return handle + 1;
    5bb2:	b2d4      	uxtb	r4, r2
    for (int i = 0; i < TASKS_MAX; i++) {
    5bb4:	3e01      	subs	r6, #1
    5bb6:	d001      	beq.n	5bbc <tasksMonitor()+0x84>
      if (handle == 0) break;
    5bb8:	2c00      	cmp	r4, #0
    5bba:	d1e7      	bne.n	5b8c <tasksMonitor()+0x54>
    _lastPpsAverageSubMicros = _task_ppsAverageSubMicros;
    5bbc:	f8d8 3000 	ldr.w	r3, [r8]
    5bc0:	f8c9 3000 	str.w	r3, [r9]
}
    5bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    5bc8:	461c      	mov	r4, r3
    5bca:	e7f3      	b.n	5bb4 <tasksMonitor()+0x7c>
    next_period_units = PU_SUB_MICROS;
    5bcc:	7747      	strb	r7, [r0, #29]
    if (next_period_units == PU_MILLIS) next_period *= 16000UL; else if (next_period_units == PU_MICROS) next_period *= 16UL;
    5bce:	f7ff ff17 	bl	5a00 <Task::setHardwareTimerPeriod() [clone .part.0]>
}
    5bd2:	e7e4      	b.n	5b9e <tasksMonitor()+0x66>
    5bd4:	f3af 8000 	nop.w
    5bd8:	00000000 	.word	0x00000000
    5bdc:	416e8480 	.word	0x416e8480
    5be0:	2000634c 	.word	0x2000634c
    5be4:	20003688 	.word	0x20003688
    5be8:	200043cc 	.word	0x200043cc
    5bec:	20003e24 	.word	0x20003e24

00005bf0 <HAL_HWTIMER1_INIT(unsigned char)>:
		nvic_priority = n;
    5bf0:	4b1a      	ldr	r3, [pc, #104]	; (5c5c <HAL_HWTIMER1_INIT(unsigned char)+0x6c>)
		if (channel) {
    5bf2:	6819      	ldr	r1, [r3, #0]
  bool HAL_HWTIMER1_INIT(uint8_t priority) {
    5bf4:	b510      	push	{r4, lr}
		nvic_priority = n;
    5bf6:	7118      	strb	r0, [r3, #4]
    5bf8:	b08c      	sub	sp, #48	; 0x30
		if (channel) {
    5bfa:	b1a1      	cbz	r1, 5c26 <HAL_HWTIMER1_INIT(unsigned char)+0x36>
			int index = channel - IMXRT_PIT_CHANNELS;
    5bfc:	4b18      	ldr	r3, [pc, #96]	; (5c60 <HAL_HWTIMER1_INIT(unsigned char)+0x70>)
			nvic_priorites[index] = nvic_priority;
    5bfe:	4a19      	ldr	r2, [pc, #100]	; (5c64 <HAL_HWTIMER1_INIT(unsigned char)+0x74>)
			int index = channel - IMXRT_PIT_CHANNELS;
    5c00:	440b      	add	r3, r1
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    5c02:	4c19      	ldr	r4, [pc, #100]	; (5c68 <HAL_HWTIMER1_INIT(unsigned char)+0x78>)
			int index = channel - IMXRT_PIT_CHANNELS;
    5c04:	111b      	asrs	r3, r3, #4
			nvic_priorites[index] = nvic_priority;
    5c06:	54d0      	strb	r0, [r2, r3]
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    5c08:	7853      	ldrb	r3, [r2, #1]
    5c0a:	7810      	ldrb	r0, [r2, #0]
    5c0c:	7891      	ldrb	r1, [r2, #2]
    5c0e:	4283      	cmp	r3, r0
    5c10:	78d2      	ldrb	r2, [r2, #3]
    5c12:	bf28      	it	cs
    5c14:	4603      	movcs	r3, r0
    5c16:	428b      	cmp	r3, r1
    5c18:	bf28      	it	cs
    5c1a:	460b      	movcs	r3, r1
    5c1c:	4293      	cmp	r3, r2
    5c1e:	bf28      	it	cs
    5c20:	4613      	movcs	r3, r2
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    5c22:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
    5c26:	4b11      	ldr	r3, [pc, #68]	; (5c6c <HAL_HWTIMER1_INIT(unsigned char)+0x7c>)
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
    5c28:	a902      	add	r1, sp, #8
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    5c2a:	4a11      	ldr	r2, [pc, #68]	; (5c70 <HAL_HWTIMER1_INIT(unsigned char)+0x80>)
        vtable_ptr_->copy_ptr(
    5c2c:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
    5c2e:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
    5c30:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    5c32:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
    5c34:	f7ff fd26 	bl	5684 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    5c38:	f645 52bf 	movw	r2, #23999	; 0x5dbf
    5c3c:	a906      	add	r1, sp, #24
    5c3e:	4807      	ldr	r0, [pc, #28]	; (5c5c <HAL_HWTIMER1_INIT(unsigned char)+0x6c>)
    5c40:	f011 ff9c 	bl	17b7c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    5c44:	9b06      	ldr	r3, [sp, #24]
    5c46:	4604      	mov	r4, r0
    5c48:	a808      	add	r0, sp, #32
    5c4a:	68db      	ldr	r3, [r3, #12]
    5c4c:	4798      	blx	r3
    5c4e:	9b00      	ldr	r3, [sp, #0]
    5c50:	a802      	add	r0, sp, #8
    5c52:	68db      	ldr	r3, [r3, #12]
    5c54:	4798      	blx	r3
  }
    5c56:	4620      	mov	r0, r4
    5c58:	b00c      	add	sp, #48	; 0x30
    5c5a:	bd10      	pop	{r4, pc}
    5c5c:	20004614 	.word	0x20004614
    5c60:	bff7bf00 	.word	0xbff7bf00
    5c64:	20003e1c 	.word	0x20003e1c
    5c68:	e000e400 	.word	0xe000e400
    5c6c:	200026f8 	.word	0x200026f8
    5c70:	00005769 	.word	0x00005769

00005c74 <HAL_HWTIMER2_INIT(unsigned char)>:
		nvic_priority = n;
    5c74:	4b1a      	ldr	r3, [pc, #104]	; (5ce0 <HAL_HWTIMER2_INIT(unsigned char)+0x6c>)
		if (channel) {
    5c76:	6819      	ldr	r1, [r3, #0]
  bool HAL_HWTIMER2_INIT(uint8_t priority) {
    5c78:	b510      	push	{r4, lr}
		nvic_priority = n;
    5c7a:	7118      	strb	r0, [r3, #4]
    5c7c:	b08c      	sub	sp, #48	; 0x30
		if (channel) {
    5c7e:	b1a1      	cbz	r1, 5caa <HAL_HWTIMER2_INIT(unsigned char)+0x36>
			int index = channel - IMXRT_PIT_CHANNELS;
    5c80:	4b18      	ldr	r3, [pc, #96]	; (5ce4 <HAL_HWTIMER2_INIT(unsigned char)+0x70>)
			nvic_priorites[index] = nvic_priority;
    5c82:	4a19      	ldr	r2, [pc, #100]	; (5ce8 <HAL_HWTIMER2_INIT(unsigned char)+0x74>)
			int index = channel - IMXRT_PIT_CHANNELS;
    5c84:	440b      	add	r3, r1
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    5c86:	4c19      	ldr	r4, [pc, #100]	; (5cec <HAL_HWTIMER2_INIT(unsigned char)+0x78>)
			int index = channel - IMXRT_PIT_CHANNELS;
    5c88:	111b      	asrs	r3, r3, #4
			nvic_priorites[index] = nvic_priority;
    5c8a:	54d0      	strb	r0, [r2, r3]
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    5c8c:	7853      	ldrb	r3, [r2, #1]
    5c8e:	7810      	ldrb	r0, [r2, #0]
    5c90:	7891      	ldrb	r1, [r2, #2]
    5c92:	4283      	cmp	r3, r0
    5c94:	78d2      	ldrb	r2, [r2, #3]
    5c96:	bf28      	it	cs
    5c98:	4603      	movcs	r3, r0
    5c9a:	428b      	cmp	r3, r1
    5c9c:	bf28      	it	cs
    5c9e:	460b      	movcs	r3, r1
    5ca0:	4293      	cmp	r3, r2
    5ca2:	bf28      	it	cs
    5ca4:	4613      	movcs	r3, r2
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    5ca6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        vtable_ptr_ = std::addressof(vt);
    5caa:	4b11      	ldr	r3, [pc, #68]	; (5cf0 <HAL_HWTIMER2_INIT(unsigned char)+0x7c>)
        vtable_ptr_->copy_ptr(
    5cac:	a902      	add	r1, sp, #8
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    5cae:	4a11      	ldr	r2, [pc, #68]	; (5cf4 <HAL_HWTIMER2_INIT(unsigned char)+0x80>)
        vtable_ptr_->copy_ptr(
    5cb0:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
    5cb2:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
    5cb4:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    5cb6:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
    5cb8:	f7ff fce4 	bl	5684 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    5cbc:	f645 52bf 	movw	r2, #23999	; 0x5dbf
    5cc0:	a906      	add	r1, sp, #24
    5cc2:	4807      	ldr	r0, [pc, #28]	; (5ce0 <HAL_HWTIMER2_INIT(unsigned char)+0x6c>)
    5cc4:	f011 ff5a 	bl	17b7c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    5cc8:	9b06      	ldr	r3, [sp, #24]
    5cca:	4604      	mov	r4, r0
    5ccc:	a808      	add	r0, sp, #32
    5cce:	68db      	ldr	r3, [r3, #12]
    5cd0:	4798      	blx	r3
    5cd2:	9b00      	ldr	r3, [sp, #0]
    5cd4:	a802      	add	r0, sp, #8
    5cd6:	68db      	ldr	r3, [r3, #12]
    5cd8:	4798      	blx	r3
  }
    5cda:	4620      	mov	r0, r4
    5cdc:	b00c      	add	sp, #48	; 0x30
    5cde:	bd10      	pop	{r4, pc}
    5ce0:	2000461c 	.word	0x2000461c
    5ce4:	bff7bf00 	.word	0xbff7bf00
    5ce8:	20003e1c 	.word	0x20003e1c
    5cec:	e000e400 	.word	0xe000e400
    5cf0:	200026f8 	.word	0x200026f8
    5cf4:	00005801 	.word	0x00005801

00005cf8 <HAL_HWTIMER3_INIT(unsigned char)>:
		nvic_priority = n;
    5cf8:	4b1a      	ldr	r3, [pc, #104]	; (5d64 <HAL_HWTIMER3_INIT(unsigned char)+0x6c>)
		if (channel) {
    5cfa:	6819      	ldr	r1, [r3, #0]
  bool HAL_HWTIMER3_INIT(uint8_t priority) {
    5cfc:	b510      	push	{r4, lr}
		nvic_priority = n;
    5cfe:	7118      	strb	r0, [r3, #4]
    5d00:	b08c      	sub	sp, #48	; 0x30
		if (channel) {
    5d02:	b1a1      	cbz	r1, 5d2e <HAL_HWTIMER3_INIT(unsigned char)+0x36>
			int index = channel - IMXRT_PIT_CHANNELS;
    5d04:	4b18      	ldr	r3, [pc, #96]	; (5d68 <HAL_HWTIMER3_INIT(unsigned char)+0x70>)
			nvic_priorites[index] = nvic_priority;
    5d06:	4a19      	ldr	r2, [pc, #100]	; (5d6c <HAL_HWTIMER3_INIT(unsigned char)+0x74>)
			int index = channel - IMXRT_PIT_CHANNELS;
    5d08:	440b      	add	r3, r1
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    5d0a:	4c19      	ldr	r4, [pc, #100]	; (5d70 <HAL_HWTIMER3_INIT(unsigned char)+0x78>)
			int index = channel - IMXRT_PIT_CHANNELS;
    5d0c:	111b      	asrs	r3, r3, #4
			nvic_priorites[index] = nvic_priority;
    5d0e:	54d0      	strb	r0, [r2, r3]
				if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    5d10:	7853      	ldrb	r3, [r2, #1]
    5d12:	7810      	ldrb	r0, [r2, #0]
    5d14:	7891      	ldrb	r1, [r2, #2]
    5d16:	4283      	cmp	r3, r0
    5d18:	78d2      	ldrb	r2, [r2, #3]
    5d1a:	bf28      	it	cs
    5d1c:	4603      	movcs	r3, r0
    5d1e:	428b      	cmp	r3, r1
    5d20:	bf28      	it	cs
    5d22:	460b      	movcs	r3, r1
    5d24:	4293      	cmp	r3, r2
    5d26:	bf28      	it	cs
    5d28:	4613      	movcs	r3, r2
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    5d2a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        vtable_ptr_ = std::addressof(vt);
    5d2e:	4b11      	ldr	r3, [pc, #68]	; (5d74 <HAL_HWTIMER3_INIT(unsigned char)+0x7c>)
        vtable_ptr_->copy_ptr(
    5d30:	a902      	add	r1, sp, #8
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    5d32:	4a11      	ldr	r2, [pc, #68]	; (5d78 <HAL_HWTIMER3_INIT(unsigned char)+0x80>)
        vtable_ptr_->copy_ptr(
    5d34:	a808      	add	r0, sp, #32
        vtable_ptr_ = std::addressof(vt);
    5d36:	9300      	str	r3, [sp, #0]
        vtable_ptr_{other.vtable_ptr_}
    5d38:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    5d3a:	9202      	str	r2, [sp, #8]
        vtable_ptr_->copy_ptr(
    5d3c:	f7ff fca2 	bl	5684 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    5d40:	f645 52bf 	movw	r2, #23999	; 0x5dbf
    5d44:	a906      	add	r1, sp, #24
    5d46:	4807      	ldr	r0, [pc, #28]	; (5d64 <HAL_HWTIMER3_INIT(unsigned char)+0x6c>)
    5d48:	f011 ff18 	bl	17b7c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    5d4c:	9b06      	ldr	r3, [sp, #24]
    5d4e:	4604      	mov	r4, r0
    5d50:	a808      	add	r0, sp, #32
    5d52:	68db      	ldr	r3, [r3, #12]
    5d54:	4798      	blx	r3
    5d56:	9b00      	ldr	r3, [sp, #0]
    5d58:	a802      	add	r0, sp, #8
    5d5a:	68db      	ldr	r3, [r3, #12]
    5d5c:	4798      	blx	r3
  }
    5d5e:	4620      	mov	r0, r4
    5d60:	b00c      	add	sp, #48	; 0x30
    5d62:	bd10      	pop	{r4, pc}
    5d64:	20004624 	.word	0x20004624
    5d68:	bff7bf00 	.word	0xbff7bf00
    5d6c:	20003e1c 	.word	0x20003e1c
    5d70:	e000e400 	.word	0xe000e400
    5d74:	200026f8 	.word	0x200026f8
    5d78:	00005899 	.word	0x00005899

00005d7c <Task::~Task()>:
Task::~Task() {
    5d7c:	b510      	push	{r4, lr}
  switch (hardware_timer) {
    5d7e:	7803      	ldrb	r3, [r0, #0]
Task::~Task() {
    5d80:	4604      	mov	r4, r0
  switch (hardware_timer) {
    5d82:	2b02      	cmp	r3, #2
    5d84:	d005      	beq.n	5d92 <Task::~Task()+0x16>
    5d86:	2b03      	cmp	r3, #3
    5d88:	d013      	beq.n	5db2 <Task::~Task()+0x36>
    5d8a:	2b01      	cmp	r3, #1
    5d8c:	d009      	beq.n	5da2 <Task::~Task()+0x26>
}
    5d8e:	4620      	mov	r0, r4
    5d90:	bd10      	pop	{r4, pc}
    HAL_HWTIMER2_FUN = NULL;
    5d92:	4b0c      	ldr	r3, [pc, #48]	; (5dc4 <Task::~Task()+0x48>)
    5d94:	2200      	movs	r2, #0
    itimer2.end();
    5d96:	480c      	ldr	r0, [pc, #48]	; (5dc8 <Task::~Task()+0x4c>)
    HAL_HWTIMER2_FUN = NULL;
    5d98:	601a      	str	r2, [r3, #0]
    itimer2.end();
    5d9a:	f011 ff71 	bl	17c80 <IntervalTimer::end()>
    5d9e:	4620      	mov	r0, r4
    5da0:	bd10      	pop	{r4, pc}
    HAL_HWTIMER1_FUN = NULL;
    5da2:	4b0a      	ldr	r3, [pc, #40]	; (5dcc <Task::~Task()+0x50>)
    5da4:	2200      	movs	r2, #0
    itimer1.end();
    5da6:	480a      	ldr	r0, [pc, #40]	; (5dd0 <Task::~Task()+0x54>)
    HAL_HWTIMER1_FUN = NULL;
    5da8:	601a      	str	r2, [r3, #0]
    itimer1.end();
    5daa:	f011 ff69 	bl	17c80 <IntervalTimer::end()>
    5dae:	4620      	mov	r0, r4
    5db0:	bd10      	pop	{r4, pc}
    HAL_HWTIMER3_FUN = NULL;
    5db2:	4b08      	ldr	r3, [pc, #32]	; (5dd4 <Task::~Task()+0x58>)
    5db4:	2200      	movs	r2, #0
    itimer3.end();
    5db6:	4808      	ldr	r0, [pc, #32]	; (5dd8 <Task::~Task()+0x5c>)
    HAL_HWTIMER3_FUN = NULL;
    5db8:	601a      	str	r2, [r3, #0]
    itimer3.end();
    5dba:	f011 ff61 	bl	17c80 <IntervalTimer::end()>
    5dbe:	4620      	mov	r0, r4
    5dc0:	bd10      	pop	{r4, pc}
    5dc2:	bf00      	nop
    5dc4:	2000565c 	.word	0x2000565c
    5dc8:	2000461c 	.word	0x2000461c
    5dcc:	20005658 	.word	0x20005658
    5dd0:	20004614 	.word	0x20004614
    5dd4:	20005660 	.word	0x20005660
    5dd8:	20004624 	.word	0x20004624

00005ddc <Tasks::~Tasks()>:
Tasks::~Tasks() {
    5ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5de0:	eba0 0780 	sub.w	r7, r0, r0, lsl #2
    5de4:	4680      	mov	r8, r0
    5de6:	f100 040c 	add.w	r4, r0, #12
    5dea:	f100 0640 	add.w	r6, r0, #64	; 0x40
    5dee:	3714      	adds	r7, #20
    if (allocated[c]) delete task[c];
    5df0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    5df4:	b14b      	cbz	r3, 5e0a <Tasks::~Tasks()+0x2e>
    5df6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
    5dfa:	4628      	mov	r0, r5
    5dfc:	b12d      	cbz	r5, 5e0a <Tasks::~Tasks()+0x2e>
    5dfe:	f7ff ffbd 	bl	5d7c <Task::~Task()>
    5e02:	2134      	movs	r1, #52	; 0x34
    5e04:	4628      	mov	r0, r5
    5e06:	f012 fbff 	bl	18608 <operator delete(void*, unsigned int)>
  for (uint8_t c = 0; c < TASKS_MAX; c++) {
    5e0a:	42b4      	cmp	r4, r6
    5e0c:	d1f0      	bne.n	5df0 <Tasks::~Tasks()+0x14>
}
    5e0e:	4640      	mov	r0, r8
    5e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e14:	0000      	movs	r0, r0
	...

00005e18 <Task::requestHardwareTimer(unsigned char, unsigned char)>:
bool Task::requestHardwareTimer(uint8_t num, uint8_t hwPriority) {
    5e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (num < 1 || num > 4) { DLF("ERR: Task::requestHardwareTimer(), timer number out of range"); return false; }
    5e1c:	1e4b      	subs	r3, r1, #1
    5e1e:	2b03      	cmp	r3, #3
    5e20:	d812      	bhi.n	5e48 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x30>
  if (repeat != true) { DLF("ERR: Task::requestHardwareTimer(), repeat must be true"); return false; }
    5e22:	7e06      	ldrb	r6, [r0, #24]
    5e24:	4605      	mov	r5, r0
    5e26:	b186      	cbz	r6, 5e4a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x32>
  if (priority != 0) { DLF("ERR: Task::requestHardwareTimer(), s/w priority must be 0 (highest)"); return false; }
    5e28:	7e43      	ldrb	r3, [r0, #25]
    5e2a:	b96b      	cbnz	r3, 5e48 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x30>
  switch (num) {
    5e2c:	2903      	cmp	r1, #3
    5e2e:	460c      	mov	r4, r1
    5e30:	4617      	mov	r7, r2
    5e32:	d055      	beq.n	5ee0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0xc8>
    5e34:	2904      	cmp	r1, #4
    5e36:	d00b      	beq.n	5e50 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x38>
    5e38:	2902      	cmp	r1, #2
    5e3a:	d02a      	beq.n	5e92 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x7a>
      if (HAL_HWTIMER1_FUN != NULL) { DLF("ERR: Task::requestHardwareTimer(), channel1 already in use"); return false; }
    5e3c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 5fe4 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1cc>
    5e40:	f8d9 2000 	ldr.w	r2, [r9]
    5e44:	2a00      	cmp	r2, #0
    5e46:	d074      	beq.n	5f32 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x11a>
  if (num < 1 || num > 4) { DLF("ERR: Task::requestHardwareTimer(), timer number out of range"); return false; }
    5e48:	2600      	movs	r6, #0
}
    5e4a:	4630      	mov	r0, r6
    5e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (HAL_HWTIMER4_FUN != NULL) { DLF("ERR: Task::requestHardwareTimer(), channel4 already in use"); return false; }
    5e50:	f8df 9194 	ldr.w	r9, [pc, #404]	; 5fe8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1d0>
    5e54:	f8d9 2000 	ldr.w	r2, [r9]
    5e58:	2a00      	cmp	r2, #0
    5e5a:	d1f5      	bne.n	5e48 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x30>
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5e5c:	7f03      	ldrb	r3, [r0, #28]
  unsigned long hardware_timer_period = period;
    5e5e:	f8d0 800c 	ldr.w	r8, [r0, #12]
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5e62:	2b00      	cmp	r3, #0
    5e64:	d169      	bne.n	5f3a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x122>
  HAL_HWTIMER_PREPARE_PERIOD(num, roundPeriod((double)hardware_timer_period*_task_masterFrequencyRatio));
    5e66:	4b5e      	ldr	r3, [pc, #376]	; (5fe0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c8>)
    5e68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    5e6c:	4620      	mov	r0, r4
    5e6e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 5fd8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c0>
    5e72:	ed93 5b00 	vldr	d5, [r3]
    5e76:	eea5 7b06 	vfma.f64	d7, d5, d6
    5e7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    5e7e:	ee17 1a90 	vmov	r1, s15
    5e82:	f7ff fd55 	bl	5930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>
      if (!HAL_HWTIMER4_INIT(hwPriority)) { success = false; HAL_HWTIMER4_FUN = NULL; }
    5e86:	2300      	movs	r3, #0
      HAL_HWTIMER4_FUN = callback;
    5e88:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  if (!success) { DF("ERR: Task::requestHardwareTimer(), HAL_HWTIMER"); D(num); DLF("_INIT() failed"); return false; }
    5e8a:	461e      	mov	r6, r3
      if (!HAL_HWTIMER4_INIT(hwPriority)) { success = false; HAL_HWTIMER4_FUN = NULL; }
    5e8c:	f8c9 3000 	str.w	r3, [r9]
  if (!success) { DF("ERR: Task::requestHardwareTimer(), HAL_HWTIMER"); D(num); DLF("_INIT() failed"); return false; }
    5e90:	e7db      	b.n	5e4a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x32>
      if (HAL_HWTIMER2_FUN != NULL) { DLF("ERR: Task::requestHardwareTimer(), channel2 already in use"); return false; }
    5e92:	f8df 9158 	ldr.w	r9, [pc, #344]	; 5fec <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1d4>
    5e96:	f8d9 2000 	ldr.w	r2, [r9]
    5e9a:	2a00      	cmp	r2, #0
    5e9c:	d1d4      	bne.n	5e48 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x30>
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5e9e:	7f03      	ldrb	r3, [r0, #28]
  unsigned long hardware_timer_period = period;
    5ea0:	f8d0 800c 	ldr.w	r8, [r0, #12]
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d148      	bne.n	5f3a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x122>
    5ea8:	4698      	mov	r8, r3
  HAL_HWTIMER_PREPARE_PERIOD(num, roundPeriod((double)hardware_timer_period*_task_masterFrequencyRatio));
    5eaa:	4b4d      	ldr	r3, [pc, #308]	; (5fe0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c8>)
    5eac:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    5eb0:	4620      	mov	r0, r4
    5eb2:	ed9f 6b49 	vldr	d6, [pc, #292]	; 5fd8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c0>
    5eb6:	ed93 5b00 	vldr	d5, [r3]
    5eba:	eea5 7b06 	vfma.f64	d7, d5, d6
    5ebe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    5ec2:	ee17 1a90 	vmov	r1, s15
    5ec6:	f7ff fd33 	bl	5930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>
      HAL_HWTIMER2_FUN = callback;
    5eca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (!HAL_HWTIMER2_INIT(hwPriority)) { success = false; HAL_HWTIMER2_FUN = NULL; }
    5ecc:	4638      	mov	r0, r7
      HAL_HWTIMER2_FUN = callback;
    5ece:	f8c9 3000 	str.w	r3, [r9]
      if (!HAL_HWTIMER2_INIT(hwPriority)) { success = false; HAL_HWTIMER2_FUN = NULL; }
    5ed2:	f7ff fecf 	bl	5c74 <HAL_HWTIMER2_INIT(unsigned char)>
    5ed6:	bb30      	cbnz	r0, 5f26 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x10e>
  if (!success) { DF("ERR: Task::requestHardwareTimer(), HAL_HWTIMER"); D(num); DLF("_INIT() failed"); return false; }
    5ed8:	4606      	mov	r6, r0
      if (!HAL_HWTIMER3_INIT(hwPriority)) { success = false; HAL_HWTIMER3_FUN = NULL; }
    5eda:	f8c9 0000 	str.w	r0, [r9]
  if (!success) { DF("ERR: Task::requestHardwareTimer(), HAL_HWTIMER"); D(num); DLF("_INIT() failed"); return false; }
    5ede:	e7b4      	b.n	5e4a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x32>
      if (HAL_HWTIMER3_FUN != NULL) { DLF("ERR: Task::requestHardwareTimer(), channel3 already in use"); return false; }
    5ee0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 5ff0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1d8>
    5ee4:	f8d9 2000 	ldr.w	r2, [r9]
    5ee8:	2a00      	cmp	r2, #0
    5eea:	d1ad      	bne.n	5e48 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x30>
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5eec:	7f03      	ldrb	r3, [r0, #28]
  unsigned long hardware_timer_period = period;
    5eee:	f8d0 800c 	ldr.w	r8, [r0, #12]
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5ef2:	bb13      	cbnz	r3, 5f3a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x122>
    5ef4:	4698      	mov	r8, r3
  HAL_HWTIMER_PREPARE_PERIOD(num, roundPeriod((double)hardware_timer_period*_task_masterFrequencyRatio));
    5ef6:	4b3a      	ldr	r3, [pc, #232]	; (5fe0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c8>)
    5ef8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    5efc:	4620      	mov	r0, r4
    5efe:	ed9f 6b36 	vldr	d6, [pc, #216]	; 5fd8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c0>
    5f02:	ed93 5b00 	vldr	d5, [r3]
    5f06:	eea5 7b06 	vfma.f64	d7, d5, d6
    5f0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    5f0e:	ee17 1a90 	vmov	r1, s15
    5f12:	f7ff fd0d 	bl	5930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>
      HAL_HWTIMER3_FUN = callback;
    5f16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (!HAL_HWTIMER3_INIT(hwPriority)) { success = false; HAL_HWTIMER3_FUN = NULL; }
    5f18:	4638      	mov	r0, r7
      HAL_HWTIMER3_FUN = callback;
    5f1a:	f8c9 3000 	str.w	r3, [r9]
      if (!HAL_HWTIMER3_INIT(hwPriority)) { success = false; HAL_HWTIMER3_FUN = NULL; }
    5f1e:	f7ff feeb 	bl	5cf8 <HAL_HWTIMER3_INIT(unsigned char)>
    5f22:	2800      	cmp	r0, #0
    5f24:	d0d8      	beq.n	5ed8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0xc0>
  period_units = PU_SUB_MICROS;
    5f26:	2303      	movs	r3, #3
  hardware_timer = num;
    5f28:	702c      	strb	r4, [r5, #0]
  next_period = period;
    5f2a:	e9c5 8803 	strd	r8, r8, [r5, #12]
  period_units = PU_SUB_MICROS;
    5f2e:	83ab      	strh	r3, [r5, #28]
  return true;
    5f30:	e78b      	b.n	5e4a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x32>
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5f32:	7f03      	ldrb	r3, [r0, #28]
    5f34:	b3cb      	cbz	r3, 5faa <Task::requestHardwareTimer(unsigned char, unsigned char)+0x192>
  unsigned long hardware_timer_period = period;
    5f36:	f8d0 800c 	ldr.w	r8, [r0, #12]
  if (period_units == PU_MILLIS) hardware_timer_period *= 16000UL; else
    5f3a:	2b01      	cmp	r3, #1
    5f3c:	d026      	beq.n	5f8c <Task::requestHardwareTimer(unsigned char, unsigned char)+0x174>
  if (period_units == PU_MICROS) hardware_timer_period *= 16UL;
    5f3e:	2b02      	cmp	r3, #2
    5f40:	bf08      	it	eq
    5f42:	ea4f 1808 	moveq.w	r8, r8, lsl #4
  HAL_HWTIMER_PREPARE_PERIOD(num, roundPeriod((double)hardware_timer_period*_task_masterFrequencyRatio));
    5f46:	ee07 8a90 	vmov	s15, r8
    5f4a:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    5f4e:	4b24      	ldr	r3, [pc, #144]	; (5fe0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c8>)
    5f50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    5f54:	4620      	mov	r0, r4
    5f56:	ed93 6b00 	vldr	d6, [r3]
    5f5a:	eea6 7b05 	vfma.f64	d7, d6, d5
    5f5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    5f62:	ee17 1a90 	vmov	r1, s15
    5f66:	f7ff fce3 	bl	5930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>
  switch (num) {
    5f6a:	2c03      	cmp	r4, #3
    5f6c:	d02f      	beq.n	5fce <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1b6>
    5f6e:	2c04      	cmp	r4, #4
    5f70:	d018      	beq.n	5fa4 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x18c>
    5f72:	2c02      	cmp	r4, #2
    5f74:	d013      	beq.n	5f9e <Task::requestHardwareTimer(unsigned char, unsigned char)+0x186>
    5f76:	f8df 906c 	ldr.w	r9, [pc, #108]	; 5fe4 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1cc>
      HAL_HWTIMER1_FUN = callback;
    5f7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (!HAL_HWTIMER1_INIT(hwPriority)) { success = false; HAL_HWTIMER1_FUN = NULL; }
    5f7c:	4638      	mov	r0, r7
      HAL_HWTIMER1_FUN = callback;
    5f7e:	f8c9 3000 	str.w	r3, [r9]
      if (!HAL_HWTIMER1_INIT(hwPriority)) { success = false; HAL_HWTIMER1_FUN = NULL; }
    5f82:	f7ff fe35 	bl	5bf0 <HAL_HWTIMER1_INIT(unsigned char)>
    5f86:	2800      	cmp	r0, #0
    5f88:	d1cd      	bne.n	5f26 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x10e>
    5f8a:	e7a5      	b.n	5ed8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0xc0>
  if (period_units == PU_MILLIS) hardware_timer_period *= 16000UL; else
    5f8c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    5f90:	fb03 f808 	mul.w	r8, r3, r8
  HAL_HWTIMER_PREPARE_PERIOD(num, roundPeriod((double)hardware_timer_period*_task_masterFrequencyRatio));
    5f94:	ee07 8a90 	vmov	s15, r8
    5f98:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    5f9c:	e7d7      	b.n	5f4e <Task::requestHardwareTimer(unsigned char, unsigned char)+0x136>
    5f9e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5fec <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1d4>
    5fa2:	e792      	b.n	5eca <Task::requestHardwareTimer(unsigned char, unsigned char)+0xb2>
    5fa4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 5fe8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1d0>
    5fa8:	e76d      	b.n	5e86 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x6e>
  if (period_units == PU_NONE) hardware_timer_period = 0; else
    5faa:	4698      	mov	r8, r3
  HAL_HWTIMER_PREPARE_PERIOD(num, roundPeriod((double)hardware_timer_period*_task_masterFrequencyRatio));
    5fac:	4b0c      	ldr	r3, [pc, #48]	; (5fe0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c8>)
    5fae:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    5fb2:	4608      	mov	r0, r1
    5fb4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 5fd8 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1c0>
    5fb8:	ed93 5b00 	vldr	d5, [r3]
    5fbc:	eea5 7b06 	vfma.f64	d7, d5, d6
    5fc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    5fc4:	ee17 1a90 	vmov	r1, s15
    5fc8:	f7ff fcb2 	bl	5930 <HAL_HWTIMER_PREPARE_PERIOD(unsigned char, unsigned long)>
  switch (num) {
    5fcc:	e7d5      	b.n	5f7a <Task::requestHardwareTimer(unsigned char, unsigned char)+0x162>
    5fce:	f8df 9020 	ldr.w	r9, [pc, #32]	; 5ff0 <Task::requestHardwareTimer(unsigned char, unsigned char)+0x1d8>
    5fd2:	e7a0      	b.n	5f16 <Task::requestHardwareTimer(unsigned char, unsigned char)+0xfe>
    5fd4:	f3af 8000 	nop.w
	...
    5fe0:	20003688 	.word	0x20003688
    5fe4:	20005658 	.word	0x20005658
    5fe8:	20005664 	.word	0x20005664
    5fec:	2000565c 	.word	0x2000565c
    5ff0:	20005660 	.word	0x20005660

00005ff4 <Task::poll()>:
  if (hardware_timer || running) return false;
    5ff4:	7803      	ldrb	r3, [r0, #0]
    5ff6:	b9ab      	cbnz	r3, 6024 <Task::poll()+0x30>
    5ff8:	7ec3      	ldrb	r3, [r0, #27]
bool Task::poll() {
    5ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ffc:	4604      	mov	r4, r0
    5ffe:	b083      	sub	sp, #12
  if (hardware_timer || running) return false;
    6000:	b96b      	cbnz	r3, 601e <Task::poll()+0x2a>
  if (period != 0) {
    6002:	68c3      	ldr	r3, [r0, #12]
    6004:	b183      	cbz	r3, 6028 <Task::poll()+0x34>
    if (period_units == PU_MICROS) t = micros(); else t = millis();
    6006:	7f03      	ldrb	r3, [r0, #28]
    6008:	2b02      	cmp	r3, #2
    600a:	d031      	beq.n	6070 <Task::poll()+0x7c>
    600c:	4b2e      	ldr	r3, [pc, #184]	; (60c8 <Task::poll()+0xd4>)
    600e:	681d      	ldr	r5, [r3, #0]
    if (immediate) { immediate = false; next_task_time = t; }
    6010:	7863      	ldrb	r3, [r4, #1]
    6012:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    6016:	b163      	cbz	r3, 6032 <Task::poll()+0x3e>
    6018:	2300      	movs	r3, #0
    601a:	62a5      	str	r5, [r4, #40]	; 0x28
    601c:	7063      	strb	r3, [r4, #1]
}
    601e:	2000      	movs	r0, #0
    6020:	b003      	add	sp, #12
    6022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6024:	2000      	movs	r0, #0
    6026:	4770      	bx	lr
  } else immediate = true;
    6028:	2301      	movs	r3, #1
    602a:	7043      	strb	r3, [r0, #1]
}
    602c:	2000      	movs	r0, #0
    602e:	b003      	add	sp, #12
    6030:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time_to_next_task = next_task_time - t;
    6032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if ((long)time_to_next_task < 0) {
    6034:	1b5f      	subs	r7, r3, r5
    6036:	d5f2      	bpl.n	601e <Task::poll()+0x2a>
      running = true;
    6038:	2301      	movs	r3, #1
    603a:	76e3      	strb	r3, [r4, #27]
      callback();
    603c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    603e:	4798      	blx	r3
      if (_task_postpone) { _task_postpone = false; return false; }
    6040:	4b22      	ldr	r3, [pc, #136]	; (60cc <Task::poll()+0xd8>)
      running = false;
    6042:	76e6      	strb	r6, [r4, #27]
      if (_task_postpone) { _task_postpone = false; return false; }
    6044:	781a      	ldrb	r2, [r3, #0]
    6046:	bb7a      	cbnz	r2, 60a8 <Task::poll()+0xb4>
      if (timingMode != TM_BALANCED) {
    6048:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    604c:	b113      	cbz	r3, 6054 <Task::poll()+0x60>
        if (timingMode == TM_GAP) {
    604e:	2b02      	cmp	r3, #2
    6050:	d02c      	beq.n	60ac <Task::poll()+0xb8>
        time_to_next_task = 0;
    6052:	4617      	mov	r7, r2
      if (next_period_units != PU_NONE) {
    6054:	7f63      	ldrb	r3, [r4, #29]
    6056:	b97b      	cbnz	r3, 6078 <Task::poll()+0x84>
        if ((long)(period + time_to_next_task) < 0) time_to_next_task = -period;
    6058:	68e3      	ldr	r3, [r4, #12]
    605a:	18fa      	adds	r2, r7, r3
    605c:	2a00      	cmp	r2, #0
    605e:	db01      	blt.n	6064 <Task::poll()+0x70>
      next_task_time = t + (long)(period + time_to_next_task);
    6060:	443b      	add	r3, r7
    6062:	441d      	add	r5, r3
      if (!repeat) period = 0;
    6064:	7e23      	ldrb	r3, [r4, #24]
      next_task_time = t + (long)(period + time_to_next_task);
    6066:	62a5      	str	r5, [r4, #40]	; 0x28
      if (!repeat) period = 0;
    6068:	2b00      	cmp	r3, #0
    606a:	d1d8      	bne.n	601e <Task::poll()+0x2a>
    606c:	60e3      	str	r3, [r4, #12]
    606e:	e7d6      	b.n	601e <Task::poll()+0x2a>
    if (period_units == PU_MICROS) t = micros(); else t = millis();
    6070:	f012 f8de 	bl	18230 <micros>
    6074:	4605      	mov	r5, r0
    6076:	e7cb      	b.n	6010 <Task::poll()+0x1c>
        period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    6078:	4a15      	ldr	r2, [pc, #84]	; (60d0 <Task::poll()+0xdc>)
    607a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    607e:	edd4 6a04 	vldr	s13, [r4, #16]
        period_units = next_period_units;
    6082:	7723      	strb	r3, [r4, #28]
        next_period_units = PU_NONE;
    6084:	2300      	movs	r3, #0
        period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    6086:	eeb8 6b66 	vcvt.f64.u32	d6, s13
        time_to_next_task = 0;
    608a:	461f      	mov	r7, r3
        next_period_units = PU_NONE;
    608c:	7763      	strb	r3, [r4, #29]
        period = roundPeriod((double)next_period*_task_masterFrequencyRatio);
    608e:	ed92 5b00 	vldr	d5, [r2]
    6092:	eea6 7b05 	vfma.f64	d7, d6, d5
    6096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    609a:	ee17 3a90 	vmov	r3, s15
    609e:	ee17 2a90 	vmov	r2, s15
    60a2:	edc4 7a03 	vstr	s15, [r4, #12]
        next_period_units = PU_NONE;
    60a6:	e7d9      	b.n	605c <Task::poll()+0x68>
      if (_task_postpone) { _task_postpone = false; return false; }
    60a8:	701e      	strb	r6, [r3, #0]
    60aa:	e7b8      	b.n	601e <Task::poll()+0x2a>
          if (period_units == PU_MICROS) t = micros(); else t = millis();
    60ac:	7f23      	ldrb	r3, [r4, #28]
    60ae:	2b02      	cmp	r3, #2
    60b0:	d003      	beq.n	60ba <Task::poll()+0xc6>
    60b2:	4b05      	ldr	r3, [pc, #20]	; (60c8 <Task::poll()+0xd4>)
        time_to_next_task = 0;
    60b4:	4617      	mov	r7, r2
    60b6:	681d      	ldr	r5, [r3, #0]
    60b8:	e7cc      	b.n	6054 <Task::poll()+0x60>
    60ba:	9201      	str	r2, [sp, #4]
          if (period_units == PU_MICROS) t = micros(); else t = millis();
    60bc:	f012 f8b8 	bl	18230 <micros>
        time_to_next_task = 0;
    60c0:	9a01      	ldr	r2, [sp, #4]
          if (period_units == PU_MICROS) t = micros(); else t = millis();
    60c2:	4605      	mov	r5, r0
        time_to_next_task = 0;
    60c4:	4617      	mov	r7, r2
    60c6:	e7c5      	b.n	6054 <Task::poll()+0x60>
    60c8:	20006344 	.word	0x20006344
    60cc:	20006aaa 	.word	0x20006aaa
    60d0:	20003688 	.word	0x20003688

000060d4 <Task::setPeriod(unsigned long, PeriodUnits)>:
void Task::setPeriod(unsigned long period, PeriodUnits units) {
    60d4:	b510      	push	{r4, lr}
  if (hardware_timer) {
    60d6:	7803      	ldrb	r3, [r0, #0]
void Task::setPeriod(unsigned long period, PeriodUnits units) {
    60d8:	4604      	mov	r4, r0
  if (hardware_timer) {
    60da:	b9c3      	cbnz	r3, 610e <Task::setPeriod(unsigned long, PeriodUnits)+0x3a>
    if (units == PU_SUB_MICROS) { period = lroundf(period/16.0F); units = PU_MICROS; }
    60dc:	2a03      	cmp	r2, #3
    60de:	d025      	beq.n	612c <Task::setPeriod(unsigned long, PeriodUnits)+0x58>
    if (units == PU_MILLIS && period < 1000) { period *= 1000; units = PU_MICROS; }
    60e0:	2a01      	cmp	r2, #1
    60e2:	d107      	bne.n	60f4 <Task::setPeriod(unsigned long, PeriodUnits)+0x20>
    60e4:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    60e8:	d204      	bcs.n	60f4 <Task::setPeriod(unsigned long, PeriodUnits)+0x20>
    60ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    60ee:	2202      	movs	r2, #2
    60f0:	fb03 f101 	mul.w	r1, r3, r1
    if (this->period == 0) {
    60f4:	68e3      	ldr	r3, [r4, #12]
    60f6:	b92b      	cbnz	r3, 6104 <Task::setPeriod(unsigned long, PeriodUnits)+0x30>
      idle = true;
    60f8:	2001      	movs	r0, #1
      this->period = period;
    60fa:	60e1      	str	r1, [r4, #12]
      period_units = units;
    60fc:	7722      	strb	r2, [r4, #28]
      next_period_units = PU_NONE;
    60fe:	7763      	strb	r3, [r4, #29]
      idle = true;
    6100:	76a0      	strb	r0, [r4, #26]
}
    6102:	bd10      	pop	{r4, pc}
      idle = false;
    6104:	2300      	movs	r3, #0
      next_period = period;
    6106:	6121      	str	r1, [r4, #16]
      next_period_units = units;
    6108:	7762      	strb	r2, [r4, #29]
      idle = false;
    610a:	76a3      	strb	r3, [r4, #26]
}
    610c:	bd10      	pop	{r4, pc}
    next_period = period;
    610e:	6101      	str	r1, [r0, #16]
    next_period_units = units;
    6110:	7742      	strb	r2, [r0, #29]
  if (next_period_units != PU_NONE) {
    6112:	2a00      	cmp	r2, #0
    6114:	d0f5      	beq.n	6102 <Task::setPeriod(unsigned long, PeriodUnits)+0x2e>
    if (next_period_units == PU_MILLIS) next_period *= 16000UL; else if (next_period_units == PU_MICROS) next_period *= 16UL;
    6116:	2a01      	cmp	r2, #1
    6118:	d014      	beq.n	6144 <Task::setPeriod(unsigned long, PeriodUnits)+0x70>
    611a:	2a02      	cmp	r2, #2
    611c:	d101      	bne.n	6122 <Task::setPeriod(unsigned long, PeriodUnits)+0x4e>
    611e:	0109      	lsls	r1, r1, #4
    6120:	6101      	str	r1, [r0, #16]
    6122:	4620      	mov	r0, r4
}
    6124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6128:	f7ff bc6a 	b.w	5a00 <Task::setHardwareTimerPeriod() [clone .part.0]>
    if (units == PU_SUB_MICROS) { period = lroundf(period/16.0F); units = PU_MICROS; }
    612c:	ee00 1a10 	vmov	s0, r1
    6130:	eebb 0ace 	vcvt.f32.u32	s0, s0, #4
    6134:	f015 fc12 	bl	1b95c <lroundf>
    if (this->period == 0) {
    6138:	68e3      	ldr	r3, [r4, #12]
    if (units == PU_SUB_MICROS) { period = lroundf(period/16.0F); units = PU_MICROS; }
    613a:	2202      	movs	r2, #2
    613c:	4601      	mov	r1, r0
    if (this->period == 0) {
    613e:	2b00      	cmp	r3, #0
    6140:	d1e0      	bne.n	6104 <Task::setPeriod(unsigned long, PeriodUnits)+0x30>
    6142:	e7d9      	b.n	60f8 <Task::setPeriod(unsigned long, PeriodUnits)+0x24>
    if (next_period_units == PU_MILLIS) next_period *= 16000UL; else if (next_period_units == PU_MICROS) next_period *= 16UL;
    6144:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    6148:	fb03 f101 	mul.w	r1, r3, r1
    614c:	6101      	str	r1, [r0, #16]
    614e:	e7e8      	b.n	6122 <Task::setPeriod(unsigned long, PeriodUnits)+0x4e>

00006150 <Tasks::Tasks()>:
Tasks::Tasks() {
    6150:	4b1e      	ldr	r3, [pc, #120]	; (61cc <Tasks::Tasks()+0x7c>)
    6152:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    6156:	b570      	push	{r4, r5, r6, lr}
    6158:	4604      	mov	r4, r0
    615a:	2500      	movs	r5, #0
    615c:	b082      	sub	sp, #8
    615e:	4e1c      	ldr	r6, [pc, #112]	; (61d0 <Tasks::Tasks()+0x80>)
    6160:	6022      	str	r2, [r4, #0]
    allocated[c] = false;
    6162:	2234      	movs	r2, #52	; 0x34
Tasks::Tasks() {
    6164:	7125      	strb	r5, [r4, #4]
    6166:	f8c4 5041 	str.w	r5, [r4, #65]	; 0x41
    616a:	cb03      	ldmia	r3!, {r0, r1}
    616c:	f8c4 0005 	str.w	r0, [r4, #5]
    allocated[c] = false;
    6170:	f104 000d 	add.w	r0, r4, #13
Tasks::Tasks() {
    6174:	f8c4 1009 	str.w	r1, [r4, #9]
    allocated[c] = false;
    6178:	4629      	mov	r1, r5
    617a:	f019 f839 	bl	1f1f0 <memset>
    task[c] = NULL;
    617e:	22d0      	movs	r2, #208	; 0xd0
    6180:	4629      	mov	r1, r5
    6182:	f104 0048 	add.w	r0, r4, #72	; 0x48
    6186:	f019 f833 	bl	1f1f0 <memset>
uint8_t Tasks::add(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)(), const char name[]) {
    618a:	4a12      	ldr	r2, [pc, #72]	; (61d4 <Tasks::Tasks()+0x84>)
    618c:	2307      	movs	r3, #7
    618e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6192:	4630      	mov	r0, r6
    6194:	e9cd 3200 	strd	r3, r2, [sp]
    6198:	2301      	movs	r3, #1
    619a:	462a      	mov	r2, r5
    619c:	f7ff fa82 	bl	56a4 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]>
  if (handle != 0 && allocated[handle - 1]) {
    61a0:	b110      	cbz	r0, 61a8 <Tasks::Tasks()+0x58>
    61a2:	1833      	adds	r3, r6, r0
    61a4:	7b1b      	ldrb	r3, [r3, #12]
    61a6:	b913      	cbnz	r3, 61ae <Tasks::Tasks()+0x5e>
}
    61a8:	4620      	mov	r0, r4
    61aa:	b002      	add	sp, #8
    61ac:	bd70      	pop	{r4, r5, r6, pc}
  strncpy(processName, name, 7);
    61ae:	4a0a      	ldr	r2, [pc, #40]	; (61d8 <Tasks::Tasks()+0x88>)
    task[handle - 1]->setNameStr(name);
    61b0:	3011      	adds	r0, #17
    61b2:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
  strncpy(processName, name, 7);
    61b6:	6810      	ldr	r0, [r2, #0]
    61b8:	8891      	ldrh	r1, [r2, #4]
    61ba:	f8c3 0002 	str.w	r0, [r3, #2]
}
    61be:	4620      	mov	r0, r4
  strncpy(processName, name, 7);
    61c0:	7992      	ldrb	r2, [r2, #6]
  processName[7] = 0;
    61c2:	725d      	strb	r5, [r3, #9]
  strncpy(processName, name, 7);
    61c4:	80d9      	strh	r1, [r3, #6]
    61c6:	721a      	strb	r2, [r3, #8]
}
    61c8:	b002      	add	sp, #8
    61ca:	bd70      	pop	{r4, r5, r6, pc}
    61cc:	20001e2c 	.word	0x20001e2c
    61d0:	2000634c 	.word	0x2000634c
    61d4:	00005b39 	.word	0x00005b39
    61d8:	20002268 	.word	0x20002268

000061dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>:
uint8_t Tasks::add(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)(), const char name[]) {
    61dc:	b530      	push	{r4, r5, lr}
    61de:	b083      	sub	sp, #12
    61e0:	f89d 4018 	ldrb.w	r4, [sp, #24]
  if (priority > 7) return false;
    61e4:	2c07      	cmp	r4, #7
    61e6:	d807      	bhi.n	61f8 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)+0x1c>
    61e8:	9400      	str	r4, [sp, #0]
    61ea:	4605      	mov	r5, r0
uint8_t Tasks::add(uint32_t period, uint32_t duration, bool repeat, uint8_t priority, void (*callback)(), const char name[]) {
    61ec:	9c07      	ldr	r4, [sp, #28]
    61ee:	9401      	str	r4, [sp, #4]
    61f0:	f7ff fa58 	bl	56a4 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)()) [clone .part.0]>
  if (handle != 0 && allocated[handle - 1]) {
    61f4:	4604      	mov	r4, r0
    61f6:	b918      	cbnz	r0, 6200 <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)+0x24>
  if (priority > 7) return false;
    61f8:	2400      	movs	r4, #0
}
    61fa:	4620      	mov	r0, r4
    61fc:	b003      	add	sp, #12
    61fe:	bd30      	pop	{r4, r5, pc}
  if (handle != 0 && allocated[handle - 1]) {
    6200:	182b      	adds	r3, r5, r0
    6202:	7b1b      	ldrb	r3, [r3, #12]
    6204:	2b00      	cmp	r3, #0
    6206:	d0f8      	beq.n	61fa <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)+0x1e>
    task[handle - 1]->setNameStr(name);
    6208:	f100 0311 	add.w	r3, r0, #17
  strncpy(processName, name, 7);
    620c:	2207      	movs	r2, #7
    620e:	9908      	ldr	r1, [sp, #32]
    task[handle - 1]->setNameStr(name);
    6210:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  strncpy(processName, name, 7);
    6214:	1ca8      	adds	r0, r5, #2
    6216:	f019 f909 	bl	1f42c <strncpy>
  processName[7] = 0;
    621a:	2300      	movs	r3, #0
}
    621c:	4620      	mov	r0, r4
  processName[7] = 0;
    621e:	726b      	strb	r3, [r5, #9]
}
    6220:	b003      	add	sp, #12
    6222:	bd30      	pop	{r4, r5, pc}

00006224 <Tasks::requestHardwareTimer(unsigned char, unsigned char)>:
  if (handle != 0 && allocated[handle - 1] && TASKS_HWTIMERS > 0) {
    6224:	b181      	cbz	r1, 6248 <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x24>
bool Tasks::requestHardwareTimer(uint8_t handle, uint8_t hwPriority) {
    6226:	b538      	push	{r3, r4, r5, lr}
  if (handle != 0 && allocated[handle - 1] && TASKS_HWTIMERS > 0) {
    6228:	1e4b      	subs	r3, r1, #1
    622a:	4604      	mov	r4, r0
    622c:	18c1      	adds	r1, r0, r3
    622e:	7b48      	ldrb	r0, [r1, #13]
    6230:	b148      	cbz	r0, 6246 <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x22>
      if (!hardware_timer_allocated[num]) {
    6232:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    6236:	b14d      	cbz	r5, 624c <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x28>
    6238:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    623c:	b181      	cbz	r1, 6260 <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x3c>
    623e:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
    6242:	b181      	cbz	r1, 6266 <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x42>
  return false;
    6244:	2000      	movs	r0, #0
}
    6246:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    6248:	4608      	mov	r0, r1
}
    624a:	4770      	bx	lr
      if (!hardware_timer_allocated[num]) {
    624c:	2101      	movs	r1, #1
        hardware_timer_allocated[num] = task[handle - 1]->requestHardwareTimer(num + 1, hwPriority);
    624e:	3312      	adds	r3, #18
    6250:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    6254:	442c      	add	r4, r5
    6256:	f7ff fddf 	bl	5e18 <Task::requestHardwareTimer(unsigned char, unsigned char)>
    625a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
}
    625e:	bd38      	pop	{r3, r4, r5, pc}
      if (!hardware_timer_allocated[num]) {
    6260:	2102      	movs	r1, #2
    for (int num = 0; num < TASKS_HWTIMERS; num++) {
    6262:	2501      	movs	r5, #1
    6264:	e7f3      	b.n	624e <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x2a>
      if (!hardware_timer_allocated[num]) {
    6266:	2103      	movs	r1, #3
    for (int num = 0; num < TASKS_HWTIMERS; num++) {
    6268:	2502      	movs	r5, #2
    626a:	e7f0      	b.n	624e <Tasks::requestHardwareTimer(unsigned char, unsigned char)+0x2a>

0000626c <Tasks::setCallback(unsigned char, void (*)())>:
bool Tasks::setCallback(uint8_t handle, void (*callback)()) {
    626c:	4603      	mov	r3, r0
  if (handle != 0 && allocated[handle - 1]) {
    626e:	b181      	cbz	r1, 6292 <Tasks::setCallback(unsigned char, void (*)())+0x26>
    6270:	4408      	add	r0, r1
    6272:	7b00      	ldrb	r0, [r0, #12]
    6274:	b900      	cbnz	r0, 6278 <Tasks::setCallback(unsigned char, void (*)())+0xc>
}
    6276:	4770      	bx	lr
    task[handle - 1]->setCallback(callback);
    6278:	3111      	adds	r1, #17
    627a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  this->callback = callback;
    627e:	631a      	str	r2, [r3, #48]	; 0x30
  noInterrupts();
    6280:	b672      	cpsid	i
  switch (hardware_timer) {
    6282:	781b      	ldrb	r3, [r3, #0]
    6284:	3b01      	subs	r3, #1
    6286:	2b03      	cmp	r3, #3
    6288:	d807      	bhi.n	629a <Tasks::setCallback(unsigned char, void (*)())+0x2e>
    628a:	e8df f003 	tbb	[pc, r3]
    628e:	0e0b      	.short	0x0e0b
    6290:	0804      	.short	0x0804
  } else return false;
    6292:	4608      	mov	r0, r1
}
    6294:	4770      	bx	lr
      HAL_HWTIMER3_FUN = callback;
    6296:	4b06      	ldr	r3, [pc, #24]	; (62b0 <Tasks::setCallback(unsigned char, void (*)())+0x44>)
    6298:	601a      	str	r2, [r3, #0]
  interrupts();
    629a:	b662      	cpsie	i
}
    629c:	4770      	bx	lr
      HAL_HWTIMER4_FUN = callback;
    629e:	4b05      	ldr	r3, [pc, #20]	; (62b4 <Tasks::setCallback(unsigned char, void (*)())+0x48>)
    62a0:	601a      	str	r2, [r3, #0]
    break;
    62a2:	e7fa      	b.n	629a <Tasks::setCallback(unsigned char, void (*)())+0x2e>
      HAL_HWTIMER1_FUN = callback;
    62a4:	4b04      	ldr	r3, [pc, #16]	; (62b8 <Tasks::setCallback(unsigned char, void (*)())+0x4c>)
    62a6:	601a      	str	r2, [r3, #0]
    break;
    62a8:	e7f7      	b.n	629a <Tasks::setCallback(unsigned char, void (*)())+0x2e>
      HAL_HWTIMER2_FUN = callback;
    62aa:	4b04      	ldr	r3, [pc, #16]	; (62bc <Tasks::setCallback(unsigned char, void (*)())+0x50>)
    62ac:	601a      	str	r2, [r3, #0]
    break;
    62ae:	e7f4      	b.n	629a <Tasks::setCallback(unsigned char, void (*)())+0x2e>
    62b0:	20005660 	.word	0x20005660
    62b4:	20005664 	.word	0x20005664
    62b8:	20005658 	.word	0x20005658
    62bc:	2000565c 	.word	0x2000565c

000062c0 <Tasks::remove(unsigned char)>:
  if (handle != 0 && allocated[handle - 1]) {
    62c0:	b399      	cbz	r1, 632a <Tasks::remove(unsigned char)+0x6a>
void Tasks::remove(uint8_t handle) {
    62c2:	b570      	push	{r4, r5, r6, lr}
  if (handle != 0 && allocated[handle - 1]) {
    62c4:	1e4d      	subs	r5, r1, #1
    62c6:	4604      	mov	r4, r0
    62c8:	4405      	add	r5, r0
    62ca:	7b6b      	ldrb	r3, [r5, #13]
    62cc:	b363      	cbz	r3, 6328 <Tasks::remove(unsigned char)+0x68>
    delete task[handle - 1];
    62ce:	3111      	adds	r1, #17
    62d0:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
    62d4:	b136      	cbz	r6, 62e4 <Tasks::remove(unsigned char)+0x24>
    62d6:	4630      	mov	r0, r6
    62d8:	f7ff fd50 	bl	5d7c <Task::~Task()>
    62dc:	2134      	movs	r1, #52	; 0x34
    62de:	4630      	mov	r0, r6
    62e0:	f012 f992 	bl	18608 <operator delete(void*, unsigned int)>
    allocated[handle - 1] = false;
    62e4:	2100      	movs	r1, #0
  highest_task = 0;
    62e6:	4622      	mov	r2, r4
    62e8:	2333      	movs	r3, #51	; 0x33
    allocated[handle - 1] = false;
    62ea:	7369      	strb	r1, [r5, #13]
  highest_task = 0;
    62ec:	f802 1b41 	strb.w	r1, [r2], #65
  for (int8_t e = TASKS_MAX - 1; e >= 0 ; e--) {
    62f0:	e001      	b.n	62f6 <Tasks::remove(unsigned char)+0x36>
    62f2:	1c58      	adds	r0, r3, #1
    62f4:	d01a      	beq.n	632c <Tasks::remove(unsigned char)+0x6c>
    if (allocated[e]) {
    62f6:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    62fa:	b2d8      	uxtb	r0, r3
  for (int8_t e = TASKS_MAX - 1; e >= 0 ; e--) {
    62fc:	3b01      	subs	r3, #1
    if (allocated[e]) {
    62fe:	2900      	cmp	r1, #0
    6300:	d0f7      	beq.n	62f2 <Tasks::remove(unsigned char)+0x32>
      highest_task = e;
    6302:	7020      	strb	r0, [r4, #0]
  highest_priority = 0;
    6304:	2300      	movs	r3, #0
    6306:	461a      	mov	r2, r3
    6308:	469c      	mov	ip, r3
    630a:	7063      	strb	r3, [r4, #1]
  for (uint8_t e = 0; e <= highest_task; e++) {
    630c:	e001      	b.n	6312 <Tasks::remove(unsigned char)+0x52>
    if (p > highest_priority) highest_priority = p;
    630e:	f894 c001 	ldrb.w	ip, [r4, #1]
    uint8_t p = task[e]->getPriority();
    6312:	3312      	adds	r3, #18
  for (uint8_t e = 0; e <= highest_task; e++) {
    6314:	3201      	adds	r2, #1
  return priority;
    6316:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
  for (uint8_t e = 0; e <= highest_task; e++) {
    631a:	b2d3      	uxtb	r3, r2
  return priority;
    631c:	7e49      	ldrb	r1, [r1, #25]
    if (p > highest_priority) highest_priority = p;
    631e:	4561      	cmp	r1, ip
    6320:	bf88      	it	hi
    6322:	7061      	strbhi	r1, [r4, #1]
  for (uint8_t e = 0; e <= highest_task; e++) {
    6324:	4298      	cmp	r0, r3
    6326:	d2f2      	bcs.n	630e <Tasks::remove(unsigned char)+0x4e>
}
    6328:	bd70      	pop	{r4, r5, r6, pc}
    632a:	4770      	bx	lr
    632c:	4608      	mov	r0, r1
    632e:	e7e9      	b.n	6304 <Tasks::remove(unsigned char)+0x44>

00006330 <Tasks::setPeriod(unsigned char, unsigned long)>:
  if (handle != 0 && allocated[handle - 1]) {
    6330:	460b      	mov	r3, r1
void Tasks::setPeriod(uint8_t handle, unsigned long period) {
    6332:	4611      	mov	r1, r2
  if (handle != 0 && allocated[handle - 1]) {
    6334:	b113      	cbz	r3, 633c <Tasks::setPeriod(unsigned char, unsigned long)+0xc>
    6336:	18c2      	adds	r2, r0, r3
    6338:	7b12      	ldrb	r2, [r2, #12]
    633a:	b902      	cbnz	r2, 633e <Tasks::setPeriod(unsigned char, unsigned long)+0xe>
}
    633c:	4770      	bx	lr
    task[handle - 1]->setPeriod(period);
    633e:	3311      	adds	r3, #17
    6340:	2201      	movs	r2, #1
    6342:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    6346:	f7ff bec5 	b.w	60d4 <Task::setPeriod(unsigned long, PeriodUnits)>
    634a:	bf00      	nop

0000634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>:
  if (handle != 0 && allocated[handle - 1]) {
    634c:	460b      	mov	r3, r1
void Tasks::setPeriodMicros(uint8_t handle, unsigned long period) {
    634e:	4611      	mov	r1, r2
  if (handle != 0 && allocated[handle - 1]) {
    6350:	b113      	cbz	r3, 6358 <Tasks::setPeriodMicros(unsigned char, unsigned long)+0xc>
    6352:	18c2      	adds	r2, r0, r3
    6354:	7b12      	ldrb	r2, [r2, #12]
    6356:	b902      	cbnz	r2, 635a <Tasks::setPeriodMicros(unsigned char, unsigned long)+0xe>
}
    6358:	4770      	bx	lr
    task[handle - 1]->setPeriod(period, PU_MICROS);
    635a:	3311      	adds	r3, #17
    635c:	2202      	movs	r2, #2
    635e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    6362:	f7ff beb7 	b.w	60d4 <Task::setPeriod(unsigned long, PeriodUnits)>
    6366:	bf00      	nop

00006368 <Tasks::setPeriodSubMicros(unsigned char, unsigned long)>:
  if (handle != 0 && allocated[handle - 1]) {
    6368:	460b      	mov	r3, r1
void Tasks::setPeriodSubMicros(uint8_t handle, unsigned long period) {
    636a:	4611      	mov	r1, r2
  if (handle != 0 && allocated[handle - 1]) {
    636c:	b113      	cbz	r3, 6374 <Tasks::setPeriodSubMicros(unsigned char, unsigned long)+0xc>
    636e:	18c2      	adds	r2, r0, r3
    6370:	7b12      	ldrb	r2, [r2, #12]
    6372:	b902      	cbnz	r2, 6376 <Tasks::setPeriodSubMicros(unsigned char, unsigned long)+0xe>
}
    6374:	4770      	bx	lr
    task[handle - 1]->setPeriod(period, PU_SUB_MICROS);
    6376:	3311      	adds	r3, #17
    6378:	2203      	movs	r2, #3
    637a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    637e:	f7ff bea9 	b.w	60d4 <Task::setPeriod(unsigned long, PeriodUnits)>
    6382:	bf00      	nop

00006384 <Tasks::setPeriodRatioSubMicros(unsigned long)>:
  _task_ppsAverageSubMicros = value;
    6384:	4b01      	ldr	r3, [pc, #4]	; (638c <Tasks::setPeriodRatioSubMicros(unsigned long)+0x8>)
    6386:	6019      	str	r1, [r3, #0]
}
    6388:	4770      	bx	lr
    638a:	bf00      	nop
    638c:	200043cc 	.word	0x200043cc

00006390 <Tasks::setDurationComplete(unsigned char)>:
  if (handle != 0 && allocated[handle - 1]) {
    6390:	b171      	cbz	r1, 63b0 <Tasks::setDurationComplete(unsigned char)+0x20>
    6392:	1843      	adds	r3, r0, r1
    6394:	7b1b      	ldrb	r3, [r3, #12]
    6396:	b15b      	cbz	r3, 63b0 <Tasks::setDurationComplete(unsigned char)+0x20>
    task[handle - 1]->setDurationComplete();
    6398:	3111      	adds	r1, #17
    639a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  start_time--;
    639e:	6a1a      	ldr	r2, [r3, #32]
void Tasks::setDurationComplete(uint8_t handle) {
    63a0:	b410      	push	{r4}
  start_time--;
    63a2:	3a01      	subs	r2, #1
  duration = 1;
    63a4:	2401      	movs	r4, #1
  start_time--;
    63a6:	621a      	str	r2, [r3, #32]
  duration = 1;
    63a8:	615c      	str	r4, [r3, #20]
}
    63aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    63ae:	4770      	bx	lr
    63b0:	4770      	bx	lr
    63b2:	bf00      	nop

000063b4 <Tasks::getHandleByName(char const*)>:
uint8_t Tasks::getHandleByName(const char name[]) {
    63b4:	2200      	movs	r2, #0
    63b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63ba:	4605      	mov	r5, r0
    63bc:	460e      	mov	r6, r1
    63be:	4613      	mov	r3, r2
    63c0:	e003      	b.n	63ca <Tasks::getHandleByName(char const*)+0x16>
  } while (++handle < highest_task);
    63c2:	7829      	ldrb	r1, [r5, #0]
    63c4:	b2d3      	uxtb	r3, r2
    63c6:	4299      	cmp	r1, r3
    63c8:	d931      	bls.n	642e <Tasks::getHandleByName(char const*)+0x7a>
    if (allocated[handle]) {
    63ca:	18e9      	adds	r1, r5, r3
  } while (++handle < highest_task);
    63cc:	3201      	adds	r2, #1
    if (allocated[handle]) {
    63ce:	7b49      	ldrb	r1, [r1, #13]
    63d0:	2900      	cmp	r1, #0
    63d2:	d0f6      	beq.n	63c2 <Tasks::getHandleByName(char const*)+0xe>
      return handle + 1;
    63d4:	3301      	adds	r3, #1
  while (handle) {
    63d6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    63da:	d028      	beq.n	642e <Tasks::getHandleByName(char const*)+0x7a>
    63dc:	4f17      	ldr	r7, [pc, #92]	; (643c <Tasks::getHandleByName(char const*)+0x88>)
  strcpy(empty, "");
    63de:	f04f 0800 	mov.w	r8, #0
  if (handle != 0 && allocated[handle - 1]) {
    63e2:	192b      	adds	r3, r5, r4
  strcpy(empty, "");
    63e4:	f887 8000 	strb.w	r8, [r7]
  if (handle != 0 && allocated[handle - 1]) {
    63e8:	7b1b      	ldrb	r3, [r3, #12]
    63ea:	b323      	cbz	r3, 6436 <Tasks::getHandleByName(char const*)+0x82>
    return task[handle - 1]->getNameStr();
    63ec:	f104 0311 	add.w	r3, r4, #17
  return processName;
    63f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    63f4:	f103 0902 	add.w	r9, r3, #2
    if (strstr(candidate, name)) {
    63f8:	4631      	mov	r1, r6
    63fa:	4648      	mov	r0, r9
    63fc:	f019 f9a8 	bl	1f750 <strstr>
    6400:	b168      	cbz	r0, 641e <Tasks::getHandleByName(char const*)+0x6a>
      if (strlen(candidate) == strlen(name)) break;
    6402:	4648      	mov	r0, r9
    6404:	f019 fcbc 	bl	1fd80 <strlen>
    6408:	4681      	mov	r9, r0
    640a:	4630      	mov	r0, r6
    640c:	f019 fcb8 	bl	1fd80 <strlen>
    6410:	4581      	cmp	r9, r0
    6412:	d104      	bne.n	641e <Tasks::getHandleByName(char const*)+0x6a>
    6414:	e00c      	b.n	6430 <Tasks::getHandleByName(char const*)+0x7c>
  } while (++handle < highest_task);
    6416:	b2d4      	uxtb	r4, r2
    6418:	782b      	ldrb	r3, [r5, #0]
    641a:	42a3      	cmp	r3, r4
    641c:	d907      	bls.n	642e <Tasks::getHandleByName(char const*)+0x7a>
    if (allocated[handle]) {
    641e:	192b      	adds	r3, r5, r4
  } while (++handle < highest_task);
    6420:	1c62      	adds	r2, r4, #1
    if (allocated[handle]) {
    6422:	7b5b      	ldrb	r3, [r3, #13]
    6424:	2b00      	cmp	r3, #0
    6426:	d0f6      	beq.n	6416 <Tasks::getHandleByName(char const*)+0x62>
  while (handle) {
    6428:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    642c:	d1d9      	bne.n	63e2 <Tasks::getHandleByName(char const*)+0x2e>
  } else return empty;
    642e:	2400      	movs	r4, #0
}
    6430:	4620      	mov	r0, r4
    6432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else return empty;
    6436:	46b9      	mov	r9, r7
    6438:	e7de      	b.n	63f8 <Tasks::getHandleByName(char const*)+0x44>
    643a:	bf00      	nop
    643c:	20005814 	.word	0x20005814

00006440 <Tasks::yield()>:
  void Tasks::yield() {
    6440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ::yield();
    6444:	f04f 0a00 	mov.w	sl, #0
    6448:	4f26      	ldr	r7, [pc, #152]	; (64e4 <Tasks::yield()+0xa4>)
  void Tasks::yield() {
    644a:	4604      	mov	r4, r0
    644c:	46d1      	mov	r9, sl
    ::yield();
    644e:	f013 fd33 	bl	19eb8 <yield>
    for (uint8_t priority = 0; priority <= highest_priority; priority++) {
    6452:	e006      	b.n	6462 <Tasks::yield()+0x22>
    6454:	f10a 0a01 	add.w	sl, sl, #1
    6458:	7863      	ldrb	r3, [r4, #1]
    645a:	fa5f f98a 	uxtb.w	r9, sl
    645e:	454b      	cmp	r3, r9
    6460:	d333      	bcc.n	64ca <Tasks::yield()+0x8a>
      uint8_t last_priority = highest_active_priority;
    6462:	f894 8002 	ldrb.w	r8, [r4, #2]
      if (priority < highest_active_priority) {
    6466:	45c1      	cmp	r9, r8
    6468:	d2f4      	bcs.n	6454 <Tasks::yield()+0x14>
        for (uint8_t i = 0; i <= highest_task; i++) {
    646a:	7822      	ldrb	r2, [r4, #0]
          if (++number[priority] > highest_task) number[priority] = 0;
    646c:	2500      	movs	r5, #0
    646e:	eb04 0609 	add.w	r6, r4, r9
        highest_active_priority = priority;
    6472:	f884 9002 	strb.w	r9, [r4, #2]
        for (uint8_t i = 0; i <= highest_task; i++) {
    6476:	e003      	b.n	6480 <Tasks::yield()+0x40>
    6478:	7822      	ldrb	r2, [r4, #0]
    647a:	b2eb      	uxtb	r3, r5
    647c:	429a      	cmp	r2, r3
    647e:	d32d      	bcc.n	64dc <Tasks::yield()+0x9c>
          if (++number[priority] > highest_task) number[priority] = 0;
    6480:	7971      	ldrb	r1, [r6, #5]
    6482:	2300      	movs	r3, #0
        for (uint8_t i = 0; i <= highest_task; i++) {
    6484:	3501      	adds	r5, #1
          if (++number[priority] > highest_task) number[priority] = 0;
    6486:	3101      	adds	r1, #1
    6488:	b2c9      	uxtb	r1, r1
    648a:	4291      	cmp	r1, r2
          if (allocated[number[priority]]) {
    648c:	bf94      	ite	ls
    648e:	460b      	movls	r3, r1
          if (++number[priority] > highest_task) number[priority] = 0;
    6490:	4619      	movhi	r1, r3
            if (task[number[priority]]->getPriority() == priority) {
    6492:	f103 0212 	add.w	r2, r3, #18
          if (allocated[number[priority]]) {
    6496:	4423      	add	r3, r4
    6498:	7171      	strb	r1, [r6, #5]
    649a:	7b5b      	ldrb	r3, [r3, #13]
    649c:	2b00      	cmp	r3, #0
    649e:	d0eb      	beq.n	6478 <Tasks::yield()+0x38>
            if (task[number[priority]]->getPriority() == priority) {
    64a0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    64a4:	7e5a      	ldrb	r2, [r3, #25]
    64a6:	454a      	cmp	r2, r9
    64a8:	d1e6      	bne.n	6478 <Tasks::yield()+0x38>
  return (duration > 0 && ((long)(millis() - (start_time + duration)) >= 0));
    64aa:	695a      	ldr	r2, [r3, #20]
              if (task[number[priority]]->poll()) { highest_active_priority = last_priority; return; }
    64ac:	4618      	mov	r0, r3
  return (duration > 0 && ((long)(millis() - (start_time + duration)) >= 0));
    64ae:	b172      	cbz	r2, 64ce <Tasks::yield()+0x8e>
    64b0:	6a1b      	ldr	r3, [r3, #32]
    64b2:	441a      	add	r2, r3
    64b4:	683b      	ldr	r3, [r7, #0]
    64b6:	1a9b      	subs	r3, r3, r2
    64b8:	2b00      	cmp	r3, #0
    64ba:	db08      	blt.n	64ce <Tasks::yield()+0x8e>
              if (task[number[priority]]->isDurationComplete()) { remove(number[priority] + 1); highest_active_priority = last_priority; return; }
    64bc:	3101      	adds	r1, #1
    64be:	4620      	mov	r0, r4
    64c0:	b2c9      	uxtb	r1, r1
    64c2:	f7ff fefd 	bl	62c0 <Tasks::remove(unsigned char)>
    64c6:	f884 8002 	strb.w	r8, [r4, #2]
  }
    64ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
              if (task[number[priority]]->poll()) { highest_active_priority = last_priority; return; }
    64ce:	f7ff fd91 	bl	5ff4 <Task::poll()>
    64d2:	2800      	cmp	r0, #0
    64d4:	d0d0      	beq.n	6478 <Tasks::yield()+0x38>
    64d6:	f884 8002 	strb.w	r8, [r4, #2]
    64da:	e7f6      	b.n	64ca <Tasks::yield()+0x8a>
        highest_active_priority = last_priority;
    64dc:	f884 8002 	strb.w	r8, [r4, #2]
    64e0:	e7b8      	b.n	6454 <Tasks::yield()+0x14>
    64e2:	bf00      	nop
    64e4:	20006344 	.word	0x20006344

000064e8 <Tasks::yield(unsigned long)>:
void Tasks::yield(unsigned long milliseconds) {
    64e8:	b570      	push	{r4, r5, r6, lr}
    64ea:	4e08      	ldr	r6, [pc, #32]	; (650c <Tasks::yield(unsigned long)+0x24>)
    64ec:	6834      	ldr	r4, [r6, #0]
    64ee:	6833      	ldr	r3, [r6, #0]
  unsigned long endTime = millis() + milliseconds;
    64f0:	440c      	add	r4, r1
  while ((long)(millis() - endTime) < 0) this->yield();
    64f2:	1b1b      	subs	r3, r3, r4
    64f4:	2b00      	cmp	r3, #0
    64f6:	da07      	bge.n	6508 <Tasks::yield(unsigned long)+0x20>
    64f8:	4605      	mov	r5, r0
    64fa:	4628      	mov	r0, r5
    64fc:	f7ff ffa0 	bl	6440 <Tasks::yield()>
    6500:	6833      	ldr	r3, [r6, #0]
    6502:	1b1b      	subs	r3, r3, r4
    6504:	2b00      	cmp	r3, #0
    6506:	dbf8      	blt.n	64fa <Tasks::yield(unsigned long)+0x12>
}
    6508:	bd70      	pop	{r4, r5, r6, pc}
    650a:	bf00      	nop
    650c:	20006344 	.word	0x20006344

00006510 <Tasks::yieldMicros(unsigned long)>:
void Tasks::yieldMicros(unsigned long microseconds) {
    6510:	b538      	push	{r3, r4, r5, lr}
    6512:	460c      	mov	r4, r1
    6514:	4605      	mov	r5, r0
  unsigned long endTime = micros() + microseconds;
    6516:	f011 fe8b 	bl	18230 <micros>
    651a:	4404      	add	r4, r0
  while ((long)(micros() - endTime) < 0) this->yield();
    651c:	e001      	b.n	6522 <Tasks::yieldMicros(unsigned long)+0x12>
    651e:	f7ff ff8f 	bl	6440 <Tasks::yield()>
    6522:	f011 fe85 	bl	18230 <micros>
    6526:	4603      	mov	r3, r0
    6528:	4628      	mov	r0, r5
    652a:	1b1b      	subs	r3, r3, r4
    652c:	2b00      	cmp	r3, #0
    652e:	dbf6      	blt.n	651e <Tasks::yieldMicros(unsigned long)+0xe>
}
    6530:	bd38      	pop	{r3, r4, r5, pc}
    6532:	bf00      	nop

00006534 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN>:
      break;
    }
  }
}

Tasks tasks;
    6534:	b510      	push	{r4, lr}
  IntervalTimer itimer1;
    6536:	4a0d      	ldr	r2, [pc, #52]	; (656c <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x38>)
    6538:	490d      	ldr	r1, [pc, #52]	; (6570 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x3c>)
    653a:	480e      	ldr	r0, [pc, #56]	; (6574 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x40>)
    653c:	f016 fe5c 	bl	1d1f8 <__aeabi_atexit>
    6540:	4c0d      	ldr	r4, [pc, #52]	; (6578 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x44>)
  IntervalTimer itimer2;
    6542:	4a0a      	ldr	r2, [pc, #40]	; (656c <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x38>)
    6544:	490a      	ldr	r1, [pc, #40]	; (6570 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x3c>)
    6546:	480d      	ldr	r0, [pc, #52]	; (657c <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x48>)
    6548:	f016 fe56 	bl	1d1f8 <__aeabi_atexit>
  IntervalTimer itimer3;
    654c:	4a07      	ldr	r2, [pc, #28]	; (656c <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x38>)
    654e:	4908      	ldr	r1, [pc, #32]	; (6570 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x3c>)
    6550:	480b      	ldr	r0, [pc, #44]	; (6580 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x4c>)
    6552:	f016 fe51 	bl	1d1f8 <__aeabi_atexit>
    6556:	4620      	mov	r0, r4
    6558:	f7ff fdfa 	bl	6150 <Tasks::Tasks()>
    655c:	4620      	mov	r0, r4
    655e:	4a03      	ldr	r2, [pc, #12]	; (656c <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x38>)
    6560:	4908      	ldr	r1, [pc, #32]	; (6584 <_GLOBAL__sub_I_HAL_HWTIMER4_FUN+0x50>)
    6562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6566:	f016 be47 	b.w	1d1f8 <__aeabi_atexit>
    656a:	bf00      	nop
    656c:	20003e3c 	.word	0x20003e3c
    6570:	00005699 	.word	0x00005699
    6574:	20004614 	.word	0x20004614
    6578:	2000634c 	.word	0x2000634c
    657c:	2000461c 	.word	0x2000461c
    6580:	20004624 	.word	0x20004624
    6584:	00005ddd 	.word	0x00005ddd

00006588 <ppsIsr()>:

#if defined(TIME_LOCATION_PPS_SENSE) && (TIME_LOCATION_PPS_SENSE) != OFF

#include "../tasks/OnTask.h"

void ppsIsr() {
    6588:	b538      	push	{r3, r4, r5, lr}
  unsigned long t = micros();
  unsigned long oneSecond = t - pps.lastMicros;
    658a:	4c15      	ldr	r4, [pc, #84]	; (65e0 <ppsIsr()+0x58>)
  unsigned long t = micros();
    658c:	f011 fe50 	bl	18230 <micros>
  if (oneSecond > 1000000UL - PPS_WINDOW_MICROS && oneSecond < 1000000UL + PPS_WINDOW_MICROS) {
    6590:	4b14      	ldr	r3, [pc, #80]	; (65e4 <ppsIsr()+0x5c>)
    6592:	f649 413e 	movw	r1, #39998	; 0x9c3e
  unsigned long oneSecond = t - pps.lastMicros;
    6596:	68e2      	ldr	r2, [r4, #12]
  unsigned long t = micros();
    6598:	4605      	mov	r5, r0
  unsigned long oneSecond = t - pps.lastMicros;
    659a:	1a82      	subs	r2, r0, r2
  if (oneSecond > 1000000UL - PPS_WINDOW_MICROS && oneSecond < 1000000UL + PPS_WINDOW_MICROS) {
    659c:	4413      	add	r3, r2
    659e:	428b      	cmp	r3, r1
    65a0:	d815      	bhi.n	65ce <ppsIsr()+0x46>
    pps.averageSubMicros = (pps.averageSubMicros*(PPS_SECS_TO_AVERAGE - 1) + (oneSecond*16))/PPS_SECS_TO_AVERAGE;
    65a2:	6863      	ldr	r3, [r4, #4]
    pps.synced = true;
    tasks.setPeriodRatioSubMicros((long)pps.averageSubMicros + pps.averageSubMicrosSkew);
    65a4:	4810      	ldr	r0, [pc, #64]	; (65e8 <ppsIsr()+0x60>)
    pps.averageSubMicros = (pps.averageSubMicros*(PPS_SECS_TO_AVERAGE - 1) + (oneSecond*16))/PPS_SECS_TO_AVERAGE;
    65a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    65aa:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    65ae:	490f      	ldr	r1, [pc, #60]	; (65ec <ppsIsr()+0x64>)
    65b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    tasks.setPeriodRatioSubMicros((long)pps.averageSubMicros + pps.averageSubMicrosSkew);
    65b4:	68a2      	ldr	r2, [r4, #8]
    pps.averageSubMicros = (pps.averageSubMicros*(PPS_SECS_TO_AVERAGE - 1) + (oneSecond*16))/PPS_SECS_TO_AVERAGE;
    65b6:	fba1 1303 	umull	r1, r3, r1, r3
    pps.synced = true;
    65ba:	2101      	movs	r1, #1
    pps.averageSubMicros = (pps.averageSubMicros*(PPS_SECS_TO_AVERAGE - 1) + (oneSecond*16))/PPS_SECS_TO_AVERAGE;
    65bc:	095b      	lsrs	r3, r3, #5
    65be:	6063      	str	r3, [r4, #4]
    pps.synced = true;
    65c0:	7021      	strb	r1, [r4, #0]
    tasks.setPeriodRatioSubMicros((long)pps.averageSubMicros + pps.averageSubMicrosSkew);
    65c2:	6861      	ldr	r1, [r4, #4]
    65c4:	4411      	add	r1, r2
    65c6:	f7ff fedd 	bl	6384 <Tasks::setPeriodRatioSubMicros(unsigned long)>
  } else {
    pps.synced = false;
    tasks.setPeriodRatioSubMicros(16000000UL);
  }
  pps.lastMicros = t;
    65ca:	60e5      	str	r5, [r4, #12]
}
    65cc:	bd38      	pop	{r3, r4, r5, pc}
    pps.synced = false;
    65ce:	2300      	movs	r3, #0
    tasks.setPeriodRatioSubMicros(16000000UL);
    65d0:	4907      	ldr	r1, [pc, #28]	; (65f0 <ppsIsr()+0x68>)
    65d2:	4805      	ldr	r0, [pc, #20]	; (65e8 <ppsIsr()+0x60>)
    pps.synced = false;
    65d4:	7023      	strb	r3, [r4, #0]
    tasks.setPeriodRatioSubMicros(16000000UL);
    65d6:	f7ff fed5 	bl	6384 <Tasks::setPeriodRatioSubMicros(unsigned long)>
  pps.lastMicros = t;
    65da:	60e5      	str	r5, [r4, #12]
}
    65dc:	bd38      	pop	{r3, r4, r5, pc}
    65de:	bf00      	nop
    65e0:	20004668 	.word	0x20004668
    65e4:	fff10bdf 	.word	0xfff10bdf
    65e8:	2000634c 	.word	0x2000634c
    65ec:	cccccccd 	.word	0xcccccccd
    65f0:	00f42400 	.word	0x00f42400

000065f4 <Pps::init()>:

void Pps::init() {
  VLF("MSG: PPS, attaching ISR to sense input");
  pinMode(PPS_SENSE_PIN, INPUT_PULLUP);
    65f4:	2102      	movs	r1, #2
    65f6:	2005      	movs	r0, #5
void Pps::init() {
    65f8:	b508      	push	{r3, lr}
  pinMode(PPS_SENSE_PIN, INPUT_PULLUP);
    65fa:	f011 fe7f 	bl	182fc <pinMode>
  #if (TIME_LOCATION_PPS_SENSE) == HIGH
    attachInterrupt(digitalPinToInterrupt(PPS_SENSE_PIN), ppsIsr, RISING);
    65fe:	2203      	movs	r2, #3
    6600:	4902      	ldr	r1, [pc, #8]	; (660c <Pps::init()+0x18>)
    6602:	2005      	movs	r0, #5
  #elif (TIME_LOCATION_PPS_SENSE) == LOW
    attachInterrupt(digitalPinToInterrupt(PPS_SENSE_PIN), ppsIsr, FALLING);
  #elif (TIME_LOCATION_PPS_SENSE) == BOTH
    attachInterrupt(digitalPinToInterrupt(PPS_SENSE_PIN), ppsIsr, CHANGE);
  #endif
}
    6604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    attachInterrupt(digitalPinToInterrupt(PPS_SENSE_PIN), ppsIsr, RISING);
    6608:	f011 bed6 	b.w	183b8 <attachInterrupt>
    660c:	00006589 	.word	0x00006589

00006610 <TimeLocationSource::restart()>:
  public:
    // initialize (also enables the RTC PPS if available)
    virtual bool init();

    // restart the device
    virtual void restart() {}
    6610:	4770      	bx	lr
    6612:	bf00      	nop

00006614 <TimeLocationSource::ppsEnable()>:

    // get the location
    virtual void getSite(double &latitude, double &longitude, float &elevation) { UNUSED(latitude); UNUSED(longitude); UNUSED(elevation); }

    // secondary way to enable PPS
    virtual void ppsEnable() {}
    6614:	4770      	bx	lr
    6616:	bf00      	nop

00006618 <TlsGPS::set(JulianDate)>:
void TlsGPS::set(JulianDate ut1) {
    6618:	b084      	sub	sp, #16
}
    661a:	b004      	add	sp, #16
    661c:	4770      	bx	lr
    661e:	bf00      	nop

00006620 <TlsGPS::set(int, int, int, int, int, int)>:
}
    6620:	4770      	bx	lr
    6622:	bf00      	nop

00006624 <gpsPoll()>:
    if (pps.synced) {
    6624:	4b05      	ldr	r3, [pc, #20]	; (663c <gpsPoll()+0x18>)
    6626:	781b      	ldrb	r3, [r3, #0]
    6628:	b133      	cbz	r3, 6638 <gpsPoll()+0x14>
  if (!tlsGps->isReady()) tlsGps->poll();
    662a:	4b05      	ldr	r3, [pc, #20]	; (6640 <gpsPoll()+0x1c>)
    662c:	6818      	ldr	r0, [r3, #0]
    662e:	7c03      	ldrb	r3, [r0, #16]
    6630:	b913      	cbnz	r3, 6638 <gpsPoll()+0x14>
    6632:	6803      	ldr	r3, [r0, #0]
    6634:	69db      	ldr	r3, [r3, #28]
    6636:	4718      	bx	r3
}
    6638:	4770      	bx	lr
    663a:	bf00      	nop
    663c:	20004668 	.word	0x20004668
    6640:	200064a8 	.word	0x200064a8

00006644 <TlsGPS::timeIsValid()>:

bool TlsGPS::timeIsValid() {
    6644:	b508      	push	{r3, lr}
  if (gps.date.year() <= 3000 && gps.date.month() >= 1 && gps.date.month() <= 12 && gps.date.day() >= 1 && gps.date.day() <= 31 &&
    6646:	4817      	ldr	r0, [pc, #92]	; (66a4 <TlsGPS::timeIsValid()+0x60>)
    6648:	f010 fb7e 	bl	16d48 <TinyGPSDate::year()>
      gps.time.hour() <= 23 && gps.time.minute() <= 59 && gps.time.second() <= 59) return true; else return false;
    664c:	f640 33b8 	movw	r3, #3000	; 0xbb8
    6650:	4298      	cmp	r0, r3
    6652:	d901      	bls.n	6658 <TlsGPS::timeIsValid()+0x14>
    6654:	2000      	movs	r0, #0
}
    6656:	bd08      	pop	{r3, pc}
  if (gps.date.year() <= 3000 && gps.date.month() >= 1 && gps.date.month() <= 12 && gps.date.day() >= 1 && gps.date.day() <= 31 &&
    6658:	4812      	ldr	r0, [pc, #72]	; (66a4 <TlsGPS::timeIsValid()+0x60>)
    665a:	f010 fb87 	bl	16d6c <TinyGPSDate::month()>
    665e:	2800      	cmp	r0, #0
    6660:	d0f8      	beq.n	6654 <TlsGPS::timeIsValid()+0x10>
    6662:	4810      	ldr	r0, [pc, #64]	; (66a4 <TlsGPS::timeIsValid()+0x60>)
    6664:	f010 fb82 	bl	16d6c <TinyGPSDate::month()>
    6668:	280c      	cmp	r0, #12
    666a:	d8f3      	bhi.n	6654 <TlsGPS::timeIsValid()+0x10>
    666c:	480d      	ldr	r0, [pc, #52]	; (66a4 <TlsGPS::timeIsValid()+0x60>)
    666e:	f010 fb91 	bl	16d94 <TinyGPSDate::day()>
    6672:	2800      	cmp	r0, #0
    6674:	d0ee      	beq.n	6654 <TlsGPS::timeIsValid()+0x10>
    6676:	480b      	ldr	r0, [pc, #44]	; (66a4 <TlsGPS::timeIsValid()+0x60>)
    6678:	f010 fb8c 	bl	16d94 <TinyGPSDate::day()>
    667c:	281f      	cmp	r0, #31
    667e:	d8e9      	bhi.n	6654 <TlsGPS::timeIsValid()+0x10>
      gps.time.hour() <= 23 && gps.time.minute() <= 59 && gps.time.second() <= 59) return true; else return false;
    6680:	4809      	ldr	r0, [pc, #36]	; (66a8 <TlsGPS::timeIsValid()+0x64>)
    6682:	f010 fb93 	bl	16dac <TinyGPSTime::hour()>
  if (gps.date.year() <= 3000 && gps.date.month() >= 1 && gps.date.month() <= 12 && gps.date.day() >= 1 && gps.date.day() <= 31 &&
    6686:	2817      	cmp	r0, #23
    6688:	d8e4      	bhi.n	6654 <TlsGPS::timeIsValid()+0x10>
      gps.time.hour() <= 23 && gps.time.minute() <= 59 && gps.time.second() <= 59) return true; else return false;
    668a:	4807      	ldr	r0, [pc, #28]	; (66a8 <TlsGPS::timeIsValid()+0x64>)
    668c:	f010 fb9a 	bl	16dc4 <TinyGPSTime::minute()>
    6690:	283b      	cmp	r0, #59	; 0x3b
    6692:	d8df      	bhi.n	6654 <TlsGPS::timeIsValid()+0x10>
    6694:	4804      	ldr	r0, [pc, #16]	; (66a8 <TlsGPS::timeIsValid()+0x64>)
    6696:	f010 fbab 	bl	16df0 <TinyGPSTime::second()>
    669a:	283b      	cmp	r0, #59	; 0x3b
    669c:	bf8c      	ite	hi
    669e:	2000      	movhi	r0, #0
    66a0:	2001      	movls	r0, #1
}
    66a2:	bd08      	pop	{r3, pc}
    66a4:	20005c2c 	.word	0x20005c2c
    66a8:	20005c3c 	.word	0x20005c3c
    66ac:	00000000 	.word	0x00000000

000066b0 <TlsGPS::siteIsValid()>:

bool TlsGPS::siteIsValid() {
  if (gps.location.lat() >= -90 && gps.location.lat() <= 90 && gps.location.lng() >= -360 && gps.location.lng() <= 360) return true; else return false;
    66b0:	481f      	ldr	r0, [pc, #124]	; (6730 <TlsGPS::siteIsValid()+0x80>)
bool TlsGPS::siteIsValid() {
    66b2:	b508      	push	{r3, lr}
  if (gps.location.lat() >= -90 && gps.location.lat() <= 90 && gps.location.lng() >= -360 && gps.location.lng() <= 360) return true; else return false;
    66b4:	f010 fb10 	bl	16cd8 <TinyGPSLocation::lat()>
    66b8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 6710 <TlsGPS::siteIsValid()+0x60>
    66bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
    66c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66c4:	da01      	bge.n	66ca <TlsGPS::siteIsValid()+0x1a>
    66c6:	2000      	movs	r0, #0
}
    66c8:	bd08      	pop	{r3, pc}
  if (gps.location.lat() >= -90 && gps.location.lat() <= 90 && gps.location.lng() >= -360 && gps.location.lng() <= 360) return true; else return false;
    66ca:	4819      	ldr	r0, [pc, #100]	; (6730 <TlsGPS::siteIsValid()+0x80>)
    66cc:	f010 fb04 	bl	16cd8 <TinyGPSLocation::lat()>
    66d0:	ed9f 7b11 	vldr	d7, [pc, #68]	; 6718 <TlsGPS::siteIsValid()+0x68>
    66d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
    66d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66dc:	d8f3      	bhi.n	66c6 <TlsGPS::siteIsValid()+0x16>
    66de:	4814      	ldr	r0, [pc, #80]	; (6730 <TlsGPS::siteIsValid()+0x80>)
    66e0:	f010 fb16 	bl	16d10 <TinyGPSLocation::lng()>
    66e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 6720 <TlsGPS::siteIsValid()+0x70>
    66e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    66ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66f0:	dbe9      	blt.n	66c6 <TlsGPS::siteIsValid()+0x16>
    66f2:	480f      	ldr	r0, [pc, #60]	; (6730 <TlsGPS::siteIsValid()+0x80>)
    66f4:	f010 fb0c 	bl	16d10 <TinyGPSLocation::lng()>
    66f8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 6728 <TlsGPS::siteIsValid()+0x78>
    66fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6704:	bf94      	ite	ls
    6706:	2001      	movls	r0, #1
    6708:	2000      	movhi	r0, #0
}
    670a:	bd08      	pop	{r3, pc}
    670c:	f3af 8000 	nop.w
    6710:	00000000 	.word	0x00000000
    6714:	c0568000 	.word	0xc0568000
    6718:	00000000 	.word	0x00000000
    671c:	40568000 	.word	0x40568000
    6720:	00000000 	.word	0x00000000
    6724:	c0768000 	.word	0xc0768000
    6728:	00000000 	.word	0x00000000
    672c:	40768000 	.word	0x40768000
    6730:	20005bf4 	.word	0x20005bf4
    6734:	00000000 	.word	0x00000000

00006738 <TlsGPS::getSite(double&, double&, float&)>:
void TlsGPS::getSite(double &latitude, double &longitude, float &elevation) {
    6738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!ready) return;
    673a:	7c07      	ldrb	r7, [r0, #16]
    673c:	b907      	cbnz	r7, 6740 <TlsGPS::getSite(double&, double&, float&)+0x8>
}
    673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!siteIsValid()) return;
    6740:	460e      	mov	r6, r1
    6742:	4615      	mov	r5, r2
    6744:	461c      	mov	r4, r3
    6746:	f7ff ffb3 	bl	66b0 <TlsGPS::siteIsValid()>
    674a:	2800      	cmp	r0, #0
    674c:	d0f7      	beq.n	673e <TlsGPS::getSite(double&, double&, float&)+0x6>
  latitude = gps.location.lat();
    674e:	4f10      	ldr	r7, [pc, #64]	; (6790 <TlsGPS::getSite(double&, double&, float&)+0x58>)
    6750:	4638      	mov	r0, r7
    6752:	f010 fac1 	bl	16cd8 <TinyGPSLocation::lat()>
  longitude = -gps.location.lng();
    6756:	4638      	mov	r0, r7
  latitude = gps.location.lat();
    6758:	ed86 0b00 	vstr	d0, [r6]
  longitude = -gps.location.lng();
    675c:	f010 fad8 	bl	16d10 <TinyGPSLocation::lng()>
   double deg()      { return value() / 100.0; }
};

struct TinyGPSAltitude : TinyGPSDecimal
{
   double meters()       { return value() / 100.0; }
    6760:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
    6764:	eeb1 0b40 	vneg.f64	d0, d0
   int32_t value()         { updated = false; return val; }
    6768:	2300      	movs	r3, #0
   double meters()       { return value() / 100.0; }
    676a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    676e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 6788 <TlsGPS::getSite(double&, double&, float&)+0x50>
    6772:	ed85 0b00 	vstr	d0, [r5]
   int32_t value()         { updated = false; return val; }
    6776:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
   double meters()       { return value() / 100.0; }
    677a:	ee86 7b05 	vdiv.f64	d7, d6, d5
  elevation = gps.altitude.meters();
    677e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    6782:	ed84 7a00 	vstr	s14, [r4]
}
    6786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6788:	00000000 	.word	0x00000000
    678c:	40590000 	.word	0x40590000
    6790:	20005bf4 	.word	0x20005bf4

00006794 <_GLOBAL__sub_I_gps>:
TinyGPSPlus gps;
    6794:	4801      	ldr	r0, [pc, #4]	; (679c <_GLOBAL__sub_I_gps+0x8>)
    6796:	f00f bf87 	b.w	166a8 <TinyGPSPlus::TinyGPSPlus()>
    679a:	bf00      	nop
    679c:	20005bf4 	.word	0x20005bf4

000067a0 <TlsGPS::init()>:
bool TlsGPS::init() {
    67a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tlsGps = this;
    67a4:	4b29      	ldr	r3, [pc, #164]	; (684c <TlsGPS::init()+0xac>)
bool TlsGPS::init() {
    67a6:	4681      	mov	r9, r0
    67a8:	b085      	sub	sp, #20
    SERIAL_GPS.begin(SERIAL_GPS_BAUD);
    67aa:	2200      	movs	r2, #0
    67ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    67b0:	4827      	ldr	r0, [pc, #156]	; (6850 <TlsGPS::init()+0xb0>)
  tlsGps = this;
    67b2:	f8c3 9000 	str.w	r9, [r3]
    SERIAL_GPS.begin(SERIAL_GPS_BAUD);
    67b6:	f010 fef1 	bl	1759c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>
  activeLink = true;
    67ba:	2301      	movs	r3, #1
  tasks.yield(1000);
    67bc:	4825      	ldr	r0, [pc, #148]	; (6854 <TlsGPS::init()+0xb4>)
    67be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  activeLink = true;
    67c2:	f889 3025 	strb.w	r3, [r9, #37]	; 0x25
  tasks.yield(1000);
    67c6:	f7ff fe8f 	bl	64e8 <Tasks::yield(unsigned long)>
  if (!SERIAL_GPS.available()) {
    67ca:	4821      	ldr	r0, [pc, #132]	; (6850 <TlsGPS::init()+0xb0>)
    67cc:	f010 fe08 	bl	173e0 <HardwareSerialIMXRT::available()>
    67d0:	b398      	cbz	r0, 683a <TlsGPS::init()+0x9a>
    67d2:	4e21      	ldr	r6, [pc, #132]	; (6858 <TlsGPS::init()+0xb8>)
    while (SERIAL_GPS.available() > 0) {
    67d4:	4c1e      	ldr	r4, [pc, #120]	; (6850 <TlsGPS::init()+0xb0>)
    67d6:	6835      	ldr	r5, [r6, #0]
      if (gps.encode(SERIAL_GPS.read())) break;
    67d8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 6864 <TlsGPS::init()+0xc4>
      Y;
    67dc:	4f1d      	ldr	r7, [pc, #116]	; (6854 <TlsGPS::init()+0xb4>)
    unsigned long timeout = millis() + 1000UL;
    67de:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    while (SERIAL_GPS.available() > 0) {
    67e2:	e00f      	b.n	6804 <TlsGPS::init()+0x64>
      if (gps.encode(SERIAL_GPS.read())) break;
    67e4:	f010 fe4e 	bl	17484 <HardwareSerialIMXRT::read()>
    67e8:	4601      	mov	r1, r0
    67ea:	4640      	mov	r0, r8
    67ec:	b2c9      	uxtb	r1, r1
    67ee:	f010 fa0b 	bl	16c08 <TinyGPSPlus::encode(char)>
    67f2:	4603      	mov	r3, r0
      Y;
    67f4:	4638      	mov	r0, r7
      if (gps.encode(SERIAL_GPS.read())) break;
    67f6:	b963      	cbnz	r3, 6812 <TlsGPS::init()+0x72>
    67f8:	6833      	ldr	r3, [r6, #0]
      if ((long)(millis() - timeout) > 0) {
    67fa:	1b5b      	subs	r3, r3, r5
    67fc:	2b00      	cmp	r3, #0
    67fe:	dc1c      	bgt.n	683a <TlsGPS::init()+0x9a>
      Y;
    6800:	f7ff fe1e 	bl	6440 <Tasks::yield()>
    while (SERIAL_GPS.available() > 0) {
    6804:	4620      	mov	r0, r4
    6806:	f010 fdeb 	bl	173e0 <HardwareSerialIMXRT::available()>
    680a:	4603      	mov	r3, r0
      if (gps.encode(SERIAL_GPS.read())) break;
    680c:	4620      	mov	r0, r4
    while (SERIAL_GPS.available() > 0) {
    680e:	2b00      	cmp	r3, #0
    6810:	dce8      	bgt.n	67e4 <TlsGPS::init()+0x44>
  if (tasks.add(10, 0, true, 7, gpsPoll, "gpsPoll")) { VLF("success"); active = true; } else { VLF("FAILED!"); }
    6812:	4912      	ldr	r1, [pc, #72]	; (685c <TlsGPS::init()+0xbc>)
    6814:	2007      	movs	r0, #7
    6816:	4a12      	ldr	r2, [pc, #72]	; (6860 <TlsGPS::init()+0xc0>)
    6818:	2301      	movs	r3, #1
    681a:	9000      	str	r0, [sp, #0]
    681c:	480d      	ldr	r0, [pc, #52]	; (6854 <TlsGPS::init()+0xb4>)
    681e:	e9cd 2101 	strd	r2, r1, [sp, #4]
    6822:	2200      	movs	r2, #0
    6824:	210a      	movs	r1, #10
    6826:	f7ff fcd9 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    682a:	b150      	cbz	r0, 6842 <TlsGPS::init()+0xa2>
    682c:	2301      	movs	r3, #1
    682e:	4618      	mov	r0, r3
    6830:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
}
    6834:	b005      	add	sp, #20
    6836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
    683a:	2000      	movs	r0, #0
}
    683c:	b005      	add	sp, #20
    683e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return active;
    6842:	f899 0024 	ldrb.w	r0, [r9, #36]	; 0x24
}
    6846:	b005      	add	sp, #20
    6848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    684c:	200064a8 	.word	0x200064a8
    6850:	20003798 	.word	0x20003798
    6854:	2000634c 	.word	0x2000634c
    6858:	20006344 	.word	0x20006344
    685c:	200022a8 	.word	0x200022a8
    6860:	00006625 	.word	0x00006625
    6864:	20005bf4 	.word	0x20005bf4

00006868 <TlsGPS::poll()>:
void TlsGPS::poll() {
    6868:	b570      	push	{r4, r5, r6, lr}
  while (SERIAL_GPS.available() > 0) {
    686a:	4c1e      	ldr	r4, [pc, #120]	; (68e4 <TlsGPS::poll()+0x7c>)
void TlsGPS::poll() {
    686c:	4606      	mov	r6, r0
    gps.encode(SERIAL_GPS.read());
    686e:	4d1e      	ldr	r5, [pc, #120]	; (68e8 <TlsGPS::poll()+0x80>)
  while (SERIAL_GPS.available() > 0) {
    6870:	e006      	b.n	6880 <TlsGPS::poll()+0x18>
    gps.encode(SERIAL_GPS.read());
    6872:	f010 fe07 	bl	17484 <HardwareSerialIMXRT::read()>
    6876:	4601      	mov	r1, r0
    6878:	4628      	mov	r0, r5
    687a:	b2c9      	uxtb	r1, r1
    687c:	f010 f9c4 	bl	16c08 <TinyGPSPlus::encode(char)>
  while (SERIAL_GPS.available() > 0) {
    6880:	4620      	mov	r0, r4
    6882:	f010 fdad 	bl	173e0 <HardwareSerialIMXRT::available()>
    6886:	4603      	mov	r3, r0
    gps.encode(SERIAL_GPS.read());
    6888:	4620      	mov	r0, r4
  while (SERIAL_GPS.available() > 0) {
    688a:	2b00      	cmp	r3, #0
    688c:	dcf1      	bgt.n	6872 <TlsGPS::poll()+0xa>
   bool isValid() const    { return valid; }
    688e:	4c16      	ldr	r4, [pc, #88]	; (68e8 <TlsGPS::poll()+0x80>)
  if (gps.location.isValid() && siteIsValid()) {
    6890:	7823      	ldrb	r3, [r4, #0]
    6892:	b903      	cbnz	r3, 6896 <TlsGPS::poll()+0x2e>
}
    6894:	bd70      	pop	{r4, r5, r6, pc}
  if (gps.location.isValid() && siteIsValid()) {
    6896:	4630      	mov	r0, r6
    6898:	f7ff ff0a 	bl	66b0 <TlsGPS::siteIsValid()>
    689c:	2800      	cmp	r0, #0
    689e:	d0f9      	beq.n	6894 <TlsGPS::poll()+0x2c>
    if (gps.date.isValid() && gps.time.isValid() && timeIsValid()) {
    68a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    68a4:	2b00      	cmp	r3, #0
    68a6:	d0f5      	beq.n	6894 <TlsGPS::poll()+0x2c>
    68a8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    68ac:	2b00      	cmp	r3, #0
    68ae:	d0f1      	beq.n	6894 <TlsGPS::poll()+0x2c>
    68b0:	4630      	mov	r0, r6
    68b2:	f7ff fec7 	bl	6644 <TlsGPS::timeIsValid()>
    68b6:	2800      	cmp	r0, #0
    68b8:	d0ec      	beq.n	6894 <TlsGPS::poll()+0x2c>
  if (startTime == 0) startTime = millis();
    68ba:	6a33      	ldr	r3, [r6, #32]
    68bc:	4a0b      	ldr	r2, [pc, #44]	; (68ec <TlsGPS::poll()+0x84>)
    68be:	b90b      	cbnz	r3, 68c4 <TlsGPS::poll()+0x5c>
    68c0:	6813      	ldr	r3, [r2, #0]
    68c2:	6233      	str	r3, [r6, #32]
    68c4:	6812      	ldr	r2, [r2, #0]
      if (waitIsValid()) {
    68c6:	490a      	ldr	r1, [pc, #40]	; (68f0 <TlsGPS::poll()+0x88>)
  unsigned long t = millis() - startTime;
    68c8:	1ad3      	subs	r3, r2, r3
      if (waitIsValid()) {
    68ca:	428b      	cmp	r3, r1
    68cc:	d9e2      	bls.n	6894 <TlsGPS::poll()+0x2c>
        tasks.setDurationComplete(tasks.getHandleByName("gpsPoll"));
    68ce:	4909      	ldr	r1, [pc, #36]	; (68f4 <TlsGPS::poll()+0x8c>)
    68d0:	4809      	ldr	r0, [pc, #36]	; (68f8 <TlsGPS::poll()+0x90>)
    68d2:	f7ff fd6f 	bl	63b4 <Tasks::getHandleByName(char const*)>
    68d6:	4601      	mov	r1, r0
    68d8:	4807      	ldr	r0, [pc, #28]	; (68f8 <TlsGPS::poll()+0x90>)
    68da:	f7ff fd59 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
        ready = true;
    68de:	2301      	movs	r3, #1
    68e0:	7433      	strb	r3, [r6, #16]
}
    68e2:	bd70      	pop	{r4, r5, r6, pc}
    68e4:	20003798 	.word	0x20003798
    68e8:	20005bf4 	.word	0x20005bf4
    68ec:	20006344 	.word	0x20006344
    68f0:	0001d4bf 	.word	0x0001d4bf
    68f4:	200022a8 	.word	0x200022a8
    68f8:	2000634c 	.word	0x2000634c
    68fc:	00000000 	.word	0x00000000

00006900 <TlsGPS::get(JulianDate&)>:
  if (!ready) return false;
    6900:	7c03      	ldrb	r3, [r0, #16]
bool TlsGPS::get(JulianDate &ut1) {
    6902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6906:	ed2d 8b04 	vpush	{d8-d9}
    690a:	b08d      	sub	sp, #52	; 0x34
  if (!ready) return false;
    690c:	b933      	cbnz	r3, 691c <TlsGPS::get(JulianDate&)+0x1c>
    690e:	2400      	movs	r4, #0
}
    6910:	4620      	mov	r0, r4
    6912:	b00d      	add	sp, #52	; 0x34
    6914:	ecbd 8b04 	vpop	{d8-d9}
    6918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!timeIsValid()) return false;
    691c:	4606      	mov	r6, r0
    691e:	460f      	mov	r7, r1
    6920:	f7ff fe90 	bl	6644 <TlsGPS::timeIsValid()>
    6924:	2800      	cmp	r0, #0
    6926:	d0f2      	beq.n	690e <TlsGPS::get(JulianDate&)+0xe>
  if (activeLink) {
    6928:	f896 4025 	ldrb.w	r4, [r6, #37]	; 0x25
    692c:	2c00      	cmp	r4, #0
    692e:	f040 80b7 	bne.w	6aa0 <TlsGPS::get(JulianDate&)+0x1a0>
  bool sentence = true;
    6932:	4604      	mov	r4, r0
  greg.year = gps.date.year();
    6934:	f8df 8210 	ldr.w	r8, [pc, #528]	; 6b48 <TlsGPS::get(JulianDate&)+0x248>
  ut1 = calendars.gregorianToJulianDay(greg);
    6938:	ad06      	add	r5, sp, #24
  greg.year = gps.date.year();
    693a:	f108 0038 	add.w	r0, r8, #56	; 0x38
    693e:	f010 fa03 	bl	16d48 <TinyGPSDate::year()>
    6942:	f8ad 0018 	strh.w	r0, [sp, #24]
  greg.month = gps.date.month();
    6946:	f108 0038 	add.w	r0, r8, #56	; 0x38
    694a:	f010 fa0f 	bl	16d6c <TinyGPSDate::month()>
    694e:	f88d 001a 	strb.w	r0, [sp, #26]
  greg.day = gps.date.day();
    6952:	f108 0038 	add.w	r0, r8, #56	; 0x38
    6956:	f010 fa1d 	bl	16d94 <TinyGPSDate::day()>
  ut1 = calendars.gregorianToJulianDay(greg);
    695a:	ab0c      	add	r3, sp, #48	; 0x30
  greg.day = gps.date.day();
    695c:	f88d 001b 	strb.w	r0, [sp, #27]
  ut1 = calendars.gregorianToJulianDay(greg);
    6960:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    6964:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6968:	4873      	ldr	r0, [pc, #460]	; (6b38 <TlsGPS::get(JulianDate&)+0x238>)
    696a:	e895 000c 	ldmia.w	r5, {r2, r3}
    696e:	f7fc fed3 	bl	3718 <Calendars::gregorianToJulianDay(GregorianDate)>
  double second = gps.time.second() + gps.time.age()/1000.0;
    6972:	f108 0048 	add.w	r0, r8, #72	; 0x48
  ut1 = calendars.gregorianToJulianDay(greg);
    6976:	ed87 0b00 	vstr	d0, [r7]
    697a:	ed87 1b02 	vstr	d1, [r7, #8]
  double second = gps.time.second() + gps.time.age()/1000.0;
    697e:	f010 fa37 	bl	16df0 <TinyGPSTime::second()>
   uint32_t age() const       { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
    6982:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
    6986:	9005      	str	r0, [sp, #20]
    6988:	2b00      	cmp	r3, #0
    698a:	f000 80ac 	beq.w	6ae6 <TlsGPS::get(JulianDate&)+0x1e6>
    698e:	4b6b      	ldr	r3, [pc, #428]	; (6b3c <TlsGPS::get(JulianDate&)+0x23c>)
    6990:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
    6994:	681b      	ldr	r3, [r3, #0]
    6996:	1a9b      	subs	r3, r3, r2
    6998:	ee07 3a90 	vmov	s15, r3
    699c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 6b10 <TlsGPS::get(JulianDate&)+0x210>
    69a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    69a4:	ee87 6b05 	vdiv.f64	d6, d7, d5
    if (pps.synced) {
    69a8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6b4c <TlsGPS::get(JulianDate&)+0x24c>
    69ac:	f899 3000 	ldrb.w	r3, [r9]
    69b0:	2b00      	cmp	r3, #0
    69b2:	f000 8091 	beq.w	6ad8 <TlsGPS::get(JulianDate&)+0x1d8>
      do { t = micros() - pps.lastMicros; } while (t < 400000 || t > 600000);
    69b6:	f8df b198 	ldr.w	fp, [pc, #408]	; 6b50 <TlsGPS::get(JulianDate&)+0x250>
    69ba:	f8df a198 	ldr.w	sl, [pc, #408]	; 6b54 <TlsGPS::get(JulianDate&)+0x254>
    69be:	f011 fc37 	bl	18230 <micros>
    69c2:	f8d9 500c 	ldr.w	r5, [r9, #12]
    69c6:	1b45      	subs	r5, r0, r5
    69c8:	eb05 030b 	add.w	r3, r5, fp
    69cc:	4553      	cmp	r3, sl
    69ce:	d8f6      	bhi.n	69be <TlsGPS::get(JulianDate&)+0xbe>
      second = floor(gps.time.second() + gps.time.age()/1000.0) + t/1000000.0;
    69d0:	485b      	ldr	r0, [pc, #364]	; (6b40 <TlsGPS::get(JulianDate&)+0x240>)
    69d2:	f010 fa0d 	bl	16df0 <TinyGPSTime::second()>
    69d6:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
    69da:	ee07 0a90 	vmov	s15, r0
    69de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    69e2:	2b00      	cmp	r3, #0
    69e4:	f000 808f 	beq.w	6b06 <TlsGPS::get(JulianDate&)+0x206>
    69e8:	4b54      	ldr	r3, [pc, #336]	; (6b3c <TlsGPS::get(JulianDate&)+0x23c>)
    69ea:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	1a9b      	subs	r3, r3, r2
    69f2:	ee07 3a90 	vmov	s15, r3
    69f6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 6b10 <TlsGPS::get(JulianDate&)+0x210>
    69fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    69fe:	ee87 4b05 	vdiv.f64	d4, d7, d5
    6a02:	ee07 5a90 	vmov	s15, r5
    6a06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6a0a:	ee36 6b04 	vadd.f64	d6, d6, d4
    6a0e:	ed9f 5b42 	vldr	d5, [pc, #264]	; 6b18 <TlsGPS::get(JulianDate&)+0x218>
    6a12:	febb 6b46 	vrintm.f64	d6, d6
    6a16:	ee87 8b05 	vdiv.f64	d8, d7, d5
    6a1a:	ee38 8b06 	vadd.f64	d8, d8, d6
  ut1.hour = gps.time.hour() + gps.time.minute()/60.0 + (second + DUT1)/3600.0;
    6a1e:	4848      	ldr	r0, [pc, #288]	; (6b40 <TlsGPS::get(JulianDate&)+0x240>)
    6a20:	f010 f9c4 	bl	16dac <TinyGPSTime::hour()>
    6a24:	4603      	mov	r3, r0
    6a26:	4846      	ldr	r0, [pc, #280]	; (6b40 <TlsGPS::get(JulianDate&)+0x240>)
    6a28:	ee09 3a10 	vmov	s18, r3
    6a2c:	f010 f9ca 	bl	16dc4 <TinyGPSTime::minute()>
    6a30:	ee06 0a90 	vmov	s13, r0
  if (ut1.hour >= 24.0L) { ut1.hour -= 24.0L; ut1.day += 1.0L; } else
    6a34:	eeb3 4b08 	vmov.f64	d4, #56	; 0x41c00000  24.0
  ut1.hour = gps.time.hour() + gps.time.minute()/60.0 + (second + DUT1)/3600.0;
    6a38:	eeb8 9bc9 	vcvt.f64.s32	d9, s18
    6a3c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    6a40:	ed96 7b06 	vldr	d7, [r6, #24]
    6a44:	ed9f 2b36 	vldr	d2, [pc, #216]	; 6b20 <TlsGPS::get(JulianDate&)+0x220>
    6a48:	ed9f 3b37 	vldr	d3, [pc, #220]	; 6b28 <TlsGPS::get(JulianDate&)+0x228>
    6a4c:	ee38 8b07 	vadd.f64	d8, d8, d7
    6a50:	ee85 7b02 	vdiv.f64	d7, d5, d2
    6a54:	ee88 5b03 	vdiv.f64	d5, d8, d3
    6a58:	ee37 7b09 	vadd.f64	d7, d7, d9
    6a5c:	ee37 7b05 	vadd.f64	d7, d7, d5
  if (ut1.hour >= 24.0L) { ut1.hour -= 24.0L; ut1.day += 1.0L; } else
    6a60:	eeb4 7bc4 	vcmpe.f64	d7, d4
    6a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a68:	db2e      	blt.n	6ac8 <TlsGPS::get(JulianDate&)+0x1c8>
    6a6a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    6a6e:	ee37 7b44 	vsub.f64	d7, d7, d4
    6a72:	ed97 6b00 	vldr	d6, [r7]
    6a76:	ed87 7b02 	vstr	d7, [r7, #8]
    6a7a:	ee36 6b05 	vadd.f64	d6, d6, d5
    6a7e:	ed87 6b00 	vstr	d6, [r7]
  if (sentence && activeLink) {
    6a82:	2c00      	cmp	r4, #0
    6a84:	f43f af44 	beq.w	6910 <TlsGPS::get(JulianDate&)+0x10>
    6a88:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	f43f af3f 	beq.w	6910 <TlsGPS::get(JulianDate&)+0x10>
    SERIAL_GPS.end();
    6a92:	482c      	ldr	r0, [pc, #176]	; (6b44 <TlsGPS::get(JulianDate&)+0x244>)
    6a94:	f010 fd4e 	bl	17534 <HardwareSerialIMXRT::end()>
    activeLink = false;
    6a98:	2300      	movs	r3, #0
    6a9a:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
    6a9e:	e737      	b.n	6910 <TlsGPS::get(JulianDate&)+0x10>
    while (SERIAL_GPS.available() > 0) {
    6aa0:	4d28      	ldr	r5, [pc, #160]	; (6b44 <TlsGPS::get(JulianDate&)+0x244>)
      sentence = gps.encode(SERIAL_GPS.read());
    6aa2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 6b48 <TlsGPS::get(JulianDate&)+0x248>
    6aa6:	e007      	b.n	6ab8 <TlsGPS::get(JulianDate&)+0x1b8>
    6aa8:	f010 fcec 	bl	17484 <HardwareSerialIMXRT::read()>
    6aac:	4601      	mov	r1, r0
    6aae:	4640      	mov	r0, r8
    6ab0:	b2c9      	uxtb	r1, r1
    6ab2:	f010 f8a9 	bl	16c08 <TinyGPSPlus::encode(char)>
    6ab6:	4604      	mov	r4, r0
    while (SERIAL_GPS.available() > 0) {
    6ab8:	4628      	mov	r0, r5
    6aba:	f010 fc91 	bl	173e0 <HardwareSerialIMXRT::available()>
    6abe:	4603      	mov	r3, r0
      sentence = gps.encode(SERIAL_GPS.read());
    6ac0:	4628      	mov	r0, r5
    while (SERIAL_GPS.available() > 0) {
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	dcf0      	bgt.n	6aa8 <TlsGPS::get(JulianDate&)+0x1a8>
    6ac6:	e735      	b.n	6934 <TlsGPS::get(JulianDate&)+0x34>
  if (ut1.hour < 0.0L) { ut1.hour += 24.0L; ut1.day -= 1.0L; }
    6ac8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    6acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ad0:	d40c      	bmi.n	6aec <TlsGPS::get(JulianDate&)+0x1ec>
  ut1.hour = gps.time.hour() + gps.time.minute()/60.0 + (second + DUT1)/3600.0;
    6ad2:	ed87 7b02 	vstr	d7, [r7, #8]
    6ad6:	e7d4      	b.n	6a82 <TlsGPS::get(JulianDate&)+0x182>
  double second = gps.time.second() + gps.time.age()/1000.0;
    6ad8:	eddd 7a05 	vldr	s15, [sp, #20]
    6adc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    6ae0:	ee38 8b06 	vadd.f64	d8, d8, d6
    6ae4:	e79b      	b.n	6a1e <TlsGPS::get(JulianDate&)+0x11e>
    6ae6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 6b30 <TlsGPS::get(JulianDate&)+0x230>
    6aea:	e75d      	b.n	69a8 <TlsGPS::get(JulianDate&)+0xa8>
  if (ut1.hour < 0.0L) { ut1.hour += 24.0L; ut1.day -= 1.0L; }
    6aec:	ed97 6b00 	vldr	d6, [r7]
    6af0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    6af4:	ee37 7b04 	vadd.f64	d7, d7, d4
    6af8:	ee36 6b45 	vsub.f64	d6, d6, d5
    6afc:	ed87 7b02 	vstr	d7, [r7, #8]
    6b00:	ed87 6b00 	vstr	d6, [r7]
    6b04:	e7bd      	b.n	6a82 <TlsGPS::get(JulianDate&)+0x182>
    6b06:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 6b30 <TlsGPS::get(JulianDate&)+0x230>
    6b0a:	e77a      	b.n	6a02 <TlsGPS::get(JulianDate&)+0x102>
    6b0c:	f3af 8000 	nop.w
    6b10:	00000000 	.word	0x00000000
    6b14:	408f4000 	.word	0x408f4000
    6b18:	00000000 	.word	0x00000000
    6b1c:	412e8480 	.word	0x412e8480
    6b20:	00000000 	.word	0x00000000
    6b24:	404e0000 	.word	0x404e0000
    6b28:	00000000 	.word	0x00000000
    6b2c:	40ac2000 	.word	0x40ac2000
    6b30:	d2e147ae 	.word	0xd2e147ae
    6b34:	4150624d 	.word	0x4150624d
    6b38:	20005b50 	.word	0x20005b50
    6b3c:	20006344 	.word	0x20006344
    6b40:	20005c3c 	.word	0x20005c3c
    6b44:	20003798 	.word	0x20003798
    6b48:	20005bf4 	.word	0x20005bf4
    6b4c:	20004668 	.word	0x20004668
    6b50:	fff9e580 	.word	0xfff9e580
    6b54:	00030d40 	.word	0x00030d40

00006b58 <TimeLocationSource::getSite(double&, double&, float&)>:
    virtual void getSite(double &latitude, double &longitude, float &elevation) { UNUSED(latitude); UNUSED(longitude); UNUSED(elevation); }
    6b58:	4770      	bx	lr
    6b5a:	bf00      	nop

00006b5c <TimeLocationSource::poll()>:

    // update from GPS or NTP
    virtual void poll() {}
    6b5c:	4770      	bx	lr
    6b5e:	bf00      	nop

00006b60 <TlsTeensy::init()>:
    (defined(TIME_LOCATION_SOURCE_FALLBACK) && TIME_LOCATION_SOURCE_FALLBACK == TEENSY)

#include <TimeLib.h> // https://github.com/PaulStoffregen/Time/archive/master.zip

bool TlsTeensy::init() {
  ready = true;
    6b60:	2301      	movs	r3, #1
    6b62:	7403      	strb	r3, [r0, #16]
  return ready;
}
    6b64:	4618      	mov	r0, r3
    6b66:	4770      	bx	lr

00006b68 <TlsTeensy::set(int, int, int, int, int, int)>:
  double s = (m - floor(m))*60.0;

  set(greg.year, greg.month, greg.day, h, floor(m), floor(s));
}

void TlsTeensy::set(int year, int month, int day, int hour, int minute, int second) {
    6b68:	b510      	push	{r4, lr}
    6b6a:	b082      	sub	sp, #8
    6b6c:	4608      	mov	r0, r1
    6b6e:	4614      	mov	r4, r2
  setTime(hour, minute, second, day, month, year);
    6b70:	9001      	str	r0, [sp, #4]
    6b72:	9400      	str	r4, [sp, #0]
    6b74:	9804      	ldr	r0, [sp, #16]
    6b76:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    6b7a:	f010 fb77 	bl	1726c <setTime(int, int, int, int, int, int)>
  unsigned long TeensyTime = now();              // get time in epoch
    6b7e:	f010 fa7b 	bl	17078 <now()>
  Teensy3Clock.set(TeensyTime);                  // set Teensy time
}
    6b82:	b002      	add	sp, #8
    6b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
        static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    6b88:	f011 bff0 	b.w	18b6c <rtc_set>
    6b8c:	0000      	movs	r0, r0
	...

00006b90 <TlsTeensy::get(JulianDate&)>:

bool TlsTeensy::get(JulianDate &ut1) {
    6b90:	b530      	push	{r4, r5, lr}
  if (!ready) return false;
    6b92:	7c05      	ldrb	r5, [r0, #16]
bool TlsTeensy::get(JulianDate &ut1) {
    6b94:	ed2d 8b02 	vpush	{d8}
    6b98:	b08b      	sub	sp, #44	; 0x2c
  if (!ready) return false;
    6b9a:	b925      	cbnz	r5, 6ba6 <TlsTeensy::get(JulianDate&)+0x16>
    ut1 = calendars.gregorianToJulianDay(greg);
    ut1.hour = hour() + minute()/60.0 + second()/3600.0;
  }

  return true;
}
    6b9c:	4628      	mov	r0, r5
    6b9e:	b00b      	add	sp, #44	; 0x2c
    6ba0:	ecbd 8b02 	vpop	{d8}
    6ba4:	bd30      	pop	{r4, r5, pc}
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    6ba6:	460c      	mov	r4, r1
    6ba8:	f011 ffce 	bl	18b48 <rtc_get>
  setTime(TeensyTime);                           // set system time
    6bac:	2100      	movs	r1, #0
    6bae:	f010 fb3f 	bl	17230 <setTime(long long)>
  if (year() >= 0 && year() <= 3000 && month() >= 1 && month() <= 12 && day() >= 1 && day() <= 31 &&
    6bb2:	f010 fb23 	bl	171fc <year()>
      hour() <= 23 && minute() <= 59 && second() <= 59) {
    6bb6:	2800      	cmp	r0, #0
    6bb8:	dbf0      	blt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
  if (year() >= 0 && year() <= 3000 && month() >= 1 && month() <= 12 && day() >= 1 && day() <= 31 &&
    6bba:	f010 fb1f 	bl	171fc <year()>
    6bbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
    6bc2:	4298      	cmp	r0, r3
    6bc4:	dcea      	bgt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    6bc6:	f010 fb01 	bl	171cc <month()>
    6bca:	2800      	cmp	r0, #0
    6bcc:	dde6      	ble.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    6bce:	f010 fafd 	bl	171cc <month()>
    6bd2:	280c      	cmp	r0, #12
    6bd4:	dce2      	bgt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    6bd6:	f010 fae1 	bl	1719c <day()>
    6bda:	2800      	cmp	r0, #0
    6bdc:	ddde      	ble.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    6bde:	f010 fadd 	bl	1719c <day()>
    6be2:	281f      	cmp	r0, #31
    6be4:	dcda      	bgt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
      hour() <= 23 && minute() <= 59 && second() <= 59) {
    6be6:	f010 fa91 	bl	1710c <hour()>
  if (year() >= 0 && year() <= 3000 && month() >= 1 && month() <= 12 && day() >= 1 && day() <= 31 &&
    6bea:	2817      	cmp	r0, #23
    6bec:	dcd6      	bgt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
      hour() <= 23 && minute() <= 59 && second() <= 59) {
    6bee:	f010 faa5 	bl	1713c <minute()>
    6bf2:	283b      	cmp	r0, #59	; 0x3b
    6bf4:	dcd2      	bgt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    6bf6:	f010 fab9 	bl	1716c <second()>
    6bfa:	283b      	cmp	r0, #59	; 0x3b
    6bfc:	dcce      	bgt.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    GregorianDate greg; greg.year = year(); greg.month = month(); greg.day = day();
    6bfe:	f010 fafd 	bl	171fc <year()>
    6c02:	f8ad 0010 	strh.w	r0, [sp, #16]
    6c06:	f010 fae1 	bl	171cc <month()>
    6c0a:	f88d 0012 	strb.w	r0, [sp, #18]
    6c0e:	f010 fac5 	bl	1719c <day()>
    ut1 = calendars.gregorianToJulianDay(greg);
    6c12:	ab0a      	add	r3, sp, #40	; 0x28
    GregorianDate greg; greg.year = year(); greg.month = month(); greg.day = day();
    6c14:	f88d 0013 	strb.w	r0, [sp, #19]
    ut1 = calendars.gregorianToJulianDay(greg);
    6c18:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    6c1c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6c24:	4818      	ldr	r0, [pc, #96]	; (6c88 <TlsTeensy::get(JulianDate&)+0xf8>)
    6c26:	f7fc fd77 	bl	3718 <Calendars::gregorianToJulianDay(GregorianDate)>
    6c2a:	ed84 0b00 	vstr	d0, [r4]
    6c2e:	ed84 1b02 	vstr	d1, [r4, #8]
    ut1.hour = hour() + minute()/60.0 + second()/3600.0;
    6c32:	f010 fa6b 	bl	1710c <hour()>
    6c36:	ee08 0a10 	vmov	s16, r0
    6c3a:	f010 fa7f 	bl	1713c <minute()>
    6c3e:	ee06 0a90 	vmov	s13, r0
    6c42:	eeb8 7bc8 	vcvt.f64.s32	d7, s16
    6c46:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    6c4a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 6c78 <TlsTeensy::get(JulianDate&)+0xe8>
    6c4e:	ee86 8b05 	vdiv.f64	d8, d6, d5
    6c52:	ee38 8b07 	vadd.f64	d8, d8, d7
    6c56:	f010 fa89 	bl	1716c <second()>
    6c5a:	ee07 0a90 	vmov	s15, r0
    6c5e:	ed9f 5b08 	vldr	d5, [pc, #32]	; 6c80 <TlsTeensy::get(JulianDate&)+0xf0>
    6c62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    6c66:	ee86 7b05 	vdiv.f64	d7, d6, d5
    6c6a:	ee37 7b08 	vadd.f64	d7, d7, d8
    6c6e:	ed84 7b02 	vstr	d7, [r4, #8]
    6c72:	e793      	b.n	6b9c <TlsTeensy::get(JulianDate&)+0xc>
    6c74:	f3af 8000 	nop.w
    6c78:	00000000 	.word	0x00000000
    6c7c:	404e0000 	.word	0x404e0000
    6c80:	00000000 	.word	0x00000000
    6c84:	40ac2000 	.word	0x40ac2000
    6c88:	20005b50 	.word	0x20005b50
    6c8c:	00000000 	.word	0x00000000

00006c90 <TlsTeensy::set(JulianDate)>:
void TlsTeensy::set(JulianDate ut1) {
    6c90:	b570      	push	{r4, r5, r6, lr}
    6c92:	b08e      	sub	sp, #56	; 0x38
    6c94:	4604      	mov	r4, r0
  GregorianDate greg = calendars.julianDayToGregorian(ut1);
    6c96:	492c      	ldr	r1, [pc, #176]	; (6d48 <TlsTeensy::set(JulianDate)+0xb8>)
    6c98:	a808      	add	r0, sp, #32
void TlsTeensy::set(JulianDate ut1) {
    6c9a:	ed8d 0b04 	vstr	d0, [sp, #16]
    6c9e:	ed8d 1b06 	vstr	d1, [sp, #24]
  GregorianDate greg = calendars.julianDayToGregorian(ut1);
    6ca2:	f7fc fde1 	bl	3868 <Calendars::julianDayToGregorian(JulianDate)>
  set(greg.year, greg.month, greg.day, h, floor(m), floor(s));
    6ca6:	6823      	ldr	r3, [r4, #0]
    6ca8:	4a28      	ldr	r2, [pc, #160]	; (6d4c <TlsTeensy::set(JulianDate)+0xbc>)
    6caa:	68dd      	ldr	r5, [r3, #12]
    6cac:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
    6cb0:	4295      	cmp	r5, r2
    6cb2:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
    6cb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
  double f1 = fabs(ut1.hour) + TLS_CLOCK_SKEW;
    6cba:	ed9d 7b06 	vldr	d7, [sp, #24]
    6cbe:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 6d38 <TlsTeensy::set(JulianDate)+0xa8>
  double m = (f1 - h)*60.0;
    6cc2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 6d40 <TlsTeensy::set(JulianDate)+0xb0>
  double f1 = fabs(ut1.hour) + TLS_CLOCK_SKEW;
    6cc6:	eeb0 7bc7 	vabs.f64	d7, d7
    6cca:	ee37 7b06 	vadd.f64	d7, d7, d6
  int h = floor(f1);
    6cce:	febb 6b47 	vrintm.f64	d6, d7
    6cd2:	eebd 6bc6 	vcvt.s32.f64	s12, d6
  double m = (f1 - h)*60.0;
    6cd6:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    6cda:	ee37 7b45 	vsub.f64	d7, d7, d5
    6cde:	ee27 7b04 	vmul.f64	d7, d7, d4
  double s = (m - floor(m))*60.0;
    6ce2:	febb 5b47 	vrintm.f64	d5, d7
    6ce6:	ee37 7b45 	vsub.f64	d7, d7, d5
  set(greg.year, greg.month, greg.day, h, floor(m), floor(s));
    6cea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
  double s = (m - floor(m))*60.0;
    6cee:	ee27 7b04 	vmul.f64	d7, d7, d4
  set(greg.year, greg.month, greg.day, h, floor(m), floor(s));
    6cf2:	febb 7b47 	vrintm.f64	d7, d7
    6cf6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    6cfa:	d110      	bne.n	6d1e <TlsTeensy::set(JulianDate)+0x8e>
  setTime(hour, minute, second, day, month, year);
    6cfc:	ee17 2a10 	vmov	r2, s14
    6d00:	ee15 1a10 	vmov	r1, s10
    6d04:	9001      	str	r0, [sp, #4]
    6d06:	ee16 0a10 	vmov	r0, s12
    6d0a:	9600      	str	r6, [sp, #0]
    6d0c:	f010 faae 	bl	1726c <setTime(int, int, int, int, int, int)>
  unsigned long TeensyTime = now();              // get time in epoch
    6d10:	f010 f9b2 	bl	17078 <now()>
}
    6d14:	b00e      	add	sp, #56	; 0x38
    6d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    6d1a:	f011 bf27 	b.w	18b6c <rtc_set>
  set(greg.year, greg.month, greg.day, h, floor(m), floor(s));
    6d1e:	4601      	mov	r1, r0
    6d20:	4632      	mov	r2, r6
    6d22:	4620      	mov	r0, r4
    6d24:	ed8d 7a02 	vstr	s14, [sp, #8]
    6d28:	ed8d 5a01 	vstr	s10, [sp, #4]
    6d2c:	ed8d 6a00 	vstr	s12, [sp]
    6d30:	47a8      	blx	r5
}
    6d32:	b00e      	add	sp, #56	; 0x38
    6d34:	bd70      	pop	{r4, r5, r6, pc}
    6d36:	bf00      	nop
    6d38:	e8858ff7 	.word	0xe8858ff7
    6d3c:	3f223810 	.word	0x3f223810
    6d40:	00000000 	.word	0x00000000
    6d44:	404e0000 	.word	0x404e0000
    6d48:	20005b50 	.word	0x20005b50
    6d4c:	00006b69 	.word	0x00006b69

00006d50 <CommandProcessor::~CommandProcessor()>:
CommandProcessor::~CommandProcessor() {
    6d50:	b510      	push	{r4, lr}
    6d52:	4604      	mov	r4, r0
  SerialPort.end();
    6d54:	30cc      	adds	r0, #204	; 0xcc
    6d56:	f7fd f86f 	bl	3e38 <SerialWrapper::end()>
}
    6d5a:	4620      	mov	r0, r4
    6d5c:	bd10      	pop	{r4, pc}
    6d5e:	bf00      	nop

00006d60 <CommandProcessor::CommandProcessor(long, char)>:
CommandProcessor::CommandProcessor(long baud, char channel) {
    6d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d62:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    6d66:	2500      	movs	r5, #0
    6d68:	4604      	mov	r4, r0
    6d6a:	4617      	mov	r7, r2
    6d6c:	6043      	str	r3, [r0, #4]
    6d6e:	233f      	movs	r3, #63	; 0x3f
    6d70:	460e      	mov	r6, r1
    6d72:	8005      	strh	r5, [r0, #0]
    6d74:	7203      	strb	r3, [r0, #8]
// -----------------------------------------------------------------------------------
// Command processing
#pragma once

class Buffer {
    6d76:	4629      	mov	r1, r5
    6d78:	7085      	strb	r5, [r0, #2]
    6d7a:	224c      	movs	r2, #76	; 0x4c
    6d7c:	7305      	strb	r5, [r0, #12]
    6d7e:	6105      	str	r5, [r0, #16]
    6d80:	e9c0 5508 	strd	r5, r5, [r0, #32]
    6d84:	3028      	adds	r0, #40	; 0x28
    6d86:	f018 fa33 	bl	1f1f0 <memset>
    6d8a:	224c      	movs	r2, #76	; 0x4c
    6d8c:	4629      	mov	r1, r5
    6d8e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6d92:	6765      	str	r5, [r4, #116]	; 0x74
    6d94:	f018 fa2c 	bl	1f1f0 <memset>
    6d98:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
    6d9c:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
    6da0:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    6da4:	f7fc ffa6 	bl	3cf4 <SerialWrapper::SerialWrapper()>
}
    6da8:	4620      	mov	r0, r4
  this->channel = channel;
    6daa:	7227      	strb	r7, [r4, #8]
  serialBaud = baud;
    6dac:	6066      	str	r6, [r4, #4]
}
    6dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006db0 <commandChannelInit()>:

void commandChannelInit() {
    6db0:	b530      	push	{r4, r5, lr}
  #else
    long comPollRate = 2500;
  #endif
  #ifdef SERIAL_A
    VF("MSG: Setup, start command channel A task (priority 5)... ");
    handle = tasks.add(0, 0, true, 5, processCmdsA, "CmdA");
    6db2:	2200      	movs	r2, #0
void commandChannelInit() {
    6db4:	b085      	sub	sp, #20
    handle = tasks.add(0, 0, true, 5, processCmdsA, "CmdA");
    6db6:	4c20      	ldr	r4, [pc, #128]	; (6e38 <commandChannelInit()+0x88>)
    6db8:	2505      	movs	r5, #5
    6dba:	4920      	ldr	r1, [pc, #128]	; (6e3c <commandChannelInit()+0x8c>)
    6dbc:	4b20      	ldr	r3, [pc, #128]	; (6e40 <commandChannelInit()+0x90>)
    6dbe:	4620      	mov	r0, r4
    6dc0:	9500      	str	r5, [sp, #0]
    6dc2:	e9cd 3101 	strd	r3, r1, [sp, #4]
    6dc6:	2301      	movs	r3, #1
    6dc8:	4611      	mov	r1, r2
    6dca:	f7ff fa07 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    if (handle) { VLF("success"); } else { VLF("FAILED!"); }
    tasks.setPeriodMicros(handle, comPollRate);
    6dce:	f640 12c4 	movw	r2, #2500	; 0x9c4
    handle = tasks.add(0, 0, true, 5, processCmdsA, "CmdA");
    6dd2:	4601      	mov	r1, r0
    tasks.setPeriodMicros(handle, comPollRate);
    6dd4:	4620      	mov	r0, r4
    6dd6:	f7ff fab9 	bl	634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>
  #endif
  #ifdef SERIAL_B
    VF("MSG: Setup, start command channel B task (priority 5)... ");
    handle = tasks.add(0, 0, true, 5, processCmdsB, "CmdB");
    6dda:	2200      	movs	r2, #0
    6ddc:	4919      	ldr	r1, [pc, #100]	; (6e44 <commandChannelInit()+0x94>)
    6dde:	4620      	mov	r0, r4
    6de0:	4b19      	ldr	r3, [pc, #100]	; (6e48 <commandChannelInit()+0x98>)
    6de2:	9500      	str	r5, [sp, #0]
    6de4:	e9cd 3101 	strd	r3, r1, [sp, #4]
    6de8:	2301      	movs	r3, #1
    6dea:	4611      	mov	r1, r2
    6dec:	f7ff f9f6 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    if (handle) { VLF("success"); } else { VLF("FAILED!"); }
    tasks.setPeriodMicros(handle, comPollRate);
    6df0:	f640 12c4 	movw	r2, #2500	; 0x9c4
    handle = tasks.add(0, 0, true, 5, processCmdsB, "CmdB");
    6df4:	4601      	mov	r1, r0
    tasks.setPeriodMicros(handle, comPollRate);
    6df6:	4620      	mov	r0, r4
    6df8:	f7ff faa8 	bl	634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>
  #endif
  #ifdef SERIAL_C
    VF("MSG: Setup, start command channel C task (priority 5)... ");
    handle = tasks.add(0, 0, true, 5, processCmdsC, "CmdC");
    6dfc:	2200      	movs	r2, #0
    6dfe:	4913      	ldr	r1, [pc, #76]	; (6e4c <commandChannelInit()+0x9c>)
    6e00:	4620      	mov	r0, r4
    6e02:	4b13      	ldr	r3, [pc, #76]	; (6e50 <commandChannelInit()+0xa0>)
    6e04:	9500      	str	r5, [sp, #0]
    6e06:	e9cd 3101 	strd	r3, r1, [sp, #4]
    6e0a:	2301      	movs	r3, #1
    6e0c:	4611      	mov	r1, r2
    6e0e:	f7ff f9e5 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    if (handle) { VLF("success"); } else { VLF("FAILED!"); }
    tasks.setPeriodMicros(handle, comPollRate);
    6e12:	f640 12c4 	movw	r2, #2500	; 0x9c4
    handle = tasks.add(0, 0, true, 5, processCmdsC, "CmdC");
    6e16:	4601      	mov	r1, r0
    tasks.setPeriodMicros(handle, comPollRate);
    6e18:	4620      	mov	r0, r4
    6e1a:	f7ff fa97 	bl	634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>
    if (handle) { VLF("success"); } else { VLF("FAILED!"); }
    tasks.setPeriodMicros(handle, comPollRate);
  #endif
  #ifdef SERIAL_LOCAL
    VF("MSG: Setup, start command channel Local task (priority 5)... ");
    if (tasks.add(3, 0, true, 5, processCmdsLocal, "CmdL")) { VLF("success"); } else { VLF("FAILED!"); }
    6e1e:	490d      	ldr	r1, [pc, #52]	; (6e54 <commandChannelInit()+0xa4>)
    6e20:	4a0d      	ldr	r2, [pc, #52]	; (6e58 <commandChannelInit()+0xa8>)
    6e22:	2301      	movs	r3, #1
    6e24:	4620      	mov	r0, r4
    6e26:	9500      	str	r5, [sp, #0]
    6e28:	e9cd 2101 	strd	r2, r1, [sp, #4]
    6e2c:	2200      	movs	r2, #0
    6e2e:	2103      	movs	r1, #3
    6e30:	f7ff f9d4 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  #endif
}
    6e34:	b005      	add	sp, #20
    6e36:	bd30      	pop	{r4, r5, pc}
    6e38:	2000634c 	.word	0x2000634c
    6e3c:	20001e90 	.word	0x20001e90
    6e40:	0000719d 	.word	0x0000719d
    6e44:	20001e98 	.word	0x20001e98
    6e48:	000071a9 	.word	0x000071a9
    6e4c:	20001ea0 	.word	0x20001ea0
    6e50:	000071b5 	.word	0x000071b5
    6e54:	20001ea8 	.word	0x20001ea8
    6e58:	000071c1 	.word	0x000071c1

00006e5c <_GLOBAL__sub_I_processCommandsA>:
    6e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CommandProcessor processCommandsA(SERIAL_A_BAUD_DEFAULT,'A');
    6e5e:	4f1a      	ldr	r7, [pc, #104]	; (6ec8 <_GLOBAL__sub_I_processCommandsA+0x6c>)
    6e60:	2241      	movs	r2, #65	; 0x41
    6e62:	4d1a      	ldr	r5, [pc, #104]	; (6ecc <_GLOBAL__sub_I_processCommandsA+0x70>)
    6e64:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    6e68:	4c19      	ldr	r4, [pc, #100]	; (6ed0 <_GLOBAL__sub_I_processCommandsA+0x74>)
    6e6a:	4638      	mov	r0, r7
  CommandProcessor processCommandsB(SERIAL_B_BAUD_DEFAULT,'B');
    6e6c:	4e19      	ldr	r6, [pc, #100]	; (6ed4 <_GLOBAL__sub_I_processCommandsA+0x78>)
  CommandProcessor processCommandsA(SERIAL_A_BAUD_DEFAULT,'A');
    6e6e:	f7ff ff77 	bl	6d60 <CommandProcessor::CommandProcessor(long, char)>
    6e72:	462a      	mov	r2, r5
    6e74:	4621      	mov	r1, r4
    6e76:	4638      	mov	r0, r7
  CommandProcessor processCommandsC(SERIAL_C_BAUD_DEFAULT,'C');
    6e78:	4f17      	ldr	r7, [pc, #92]	; (6ed8 <_GLOBAL__sub_I_processCommandsA+0x7c>)
  CommandProcessor processCommandsA(SERIAL_A_BAUD_DEFAULT,'A');
    6e7a:	f016 f9bd 	bl	1d1f8 <__aeabi_atexit>
  CommandProcessor processCommandsB(SERIAL_B_BAUD_DEFAULT,'B');
    6e7e:	2242      	movs	r2, #66	; 0x42
    6e80:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    6e84:	4630      	mov	r0, r6
    6e86:	f7ff ff6b 	bl	6d60 <CommandProcessor::CommandProcessor(long, char)>
    6e8a:	462a      	mov	r2, r5
    6e8c:	4621      	mov	r1, r4
    6e8e:	4630      	mov	r0, r6
    6e90:	f016 f9b2 	bl	1d1f8 <__aeabi_atexit>
  CommandProcessor processCommandsLocal(9600,'L');
    6e94:	4e11      	ldr	r6, [pc, #68]	; (6edc <_GLOBAL__sub_I_processCommandsA+0x80>)
  CommandProcessor processCommandsC(SERIAL_C_BAUD_DEFAULT,'C');
    6e96:	2243      	movs	r2, #67	; 0x43
    6e98:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    6e9c:	4638      	mov	r0, r7
    6e9e:	f7ff ff5f 	bl	6d60 <CommandProcessor::CommandProcessor(long, char)>
    6ea2:	462a      	mov	r2, r5
    6ea4:	4621      	mov	r1, r4
    6ea6:	4638      	mov	r0, r7
    6ea8:	f016 f9a6 	bl	1d1f8 <__aeabi_atexit>
  CommandProcessor processCommandsLocal(9600,'L');
    6eac:	224c      	movs	r2, #76	; 0x4c
    6eae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    6eb2:	4630      	mov	r0, r6
    6eb4:	f7ff ff54 	bl	6d60 <CommandProcessor::CommandProcessor(long, char)>
    6eb8:	462a      	mov	r2, r5
    6eba:	4621      	mov	r1, r4
    6ebc:	4630      	mov	r0, r6
}
    6ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  CommandProcessor processCommandsLocal(9600,'L');
    6ec2:	f016 b999 	b.w	1d1f8 <__aeabi_atexit>
    6ec6:	bf00      	nop
    6ec8:	20005ebc 	.word	0x20005ebc
    6ecc:	20003e3c 	.word	0x20003e3c
    6ed0:	00006d51 	.word	0x00006d51
    6ed4:	20005f98 	.word	0x20005f98
    6ed8:	20006074 	.word	0x20006074
    6edc:	20006150 	.word	0x20006150

00006ee0 <CommandProcessor::command(char*, char*, char*, bool*, bool*)>:
CommandError CommandProcessor::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply) {
    6ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ee4:	b085      	sub	sp, #20
    6ee6:	4604      	mov	r4, r0
    6ee8:	4688      	mov	r8, r1
    6eea:	4615      	mov	r5, r2
  if (telescope.command(reply, command, parameter, supressFrame, numericReply, &commandError)) return commandError;
    6eec:	9002      	str	r0, [sp, #8]
CommandError CommandProcessor::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply) {
    6eee:	4699      	mov	r9, r3
  if (telescope.command(reply, command, parameter, supressFrame, numericReply, &commandError)) return commandError;
    6ef0:	980c      	ldr	r0, [sp, #48]	; 0x30
CommandError CommandProcessor::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply) {
    6ef2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  if (telescope.command(reply, command, parameter, supressFrame, numericReply, &commandError)) return commandError;
    6ef4:	9000      	str	r0, [sp, #0]
  commandError = CE_NONE;
    6ef6:	2000      	movs	r0, #0
  if (telescope.command(reply, command, parameter, supressFrame, numericReply, &commandError)) return commandError;
    6ef8:	9601      	str	r6, [sp, #4]
  commandError = CE_NONE;
    6efa:	7020      	strb	r0, [r4, #0]
  if (telescope.command(reply, command, parameter, supressFrame, numericReply, &commandError)) return commandError;
    6efc:	4845      	ldr	r0, [pc, #276]	; (7014 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x134>)
    6efe:	f000 f9dd 	bl	72bc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)>
    6f02:	bb30      	cbnz	r0, 6f52 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x72>
  if (commandError == CE_0 || commandError == CE_1) return commandError;
    6f04:	7820      	ldrb	r0, [r4, #0]
    6f06:	2801      	cmp	r0, #1
    6f08:	d019      	beq.n	6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
    6f0a:	f1a0 0719 	sub.w	r7, r0, #25
    6f0e:	fab7 f787 	clz	r7, r7
    6f12:	097f      	lsrs	r7, r7, #5
    6f14:	b99f      	cbnz	r7, 6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
  if (command[0] == (char)6) {
    6f16:	782b      	ldrb	r3, [r5, #0]
    6f18:	2b06      	cmp	r3, #6
    6f1a:	d01e      	beq.n	6f5a <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x7a>
  if (command[0] == 'S' && command[1] == 'B') {
    6f1c:	2b53      	cmp	r3, #83	; 0x53
    6f1e:	d011      	beq.n	6f44 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x64>
  if (command[0] == 'G' && command[1] == 'E' && parameter[0] == 0) {
    6f20:	2b47      	cmp	r3, #71	; 0x47
    6f22:	d112      	bne.n	6f4a <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x6a>
    6f24:	786b      	ldrb	r3, [r5, #1]
    6f26:	2b45      	cmp	r3, #69	; 0x45
    6f28:	d10f      	bne.n	6f4a <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x6a>
    6f2a:	f899 5000 	ldrb.w	r5, [r9]
    6f2e:	b965      	cbnz	r5, 6f4a <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x6a>
    sprintf(reply, "%02d", lastCommandError);
    6f30:	7862      	ldrb	r2, [r4, #1]
    6f32:	4640      	mov	r0, r8
    6f34:	4938      	ldr	r1, [pc, #224]	; (7018 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x138>)
    6f36:	f017 ffdb 	bl	1eef0 <sprintf>
    return commandError;
    6f3a:	7820      	ldrb	r0, [r4, #0]
    *numericReply = false;
    6f3c:	7035      	strb	r5, [r6, #0]
}
    6f3e:	b005      	add	sp, #20
    6f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (command[0] == 'S' && command[1] == 'B') {
    6f44:	786b      	ldrb	r3, [r5, #1]
    6f46:	2b42      	cmp	r3, #66	; 0x42
    6f48:	d015      	beq.n	6f76 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x96>
  return CE_CMD_UNKNOWN;
    6f4a:	2002      	movs	r0, #2
}
    6f4c:	b005      	add	sp, #20
    6f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (telescope.command(reply, command, parameter, supressFrame, numericReply, &commandError)) return commandError;
    6f52:	7820      	ldrb	r0, [r4, #0]
}
    6f54:	b005      	add	sp, #20
    6f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (command[1] == '0') {
    6f5a:	786b      	ldrb	r3, [r5, #1]
    6f5c:	2b30      	cmp	r3, #48	; 0x30
    6f5e:	d018      	beq.n	6f92 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0xb2>
      reply[0] = command[1];
    6f60:	f888 3000 	strb.w	r3, [r8]
      *supressFrame = true;
    6f64:	2301      	movs	r3, #1
    6f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      reply[1] = 0;             // Equatorial or Horizon mode, A or P
    6f68:	f888 7001 	strb.w	r7, [r8, #1]
      *supressFrame = true;
    6f6c:	7013      	strb	r3, [r2, #0]
    *numericReply = false;
    6f6e:	2300      	movs	r3, #0
    return commandError;
    6f70:	7820      	ldrb	r0, [r4, #0]
    *numericReply = false;
    6f72:	7033      	strb	r3, [r6, #0]
    return commandError;
    6f74:	e7e3      	b.n	6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
    int rate = parameter[0] - '0';
    6f76:	f899 3000 	ldrb.w	r3, [r9]
    if (parameter[0] == 'A') {
    6f7a:	2b41      	cmp	r3, #65	; 0x41
    6f7c:	d024      	beq.n	6fc8 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0xe8>
    if (parameter[0] == 'B') {
    6f7e:	2b42      	cmp	r3, #66	; 0x42
    6f80:	d035      	beq.n	6fee <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x10e>
    int rate = parameter[0] - '0';
    6f82:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
    if (rate >= 0 && rate <= 9) {
    6f86:	2d09      	cmp	r5, #9
    6f88:	d90a      	bls.n	6fa0 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0xc0>
    } else commandError = CE_PARAM_RANGE;
    6f8a:	2304      	movs	r3, #4
    6f8c:	4618      	mov	r0, r3
    6f8e:	7023      	strb	r3, [r4, #0]
    return commandError;
    6f90:	e7d5      	b.n	6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
      strcpy(reply,"CK_FAIL");  // last cmd checksum failed
    6f92:	4b22      	ldr	r3, [pc, #136]	; (701c <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x13c>)
    6f94:	cb03      	ldmia	r3!, {r0, r1}
    6f96:	f8c8 0000 	str.w	r0, [r8]
    6f9a:	f8c8 1004 	str.w	r1, [r8, #4]
    6f9e:	e7e6      	b.n	6f6e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x8e>
      SerialPort.print("1");
    6fa0:	f104 08cc 	add.w	r8, r4, #204	; 0xcc
							  return write((const uint8_t *)str, strlen(str)); }
    6fa4:	2201      	movs	r2, #1
    6fa6:	491e      	ldr	r1, [pc, #120]	; (7020 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x140>)
    6fa8:	4640      	mov	r0, r8
    6faa:	f7fc fe63 	bl	3c74 <SerialWrapper::write(unsigned char const*, unsigned int)>
      tasks.yield(50);
    6fae:	2132      	movs	r1, #50	; 0x32
    6fb0:	481c      	ldr	r0, [pc, #112]	; (7024 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x144>)
    6fb2:	f7ff fa99 	bl	64e8 <Tasks::yield(unsigned long)>
      SerialPort.begin(baud[rate]);
    6fb6:	4b1c      	ldr	r3, [pc, #112]	; (7028 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x148>)
    6fb8:	4640      	mov	r0, r8
    6fba:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    6fbe:	f7fc fee1 	bl	3d84 <SerialWrapper::begin(long)>
    return commandError;
    6fc2:	7820      	ldrb	r0, [r4, #0]
      *numericReply = false;
    6fc4:	7037      	strb	r7, [r6, #0]
    6fc6:	e7ba      	b.n	6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
      SerialPort.print("1");
    6fc8:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    6fcc:	2201      	movs	r2, #1
    6fce:	4914      	ldr	r1, [pc, #80]	; (7020 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x140>)
    6fd0:	4628      	mov	r0, r5
    6fd2:	f7fc fe4f 	bl	3c74 <SerialWrapper::write(unsigned char const*, unsigned int)>
      tasks.yield(50);
    6fd6:	2132      	movs	r1, #50	; 0x32
    6fd8:	4812      	ldr	r0, [pc, #72]	; (7024 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x144>)
    6fda:	f7ff fa85 	bl	64e8 <Tasks::yield(unsigned long)>
      SerialPort.begin(230400);
    6fde:	4628      	mov	r0, r5
    6fe0:	f44f 3161 	mov.w	r1, #230400	; 0x38400
    6fe4:	f7fc fece 	bl	3d84 <SerialWrapper::begin(long)>
    return commandError;
    6fe8:	7820      	ldrb	r0, [r4, #0]
      *numericReply = false;
    6fea:	7037      	strb	r7, [r6, #0]
    6fec:	e7a7      	b.n	6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
      SerialPort.print("1");
    6fee:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    6ff2:	2201      	movs	r2, #1
    6ff4:	490a      	ldr	r1, [pc, #40]	; (7020 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x140>)
    6ff6:	4628      	mov	r0, r5
    6ff8:	f7fc fe3c 	bl	3c74 <SerialWrapper::write(unsigned char const*, unsigned int)>
      tasks.yield(50);
    6ffc:	2132      	movs	r1, #50	; 0x32
    6ffe:	4809      	ldr	r0, [pc, #36]	; (7024 <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x144>)
    7000:	f7ff fa72 	bl	64e8 <Tasks::yield(unsigned long)>
      SerialPort.begin(460800);
    7004:	4628      	mov	r0, r5
    7006:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
    700a:	f7fc febb 	bl	3d84 <SerialWrapper::begin(long)>
    return commandError;
    700e:	7820      	ldrb	r0, [r4, #0]
      *numericReply = false;
    7010:	7037      	strb	r7, [r6, #0]
    7012:	e794      	b.n	6f3e <CommandProcessor::command(char*, char*, char*, bool*, bool*)+0x5e>
    7014:	20006464 	.word	0x20006464
    7018:	200020fc 	.word	0x200020fc
    701c:	200020f0 	.word	0x200020f0
    7020:	200020f8 	.word	0x200020f8
    7024:	2000634c 	.word	0x2000634c
    7028:	200026d0 	.word	0x200026d0

0000702c <CommandProcessor::poll()>:
  if (!serialReady) { delay(200); SerialPort.begin(serialBaud); serialReady = true; }
    702c:	7883      	ldrb	r3, [r0, #2]
void CommandProcessor::poll() {
    702e:	b5f0      	push	{r4, r5, r6, r7, lr}
    7030:	4607      	mov	r7, r0
    7032:	b09b      	sub	sp, #108	; 0x6c
  if (!serialReady) { delay(200); SerialPort.begin(serialBaud); serialReady = true; }
    7034:	f100 05cc 	add.w	r5, r0, #204	; 0xcc
    7038:	b31b      	cbz	r3, 7082 <CommandProcessor::poll()+0x56>
  unsigned long tout = micros() + 500;
    703a:	f011 f8f9 	bl	18230 <micros>
  while (SerialPort.available()) { char c = SerialPort.read(); buffer.add(c); if (buffer.ready() || (long)(micros() - tout) > 0) break; }
    703e:	f107 040c 	add.w	r4, r7, #12
  unsigned long tout = micros() + 500;
    7042:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
  while (SerialPort.available()) { char c = SerialPort.read(); buffer.add(c); if (buffer.ready() || (long)(micros() - tout) > 0) break; }
    7046:	e00f      	b.n	7068 <CommandProcessor::poll()+0x3c>
    7048:	f7fc ff7e 	bl	3f48 <SerialWrapper::read()>
    704c:	4601      	mov	r1, r0
    704e:	4620      	mov	r0, r4
    7050:	b2c9      	uxtb	r1, r1
    7052:	f7fc fcf7 	bl	3a44 <Buffer::add(char)>
    7056:	4620      	mov	r0, r4
    7058:	f7fc fde0 	bl	3c1c <Buffer::ready()>
    705c:	b958      	cbnz	r0, 7076 <CommandProcessor::poll()+0x4a>
    705e:	f011 f8e7 	bl	18230 <micros>
    7062:	1b80      	subs	r0, r0, r6
    7064:	2800      	cmp	r0, #0
    7066:	dc06      	bgt.n	7076 <CommandProcessor::poll()+0x4a>
    7068:	4628      	mov	r0, r5
    706a:	f7fc ff37 	bl	3edc <SerialWrapper::available()>
    706e:	4603      	mov	r3, r0
    7070:	4628      	mov	r0, r5
    7072:	2b00      	cmp	r3, #0
    7074:	d1e8      	bne.n	7048 <CommandProcessor::poll()+0x1c>
  if (buffer.ready()) {
    7076:	4620      	mov	r0, r4
    7078:	f7fc fdd0 	bl	3c1c <Buffer::ready()>
    707c:	b958      	cbnz	r0, 7096 <CommandProcessor::poll()+0x6a>
}
    707e:	b01b      	add	sp, #108	; 0x6c
    7080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!serialReady) { delay(200); SerialPort.begin(serialBaud); serialReady = true; }
    7082:	20c8      	movs	r0, #200	; 0xc8
    7084:	f011 f880 	bl	18188 <delay>
    7088:	6879      	ldr	r1, [r7, #4]
    708a:	4628      	mov	r0, r5
    708c:	f7fc fe7a 	bl	3d84 <SerialWrapper::begin(long)>
    7090:	2301      	movs	r3, #1
    7092:	70bb      	strb	r3, [r7, #2]
    7094:	e7d1      	b.n	703a <CommandProcessor::poll()+0xe>
    char reply[80] = "";
    7096:	2600      	movs	r6, #0
    7098:	224c      	movs	r2, #76	; 0x4c
    709a:	a807      	add	r0, sp, #28
    709c:	4631      	mov	r1, r6
    709e:	9606      	str	r6, [sp, #24]
    70a0:	f018 f8a6 	bl	1f1f0 <memset>
    bool numericReply = true;
    70a4:	2301      	movs	r3, #1
    commandError = command(reply, buffer.getCmd(), buffer.getParameter(), &supressFrame, &numericReply);
    70a6:	4620      	mov	r0, r4
    bool supressFrame = false;
    70a8:	f88d 6013 	strb.w	r6, [sp, #19]
    bool numericReply = true;
    70ac:	f88d 3012 	strb.w	r3, [sp, #18]
    commandError = command(reply, buffer.getCmd(), buffer.getParameter(), &supressFrame, &numericReply);
    70b0:	f7fc fd7e 	bl	3bb0 <Buffer::getCmd()>
    70b4:	9003      	str	r0, [sp, #12]
    70b6:	4620      	mov	r0, r4
    70b8:	f7fc fd8a 	bl	3bd0 <Buffer::getParameter()>
    70bc:	f10d 0112 	add.w	r1, sp, #18
    70c0:	4603      	mov	r3, r0
    70c2:	9a03      	ldr	r2, [sp, #12]
    70c4:	9101      	str	r1, [sp, #4]
    70c6:	f10d 0113 	add.w	r1, sp, #19
    70ca:	4638      	mov	r0, r7
    70cc:	9100      	str	r1, [sp, #0]
    70ce:	a906      	add	r1, sp, #24
    70d0:	f7ff ff06 	bl	6ee0 <CommandProcessor::command(char*, char*, char*, bool*, bool*)>
    if (numericReply) {
    70d4:	f89d 3012 	ldrb.w	r3, [sp, #18]
    commandError = command(reply, buffer.getCmd(), buffer.getParameter(), &supressFrame, &numericReply);
    70d8:	7038      	strb	r0, [r7, #0]
    if (numericReply) {
    70da:	b14b      	cbz	r3, 70f0 <CommandProcessor::poll()+0xc4>
      if (commandError != CE_NONE && commandError != CE_1) strcpy(reply,"0"); else strcpy(reply,"1");
    70dc:	2800      	cmp	r0, #0
    70de:	d052      	beq.n	7186 <CommandProcessor::poll()+0x15a>
    70e0:	2819      	cmp	r0, #25
    70e2:	d050      	beq.n	7186 <CommandProcessor::poll()+0x15a>
    70e4:	2330      	movs	r3, #48	; 0x30
    70e6:	f8ad 3018 	strh.w	r3, [sp, #24]
      supressFrame = true;
    70ea:	2301      	movs	r3, #1
    70ec:	f88d 3013 	strb.w	r3, [sp, #19]
    if (strlen(reply) > 0 || buffer.checksum) {
    70f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    70f4:	b1b3      	cbz	r3, 7124 <CommandProcessor::poll()+0xf8>
      if (buffer.checksum) {
    70f6:	7b3b      	ldrb	r3, [r7, #12]
    70f8:	b9bb      	cbnz	r3, 712a <CommandProcessor::poll()+0xfe>
      if (!supressFrame) strcat(reply,"#");
    70fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    70fe:	2b00      	cmp	r3, #0
    7100:	d039      	beq.n	7176 <CommandProcessor::poll()+0x14a>
    7102:	a806      	add	r0, sp, #24
    7104:	f018 fe3c 	bl	1fd80 <strlen>
    7108:	a906      	add	r1, sp, #24
    710a:	4602      	mov	r2, r0
    710c:	4628      	mov	r0, r5
    710e:	f7fc fdb1 	bl	3c74 <SerialWrapper::write(unsigned char const*, unsigned int)>
    if (commandError != CE_NULL) {
    7112:	7838      	ldrb	r0, [r7, #0]
    7114:	2818      	cmp	r0, #24
      lastCommandError = commandError;
    7116:	bf18      	it	ne
    7118:	7078      	strbne	r0, [r7, #1]
    buffer.flush();
    711a:	4620      	mov	r0, r4
    711c:	f7fc fda0 	bl	3c60 <Buffer::flush()>
}
    7120:	b01b      	add	sp, #108	; 0x6c
    7122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (strlen(reply) > 0 || buffer.checksum) {
    7124:	7b3b      	ldrb	r3, [r7, #12]
    7126:	2b00      	cmp	r3, #0
    7128:	d0f4      	beq.n	7114 <CommandProcessor::poll()+0xe8>
  char HEXS[3] = "";
    712a:	4b19      	ldr	r3, [pc, #100]	; (7190 <CommandProcessor::poll()+0x164>)
    712c:	2600      	movs	r6, #0
  uint8_t cks = 0; for (unsigned int cksCount0 = 0; cksCount0 < strlen(s); cksCount0++) { cks += s[cksCount0]; }
    712e:	a806      	add	r0, sp, #24
  char HEXS[3] = "";
    7130:	781b      	ldrb	r3, [r3, #0]
    7132:	f8ad 6015 	strh.w	r6, [sp, #21]
    7136:	f88d 3014 	strb.w	r3, [sp, #20]
  uint8_t cks = 0; for (unsigned int cksCount0 = 0; cksCount0 < strlen(s); cksCount0++) { cks += s[cksCount0]; }
    713a:	f018 fe21 	bl	1fd80 <strlen>
    713e:	ab06      	add	r3, sp, #24
    7140:	4632      	mov	r2, r6
    7142:	4418      	add	r0, r3
    7144:	e003      	b.n	714e <CommandProcessor::poll()+0x122>
    7146:	f813 1b01 	ldrb.w	r1, [r3], #1
    714a:	440a      	add	r2, r1
    714c:	b2d2      	uxtb	r2, r2
    714e:	4298      	cmp	r0, r3
    7150:	d1f9      	bne.n	7146 <CommandProcessor::poll()+0x11a>
  sprintf(HEXS, "%02X", cks);
    7152:	4910      	ldr	r1, [pc, #64]	; (7194 <CommandProcessor::poll()+0x168>)
    7154:	a805      	add	r0, sp, #20
    7156:	f017 fecb 	bl	1eef0 <sprintf>
  strcat(s, HEXS);
    715a:	a905      	add	r1, sp, #20
    715c:	a806      	add	r0, sp, #24
    715e:	f018 f899 	bl	1f294 <strcat>
        strcat(reply, buffer.getSeq());
    7162:	4620      	mov	r0, r4
    7164:	f7fc fd52 	bl	3c0c <Buffer::getSeq()>
    7168:	4601      	mov	r1, r0
    716a:	a806      	add	r0, sp, #24
    716c:	f018 f892 	bl	1f294 <strcat>
        supressFrame = false;
    7170:	2300      	movs	r3, #0
    7172:	f88d 3013 	strb.w	r3, [sp, #19]
      if (!supressFrame) strcat(reply,"#");
    7176:	a806      	add	r0, sp, #24
    7178:	f018 fe02 	bl	1fd80 <strlen>
    717c:	4b06      	ldr	r3, [pc, #24]	; (7198 <CommandProcessor::poll()+0x16c>)
    717e:	aa06      	add	r2, sp, #24
    7180:	881b      	ldrh	r3, [r3, #0]
    7182:	5213      	strh	r3, [r2, r0]
    7184:	e7bd      	b.n	7102 <CommandProcessor::poll()+0xd6>
      if (commandError != CE_NONE && commandError != CE_1) strcpy(reply,"0"); else strcpy(reply,"1");
    7186:	2331      	movs	r3, #49	; 0x31
    7188:	f8ad 3018 	strh.w	r3, [sp, #24]
    718c:	e7ad      	b.n	70ea <CommandProcessor::poll()+0xbe>
    718e:	bf00      	nop
    7190:	20001e34 	.word	0x20001e34
    7194:	20002270 	.word	0x20002270
    7198:	200020ec 	.word	0x200020ec

0000719c <processCmdsA()>:
  void processCmdsA() { processCommandsA.poll(); }
    719c:	4801      	ldr	r0, [pc, #4]	; (71a4 <processCmdsA()+0x8>)
    719e:	f7ff bf45 	b.w	702c <CommandProcessor::poll()>
    71a2:	bf00      	nop
    71a4:	20005ebc 	.word	0x20005ebc

000071a8 <processCmdsB()>:
  void processCmdsB() { processCommandsB.poll(); }
    71a8:	4801      	ldr	r0, [pc, #4]	; (71b0 <processCmdsB()+0x8>)
    71aa:	f7ff bf3f 	b.w	702c <CommandProcessor::poll()>
    71ae:	bf00      	nop
    71b0:	20005f98 	.word	0x20005f98

000071b4 <processCmdsC()>:
  void processCmdsC() { processCommandsC.poll(); }
    71b4:	4801      	ldr	r0, [pc, #4]	; (71bc <processCmdsC()+0x8>)
    71b6:	f7ff bf39 	b.w	702c <CommandProcessor::poll()>
    71ba:	bf00      	nop
    71bc:	20006074 	.word	0x20006074

000071c0 <processCmdsLocal()>:
  void processCmdsLocal() { processCommandsLocal.poll(); }
    71c0:	4801      	ldr	r0, [pc, #4]	; (71c8 <processCmdsLocal()+0x8>)
    71c2:	f7ff bf33 	b.w	702c <CommandProcessor::poll()>
    71c6:	bf00      	nop
    71c8:	20006150 	.word	0x20006150

000071cc <Temperature::init()>:

#include "../weather/Weather.h"

bool Temperature::init() {
  return false;
}
    71cc:	2000      	movs	r0, #0
    71ce:	4770      	bx	lr

000071d0 <Weather::init()>:
    if (success) {
      VF("MSG: Weather, start weather monitor task (rate 5000ms priority 7)... ");
      if (tasks.add(1000, 0, true, 7, weatherPollWrapper, "WeaPoll")) { VLF("success"); } else { VLF("FAILED!"); }
    }
  #else
    success = true;
    71d0:	2301      	movs	r3, #1
    71d2:	7043      	strb	r3, [r0, #1]
  #endif
  return success;
}
    71d4:	4618      	mov	r0, r3
    71d6:	4770      	bx	lr

000071d8 <Weather::getTemperature()>:
}

// get temperature in deg. C
float Weather::getTemperature() {
  return averageTemperature;
}
    71d8:	ed90 0a02 	vldr	s0, [r0, #8]
    71dc:	4770      	bx	lr
    71de:	bf00      	nop

000071e0 <Weather::setTemperature(float)>:

// set temperature in deg. C
bool Weather::setTemperature(float t) {
    71e0:	4603      	mov	r3, r0
  if (weatherSensor == WS_NONE) { 
    71e2:	7800      	ldrb	r0, [r0, #0]
    71e4:	b998      	cbnz	r0, 720e <Weather::setTemperature(float)+0x2e>
    if (t >= -60.0F && t <= 60.0F) { temperature = t; averageTemperature = t; } else return false;
    71e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 7214 <Weather::setTemperature(float)+0x34>
    71ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
    71ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71f2:	db0d      	blt.n	7210 <Weather::setTemperature(float)+0x30>
    71f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 7218 <Weather::setTemperature(float)+0x38>
    71f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
    71fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7200:	d806      	bhi.n	7210 <Weather::setTemperature(float)+0x30>
  }
  return true;
    7202:	2001      	movs	r0, #1
    if (t >= -60.0F && t <= 60.0F) { temperature = t; averageTemperature = t; } else return false;
    7204:	ed83 0a01 	vstr	s0, [r3, #4]
    7208:	ed83 0a02 	vstr	s0, [r3, #8]
    720c:	4770      	bx	lr
  return true;
    720e:	2001      	movs	r0, #1
}
    7210:	4770      	bx	lr
    7212:	bf00      	nop
    7214:	c2700000 	.word	0xc2700000
    7218:	42700000 	.word	0x42700000

0000721c <Weather::getPressure()>:

// get barometric pressure in hPa/mb
float Weather::getPressure() {
  return pressure;
}
    721c:	ed90 0a03 	vldr	s0, [r0, #12]
    7220:	4770      	bx	lr
    7222:	bf00      	nop

00007224 <Weather::setPressure(float)>:

// set barometric pressure in hPa/mb
bool Weather::setPressure(float p) {
    7224:	4602      	mov	r2, r0
  if (weatherSensor == WS_NONE) { 
    7226:	7800      	ldrb	r0, [r0, #0]
    7228:	b988      	cbnz	r0, 724e <Weather::setPressure(float)+0x2a>
    if (p >= 100.0F && p <= 1100.0F) pressure = p; else return false;
    722a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 7254 <Weather::setPressure(float)+0x30>
    722e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7236:	db0b      	blt.n	7250 <Weather::setPressure(float)+0x2c>
    7238:	eddf 7a07 	vldr	s15, [pc, #28]	; 7258 <Weather::setPressure(float)+0x34>
    723c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7244:	d804      	bhi.n	7250 <Weather::setPressure(float)+0x2c>
  }
  return true;
    7246:	2001      	movs	r0, #1
    if (p >= 100.0F && p <= 1100.0F) pressure = p; else return false;
    7248:	ed82 0a03 	vstr	s0, [r2, #12]
    724c:	4770      	bx	lr
  return true;
    724e:	2001      	movs	r0, #1
}
    7250:	4770      	bx	lr
    7252:	bf00      	nop
    7254:	42c80000 	.word	0x42c80000
    7258:	44898000 	.word	0x44898000

0000725c <Weather::getHumidity()>:

// get relative humidity in %
float Weather::getHumidity() {
  return humidity;
}
    725c:	ed90 0a04 	vldr	s0, [r0, #16]
    7260:	4770      	bx	lr
    7262:	bf00      	nop

00007264 <Weather::setHumidity(float)>:

// set relative humidity in %
bool Weather::setHumidity(float h) {
  if (weatherSensor == WS_NONE || weatherSensor == WS_BMP280) { 
    7264:	7802      	ldrb	r2, [r0, #0]
bool Weather::setHumidity(float h) {
    7266:	4603      	mov	r3, r0
  if (weatherSensor == WS_NONE || weatherSensor == WS_BMP280) { 
    7268:	2a01      	cmp	r2, #1
    726a:	d901      	bls.n	7270 <Weather::setHumidity(float)+0xc>
    if (h >= 0.0F && h <= 100.0F) humidity = h; else return false;
  }
  return true;
    726c:	2001      	movs	r0, #1
    726e:	4770      	bx	lr
    if (h >= 0.0F && h <= 100.0F) humidity = h; else return false;
    7270:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    7274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7278:	db0a      	blt.n	7290 <Weather::setHumidity(float)+0x2c>
    727a:	eddf 7a06 	vldr	s15, [pc, #24]	; 7294 <Weather::setHumidity(float)+0x30>
    727e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7286:	d803      	bhi.n	7290 <Weather::setHumidity(float)+0x2c>
  return true;
    7288:	2001      	movs	r0, #1
    if (h >= 0.0F && h <= 100.0F) humidity = h; else return false;
    728a:	ed83 0a04 	vstr	s0, [r3, #16]
    728e:	4770      	bx	lr
    7290:	2000      	movs	r0, #0
}
    7292:	4770      	bx	lr
    7294:	42c80000 	.word	0x42c80000

00007298 <Weather::getDewPoint()>:

// get dew point in deg. C
// accurate to +/- 1 deg. C for RH above 50%
float Weather::getDewPoint() {
  return averageTemperature - ((100.0F - humidity)/5.0F);
    7298:	ed90 7a04 	vldr	s14, [r0, #16]
    729c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
    72a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 72b8 <Weather::getDewPoint()+0x20>
    72a4:	ed90 0a02 	vldr	s0, [r0, #8]
    72a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    72ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  // a more accurate formula?
  // return 243.04*(log(humidity/100.0) + ((17.625*averageTemperature)/(243.04 + averageTemperature)))/(17.625 - log(humidity/100.0) - ((17.625*averageTemperature)/(243.04 + averageTemperature)));
}
    72b0:	ee30 0a47 	vsub.f32	s0, s0, s14
    72b4:	4770      	bx	lr
    72b6:	bf00      	nop
    72b8:	42c80000 	.word	0x42c80000

000072bc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)>:
// possible reset function for this MCU
#ifdef HAL_RESET_FUNC
  HAL_RESET_FUNC;
#endif

bool Telescope::command(char reply[], char command[], char parameter[], bool *supressFrame, bool *numericReply, CommandError *commandError) {
    72bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72c0:	b086      	sub	sp, #24
    72c2:	4607      	mov	r7, r0
  #if PLUGIN8 != OFF && PLUGIN8_COMMAND_PROCESSING == ON
    if (PLUGIN8.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
  #endif

  #ifdef MOUNT_PRESENT
    if (mount.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    72c4:	48b9      	ldr	r0, [pc, #740]	; (75ac <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>)
bool Telescope::command(char reply[], char command[], char parameter[], bool *supressFrame, bool *numericReply, CommandError *commandError) {
    72c6:	460d      	mov	r5, r1
    72c8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    72cc:	4616      	mov	r6, r2
    72ce:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    72d2:	461c      	mov	r4, r3
    72d4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if (mount.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    72d8:	f8cd a000 	str.w	sl, [sp]
    72dc:	f8cd 8004 	str.w	r8, [sp, #4]
    72e0:	f8cd 9008 	str.w	r9, [sp, #8]
    72e4:	f000 fc1c 	bl	7b20 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)>
    72e8:	b128      	cbz	r0, 72f6 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a>
        } else *commandError = CE_PARAM_RANGE;
      }
    } else return false;
  } else return false;

  return true;
    72ea:	f04f 0a01 	mov.w	sl, #1
}
    72ee:	4650      	mov	r0, sl
    72f0:	b006      	add	sp, #24
    72f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (guide.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    72f6:	4623      	mov	r3, r4
    72f8:	4632      	mov	r2, r6
    72fa:	4629      	mov	r1, r5
    72fc:	48ac      	ldr	r0, [pc, #688]	; (75b0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f4>)
    72fe:	f8cd a000 	str.w	sl, [sp]
    7302:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7306:	f006 fedb 	bl	e0c0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)>
    730a:	2800      	cmp	r0, #0
    730c:	d1ed      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (gpio.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    730e:	4623      	mov	r3, r4
    7310:	4632      	mov	r2, r6
    7312:	4629      	mov	r1, r5
    7314:	48a7      	ldr	r0, [pc, #668]	; (75b4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f8>)
    7316:	f8cd a000 	str.w	sl, [sp]
    731a:	e9cd 8901 	strd	r8, r9, [sp, #4]
    731e:	f7fd fb79 	bl	4a14 <Gpio::command(char*, char*, char*, bool*, bool*, CommandError*)>
    7322:	2800      	cmp	r0, #0
    7324:	d1e1      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (mountStatus.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    7326:	4623      	mov	r3, r4
    7328:	4632      	mov	r2, r6
    732a:	4629      	mov	r1, r5
    732c:	48a2      	ldr	r0, [pc, #648]	; (75b8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2fc>)
    732e:	f8cd a000 	str.w	sl, [sp]
    7332:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7336:	f00c fe8b 	bl	14050 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)>
    733a:	2800      	cmp	r0, #0
    733c:	d1d5      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (goTo.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    733e:	4623      	mov	r3, r4
    7340:	4632      	mov	r2, r6
    7342:	4629      	mov	r1, r5
    7344:	489d      	ldr	r0, [pc, #628]	; (75bc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>)
    7346:	f8cd a000 	str.w	sl, [sp]
    734a:	e9cd 8901 	strd	r8, r9, [sp, #4]
    734e:	f004 fc07 	bl	bb60 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)>
    7352:	2800      	cmp	r0, #0
    7354:	d1c9      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (park.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    7356:	4623      	mov	r3, r4
    7358:	4632      	mov	r2, r6
    735a:	4629      	mov	r1, r5
    735c:	4898      	ldr	r0, [pc, #608]	; (75c0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x304>)
    735e:	f8cd a000 	str.w	sl, [sp]
    7362:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7366:	f00a fa3f 	bl	117e8 <Park::command(char*, char*, char*, bool*, bool*, CommandError*)>
    736a:	2800      	cmp	r0, #0
    736c:	d1bd      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (library.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    736e:	4623      	mov	r3, r4
    7370:	4632      	mov	r2, r6
    7372:	4629      	mov	r1, r5
    7374:	4893      	ldr	r0, [pc, #588]	; (75c4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x308>)
    7376:	f8cd a000 	str.w	sl, [sp]
    737a:	e9cd 8901 	strd	r8, r9, [sp, #4]
    737e:	f008 fbb7 	bl	faf0 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)>
    7382:	2800      	cmp	r0, #0
    7384:	d1b1      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (site.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    7386:	4623      	mov	r3, r4
    7388:	4632      	mov	r2, r6
    738a:	4629      	mov	r1, r5
    738c:	488e      	ldr	r0, [pc, #568]	; (75c8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>)
    738e:	f8cd a000 	str.w	sl, [sp]
    7392:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7396:	f00b fbe7 	bl	12b68 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)>
    739a:	2800      	cmp	r0, #0
    739c:	d1a5      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (limits.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    739e:	4623      	mov	r3, r4
    73a0:	4632      	mov	r2, r6
    73a2:	4629      	mov	r1, r5
    73a4:	4889      	ldr	r0, [pc, #548]	; (75cc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x310>)
    73a6:	f8cd a000 	str.w	sl, [sp]
    73aa:	e9cd 8901 	strd	r8, r9, [sp, #4]
    73ae:	f009 f88f 	bl	104d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)>
    73b2:	2800      	cmp	r0, #0
    73b4:	d199      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (home.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    73b6:	4623      	mov	r3, r4
    73b8:	4632      	mov	r2, r6
    73ba:	4629      	mov	r1, r5
    73bc:	4884      	ldr	r0, [pc, #528]	; (75d0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
    73be:	f8cd a000 	str.w	sl, [sp]
    73c2:	e9cd 8901 	strd	r8, r9, [sp, #4]
    73c6:	f007 ff4f 	bl	f268 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)>
    73ca:	2800      	cmp	r0, #0
    73cc:	d18d      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (pec.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    73ce:	4623      	mov	r3, r4
    73d0:	4632      	mov	r2, r6
    73d2:	4629      	mov	r1, r5
    73d4:	487f      	ldr	r0, [pc, #508]	; (75d4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x318>)
    73d6:	f8cd a000 	str.w	sl, [sp]
    73da:	e9cd 8901 	strd	r8, r9, [sp, #4]
    73de:	f00a fd4f 	bl	11e80 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)>
    73e2:	2800      	cmp	r0, #0
    73e4:	d181      	bne.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (axis1.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    73e6:	4623      	mov	r3, r4
    73e8:	4632      	mov	r2, r6
    73ea:	4629      	mov	r1, r5
    73ec:	487a      	ldr	r0, [pc, #488]	; (75d8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x31c>)
    73ee:	f8cd a000 	str.w	sl, [sp]
    73f2:	e9cd 8901 	strd	r8, r9, [sp, #4]
    73f6:	f7f9 f87f 	bl	4f8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)>
    73fa:	2800      	cmp	r0, #0
    73fc:	f47f af75 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    if (axis2.command(reply, command, parameter, supressFrame, numericReply, commandError)) return true;
    7400:	f8cd a000 	str.w	sl, [sp]
    7404:	4623      	mov	r3, r4
    7406:	4632      	mov	r2, r6
    7408:	4629      	mov	r1, r5
    740a:	4874      	ldr	r0, [pc, #464]	; (75dc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>)
    740c:	e9cd 8901 	strd	r8, r9, [sp, #4]
    7410:	f7f9 f872 	bl	4f8 <Axis::command(char*, char*, char*, bool*, bool*, CommandError*)>
    7414:	4682      	mov	sl, r0
    7416:	2800      	cmp	r0, #0
    7418:	f47f af67 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
  if (command[0] == 'B' && (command[1] == '+' || command[1] == '-') && parameter[0] == 0)  {
    741c:	7833      	ldrb	r3, [r6, #0]
    741e:	2b42      	cmp	r3, #66	; 0x42
    7420:	d026      	beq.n	7470 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b4>
  if (command[0] == 'E') {
    7422:	2b45      	cmp	r3, #69	; 0x45
    7424:	f000 811d 	beq.w	7662 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a6>
  if (command[0] == 'G') {
    7428:	2b47      	cmp	r3, #71	; 0x47
    742a:	f040 80f5 	bne.w	7618 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x35c>
    if (command[1] == 'V' && parameter[1] == 0) {
    742e:	7873      	ldrb	r3, [r6, #1]
    7430:	2b56      	cmp	r3, #86	; 0x56
    7432:	d043      	beq.n	74bc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x200>
    if (command[1] == 'X' && parameter[2] == 0) {
    7434:	2b58      	cmp	r3, #88	; 0x58
    7436:	f47f af5a 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    743a:	78a3      	ldrb	r3, [r4, #2]
    743c:	2b00      	cmp	r3, #0
    743e:	f47f af56 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      if (parameter[0] == '9') {
    7442:	7823      	ldrb	r3, [r4, #0]
    7444:	2b39      	cmp	r3, #57	; 0x39
    7446:	d023      	beq.n	7490 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1d4>
      if (parameter[0] == 'A') {
    7448:	2b41      	cmp	r3, #65	; 0x41
    744a:	f47f af50 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
        if (parameter[1] == '0') {
    744e:	7863      	ldrb	r3, [r4, #1]
    7450:	2b30      	cmp	r3, #48	; 0x30
    7452:	f47f af4c 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
          uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
    7456:	f44f 7199 	mov.w	r1, #306	; 0x132
    745a:	4861      	ldr	r0, [pc, #388]	; (75e0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x324>)
    745c:	f7fd fd9c 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
          if (!(axesToRevert & 1)) *commandError = CE_0;
    7460:	07c3      	lsls	r3, r0, #31
    7462:	f53f af42 	bmi.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    7466:	2301      	movs	r3, #1
  return true;
    7468:	469a      	mov	sl, r3
          if (!(axesToRevert & 1)) *commandError = CE_0;
    746a:	f889 3000 	strb.w	r3, [r9]
    746e:	e73e      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
  if (command[0] == 'B' && (command[1] == '+' || command[1] == '-') && parameter[0] == 0)  {
    7470:	7873      	ldrb	r3, [r6, #1]
    7472:	2b2d      	cmp	r3, #45	; 0x2d
    7474:	bf18      	it	ne
    7476:	2b2b      	cmpne	r3, #43	; 0x2b
    7478:	f47f af39 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    747c:	7823      	ldrb	r3, [r4, #0]
    747e:	2b00      	cmp	r3, #0
    7480:	f47f af35 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    *numericReply = false;
    7484:	2300      	movs	r3, #0
  return true;
    7486:	f04f 0a01 	mov.w	sl, #1
    *numericReply = false;
    748a:	f888 3000 	strb.w	r3, [r8]
    748e:	e72e      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
        if (parameter[1] == 'A') {
    7490:	7863      	ldrb	r3, [r4, #1]
    7492:	2b41      	cmp	r3, #65	; 0x41
    7494:	f000 80ba 	beq.w	760c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x350>
        if (parameter[1] == 'B') {
    7498:	3b42      	subs	r3, #66	; 0x42
    749a:	2b04      	cmp	r3, #4
    749c:	f63f af27 	bhi.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    74a0:	a201      	add	r2, pc, #4	; (adr r2, 74a8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ec>)
    74a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    74a6:	bf00      	nop
    74a8:	00007601 	.word	0x00007601
    74ac:	000075a1 	.word	0x000075a1
    74b0:	000072ef 	.word	0x000072ef
    74b4:	00007583 	.word	0x00007583
    74b8:	000074e7 	.word	0x000074e7
    if (command[1] == 'V' && parameter[1] == 0) {
    74bc:	7863      	ldrb	r3, [r4, #1]
    74be:	2b00      	cmp	r3, #0
    74c0:	f47f af15 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      if (parameter[0] == 'D') strcpy(reply, firmware.date); else
    74c4:	7823      	ldrb	r3, [r4, #0]
    74c6:	2b44      	cmp	r3, #68	; 0x44
    74c8:	d055      	beq.n	7576 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ba>
      if (parameter[0] == 'M') sprintf(reply, "%s %i.%02i%s", firmware.name, firmware.version.major, firmware.version.minor, firmware.version.patch); else
    74ca:	3b43      	subs	r3, #67	; 0x43
    74cc:	2b11      	cmp	r3, #17
    74ce:	d84e      	bhi.n	756e <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2b2>
    74d0:	e8df f003 	tbb	[pc, r3]
    74d4:	4d4d4d47 	.word	0x4d4d4d47
    74d8:	4d4d4d4d 	.word	0x4d4d4d4d
    74dc:	303a4d4d 	.word	0x303a4d4d
    74e0:	4d4d2a4d 	.word	0x4d4d2a4d
    74e4:	1d4d      	.short	0x1d4d
          if (!isnan(telescope.mcuTemperature)) {
    74e6:	4b3f      	ldr	r3, [pc, #252]	; (75e4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x328>)
    74e8:	ed93 0a01 	vldr	s0, [r3, #4]
    74ec:	eeb4 0a40 	vcmp.f32	s0, s0
    74f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74f4:	d611      	bvs.n	751a <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x25e>
            sprintF(reply, "%1.0f", telescope.mcuTemperature);
    74f6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    74fa:	493b      	ldr	r1, [pc, #236]	; (75e8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32c>)
    74fc:	4628      	mov	r0, r5
  return true;
    74fe:	f04f 0a01 	mov.w	sl, #1
            sprintF(reply, "%1.0f", telescope.mcuTemperature);
    7502:	f7fc fd99 	bl	4038 <sprintF(char*, char const*, double)>
            *numericReply = false;
    7506:	2300      	movs	r3, #0
    7508:	f888 3000 	strb.w	r3, [r8]
    750c:	e6ef      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      if (parameter[0] == 'T') strcpy(reply, firmware.time); else
    750e:	f107 0129 	add.w	r1, r7, #41	; 0x29
    7512:	4628      	mov	r0, r5
    7514:	f018 fba2 	bl	1fc5c <strcpy>
    7518:	e7b4      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
            *numericReply = true;
    751a:	2301      	movs	r3, #1
    751c:	f888 3000 	strb.w	r3, [r8]
  return true;
    7520:	469a      	mov	sl, r3
            *commandError = CE_0;
    7522:	f889 3000 	strb.w	r3, [r9]
    7526:	e6e2      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      if (parameter[0] == 'P') strcpy(reply, firmware.name); else
    7528:	f107 0108 	add.w	r1, r7, #8
    752c:	4628      	mov	r0, r5
    752e:	f018 fb95 	bl	1fc5c <strcpy>
    7532:	e7a7      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
      if (parameter[0] == 'N') sprintf(reply, "%i.%02i%s", firmware.version.major, firmware.version.minor, firmware.version.patch); else
    7534:	f107 0112 	add.w	r1, r7, #18
    7538:	7c7b      	ldrb	r3, [r7, #17]
    753a:	7c3a      	ldrb	r2, [r7, #16]
    753c:	4628      	mov	r0, r5
    753e:	9100      	str	r1, [sp, #0]
    7540:	492a      	ldr	r1, [pc, #168]	; (75ec <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
    7542:	f017 fcd5 	bl	1eef0 <sprintf>
    7546:	e79d      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
      if (parameter[0] == 'M') sprintf(reply, "%s %i.%02i%s", firmware.name, firmware.version.major, firmware.version.minor, firmware.version.patch); else
    7548:	f107 0212 	add.w	r2, r7, #18
    754c:	7c7b      	ldrb	r3, [r7, #17]
    754e:	4628      	mov	r0, r5
    7550:	4927      	ldr	r1, [pc, #156]	; (75f0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x334>)
    7552:	e9cd 3200 	strd	r3, r2, [sp]
    7556:	f107 0208 	add.w	r2, r7, #8
    755a:	7c3b      	ldrb	r3, [r7, #16]
    755c:	f017 fcc8 	bl	1eef0 <sprintf>
    7560:	e790      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
      if (parameter[0] == 'C') strncpy(reply, CONFIG_NAME, 40); else *commandError = CE_CMD_UNKNOWN;
    7562:	2228      	movs	r2, #40	; 0x28
    7564:	4923      	ldr	r1, [pc, #140]	; (75f4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x338>)
    7566:	4628      	mov	r0, r5
    7568:	f017 ff60 	bl	1f42c <strncpy>
    756c:	e78a      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
    756e:	2302      	movs	r3, #2
    7570:	f889 3000 	strb.w	r3, [r9]
    7574:	e786      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
      if (parameter[0] == 'D') strcpy(reply, firmware.date); else
    7576:	f107 0115 	add.w	r1, r7, #21
    757a:	4628      	mov	r0, r5
    757c:	f018 fb6e 	bl	1fc5c <strcpy>
    7580:	e780      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
          sprintF(reply, "%3.1f", weather.getDewPoint());
    7582:	481d      	ldr	r0, [pc, #116]	; (75f8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x33c>)
  return true;
    7584:	f04f 0a01 	mov.w	sl, #1
          sprintF(reply, "%3.1f", weather.getDewPoint());
    7588:	f7ff fe86 	bl	7298 <Weather::getDewPoint()>
          sprintF(reply, "%3.1f", weather.getPressure());
    758c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    7590:	491a      	ldr	r1, [pc, #104]	; (75fc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x340>)
    7592:	4628      	mov	r0, r5
    7594:	f7fc fd50 	bl	4038 <sprintF(char*, char const*, double)>
          *numericReply = false;
    7598:	2300      	movs	r3, #0
    759a:	f888 3000 	strb.w	r3, [r8]
    759e:	e6a6      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
          sprintF(reply, "%3.1f", weather.getHumidity());
    75a0:	4815      	ldr	r0, [pc, #84]	; (75f8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x33c>)
  return true;
    75a2:	f04f 0a01 	mov.w	sl, #1
          sprintF(reply, "%3.1f", weather.getHumidity());
    75a6:	f7ff fe59 	bl	725c <Weather::getHumidity()>
    75aa:	e7ef      	b.n	758c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2d0>
    75ac:	200054e0 	.word	0x200054e0
    75b0:	200043e8 	.word	0x200043e8
    75b4:	20005bf0 	.word	0x20005bf0
    75b8:	20005e4c 	.word	0x20005e4c
    75bc:	20005270 	.word	0x20005270
    75c0:	20005ea8 	.word	0x20005ea8
    75c4:	20005cd0 	.word	0x20005cd0
    75c8:	200055d0 	.word	0x200055d0
    75cc:	20005cf4 	.word	0x20005cf4
    75d0:	20005478 	.word	0x20005478
    75d4:	20005568 	.word	0x20005568
    75d8:	200050e8 	.word	0x200050e8
    75dc:	200051a8 	.word	0x200051a8
    75e0:	20005e50 	.word	0x20005e50
    75e4:	20006464 	.word	0x20006464
    75e8:	200023d0 	.word	0x200023d0
    75ec:	200023b4 	.word	0x200023b4
    75f0:	200023a4 	.word	0x200023a4
    75f4:	200023c0 	.word	0x200023c0
    75f8:	200048a4 	.word	0x200048a4
    75fc:	200023c8 	.word	0x200023c8
          sprintF(reply, "%3.1f", weather.getPressure());
    7600:	4878      	ldr	r0, [pc, #480]	; (77e4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x528>)
  return true;
    7602:	f04f 0a01 	mov.w	sl, #1
          sprintF(reply, "%3.1f", weather.getPressure());
    7606:	f7ff fe09 	bl	721c <Weather::getPressure()>
    760a:	e7bf      	b.n	758c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2d0>
          sprintF(reply, "%3.1f", weather.getTemperature());
    760c:	4875      	ldr	r0, [pc, #468]	; (77e4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x528>)
  return true;
    760e:	f04f 0a01 	mov.w	sl, #1
          sprintF(reply, "%3.1f", weather.getTemperature());
    7612:	f7ff fde1 	bl	71d8 <Weather::getTemperature()>
    7616:	e7b9      	b.n	758c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2d0>
  if (command[0] == 'S' && command[1] == 'X' && parameter[2] == ',') {
    7618:	2b53      	cmp	r3, #83	; 0x53
    761a:	f47f ae68 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    761e:	7873      	ldrb	r3, [r6, #1]
    7620:	2b58      	cmp	r3, #88	; 0x58
    7622:	f47f ae64 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    7626:	78a3      	ldrb	r3, [r4, #2]
    7628:	2b2c      	cmp	r3, #44	; 0x2c
    762a:	f47f ae60 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    if (parameter[0] == '9') {
    762e:	7823      	ldrb	r3, [r4, #0]
    7630:	2b39      	cmp	r3, #57	; 0x39
    7632:	f000 80ab 	beq.w	778c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4d0>
    if (parameter[0] == 'A') {
    7636:	2b41      	cmp	r3, #65	; 0x41
    7638:	f47f ae59 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      if (parameter[1] == 'C' && parameter[4] == 0) {
    763c:	7863      	ldrb	r3, [r4, #1]
    763e:	2b43      	cmp	r3, #67	; 0x43
    7640:	f47f ae53 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    7644:	7923      	ldrb	r3, [r4, #4]
    7646:	2b00      	cmp	r3, #0
    7648:	f47f ae4f 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
        if (parameter[3] == '0' || parameter[3] == '1') {
    764c:	78e3      	ldrb	r3, [r4, #3]
    764e:	3b30      	subs	r3, #48	; 0x30
    7650:	2b01      	cmp	r3, #1
    7652:	f240 8083 	bls.w	775c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4a0>
        } else *commandError = CE_PARAM_RANGE;
    7656:	2304      	movs	r3, #4
  return true;
    7658:	f04f 0a01 	mov.w	sl, #1
        } else *commandError = CE_PARAM_RANGE;
    765c:	f889 3000 	strb.w	r3, [r9]
    7660:	e645      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    if (command[1] == 'C') {
    7662:	7873      	ldrb	r3, [r6, #1]
    7664:	2b43      	cmp	r3, #67	; 0x43
    7666:	d02f      	beq.n	76c8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40c>
    if (command[1] == 'R' && parameter[0] == 'E' && parameter[1] == 'S' && parameter[2] == 'E' && parameter[3] == 'T' && parameter[4] == 0) {
    7668:	2b52      	cmp	r3, #82	; 0x52
    766a:	d00a      	beq.n	7682 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3c6>
    if (command[1] == 'N' && parameter[0] == 'V' && parameter[1] == 'R' && parameter[2] == 'E' && parameter[3] == 'S' && parameter[4] == 'E' && parameter[5] == 'T' && parameter[6] == 0) {
    766c:	2b4e      	cmp	r3, #78	; 0x4e
    766e:	d102      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    7670:	7823      	ldrb	r3, [r4, #0]
    7672:	2b56      	cmp	r3, #86	; 0x56
    7674:	d042      	beq.n	76fc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x440>
    *commandError = CE_CMD_UNKNOWN;
    7676:	2302      	movs	r3, #2
  return true;
    7678:	f04f 0a01 	mov.w	sl, #1
    *commandError = CE_CMD_UNKNOWN;
    767c:	f889 3000 	strb.w	r3, [r9]
    7680:	e635      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    if (command[1] == 'R' && parameter[0] == 'E' && parameter[1] == 'S' && parameter[2] == 'E' && parameter[3] == 'T' && parameter[4] == 0) {
    7682:	7823      	ldrb	r3, [r4, #0]
    7684:	2b45      	cmp	r3, #69	; 0x45
    7686:	d1f6      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    7688:	7863      	ldrb	r3, [r4, #1]
    768a:	2b53      	cmp	r3, #83	; 0x53
    768c:	d1f3      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    768e:	78a3      	ldrb	r3, [r4, #2]
    7690:	2b45      	cmp	r3, #69	; 0x45
    7692:	d1f0      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    7694:	78e3      	ldrb	r3, [r4, #3]
    7696:	2b54      	cmp	r3, #84	; 0x54
    7698:	d1ed      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    769a:	7924      	ldrb	r4, [r4, #4]
    769c:	2c00      	cmp	r4, #0
    769e:	d1ea      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
        nv.wait();
    76a0:	4851      	ldr	r0, [pc, #324]	; (77e8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>)
    76a2:	f7fd faef 	bl	4c84 <NonVolatileStorage::wait()>
        tasks.yield(1000);
    76a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    76aa:	4850      	ldr	r0, [pc, #320]	; (77ec <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x530>)
    76ac:	f7fe ff1c 	bl	64e8 <Tasks::yield(unsigned long)>
        HAL_RESET();
    76b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    76b4:	4a4e      	ldr	r2, [pc, #312]	; (77f0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x534>)
    76b6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
    76ba:	f3bf 8f4f 	dsb	sy
  return true;
    76be:	f04f 0a01 	mov.w	sl, #1
      *numericReply = false;
    76c2:	f888 4000 	strb.w	r4, [r8]
    76c6:	e612      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
      for (unsigned int i = 0; i < strlen(parameter); i++) if (parameter[i] == '_') parameter[i] = ' ';
    76c8:	2520      	movs	r5, #32
    76ca:	e007      	b.n	76dc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x420>
    76cc:	f814 300a 	ldrb.w	r3, [r4, sl]
    76d0:	2b5f      	cmp	r3, #95	; 0x5f
    76d2:	bf08      	it	eq
    76d4:	f804 500a 	strbeq.w	r5, [r4, sl]
    76d8:	f10a 0a01 	add.w	sl, sl, #1
    76dc:	4620      	mov	r0, r4
    76de:	f018 fb4f 	bl	1fd80 <strlen>
    76e2:	4550      	cmp	r0, sl
    76e4:	d8f2      	bhi.n	76cc <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x410>
      if (l > 0 && parameter[l - 1] == '&') { parameter[l - 1] = 0; DL(parameter); } else { D(parameter); }
    76e6:	2800      	cmp	r0, #0
    76e8:	f43f aecc 	beq.w	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
    76ec:	3801      	subs	r0, #1
    76ee:	5c23      	ldrb	r3, [r4, r0]
    76f0:	2b26      	cmp	r3, #38	; 0x26
    76f2:	f47f aec7 	bne.w	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
    76f6:	2300      	movs	r3, #0
    76f8:	5423      	strb	r3, [r4, r0]
    76fa:	e6c3      	b.n	7484 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
    if (command[1] == 'N' && parameter[0] == 'V' && parameter[1] == 'R' && parameter[2] == 'E' && parameter[3] == 'S' && parameter[4] == 'E' && parameter[5] == 'T' && parameter[6] == 0) {
    76fc:	7863      	ldrb	r3, [r4, #1]
    76fe:	2b52      	cmp	r3, #82	; 0x52
    7700:	d1b9      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    7702:	78a3      	ldrb	r3, [r4, #2]
    7704:	2b45      	cmp	r3, #69	; 0x45
    7706:	d1b6      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    7708:	78e3      	ldrb	r3, [r4, #3]
    770a:	2b53      	cmp	r3, #83	; 0x53
    770c:	d1b3      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    770e:	7923      	ldrb	r3, [r4, #4]
    7710:	2b45      	cmp	r3, #69	; 0x45
    7712:	d1b0      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    7714:	7963      	ldrb	r3, [r4, #5]
    7716:	2b54      	cmp	r3, #84	; 0x54
    7718:	d1ad      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
    771a:	79a1      	ldrb	r1, [r4, #6]
    771c:	2900      	cmp	r1, #0
    771e:	d1aa      	bne.n	7676 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ba>
      strcpy(reply, "NV memory will be cleared on the next boot.");
    7720:	4c34      	ldr	r4, [pc, #208]	; (77f4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x538>)
      nv.writeKey(0);
    7722:	4831      	ldr	r0, [pc, #196]	; (77e8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>)
      strcpy(reply, "NV memory will be cleared on the next boot.");
    7724:	f104 0720 	add.w	r7, r4, #32
      nv.writeKey(0);
    7728:	f7fd fbae 	bl	4e88 <NonVolatileStorage::writeKey(unsigned long)>
      strcpy(reply, "NV memory will be cleared on the next boot.");
    772c:	4626      	mov	r6, r4
    772e:	3510      	adds	r5, #16
    7730:	3410      	adds	r4, #16
    7732:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7734:	42be      	cmp	r6, r7
    7736:	f845 0c10 	str.w	r0, [r5, #-16]
    773a:	f845 1c0c 	str.w	r1, [r5, #-12]
    773e:	f845 2c08 	str.w	r2, [r5, #-8]
    7742:	f845 3c04 	str.w	r3, [r5, #-4]
    7746:	d1f1      	bne.n	772c <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x470>
      *numericReply = false;
    7748:	2300      	movs	r3, #0
  return true;
    774a:	f04f 0a01 	mov.w	sl, #1
      strcpy(reply, "NV memory will be cleared on the next boot.");
    774e:	cc07      	ldmia	r4!, {r0, r1, r2}
    7750:	6028      	str	r0, [r5, #0]
    7752:	6069      	str	r1, [r5, #4]
    7754:	60aa      	str	r2, [r5, #8]
      *numericReply = false;
    7756:	f888 3000 	strb.w	r3, [r8]
    775a:	e5c8      	b.n	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
          uint16_t axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
    775c:	f44f 7199 	mov.w	r1, #306	; 0x132
    7760:	4821      	ldr	r0, [pc, #132]	; (77e8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>)
    7762:	f7fd fc19 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
          if (parameter[3] == '0') {
    7766:	78e3      	ldrb	r3, [r4, #3]
    inline void update(uint16_t i, uint16_t j) { updateBytes(i, (uint8_t*)&j, sizeof(uint16_t)); }
    7768:	aa05      	add	r2, sp, #20
    776a:	f44f 7199 	mov.w	r1, #306	; 0x132
    776e:	2b30      	cmp	r3, #48	; 0x30
    7770:	f04f 0302 	mov.w	r3, #2
             bitSet(axesToRevert, 0);
    7774:	bf0c      	ite	eq
    7776:	f040 0001 	orreq.w	r0, r0, #1
             bitClear(axesToRevert, 0);
    777a:	f020 0001 	bicne.w	r0, r0, #1
    777e:	b284      	uxth	r4, r0
    7780:	4819      	ldr	r0, [pc, #100]	; (77e8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>)
    7782:	f8ad 4014 	strh.w	r4, [sp, #20]
    7786:	f7fd fc71 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    778a:	e5ae      	b.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
      float f = strtod(&parameter[3], &conv_end);
    778c:	1ce5      	adds	r5, r4, #3
    778e:	a905      	add	r1, sp, #20
    7790:	4628      	mov	r0, r5
    7792:	f017 faed 	bl	1ed70 <strtod>
      if (&parameter[3] == conv_end) f = NAN;
    7796:	9b05      	ldr	r3, [sp, #20]
    7798:	429d      	cmp	r5, r3
      if (parameter[1] == 'A') {
    779a:	7863      	ldrb	r3, [r4, #1]
      float f = strtod(&parameter[3], &conv_end);
    779c:	bf14      	ite	ne
    779e:	eeb7 0bc0 	vcvtne.f32.f64	s0, d0
      if (&parameter[3] == conv_end) f = NAN;
    77a2:	ed9f 0a15 	vldreq	s0, [pc, #84]	; 77f8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x53c>
      if (parameter[1] == 'A') {
    77a6:	2b41      	cmp	r3, #65	; 0x41
    77a8:	d00e      	beq.n	77c8 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50c>
      if (parameter[1] == 'B') {
    77aa:	2b42      	cmp	r3, #66	; 0x42
    77ac:	d013      	beq.n	77d6 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x51a>
      if (parameter[1] == 'C') {
    77ae:	2b43      	cmp	r3, #67	; 0x43
    77b0:	f47f ad9d 	bne.w	72ee <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
        if (!weather.setHumidity(f)) *commandError = CE_PARAM_RANGE;
    77b4:	480b      	ldr	r0, [pc, #44]	; (77e4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x528>)
    77b6:	f7ff fd55 	bl	7264 <Weather::setHumidity(float)>
    77ba:	2800      	cmp	r0, #0
    77bc:	f47f ad95 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
        if (!weather.setTemperature(f)) *commandError = CE_PARAM_RANGE;
    77c0:	2304      	movs	r3, #4
    77c2:	f889 3000 	strb.w	r3, [r9]
    77c6:	e590      	b.n	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    77c8:	4806      	ldr	r0, [pc, #24]	; (77e4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x528>)
    77ca:	f7ff fd09 	bl	71e0 <Weather::setTemperature(float)>
    77ce:	2800      	cmp	r0, #0
    77d0:	f47f ad8b 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    77d4:	e7f4      	b.n	77c0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x504>
        if (!weather.setPressure(f)) *commandError = CE_PARAM_RANGE;
    77d6:	4803      	ldr	r0, [pc, #12]	; (77e4 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x528>)
    77d8:	f7ff fd24 	bl	7224 <Weather::setPressure(float)>
    77dc:	2800      	cmp	r0, #0
    77de:	f47f ad84 	bne.w	72ea <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
    77e2:	e7ed      	b.n	77c0 <Telescope::command(char*, char*, char*, bool*, bool*, CommandError*)+0x504>
    77e4:	200048a4 	.word	0x200048a4
    77e8:	20005e50 	.word	0x20005e50
    77ec:	2000634c 	.word	0x2000634c
    77f0:	05fa0004 	.word	0x05fa0004
    77f4:	20002378 	.word	0x20002378
    77f8:	7fc00000 	.word	0x7fc00000

000077fc <statusFlash()>:
void mcuTempWrapper() { telescope.mcuTemperature = (telescope.mcuTemperature*9.0F + HAL_TEMP())/10.0F; }

#if STATUS_LED != OFF && STATUS_LED_PIN != OFF
  void statusFlash() {
    static uint8_t cycle = 0;
    if (cycle++ > 16) cycle = 0;
    77fc:	4a1c      	ldr	r2, [pc, #112]	; (7870 <statusFlash()+0x74>)
    77fe:	7811      	ldrb	r1, [r2, #0]
    7800:	1c4b      	adds	r3, r1, #1
    7802:	2910      	cmp	r1, #16

    // show only the most severe error (in order)
    uint8_t flashes = 0;
    if (initError.nv)      flashes = 1; else
    7804:	491b      	ldr	r1, [pc, #108]	; (7874 <statusFlash()+0x78>)
    if (cycle++ > 16) cycle = 0;
    7806:	b2db      	uxtb	r3, r3
    7808:	7013      	strb	r3, [r2, #0]
    780a:	d90a      	bls.n	7822 <statusFlash()+0x26>
    if (initError.nv)      flashes = 1; else
    780c:	7809      	ldrb	r1, [r1, #0]
    if (cycle++ > 16) cycle = 0;
    780e:	2300      	movs	r3, #0
    if (initError.nv)      flashes = 1; else
    7810:	07c8      	lsls	r0, r1, #31
    if (cycle++ > 16) cycle = 0;
    7812:	7013      	strb	r3, [r2, #0]
    if (initError.nv)      flashes = 1; else
    7814:	d509      	bpl.n	782a <statusFlash()+0x2e>
				CORE_PIN37_PORTCLEAR = CORE_PIN37_BITMASK;
    7816:	4b18      	ldr	r3, [pc, #96]	; (7878 <statusFlash()+0x7c>)
    7818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    781c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    7820:	4770      	bx	lr
    7822:	7809      	ldrb	r1, [r1, #0]
    7824:	f011 0001 	ands.w	r0, r1, #1
    7828:	d103      	bne.n	7832 <statusFlash()+0x36>
    if (initError.value)   flashes = 2; else
    782a:	078b      	lsls	r3, r1, #30
    782c:	d50c      	bpl.n	7848 <statusFlash()+0x4c>
 
    // everything is ok, turn on LED and exit
    if (flashes == 0) { digitalWriteEx(pin, STATUS_LED_ON_STATE); return; }

    // flash the LED if there's an error
    if (cycle%2 == 0) { digitalWriteEx(pin, !STATUS_LED_ON_STATE); } else { if (cycle/2 < flashes) digitalWriteEx(pin, STATUS_LED_ON_STATE); }
    782e:	7813      	ldrb	r3, [r2, #0]
    if (initError.value)   flashes = 2; else
    7830:	2002      	movs	r0, #2
    if (cycle%2 == 0) { digitalWriteEx(pin, !STATUS_LED_ON_STATE); } else { if (cycle/2 < flashes) digitalWriteEx(pin, STATUS_LED_ON_STATE); }
    7832:	07da      	lsls	r2, r3, #31
    7834:	d5ef      	bpl.n	7816 <statusFlash()+0x1a>
    7836:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
    783a:	d904      	bls.n	7846 <statusFlash()+0x4a>
				CORE_PIN37_PORTSET = CORE_PIN37_BITMASK;
    783c:	4b0e      	ldr	r3, [pc, #56]	; (7878 <statusFlash()+0x7c>)
    783e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    7842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
    7846:	4770      	bx	lr
    if (initError.gpio)    flashes = 3; else
    7848:	0688      	lsls	r0, r1, #26
    784a:	d404      	bmi.n	7856 <statusFlash()+0x5a>
    if (initError.driver)  flashes = 4; else
    784c:	074b      	lsls	r3, r1, #29
    784e:	d505      	bpl.n	785c <statusFlash()+0x60>
    if (cycle%2 == 0) { digitalWriteEx(pin, !STATUS_LED_ON_STATE); } else { if (cycle/2 < flashes) digitalWriteEx(pin, STATUS_LED_ON_STATE); }
    7850:	7813      	ldrb	r3, [r2, #0]
    if (initError.driver)  flashes = 4; else
    7852:	2004      	movs	r0, #4
    7854:	e7ed      	b.n	7832 <statusFlash()+0x36>
    if (cycle%2 == 0) { digitalWriteEx(pin, !STATUS_LED_ON_STATE); } else { if (cycle/2 < flashes) digitalWriteEx(pin, STATUS_LED_ON_STATE); }
    7856:	7813      	ldrb	r3, [r2, #0]
    if (initError.gpio)    flashes = 3; else
    7858:	2003      	movs	r0, #3
    785a:	e7ea      	b.n	7832 <statusFlash()+0x36>
    if (initError.tls)     flashes = 5; else
    785c:	06c8      	lsls	r0, r1, #27
    785e:	d404      	bmi.n	786a <statusFlash()+0x6e>
    if (initError.weather) flashes = 6;
    7860:	0709      	lsls	r1, r1, #28
    7862:	d5eb      	bpl.n	783c <statusFlash()+0x40>
    if (cycle%2 == 0) { digitalWriteEx(pin, !STATUS_LED_ON_STATE); } else { if (cycle/2 < flashes) digitalWriteEx(pin, STATUS_LED_ON_STATE); }
    7864:	7813      	ldrb	r3, [r2, #0]
    if (initError.weather) flashes = 6;
    7866:	2006      	movs	r0, #6
    7868:	e7e3      	b.n	7832 <statusFlash()+0x36>
    if (cycle%2 == 0) { digitalWriteEx(pin, !STATUS_LED_ON_STATE); } else { if (cycle/2 < flashes) digitalWriteEx(pin, STATUS_LED_ON_STATE); }
    786a:	7813      	ldrb	r3, [r2, #0]
    if (initError.tls)     flashes = 5; else
    786c:	2005      	movs	r0, #5
    786e:	e7e0      	b.n	7832 <statusFlash()+0x36>
    7870:	20006aa1 	.word	0x20006aa1
    7874:	20005ccc 	.word	0x20005ccc
    7878:	42008000 	.word	0x42008000

0000787c <mcuTempWrapper()>:
void mcuTempWrapper() { telescope.mcuTemperature = (telescope.mcuTemperature*9.0F + HAL_TEMP())/10.0F; }
    787c:	b510      	push	{r4, lr}
    787e:	4c0a      	ldr	r4, [pc, #40]	; (78a8 <mcuTempWrapper()+0x2c>)
    7880:	ed2d 8b02 	vpush	{d8}
    7884:	ed94 8a01 	vldr	s16, [r4, #4]
    7888:	f011 fa8a 	bl	18da0 <tempmonGetTemp>
    788c:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
    7890:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    7894:	eea8 0a27 	vfma.f32	s0, s16, s15
    7898:	ecbd 8b02 	vpop	{d8}
    789c:	eec0 7a07 	vdiv.f32	s15, s0, s14
    78a0:	edc4 7a01 	vstr	s15, [r4, #4]
    78a4:	bd10      	pop	{r4, pc}
    78a6:	bf00      	nop
    78a8:	20006464 	.word	0x20006464

000078ac <Telescope::Telescope()>:
#endif

Telescope::Telescope() {
    78ac:	b510      	push	{r4, lr}
    78ae:	2200      	movs	r2, #0
    78b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    78b4:	4604      	mov	r4, r0
  // early init for stepper drivers
  #ifdef AXIS1_STEP_DIR_PRESENT
  if (AXIS1_STEP_PIN >= 0 && AXIS1_STEP_PIN <= 255) pinMode(AXIS1_STEP_PIN, OUTPUT);
    78b6:	2101      	movs	r1, #1
    78b8:	2028      	movs	r0, #40	; 0x28
Telescope::Telescope() {
    78ba:	7022      	strb	r2, [r4, #0]
    78bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (AXIS1_STEP_PIN >= 0 && AXIS1_STEP_PIN <= 255) pinMode(AXIS1_STEP_PIN, OUTPUT);
    78be:	f010 fd1d 	bl	182fc <pinMode>
  #endif
  #ifdef AXIS2_STEP_DIR_PRESENT
  if (AXIS2_STEP_PIN >= 0 && AXIS2_STEP_PIN <= 255) pinMode(AXIS2_STEP_PIN, OUTPUT);
    78c2:	2101      	movs	r1, #1
    78c4:	2016      	movs	r0, #22
    78c6:	f010 fd19 	bl	182fc <pinMode>
  #endif
  #ifdef AXIS9_STEP_DIR_PRESENT
  if (AXIS9_STEP_PIN >= 0 && AXIS9_STEP_PIN <= 255) pinMode(AXIS9_STEP_PIN, OUTPUT);
  #endif

  if (AXIS1_ENABLE_PIN >= 0 && AXIS1_ENABLE_PIN <= 255) { pinMode(AXIS1_ENABLE_PIN, OUTPUT); digitalWrite(AXIS1_ENABLE_PIN, !AXIS1_ENABLE_STATE); }
    78ca:	2101      	movs	r1, #1
    78cc:	202a      	movs	r0, #42	; 0x2a
    78ce:	f010 fd15 	bl	182fc <pinMode>
    78d2:	2101      	movs	r1, #1
    78d4:	202a      	movs	r0, #42	; 0x2a
    78d6:	f010 fcd5 	bl	18284 <digitalWrite>
  if (AXIS2_ENABLE_PIN >= 0 && AXIS2_ENABLE_PIN <= 255) { pinMode(AXIS2_ENABLE_PIN, OUTPUT); digitalWrite(AXIS2_ENABLE_PIN, !AXIS2_ENABLE_STATE); }
    78da:	2101      	movs	r1, #1
    78dc:	2018      	movs	r0, #24
    78de:	f010 fd0d 	bl	182fc <pinMode>
    78e2:	2101      	movs	r1, #1
    78e4:	2018      	movs	r0, #24
    78e6:	f010 fccd 	bl	18284 <digitalWrite>
    if (SHARED_ENABLE_PIN2 >= 0 && SHARED_ENABLE_PIN2 <= 255) { pinMode(SHARED_ENABLE_PIN2, OUTPUT); digitalWrite(SHARED_ENABLE_PIN2, !SHARED2_ENABLE_STATE); }
  #endif
  #ifdef SHARED_ENABLE_PIN3
    if (SHARED_ENABLE_PIN3 >= 0 && SHARED_ENABLE_PIN3 <= 255) { pinMode(SHARED_ENABLE_PIN3, OUTPUT); digitalWrite(SHARED_ENABLE_PIN3, !SHARED3_ENABLE_STATE); }
  #endif
}
    78ea:	4620      	mov	r0, r4
    78ec:	bd10      	pop	{r4, pc}
    78ee:	bf00      	nop

000078f0 <Telescope::init(char const*, int, int, char const*, int)>:

void Telescope::init(const char *fwName, int fwMajor, int fwMinor, const char *fwPatch, int fwConfig) {
    78f0:	b570      	push	{r4, r5, r6, lr}
    78f2:	4604      	mov	r4, r0
    78f4:	b086      	sub	sp, #24
    78f6:	4616      	mov	r6, r2
    78f8:	461d      	mov	r5, r3
  strcpy(firmware.name, fwName);
    78fa:	3008      	adds	r0, #8
    78fc:	f018 f9ae 	bl	1fc5c <strcpy>
  firmware.version.major = fwMajor;
  firmware.version.minor = fwMinor;
  strcpy(firmware.version.patch, fwPatch);
    7900:	990a      	ldr	r1, [sp, #40]	; 0x28
  firmware.version.major = fwMajor;
    7902:	7426      	strb	r6, [r4, #16]
  strcpy(firmware.version.patch, fwPatch);
    7904:	f104 0012 	add.w	r0, r4, #18
  firmware.version.minor = fwMinor;
    7908:	7465      	strb	r5, [r4, #17]
  strcpy(firmware.version.patch, fwPatch);
    790a:	f018 f9a7 	bl	1fc5c <strcpy>
  firmware.version.config = fwConfig;
  strcpy(firmware.date, __DATE__);
    790e:	4d45      	ldr	r5, [pc, #276]	; (7a24 <Telescope::init(char const*, int, int, char const*, int)+0x134>)
  firmware.version.config = fwConfig;
    7910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  strcpy(firmware.time, __TIME__);

  if (!nv.isKeyValid(INIT_NV_KEY)) {
    7912:	4e45      	ldr	r6, [pc, #276]	; (7a28 <Telescope::init(char const*, int, int, char const*, int)+0x138>)
  firmware.version.config = fwConfig;
    7914:	7523      	strb	r3, [r4, #20]
  strcpy(firmware.time, __TIME__);
    7916:	4b45      	ldr	r3, [pc, #276]	; (7a2c <Telescope::init(char const*, int, int, char const*, int)+0x13c>)
  strcpy(firmware.date, __DATE__);
    7918:	cd07      	ldmia	r5!, {r0, r1, r2}
    791a:	f8c4 0015 	str.w	r0, [r4, #21]
    791e:	f8c4 1019 	str.w	r1, [r4, #25]
    7922:	f8c4 201d 	str.w	r2, [r4, #29]
  strcpy(firmware.time, __TIME__);
    7926:	cb03      	ldmia	r3!, {r0, r1}
    7928:	781b      	ldrb	r3, [r3, #0]
    792a:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
  if (!nv.isKeyValid(INIT_NV_KEY)) {
    792e:	4630      	mov	r0, r6
  strcpy(firmware.time, __TIME__);
    7930:	f8c4 102d 	str.w	r1, [r4, #45]	; 0x2d
    7934:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!nv.isKeyValid(INIT_NV_KEY)) {
    7938:	493d      	ldr	r1, [pc, #244]	; (7a30 <Telescope::init(char const*, int, int, char const*, int)+0x140>)
    793a:	f7fd fa41 	bl	4dc0 <NonVolatileStorage::isKeyValid(unsigned long)>
    793e:	b910      	cbnz	r0, 7946 <Telescope::init(char const*, int, int, char const*, int)+0x56>
    if (!nv.initError) {
    7940:	79b3      	ldrb	r3, [r6, #6]
    7942:	2b00      	cmp	r3, #0
    7944:	d06a      	beq.n	7a1c <Telescope::init(char const*, int, int, char const*, int)+0x12c>
      DLF("WRN: NV, can't be accessed skipping verification!");
    }
  } else { VLF("MSG: NV, correct key found"); }

  #ifdef USES_HW_SPI
    SPI.begin();
    7946:	483b      	ldr	r0, [pc, #236]	; (7a34 <Telescope::init(char const*, int, int, char const*, int)+0x144>)
    7948:	f00d f9c6 	bl	14cd8 <SPIClass::begin()>
  #endif

  if (!gpio.init()) initError.gpio = true;
    794c:	483a      	ldr	r0, [pc, #232]	; (7a38 <Telescope::init(char const*, int, int, char const*, int)+0x148>)
    794e:	4d3b      	ldr	r5, [pc, #236]	; (7a3c <Telescope::init(char const*, int, int, char const*, int)+0x14c>)
    7950:	f7fd f85e 	bl	4a10 <Gpio::init()>
    7954:	b918      	cbnz	r0, 795e <Telescope::init(char const*, int, int, char const*, int)+0x6e>
    7956:	782b      	ldrb	r3, [r5, #0]
    7958:	f043 0320 	orr.w	r3, r3, #32
    795c:	702b      	strb	r3, [r5, #0]
  
  #if SERIAL_B_ESP_FLASHING == ON
    addonFlasher.init();
  #endif

  mcuTemperature = HAL_TEMP();
    795e:	f011 fa1f 	bl	18da0 <tempmonGetTemp>
  if (!isnan(mcuTemperature)) {
    7962:	eeb4 0a40 	vcmp.f32	s0, s0
  mcuTemperature = HAL_TEMP();
    7966:	ed84 0a01 	vstr	s0, [r4, #4]
  if (!isnan(mcuTemperature)) {
    796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    796e:	d60c      	bvs.n	798a <Telescope::init(char const*, int, int, char const*, int)+0x9a>
    VF("MSG: Telescope, start MCU temperature monitor task (rate 500ms priority 7)... ");
    if (tasks.add(500, 0, true, 6, mcuTempWrapper, "McuTemp")) { VLF("success"); } else { VLF("FAILED!"); }
    7970:	4a33      	ldr	r2, [pc, #204]	; (7a40 <Telescope::init(char const*, int, int, char const*, int)+0x150>)
    7972:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    7976:	4b33      	ldr	r3, [pc, #204]	; (7a44 <Telescope::init(char const*, int, int, char const*, int)+0x154>)
    7978:	4833      	ldr	r0, [pc, #204]	; (7a48 <Telescope::init(char const*, int, int, char const*, int)+0x158>)
    797a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    797e:	2206      	movs	r2, #6
    7980:	2301      	movs	r3, #1
    7982:	9200      	str	r2, [sp, #0]
    7984:	2200      	movs	r2, #0
    7986:	f7fe fc29 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  }
  weather.init();
    798a:	4830      	ldr	r0, [pc, #192]	; (7a4c <Telescope::init(char const*, int, int, char const*, int)+0x15c>)
    798c:	f7ff fc20 	bl	71d0 <Weather::init()>
  temperature.init();
    7990:	482f      	ldr	r0, [pc, #188]	; (7a50 <Telescope::init(char const*, int, int, char const*, int)+0x160>)
    7992:	f7ff fc1b 	bl	71cc <Temperature::init()>
  #ifdef MOUNT_PRESENT
    #if defined(ESP32) && STATUS_BUZZER >= 0
      // hack to trigger one-time ESP32 code debug message to get it out of the way early
      tone(STATUS_BUZZER_PIN, STATUS_BUZZER, 1);
    #endif
    mount.init();
    7996:	482f      	ldr	r0, [pc, #188]	; (7a54 <Telescope::init(char const*, int, int, char const*, int)+0x164>)
    7998:	f000 ff50 	bl	883c <Mount::init()>
    mountStatus.init();
    799c:	482e      	ldr	r0, [pc, #184]	; (7a58 <Telescope::init(char const*, int, int, char const*, int)+0x168>)
    799e:	f00d f8a9 	bl	14af4 <Status::init()>

  #ifdef FOCUSER_PRESENT
    focuser.init();
  #endif

  delay(1000);
    79a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    79a6:	f010 fbef 	bl	18188 <delay>
  #ifdef SHARED_ENABLE_PIN3
    digitalWriteEx(SHARED_ENABLE_PIN3, SHARED3_ENABLE_STATE);
  #endif

  #ifdef MOUNT_PRESENT
    mount.begin();
    79aa:	482a      	ldr	r0, [pc, #168]	; (7a54 <Telescope::init(char const*, int, int, char const*, int)+0x164>)
    79ac:	f001 f936 	bl	8c1c <Mount::begin()>
  #ifdef FEATURES_PRESENT
    features.init();
  #endif

  // write the default settings to NV
  if (!nv.hasValidKey()) {
    79b0:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    79b4:	b1bb      	cbz	r3, 79e6 <Telescope::init(char const*, int, int, char const*, int)+0xf6>
    nv.writeKey((uint32_t)INIT_NV_KEY);
    nv.wait();
    if (!nv.isKeyValid(INIT_NV_KEY)) { DLF("ERR: NV, failed to read back key!"); } else { VLF("MSG: NV, reset complete"); }
  }

  initError.nv = nv.initError;
    79b6:	782b      	ldrb	r3, [r5, #0]
  #endif

  // bring up status LED and flash error codes
  #if STATUS_LED != OFF && STATUS_LED_PIN != OFF
    int pin = STATUS_LED_PIN;
    pinModeEx(pin, OUTPUT);
    79b8:	2101      	movs	r1, #1
  initError.nv = nv.initError;
    79ba:	79b2      	ldrb	r2, [r6, #6]
    pinModeEx(pin, OUTPUT);
    79bc:	2025      	movs	r0, #37	; 0x25
    VF("MSG: Telescope, start status LED task (rate 500ms priority 4)... ");
    if (tasks.add(500, 0, true, 4, statusFlash, "StaLed")) { VLF("success"); } else { VLF("FAILED!"); }
    79be:	2404      	movs	r4, #4
  initError.nv = nv.initError;
    79c0:	f362 0300 	bfi	r3, r2, #0, #1
    79c4:	702b      	strb	r3, [r5, #0]
    pinModeEx(pin, OUTPUT);
    79c6:	f010 fc99 	bl	182fc <pinMode>
    if (tasks.add(500, 0, true, 4, statusFlash, "StaLed")) { VLF("success"); } else { VLF("FAILED!"); }
    79ca:	4824      	ldr	r0, [pc, #144]	; (7a5c <Telescope::init(char const*, int, int, char const*, int)+0x16c>)
    79cc:	2301      	movs	r3, #1
    79ce:	4924      	ldr	r1, [pc, #144]	; (7a60 <Telescope::init(char const*, int, int, char const*, int)+0x170>)
    79d0:	2200      	movs	r2, #0
    79d2:	9400      	str	r4, [sp, #0]
    79d4:	e9cd 1001 	strd	r1, r0, [sp, #4]
    79d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    79dc:	481a      	ldr	r0, [pc, #104]	; (7a48 <Telescope::init(char const*, int, int, char const*, int)+0x158>)
    79de:	f7fe fbfd 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  #endif
}
    79e2:	b006      	add	sp, #24
    79e4:	bd70      	pop	{r4, r5, r6, pc}
    inline void write(uint16_t i,  int16_t j) { update (i,j); }
    79e6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
    inline void update(uint16_t i,  int16_t j) { updateBytes(i, (uint8_t*)&j, sizeof(int16_t)); }
    79e8:	2302      	movs	r3, #2
    79ea:	f10d 0216 	add.w	r2, sp, #22
    79ee:	480e      	ldr	r0, [pc, #56]	; (7a28 <Telescope::init(char const*, int, int, char const*, int)+0x138>)
    79f0:	f8ad 1016 	strh.w	r1, [sp, #22]
    79f4:	f44f 715d 	mov.w	r1, #884	; 0x374
    79f8:	f7fd fb38 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  if (!nv.hasValidKey()) {
    79fc:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    7a00:	2b00      	cmp	r3, #0
    7a02:	d1d8      	bne.n	79b6 <Telescope::init(char const*, int, int, char const*, int)+0xc6>
    nv.writeKey((uint32_t)INIT_NV_KEY);
    7a04:	490a      	ldr	r1, [pc, #40]	; (7a30 <Telescope::init(char const*, int, int, char const*, int)+0x140>)
    7a06:	4808      	ldr	r0, [pc, #32]	; (7a28 <Telescope::init(char const*, int, int, char const*, int)+0x138>)
    7a08:	f7fd fa3e 	bl	4e88 <NonVolatileStorage::writeKey(unsigned long)>
    nv.wait();
    7a0c:	4806      	ldr	r0, [pc, #24]	; (7a28 <Telescope::init(char const*, int, int, char const*, int)+0x138>)
    7a0e:	f7fd f939 	bl	4c84 <NonVolatileStorage::wait()>
    if (!nv.isKeyValid(INIT_NV_KEY)) { DLF("ERR: NV, failed to read back key!"); } else { VLF("MSG: NV, reset complete"); }
    7a12:	4907      	ldr	r1, [pc, #28]	; (7a30 <Telescope::init(char const*, int, int, char const*, int)+0x140>)
    7a14:	4804      	ldr	r0, [pc, #16]	; (7a28 <Telescope::init(char const*, int, int, char const*, int)+0x138>)
    7a16:	f7fd f9d3 	bl	4dc0 <NonVolatileStorage::isKeyValid(unsigned long)>
    7a1a:	e7cc      	b.n	79b6 <Telescope::init(char const*, int, int, char const*, int)+0xc6>
      if (nv.verify()) { VLF("MSG: NV, ready for reset to defaults"); }
    7a1c:	4630      	mov	r0, r6
    7a1e:	f7fd fa4b 	bl	4eb8 <NonVolatileStorage::verify()>
    7a22:	e790      	b.n	7946 <Telescope::init(char const*, int, int, char const*, int)+0x56>
    7a24:	20002350 	.word	0x20002350
    7a28:	20005e50 	.word	0x20005e50
    7a2c:	2000235c 	.word	0x2000235c
    7a30:	22ce0c6d 	.word	0x22ce0c6d
    7a34:	200036d8 	.word	0x200036d8
    7a38:	20005bf0 	.word	0x20005bf0
    7a3c:	20005ccc 	.word	0x20005ccc
    7a40:	20002368 	.word	0x20002368
    7a44:	0000787d 	.word	0x0000787d
    7a48:	2000634c 	.word	0x2000634c
    7a4c:	200048a4 	.word	0x200048a4
    7a50:	200064a4 	.word	0x200064a4
    7a54:	200054e0 	.word	0x200054e0
    7a58:	20005e4c 	.word	0x20005e4c
    7a5c:	20002370 	.word	0x20002370
    7a60:	000077fd 	.word	0x000077fd

00007a64 <_GLOBAL__sub_I_xBusy>:

Telescope telescope;
    7a64:	4801      	ldr	r0, [pc, #4]	; (7a6c <_GLOBAL__sub_I_xBusy+0x8>)
    7a66:	f7ff bf21 	b.w	78ac <Telescope::Telescope()>
    7a6a:	bf00      	nop
    7a6c:	20006464 	.word	0x20006464

00007a70 <_GLOBAL__sub_I_driver1>:
  StepDirMotor motor2(2, &StepDirPinsAxis2, ((StepDirDriver*)&driver2));
#endif

const AxisPins PinsAxis2 = {AXIS2_SENSE_LIMIT_MIN_PIN, AXIS2_SENSE_HOME_PIN, AXIS2_SENSE_LIMIT_MAX_PIN, {AXIS2_SENSE_HOME, AXIS2_SENSE_HOME_INIT, degToRadF(AXIS2_SENSE_HOME_DIST_LIMIT), AXIS2_SENSE_LIMIT_MIN, AXIS2_SENSE_LIMIT_MAX, AXIS2_SENSE_LIMIT_INIT}};
const AxisSettings SettingsAxis2 = {AXIS2_STEPS_PER_DEGREE*RAD_DEG_RATIO, AXIS2_REVERSE, {degToRadF(AXIS2_LIMIT_MIN), degToRadF(AXIS2_LIMIT_MAX)}, siderealToRad(TRACK_BACKLASH_RATE)};
Axis axis2(2, &PinsAxis2, &SettingsAxis2, AXIS_MEASURE_RADIANS, arcsecToRad(AXIS2_TARGET_TOLERANCE));
    7a70:	b570      	push	{r4, r5, r6, lr}
    StepDirTmcSPI driver1(1, &DriverPinsAxis1, &DriverSettingsAxis1);
    7a72:	4d1a      	ldr	r5, [pc, #104]	; (7adc <_GLOBAL__sub_I_driver1+0x6c>)
Axis axis2(2, &PinsAxis2, &SettingsAxis2, AXIS_MEASURE_RADIANS, arcsecToRad(AXIS2_TARGET_TOLERANCE));
    7a74:	b084      	sub	sp, #16
  StepDirMotor motor1(1, &StepDirPinsAxis1, ((StepDirDriver*)&driver1));
    7a76:	2401      	movs	r4, #1
    StepDirTmcSPI driver1(1, &DriverPinsAxis1, &DriverSettingsAxis1);
    7a78:	4b19      	ldr	r3, [pc, #100]	; (7ae0 <_GLOBAL__sub_I_driver1+0x70>)
    7a7a:	4a1a      	ldr	r2, [pc, #104]	; (7ae4 <_GLOBAL__sub_I_driver1+0x74>)
    7a7c:	2101      	movs	r1, #1
    7a7e:	4628      	mov	r0, r5
    StepDirTmcSPI driver2(2, &StepDirDriverPinsAxis2, &StepDirDriverSettingsAxis2);
    7a80:	4e19      	ldr	r6, [pc, #100]	; (7ae8 <_GLOBAL__sub_I_driver1+0x78>)
    StepDirTmcSPI driver1(1, &DriverPinsAxis1, &DriverSettingsAxis1);
    7a82:	f7fb fc49 	bl	3318 <StepDirTmcSPI::StepDirTmcSPI(unsigned char, StepDirDriverPins const*, StepDirDriverSettings const*)>
  StepDirMotor motor1(1, &StepDirPinsAxis1, ((StepDirDriver*)&driver1));
    7a86:	462b      	mov	r3, r5
    7a88:	4621      	mov	r1, r4
Axis axis1(1, &PinsAxis1, &SettingsAxis1, AXIS_MEASURE_RADIANS, arcsecToRad(AXIS1_TARGET_TOLERANCE));
    7a8a:	2503      	movs	r5, #3
  StepDirMotor motor1(1, &StepDirPinsAxis1, ((StepDirDriver*)&driver1));
    7a8c:	4a17      	ldr	r2, [pc, #92]	; (7aec <_GLOBAL__sub_I_driver1+0x7c>)
    7a8e:	9400      	str	r4, [sp, #0]
    7a90:	4817      	ldr	r0, [pc, #92]	; (7af0 <_GLOBAL__sub_I_driver1+0x80>)
    7a92:	f7fa fdf3 	bl	267c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)>
Axis axis1(1, &PinsAxis1, &SettingsAxis1, AXIS_MEASURE_RADIANS, arcsecToRad(AXIS1_TARGET_TOLERANCE));
    7a96:	ed9f 0a17 	vldr	s0, [pc, #92]	; 7af4 <_GLOBAL__sub_I_driver1+0x84>
    7a9a:	4621      	mov	r1, r4
    7a9c:	4b16      	ldr	r3, [pc, #88]	; (7af8 <_GLOBAL__sub_I_driver1+0x88>)
    7a9e:	4a17      	ldr	r2, [pc, #92]	; (7afc <_GLOBAL__sub_I_driver1+0x8c>)
    7aa0:	9500      	str	r5, [sp, #0]
    7aa2:	4817      	ldr	r0, [pc, #92]	; (7b00 <_GLOBAL__sub_I_driver1+0x90>)
    7aa4:	ed8d 0a03 	vstr	s0, [sp, #12]
    7aa8:	f7f9 f83c 	bl	b24 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)>
    StepDirTmcSPI driver2(2, &StepDirDriverPinsAxis2, &StepDirDriverSettingsAxis2);
    7aac:	4b15      	ldr	r3, [pc, #84]	; (7b04 <_GLOBAL__sub_I_driver1+0x94>)
    7aae:	2102      	movs	r1, #2
    7ab0:	4a15      	ldr	r2, [pc, #84]	; (7b08 <_GLOBAL__sub_I_driver1+0x98>)
    7ab2:	4630      	mov	r0, r6
    7ab4:	f7fb fc30 	bl	3318 <StepDirTmcSPI::StepDirTmcSPI(unsigned char, StepDirDriverPins const*, StepDirDriverSettings const*)>
  StepDirMotor motor2(2, &StepDirPinsAxis2, ((StepDirDriver*)&driver2));
    7ab8:	4633      	mov	r3, r6
    7aba:	4a14      	ldr	r2, [pc, #80]	; (7b0c <_GLOBAL__sub_I_driver1+0x9c>)
    7abc:	2102      	movs	r1, #2
    7abe:	9400      	str	r4, [sp, #0]
    7ac0:	4813      	ldr	r0, [pc, #76]	; (7b10 <_GLOBAL__sub_I_driver1+0xa0>)
    7ac2:	f7fa fddb 	bl	267c <StepDirMotor::StepDirMotor(unsigned char, StepDirPins const*, StepDirDriver*, bool)>
Axis axis2(2, &PinsAxis2, &SettingsAxis2, AXIS_MEASURE_RADIANS, arcsecToRad(AXIS2_TARGET_TOLERANCE));
    7ac6:	ed9d 0a03 	vldr	s0, [sp, #12]
    7aca:	4b12      	ldr	r3, [pc, #72]	; (7b14 <_GLOBAL__sub_I_driver1+0xa4>)
    7acc:	2102      	movs	r1, #2
    7ace:	4a12      	ldr	r2, [pc, #72]	; (7b18 <_GLOBAL__sub_I_driver1+0xa8>)
    7ad0:	9500      	str	r5, [sp, #0]
    7ad2:	4812      	ldr	r0, [pc, #72]	; (7b1c <_GLOBAL__sub_I_driver1+0xac>)
    7ad4:	f7f9 f826 	bl	b24 <Axis::Axis(unsigned char, AxisPins const*, AxisSettings const*, AxisMeasure, float)>
    7ad8:	b004      	add	sp, #16
    7ada:	bd70      	pop	{r4, r5, r6, pc}
    7adc:	20005b54 	.word	0x20005b54
    7ae0:	20001f94 	.word	0x20001f94
    7ae4:	20001f48 	.word	0x20001f48
    7ae8:	20005b94 	.word	0x20005b94
    7aec:	20001f7c 	.word	0x20001f7c
    7af0:	20005d14 	.word	0x20005d14
    7af4:	00000000 	.word	0x00000000
    7af8:	20001eb8 	.word	0x20001eb8
    7afc:	20002068 	.word	0x20002068
    7b00:	200050e8 	.word	0x200050e8
    7b04:	20001fb4 	.word	0x20001fb4
    7b08:	20001fa4 	.word	0x20001fa4
    7b0c:	20001f88 	.word	0x20001f88
    7b10:	20005db0 	.word	0x20005db0
    7b14:	20001ed0 	.word	0x20001ed0
    7b18:	20002088 	.word	0x20002088
    7b1c:	200051a8 	.word	0x200051a8

00007b20 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "goto/Goto.h"
#include "guide/Guide.h"
#include "limits/Limits.h"
#include "park/Park.h"

bool Mount::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    7b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b22:	461c      	mov	r4, r3
    7b24:	4606      	mov	r6, r0
    7b26:	460d      	mov	r5, r1
    7b28:	ed2d 8b02 	vpush	{d8}
  char *conv_end;
  PrecisionMode precisionMode = PM_HIGH;

  if (command[0] == 'G') {
    7b2c:	7813      	ldrb	r3, [r2, #0]
bool Mount::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    7b2e:	b0b1      	sub	sp, #196	; 0xc4
  if (command[0] == 'G') {
    7b30:	2b47      	cmp	r3, #71	; 0x47
    7b32:	d056      	beq.n	7be2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc2>
      convert.doubleToDms(reply, NormalizeAzimuth(radToDeg(z)), true, false, precisionMode);
      *numericReply = false;
    } else return false;
  } else

  if (command[0] == 'S') {
    7b34:	2b53      	cmp	r3, #83	; 0x53
    7b36:	d01c      	beq.n	7b72 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52>
  // :Tn#       Track compensation off
  // :T1#       Track dual axis off (disable Dec tracking on Eq mounts)
  // :T2#       Track dual axis on
  //            Return: 0 on failure
  //                    1 on success
  if (command[0] == 'T' && parameter[0] == 0) {
    7b38:	2b54      	cmp	r3, #84	; 0x54
    7b3a:	f000 80d5 	beq.w	7ce8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c8>
  //                    1 on success
  // :$BR[n]#   Set RA/Azm backlash in arc-seconds
  //            Return: 0 on failure
  //                    1 on success
  //        Set the Backlash values.  Units are arc-seconds
  if (command[0] == '$' && command[1] == 'B') {
    7b3e:	2b24      	cmp	r3, #36	; 0x24
    7b40:	f000 8089 	beq.w	7c56 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x136>
  //  % - Return parameter
  // :%BD#      Get Dec/Alt Antibacklash value in arc-seconds
  //            Return: n#
  // :%BR#      Get RA/Azm Antibacklash value in arc-seconds
  //            Return: n#
  if (command[0] == '%' && command[1] == 'B' && parameter[1] == 0) {
    7b44:	2b25      	cmp	r3, #37	; 0x25
    7b46:	f040 808a 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    7b4a:	7853      	ldrb	r3, [r2, #1]
    7b4c:	2b42      	cmp	r3, #66	; 0x42
    7b4e:	f040 8086 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    7b52:	7867      	ldrb	r7, [r4, #1]
    7b54:	2f00      	cmp	r7, #0
    7b56:	f040 8082 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    if (parameter[0] == 'D') {
    7b5a:	7823      	ldrb	r3, [r4, #0]
    7b5c:	2b44      	cmp	r3, #68	; 0x44
    7b5e:	f000 8246 	beq.w	7fee <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ce>
        if (arcSec < 0) arcSec = 0;
        if (arcSec > 3600) arcSec = 3600;
        sprintf(reply,"%d", arcSec);
        *numericReply = false;
    } else
    if (parameter[0] == 'R') {
    7b62:	2b52      	cmp	r3, #82	; 0x52
    7b64:	f000 8479 	beq.w	845a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x93a>
        int arcSec = round(radToArcsec(settings.backlash.axis1));
        if (arcSec < 0) arcSec = 0;
        if (arcSec > 3600) arcSec = 3600;
        sprintf(reply,"%d", arcSec);
        *numericReply = false;
    } else *commandError = CE_CMD_UNKNOWN;
    7b68:	2302      	movs	r3, #2
  } else return false;

  return true;
    7b6a:	2001      	movs	r0, #1
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; *commandError = CE_PARAM_RANGE; }
    7b6c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    7b6e:	7013      	strb	r3, [r2, #0]
    7b70:	e076      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    if (command[1] == 'T') {
    7b72:	7853      	ldrb	r3, [r2, #1]
    7b74:	2b54      	cmp	r3, #84	; 0x54
    7b76:	f000 8181 	beq.w	7e7c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x35c>
    if (command[1] == 'E' && parameter[0] == 'O' && parameter[1] == 0) {
    7b7a:	2b45      	cmp	r3, #69	; 0x45
    7b7c:	f000 813d 	beq.w	7dfa <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2da>
    if (command[1] == 'X') {
    7b80:	2b58      	cmp	r3, #88	; 0x58
    7b82:	d16c      	bne.n	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (parameter[2] != ',') { *commandError = CE_PARAM_FORM; return true; }
    7b84:	78a3      	ldrb	r3, [r4, #2]
    7b86:	2b2c      	cmp	r3, #44	; 0x2c
    7b88:	f040 80a6 	bne.w	7cd8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b8>
      if (parameter[0] == '4') {
    7b8c:	7823      	ldrb	r3, [r4, #0]
    7b8e:	2b34      	cmp	r3, #52	; 0x34
    7b90:	f000 832c 	beq.w	81ec <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6cc>
      if (parameter[0] == 'E' && parameter[1] == 'M') {
    7b94:	2b45      	cmp	r3, #69	; 0x45
    7b96:	f000 844f 	beq.w	8438 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x918>
      if (parameter[0] == 'T' && parameter[1] == 'D') {
    7b9a:	2b54      	cmp	r3, #84	; 0x54
    7b9c:	d15f      	bne.n	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    7b9e:	7863      	ldrb	r3, [r4, #1]
    7ba0:	2b44      	cmp	r3, #68	; 0x44
    7ba2:	f000 859c 	beq.w	86de <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xbbe>
      if (parameter[0] == 'T' && parameter[1] == 'R') {
    7ba6:	2b52      	cmp	r3, #82	; 0x52
    7ba8:	d159      	bne.n	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
        float f = strtod(&parameter[3], &conv_end);
    7baa:	a91a      	add	r1, sp, #104	; 0x68
    7bac:	1ce0      	adds	r0, r4, #3
    7bae:	f017 f8df 	bl	1ed70 <strtod>
    7bb2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        if (f < -1800.0F) f = -1800.0F;
    7bb6:	eddf 7a9c 	vldr	s15, [pc, #624]	; 7e28 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x308>
    7bba:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bc2:	f100 8588 	bmi.w	86d6 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xbb6>
        if (f > 1800.0F) f = 1800.0F;
    7bc6:	eddf 7a99 	vldr	s15, [pc, #612]	; 7e2c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>
    7bca:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bd2:	f340 8619 	ble.w	8808 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    7bd6:	eddf 7a96 	vldr	s15, [pc, #600]	; 7e30 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x310>
  return true;
    7bda:	2001      	movs	r0, #1
        trackingRateOffsetRA = f/15.0F;
    7bdc:	edc6 7a04 	vstr	s15, [r6, #16]
      } else return false;
    7be0:	e03e      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    if (command[1] == 'A' && (parameter[0] == 0 || parameter[1] == 0)) {
    7be2:	7853      	ldrb	r3, [r2, #1]
    7be4:	2b41      	cmp	r3, #65	; 0x41
    7be6:	f000 80d4 	beq.w	7d92 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x272>
    if (command[1] == 'D' && (parameter[0] == 0 || parameter[1] == 0)) {
    7bea:	2b44      	cmp	r3, #68	; 0x44
    7bec:	d03c      	beq.n	7c68 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x148>
    if (command[1] == 'R' && (parameter[0] == 0 || parameter[1] == 0)) {
    7bee:	2b52      	cmp	r3, #82	; 0x52
    7bf0:	f000 80da 	beq.w	7da8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x288>
    if (command[1] == 'T' && parameter[0] == 0)  {
    7bf4:	2b54      	cmp	r3, #84	; 0x54
    7bf6:	f000 82b4 	beq.w	8162 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x642>
    if (command[1] == 'X' && parameter[2] == 0)  {
    7bfa:	2b58      	cmp	r3, #88	; 0x58
    7bfc:	f000 8174 	beq.w	7ee8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3c8>
    if (command[1] == 'Z' && (parameter[0] == 0 || parameter[1] == 0)) {
    7c00:	2b5a      	cmp	r3, #90	; 0x5a
    7c02:	d12c      	bne.n	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    7c04:	7823      	ldrb	r3, [r4, #0]
    7c06:	2b00      	cmp	r3, #0
    7c08:	f000 82df 	beq.w	81ca <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6aa>
    7c0c:	7862      	ldrb	r2, [r4, #1]
    7c0e:	bb32      	cbnz	r2, 7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    7c10:	2b48      	cmp	r3, #72	; 0x48
    7c12:	d161      	bne.n	7cd8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b8>
    7c14:	2403      	movs	r4, #3
      double z = getPosition(CR_MOUNT_HOR).z;
    7c16:	2203      	movs	r2, #3
    7c18:	4631      	mov	r1, r6
    7c1a:	a81a      	add	r0, sp, #104	; 0x68
    7c1c:	f001 f954 	bl	8ec8 <Mount::getPosition(CoordReturn)>
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7c20:	4b84      	ldr	r3, [pc, #528]	; (7e34 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
    7c22:	781b      	ldrb	r3, [r3, #0]
    7c24:	3b04      	subs	r3, #4
    7c26:	2b01      	cmp	r3, #1
      double z = getPosition(CR_MOUNT_HOR).z;
    7c28:	ed9d 0b22 	vldr	d0, [sp, #136]	; 0x88
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7c2c:	f240 8418 	bls.w	8460 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x940>
      convert.doubleToDms(reply, NormalizeAzimuth(radToDeg(z)), true, false, precisionMode);
    7c30:	ed9f 7b77 	vldr	d7, [pc, #476]	; 7e10 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
    7c34:	ee20 0b07 	vmul.f64	d0, d0, d7
    7c38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    7c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c40:	d503      	bpl.n	7c4a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x12a>
    7c42:	ed9f 7b75 	vldr	d7, [pc, #468]	; 7e18 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f8>
    7c46:	ee30 0b07 	vadd.f64	d0, d0, d7
    7c4a:	2300      	movs	r3, #0
    7c4c:	2201      	movs	r2, #1
    7c4e:	4629      	mov	r1, r5
    7c50:	4879      	ldr	r0, [pc, #484]	; (7e38 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x318>)
    7c52:	9400      	str	r4, [sp, #0]
    7c54:	e036      	b.n	7cc4 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a4>
  if (command[0] == '$' && command[1] == 'B') {
    7c56:	7853      	ldrb	r3, [r2, #1]
    7c58:	2b42      	cmp	r3, #66	; 0x42
    7c5a:	f000 829b 	beq.w	8194 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x674>
    } else return false;
    7c5e:	2000      	movs	r0, #0
}
    7c60:	b031      	add	sp, #196	; 0xc4
    7c62:	ecbd 8b02 	vpop	{d8}
    7c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (command[1] == 'D' && (parameter[0] == 0 || parameter[1] == 0)) {
    7c68:	7823      	ldrb	r3, [r4, #0]
    7c6a:	2b00      	cmp	r3, #0
    7c6c:	f000 813a 	beq.w	7ee4 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3c4>
    7c70:	7862      	ldrb	r2, [r4, #1]
    7c72:	2a00      	cmp	r2, #0
    7c74:	d1f3      	bne.n	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (parameter[0] == 'H' || parameter[0] == 'e') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    7c76:	2b48      	cmp	r3, #72	; 0x48
    7c78:	d001      	beq.n	7c7e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x15e>
    7c7a:	2b65      	cmp	r3, #101	; 0x65
    7c7c:	d12c      	bne.n	7cd8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b8>
    7c7e:	2403      	movs	r4, #3
      double d = getPosition().d;
    7c80:	2201      	movs	r2, #1
    7c82:	4631      	mov	r1, r6
    7c84:	a81a      	add	r0, sp, #104	; 0x68
    7c86:	f001 f91f 	bl	8ec8 <Mount::getPosition(CoordReturn)>
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7c8a:	4b6a      	ldr	r3, [pc, #424]	; (7e34 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	3b04      	subs	r3, #4
    7c90:	2b01      	cmp	r3, #1
      double d = getPosition().d;
    7c92:	ed9d 7b1e 	vldr	d7, [sp, #120]	; 0x78
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7c96:	d80c      	bhi.n	7cb2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x192>
          Coordinate homePosition = home.getPosition();
    7c98:	2201      	movs	r2, #1
    7c9a:	4968      	ldr	r1, [pc, #416]	; (7e3c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x31c>)
    7c9c:	a804      	add	r0, sp, #16
    7c9e:	f007 fb83 	bl	f3a8 <Home::getPosition(CoordReturn)>
          d = transform.mountToNative(&homePosition).d;
    7ca2:	2300      	movs	r3, #0
    7ca4:	aa04      	add	r2, sp, #16
    7ca6:	a81a      	add	r0, sp, #104	; 0x68
    7ca8:	4965      	ldr	r1, [pc, #404]	; (7e40 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>)
    7caa:	f003 fee1 	bl	ba70 <Transform::mountToNative(Coordinate*, bool)>
    7cae:	ed9d 7b1e 	vldr	d7, [sp, #120]	; 0x78
      convert.doubleToDms(reply, radToDeg(d), false, true, precisionMode);
    7cb2:	ed9f 0b57 	vldr	d0, [pc, #348]	; 7e10 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
    7cb6:	2301      	movs	r3, #1
    7cb8:	2200      	movs	r2, #0
    7cba:	4629      	mov	r1, r5
    7cbc:	485e      	ldr	r0, [pc, #376]	; (7e38 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x318>)
    7cbe:	ee27 0b00 	vmul.f64	d0, d7, d0
    7cc2:	9400      	str	r4, [sp, #0]
      convert.doubleToDms(reply, NormalizeAzimuth(radToDeg(z)), true, false, precisionMode);
    7cc4:	f7fc faf8 	bl	42b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>
      *numericReply = false;
    7cc8:	2300      	movs	r3, #0
  return true;
    7cca:	2001      	movs	r0, #1
      *numericReply = false;
    7ccc:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    7cce:	7013      	strb	r3, [r2, #0]
}
    7cd0:	b031      	add	sp, #196	; 0xc4
    7cd2:	ecbd 8b02 	vpop	{d8}
    7cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    7cd8:	2305      	movs	r3, #5
    7cda:	2001      	movs	r0, #1
    7cdc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    7cde:	7013      	strb	r3, [r2, #0]
}
    7ce0:	b031      	add	sp, #196	; 0xc4
    7ce2:	ecbd 8b02 	vpop	{d8}
    7ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (command[0] == 'T' && parameter[0] == 0) {
    7ce8:	7823      	ldrb	r3, [r4, #0]
    7cea:	2b00      	cmp	r3, #0
    7cec:	d1b7      	bne.n	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    if (command[1] == 'o') { settings.rc = RC_MODEL; } else
    7cee:	7853      	ldrb	r3, [r2, #1]
    7cf0:	2b6f      	cmp	r3, #111	; 0x6f
    7cf2:	f000 8171 	beq.w	7fd8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4b8>
    if (command[1] == 'r') { settings.rc = RC_REFRACTION; } else
    7cf6:	3b2b      	subs	r3, #43	; 0x2b
    7cf8:	2b47      	cmp	r3, #71	; 0x47
    7cfa:	f200 811e 	bhi.w	7f3a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x41a>
    7cfe:	e8df f013 	tbh	[pc, r3, lsl #1]
    7d02:	01c0      	.short	0x01c0
    7d04:	021b011c 	.word	0x021b011c
    7d08:	011c011c 	.word	0x011c011c
    7d0c:	0166011c 	.word	0x0166011c
    7d10:	011c01b7 	.word	0x011c01b7
    7d14:	011c011c 	.word	0x011c011c
    7d18:	011c011c 	.word	0x011c011c
    7d1c:	011c011c 	.word	0x011c011c
    7d20:	011c011c 	.word	0x011c011c
    7d24:	011c011c 	.word	0x011c011c
    7d28:	011c011c 	.word	0x011c011c
    7d2c:	011c011c 	.word	0x011c011c
    7d30:	011c011c 	.word	0x011c011c
    7d34:	011c011c 	.word	0x011c011c
    7d38:	011c011c 	.word	0x011c011c
    7d3c:	011c011c 	.word	0x011c011c
    7d40:	01b2011c 	.word	0x01b2011c
    7d44:	011c01ad 	.word	0x011c01ad
    7d48:	011c011c 	.word	0x011c011c
    7d4c:	01a2011c 	.word	0x01a2011c
    7d50:	020f0214 	.word	0x020f0214
    7d54:	011c011c 	.word	0x011c011c
    7d58:	011c011c 	.word	0x011c011c
    7d5c:	011c011c 	.word	0x011c011c
    7d60:	011c011c 	.word	0x011c011c
    7d64:	011c011c 	.word	0x011c011c
    7d68:	011c011c 	.word	0x011c011c
    7d6c:	011c011c 	.word	0x011c011c
    7d70:	011c011c 	.word	0x011c011c
    7d74:	01d501e0 	.word	0x01d501e0
    7d78:	011c011c 	.word	0x011c011c
    7d7c:	011c011c 	.word	0x011c011c
    7d80:	011c011c 	.word	0x011c011c
    7d84:	011c011c 	.word	0x011c011c
    7d88:	011c019f 	.word	0x011c019f
    7d8c:	011c011c 	.word	0x011c011c
    7d90:	0195      	.short	0x0195
    if (command[1] == 'A' && (parameter[0] == 0 || parameter[1] == 0)) {
    7d92:	7823      	ldrb	r3, [r4, #0]
    7d94:	2b00      	cmp	r3, #0
    7d96:	d055      	beq.n	7e44 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x324>
    7d98:	7862      	ldrb	r2, [r4, #1]
    7d9a:	2a00      	cmp	r2, #0
    7d9c:	f47f af5f 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    7da0:	2b48      	cmp	r3, #72	; 0x48
    7da2:	d199      	bne.n	7cd8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b8>
    7da4:	2403      	movs	r4, #3
    7da6:	e04e      	b.n	7e46 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x326>
    if (command[1] == 'R' && (parameter[0] == 0 || parameter[1] == 0)) {
    7da8:	7823      	ldrb	r3, [r4, #0]
    7daa:	2b00      	cmp	r3, #0
    7dac:	f000 80f7 	beq.w	7f9e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x47e>
    7db0:	7862      	ldrb	r2, [r4, #1]
    7db2:	2a00      	cmp	r2, #0
    7db4:	f47f af53 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (parameter[0] == 'H' || parameter[0] == 'a') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    7db8:	2b48      	cmp	r3, #72	; 0x48
    7dba:	d001      	beq.n	7dc0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2a0>
    7dbc:	2b61      	cmp	r3, #97	; 0x61
    7dbe:	d18b      	bne.n	7cd8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b8>
    7dc0:	2403      	movs	r4, #3
      double r = getPosition().r;
    7dc2:	2201      	movs	r2, #1
    7dc4:	4631      	mov	r1, r6
    7dc6:	a81a      	add	r0, sp, #104	; 0x68
    7dc8:	f001 f87e 	bl	8ec8 <Mount::getPosition(CoordReturn)>
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7dcc:	4b19      	ldr	r3, [pc, #100]	; (7e34 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
    7dce:	781b      	ldrb	r3, [r3, #0]
    7dd0:	3b04      	subs	r3, #4
    7dd2:	2b01      	cmp	r3, #1
      double r = getPosition().r;
    7dd4:	ed9d 7b1a 	vldr	d7, [sp, #104]	; 0x68
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7dd8:	f240 82ef 	bls.w	83ba <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x89a>
      convert.doubleToHms(reply, radToHrs(r), false, precisionMode);
    7ddc:	4623      	mov	r3, r4
    7dde:	2200      	movs	r2, #0
    7de0:	4815      	ldr	r0, [pc, #84]	; (7e38 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x318>)
    7de2:	4629      	mov	r1, r5
    7de4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 7e20 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>
    7de8:	ee27 0b00 	vmul.f64	d0, d7, d0
    7dec:	f7fc f9a0 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
      *numericReply = false;
    7df0:	2300      	movs	r3, #0
    7df2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
  return true;
    7df4:	2001      	movs	r0, #1
      *numericReply = false;
    7df6:	7013      	strb	r3, [r2, #0]
    } else
    7df8:	e732      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    if (command[1] == 'E' && parameter[0] == 'O' && parameter[1] == 0) {
    7dfa:	7823      	ldrb	r3, [r4, #0]
    7dfc:	2b4f      	cmp	r3, #79	; 0x4f
    7dfe:	f47f af2e 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    7e02:	7863      	ldrb	r3, [r4, #1]
    7e04:	2b00      	cmp	r3, #0
    7e06:	f47f af2a 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
  return true;
    7e0a:	2001      	movs	r0, #1
          break; }
    7e0c:	e728      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    7e0e:	bf00      	nop
    7e10:	1a63c1f8 	.word	0x1a63c1f8
    7e14:	404ca5dc 	.word	0x404ca5dc
    7e18:	00000000 	.word	0x00000000
    7e1c:	40768000 	.word	0x40768000
    7e20:	a4aeacc4 	.word	0xa4aeacc4
    7e24:	400e8ec8 	.word	0x400e8ec8
    7e28:	c4e10000 	.word	0xc4e10000
    7e2c:	44e10000 	.word	0x44e10000
    7e30:	42f00000 	.word	0x42f00000
    7e34:	200043e8 	.word	0x200043e8
    7e38:	200043d0 	.word	0x200043d0
    7e3c:	20005478 	.word	0x20005478
    7e40:	200064ac 	.word	0x200064ac
  PrecisionMode precisionMode = PM_HIGH;
    7e44:	2402      	movs	r4, #2
      double a = getPosition(CR_MOUNT_ALT).a;
    7e46:	2202      	movs	r2, #2
    7e48:	4631      	mov	r1, r6
    7e4a:	a81a      	add	r0, sp, #104	; 0x68
    7e4c:	f001 f83c 	bl	8ec8 <Mount::getPosition(CoordReturn)>
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7e50:	4ba9      	ldr	r3, [pc, #676]	; (80f8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5d8>)
    7e52:	781b      	ldrb	r3, [r3, #0]
    7e54:	3b04      	subs	r3, #4
    7e56:	2b01      	cmp	r3, #1
      double a = getPosition(CR_MOUNT_ALT).a;
    7e58:	ed9d 7b20 	vldr	d7, [sp, #128]	; 0x80
        if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) {
    7e5c:	f63f af29 	bhi.w	7cb2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x192>
          Coordinate homePosition = home.getPosition(CR_MOUNT_ALT);
    7e60:	2202      	movs	r2, #2
    7e62:	49a6      	ldr	r1, [pc, #664]	; (80fc <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5dc>)
    7e64:	a804      	add	r0, sp, #16
    7e66:	f007 fa9f 	bl	f3a8 <Home::getPosition(CoordReturn)>
          a = transform.mountToNative(&homePosition).a;
    7e6a:	2300      	movs	r3, #0
    7e6c:	aa04      	add	r2, sp, #16
    7e6e:	a81a      	add	r0, sp, #104	; 0x68
    7e70:	49a3      	ldr	r1, [pc, #652]	; (8100 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e0>)
    7e72:	f003 fdfd 	bl	ba70 <Transform::mountToNative(Coordinate*, bool)>
    7e76:	ed9d 7b20 	vldr	d7, [sp, #128]	; 0x80
    7e7a:	e71a      	b.n	7cb2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x192>
      double f = strtod(parameter,&conv_end);
    7e7c:	a91a      	add	r1, sp, #104	; 0x68
    7e7e:	4620      	mov	r0, r4
    7e80:	f016 ff76 	bl	1ed70 <strtod>
      if (&parameter[0] != conv_end && ((f >= 30.0 && f < 90.0) || fabs(f) < 0.1)) {
    7e84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7e86:	42a3      	cmp	r3, r4
    7e88:	f000 817f 	beq.w	818a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x66a>
    7e8c:	eeb3 7b0e 	vmov.f64	d7, #62	; 0x41f00000  30.0
    7e90:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e98:	f2c0 8199 	blt.w	81ce <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6ae>
    7e9c:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 80d0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5b0>
    7ea0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    7ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ea8:	f140 8191 	bpl.w	81ce <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6ae>
        if (fabs(f) < 0.1) tracking(false); else {
    7eac:	eeb0 7bc0 	vabs.f64	d7, d0
    7eb0:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80d8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5b8>
    7eb4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    7eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ebc:	f100 8190 	bmi.w	81e0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c0>
            if (park.state != PS_PARKED) {
    7ec0:	4b90      	ldr	r3, [pc, #576]	; (8104 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e4>)
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	2b02      	cmp	r3, #2
    7ec6:	d0a0      	beq.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
              tracking(true);
    7ec8:	4630      	mov	r0, r6
    7eca:	2101      	movs	r1, #1
              trackingRate = hzToSidereal(f);
    7ecc:	ed9f 6b84 	vldr	d6, [pc, #528]	; 80e0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5c0>
    7ed0:	ee80 7b06 	vdiv.f64	d7, d0, d6
    7ed4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    7ed8:	ed86 7a01 	vstr	s14, [r6, #4]
              tracking(true);
    7edc:	f000 fdec 	bl	8ab8 <Mount::tracking(bool)>
  return true;
    7ee0:	2001      	movs	r0, #1
    7ee2:	e6bd      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
  PrecisionMode precisionMode = PM_HIGH;
    7ee4:	2402      	movs	r4, #2
    7ee6:	e6cb      	b.n	7c80 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x160>
    if (command[1] == 'X' && parameter[2] == 0)  {
    7ee8:	78a3      	ldrb	r3, [r4, #2]
    7eea:	2b00      	cmp	r3, #0
    7eec:	f47f aeb7 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (parameter[0] == '4')  {
    7ef0:	7822      	ldrb	r2, [r4, #0]
    7ef2:	2a34      	cmp	r2, #52	; 0x34
    7ef4:	f000 82c3 	beq.w	847e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x95e>
      if (parameter[0] == 'E')  {
    7ef8:	2a45      	cmp	r2, #69	; 0x45
    7efa:	f000 82fd 	beq.w	84f8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9d8>
      if (parameter[0] == 'F')  {
    7efe:	2a46      	cmp	r2, #70	; 0x46
    7f00:	f000 8366 	beq.w	85d0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xab0>
      if (parameter[0] == 'T' && parameter[1] == 'D' && parameter[2] == 0) {
    7f04:	2a54      	cmp	r2, #84	; 0x54
    7f06:	f47f aeaa 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    7f0a:	7863      	ldrb	r3, [r4, #1]
    7f0c:	2b44      	cmp	r3, #68	; 0x44
    7f0e:	f000 8473 	beq.w	87f8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcd8>
      if (parameter[0] == 'T' && parameter[1] == 'R' && parameter[2] == 0) {
    7f12:	2b52      	cmp	r3, #82	; 0x52
    7f14:	f47f aea3 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
        sprintF(reply, "%0.8f", trackingRateOffsetRA*15.0F);
    7f18:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    7f1c:	ed90 0a04 	vldr	s0, [r0, #16]
    7f20:	ee20 0a27 	vmul.f32	s0, s0, s15
    7f24:	4978      	ldr	r1, [pc, #480]	; (8108 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e8>)
    7f26:	4628      	mov	r0, r5
    7f28:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    7f2c:	f7fc f884 	bl	4038 <sprintF(char*, char const*, double)>
        *numericReply = false;
    7f30:	2300      	movs	r3, #0
    7f32:	9a39      	ldr	r2, [sp, #228]	; 0xe4
  return true;
    7f34:	2001      	movs	r0, #1
        *numericReply = false;
    7f36:	7013      	strb	r3, [r2, #0]
    7f38:	e692      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    if (command[1] == 'o') { settings.rc = RC_MODEL; } else
    7f3a:	2302      	movs	r3, #2
    // refraction at altitude, pressure (millibars), and temperature (celsius)
    // returns the amount of refraction at the apparent altitude
    double apparentRefrac(double altitude);

    // flag if this mount is equatorial or not
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    7f3c:	4970      	ldr	r1, [pc, #448]	; (8100 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e0>)
    } else *commandError = CE_CMD_UNKNOWN;
    7f3e:	983a      	ldr	r0, [sp, #232]	; 0xe8
    7f40:	7003      	strb	r3, [r0, #0]
    7f42:	f891 35c4 	ldrb.w	r3, [r1, #1476]	; 0x5c4
    if (!transform.isEquatorial()) {
    7f46:	3b01      	subs	r3, #1
    7f48:	2b01      	cmp	r3, #1
    7f4a:	f67f af5e 	bls.w	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
      if (settings.rc == RC_MODEL) settings.rc = RC_MODEL_DUAL;
    7f4e:	7e33      	ldrb	r3, [r6, #24]
    7f50:	2b03      	cmp	r3, #3
    7f52:	d049      	beq.n	7fe8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c8>
      if (settings.rc == RC_REFRACTION) settings.rc = RC_REFRACTION_DUAL;
    7f54:	2b01      	cmp	r3, #1
    7f56:	d101      	bne.n	7f5c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x43c>
    7f58:	2302      	movs	r3, #2
    7f5a:	7633      	strb	r3, [r6, #24]
    if (*commandError == CE_NONE) {
    7f5c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    7f5e:	781b      	ldrb	r3, [r3, #0]
    7f60:	2b00      	cmp	r3, #0
    7f62:	f47f af52 	bne.w	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
      switch (command[1]) { case 'S': case 'K': case 'L': case 'Q': case '+': case '-': case 'R': *numericReply = false; }
    7f66:	7853      	ldrb	r3, [r2, #1]
    7f68:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
    7f6c:	2928      	cmp	r1, #40	; 0x28
    7f6e:	d81c      	bhi.n	7faa <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x48a>
    7f70:	e8df f001 	tbb	[pc, r1]
    7f74:	1b171b17 	.word	0x1b171b17
    7f78:	1b1b1b1b 	.word	0x1b1b1b1b
    7f7c:	1b1b1b1b 	.word	0x1b1b1b1b
    7f80:	1b1b1b1b 	.word	0x1b1b1b1b
    7f84:	1b1b1b1b 	.word	0x1b1b1b1b
    7f88:	1b1b1b1b 	.word	0x1b1b1b1b
    7f8c:	1b1b1b1b 	.word	0x1b1b1b1b
    7f90:	1b1b1b1b 	.word	0x1b1b1b1b
    7f94:	1b1b1717 	.word	0x1b1b1717
    7f98:	17171b1b 	.word	0x17171b1b
    7f9c:	17          	.byte	0x17
    7f9d:	00          	.byte	0x00
  PrecisionMode precisionMode = PM_HIGH;
    7f9e:	2402      	movs	r4, #2
    7fa0:	e70f      	b.n	7dc2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2a2>
      switch (command[1]) { case 'S': case 'K': case 'L': case 'Q': case '+': case '-': case 'R': *numericReply = false; }
    7fa2:	2300      	movs	r3, #0
    7fa4:	9939      	ldr	r1, [sp, #228]	; 0xe4
    7fa6:	700b      	strb	r3, [r1, #0]
      switch (command[1]) { case 'o': case 'r': case 'n': trackingRate = hzToSidereal(SIDEREAL_RATE_HZ); }
    7fa8:	7853      	ldrb	r3, [r2, #1]
    7faa:	2b6f      	cmp	r3, #111	; 0x6f
    7fac:	f200 80e6 	bhi.w	817c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x65c>
    7fb0:	2b6d      	cmp	r3, #109	; 0x6d
    7fb2:	f200 80e6 	bhi.w	8182 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x662>
      nv.updateBytes(NV_MOUNT_SETTINGS_BASE, &settings, sizeof(MountSettings));
    7fb6:	2309      	movs	r3, #9
    7fb8:	f106 0218 	add.w	r2, r6, #24
    7fbc:	21b5      	movs	r1, #181	; 0xb5
    7fbe:	4853      	ldr	r0, [pc, #332]	; (810c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5ec>)
    7fc0:	f7fd f854 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
      update();
    7fc4:	4630      	mov	r0, r6
    7fc6:	f000 fc8f 	bl	88e8 <Mount::update()>
  return true;
    7fca:	2001      	movs	r0, #1
    7fcc:	e648      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
      if (settings.rc == RC_REFRACTION_DUAL) settings.rc = RC_REFRACTION; else
    7fce:	7e03      	ldrb	r3, [r0, #24]
    7fd0:	2b02      	cmp	r3, #2
    7fd2:	d02b      	beq.n	802c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50c>
      if (settings.rc == RC_MODEL_DUAL) settings.rc = RC_MODEL;
    7fd4:	2b04      	cmp	r3, #4
    7fd6:	d139      	bne.n	804c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
    if (command[1] == 'o') { settings.rc = RC_MODEL; } else
    7fd8:	2103      	movs	r1, #3
    7fda:	4b49      	ldr	r3, [pc, #292]	; (8100 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e0>)
    7fdc:	7631      	strb	r1, [r6, #24]
    7fde:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
    if (!transform.isEquatorial()) {
    7fe2:	3b01      	subs	r3, #1
    7fe4:	2b01      	cmp	r3, #1
    7fe6:	d9b9      	bls.n	7f5c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x43c>
      if (settings.rc == RC_MODEL) settings.rc = RC_MODEL_DUAL;
    7fe8:	2304      	movs	r3, #4
    7fea:	7633      	strb	r3, [r6, #24]
      if (settings.rc == RC_REFRACTION) settings.rc = RC_REFRACTION_DUAL;
    7fec:	e7b6      	b.n	7f5c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x43c>
        int arcSec = round(radToArcsec(settings.backlash.axis2));
    7fee:	f8d0 301d 	ldr.w	r3, [r0, #29]
        int arcSec = round(radToArcsec(settings.backlash.axis1));
    7ff2:	ee07 3a10 	vmov	s14, r3
        sprintf(reply,"%d", arcSec);
    7ff6:	4946      	ldr	r1, [pc, #280]	; (8110 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5f0>)
    7ff8:	4628      	mov	r0, r5
        int arcSec = round(radToArcsec(settings.backlash.axis1));
    7ffa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7ffe:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80e8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5c8>
    8002:	ee27 7b06 	vmul.f64	d7, d7, d6
    8006:	feb8 7b47 	vrinta.f64	d7, d7
    800a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    800e:	ee17 2a90 	vmov	r2, s15
        sprintf(reply,"%d", arcSec);
    8012:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
    8016:	bfa8      	it	ge
    8018:	f44f 6261 	movge.w	r2, #3600	; 0xe10
    801c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8020:	f016 ff66 	bl	1eef0 <sprintf>
        *numericReply = false;
    8024:	9b39      	ldr	r3, [sp, #228]	; 0xe4
  return true;
    8026:	2001      	movs	r0, #1
        *numericReply = false;
    8028:	701f      	strb	r7, [r3, #0]
    802a:	e619      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
      if (settings.rc == RC_REFRACTION_DUAL) settings.rc = RC_REFRACTION; else
    802c:	2301      	movs	r3, #1
    802e:	7633      	strb	r3, [r6, #24]
    8030:	4b33      	ldr	r3, [pc, #204]	; (8100 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e0>)
    8032:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
    if (!transform.isEquatorial()) {
    8036:	3b01      	subs	r3, #1
    8038:	2b01      	cmp	r3, #1
    803a:	d98f      	bls.n	7f5c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x43c>
      if (settings.rc == RC_REFRACTION) settings.rc = RC_REFRACTION_DUAL;
    803c:	7e33      	ldrb	r3, [r6, #24]
    803e:	e789      	b.n	7f54 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x434>
    if (command[1] == 'n') { settings.rc = RC_NONE; } else
    8040:	2300      	movs	r3, #0
    8042:	7603      	strb	r3, [r0, #24]
    8044:	e7f4      	b.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
    if (command[1] == 'Q') { trackingRate = hzToSidereal(SIDEREAL_RATE_HZ); } else
    8046:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    804a:	6043      	str	r3, [r0, #4]
    804c:	4b2c      	ldr	r3, [pc, #176]	; (8100 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e0>)
    804e:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
    if (!transform.isEquatorial()) {
    8052:	3b01      	subs	r3, #1
    8054:	2b01      	cmp	r3, #1
    8056:	f63f af7a 	bhi.w	7f4e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42e>
    805a:	e77f      	b.n	7f5c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x43c>
    if (command[1] == 'L') { settings.rc = RC_NONE; trackingRate = hzToSidereal(LUNAR_RATE_HZ); } else
    805c:	2100      	movs	r1, #0
    805e:	4b2d      	ldr	r3, [pc, #180]	; (8114 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5f4>)
    8060:	7601      	strb	r1, [r0, #24]
    8062:	6043      	str	r3, [r0, #4]
    8064:	e7e4      	b.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
    if (command[1] == 'K') { settings.rc = RC_NONE; trackingRate = hzToSidereal(KING_RATE_HZ); } else
    8066:	2100      	movs	r1, #0
    8068:	4b2b      	ldr	r3, [pc, #172]	; (8118 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5f8>)
    806a:	7601      	strb	r1, [r0, #24]
    806c:	6043      	str	r3, [r0, #4]
    806e:	e7df      	b.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
      if (settings.rc == RC_REFRACTION) settings.rc = RC_REFRACTION_DUAL; else
    8070:	7e03      	ldrb	r3, [r0, #24]
    8072:	2b01      	cmp	r3, #1
    8074:	f000 83aa 	beq.w	87cc <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcac>
      if (settings.rc == RC_MODEL) settings.rc = RC_MODEL_DUAL;
    8078:	2b03      	cmp	r3, #3
    807a:	d1d9      	bne.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
    807c:	2304      	movs	r3, #4
    807e:	7603      	strb	r3, [r0, #24]
    8080:	e7d6      	b.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
    if (command[1] == '+') { site.setSiderealPeriod(site.getSiderealPeriod() - hzToSubMicros(0.02F)); } else
    8082:	4826      	ldr	r0, [pc, #152]	; (811c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5fc>)
    8084:	9203      	str	r2, [sp, #12]
    8086:	f00b fa35 	bl	134f4 <Site::getSiderealPeriod()>
    808a:	ee07 0a10 	vmov	s14, r0
    808e:	4823      	ldr	r0, [pc, #140]	; (811c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5fc>)
    8090:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80f0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5d0>
    8094:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    8098:	ee37 7b46 	vsub.f64	d7, d7, d6
    809c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    80a0:	ee17 1a90 	vmov	r1, s15
    80a4:	f00b fa2a 	bl	134fc <Site::setSiderealPeriod(unsigned long)>
    80a8:	9a03      	ldr	r2, [sp, #12]
    80aa:	e7cf      	b.n	804c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
        if (park.state != PS_PARKED) {
    80ac:	4b15      	ldr	r3, [pc, #84]	; (8104 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e4>)
    80ae:	781b      	ldrb	r3, [r3, #0]
    80b0:	2b02      	cmp	r3, #2
    80b2:	f000 8332 	beq.w	871a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xbfa>
      tracking(true);
    80b6:	2101      	movs	r1, #1
    80b8:	9203      	str	r2, [sp, #12]
    80ba:	f000 fcfd 	bl	8ab8 <Mount::tracking(bool)>
    80be:	9a03      	ldr	r2, [sp, #12]
    80c0:	e7c4      	b.n	804c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
      tracking(false);
    80c2:	2100      	movs	r1, #0
    80c4:	9203      	str	r2, [sp, #12]
    80c6:	f000 fcf7 	bl	8ab8 <Mount::tracking(bool)>
    80ca:	9a03      	ldr	r2, [sp, #12]
    80cc:	e7be      	b.n	804c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
    80ce:	bf00      	nop
    80d0:	00000000 	.word	0x00000000
    80d4:	40568000 	.word	0x40568000
    80d8:	9999999a 	.word	0x9999999a
    80dc:	3fb99999 	.word	0x3fb99999
    80e0:	f2e5a1df 	.word	0xf2e5a1df
    80e4:	404e1506 	.word	0x404e1506
    80e8:	7331ad79 	.word	0x7331ad79
    80ec:	41092dc6 	.word	0x41092dc6
    80f0:	4d85555c 	.word	0x4d85555c
    80f4:	40b4d555 	.word	0x40b4d555
    80f8:	200043e8 	.word	0x200043e8
    80fc:	20005478 	.word	0x20005478
    8100:	200064ac 	.word	0x200064ac
    8104:	20005ea8 	.word	0x20005ea8
    8108:	20002258 	.word	0x20002258
    810c:	20005e50 	.word	0x20005e50
    8110:	2000224c 	.word	0x2000224c
    8114:	3f765d90 	.word	0x3f765d90
    8118:	3f7fe133 	.word	0x3f7fe133
    811c:	200055d0 	.word	0x200055d0
    if (command[1] == 'S') { settings.rc = RC_NONE; trackingRate = hzToSidereal(SOLAR_RATE_HZ); } else
    8120:	2100      	movs	r1, #0
    8122:	4bb7      	ldr	r3, [pc, #732]	; (8400 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e0>)
    8124:	7601      	strb	r1, [r0, #24]
    8126:	6043      	str	r3, [r0, #4]
    8128:	e782      	b.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
    if (command[1] == 'R') { site.setSiderealPeriod(SIDEREAL_PERIOD); } else
    812a:	49b6      	ldr	r1, [pc, #728]	; (8404 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e4>)
    812c:	48b6      	ldr	r0, [pc, #728]	; (8408 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e8>)
    812e:	9203      	str	r2, [sp, #12]
    8130:	f00b f9e4 	bl	134fc <Site::setSiderealPeriod(unsigned long)>
    8134:	9a03      	ldr	r2, [sp, #12]
    8136:	e789      	b.n	804c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
    if (command[1] == '-') { site.setSiderealPeriod(site.getSiderealPeriod() + hzToSubMicros(0.02F)); } else
    8138:	48b3      	ldr	r0, [pc, #716]	; (8408 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e8>)
    813a:	9203      	str	r2, [sp, #12]
    813c:	f00b f9da 	bl	134f4 <Site::getSiderealPeriod()>
    8140:	ee07 0a10 	vmov	s14, r0
    8144:	48b0      	ldr	r0, [pc, #704]	; (8408 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e8>)
    8146:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 83d8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8b8>
    814a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    814e:	ee37 7b06 	vadd.f64	d7, d7, d6
    8152:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    8156:	ee17 1a90 	vmov	r1, s15
    815a:	f00b f9cf 	bl	134fc <Site::setSiderealPeriod(unsigned long)>
    815e:	9a03      	ldr	r2, [sp, #12]
    8160:	e774      	b.n	804c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
    if (command[1] == 'T' && parameter[0] == 0)  {
    8162:	7823      	ldrb	r3, [r4, #0]
    8164:	2b00      	cmp	r3, #0
    8166:	f47f ad7a 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
      if (trackingState == TS_NONE) strcpy(reply,"0"); else sprintF(reply, "%0.5f", siderealToHz(trackingRate));
    816a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    816e:	2b00      	cmp	r3, #0
    8170:	f040 8116 	bne.w	83a0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x880>
    8174:	4ba5      	ldr	r3, [pc, #660]	; (840c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8ec>)
    8176:	881b      	ldrh	r3, [r3, #0]
    8178:	802b      	strh	r3, [r5, #0]
    817a:	e6d9      	b.n	7f30 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x410>
      switch (command[1]) { case 'o': case 'r': case 'n': trackingRate = hzToSidereal(SIDEREAL_RATE_HZ); }
    817c:	2b72      	cmp	r3, #114	; 0x72
    817e:	f47f af1a 	bne.w	7fb6 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x496>
    8182:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    8186:	6073      	str	r3, [r6, #4]
    8188:	e715      	b.n	7fb6 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x496>
      } else *commandError = CE_PARAM_RANGE;
    818a:	2304      	movs	r3, #4
    818c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
  return true;
    818e:	2001      	movs	r0, #1
      } else *commandError = CE_PARAM_RANGE;
    8190:	7013      	strb	r3, [r2, #0]
    8192:	e565      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    if (convert.atoi2((char*)&parameter[1], &arcSecs)) {
    8194:	2301      	movs	r3, #1
    8196:	aa1a      	add	r2, sp, #104	; 0x68
    8198:	489d      	ldr	r0, [pc, #628]	; (8410 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8f0>)
    819a:	18e1      	adds	r1, r4, r3
    819c:	f7fc f95a 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    81a0:	2800      	cmp	r0, #0
    81a2:	f000 80f9 	beq.w	8398 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x878>
      if (arcSecs >= 0 && arcSecs <= 3600) {
    81a6:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    81aa:	b29a      	uxth	r2, r3
    81ac:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
    81b0:	f200 819e 	bhi.w	84f0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9d0>
        if (parameter[0] == 'D') {
    81b4:	7822      	ldrb	r2, [r4, #0]
    81b6:	2a44      	cmp	r2, #68	; 0x44
    81b8:	f000 82ee 	beq.w	8798 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc78>
        if (parameter[0] == 'R') {
    81bc:	2a52      	cmp	r2, #82	; 0x52
    81be:	f000 8308 	beq.w	87d2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcb2>
        } else *commandError = CE_CMD_UNKNOWN;
    81c2:	2302      	movs	r3, #2
    81c4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    81c6:	7013      	strb	r3, [r2, #0]
    81c8:	e61f      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
  PrecisionMode precisionMode = PM_HIGH;
    81ca:	2402      	movs	r4, #2
    81cc:	e523      	b.n	7c16 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf6>
      if (&parameter[0] != conv_end && ((f >= 30.0 && f < 90.0) || fabs(f) < 0.1)) {
    81ce:	eeb0 0bc0 	vabs.f64	d0, d0
    81d2:	ed9f 7b83 	vldr	d7, [pc, #524]	; 83e0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8c0>
    81d6:	eeb4 0bc7 	vcmpe.f64	d0, d7
    81da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    81de:	d5d4      	bpl.n	818a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x66a>
        if (fabs(f) < 0.1) tracking(false); else {
    81e0:	4630      	mov	r0, r6
    81e2:	2100      	movs	r1, #0
    81e4:	f000 fc68 	bl	8ab8 <Mount::tracking(bool)>
  return true;
    81e8:	2001      	movs	r0, #1
    81ea:	e539      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
        switch (parameter[1]) {
    81ec:	7863      	ldrb	r3, [r4, #1]
    81ee:	3b30      	subs	r3, #48	; 0x30
    81f0:	2b04      	cmp	r3, #4
    81f2:	f63f acb9 	bhi.w	7b68 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x48>
    81f6:	e8df f003 	tbb	[pc, r3]
    81fa:	97b3      	.short	0x97b3
    81fc:	6c70      	.short	0x6c70
    81fe:	03          	.byte	0x03
    81ff:	00          	.byte	0x00
            d = strtod(&parameter[3], &conv_end);
    8200:	1ce0      	adds	r0, r4, #3
    8202:	a91a      	add	r1, sp, #104	; 0x68
    8204:	9003      	str	r0, [sp, #12]
    8206:	f016 fdb3 	bl	1ed70 <strtod>
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis1 = degToRad(d); } else { encoderAxis1 = NAN; }
    820a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    820c:	9803      	ldr	r0, [sp, #12]
    820e:	4298      	cmp	r0, r3
    8210:	f000 8291 	beq.w	8736 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc16>
    8214:	eeb0 7bc0 	vabs.f64	d7, d0
    8218:	ed9f 6b73 	vldr	d6, [pc, #460]	; 83e8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8c8>
    821c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8224:	f200 8287 	bhi.w	8736 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc16>
    8228:	ed9f 6b71 	vldr	d6, [pc, #452]	; 83f0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d0>
    822c:	ee80 7b06 	vdiv.f64	d7, d0, d6
    8230:	4d78      	ldr	r5, [pc, #480]	; (8414 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8f4>)
            char *parameter2 = strchr(&parameter[3], ','); parameter2++;
    8232:	212c      	movs	r1, #44	; 0x2c
    8234:	ed85 7b00 	vstr	d7, [r5]
    8238:	f017 f84c 	bl	1f2d4 <strchr>
    823c:	1c44      	adds	r4, r0, #1
            d = strtod(parameter2, &conv_end);
    823e:	a91a      	add	r1, sp, #104	; 0x68
    8240:	4620      	mov	r0, r4
    8242:	f016 fd95 	bl	1ed70 <strtod>
            if (parameter2 != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; }
    8246:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8248:	42a3      	cmp	r3, r4
    824a:	f000 8271 	beq.w	8730 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc10>
    824e:	eeb0 7bc0 	vabs.f64	d7, d0
    8252:	ed9f 6b65 	vldr	d6, [pc, #404]	; 83e8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8c8>
    8256:	eeb4 7bc6 	vcmpe.f64	d7, d6
    825a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    825e:	f200 8267 	bhi.w	8730 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc10>
    8262:	ed9f 6b63 	vldr	d6, [pc, #396]	; 83f0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d0>
    8266:	ee80 7b06 	vdiv.f64	d7, d0, d6
              CommandError e = goTo.validate();              
    826a:	4f6b      	ldr	r7, [pc, #428]	; (8418 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8f8>)
    826c:	4c6b      	ldr	r4, [pc, #428]	; (841c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8fc>)
    826e:	4638      	mov	r0, r7
    8270:	ed84 7b00 	vstr	d7, [r4]
    8274:	f004 fda6 	bl	cdc4 <Goto::validate()>
    8278:	4603      	mov	r3, r0
              if (e != CE_NONE && e != CE_SLEW_ERR_IN_STANDBY && e != CE_SLEW_IN_SLEW) { *commandError = e; return true; }
    827a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    827e:	2811      	cmp	r0, #17
    8280:	bf18      	it	ne
    8282:	2b00      	cmpne	r3, #0
    8284:	bf14      	ite	ne
    8286:	2001      	movne	r0, #1
    8288:	2000      	moveq	r0, #0
    828a:	f47f ac6f 	bne.w	7b6c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
            if ( isnan(encoderAxis1) ||
    828e:	ed95 0b00 	vldr	d0, [r5]
                 (goTo.state != GS_NONE && goTo.stage != GG_NEAR_DESTINATION_WAIT) ||
    8292:	eeb4 0b40 	vcmp.f64	d0, d0
    8296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    829a:	d640      	bvs.n	831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
                 isnan(encoderAxis2) ||
    829c:	ed94 7b00 	vldr	d7, [r4]
            if ( isnan(encoderAxis1) ||
    82a0:	eeb4 7b47 	vcmp.f64	d7, d7
    82a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82a8:	d639      	bvs.n	831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
                 isnan(encoderAxis2) ||
    82aa:	7833      	ldrb	r3, [r6, #0]
    82ac:	2b00      	cmp	r3, #0
    82ae:	d136      	bne.n	831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
                 syncFromOnStepToEncoders ||
    82b0:	783b      	ldrb	r3, [r7, #0]
    82b2:	b113      	cbz	r3, 82ba <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x79a>
                 (goTo.state != GS_NONE && goTo.stage != GG_NEAR_DESTINATION_WAIT) ||
    82b4:	787b      	ldrb	r3, [r7, #1]
    82b6:	2b06      	cmp	r3, #6
    82b8:	d131      	bne.n	831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
                 guide.state != GU_NONE) { *commandError = CE_0; return true; }
    82ba:	4b59      	ldr	r3, [pc, #356]	; (8420 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x900>)
                 (goTo.state != GS_NONE && goTo.stage != GG_NEAR_DESTINATION_WAIT) ||
    82bc:	781b      	ldrb	r3, [r3, #0]
    82be:	bb73      	cbnz	r3, 831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
            axis1.setInstrumentCoordinate(encoderAxis1);
    82c0:	4858      	ldr	r0, [pc, #352]	; (8424 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x904>)
    82c2:	f7f8 ff17 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
            axis2.setInstrumentCoordinate(encoderAxis2);
    82c6:	4858      	ldr	r0, [pc, #352]	; (8428 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x908>)
    82c8:	ed94 0b00 	vldr	d0, [r4]
    82cc:	f7f8 ff12 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
    82d0:	e59b      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
          case '3': syncFromOnStepToEncoders = false; break;
    82d2:	2300      	movs	r3, #0
  return true;
    82d4:	2001      	movs	r0, #1
          case '3': syncFromOnStepToEncoders = false; break;
    82d6:	7033      	strb	r3, [r6, #0]
    82d8:	e4c2      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
            if (parameter[3] == '1' && parameter[4] == 0) {
    82da:	78e3      	ldrb	r3, [r4, #3]
    82dc:	2b31      	cmp	r3, #49	; 0x31
    82de:	f47f ad94 	bne.w	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
    82e2:	7923      	ldrb	r3, [r4, #4]
    82e4:	2b00      	cmp	r3, #0
    82e6:	f47f ad90 	bne.w	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
                CommandError e = goTo.validate();
    82ea:	484b      	ldr	r0, [pc, #300]	; (8418 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8f8>)
    82ec:	f004 fd6a 	bl	cdc4 <Goto::validate()>
                if (e != CE_NONE) { *commandError = e; return true; }
    82f0:	4603      	mov	r3, r0
    82f2:	2800      	cmp	r0, #0
    82f4:	f47f ac39 	bne.w	7b6a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4a>
              if (isnan(encoderAxis1) || isnan(encoderAxis2) || syncFromOnStepToEncoders) { *commandError = CE_0; return true; }
    82f8:	4b46      	ldr	r3, [pc, #280]	; (8414 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8f4>)
    82fa:	ed93 0b00 	vldr	d0, [r3]
    82fe:	eeb4 0b40 	vcmp.f64	d0, d0
    8302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8306:	d60a      	bvs.n	831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
    8308:	4c44      	ldr	r4, [pc, #272]	; (841c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8fc>)
    830a:	ed94 7b00 	vldr	d7, [r4]
    830e:	eeb4 7b47 	vcmp.f64	d7, d7
    8312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8316:	d602      	bvs.n	831e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7fe>
    8318:	7833      	ldrb	r3, [r6, #0]
    831a:	2b00      	cmp	r3, #0
    831c:	d0d0      	beq.n	82c0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7a0>
    831e:	2301      	movs	r3, #1
    8320:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    8322:	4618      	mov	r0, r3
    8324:	7013      	strb	r3, [r2, #0]
    8326:	e49b      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
            d = strtod(&parameter[3], &conv_end);
    8328:	3403      	adds	r4, #3
    832a:	a91a      	add	r1, sp, #104	; 0x68
    832c:	4620      	mov	r0, r4
    832e:	f016 fd1f 	bl	1ed70 <strtod>
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; *commandError = CE_PARAM_RANGE; }
    8332:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8334:	429c      	cmp	r4, r3
    8336:	f000 81f2 	beq.w	871e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xbfe>
    833a:	eeb0 7bc0 	vabs.f64	d7, d0
    833e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 83e8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8c8>
    8342:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    834a:	f200 81e8 	bhi.w	871e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xbfe>
    834e:	4b33      	ldr	r3, [pc, #204]	; (841c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8fc>)
  return true;
    8350:	2001      	movs	r0, #1
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; *commandError = CE_PARAM_RANGE; }
    8352:	ed9f 6b27 	vldr	d6, [pc, #156]	; 83f0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d0>
    8356:	ee80 7b06 	vdiv.f64	d7, d0, d6
    835a:	ed83 7b00 	vstr	d7, [r3]
    835e:	e47f      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
            d = strtod(&parameter[3], &conv_end);
    8360:	3403      	adds	r4, #3
    8362:	a91a      	add	r1, sp, #104	; 0x68
    8364:	4620      	mov	r0, r4
    8366:	f016 fd03 	bl	1ed70 <strtod>
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis1 = degToRad(d); } else { encoderAxis1 = NAN; *commandError = CE_PARAM_RANGE; }
    836a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    836c:	429c      	cmp	r4, r3
    836e:	f000 81e5 	beq.w	873c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc1c>
    8372:	eeb0 7bc0 	vabs.f64	d7, d0
    8376:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 83e8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8c8>
    837a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8382:	f200 81db 	bhi.w	873c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc1c>
    8386:	4b23      	ldr	r3, [pc, #140]	; (8414 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8f4>)
  return true;
    8388:	2001      	movs	r0, #1
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis1 = degToRad(d); } else { encoderAxis1 = NAN; *commandError = CE_PARAM_RANGE; }
    838a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 83f0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d0>
    838e:	ee80 7b06 	vdiv.f64	d7, d0, d6
    8392:	ed83 7b00 	vstr	d7, [r3]
    8396:	e463      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    } else *commandError = CE_PARAM_FORM;
    8398:	2305      	movs	r3, #5
    839a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    839c:	7013      	strb	r3, [r2, #0]
    839e:	e534      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
      if (trackingState == TS_NONE) strcpy(reply,"0"); else sprintF(reply, "%0.5f", siderealToHz(trackingRate));
    83a0:	ed90 7a01 	vldr	s14, [r0, #4]
    83a4:	4628      	mov	r0, r5
    83a6:	4921      	ldr	r1, [pc, #132]	; (842c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x90c>)
    83a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    83ac:	ed9f 0b12 	vldr	d0, [pc, #72]	; 83f8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d8>
    83b0:	ee27 0b00 	vmul.f64	d0, d7, d0
    83b4:	f7fb fe40 	bl	4038 <sprintF(char*, char const*, double)>
      *numericReply = false;
    83b8:	e5ba      	b.n	7f30 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x410>
          Coordinate homePosition = home.getPosition();
    83ba:	2201      	movs	r2, #1
    83bc:	491c      	ldr	r1, [pc, #112]	; (8430 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x910>)
    83be:	a804      	add	r0, sp, #16
    83c0:	f006 fff2 	bl	f3a8 <Home::getPosition(CoordReturn)>
          r = transform.mountToNative(&homePosition).r;
    83c4:	2300      	movs	r3, #0
    83c6:	aa04      	add	r2, sp, #16
    83c8:	a81a      	add	r0, sp, #104	; 0x68
    83ca:	491a      	ldr	r1, [pc, #104]	; (8434 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x914>)
    83cc:	f003 fb50 	bl	ba70 <Transform::mountToNative(Coordinate*, bool)>
    83d0:	ed9d 7b1a 	vldr	d7, [sp, #104]	; 0x68
    83d4:	e502      	b.n	7ddc <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2bc>
    83d6:	bf00      	nop
    83d8:	4d85555c 	.word	0x4d85555c
    83dc:	40b4d555 	.word	0x40b4d555
    83e0:	9999999a 	.word	0x9999999a
    83e4:	3fb99999 	.word	0x3fb99999
    83e8:	00000000 	.word	0x00000000
    83ec:	40768000 	.word	0x40768000
    83f0:	1a63c1f8 	.word	0x1a63c1f8
    83f4:	404ca5dc 	.word	0x404ca5dc
    83f8:	f2e5a1df 	.word	0xf2e5a1df
    83fc:	404e1506 	.word	0x404e1506
    8400:	3f7f4d0f 	.word	0x3f7f4d0f
    8404:	00f37959 	.word	0x00f37959
    8408:	200055d0 	.word	0x200055d0
    840c:	20002234 	.word	0x20002234
    8410:	200043d0 	.word	0x200043d0
    8414:	20003538 	.word	0x20003538
    8418:	20005270 	.word	0x20005270
    841c:	20003540 	.word	0x20003540
    8420:	200043e8 	.word	0x200043e8
    8424:	200050e8 	.word	0x200050e8
    8428:	200051a8 	.word	0x200051a8
    842c:	20002238 	.word	0x20002238
    8430:	20005478 	.word	0x20005478
    8434:	200064ac 	.word	0x200064ac
      if (parameter[0] == 'E' && parameter[1] == 'M') {
    8438:	7863      	ldrb	r3, [r4, #1]
    843a:	2b4d      	cmp	r3, #77	; 0x4d
    843c:	f47f ac0f 	bne.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
        long l = atol(&parameter[3]);
    8440:	1ce0      	adds	r0, r4, #3
    8442:	f015 f89f 	bl	1d584 <atol>
        if (l == 0 ||
    8446:	2803      	cmp	r0, #3
    8448:	f63f ae9f 	bhi.w	818a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x66a>
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    844c:	b2c2      	uxtb	r2, r0
    844e:	21be      	movs	r1, #190	; 0xbe
    8450:	48c1      	ldr	r0, [pc, #772]	; (8758 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc38>)
    8452:	f7fc fcd5 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
  return true;
    8456:	2001      	movs	r0, #1
    inline void write(uint16_t i,  uint8_t j) { update (i,j); }
    8458:	e402      	b.n	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
        int arcSec = round(radToArcsec(settings.backlash.axis1));
    845a:	f8d0 3019 	ldr.w	r3, [r0, #25]
    845e:	e5c8      	b.n	7ff2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4d2>
          Coordinate homePosition = home.getPosition(CR_MOUNT_ALT);
    8460:	2202      	movs	r2, #2
    8462:	49be      	ldr	r1, [pc, #760]	; (875c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc3c>)
    8464:	a804      	add	r0, sp, #16
    8466:	f006 ff9f 	bl	f3a8 <Home::getPosition(CoordReturn)>
          z = transform.mountToNative(&homePosition).z;
    846a:	2300      	movs	r3, #0
    846c:	aa04      	add	r2, sp, #16
    846e:	a81a      	add	r0, sp, #104	; 0x68
    8470:	49bb      	ldr	r1, [pc, #748]	; (8760 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc40>)
    8472:	f003 fafd 	bl	ba70 <Transform::mountToNative(Coordinate*, bool)>
    8476:	ed9d 0b22 	vldr	d0, [sp, #136]	; 0x88
    847a:	f7ff bbd9 	b.w	7c30 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x110>
        *numericReply = false;
    847e:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    8480:	7013      	strb	r3, [r2, #0]
        switch (parameter[1]) {
    8482:	7863      	ldrb	r3, [r4, #1]
    8484:	3b30      	subs	r3, #48	; 0x30
    8486:	2b05      	cmp	r3, #5
    8488:	f200 81c4 	bhi.w	8814 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcf4>
    848c:	e8df f003 	tbb	[pc, r3]
    8490:	101c1e2e 	.word	0x101c1e2e
    8494:	030e      	.short	0x030e
          case '5': sprintf(reply, "%ld", (long)axis2.motor->getEncoderCount()); break;
    8496:	4bb3      	ldr	r3, [pc, #716]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    8498:	6818      	ldr	r0, [r3, #0]
    849a:	6803      	ldr	r3, [r0, #0]
    849c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    849e:	4798      	blx	r3
    84a0:	49b1      	ldr	r1, [pc, #708]	; (8768 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc48>)
    84a2:	4602      	mov	r2, r0
    84a4:	4628      	mov	r0, r5
    84a6:	f016 fd23 	bl	1eef0 <sprintf>
    84aa:	e4ae      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
          case '4': sprintf(reply, "%ld", (long)axis1.motor->getEncoderCount()); break;
    84ac:	4baf      	ldr	r3, [pc, #700]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    84ae:	e7f3      	b.n	8498 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x978>
          case '3': sprintF(reply, "%0.6f", radToDeg(axis2.getInstrumentCoordinate())); break;
    84b0:	48ac      	ldr	r0, [pc, #688]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    84b2:	f7f8 fe3b 	bl	112c <Axis::getInstrumentCoordinate()>
    84b6:	49ae      	ldr	r1, [pc, #696]	; (8770 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc50>)
    84b8:	4628      	mov	r0, r5
    84ba:	ed9f 7ba3 	vldr	d7, [pc, #652]	; 8748 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc28>
    84be:	ee20 0b07 	vmul.f64	d0, d0, d7
    84c2:	f7fb fdb9 	bl	4038 <sprintF(char*, char const*, double)>
    84c6:	e4a0      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
          case '2': sprintF(reply, "%0.6f", radToDeg(axis1.getInstrumentCoordinate())); break;
    84c8:	48a8      	ldr	r0, [pc, #672]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    84ca:	e7f2      	b.n	84b2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x992>
          case '1': convert.doubleToDms(reply, radToDeg(axis2.getInstrumentCoordinate()), true, true, PM_HIGH); break; 
    84cc:	48a5      	ldr	r0, [pc, #660]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    84ce:	f7f8 fe2d 	bl	112c <Axis::getInstrumentCoordinate()>
    84d2:	2301      	movs	r3, #1
    84d4:	2202      	movs	r2, #2
    84d6:	4629      	mov	r1, r5
    84d8:	48a6      	ldr	r0, [pc, #664]	; (8774 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc54>)
    84da:	9200      	str	r2, [sp, #0]
    84dc:	461a      	mov	r2, r3
    84de:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8748 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc28>
    84e2:	ee20 0b07 	vmul.f64	d0, d0, d7
    84e6:	f7fb fee7 	bl	42b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>
    84ea:	e48e      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
          case '0': convert.doubleToDms(reply, radToDeg(axis1.getInstrumentCoordinate()), true, true, PM_HIGH); break;
    84ec:	489f      	ldr	r0, [pc, #636]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    84ee:	e7ee      	b.n	84ce <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ae>
      } else *commandError = CE_PARAM_RANGE;
    84f0:	2304      	movs	r3, #4
    84f2:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    84f4:	7013      	strb	r3, [r2, #0]
    84f6:	e488      	b.n	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
        switch (parameter[1]) {
    84f8:	7863      	ldrb	r3, [r4, #1]
    84fa:	3b34      	subs	r3, #52	; 0x34
    84fc:	2b19      	cmp	r3, #25
    84fe:	f63f abae 	bhi.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    8502:	a201      	add	r2, pc, #4	; (adr r2, 8508 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9e8>)
    8504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8508:	000085cd 	.word	0x000085cd
    850c:	000085ab 	.word	0x000085ab
    8510:	00007c5f 	.word	0x00007c5f
    8514:	00007c5f 	.word	0x00007c5f
    8518:	00007c5f 	.word	0x00007c5f
    851c:	00007c5f 	.word	0x00007c5f
    8520:	00007c5f 	.word	0x00007c5f
    8524:	00007c5f 	.word	0x00007c5f
    8528:	00007c5f 	.word	0x00007c5f
    852c:	00007c5f 	.word	0x00007c5f
    8530:	00007c5f 	.word	0x00007c5f
    8534:	00007c5f 	.word	0x00007c5f
    8538:	00007c5f 	.word	0x00007c5f
    853c:	00007c5f 	.word	0x00007c5f
    8540:	00007c5f 	.word	0x00007c5f
    8544:	00007c5f 	.word	0x00007c5f
    8548:	00007c5f 	.word	0x00007c5f
    854c:	00008595 	.word	0x00008595
    8550:	0000831f 	.word	0x0000831f
    8554:	0000831f 	.word	0x0000831f
    8558:	00007c5f 	.word	0x00007c5f
    855c:	00007c5f 	.word	0x00007c5f
    8560:	00007c5f 	.word	0x00007c5f
    8564:	00007c5f 	.word	0x00007c5f
    8568:	00007c5f 	.word	0x00007c5f
    856c:	00008571 	.word	0x00008571
            axesToRevert = nv.readUI(NV_AXIS_SETTINGS_REVERT);
    8570:	f44f 7199 	mov.w	r1, #306	; 0x132
    8574:	4878      	ldr	r0, [pc, #480]	; (8758 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc38>)
    8576:	f7fc fd0f 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
            if (axesToRevert & 1) sprintf(reply, "%d", (int)nv.readUC(NV_MOUNT_TYPE_BASE)); else strcpy(reply, "0");
    857a:	07c3      	lsls	r3, r0, #31
    857c:	f57f adfa 	bpl.w	8174 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x654>
    8580:	21be      	movs	r1, #190	; 0xbe
    8582:	4875      	ldr	r0, [pc, #468]	; (8758 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc38>)
    8584:	f7fc fd00 	bl	4f88 <NonVolatileStorage::readUC(unsigned short)>
    8588:	497b      	ldr	r1, [pc, #492]	; (8778 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc58>)
    858a:	4602      	mov	r2, r0
    858c:	4628      	mov	r0, r5
    858e:	f016 fcaf 	bl	1eef0 <sprintf>
    8592:	e4cd      	b.n	7f30 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x410>
          case 'E': reply[0] = '0' + (MOUNT_COORDS - 1); *supressFrame = true; *numericReply = false; break;
    8594:	2131      	movs	r1, #49	; 0x31
    8596:	2301      	movs	r3, #1
    8598:	2200      	movs	r2, #0
    859a:	7029      	strb	r1, [r5, #0]
  return true;
    859c:	4618      	mov	r0, r3
          case 'E': reply[0] = '0' + (MOUNT_COORDS - 1); *supressFrame = true; *numericReply = false; break;
    859e:	9938      	ldr	r1, [sp, #224]	; 0xe0
    85a0:	700b      	strb	r3, [r1, #0]
    85a2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    85a4:	701a      	strb	r2, [r3, #0]
    85a6:	f7ff bb5b 	b.w	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    inline double getStepsPerMeasure() { return settings.stepsPerMeasure; }
    85aa:	496e      	ldr	r1, [pc, #440]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    85ac:	684a      	ldr	r2, [r1, #4]
    85ae:	688b      	ldr	r3, [r1, #8]
          case '4': sprintf(reply, "%ld", lround(axis1.getStepsPerMeasure()/RAD_DEG_RATIO)); *numericReply = false; break;
    85b0:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8748 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc28>
  { return __builtin_lroundl(__x); }
    85b4:	ec43 2b17 	vmov	d7, r2, r3
    85b8:	ee87 0b00 	vdiv.f64	d0, d7, d0
    85bc:	f013 f898 	bl	1b6f0 <lroundl>
    85c0:	4969      	ldr	r1, [pc, #420]	; (8768 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc48>)
    85c2:	4602      	mov	r2, r0
    85c4:	4628      	mov	r0, r5
    85c6:	f016 fc93 	bl	1eef0 <sprintf>
    85ca:	e4b1      	b.n	7f30 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x410>
    85cc:	4967      	ldr	r1, [pc, #412]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    85ce:	e7ed      	b.n	85ac <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa8c>
        switch (parameter[1]) {
    85d0:	7863      	ldrb	r3, [r4, #1]
    85d2:	3b33      	subs	r3, #51	; 0x33
    85d4:	2b14      	cmp	r3, #20
    85d6:	f63f ab42 	bhi.w	7c5e <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x13e>
    85da:	a201      	add	r2, pc, #4	; (adr r2, 85e0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xac0>)
    85dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    85e0:	000086d3 	.word	0x000086d3
    85e4:	000086af 	.word	0x000086af
    85e8:	00007c5f 	.word	0x00007c5f
    85ec:	00007c5f 	.word	0x00007c5f
    85f0:	00007c5f 	.word	0x00007c5f
    85f4:	00007c5f 	.word	0x00007c5f
    85f8:	00007c5f 	.word	0x00007c5f
    85fc:	00007c5f 	.word	0x00007c5f
    8600:	00007c5f 	.word	0x00007c5f
    8604:	00007c5f 	.word	0x00007c5f
    8608:	00007c5f 	.word	0x00007c5f
    860c:	00007c5f 	.word	0x00007c5f
    8610:	00007c5f 	.word	0x00007c5f
    8614:	00007c5f 	.word	0x00007c5f
    8618:	00008699 	.word	0x00008699
    861c:	00007c5f 	.word	0x00007c5f
    8620:	00007c5f 	.word	0x00007c5f
    8624:	00007c5f 	.word	0x00007c5f
    8628:	00007c5f 	.word	0x00007c5f
    862c:	00008667 	.word	0x00008667
    8630:	00008635 	.word	0x00008635
            sprintF(reply, "%0.6f", radToDeg(transform.instrumentToMount(axis1.getIndexPosition(), axis2.getIndexPosition()).a2));
    8634:	484d      	ldr	r0, [pc, #308]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    8636:	f7f8 fd51 	bl	10dc <Axis::getIndexPosition()>
    863a:	eeb0 8b40 	vmov.f64	d8, d0
    863e:	4849      	ldr	r0, [pc, #292]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    8640:	f7f8 fd4c 	bl	10dc <Axis::getIndexPosition()>
    8644:	4946      	ldr	r1, [pc, #280]	; (8760 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc40>)
    8646:	eeb0 1b40 	vmov.f64	d1, d0
    864a:	a81a      	add	r0, sp, #104	; 0x68
    864c:	eeb0 0b48 	vmov.f64	d0, d8
    8650:	f002 fd02 	bl	b058 <Transform::instrumentToMount(double, double)>
    8654:	4946      	ldr	r1, [pc, #280]	; (8770 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc50>)
    8656:	4628      	mov	r0, r5
    8658:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8748 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc28>
    865c:	ed9d 0b2c 	vldr	d0, [sp, #176]	; 0xb0
    8660:	ee20 0b07 	vmul.f64	d0, d0, d7
    8664:	e462      	b.n	7f2c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40c>
            sprintF(reply, "%0.6f", radToDeg(transform.instrumentToMount(axis1.getIndexPosition(), axis2.getIndexPosition()).a1));
    8666:	4841      	ldr	r0, [pc, #260]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    8668:	f7f8 fd38 	bl	10dc <Axis::getIndexPosition()>
    866c:	eeb0 8b40 	vmov.f64	d8, d0
    8670:	483c      	ldr	r0, [pc, #240]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    8672:	f7f8 fd33 	bl	10dc <Axis::getIndexPosition()>
    8676:	493a      	ldr	r1, [pc, #232]	; (8760 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc40>)
    8678:	eeb0 1b40 	vmov.f64	d1, d0
    867c:	a81a      	add	r0, sp, #104	; 0x68
    867e:	eeb0 0b48 	vmov.f64	d0, d8
    8682:	f002 fce9 	bl	b058 <Transform::instrumentToMount(double, double)>
    8686:	493a      	ldr	r1, [pc, #232]	; (8770 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc50>)
    8688:	4628      	mov	r0, r5
    868a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8748 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc28>
    868e:	ed9d 0b28 	vldr	d0, [sp, #160]	; 0xa0
    8692:	ee20 0b07 	vmul.f64	d0, d0, d7
    8696:	e449      	b.n	7f2c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40c>
          case 'A': sprintf(reply, "%d%%", 50); *numericReply = false; break; // workload
    8698:	2232      	movs	r2, #50	; 0x32
    869a:	4938      	ldr	r1, [pc, #224]	; (877c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc5c>)
    869c:	4628      	mov	r0, r5
    869e:	f016 fc27 	bl	1eef0 <sprintf>
    86a2:	2300      	movs	r3, #0
    86a4:	9a39      	ldr	r2, [sp, #228]	; 0xe4
  return true;
    86a6:	2001      	movs	r0, #1
          case 'A': sprintf(reply, "%d%%", 50); *numericReply = false; break; // workload
    86a8:	7013      	strb	r3, [r2, #0]
    86aa:	f7ff bad9 	b.w	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    Direction getDirection() { return motor->getDirection(); }
    86ae:	4c2d      	ldr	r4, [pc, #180]	; (8764 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc44>)
    86b0:	6820      	ldr	r0, [r4, #0]
    86b2:	f7f9 fcb3 	bl	201c <Motor::getDirection()>
          case '4': sprintF(reply, "%0.6f", (axis2.getDirection() == DIR_FORWARD) ? axis2.getFrequencySteps() : -axis2.getFrequencySteps()); *numericReply = false; break;
    86b6:	2801      	cmp	r0, #1
    float getFrequencySteps() { return motor->getFrequencySteps(); }
    86b8:	6820      	ldr	r0, [r4, #0]
    86ba:	6803      	ldr	r3, [r0, #0]
    86bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    86be:	f000 80a1 	beq.w	8804 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce4>
    86c2:	4798      	blx	r3
    86c4:	eeb1 0a40 	vneg.f32	s0, s0
    86c8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    86cc:	4928      	ldr	r1, [pc, #160]	; (8770 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc50>)
    86ce:	4628      	mov	r0, r5
    86d0:	e42c      	b.n	7f2c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40c>
    Direction getDirection() { return motor->getDirection(); }
    86d2:	4c26      	ldr	r4, [pc, #152]	; (876c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4c>)
    86d4:	e7ec      	b.n	86b0 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb90>
    86d6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8780 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc60>
    86da:	f7ff ba7e 	b.w	7bda <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xba>
        float f = strtod(&parameter[3], &conv_end);
    86de:	a91a      	add	r1, sp, #104	; 0x68
    86e0:	1ce0      	adds	r0, r4, #3
    86e2:	f016 fb45 	bl	1ed70 <strtod>
    86e6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        if (f < -1800.0F) f = -1800.0F;
    86ea:	eddf 7a26 	vldr	s15, [pc, #152]	; 8784 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc64>
    86ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
    86f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86f6:	d47c      	bmi.n	87f2 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcd2>
        if (f > 1800.0F) f = 1800.0F;
    86f8:	eddf 7a23 	vldr	s15, [pc, #140]	; 8788 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc68>
    86fc:	eeb4 0a67 	vcmp.f32	s0, s15
    8700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8704:	fe37 0a80 	vselgt.f32	s0, s15, s0
        trackingRateOffsetDec = f/15.0F;
    8708:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
  return true;
    870c:	2001      	movs	r0, #1
        trackingRateOffsetDec = f/15.0F;
    870e:	eec0 7a07 	vdiv.f32	s15, s0, s14
    8712:	edc6 7a05 	vstr	s15, [r6, #20]
      } else
    8716:	f7ff baa3 	b.w	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    871a:	2309      	movs	r3, #9
    871c:	e40e      	b.n	7f3c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x41c>
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; *commandError = CE_PARAM_RANGE; }
    871e:	2400      	movs	r4, #0
    8720:	4d1a      	ldr	r5, [pc, #104]	; (878c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc6c>)
    8722:	4a1b      	ldr	r2, [pc, #108]	; (8790 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc70>)
    8724:	2304      	movs	r3, #4
  return true;
    8726:	2001      	movs	r0, #1
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; *commandError = CE_PARAM_RANGE; }
    8728:	e9c2 4500 	strd	r4, r5, [r2]
    872c:	f7ff ba1e 	b.w	7b6c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
            if (parameter2 != conv_end && fabs(d) <= 360.0L) { encoderAxis2 = degToRad(d); } else { encoderAxis2 = NAN; }
    8730:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8750 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc30>
    8734:	e599      	b.n	826a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x74a>
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis1 = degToRad(d); } else { encoderAxis1 = NAN; }
    8736:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8750 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc30>
    873a:	e579      	b.n	8230 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x710>
            if (&parameter[3] != conv_end && fabs(d) <= 360.0L) { encoderAxis1 = degToRad(d); } else { encoderAxis1 = NAN; *commandError = CE_PARAM_RANGE; }
    873c:	2400      	movs	r4, #0
    873e:	4d13      	ldr	r5, [pc, #76]	; (878c <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc6c>)
    8740:	4a14      	ldr	r2, [pc, #80]	; (8794 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc74>)
    8742:	e7ef      	b.n	8724 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc04>
    8744:	f3af 8000 	nop.w
    8748:	1a63c1f8 	.word	0x1a63c1f8
    874c:	404ca5dc 	.word	0x404ca5dc
    8750:	00000000 	.word	0x00000000
    8754:	7ff80000 	.word	0x7ff80000
    8758:	20005e50 	.word	0x20005e50
    875c:	20005478 	.word	0x20005478
    8760:	200064ac 	.word	0x200064ac
    8764:	200051a8 	.word	0x200051a8
    8768:	20002248 	.word	0x20002248
    876c:	200050e8 	.word	0x200050e8
    8770:	20002240 	.word	0x20002240
    8774:	200043d0 	.word	0x200043d0
    8778:	2000224c 	.word	0x2000224c
    877c:	20002250 	.word	0x20002250
    8780:	c2f00000 	.word	0xc2f00000
    8784:	c4e10000 	.word	0xc4e10000
    8788:	44e10000 	.word	0x44e10000
    878c:	7ff80000 	.word	0x7ff80000
    8790:	20003540 	.word	0x20003540
    8794:	20003538 	.word	0x20003538
          settings.backlash.axis2 = arcsecToRad(arcSecs);
    8798:	ee07 3a90 	vmov	s15, r3
          axis2.setBacklash(settings.backlash.axis2);
    879c:	4824      	ldr	r0, [pc, #144]	; (8830 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
          settings.backlash.axis2 = arcsecToRad(arcSecs);
    879e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    87a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8828 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd08>
    87a6:	ee87 0b05 	vdiv.f64	d0, d7, d5
    87aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    87ae:	ee10 3a10 	vmov	r3, s0
    87b2:	f8c6 301d 	str.w	r3, [r6, #29]
          axis1.setBacklash(settings.backlash.axis1);
    87b6:	f7f8 fc4f 	bl	1058 <Axis::setBacklash(float)>
          nv.updateBytes(NV_MOUNT_SETTINGS_BASE, &settings, sizeof(MountSettings));
    87ba:	2309      	movs	r3, #9
    87bc:	f106 0218 	add.w	r2, r6, #24
    87c0:	21b5      	movs	r1, #181	; 0xb5
    87c2:	481c      	ldr	r0, [pc, #112]	; (8834 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd14>)
    87c4:	f7fc fc52 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    87c8:	f7ff bb1f 	b.w	7e0a <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ea>
      if (settings.rc == RC_REFRACTION) settings.rc = RC_REFRACTION_DUAL; else
    87cc:	2302      	movs	r3, #2
    87ce:	7603      	strb	r3, [r0, #24]
    87d0:	e42e      	b.n	8030 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
          settings.backlash.axis1 = arcsecToRad(arcSecs);
    87d2:	ee07 3a90 	vmov	s15, r3
          axis1.setBacklash(settings.backlash.axis1);
    87d6:	4818      	ldr	r0, [pc, #96]	; (8838 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd18>)
          settings.backlash.axis1 = arcsecToRad(arcSecs);
    87d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    87dc:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8828 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd08>
    87e0:	ee87 0b05 	vdiv.f64	d0, d7, d5
    87e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    87e8:	ee10 3a10 	vmov	r3, s0
    87ec:	f8c6 3019 	str.w	r3, [r6, #25]
    87f0:	e7e1      	b.n	87b6 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc96>
        if (f < -1800.0F) f = -1800.0F;
    87f2:	eeb0 0a67 	vmov.f32	s0, s15
    87f6:	e787      	b.n	8708 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xbe8>
        sprintF(reply, "%0.8f", trackingRateOffsetDec*15.0F);
    87f8:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    87fc:	ed90 0a05 	vldr	s0, [r0, #20]
    8800:	f7ff bb8e 	b.w	7f20 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x400>
    float getFrequencySteps() { return motor->getFrequencySteps(); }
    8804:	4798      	blx	r3
    8806:	e75f      	b.n	86c8 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xba8>
        trackingRateOffsetDec = f/15.0F;
    8808:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    880c:	eec0 7a07 	vdiv.f32	s15, s0, s14
    8810:	f7ff b9e3 	b.w	7bda <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0xba>
          default:  *numericReply = true; *commandError = CE_CMD_UNKNOWN;
    8814:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    8816:	2001      	movs	r0, #1
    8818:	2302      	movs	r3, #2
    881a:	7010      	strb	r0, [r2, #0]
    881c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    881e:	7013      	strb	r3, [r2, #0]
    8820:	f7ff ba1e 	b.w	7c60 <Mount::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
    8824:	f3af 8000 	nop.w
    8828:	7331ad79 	.word	0x7331ad79
    882c:	41092dc6 	.word	0x41092dc6
    8830:	200051a8 	.word	0x200051a8
    8834:	20005e50 	.word	0x20005e50
    8838:	200050e8 	.word	0x200050e8

0000883c <Mount::init()>:
    inline bool hasValidKey() { return keyMatches; }
    883c:	4924      	ldr	r1, [pc, #144]	; (88d0 <Mount::init()+0x94>)
    nv.writeBytes(NV_MOUNT_SETTINGS_BASE, &settings, sizeof(MountSettings));
    883e:	f100 0218 	add.w	r2, r0, #24
  if (!nv.hasValidKey()) {
    8842:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
void Mount::init() {
    8846:	b510      	push	{r4, lr}
    8848:	4604      	mov	r4, r0
    884a:	b082      	sub	sp, #8
  if (!nv.hasValidKey()) {
    884c:	2b00      	cmp	r3, #0
    884e:	d037      	beq.n	88c0 <Mount::init()+0x84>
  nv.readBytes(NV_MOUNT_SETTINGS_BASE, &settings, sizeof(MountSettings));
    8850:	21b5      	movs	r1, #181	; 0xb5
    8852:	2309      	movs	r3, #9
    8854:	481e      	ldr	r0, [pc, #120]	; (88d0 <Mount::init()+0x94>)
    8856:	f7fc fbdf 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  delay(100);
    885a:	2064      	movs	r0, #100	; 0x64
    885c:	f00f fc94 	bl	18188 <delay>
  if (!axis1.init(&motor1)) { initError.driver = true; DLF("ERR: Axis1, no motion controller!"); }
    8860:	491c      	ldr	r1, [pc, #112]	; (88d4 <Mount::init()+0x98>)
    8862:	481d      	ldr	r0, [pc, #116]	; (88d8 <Mount::init()+0x9c>)
    8864:	f7f8 fa4a 	bl	cfc <Axis::init(Motor*)>
    8868:	b920      	cbnz	r0, 8874 <Mount::init()+0x38>
    886a:	4a1c      	ldr	r2, [pc, #112]	; (88dc <Mount::init()+0xa0>)
    886c:	7813      	ldrb	r3, [r2, #0]
    886e:	f043 0304 	orr.w	r3, r3, #4
    8872:	7013      	strb	r3, [r2, #0]
  axis1.setBacklash(settings.backlash.axis1);
    8874:	f8d4 3019 	ldr.w	r3, [r4, #25]
    8878:	4817      	ldr	r0, [pc, #92]	; (88d8 <Mount::init()+0x9c>)
    887a:	ee00 3a10 	vmov	s0, r3
    887e:	f7f8 fbeb 	bl	1058 <Axis::setBacklash(float)>
  axis1.setMotionLimitsCheck(false);
    8882:	2100      	movs	r1, #0
    8884:	4814      	ldr	r0, [pc, #80]	; (88d8 <Mount::init()+0x9c>)
    8886:	f7f8 fe6f 	bl	1568 <Axis::setMotionLimitsCheck(bool)>
  delay(100);
    888a:	2064      	movs	r0, #100	; 0x64
    888c:	f00f fc7c 	bl	18188 <delay>
  if (!axis2.init(&motor2)) { initError.driver = true; DLF("ERR: Axis2, no motion controller!"); }
    8890:	4913      	ldr	r1, [pc, #76]	; (88e0 <Mount::init()+0xa4>)
    8892:	4814      	ldr	r0, [pc, #80]	; (88e4 <Mount::init()+0xa8>)
    8894:	f7f8 fa32 	bl	cfc <Axis::init(Motor*)>
    8898:	b920      	cbnz	r0, 88a4 <Mount::init()+0x68>
    889a:	4a10      	ldr	r2, [pc, #64]	; (88dc <Mount::init()+0xa0>)
    889c:	7813      	ldrb	r3, [r2, #0]
    889e:	f043 0304 	orr.w	r3, r3, #4
    88a2:	7013      	strb	r3, [r2, #0]
  axis2.setBacklash(settings.backlash.axis2);
    88a4:	f8d4 301d 	ldr.w	r3, [r4, #29]
    88a8:	480e      	ldr	r0, [pc, #56]	; (88e4 <Mount::init()+0xa8>)
    88aa:	ee00 3a10 	vmov	s0, r3
    88ae:	f7f8 fbd3 	bl	1058 <Axis::setBacklash(float)>
  axis2.setMotionLimitsCheck(false);
    88b2:	2100      	movs	r1, #0
    88b4:	480b      	ldr	r0, [pc, #44]	; (88e4 <Mount::init()+0xa8>)
}
    88b6:	b002      	add	sp, #8
    88b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  axis2.setMotionLimitsCheck(false);
    88bc:	f7f8 be54 	b.w	1568 <Axis::setMotionLimitsCheck(bool)>
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
    88c0:	4608      	mov	r0, r1
    88c2:	2309      	movs	r3, #9
    88c4:	21b5      	movs	r1, #181	; 0xb5
    88c6:	9201      	str	r2, [sp, #4]
    88c8:	f7fc fbd0 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    88cc:	9a01      	ldr	r2, [sp, #4]
    88ce:	e7bf      	b.n	8850 <Mount::init()+0x14>
    88d0:	20005e50 	.word	0x20005e50
    88d4:	20005d14 	.word	0x20005d14
    88d8:	200050e8 	.word	0x200050e8
    88dc:	20005ccc 	.word	0x20005ccc
    88e0:	20005db0 	.word	0x20005db0
    88e4:	200051a8 	.word	0x200051a8

000088e8 <Mount::update()>:
void Mount::update() {
    88e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (goTo.state == GS_NONE && guide.state < GU_GUIDE) {
    88ea:	4b55      	ldr	r3, [pc, #340]	; (8a40 <Mount::update()+0x158>)
    88ec:	781b      	ldrb	r3, [r3, #0]
void Mount::update() {
    88ee:	ed2d 8b02 	vpush	{d8}
  if (goTo.state == GS_NONE && guide.state < GU_GUIDE) {
    88f2:	b91b      	cbnz	r3, 88fc <Mount::update()+0x14>
    88f4:	4e53      	ldr	r6, [pc, #332]	; (8a44 <Mount::update()+0x15c>)
    88f6:	7834      	ldrb	r4, [r6, #0]
    88f8:	2c01      	cmp	r4, #1
    88fa:	d918      	bls.n	892e <Mount::update()+0x46>
    axis2.setFrequencyBase(0.0F);
    88fc:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8a48 <Mount::update()+0x160>
    statusFlashMs = SF_SLEWING;
    8900:	2401      	movs	r4, #1
    axis2.setFrequencyBase(0.0F);
    8902:	4852      	ldr	r0, [pc, #328]	; (8a4c <Mount::update()+0x164>)
    8904:	f7f8 fd18 	bl	1338 <Axis::setFrequencyBase(float)>
  if (statusFlashMs != lastStatusFlashMs) {
    8908:	4b51      	ldr	r3, [pc, #324]	; (8a50 <Mount::update()+0x168>)
    890a:	681a      	ldr	r2, [r3, #0]
    890c:	42a2      	cmp	r2, r4
    890e:	d00b      	beq.n	8928 <Mount::update()+0x40>
    lastStatusFlashMs = statusFlashMs;
    8910:	601c      	str	r4, [r3, #0]
    mountStatus.flashRate(statusFlashMs);
    8912:	4621      	mov	r1, r4
    xBusy = statusFlashMs == SF_SLEWING;
    8914:	f1a4 0401 	sub.w	r4, r4, #1
    mountStatus.flashRate(statusFlashMs);
    8918:	484e      	ldr	r0, [pc, #312]	; (8a54 <Mount::update()+0x16c>)
    891a:	f00c f945 	bl	14ba8 <Status::flashRate(int)>
    xBusy = statusFlashMs == SF_SLEWING;
    891e:	4b4e      	ldr	r3, [pc, #312]	; (8a58 <Mount::update()+0x170>)
    8920:	fab4 f484 	clz	r4, r4
    8924:	0964      	lsrs	r4, r4, #5
    8926:	701c      	strb	r4, [r3, #0]
}
    8928:	ecbd 8b02 	vpop	{d8}
    892c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (trackingState != TS_SIDEREAL) {
    892e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    8932:	4605      	mov	r5, r0
    8934:	2b01      	cmp	r3, #1
    8936:	d002      	beq.n	893e <Mount::update()+0x56>
      trackingRateAxis1 = 0.0F;
    8938:	2300      	movs	r3, #0
    893a:	6083      	str	r3, [r0, #8]
      trackingRateAxis2 = 0.0F;
    893c:	60c3      	str	r3, [r0, #12]
    if (!guide.activeAxis1() || guide.state == GU_PULSE_GUIDE) {
    893e:	7c33      	ldrb	r3, [r6, #16]
    8940:	b153      	cbz	r3, 8958 <Mount::update()+0x70>
    8942:	f014 0401 	ands.w	r4, r4, #1
    8946:	d107      	bne.n	8958 <Mount::update()+0x70>
    if (!guide.activeAxis2() || guide.state == GU_PULSE_GUIDE) {
    8948:	7c73      	ldrb	r3, [r6, #17]
    894a:	2b00      	cmp	r3, #0
    894c:	d1dc      	bne.n	8908 <Mount::update()+0x20>
    894e:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8a48 <Mount::update()+0x160>
    8952:	4f42      	ldr	r7, [pc, #264]	; (8a5c <Mount::update()+0x174>)
    8954:	4c42      	ldr	r4, [pc, #264]	; (8a60 <Mount::update()+0x178>)
    8956:	e02d      	b.n	89b4 <Mount::update()+0xcc>
      if (transform.mountType != ALTAZM && transform.mountType != ALTALT)  f1 += guide.rateAxis1 + pec.rate;
    8958:	4f40      	ldr	r7, [pc, #256]	; (8a5c <Mount::update()+0x174>)
      f1 = trackingRateAxis1;
    895a:	edd5 8a02 	vldr	s17, [r5, #8]
      if (transform.mountType != ALTAZM && transform.mountType != ALTALT)  f1 += guide.rateAxis1 + pec.rate;
    895e:	f897 35c4 	ldrb.w	r3, [r7, #1476]	; 0x5c4
    8962:	3b03      	subs	r3, #3
    8964:	2b01      	cmp	r3, #1
    8966:	d908      	bls.n	897a <Mount::update()+0x92>
    8968:	4b3e      	ldr	r3, [pc, #248]	; (8a64 <Mount::update()+0x17c>)
    896a:	edd6 7a01 	vldr	s15, [r6, #4]
    896e:	ed93 7a00 	vldr	s14, [r3]
    8972:	ee77 7a87 	vadd.f32	s15, s15, s14
    8976:	ee78 8aa7 	vadd.f32	s17, s17, s15
      axis1.setFrequencyBase(siderealToRadF(f1)*SIDEREAL_RATIO_F*site.getSiderealRatio());
    897a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8a68 <Mount::update()+0x180>
    // sets sidereal period, in sub-micro counts per second
    void setSiderealPeriod(unsigned long period);

    // gets sidereal ratio
    // slower rates are < 1.0, faster rates are > 1.0
    inline float getSiderealRatio() { return (float)SIDEREAL_PERIOD/siderealPeriod; }
    897e:	4c38      	ldr	r4, [pc, #224]	; (8a60 <Mount::update()+0x178>)
    8980:	eec8 7a87 	vdiv.f32	s15, s17, s14
    8984:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8a6c <Mount::update()+0x184>
    8988:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    898c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8a70 <Mount::update()+0x188>
    8990:	4838      	ldr	r0, [pc, #224]	; (8a74 <Mount::update()+0x18c>)
    8992:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8996:	ee86 0a07 	vdiv.f32	s0, s12, s14
    899a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    899e:	ee20 0a27 	vmul.f32	s0, s0, s15
    89a2:	f7f8 fcc9 	bl	1338 <Axis::setFrequencyBase(float)>
    if (!guide.activeAxis2() || guide.state == GU_PULSE_GUIDE) {
    89a6:	7c73      	ldrb	r3, [r6, #17]
    89a8:	b113      	cbz	r3, 89b0 <Mount::update()+0xc8>
    89aa:	7833      	ldrb	r3, [r6, #0]
    89ac:	2b01      	cmp	r3, #1
    89ae:	d144      	bne.n	8a3a <Mount::update()+0x152>
  { return __builtin_fabsf(__x); }
    89b0:	eef0 8ae8 	vabs.f32	s17, s17
      if (transform.mountType != ALTAZM && transform.mountType != ALTALT)  f2 += guide.rateAxis2;
    89b4:	f897 35c4 	ldrb.w	r3, [r7, #1476]	; 0x5c4
      f2 = trackingRateAxis2;
    89b8:	ed95 8a03 	vldr	s16, [r5, #12]
      if (transform.mountType != ALTAZM && transform.mountType != ALTALT)  f2 += guide.rateAxis2;
    89bc:	3b03      	subs	r3, #3
    89be:	2b01      	cmp	r3, #1
    89c0:	d903      	bls.n	89ca <Mount::update()+0xe2>
    89c2:	edd6 7a02 	vldr	s15, [r6, #8]
    89c6:	ee38 8a27 	vadd.f32	s16, s16, s15
    89ca:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
      axis2.setFrequencyBase(siderealToRadF(f2)*SIDEREAL_RATIO_F*site.getSiderealRatio());
    89ce:	eddf 5a26 	vldr	s11, [pc, #152]	; 8a68 <Mount::update()+0x180>
    89d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    89d6:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8a6c <Mount::update()+0x184>
    89da:	eec8 7a25 	vdiv.f32	s15, s16, s11
    89de:	eddf 6a24 	vldr	s13, [pc, #144]	; 8a70 <Mount::update()+0x188>
    89e2:	481a      	ldr	r0, [pc, #104]	; (8a4c <Mount::update()+0x164>)
    89e4:	ee86 0a07 	vdiv.f32	s0, s12, s14
    89e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    89ec:	ee20 0a27 	vmul.f32	s0, s0, s15
    89f0:	f7f8 fca2 	bl	1338 <Axis::setFrequencyBase(float)>
    89f4:	eeb0 7ac8 	vabs.f32	s14, s16
    89f8:	eeb4 7ae8 	vcmpe.f32	s14, s17
    89fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a00:	fe37 7a28 	vselgt.f32	s14, s14, s17
    if (f1 < 0.20F) statusFlashMs = SF_STOPPED; else
    8a04:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8a78 <Mount::update()+0x190>
    8a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a10:	d40f      	bmi.n	8a32 <Mount::update()+0x14a>
    if (f1 > 3.0F) statusFlashMs = SF_SLEWING; else statusFlashMs = 500.0F/f1;
    8a12:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    8a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a1e:	dc0a      	bgt.n	8a36 <Mount::update()+0x14e>
    8a20:	eddf 6a16 	vldr	s13, [pc, #88]	; 8a7c <Mount::update()+0x194>
    8a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
    8a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8a2c:	ee17 4a90 	vmov	r4, s15
    8a30:	e76a      	b.n	8908 <Mount::update()+0x20>
    if (f1 < 0.20F) statusFlashMs = SF_STOPPED; else
    8a32:	2400      	movs	r4, #0
    8a34:	e768      	b.n	8908 <Mount::update()+0x20>
    if (f1 > 3.0F) statusFlashMs = SF_SLEWING; else statusFlashMs = 500.0F/f1;
    8a36:	2401      	movs	r4, #1
    8a38:	e766      	b.n	8908 <Mount::update()+0x20>
    8a3a:	eeb0 7ae8 	vabs.f32	s14, s17
    if (f2 > f1) f1 = f2;
    8a3e:	e7e1      	b.n	8a04 <Mount::update()+0x11c>
    8a40:	20005270 	.word	0x20005270
    8a44:	200043e8 	.word	0x200043e8
    8a48:	00000000 	.word	0x00000000
    8a4c:	200051a8 	.word	0x200051a8
    8a50:	20005810 	.word	0x20005810
    8a54:	20005e4c 	.word	0x20005e4c
    8a58:	20006aba 	.word	0x20006aba
    8a5c:	200064ac 	.word	0x200064ac
    8a60:	200055d0 	.word	0x200055d0
    8a64:	20005568 	.word	0x20005568
    8a68:	4656dbf3 	.word	0x4656dbf3
    8a6c:	4b737959 	.word	0x4b737959
    8a70:	3f8059b7 	.word	0x3f8059b7
    8a74:	200050e8 	.word	0x200050e8
    8a78:	3e4ccccd 	.word	0x3e4ccccd
    8a7c:	43fa0000 	.word	0x43fa0000

00008a80 <Mount::enable(bool)>:
void Mount::enable(bool state) {
    8a80:	b510      	push	{r4, lr}
  if (state == true) {
    8a82:	460c      	mov	r4, r1
    8a84:	b161      	cbz	r1, 8aa0 <Mount::enable(bool)+0x20>
    mountStatus.wake();
    8a86:	4809      	ldr	r0, [pc, #36]	; (8aac <Mount::enable(bool)+0x2c>)
    8a88:	f00c f858 	bl	14b3c <Status::wake()>
  axis1.enable(state);
    8a8c:	4621      	mov	r1, r4
    8a8e:	4808      	ldr	r0, [pc, #32]	; (8ab0 <Mount::enable(bool)+0x30>)
    8a90:	f7f8 fab6 	bl	1000 <Axis::enable(bool)>
  axis2.enable(state);
    8a94:	4621      	mov	r1, r4
    8a96:	4807      	ldr	r0, [pc, #28]	; (8ab4 <Mount::enable(bool)+0x34>)
}
    8a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  axis2.enable(state);
    8a9c:	f7f8 bab0 	b.w	1000 <Axis::enable(bool)>
    trackingState = TS_NONE;
    8aa0:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    update();
    8aa4:	f7ff ff20 	bl	88e8 <Mount::update()>
    8aa8:	e7f0      	b.n	8a8c <Mount::enable(bool)+0xc>
    8aaa:	bf00      	nop
    8aac:	20005e4c 	.word	0x20005e4c
    8ab0:	200050e8 	.word	0x200050e8
    8ab4:	200051a8 	.word	0x200051a8

00008ab8 <Mount::tracking(bool)>:
void Mount::tracking(bool state) {
    8ab8:	b570      	push	{r4, r5, r6, lr}
    8aba:	4604      	mov	r4, r0
  if (state == true) {
    8abc:	b931      	cbnz	r1, 8acc <Mount::tracking(bool)+0x14>
    trackingState = TS_NONE;
    8abe:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
  update();
    8ac2:	4620      	mov	r0, r4
}
    8ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  update();
    8ac8:	f7ff bf0e 	b.w	88e8 <Mount::update()>
  axis1.enable(state);
    8acc:	4d12      	ldr	r5, [pc, #72]	; (8b18 <Mount::tracking(bool)+0x60>)
    mountStatus.wake();
    8ace:	4813      	ldr	r0, [pc, #76]	; (8b1c <Mount::tracking(bool)+0x64>)
  axis2.enable(state);
    8ad0:	4e13      	ldr	r6, [pc, #76]	; (8b20 <Mount::tracking(bool)+0x68>)
    mountStatus.wake();
    8ad2:	f00c f833 	bl	14b3c <Status::wake()>
  axis1.enable(state);
    8ad6:	2101      	movs	r1, #1
    8ad8:	4628      	mov	r0, r5
    8ada:	f7f8 fa91 	bl	1000 <Axis::enable(bool)>
  axis2.enable(state);
    8ade:	2101      	movs	r1, #1
    8ae0:	4630      	mov	r0, r6
    8ae2:	f7f8 fa8d 	bl	1000 <Axis::enable(bool)>
    inline bool isEnabled() { return enabled && !motor->calibrating; }
    8ae6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    8aea:	2b00      	cmp	r3, #0
    8aec:	d0e9      	beq.n	8ac2 <Mount::tracking(bool)+0xa>
    8aee:	682b      	ldr	r3, [r5, #0]
    8af0:	7adb      	ldrb	r3, [r3, #11]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d1e5      	bne.n	8ac2 <Mount::tracking(bool)+0xa>
    8af6:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    8afa:	2b00      	cmp	r3, #0
    8afc:	d0e1      	beq.n	8ac2 <Mount::tracking(bool)+0xa>
    8afe:	6833      	ldr	r3, [r6, #0]
    8b00:	7adb      	ldrb	r3, [r3, #11]
    8b02:	2b00      	cmp	r3, #0
    8b04:	d1dd      	bne.n	8ac2 <Mount::tracking(bool)+0xa>
    if (isEnabled()) trackingState = TS_SIDEREAL;
    8b06:	2301      	movs	r3, #1
  update();
    8b08:	4620      	mov	r0, r4
    if (isEnabled()) trackingState = TS_SIDEREAL;
    8b0a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
    8b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  update();
    8b12:	f7ff bee9 	b.w	88e8 <Mount::update()>
    8b16:	bf00      	nop
    8b18:	200050e8 	.word	0x200050e8
    8b1c:	20005e4c 	.word	0x20005e4c
    8b20:	200051a8 	.word	0x200051a8

00008b24 <Mount::autostartPostponed()>:
  if (!telescope.ready) return;
    8b24:	4b2f      	ldr	r3, [pc, #188]	; (8be4 <Mount::autostartPostponed()+0xc0>)
    8b26:	781b      	ldrb	r3, [r3, #0]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d035      	beq.n	8b98 <Mount::autostartPostponed()+0x74>
void Mount::autostartPostponed() {
    8b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (autoStartDone) {
    8b30:	4d2d      	ldr	r5, [pc, #180]	; (8be8 <Mount::autostartPostponed()+0xc4>)
    8b32:	782b      	ldrb	r3, [r5, #0]
    8b34:	2b00      	cmp	r3, #0
    8b36:	d142      	bne.n	8bbe <Mount::autostartPostponed()+0x9a>
  if (!autoTrackDone && TRACK_AUTOSTART == ON && transform.isEquatorial() && park.state != PS_PARKED && !home.settings.automaticAtBoot) {
    8b38:	4e2c      	ldr	r6, [pc, #176]	; (8bec <Mount::autostartPostponed()+0xc8>)
    8b3a:	4604      	mov	r4, r0
    8b3c:	7833      	ldrb	r3, [r6, #0]
    8b3e:	b92b      	cbnz	r3, 8b4c <Mount::autostartPostponed()+0x28>
    8b40:	4b2b      	ldr	r3, [pc, #172]	; (8bf0 <Mount::autostartPostponed()+0xcc>)
    8b42:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
    8b46:	3b01      	subs	r3, #1
    8b48:	2b01      	cmp	r3, #1
    8b4a:	d926      	bls.n	8b9a <Mount::autostartPostponed()+0x76>
  if (!site.isDateTimeReady()) return;
    8b4c:	4829      	ldr	r0, [pc, #164]	; (8bf4 <Mount::autostartPostponed()+0xd0>)
    8b4e:	f00a fcc9 	bl	134e4 <Site::isDateTimeReady()>
    8b52:	b1f8      	cbz	r0, 8b94 <Mount::autostartPostponed()+0x70>
  if (!autoUnparkDone && park.state == PS_PARKED) {
    8b54:	4f28      	ldr	r7, [pc, #160]	; (8bf8 <Mount::autostartPostponed()+0xd4>)
    8b56:	783b      	ldrb	r3, [r7, #0]
    8b58:	b91b      	cbnz	r3, 8b62 <Mount::autostartPostponed()+0x3e>
    8b5a:	4828      	ldr	r0, [pc, #160]	; (8bfc <Mount::autostartPostponed()+0xd8>)
    8b5c:	7803      	ldrb	r3, [r0, #0]
    8b5e:	2b02      	cmp	r3, #2
    8b60:	d037      	beq.n	8bd2 <Mount::autostartPostponed()+0xae>
  autoUnparkDone = true;
    8b62:	2301      	movs	r3, #1
  if (!autoHomeDone && home.settings.automaticAtBoot) {
    8b64:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8c0c <Mount::autostartPostponed()+0xe8>
  autoUnparkDone = true;
    8b68:	703b      	strb	r3, [r7, #0]
  if (!autoHomeDone && home.settings.automaticAtBoot) {
    8b6a:	f898 3000 	ldrb.w	r3, [r8]
    8b6e:	4f24      	ldr	r7, [pc, #144]	; (8c00 <Mount::autostartPostponed()+0xdc>)
    8b70:	b92b      	cbnz	r3, 8b7e <Mount::autostartPostponed()+0x5a>
    8b72:	787b      	ldrb	r3, [r7, #1]
    8b74:	b11b      	cbz	r3, 8b7e <Mount::autostartPostponed()+0x5a>
    CommandError e = home.request();
    8b76:	4638      	mov	r0, r7
    8b78:	f006 fed6 	bl	f928 <Home::request()>
    if (e != CE_NONE) {
    8b7c:	bb70      	cbnz	r0, 8bdc <Mount::autostartPostponed()+0xb8>
  autoHomeDone = true;
    8b7e:	2101      	movs	r1, #1
  if (home.state == HS_HOMING) return;
    8b80:	7b7b      	ldrb	r3, [r7, #13]
    8b82:	428b      	cmp	r3, r1
  autoHomeDone = true;
    8b84:	f888 1000 	strb.w	r1, [r8]
  if (home.state == HS_HOMING) return;
    8b88:	d004      	beq.n	8b94 <Mount::autostartPostponed()+0x70>
  if (!autoTrackDone && TRACK_AUTOSTART == ON) {
    8b8a:	7833      	ldrb	r3, [r6, #0]
    8b8c:	b19b      	cbz	r3, 8bb6 <Mount::autostartPostponed()+0x92>
  autoTrackDone = true;
    8b8e:	2301      	movs	r3, #1
    8b90:	7033      	strb	r3, [r6, #0]
  autoStartDone = true;
    8b92:	702b      	strb	r3, [r5, #0]
}
    8b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b98:	4770      	bx	lr
  if (!autoTrackDone && TRACK_AUTOSTART == ON && transform.isEquatorial() && park.state != PS_PARKED && !home.settings.automaticAtBoot) {
    8b9a:	4b18      	ldr	r3, [pc, #96]	; (8bfc <Mount::autostartPostponed()+0xd8>)
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	2b02      	cmp	r3, #2
    8ba0:	d0d4      	beq.n	8b4c <Mount::autostartPostponed()+0x28>
    8ba2:	4f17      	ldr	r7, [pc, #92]	; (8c00 <Mount::autostartPostponed()+0xdc>)
    8ba4:	787b      	ldrb	r3, [r7, #1]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d1d0      	bne.n	8b4c <Mount::autostartPostponed()+0x28>
    tracking(true);
    8baa:	2101      	movs	r1, #1
    8bac:	f7ff ff84 	bl	8ab8 <Mount::tracking(bool)>
    autoStartDone = true;
    8bb0:	2301      	movs	r3, #1
    8bb2:	702b      	strb	r3, [r5, #0]
    return;
    8bb4:	e7ee      	b.n	8b94 <Mount::autostartPostponed()+0x70>
    tracking(true);
    8bb6:	4620      	mov	r0, r4
    8bb8:	f7ff ff7e 	bl	8ab8 <Mount::tracking(bool)>
    8bbc:	e7e7      	b.n	8b8e <Mount::autostartPostponed()+0x6a>
    tasks.setDurationComplete(tasks.getHandleByName("mnt_as"));
    8bbe:	4911      	ldr	r1, [pc, #68]	; (8c04 <Mount::autostartPostponed()+0xe0>)
    8bc0:	4811      	ldr	r0, [pc, #68]	; (8c08 <Mount::autostartPostponed()+0xe4>)
    8bc2:	f7fd fbf7 	bl	63b4 <Tasks::getHandleByName(char const*)>
    8bc6:	4601      	mov	r1, r0
    8bc8:	480f      	ldr	r0, [pc, #60]	; (8c08 <Mount::autostartPostponed()+0xe4>)
}
    8bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tasks.setDurationComplete(tasks.getHandleByName("mnt_as"));
    8bce:	f7fd bbdf 	b.w	6390 <Tasks::setDurationComplete(unsigned char)>
      CommandError e = park.restore(TRACK_AUTOSTART == ON);
    8bd2:	2101      	movs	r1, #1
    8bd4:	f009 f810 	bl	11bf8 <Park::restore(bool)>
      if (e != CE_NONE) {
    8bd8:	2800      	cmp	r0, #0
    8bda:	d0c2      	beq.n	8b62 <Mount::autostartPostponed()+0x3e>
        autoStartDone = true;
    8bdc:	2301      	movs	r3, #1
    8bde:	702b      	strb	r3, [r5, #0]
        return;
    8be0:	e7d8      	b.n	8b94 <Mount::autostartPostponed()+0x70>
    8be2:	bf00      	nop
    8be4:	20006464 	.word	0x20006464
    8be8:	20006aa6 	.word	0x20006aa6
    8bec:	20006aa7 	.word	0x20006aa7
    8bf0:	200064ac 	.word	0x200064ac
    8bf4:	200055d0 	.word	0x200055d0
    8bf8:	20006aa8 	.word	0x20006aa8
    8bfc:	20005ea8 	.word	0x20005ea8
    8c00:	20005478 	.word	0x20005478
    8c04:	20002260 	.word	0x20002260
    8c08:	2000634c 	.word	0x2000634c
    8c0c:	20006aa5 	.word	0x20006aa5

00008c10 <autostartWrapper()>:
inline void autostartWrapper() { mount.autostartPostponed(); }
    8c10:	4801      	ldr	r0, [pc, #4]	; (8c18 <autostartWrapper()+0x8>)
    8c12:	f7ff bf87 	b.w	8b24 <Mount::autostartPostponed()>
    8c16:	bf00      	nop
    8c18:	200054e0 	.word	0x200054e0

00008c1c <Mount::begin()>:
void Mount::begin() {
    8c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    // calibrate the motor if required
    void calibrate(float value) { motor->calibrate(value); }

    // calibrate the motor driver if required
    void calibrateDriver() { motor->calibrateDriver(); }
    8c20:	4f4a      	ldr	r7, [pc, #296]	; (8d4c <Mount::begin()+0x130>)
    8c22:	4604      	mov	r4, r0
    8c24:	4e4a      	ldr	r6, [pc, #296]	; (8d50 <Mount::begin()+0x134>)
  if (TRACK_COMPENSATION_MEMORY == OFF) settings.rc = RC_DEFAULT;
    8c26:	f04f 0800 	mov.w	r8, #0
    8c2a:	683b      	ldr	r3, [r7, #0]
  transform.init();
    8c2c:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8d8c <Mount::begin()+0x170>
    8c30:	681a      	ldr	r2, [r3, #0]
    8c32:	4618      	mov	r0, r3
  goTo.init();
    8c34:	4d47      	ldr	r5, [pc, #284]	; (8d54 <Mount::begin()+0x138>)
    8c36:	6c93      	ldr	r3, [r2, #72]	; 0x48
  park.init();
    8c38:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8d90 <Mount::begin()+0x174>
void Mount::begin() {
    8c3c:	ed2d 8b02 	vpush	{d8}
    8c40:	b084      	sub	sp, #16
    8c42:	4798      	blx	r3
  axis1.enable(MOUNT_ENABLE_IN_STANDBY == ON);
    8c44:	2100      	movs	r1, #0
    8c46:	4638      	mov	r0, r7
    8c48:	f7f8 f9da 	bl	1000 <Axis::enable(bool)>
    8c4c:	6830      	ldr	r0, [r6, #0]
    8c4e:	6803      	ldr	r3, [r0, #0]
    8c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8c52:	4798      	blx	r3
  axis2.enable(MOUNT_ENABLE_IN_STANDBY == ON);
    8c54:	2100      	movs	r1, #0
    8c56:	4630      	mov	r0, r6
    8c58:	f7f8 f9d2 	bl	1000 <Axis::enable(bool)>
  site.init();
    8c5c:	483e      	ldr	r0, [pc, #248]	; (8d58 <Mount::begin()+0x13c>)
    8c5e:	f00a fffb 	bl	13c58 <Site::init()>
  transform.init();
    8c62:	4650      	mov	r0, sl
    8c64:	f002 f988 	bl	af78 <Transform::init()>
  home.reset();
    8c68:	2101      	movs	r1, #1
    8c6a:	483c      	ldr	r0, [pc, #240]	; (8d5c <Mount::begin()+0x140>)
  if (TRACK_COMPENSATION_MEMORY == OFF) settings.rc = RC_DEFAULT;
    8c6c:	f884 8018 	strb.w	r8, [r4, #24]
  home.reset();
    8c70:	f006 fda0 	bl	f7b4 <Home::reset(bool)>
  limits.init();
    8c74:	483a      	ldr	r0, [pc, #232]	; (8d60 <Mount::begin()+0x144>)
    8c76:	f008 f857 	bl	10d28 <Limits::init()>
  guide.init();
    8c7a:	483a      	ldr	r0, [pc, #232]	; (8d64 <Mount::begin()+0x148>)
    8c7c:	f005 fbe4 	bl	e448 <Guide::init()>
  goTo.init();
    8c80:	4628      	mov	r0, r5
    8c82:	f005 f94d 	bl	df20 <Goto::init()>
  library.init();
    8c86:	4838      	ldr	r0, [pc, #224]	; (8d68 <Mount::begin()+0x14c>)
    8c88:	f007 faf4 	bl	10274 <Library::init()>
  park.init();
    8c8c:	4648      	mov	r0, r9
    8c8e:	f008 fe61 	bl	11954 <Park::init()>
    pec.init();
    8c92:	4836      	ldr	r0, [pc, #216]	; (8d6c <Mount::begin()+0x150>)
    8c94:	f009 fbbc 	bl	12410 <Pec::init()>
  update();
    8c98:	4620      	mov	r0, r4
    trackingState = TS_NONE;
    8c9a:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
  update();
    8c9e:	f7ff fe23 	bl	88e8 <Mount::update()>
    if (!goTo.absoluteEncodersPresent && park.state != PS_PARKED) {
    8ca2:	7a6b      	ldrb	r3, [r5, #9]
    8ca4:	b91b      	cbnz	r3, 8cae <Mount::begin()+0x92>
    8ca6:	f899 3000 	ldrb.w	r3, [r9]
    8caa:	2b02      	cmp	r3, #2
    8cac:	d129      	bne.n	8d02 <Mount::begin()+0xe6>
  if (tasks.add(1000, 0, true, 6, mountWrapper, "MntTrk")) { VLF("success"); } else { VLF("FAILED!"); }
    8cae:	4930      	ldr	r1, [pc, #192]	; (8d70 <Mount::begin()+0x154>)
    8cb0:	2006      	movs	r0, #6
    8cb2:	4a30      	ldr	r2, [pc, #192]	; (8d74 <Mount::begin()+0x158>)
    8cb4:	2301      	movs	r3, #1
  tasks.setDurationComplete(tasks.getHandleByName("mnt_as"));
    8cb6:	4d30      	ldr	r5, [pc, #192]	; (8d78 <Mount::begin()+0x15c>)
  if (tasks.add(1000, 0, true, 6, mountWrapper, "MntTrk")) { VLF("success"); } else { VLF("FAILED!"); }
    8cb8:	9000      	str	r0, [sp, #0]
    8cba:	4830      	ldr	r0, [pc, #192]	; (8d7c <Mount::begin()+0x160>)
    8cbc:	e9cd 2101 	strd	r2, r1, [sp, #4]
    8cc0:	2200      	movs	r2, #0
    8cc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8cc6:	f7fd fa89 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  update();
    8cca:	4620      	mov	r0, r4
    8ccc:	f7ff fe0c 	bl	88e8 <Mount::update()>
  tasks.setDurationComplete(tasks.getHandleByName("mnt_as"));
    8cd0:	4629      	mov	r1, r5
    8cd2:	482a      	ldr	r0, [pc, #168]	; (8d7c <Mount::begin()+0x160>)
  tasks.add(2000, 0, true, 7, autostartWrapper, "mnt_as");
    8cd4:	2407      	movs	r4, #7
  tasks.setDurationComplete(tasks.getHandleByName("mnt_as"));
    8cd6:	f7fd fb6d 	bl	63b4 <Tasks::getHandleByName(char const*)>
    8cda:	4601      	mov	r1, r0
    8cdc:	4827      	ldr	r0, [pc, #156]	; (8d7c <Mount::begin()+0x160>)
    8cde:	f7fd fb57 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
  tasks.add(2000, 0, true, 7, autostartWrapper, "mnt_as");
    8ce2:	4927      	ldr	r1, [pc, #156]	; (8d80 <Mount::begin()+0x164>)
    8ce4:	2301      	movs	r3, #1
    8ce6:	2200      	movs	r2, #0
    8ce8:	9400      	str	r4, [sp, #0]
    8cea:	4824      	ldr	r0, [pc, #144]	; (8d7c <Mount::begin()+0x160>)
    8cec:	e9cd 1501 	strd	r1, r5, [sp, #4]
    8cf0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8cf4:	f7fd fa72 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
}
    8cf8:	b004      	add	sp, #16
    8cfa:	ecbd 8b02 	vpop	{d8}
    8cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      int8_t lastMountType = nv.readC(NV_MOUNT_LAST_POSITION);
    8d02:	21f9      	movs	r1, #249	; 0xf9
    8d04:	481f      	ldr	r0, [pc, #124]	; (8d84 <Mount::begin()+0x168>)
    8d06:	f7fc f941 	bl	4f8c <NonVolatileStorage::readC(unsigned short)>
      if (transform.mountType == lastMountType) {
    8d0a:	f99a 35c4 	ldrsb.w	r3, [sl, #1476]	; 0x5c4
    8d0e:	4283      	cmp	r3, r0
    8d10:	d1cd      	bne.n	8cae <Mount::begin()+0x92>
        float a1 = nv.readF(NV_MOUNT_LAST_POSITION + 1);
    8d12:	21fa      	movs	r1, #250	; 0xfa
    8d14:	481b      	ldr	r0, [pc, #108]	; (8d84 <Mount::begin()+0x168>)
    8d16:	f7fc f94f 	bl	4fb8 <NonVolatileStorage::readF(unsigned short)>
        float a2 = nv.readF(NV_MOUNT_LAST_POSITION + 5);
    8d1a:	21fe      	movs	r1, #254	; 0xfe
        float a1 = nv.readF(NV_MOUNT_LAST_POSITION + 1);
    8d1c:	eef0 8a40 	vmov.f32	s17, s0
        float a2 = nv.readF(NV_MOUNT_LAST_POSITION + 5);
    8d20:	4818      	ldr	r0, [pc, #96]	; (8d84 <Mount::begin()+0x168>)
    8d22:	f7fc f949 	bl	4fb8 <NonVolatileStorage::readF(unsigned short)>
    8d26:	eeb0 8a40 	vmov.f32	s16, s0
        axis1.setInstrumentCoordinate(a1);
    8d2a:	4638      	mov	r0, r7
    8d2c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
    8d30:	f7f8 f9e0 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
        axis2.setInstrumentCoordinate(a2);
    8d34:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    8d38:	4630      	mov	r0, r6
    8d3a:	f7f8 f9db 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
        if (!goTo.absoluteEncodersPresent) mount.syncFromOnStepToEncoders = true;
    8d3e:	7a6b      	ldrb	r3, [r5, #9]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d1b4      	bne.n	8cae <Mount::begin()+0x92>
    8d44:	4b10      	ldr	r3, [pc, #64]	; (8d88 <Mount::begin()+0x16c>)
    8d46:	2201      	movs	r2, #1
    8d48:	701a      	strb	r2, [r3, #0]
    8d4a:	e7b0      	b.n	8cae <Mount::begin()+0x92>
    8d4c:	200050e8 	.word	0x200050e8
    8d50:	200051a8 	.word	0x200051a8
    8d54:	20005270 	.word	0x20005270
    8d58:	200055d0 	.word	0x200055d0
    8d5c:	20005478 	.word	0x20005478
    8d60:	20005cf4 	.word	0x20005cf4
    8d64:	200043e8 	.word	0x200043e8
    8d68:	20005cd0 	.word	0x20005cd0
    8d6c:	20005568 	.word	0x20005568
    8d70:	2000222c 	.word	0x2000222c
    8d74:	0000952d 	.word	0x0000952d
    8d78:	20002260 	.word	0x20002260
    8d7c:	2000634c 	.word	0x2000634c
    8d80:	00008c11 	.word	0x00008c11
    8d84:	20005e50 	.word	0x20005e50
    8d88:	200054e0 	.word	0x200054e0
    8d8c:	200064ac 	.word	0x200064ac
    8d90:	20005ea8 	.word	0x20005ea8
    8d94:	00000000 	.word	0x00000000

00008d98 <Mount::updatePosition(CoordReturn)>:
  float r = (altH - altL)/(altHr - altLr); if (r > 1.0F) r = 1.0F;
  return r;
}

// update where we are pointing *now*
void Mount::updatePosition(CoordReturn coordReturn) {
    8d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d9a:	4605      	mov	r5, r0
  current = transform.instrumentToMount(axis1.getInstrumentCoordinate(), axis2.getInstrumentCoordinate());
    8d9c:	4846      	ldr	r0, [pc, #280]	; (8eb8 <Mount::updatePosition(CoordReturn)+0x120>)
void Mount::updatePosition(CoordReturn coordReturn) {
    8d9e:	460c      	mov	r4, r1
  current = transform.instrumentToMount(axis1.getInstrumentCoordinate(), axis2.getInstrumentCoordinate());
    8da0:	4e46      	ldr	r6, [pc, #280]	; (8ebc <Mount::updatePosition(CoordReturn)+0x124>)
    8da2:	f105 0728 	add.w	r7, r5, #40	; 0x28
void Mount::updatePosition(CoordReturn coordReturn) {
    8da6:	ed2d 8b04 	vpush	{d8-d9}
    8daa:	b0c3      	sub	sp, #268	; 0x10c
  current = transform.instrumentToMount(axis1.getInstrumentCoordinate(), axis2.getInstrumentCoordinate());
    8dac:	f7f8 f9be 	bl	112c <Axis::getInstrumentCoordinate()>
    8db0:	eeb0 8b40 	vmov.f64	d8, d0
    8db4:	4842      	ldr	r0, [pc, #264]	; (8ec0 <Mount::updatePosition(CoordReturn)+0x128>)
    8db6:	f7f8 f9b9 	bl	112c <Axis::getInstrumentCoordinate()>
    8dba:	4668      	mov	r0, sp
    8dbc:	eeb0 1b40 	vmov.f64	d1, d0
    8dc0:	4631      	mov	r1, r6
    8dc2:	eeb0 0b48 	vmov.f64	d0, d8
    8dc6:	f002 f947 	bl	b058 <Transform::instrumentToMount(double, double)>
    8dca:	4669      	mov	r1, sp
    8dcc:	2258      	movs	r2, #88	; 0x58
    8dce:	4638      	mov	r0, r7
    8dd0:	f00f fb7c 	bl	184cc <memcpy>
    // returns true if either of the mount motor drivers report a fault
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }

    // returns true if the mount is at the home (startup) position
    inline bool isHome() {
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    8dd4:	4838      	ldr	r0, [pc, #224]	; (8eb8 <Mount::updatePosition(CoordReturn)+0x120>)
    8dd6:	f7f8 f9a9 	bl	112c <Axis::getInstrumentCoordinate()>
    8dda:	2200      	movs	r2, #0
    8ddc:	4939      	ldr	r1, [pc, #228]	; (8ec4 <Mount::updatePosition(CoordReturn)+0x12c>)
    8dde:	a816      	add	r0, sp, #88	; 0x58
    8de0:	eeb0 8b40 	vmov.f64	d8, d0
    8de4:	f006 fae0 	bl	f3a8 <Home::getPosition(CoordReturn)>
    8de8:	ed9d 7b24 	vldr	d7, [sp, #144]	; 0x90
    8dec:	ed9f 9b30 	vldr	d9, [pc, #192]	; 8eb0 <Mount::updatePosition(CoordReturn)+0x118>
    8df0:	ee38 8b47 	vsub.f64	d8, d8, d7
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    8df4:	eeb0 8bc8 	vabs.f64	d8, d8
    8df8:	eeb4 8bc9 	vcmpe.f64	d8, d9
    8dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e00:	d91b      	bls.n	8e3a <Mount::updatePosition(CoordReturn)+0xa2>
  if (isHome()) {
    transform.mountToInstrument(&current, &current.a1, &current.a2);
    current.pierSide = PIER_SIDE_NONE;
  }

  if (transform.mountType == ALTAZM) {
    8e02:	f996 35c4 	ldrsb.w	r3, [r6, #1476]	; 0x5c4
    8e06:	2b03      	cmp	r3, #3
    8e08:	d00a      	beq.n	8e20 <Mount::updatePosition(CoordReturn)+0x88>
    if (coordReturn == CR_MOUNT_EQU || coordReturn == CR_MOUNT_ALL) transform.horToEqu(&current);
  } else
  if (transform.mountType == ALTALT) {
    8e0a:	2b04      	cmp	r3, #4
    8e0c:	d03f      	beq.n	8e8e <Mount::updatePosition(CoordReturn)+0xf6>
    transform.aaToEqu(&current);
  } else {
    if (coordReturn == CR_MOUNT_ALT) transform.equToAlt(&current); else
    8e0e:	2c02      	cmp	r4, #2
    8e10:	d034      	beq.n	8e7c <Mount::updatePosition(CoordReturn)+0xe4>
    if (coordReturn == CR_MOUNT_HOR || coordReturn == CR_MOUNT_ALL) transform.equToHor(&current);
    8e12:	3c03      	subs	r4, #3
    8e14:	2c01      	cmp	r4, #1
    8e16:	d93f      	bls.n	8e98 <Mount::updatePosition(CoordReturn)+0x100>
  }
}
    8e18:	b043      	add	sp, #268	; 0x10c
    8e1a:	ecbd 8b04 	vpop	{d8-d9}
    8e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (coordReturn == CR_MOUNT_EQU || coordReturn == CR_MOUNT_ALL) transform.horToEqu(&current);
    8e20:	2c01      	cmp	r4, #1
    8e22:	d001      	beq.n	8e28 <Mount::updatePosition(CoordReturn)+0x90>
    8e24:	2c04      	cmp	r4, #4
    8e26:	d1f7      	bne.n	8e18 <Mount::updatePosition(CoordReturn)+0x80>
    void aaToEqu(Coordinate *coord) { aaToHor(coord); horToEqu(coord); };
    8e28:	4639      	mov	r1, r7
    8e2a:	4824      	ldr	r0, [pc, #144]	; (8ebc <Mount::updatePosition(CoordReturn)+0x124>)
}
    8e2c:	b043      	add	sp, #268	; 0x10c
    8e2e:	ecbd 8b04 	vpop	{d8-d9}
    8e32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8e36:	f002 bb33 	b.w	b4a0 <Transform::horToEqu(Coordinate*)>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    8e3a:	4821      	ldr	r0, [pc, #132]	; (8ec0 <Mount::updatePosition(CoordReturn)+0x128>)
    8e3c:	f7f8 f976 	bl	112c <Axis::getInstrumentCoordinate()>
    8e40:	2200      	movs	r2, #0
    8e42:	4920      	ldr	r1, [pc, #128]	; (8ec4 <Mount::updatePosition(CoordReturn)+0x12c>)
    8e44:	a82c      	add	r0, sp, #176	; 0xb0
    8e46:	eeb0 8b40 	vmov.f64	d8, d0
    8e4a:	f006 faad 	bl	f3a8 <Home::getPosition(CoordReturn)>
    8e4e:	ed9d 7b3e 	vldr	d7, [sp, #248]	; 0xf8
    8e52:	ee38 8b47 	vsub.f64	d8, d8, d7
    8e56:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    8e5a:	eeb4 8bc9 	vcmpe.f64	d8, d9
    8e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e62:	d8ce      	bhi.n	8e02 <Mount::updatePosition(CoordReturn)+0x6a>
    transform.mountToInstrument(&current, &current.a1, &current.a2);
    8e64:	f105 0370 	add.w	r3, r5, #112	; 0x70
    8e68:	f105 0260 	add.w	r2, r5, #96	; 0x60
    8e6c:	4639      	mov	r1, r7
    8e6e:	4630      	mov	r0, r6
    8e70:	f002 f96a 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
    current.pierSide = PIER_SIDE_NONE;
    8e74:	2300      	movs	r3, #0
    8e76:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
    8e7a:	e7c2      	b.n	8e02 <Mount::updatePosition(CoordReturn)+0x6a>
    if (coordReturn == CR_MOUNT_ALT) transform.equToAlt(&current); else
    8e7c:	4639      	mov	r1, r7
    8e7e:	480f      	ldr	r0, [pc, #60]	; (8ebc <Mount::updatePosition(CoordReturn)+0x124>)
}
    8e80:	b043      	add	sp, #268	; 0x10c
    8e82:	ecbd 8b04 	vpop	{d8-d9}
    8e86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if (coordReturn == CR_MOUNT_ALT) transform.equToAlt(&current); else
    8e8a:	f002 badf 	b.w	b44c <Transform::equToAlt(Coordinate*)>
    8e8e:	480b      	ldr	r0, [pc, #44]	; (8ebc <Mount::updatePosition(CoordReturn)+0x124>)
    8e90:	4639      	mov	r1, r7
    8e92:	f002 fb65 	bl	b560 <Transform::aaToHor(Coordinate*)>
    8e96:	e7c7      	b.n	8e28 <Mount::updatePosition(CoordReturn)+0x90>
    if (coordReturn == CR_MOUNT_HOR || coordReturn == CR_MOUNT_ALL) transform.equToHor(&current);
    8e98:	4639      	mov	r1, r7
    8e9a:	4808      	ldr	r0, [pc, #32]	; (8ebc <Mount::updatePosition(CoordReturn)+0x124>)
}
    8e9c:	b043      	add	sp, #268	; 0x10c
    8e9e:	ecbd 8b04 	vpop	{d8-d9}
    8ea2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if (coordReturn == CR_MOUNT_HOR || coordReturn == CR_MOUNT_ALL) transform.equToHor(&current);
    8ea6:	f002 ba3f 	b.w	b328 <Transform::equToHor(Coordinate*)>
    8eaa:	bf00      	nop
    8eac:	f3af 8000 	nop.w
    8eb0:	71ef8766 	.word	0x71ef8766
    8eb4:	3e9787ad 	.word	0x3e9787ad
    8eb8:	200050e8 	.word	0x200050e8
    8ebc:	200064ac 	.word	0x200064ac
    8ec0:	200051a8 	.word	0x200051a8
    8ec4:	20005478 	.word	0x20005478

00008ec8 <Mount::getPosition(CoordReturn)>:
Coordinate Mount::getPosition(CoordReturn coordReturn) {
    8ec8:	b538      	push	{r3, r4, r5, lr}
    8eca:	460d      	mov	r5, r1
    8ecc:	4604      	mov	r4, r0
  updatePosition(coordReturn);
    8ece:	4611      	mov	r1, r2
    8ed0:	4628      	mov	r0, r5
    8ed2:	f7ff ff61 	bl	8d98 <Mount::updatePosition(CoordReturn)>
  return transform.mountToNative(&current, false);
    8ed6:	4620      	mov	r0, r4
    8ed8:	2300      	movs	r3, #0
    8eda:	f105 0228 	add.w	r2, r5, #40	; 0x28
    8ede:	4902      	ldr	r1, [pc, #8]	; (8ee8 <Mount::getPosition(CoordReturn)+0x20>)
    8ee0:	f002 fdc6 	bl	ba70 <Transform::mountToNative(Coordinate*, bool)>
}
    8ee4:	4620      	mov	r0, r4
    8ee6:	bd38      	pop	{r3, r4, r5, pc}
    8ee8:	200064ac 	.word	0x200064ac

00008eec <Mount::getMountPosition(CoordReturn)>:
Coordinate Mount::getMountPosition(CoordReturn coordReturn) {
    8eec:	b538      	push	{r3, r4, r5, lr}
    8eee:	460d      	mov	r5, r1
    8ef0:	4604      	mov	r4, r0
  updatePosition(coordReturn);
    8ef2:	4611      	mov	r1, r2
    8ef4:	4628      	mov	r0, r5
    8ef6:	f7ff ff4f 	bl	8d98 <Mount::updatePosition(CoordReturn)>
  return current;
    8efa:	2258      	movs	r2, #88	; 0x58
    8efc:	f105 0128 	add.w	r1, r5, #40	; 0x28
    8f00:	4620      	mov	r0, r4
    8f02:	f00f fae3 	bl	184cc <memcpy>
}
    8f06:	4620      	mov	r0, r4
    8f08:	bd38      	pop	{r3, r4, r5, pc}
    8f0a:	bf00      	nop
    8f0c:	0000      	movs	r0, r0
	...

00008f10 <Mount::poll()>:
void Mount::poll() {
    8f10:	b570      	push	{r4, r5, r6, lr}
    inline bool motorFault() { return motor->getDriverStatus().fault; };
    8f12:	4ecd      	ldr	r6, [pc, #820]	; (9248 <Mount::poll()+0x338>)
    8f14:	4604      	mov	r4, r0
    if (goTo.state > GS_NONE) goTo.abort(); else
    8f16:	4dcd      	ldr	r5, [pc, #820]	; (924c <Mount::poll()+0x33c>)
    8f18:	6831      	ldr	r1, [r6, #0]
void Mount::poll() {
    8f1a:	ed2d 8b08 	vpush	{d8-d11}
    8f1e:	680b      	ldr	r3, [r1, #0]
    8f20:	b0ae      	sub	sp, #184	; 0xb8
    8f22:	699b      	ldr	r3, [r3, #24]
    8f24:	a818      	add	r0, sp, #96	; 0x60
    8f26:	4798      	blx	r3
    8f28:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	f000 8199 	beq.w	9264 <Mount::poll()+0x354>
    if (goTo.state > GS_NONE) goTo.abort(); else
    8f32:	782b      	ldrb	r3, [r5, #0]
    8f34:	2b00      	cmp	r3, #0
    8f36:	f040 81a4 	bne.w	9282 <Mount::poll()+0x372>
    if (guide.state > GU_NONE) guide.abort(); else
    8f3a:	48c5      	ldr	r0, [pc, #788]	; (9250 <Mount::poll()+0x340>)
    8f3c:	7803      	ldrb	r3, [r0, #0]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	f040 8267 	bne.w	9412 <Mount::poll()+0x502>
    inline bool isEnabled() { return enabled && !motor->calibrating; }
    8f44:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    8f48:	2b00      	cmp	r3, #0
    8f4a:	f000 8256 	beq.w	93fa <Mount::poll()+0x4ea>
    8f4e:	6833      	ldr	r3, [r6, #0]
    8f50:	7adb      	ldrb	r3, [r3, #11]
    8f52:	2b00      	cmp	r3, #0
    8f54:	f040 8251 	bne.w	93fa <Mount::poll()+0x4ea>
    trackingState = TS_NONE;
    8f58:	2600      	movs	r6, #0
    update();
    8f5a:	4620      	mov	r0, r4
    trackingState = TS_NONE;
    8f5c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
    update();
    8f60:	f7ff fcc2 	bl	88e8 <Mount::update()>
  axis1.enable(state);
    8f64:	4631      	mov	r1, r6
    8f66:	48b8      	ldr	r0, [pc, #736]	; (9248 <Mount::poll()+0x338>)
    8f68:	f7f8 f84a 	bl	1000 <Axis::enable(bool)>
  axis2.enable(state);
    8f6c:	4631      	mov	r1, r6
    8f6e:	48b9      	ldr	r0, [pc, #740]	; (9254 <Mount::poll()+0x344>)
    8f70:	f7f8 f846 	bl	1000 <Axis::enable(bool)>
    if (!goTo.absoluteEncodersPresent) {
    8f74:	7a6d      	ldrb	r5, [r5, #9]
    8f76:	2d00      	cmp	r5, #0
    8f78:	f000 818a 	beq.w	9290 <Mount::poll()+0x380>
  if (trackingState == TS_NONE) {
    8f7c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    8f80:	2b00      	cmp	r3, #0
    8f82:	f000 81b3 	beq.w	92ec <Mount::poll()+0x3dc>
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    8f86:	4db4      	ldr	r5, [pc, #720]	; (9258 <Mount::poll()+0x348>)
    8f88:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (transform.isEquatorial() && settings.rc == RC_NONE && trackingRateOffsetRA == 0.0F && trackingRateOffsetDec == 0.0F) {
    8f8c:	3b01      	subs	r3, #1
    8f8e:	2b01      	cmp	r3, #1
    8f90:	d80a      	bhi.n	8fa8 <Mount::poll()+0x98>
    8f92:	7e23      	ldrb	r3, [r4, #24]
    8f94:	b943      	cbnz	r3, 8fa8 <Mount::poll()+0x98>
    8f96:	edd4 7a04 	vldr	s15, [r4, #16]
    8f9a:	2300      	movs	r3, #0
    8f9c:	eef5 7a40 	vcmp.f32	s15, #0.0
    8fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8fa4:	f000 821c 	beq.w	93e0 <Mount::poll()+0x4d0>
  updatePosition(CR_MOUNT_ALL);
    8fa8:	2104      	movs	r1, #4
    8faa:	4620      	mov	r0, r4
    8fac:	f7ff fef4 	bl	8d98 <Mount::updatePosition(CoordReturn)>
    transform.mountToTopocentric(&current);
    8fb0:	f104 0128 	add.w	r1, r4, #40	; 0x28
    8fb4:	48a8      	ldr	r0, [pc, #672]	; (9258 <Mount::poll()+0x348>)
    8fb6:	9101      	str	r1, [sp, #4]
  double altitude = current.a;
    8fb8:	ed94 ab10 	vldr	d10, [r4, #64]	; 0x40
  double declination = current.d;
    8fbc:	ed94 8b0e 	vldr	d8, [r4, #56]	; 0x38
  double altitude2 = current.aa2;
    8fc0:	ed94 9b16 	vldr	d9, [r4, #88]	; 0x58
    transform.mountToTopocentric(&current);
    8fc4:	f002 fd40 	bl	ba48 <Transform::mountToTopocentric(Coordinate*)>
    if (transform.mountType == ALTAZM) transform.horToEqu(&current); else
    8fc8:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
    8fcc:	9901      	ldr	r1, [sp, #4]
    8fce:	2b03      	cmp	r3, #3
    8fd0:	f000 8252 	beq.w	9478 <Mount::poll()+0x568>
    if (transform.mountType == ALTALT) transform.aaToEqu(&current);
    8fd4:	2b04      	cmp	r3, #4
    8fd6:	f000 828a 	beq.w	94ee <Mount::poll()+0x5de>
  Coordinate ahead = current;
    8fda:	2258      	movs	r2, #88	; 0x58
    8fdc:	a802      	add	r0, sp, #8
    8fde:	9101      	str	r1, [sp, #4]
    8fe0:	f00f fa74 	bl	184cc <memcpy>
  Coordinate behind = current;
    8fe4:	9901      	ldr	r1, [sp, #4]
    8fe6:	2258      	movs	r2, #88	; 0x58
    8fe8:	a818      	add	r0, sp, #96	; 0x60
    8fea:	f00f fa6f 	bl	184cc <memcpy>
  Y;
    8fee:	489b      	ldr	r0, [pc, #620]	; (925c <Mount::poll()+0x34c>)
    8ff0:	f7fd fa26 	bl	6440 <Tasks::yield()>
  if (transform.mountType == ALTAZM) { transform.equToHor(&ahead); transform.equToHor(&behind); Y; } else
    8ff4:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
  ahead.h += DiffRange;
    8ff8:	ed9f 5b87 	vldr	d5, [pc, #540]	; 9218 <Mount::poll()+0x308>
    8ffc:	ed9d 6b04 	vldr	d6, [sp, #16]
  behind.h -= DiffRange;
    9000:	ed9d 7b1a 	vldr	d7, [sp, #104]	; 0x68
  if (transform.mountType == ALTAZM) { transform.equToHor(&ahead); transform.equToHor(&behind); Y; } else
    9004:	2b03      	cmp	r3, #3
  ahead.h += DiffRange;
    9006:	ee36 6b05 	vadd.f64	d6, d6, d5
  behind.h -= DiffRange;
    900a:	ee37 7b45 	vsub.f64	d7, d7, d5
  ahead.h += DiffRange;
    900e:	ed8d 6b04 	vstr	d6, [sp, #16]
  behind.h -= DiffRange;
    9012:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
  if (transform.mountType == ALTAZM) { transform.equToHor(&ahead); transform.equToHor(&behind); Y; } else
    9016:	f000 8223 	beq.w	9460 <Mount::poll()+0x550>
  if (transform.mountType == ALTALT) { transform.equToAa(&ahead); transform.equToAa(&behind); Y; }
    901a:	2b04      	cmp	r3, #4
    901c:	f000 8253 	beq.w	94c6 <Mount::poll()+0x5b6>
  if (settings.rc == RC_MODEL || settings.rc == RC_MODEL_DUAL) {
    9020:	7e23      	ldrb	r3, [r4, #24]
    9022:	1eda      	subs	r2, r3, #3
    9024:	2a01      	cmp	r2, #1
    9026:	f240 81fa 	bls.w	941e <Mount::poll()+0x50e>
  } else if (settings.rc == RC_REFRACTION || settings.rc == RC_REFRACTION_DUAL) {
    902a:	1e5a      	subs	r2, r3, #1
    902c:	2a01      	cmp	r2, #1
    902e:	f240 8229 	bls.w	9484 <Mount::poll()+0x574>
  if (settings.rc != RC_REFRACTION_DUAL && settings.rc != RC_MODEL_DUAL) { behind.d = ahead.d; }
    9032:	2b02      	cmp	r3, #2
    9034:	ed9d 6b06 	vldr	d6, [sp, #24]
    9038:	f000 8163 	beq.w	9302 <Mount::poll()+0x3f2>
    903c:	2b04      	cmp	r3, #4
    903e:	f000 8160 	beq.w	9302 <Mount::poll()+0x3f2>
    9042:	eeb0 4b46 	vmov.f64	d4, d6
  float trackingRateOffsetRadsDec = siderealToRad(trackingRateOffsetDec)*timeInSeconds;
    9046:	ed94 7a05 	vldr	s14, [r4, #20]
    904a:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
  float trackingRateOffsetRadsRA = siderealToRad(trackingRateOffsetRA)*timeInSeconds;
    904e:	ed94 3a04 	vldr	s6, [r4, #16]
  float trackingRateOffsetRadsDec = siderealToRad(trackingRateOffsetDec)*timeInSeconds;
    9052:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  if (guide.state == GU_PULSE_GUIDE && (transform.mountType == ALTAZM || transform.mountType == ALTALT)) {
    9056:	4a7e      	ldr	r2, [pc, #504]	; (9250 <Mount::poll()+0x340>)
  float trackingRateOffsetRadsRA = siderealToRad(trackingRateOffsetRA)*timeInSeconds;
    9058:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
  if (guide.state == GU_PULSE_GUIDE && (transform.mountType == ALTAZM || transform.mountType == ALTALT)) {
    905c:	7813      	ldrb	r3, [r2, #0]
  float trackingRateOffsetRadsDec = siderealToRad(trackingRateOffsetDec)*timeInSeconds;
    905e:	ed9f 1b70 	vldr	d1, [pc, #448]	; 9220 <Mount::poll()+0x310>
  if (guide.state == GU_PULSE_GUIDE && (transform.mountType == ALTAZM || transform.mountType == ALTALT)) {
    9062:	2b01      	cmp	r3, #1
    9064:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
  float trackingRateOffsetRadsDec = siderealToRad(trackingRateOffsetDec)*timeInSeconds;
    9068:	ee87 5b01 	vdiv.f64	d5, d7, d1
  float trackingRateOffsetRadsRA = siderealToRad(trackingRateOffsetRA)*timeInSeconds;
    906c:	ee83 7b01 	vdiv.f64	d7, d3, d1
  behind.h += trackingRateOffsetRadsRA;
    9070:	ed9d 3b1a 	vldr	d3, [sp, #104]	; 0x68
  float trackingRateOffsetRadsDec = siderealToRad(trackingRateOffsetDec)*timeInSeconds;
    9074:	ee25 5b02 	vmul.f64	d5, d5, d2
  float trackingRateOffsetRadsRA = siderealToRad(trackingRateOffsetRA)*timeInSeconds;
    9078:	ee27 7b02 	vmul.f64	d7, d7, d2
  float trackingRateOffsetRadsDec = siderealToRad(trackingRateOffsetDec)*timeInSeconds;
    907c:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  float trackingRateOffsetRadsRA = siderealToRad(trackingRateOffsetRA)*timeInSeconds;
    9080:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  ahead.d += trackingRateOffsetRadsDec;
    9084:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  ahead.h -= trackingRateOffsetRadsRA;
    9088:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  ahead.d += trackingRateOffsetRadsDec;
    908c:	ee35 6b06 	vadd.f64	d6, d5, d6
  behind.d -= trackingRateOffsetRadsDec;
    9090:	ee34 4b45 	vsub.f64	d4, d4, d5
  ahead.h -= trackingRateOffsetRadsRA;
    9094:	ed9d 5b04 	vldr	d5, [sp, #16]
  ahead.d += trackingRateOffsetRadsDec;
    9098:	ed8d 6b06 	vstr	d6, [sp, #24]
  behind.d -= trackingRateOffsetRadsDec;
    909c:	ed8d 4b1c 	vstr	d4, [sp, #112]	; 0x70
  ahead.h -= trackingRateOffsetRadsRA;
    90a0:	ee35 5b47 	vsub.f64	d5, d5, d7
  behind.h += trackingRateOffsetRadsRA;
    90a4:	ee37 7b03 	vadd.f64	d7, d7, d3
  ahead.h -= trackingRateOffsetRadsRA;
    90a8:	ed8d 5b04 	vstr	d5, [sp, #16]
  behind.h += trackingRateOffsetRadsRA;
    90ac:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
  if (guide.state == GU_PULSE_GUIDE && (transform.mountType == ALTAZM || transform.mountType == ALTALT)) {
    90b0:	f000 812a 	beq.w	9308 <Mount::poll()+0x3f8>
  if (transform.mountType == ALTAZM) {
    90b4:	2b03      	cmp	r3, #3
    90b6:	f000 815b 	beq.w	9370 <Mount::poll()+0x460>
  if (transform.mountType == ALTALT) {
    90ba:	2b04      	cmp	r3, #4
    90bc:	f000 81f2 	beq.w	94a4 <Mount::poll()+0x594>
    aheadAxis1 = ahead.h;
    90c0:	ed9d 7b04 	vldr	d7, [sp, #16]
    aheadAxis2 = ahead.d;
    90c4:	ed9d 6b06 	vldr	d6, [sp, #24]
    behindAxis1 = behind.h;
    90c8:	ed9d 5b1a 	vldr	d5, [sp, #104]	; 0x68
    behindAxis2 = behind.d;
    90cc:	ed9d 4b1c 	vldr	d4, [sp, #112]	; 0x70
    aheadAxis1 = ahead.h;
    90d0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    aheadAxis2 = ahead.d;
    90d4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    behindAxis1 = behind.h;
    90d8:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    behindAxis2 = behind.d;
    90dc:	eef7 2bc4 	vcvt.f32.f64	s5, d4
  if (aheadAxis1 < -Deg90 && behindAxis1 > Deg90) aheadAxis1 += Deg360;
    90e0:	eeb7 3ac7 	vcvt.f64.f32	d3, s14
    90e4:	ed9f 4b50 	vldr	d4, [pc, #320]	; 9228 <Mount::poll()+0x318>
    90e8:	eeb4 3bc4 	vcmpe.f64	d3, d4
    90ec:	eeb7 4ac5 	vcvt.f64.f32	d4, s10
    90f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90f4:	d507      	bpl.n	9106 <Mount::poll()+0x1f6>
    90f6:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 9230 <Mount::poll()+0x320>
    90fa:	eeb4 4bc1 	vcmpe.f64	d4, d1
    90fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9102:	f300 8166 	bgt.w	93d2 <Mount::poll()+0x4c2>
  if (behindAxis1 < -Deg90 && aheadAxis1 > Deg90) behindAxis1 += Deg360;
    9106:	ed9f 3b48 	vldr	d3, [pc, #288]	; 9228 <Mount::poll()+0x318>
    910a:	eeb4 4bc3 	vcmpe.f64	d4, d3
    910e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9112:	d509      	bpl.n	9128 <Mount::poll()+0x218>
    9114:	eeb7 3ac7 	vcvt.f64.f32	d3, s14
    9118:	ed9f 1b45 	vldr	d1, [pc, #276]	; 9230 <Mount::poll()+0x320>
    911c:	eeb4 3bc1 	vcmpe.f64	d3, d1
    9120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9124:	f300 814e 	bgt.w	93c4 <Mount::poll()+0x4b4>
  float rate1 = (aheadAxis1 - behindAxis1)/DiffRange2;
    9128:	ee37 7a45 	vsub.f32	s14, s14, s10
  if (fabs(trackingRateAxis1 - rate1) <= 0.005F) trackingRateAxis1 = (trackingRateAxis1*9.0F + rate1)/10.0F; else trackingRateAxis1 = rate1;
    912c:	edd4 6a02 	vldr	s13, [r4, #8]
    9130:	eddf 4a4b 	vldr	s9, [pc, #300]	; 9260 <Mount::poll()+0x350>
  float rate1 = (aheadAxis1 - behindAxis1)/DiffRange2;
    9134:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9138:	ed9f 3b3f 	vldr	d3, [pc, #252]	; 9238 <Mount::poll()+0x328>
    913c:	ee87 5b03 	vdiv.f64	d5, d7, d3
    9140:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  if (fabs(trackingRateAxis1 - rate1) <= 0.005F) trackingRateAxis1 = (trackingRateAxis1*9.0F + rate1)/10.0F; else trackingRateAxis1 = rate1;
    9144:	ee76 7ac5 	vsub.f32	s15, s13, s10
    9148:	eef0 7ae7 	vabs.f32	s15, s15
    914c:	eef4 7ae4 	vcmpe.f32	s15, s9
    9150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9154:	d809      	bhi.n	916a <Mount::poll()+0x25a>
    9156:	eeb0 7a45 	vmov.f32	s14, s10
    915a:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
    915e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    9162:	eea6 7aa5 	vfma.f32	s14, s13, s11
    9166:	ee87 5a27 	vdiv.f32	s10, s14, s15
  if (current.pierSide == PIER_SIDE_WEST) rate2 = -rate2;
    916a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    916e:	ed84 5a02 	vstr	s10, [r4, #8]
    9172:	2a02      	cmp	r2, #2
  float rate2 = (aheadAxis2 - behindAxis2)/DiffRange2;
    9174:	ee36 6a62 	vsub.f32	s12, s12, s5
    9178:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 9238 <Mount::poll()+0x328>
    917c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9180:	ee86 7b04 	vdiv.f64	d7, d6, d4
  if (fabs(trackingRateAxis2 - rate2) <= 0.005F) trackingRateAxis2 = (trackingRateAxis2*9.0F + rate2)/10.0F; else trackingRateAxis2 = rate2;
    9184:	edd4 6a03 	vldr	s13, [r4, #12]
    9188:	ed9f 6a35 	vldr	s12, [pc, #212]	; 9260 <Mount::poll()+0x350>
  float rate2 = (aheadAxis2 - behindAxis2)/DiffRange2;
    918c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  if (current.pierSide == PIER_SIDE_WEST) rate2 = -rate2;
    9190:	bf08      	it	eq
    9192:	eeb1 7a47 	vnegeq.f32	s14, s14
  if (fabs(trackingRateAxis2 - rate2) <= 0.005F) trackingRateAxis2 = (trackingRateAxis2*9.0F + rate2)/10.0F; else trackingRateAxis2 = rate2;
    9196:	ee76 7ac7 	vsub.f32	s15, s13, s14
    919a:	eef0 7ae7 	vabs.f32	s15, s15
    919e:	eef4 7ac6 	vcmpe.f32	s15, s12
    91a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91a6:	d809      	bhi.n	91bc <Mount::poll()+0x2ac>
    91a8:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
    91ac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    91b0:	eea6 7aa5 	vfma.f32	s14, s13, s11
    91b4:	eeb0 6a47 	vmov.f32	s12, s14
    91b8:	ee86 7a27 	vdiv.f32	s14, s12, s15
    91bc:	ed84 7a03 	vstr	s14, [r4, #12]
  if (fabs(declination) > Deg90 - DegenerateRange) {
    91c0:	eeb0 8bc8 	vabs.f64	d8, d8
    91c4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 9240 <Mount::poll()+0x330>
    91c8:	eeb4 8bc6 	vcmpe.f64	d8, d6
    91cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91d0:	dd0a      	ble.n	91e8 <Mount::poll()+0x2d8>
    91d2:	b2da      	uxtb	r2, r3
    if (transform.isEquatorial()) trackingRateAxis1 = trackingRate; else
    91d4:	1e51      	subs	r1, r2, #1
    91d6:	2901      	cmp	r1, #1
    91d8:	f240 813f 	bls.w	945a <Mount::poll()+0x54a>
    if (transform.mountType == ALTAZM) trackingRateAxis1 = 0.0F; else
    91dc:	3a03      	subs	r2, #3
    91de:	2a01      	cmp	r2, #1
    91e0:	f240 811a 	bls.w	9418 <Mount::poll()+0x508>
    trackingRateAxis2 = 0.0F;
    91e4:	2200      	movs	r2, #0
    91e6:	60e2      	str	r2, [r4, #12]
  if (altitude > Deg90 - DegenerateRange) {
    91e8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 9240 <Mount::poll()+0x330>
    91ec:	eeb4 abc7 	vcmpe.f64	d10, d7
    91f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91f4:	dd05      	ble.n	9202 <Mount::poll()+0x2f2>
    if (transform.mountType == ALTAZM) trackingRateAxis1 = 0.0F; 
    91f6:	2b03      	cmp	r3, #3
    91f8:	d101      	bne.n	91fe <Mount::poll()+0x2ee>
    91fa:	2200      	movs	r2, #0
    91fc:	60a2      	str	r2, [r4, #8]
    trackingRateAxis2 = 0.0F;
    91fe:	2200      	movs	r2, #0
    9200:	60e2      	str	r2, [r4, #12]
  if (transform.mountType == ALTALT && fabs(altitude2) > Deg90 - DegenerateRange) { trackingRateAxis1 = 0.0F; }
    9202:	2b04      	cmp	r3, #4
    9204:	f000 80cb 	beq.w	939e <Mount::poll()+0x48e>
  update();
    9208:	4620      	mov	r0, r4
    920a:	f7ff fb6d 	bl	88e8 <Mount::update()>
}
    920e:	b02e      	add	sp, #184	; 0xb8
    9210:	ecbd 8b08 	vpop	{d8-d11}
    9214:	bd70      	pop	{r4, r5, r6, pc}
    9216:	bf00      	nop
    9218:	57cf96a3 	.word	0x57cf96a3
    921c:	3f33104b 	.word	0x3f33104b
    9220:	58bd85d4 	.word	0x58bd85d4
    9224:	40cadb7e 	.word	0x40cadb7e
    9228:	54442d15 	.word	0x54442d15
    922c:	bff921fb 	.word	0xbff921fb
    9230:	54442d15 	.word	0x54442d15
    9234:	3ff921fb 	.word	0x3ff921fb
    9238:	57cf96a3 	.word	0x57cf96a3
    923c:	3f43104b 	.word	0x3f43104b
    9240:	cd33f19f 	.word	0xcd33f19f
    9244:	3ff92031 	.word	0x3ff92031
    9248:	200050e8 	.word	0x200050e8
    924c:	20005270 	.word	0x20005270
    9250:	200043e8 	.word	0x200043e8
    9254:	200051a8 	.word	0x200051a8
    9258:	200064ac 	.word	0x200064ac
    925c:	2000634c 	.word	0x2000634c
    9260:	3ba3d70a 	.word	0x3ba3d70a
    inline bool motorFault() { return motor->getDriverStatus().fault; };
    9264:	4bac      	ldr	r3, [pc, #688]	; (9518 <Mount::poll()+0x608>)
    9266:	a818      	add	r0, sp, #96	; 0x60
    9268:	6819      	ldr	r1, [r3, #0]
    926a:	680b      	ldr	r3, [r1, #0]
    926c:	699b      	ldr	r3, [r3, #24]
    926e:	4798      	blx	r3
    9270:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    9274:	2b00      	cmp	r3, #0
    9276:	f43f ae7d 	beq.w	8f74 <Mount::poll()+0x64>
    if (goTo.state > GS_NONE) goTo.abort(); else
    927a:	782b      	ldrb	r3, [r5, #0]
    927c:	2b00      	cmp	r3, #0
    927e:	f43f ae5c 	beq.w	8f3a <Mount::poll()+0x2a>
    9282:	4628      	mov	r0, r5
    9284:	f003 fd94 	bl	cdb0 <Goto::abort()>
    if (!goTo.absoluteEncodersPresent) {
    9288:	7a6d      	ldrb	r5, [r5, #9]
    928a:	2d00      	cmp	r5, #0
    928c:	f47f ae76 	bne.w	8f7c <Mount::poll()+0x6c>
      nv.ignoreCache(true);
    9290:	2101      	movs	r1, #1
    9292:	48a2      	ldr	r0, [pc, #648]	; (951c <Mount::poll()+0x60c>)
    9294:	f7fb fd68 	bl	4d68 <NonVolatileStorage::ignoreCache(bool)>
      nv.write(NV_MOUNT_LAST_POSITION, transform.mountType);
    9298:	4ba1      	ldr	r3, [pc, #644]	; (9520 <Mount::poll()+0x610>)
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    929a:	21f9      	movs	r1, #249	; 0xf9
    929c:	489f      	ldr	r0, [pc, #636]	; (951c <Mount::poll()+0x60c>)
    929e:	f893 25c4 	ldrb.w	r2, [r3, #1476]	; 0x5c4
    92a2:	f7fb fdad 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
      nv.write(NV_MOUNT_LAST_POSITION + 1, (float)axis1.getInstrumentCoordinate());
    92a6:	489f      	ldr	r0, [pc, #636]	; (9524 <Mount::poll()+0x614>)
    92a8:	f7f7 ff40 	bl	112c <Axis::getInstrumentCoordinate()>
    92ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    inline void update(uint16_t i,    float j) { updateBytes(i, (uint8_t*)&j, sizeof(float)); }
    92b0:	2304      	movs	r3, #4
    92b2:	aa18      	add	r2, sp, #96	; 0x60
    92b4:	21fa      	movs	r1, #250	; 0xfa
    92b6:	4899      	ldr	r0, [pc, #612]	; (951c <Mount::poll()+0x60c>)
    92b8:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
    92bc:	f7fb fed6 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
      nv.write(NV_MOUNT_LAST_POSITION + 5, (float)axis2.getInstrumentCoordinate());
    92c0:	4895      	ldr	r0, [pc, #596]	; (9518 <Mount::poll()+0x608>)
    92c2:	f7f7 ff33 	bl	112c <Axis::getInstrumentCoordinate()>
    92c6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    92ca:	2304      	movs	r3, #4
    92cc:	aa18      	add	r2, sp, #96	; 0x60
    92ce:	4893      	ldr	r0, [pc, #588]	; (951c <Mount::poll()+0x60c>)
    92d0:	21fe      	movs	r1, #254	; 0xfe
    92d2:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
    92d6:	f7fb fec9 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
      nv.ignoreCache(false);
    92da:	4629      	mov	r1, r5
    92dc:	488f      	ldr	r0, [pc, #572]	; (951c <Mount::poll()+0x60c>)
    92de:	f7fb fd43 	bl	4d68 <NonVolatileStorage::ignoreCache(bool)>
  if (trackingState == TS_NONE) {
    92e2:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
    92e6:	2b00      	cmp	r3, #0
    92e8:	f47f ae4d 	bne.w	8f86 <Mount::poll()+0x76>
    trackingRateAxis1 = 0.0F;
    92ec:	2300      	movs	r3, #0
    update();
    92ee:	4620      	mov	r0, r4
    trackingRateAxis1 = 0.0F;
    92f0:	60a3      	str	r3, [r4, #8]
    trackingRateAxis2 = 0.0F;
    92f2:	60e3      	str	r3, [r4, #12]
}
    92f4:	b02e      	add	sp, #184	; 0xb8
    92f6:	ecbd 8b08 	vpop	{d8-d11}
    92fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    update();
    92fe:	f7ff baf3 	b.w	88e8 <Mount::update()>
  behind.d -= trackingRateOffsetRadsDec;
    9302:	ed9d 4b1c 	vldr	d4, [sp, #112]	; 0x70
    9306:	e69e      	b.n	9046 <Mount::poll()+0x136>
  if (guide.state == GU_PULSE_GUIDE && (transform.mountType == ALTAZM || transform.mountType == ALTALT)) {
    9308:	1ed9      	subs	r1, r3, #3
    930a:	b2c9      	uxtb	r1, r1
    930c:	2901      	cmp	r1, #1
    930e:	f63f aed4 	bhi.w	90ba <Mount::poll()+0x1aa>
    float trackingRateGuideRadsDec = siderealToRad(guide.rateAxis2)*timeInSeconds*2.0;
    9312:	ed92 ba02 	vldr	s22, [r2, #8]
  if (transform.mountType == ALTAZM) {
    9316:	2b03      	cmp	r3, #3
    float trackingRateGuideRadsRA = siderealToRad(guide.rateAxis1)*timeInSeconds*2.0;
    9318:	ed92 0a01 	vldr	s0, [r2, #4]
    float trackingRateGuideRadsDec = siderealToRad(guide.rateAxis2)*timeInSeconds*2.0;
    931c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
    float trackingRateGuideRadsRA = siderealToRad(guide.rateAxis1)*timeInSeconds*2.0;
    9320:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    float trackingRateGuideRadsDec = siderealToRad(guide.rateAxis2)*timeInSeconds*2.0;
    9324:	ee8b 3b01 	vdiv.f64	d3, d11, d1
    float trackingRateGuideRadsRA = siderealToRad(guide.rateAxis1)*timeInSeconds*2.0;
    9328:	ee80 bb01 	vdiv.f64	d11, d0, d1
    float trackingRateGuideRadsDec = siderealToRad(guide.rateAxis2)*timeInSeconds*2.0;
    932c:	ee23 3b02 	vmul.f64	d3, d3, d2
    float trackingRateGuideRadsRA = siderealToRad(guide.rateAxis1)*timeInSeconds*2.0;
    9330:	ee2b bb02 	vmul.f64	d11, d11, d2
    float trackingRateGuideRadsDec = siderealToRad(guide.rateAxis2)*timeInSeconds*2.0;
    9334:	ee33 3b03 	vadd.f64	d3, d3, d3
    float trackingRateGuideRadsRA = siderealToRad(guide.rateAxis1)*timeInSeconds*2.0;
    9338:	ee3b bb0b 	vadd.f64	d11, d11, d11
    float trackingRateGuideRadsDec = siderealToRad(guide.rateAxis2)*timeInSeconds*2.0;
    933c:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
    float trackingRateGuideRadsRA = siderealToRad(guide.rateAxis1)*timeInSeconds*2.0;
    9340:	eeb7 bbcb 	vcvt.f32.f64	s22, d11
    ahead.d += trackingRateGuideRadsDec;
    9344:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    ahead.h += trackingRateGuideRadsRA;
    9348:	eeb7 bacb 	vcvt.f64.f32	d11, s22
    ahead.d += trackingRateGuideRadsDec;
    934c:	ee36 6b03 	vadd.f64	d6, d6, d3
    behind.d -= trackingRateGuideRadsDec;
    9350:	ee34 4b43 	vsub.f64	d4, d4, d3
    ahead.h += trackingRateGuideRadsRA;
    9354:	ee35 5b0b 	vadd.f64	d5, d5, d11
    behind.h -= trackingRateGuideRadsRA;
    9358:	ee37 7b4b 	vsub.f64	d7, d7, d11
    ahead.d += trackingRateGuideRadsDec;
    935c:	ed8d 6b06 	vstr	d6, [sp, #24]
    behind.d -= trackingRateGuideRadsDec;
    9360:	ed8d 4b1c 	vstr	d4, [sp, #112]	; 0x70
    ahead.h += trackingRateGuideRadsRA;
    9364:	ed8d 5b04 	vstr	d5, [sp, #16]
    behind.h -= trackingRateGuideRadsRA;
    9368:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
  if (transform.mountType == ALTAZM) {
    936c:	f47f aea5 	bne.w	90ba <Mount::poll()+0x1aa>
    transform.equToHor(&ahead);
    9370:	a902      	add	r1, sp, #8
    9372:	486b      	ldr	r0, [pc, #428]	; (9520 <Mount::poll()+0x610>)
    9374:	f001 ffd8 	bl	b328 <Transform::equToHor(Coordinate*)>
    aheadAxis1 = ahead.z;
    9378:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
    aheadAxis2 = ahead.a;
    937c:	ed9d 6b08 	vldr	d6, [sp, #32]
    behindAxis1 = behind.z;
    9380:	ed9d 5b20 	vldr	d5, [sp, #128]	; 0x80
    behindAxis2 = behind.a;
    9384:	ed9d 4b1e 	vldr	d4, [sp, #120]	; 0x78
    aheadAxis1 = ahead.aa1;
    9388:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    938c:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
    aheadAxis2 = ahead.aa2;
    9390:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    behindAxis1 = behind.aa1;
    9394:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    behindAxis2 = behind.aa2;
    9398:	eef7 2bc4 	vcvt.f32.f64	s5, d4
    939c:	e6a0      	b.n	90e0 <Mount::poll()+0x1d0>
  if (transform.mountType == ALTALT && fabs(altitude2) > Deg90 - DegenerateRange) { trackingRateAxis1 = 0.0F; }
    939e:	eeb0 9bc9 	vabs.f64	d9, d9
    93a2:	ed9f 7b59 	vldr	d7, [pc, #356]	; 9508 <Mount::poll()+0x5f8>
    93a6:	eeb4 9bc7 	vcmpe.f64	d9, d7
    93aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93ae:	f77f af2b 	ble.w	9208 <Mount::poll()+0x2f8>
    93b2:	2300      	movs	r3, #0
  update();
    93b4:	4620      	mov	r0, r4
  if (transform.mountType == ALTALT && fabs(altitude2) > Deg90 - DegenerateRange) { trackingRateAxis1 = 0.0F; }
    93b6:	60a3      	str	r3, [r4, #8]
  update();
    93b8:	f7ff fa96 	bl	88e8 <Mount::update()>
}
    93bc:	b02e      	add	sp, #184	; 0xb8
    93be:	ecbd 8b08 	vpop	{d8-d11}
    93c2:	bd70      	pop	{r4, r5, r6, pc}
  if (behindAxis1 < -Deg90 && aheadAxis1 > Deg90) behindAxis1 += Deg360;
    93c4:	ed9f 5b52 	vldr	d5, [pc, #328]	; 9510 <Mount::poll()+0x600>
    93c8:	ee34 5b05 	vadd.f64	d5, d4, d5
    93cc:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    93d0:	e6aa      	b.n	9128 <Mount::poll()+0x218>
  if (aheadAxis1 < -Deg90 && behindAxis1 > Deg90) aheadAxis1 += Deg360;
    93d2:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 9510 <Mount::poll()+0x600>
    93d6:	ee33 7b07 	vadd.f64	d7, d3, d7
    93da:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    93de:	e692      	b.n	9106 <Mount::poll()+0x1f6>
  if (transform.isEquatorial() && settings.rc == RC_NONE && trackingRateOffsetRA == 0.0F && trackingRateOffsetDec == 0.0F) {
    93e0:	edd4 7a05 	vldr	s15, [r4, #20]
    93e4:	eef5 7a40 	vcmp.f32	s15, #0.0
    93e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93ec:	f47f addc 	bne.w	8fa8 <Mount::poll()+0x98>
    trackingRateAxis1 = trackingRate;
    93f0:	6862      	ldr	r2, [r4, #4]
    update();
    93f2:	4620      	mov	r0, r4
    trackingRateAxis2 = 0.0F;
    93f4:	60e3      	str	r3, [r4, #12]
    trackingRateAxis1 = trackingRate;
    93f6:	60a2      	str	r2, [r4, #8]
    93f8:	e77c      	b.n	92f4 <Mount::poll()+0x3e4>
    inline bool isEnabled() { return enabled && !motor->calibrating; }
    93fa:	4b47      	ldr	r3, [pc, #284]	; (9518 <Mount::poll()+0x608>)
    93fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
    9400:	2a00      	cmp	r2, #0
    9402:	f43f adb7 	beq.w	8f74 <Mount::poll()+0x64>
    9406:	681b      	ldr	r3, [r3, #0]
    9408:	7adb      	ldrb	r3, [r3, #11]
    940a:	2b00      	cmp	r3, #0
    940c:	f47f adb2 	bne.w	8f74 <Mount::poll()+0x64>
    9410:	e5a2      	b.n	8f58 <Mount::poll()+0x48>
    if (guide.state > GU_NONE) guide.abort(); else
    9412:	f005 f84f 	bl	e4b4 <Guide::abort()>
    9416:	e5ad      	b.n	8f74 <Mount::poll()+0x64>
    if (transform.mountType == ALTAZM) trackingRateAxis1 = 0.0F; else
    9418:	2200      	movs	r2, #0
    941a:	60a2      	str	r2, [r4, #8]
    941c:	e6e2      	b.n	91e4 <Mount::poll()+0x2d4>
    transform.topocentricToObservedPlace(&ahead); Y;
    941e:	a902      	add	r1, sp, #8
    9420:	483f      	ldr	r0, [pc, #252]	; (9520 <Mount::poll()+0x610>)
    9422:	f002 f9c1 	bl	b7a8 <Transform::topocentricToObservedPlace(Coordinate*)>
    9426:	4840      	ldr	r0, [pc, #256]	; (9528 <Mount::poll()+0x618>)
    9428:	f7fd f80a 	bl	6440 <Tasks::yield()>
    transform.topocentricToObservedPlace(&behind); Y;
    942c:	a918      	add	r1, sp, #96	; 0x60
    942e:	483c      	ldr	r0, [pc, #240]	; (9520 <Mount::poll()+0x610>)
    9430:	f002 f9ba 	bl	b7a8 <Transform::topocentricToObservedPlace(Coordinate*)>
    9434:	483c      	ldr	r0, [pc, #240]	; (9528 <Mount::poll()+0x618>)
    9436:	f7fd f803 	bl	6440 <Tasks::yield()>
    transform.observedPlaceToMount(&ahead); Y;
    943a:	a902      	add	r1, sp, #8
    943c:	4838      	ldr	r0, [pc, #224]	; (9520 <Mount::poll()+0x610>)
    943e:	f001 fdeb 	bl	b018 <Transform::observedPlaceToMount(Coordinate*)>
    9442:	4839      	ldr	r0, [pc, #228]	; (9528 <Mount::poll()+0x618>)
    9444:	f7fc fffc 	bl	6440 <Tasks::yield()>
    transform.observedPlaceToMount(&behind); Y;
    9448:	a918      	add	r1, sp, #96	; 0x60
    944a:	4835      	ldr	r0, [pc, #212]	; (9520 <Mount::poll()+0x610>)
    944c:	f001 fde4 	bl	b018 <Transform::observedPlaceToMount(Coordinate*)>
    9450:	4835      	ldr	r0, [pc, #212]	; (9528 <Mount::poll()+0x618>)
    9452:	f7fc fff5 	bl	6440 <Tasks::yield()>
  if (settings.rc != RC_REFRACTION_DUAL && settings.rc != RC_MODEL_DUAL) { behind.d = ahead.d; }
    9456:	7e23      	ldrb	r3, [r4, #24]
    9458:	e5eb      	b.n	9032 <Mount::poll()+0x122>
    if (transform.isEquatorial()) trackingRateAxis1 = trackingRate; else
    945a:	6862      	ldr	r2, [r4, #4]
    945c:	60a2      	str	r2, [r4, #8]
    945e:	e6c1      	b.n	91e4 <Mount::poll()+0x2d4>
  if (transform.mountType == ALTAZM) { transform.equToHor(&ahead); transform.equToHor(&behind); Y; } else
    9460:	a902      	add	r1, sp, #8
    9462:	482f      	ldr	r0, [pc, #188]	; (9520 <Mount::poll()+0x610>)
    9464:	f001 ff60 	bl	b328 <Transform::equToHor(Coordinate*)>
    9468:	a918      	add	r1, sp, #96	; 0x60
    946a:	482d      	ldr	r0, [pc, #180]	; (9520 <Mount::poll()+0x610>)
    946c:	f001 ff5c 	bl	b328 <Transform::equToHor(Coordinate*)>
    9470:	482d      	ldr	r0, [pc, #180]	; (9528 <Mount::poll()+0x618>)
    9472:	f7fc ffe5 	bl	6440 <Tasks::yield()>
    9476:	e5d3      	b.n	9020 <Mount::poll()+0x110>
    if (transform.mountType == ALTAZM) transform.horToEqu(&current); else
    9478:	4829      	ldr	r0, [pc, #164]	; (9520 <Mount::poll()+0x610>)
    947a:	9101      	str	r1, [sp, #4]
    947c:	f002 f810 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    9480:	9901      	ldr	r1, [sp, #4]
    9482:	e5aa      	b.n	8fda <Mount::poll()+0xca>
    transform.topocentricToObservedPlace(&ahead); Y;
    9484:	a902      	add	r1, sp, #8
    9486:	4826      	ldr	r0, [pc, #152]	; (9520 <Mount::poll()+0x610>)
    9488:	f002 f98e 	bl	b7a8 <Transform::topocentricToObservedPlace(Coordinate*)>
    948c:	4826      	ldr	r0, [pc, #152]	; (9528 <Mount::poll()+0x618>)
    948e:	f7fc ffd7 	bl	6440 <Tasks::yield()>
    transform.topocentricToObservedPlace(&behind); Y;
    9492:	a918      	add	r1, sp, #96	; 0x60
    9494:	4822      	ldr	r0, [pc, #136]	; (9520 <Mount::poll()+0x610>)
    9496:	f002 f987 	bl	b7a8 <Transform::topocentricToObservedPlace(Coordinate*)>
    949a:	4823      	ldr	r0, [pc, #140]	; (9528 <Mount::poll()+0x618>)
    949c:	f7fc ffd0 	bl	6440 <Tasks::yield()>
  if (settings.rc != RC_REFRACTION_DUAL && settings.rc != RC_MODEL_DUAL) { behind.d = ahead.d; }
    94a0:	7e23      	ldrb	r3, [r4, #24]
    94a2:	e5c6      	b.n	9032 <Mount::poll()+0x122>
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
    94a4:	481e      	ldr	r0, [pc, #120]	; (9520 <Mount::poll()+0x610>)
    94a6:	a902      	add	r1, sp, #8
    94a8:	f001 ff3e 	bl	b328 <Transform::equToHor(Coordinate*)>
    94ac:	a902      	add	r1, sp, #8
    94ae:	481c      	ldr	r0, [pc, #112]	; (9520 <Mount::poll()+0x610>)
    94b0:	f002 f8c6 	bl	b640 <Transform::horToAa(Coordinate*)>
    aheadAxis1 = ahead.aa1;
    94b4:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
    aheadAxis2 = ahead.aa2;
    94b8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    behindAxis1 = behind.aa1;
    94bc:	ed9d 5b22 	vldr	d5, [sp, #136]	; 0x88
    behindAxis2 = behind.aa2;
    94c0:	ed9d 4b24 	vldr	d4, [sp, #144]	; 0x90
    94c4:	e760      	b.n	9388 <Mount::poll()+0x478>
    94c6:	a902      	add	r1, sp, #8
    94c8:	4815      	ldr	r0, [pc, #84]	; (9520 <Mount::poll()+0x610>)
    94ca:	f001 ff2d 	bl	b328 <Transform::equToHor(Coordinate*)>
    94ce:	a902      	add	r1, sp, #8
    94d0:	4813      	ldr	r0, [pc, #76]	; (9520 <Mount::poll()+0x610>)
    94d2:	f002 f8b5 	bl	b640 <Transform::horToAa(Coordinate*)>
    94d6:	a918      	add	r1, sp, #96	; 0x60
    94d8:	4811      	ldr	r0, [pc, #68]	; (9520 <Mount::poll()+0x610>)
    94da:	f001 ff25 	bl	b328 <Transform::equToHor(Coordinate*)>
    94de:	a918      	add	r1, sp, #96	; 0x60
    94e0:	480f      	ldr	r0, [pc, #60]	; (9520 <Mount::poll()+0x610>)
    94e2:	f002 f8ad 	bl	b640 <Transform::horToAa(Coordinate*)>
  if (transform.mountType == ALTALT) { transform.equToAa(&ahead); transform.equToAa(&behind); Y; }
    94e6:	4810      	ldr	r0, [pc, #64]	; (9528 <Mount::poll()+0x618>)
    94e8:	f7fc ffaa 	bl	6440 <Tasks::yield()>
    94ec:	e598      	b.n	9020 <Mount::poll()+0x110>
    void aaToEqu(Coordinate *coord) { aaToHor(coord); horToEqu(coord); };
    94ee:	480c      	ldr	r0, [pc, #48]	; (9520 <Mount::poll()+0x610>)
    94f0:	9101      	str	r1, [sp, #4]
    94f2:	f002 f835 	bl	b560 <Transform::aaToHor(Coordinate*)>
    94f6:	9901      	ldr	r1, [sp, #4]
    94f8:	4809      	ldr	r0, [pc, #36]	; (9520 <Mount::poll()+0x610>)
    94fa:	f001 ffd1 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    94fe:	9901      	ldr	r1, [sp, #4]
    9500:	e56b      	b.n	8fda <Mount::poll()+0xca>
    9502:	bf00      	nop
    9504:	f3af 8000 	nop.w
    9508:	cd33f19f 	.word	0xcd33f19f
    950c:	3ff92031 	.word	0x3ff92031
    9510:	54442d18 	.word	0x54442d18
    9514:	401921fb 	.word	0x401921fb
    9518:	200051a8 	.word	0x200051a8
    951c:	20005e50 	.word	0x20005e50
    9520:	200064ac 	.word	0x200064ac
    9524:	200050e8 	.word	0x200050e8
    9528:	2000634c 	.word	0x2000634c

0000952c <mountWrapper()>:
inline void mountWrapper() { mount.poll(); }
    952c:	4801      	ldr	r0, [pc, #4]	; (9534 <mountWrapper()+0x8>)
    952e:	f7ff bcef 	b.w	8f10 <Mount::poll()>
    9532:	bf00      	nop
    9534:	200054e0 	.word	0x200054e0

00009538 <_GLOBAL__sub_I__ZN5Mount4initEv>:
class Mount {
    9538:	4b09      	ldr	r3, [pc, #36]	; (9560 <_GLOBAL__sub_I__ZN5Mount4initEv+0x28>)
    953a:	2200      	movs	r2, #0
    953c:	2100      	movs	r1, #0
    953e:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
    9542:	609a      	str	r2, [r3, #8]
    9544:	7019      	strb	r1, [r3, #0]
    9546:	f8c3 c004 	str.w	ip, [r3, #4]
    954a:	60da      	str	r2, [r3, #12]
    954c:	611a      	str	r2, [r3, #16]
    954e:	615a      	str	r2, [r3, #20]
    9550:	7619      	strb	r1, [r3, #24]
    9552:	f8c3 2019 	str.w	r2, [r3, #25]
    9556:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
    955a:	f8c3 201d 	str.w	r2, [r3, #29]

Mount mount;
    955e:	4770      	bx	lr
    9560:	200054e0 	.word	0x200054e0

00009564 <GeoAlign::init(signed char, float)>:

void GeoAlign::init(int8_t mountType, float latitude) {
  modelClear();

  this->mountType = mountType;
  if (mountType == ALTAZM) {
    9564:	2903      	cmp	r1, #3
void GeoAlign::init(int8_t mountType, float latitude) {
    9566:	b538      	push	{r3, r4, r5, lr}
    9568:	460d      	mov	r5, r1
    956a:	4604      	mov	r4, r0
    956c:	ed2d 8b02 	vpush	{d8}
  if (mountType == ALTAZM) {
    9570:	d048      	beq.n	9604 <GeoAlign::init(signed char, float)+0xa0>
    cosLat = cosf(Deg90);
    sinLat = sinf(Deg90);
  } else
  if (mountType == ALTALT) {
    9572:	2904      	cmp	r1, #4
    9574:	d041      	beq.n	95fa <GeoAlign::init(signed char, float)+0x96>
    9576:	eeb0 8a40 	vmov.f32	s16, s0
    cosLat = cosf(0.0F);
    sinLat = sinf(0.0F);
  } else {
    cosLat = cosf(latitude);
    957a:	f011 f975 	bl	1a868 <cosf>
    957e:	eef0 7a40 	vmov.f32	s15, s0
    sinLat = sinf(latitude);
    9582:	eeb0 0a48 	vmov.f32	s0, s16
    cosLat = cosf(latitude);
    9586:	eeb0 8a67 	vmov.f32	s16, s15
    sinLat = sinf(latitude);
    958a:	f011 f869 	bl	1a660 <sinf>
  if (AlignModelSize < sizeof(AlignModel)) { nv.initError = true; DL("ERR: GeoAlign::writeModel(), AlignModelSize error"); }
  nv.updateBytes(NV_ALIGN_MODEL_BASE, &model, AlignModelSize);
}

void GeoAlign::modelClear() {
  modelNumberStars = 0;
    958e:	2200      	movs	r2, #0
    9590:	491f      	ldr	r1, [pc, #124]	; (9610 <GeoAlign::init(signed char, float)+0xac>)
  model.ax1Cor = 0;  // align internal index for Axis1
    9592:	2300      	movs	r3, #0
  modelNumberStars = 0;
    9594:	700a      	strb	r2, [r1, #0]
  model.ax1Cor = 0;  // align internal index for Axis1
    9596:	f204 5114 	addw	r1, r4, #1300	; 0x514
    959a:	600b      	str	r3, [r1, #0]
  model.ax2Cor = 0;  // align internal index for Axis2
    959c:	f504 61a3 	add.w	r1, r4, #1304	; 0x518
    95a0:	600b      	str	r3, [r1, #0]
  model.altCor = 0;  // polar error relative to NCP/SCP/Zenith, - is below & + above
    95a2:	f204 511c 	addw	r1, r4, #1308	; 0x51c
    95a6:	600b      	str	r3, [r1, #0]
  model.azmCor = 0;  // - is right & + is left
    95a8:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
    95ac:	600b      	str	r3, [r1, #0]
  model.doCor  = 0;  // altitude axis/optics orthogonal correction
    95ae:	f204 5124 	addw	r1, r4, #1316	; 0x524
    95b2:	600b      	str	r3, [r1, #0]
  model.pdCor  = 0;  // altitude axis/Azimuth orthogonal correction
    95b4:	f504 61a5 	add.w	r1, r4, #1320	; 0x528
    95b8:	600b      	str	r3, [r1, #0]
  model.dfCor  = 0;  // altitude axis axis flex
    95ba:	f204 512c 	addw	r1, r4, #1324	; 0x52c
    95be:	600b      	str	r3, [r1, #0]
  model.tfCor  = 0;  // tube flex
    95c0:	f504 61a6 	add.w	r1, r4, #1328	; 0x530
    95c4:	600b      	str	r3, [r1, #0]
  model.hcp    = 0;  // cos(Axis1) phase
    95c6:	f204 5134 	addw	r1, r4, #1332	; 0x534
    95ca:	600b      	str	r3, [r1, #0]
  model.hca    = 0;  // cos(Axis1) amplitude
    95cc:	f504 61a7 	add.w	r1, r4, #1336	; 0x538
    95d0:	600b      	str	r3, [r1, #0]
  model.dcp    = 0;  // cos(Axis2) phase
    95d2:	f204 513c 	addw	r1, r4, #1340	; 0x53c
    95d6:	600b      	str	r3, [r1, #0]
  model.dca    = 0;  // cos(Axis2) amplitude
    95d8:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
    95dc:	600b      	str	r3, [r1, #0]
    cosLat = cosf(Deg90);
    95de:	f504 61a9 	add.w	r1, r4, #1352	; 0x548
  this->mountType = mountType;
    95e2:	f884 5544 	strb.w	r5, [r4, #1348]	; 0x544
    sinLat = sinf(Deg90);
    95e6:	f204 534c 	addw	r3, r4, #1356	; 0x54c
  modelIsReady = false;
    95ea:	7022      	strb	r2, [r4, #0]
    cosLat = cosf(Deg90);
    95ec:	ed81 8a00 	vstr	s16, [r1]
    sinLat = sinf(Deg90);
    95f0:	ed83 0a00 	vstr	s0, [r3]
}
    95f4:	ecbd 8b02 	vpop	{d8}
    95f8:	bd38      	pop	{r3, r4, r5, pc}
    95fa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    95fe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 9614 <GeoAlign::init(signed char, float)+0xb0>
    9602:	e7c4      	b.n	958e <GeoAlign::init(signed char, float)+0x2a>
    9604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    9608:	ed9f 8a03 	vldr	s16, [pc, #12]	; 9618 <GeoAlign::init(signed char, float)+0xb4>
    960c:	e7bf      	b.n	958e <GeoAlign::init(signed char, float)+0x2a>
    960e:	bf00      	nop
    9610:	20006aaf 	.word	0x20006aaf
    9614:	00000000 	.word	0x00000000
    9618:	b33bbd2e 	.word	0xb33bbd2e
    961c:	00000000 	.word	0x00000000

00009620 <GeoAlign::modelRead()>:
void GeoAlign::modelRead() {
    9620:	b538      	push	{r3, r4, r5, lr}
    9622:	4604      	mov	r4, r0
  nv.readBytes(NV_ALIGN_MODEL_BASE, &model, AlignModelSize);
    9624:	2330      	movs	r3, #48	; 0x30
    9626:	f44f 7181 	mov.w	r1, #258	; 0x102
    962a:	488f      	ldr	r0, [pc, #572]	; (9868 <GeoAlign::modelRead()+0x248>)
    962c:	f204 5514 	addw	r5, r4, #1300	; 0x514
    9630:	462a      	mov	r2, r5
    9632:	f7fb fcf1 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  if (model.ax1Cor < -Deg360 || model.ax1Cor > Deg360) { model.ax1Cor = 0; DLF("ERR: GeoAlign::readModel(), bad NV ax1Cor"); }
    9636:	ed95 7a00 	vldr	s14, [r5]
    963a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 9858 <GeoAlign::modelRead()+0x238>
    963e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9642:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    964a:	f100 80ff 	bmi.w	984c <GeoAlign::modelRead()+0x22c>
    964e:	ed9f 6b84 	vldr	d6, [pc, #528]	; 9860 <GeoAlign::modelRead()+0x240>
    9652:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    965a:	f300 80f7 	bgt.w	984c <GeoAlign::modelRead()+0x22c>
  if (model.ax2Cor < -Deg360 || model.ax2Cor > Deg360) { model.ax2Cor = 0; DLF("ERR: GeoAlign::readModel(), bad NV ax2Cor"); }
    965e:	f504 63a3 	add.w	r3, r4, #1304	; 0x518
    9662:	ed93 7a00 	vldr	s14, [r3]
    9666:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 9858 <GeoAlign::modelRead()+0x238>
    966a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    966e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9676:	f100 80e6 	bmi.w	9846 <GeoAlign::modelRead()+0x226>
    967a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 9860 <GeoAlign::modelRead()+0x240>
    967e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9686:	f300 80de 	bgt.w	9846 <GeoAlign::modelRead()+0x226>
  if (model.dfCor  <    -256 || model.dfCor  >    256) { model.dfCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV dfCor");  }
    968a:	f204 532c 	addw	r3, r4, #1324	; 0x52c
    968e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 986c <GeoAlign::modelRead()+0x24c>
    9692:	edd3 7a00 	vldr	s15, [r3]
    9696:	eef4 7ac7 	vcmpe.f32	s15, s14
    969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    969e:	f100 80cf 	bmi.w	9840 <GeoAlign::modelRead()+0x220>
    96a2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 9870 <GeoAlign::modelRead()+0x250>
    96a6:	eef4 7ac7 	vcmpe.f32	s15, s14
    96aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    96ae:	f300 80c7 	bgt.w	9840 <GeoAlign::modelRead()+0x220>
  if (model.tfCor  <    -128 || model.tfCor  >    128) { model.tfCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV tfCor");  }
    96b2:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
    96b6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 9874 <GeoAlign::modelRead()+0x254>
    96ba:	edd3 7a00 	vldr	s15, [r3]
    96be:	eef4 7ac7 	vcmpe.f32	s15, s14
    96c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    96c6:	f100 80b8 	bmi.w	983a <GeoAlign::modelRead()+0x21a>
    96ca:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 9878 <GeoAlign::modelRead()+0x258>
    96ce:	eef4 7ac7 	vcmpe.f32	s15, s14
    96d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    96d6:	f300 80b0 	bgt.w	983a <GeoAlign::modelRead()+0x21a>
  if (model.doCor  <   -8192 || model.doCor  >   8192) { model.doCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV doCor");  }
    96da:	f204 5324 	addw	r3, r4, #1316	; 0x524
    96de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 987c <GeoAlign::modelRead()+0x25c>
    96e2:	edd3 7a00 	vldr	s15, [r3]
    96e6:	eef4 7ac7 	vcmpe.f32	s15, s14
    96ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    96ee:	f100 80a1 	bmi.w	9834 <GeoAlign::modelRead()+0x214>
    96f2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 9880 <GeoAlign::modelRead()+0x260>
    96f6:	eef4 7ac7 	vcmpe.f32	s15, s14
    96fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    96fe:	f300 8099 	bgt.w	9834 <GeoAlign::modelRead()+0x214>
  if (model.pdCor  <    -256 || model.pdCor  >    256) { model.pdCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV pdCor");  }
    9702:	f504 63a5 	add.w	r3, r4, #1320	; 0x528
    9706:	ed9f 7a59 	vldr	s14, [pc, #356]	; 986c <GeoAlign::modelRead()+0x24c>
    970a:	edd3 7a00 	vldr	s15, [r3]
    970e:	eef4 7ac7 	vcmpe.f32	s15, s14
    9712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9716:	f100 808a 	bmi.w	982e <GeoAlign::modelRead()+0x20e>
    971a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 9870 <GeoAlign::modelRead()+0x250>
    971e:	eef4 7ac7 	vcmpe.f32	s15, s14
    9722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9726:	f300 8082 	bgt.w	982e <GeoAlign::modelRead()+0x20e>
  if (model.altCor <  -16384 || model.altCor >  16384) { model.altCor = 0; DLF("ERR: GeoAlign::readModel(), bad NV altCor"); }
    972a:	f204 531c 	addw	r3, r4, #1308	; 0x51c
    972e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 9884 <GeoAlign::modelRead()+0x264>
    9732:	edd3 7a00 	vldr	s15, [r3]
    9736:	eef4 7ac7 	vcmpe.f32	s15, s14
    973a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    973e:	d473      	bmi.n	9828 <GeoAlign::modelRead()+0x208>
    9740:	ed9f 7a51 	vldr	s14, [pc, #324]	; 9888 <GeoAlign::modelRead()+0x268>
    9744:	eef4 7ac7 	vcmpe.f32	s15, s14
    9748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    974c:	dc6c      	bgt.n	9828 <GeoAlign::modelRead()+0x208>
  if (model.azmCor <  -16384 || model.azmCor >  16384) { model.azmCor = 0; DLF("ERR: GeoAlign::readModel(), bad NV azmCor"); }
    974e:	f504 63a4 	add.w	r3, r4, #1312	; 0x520
    9752:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 9884 <GeoAlign::modelRead()+0x264>
    9756:	edd3 7a00 	vldr	s15, [r3]
    975a:	eef4 7ac7 	vcmpe.f32	s15, s14
    975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9762:	d45e      	bmi.n	9822 <GeoAlign::modelRead()+0x202>
    9764:	ed9f 7a48 	vldr	s14, [pc, #288]	; 9888 <GeoAlign::modelRead()+0x268>
    9768:	eef4 7ac7 	vcmpe.f32	s15, s14
    976c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9770:	dc57      	bgt.n	9822 <GeoAlign::modelRead()+0x202>
  if (model.hcp    < -Deg360 || model.hcp    > Deg360) { model.hcp = 0;    DLF("ERR: GeoAlign::readModel(), bad NV hcp"); }
    9772:	f204 5334 	addw	r3, r4, #1332	; 0x534
    9776:	ed93 7a00 	vldr	s14, [r3]
    977a:	ed9f 6b37 	vldr	d6, [pc, #220]	; 9858 <GeoAlign::modelRead()+0x238>
    977e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9782:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    978a:	d447      	bmi.n	981c <GeoAlign::modelRead()+0x1fc>
    978c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 9860 <GeoAlign::modelRead()+0x240>
    9790:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9798:	dc40      	bgt.n	981c <GeoAlign::modelRead()+0x1fc>
  if (model.hca    <  -16384 || model.hca    > 16384)  { model.hca = 0;    DLF("ERR: GeoAlign::readModel(), bad NV hca"); }
    979a:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
    979e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 9884 <GeoAlign::modelRead()+0x264>
    97a2:	edd3 7a00 	vldr	s15, [r3]
    97a6:	eef4 7ac7 	vcmpe.f32	s15, s14
    97aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97ae:	d432      	bmi.n	9816 <GeoAlign::modelRead()+0x1f6>
    97b0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 9888 <GeoAlign::modelRead()+0x268>
    97b4:	eef4 7ac7 	vcmpe.f32	s15, s14
    97b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97bc:	dc2b      	bgt.n	9816 <GeoAlign::modelRead()+0x1f6>
  if (model.dcp    < -Deg360 || model.dcp    > Deg360) { model.dcp = 0;    DLF("ERR: GeoAlign::readModel(), bad NV dcp"); }
    97be:	f204 533c 	addw	r3, r4, #1340	; 0x53c
    97c2:	ed93 7a00 	vldr	s14, [r3]
    97c6:	ed9f 6b24 	vldr	d6, [pc, #144]	; 9858 <GeoAlign::modelRead()+0x238>
    97ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    97ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
    97d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97d6:	d41b      	bmi.n	9810 <GeoAlign::modelRead()+0x1f0>
    97d8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 9860 <GeoAlign::modelRead()+0x240>
    97dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    97e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97e4:	dc14      	bgt.n	9810 <GeoAlign::modelRead()+0x1f0>
  if (model.dca    <  -16384 || model.dca    > 16384)  { model.dca = 0;    DLF("ERR: GeoAlign::readModel(), bad NV dca"); }
    97e6:	f504 64a8 	add.w	r4, r4, #1344	; 0x540
    97ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 9884 <GeoAlign::modelRead()+0x264>
    97ee:	edd4 7a00 	vldr	s15, [r4]
    97f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    97f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97fa:	d406      	bmi.n	980a <GeoAlign::modelRead()+0x1ea>
    97fc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 9888 <GeoAlign::modelRead()+0x268>
    9800:	eef4 7ac7 	vcmpe.f32	s15, s14
    9804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9808:	dd01      	ble.n	980e <GeoAlign::modelRead()+0x1ee>
    980a:	2300      	movs	r3, #0
    980c:	6023      	str	r3, [r4, #0]
}
    980e:	bd38      	pop	{r3, r4, r5, pc}
  if (model.dcp    < -Deg360 || model.dcp    > Deg360) { model.dcp = 0;    DLF("ERR: GeoAlign::readModel(), bad NV dcp"); }
    9810:	2200      	movs	r2, #0
    9812:	601a      	str	r2, [r3, #0]
    9814:	e7e7      	b.n	97e6 <GeoAlign::modelRead()+0x1c6>
  if (model.hca    <  -16384 || model.hca    > 16384)  { model.hca = 0;    DLF("ERR: GeoAlign::readModel(), bad NV hca"); }
    9816:	2200      	movs	r2, #0
    9818:	601a      	str	r2, [r3, #0]
    981a:	e7d0      	b.n	97be <GeoAlign::modelRead()+0x19e>
  if (model.hcp    < -Deg360 || model.hcp    > Deg360) { model.hcp = 0;    DLF("ERR: GeoAlign::readModel(), bad NV hcp"); }
    981c:	2200      	movs	r2, #0
    981e:	601a      	str	r2, [r3, #0]
    9820:	e7bb      	b.n	979a <GeoAlign::modelRead()+0x17a>
  if (model.azmCor <  -16384 || model.azmCor >  16384) { model.azmCor = 0; DLF("ERR: GeoAlign::readModel(), bad NV azmCor"); }
    9822:	2200      	movs	r2, #0
    9824:	601a      	str	r2, [r3, #0]
    9826:	e7a4      	b.n	9772 <GeoAlign::modelRead()+0x152>
  if (model.altCor <  -16384 || model.altCor >  16384) { model.altCor = 0; DLF("ERR: GeoAlign::readModel(), bad NV altCor"); }
    9828:	2200      	movs	r2, #0
    982a:	601a      	str	r2, [r3, #0]
    982c:	e78f      	b.n	974e <GeoAlign::modelRead()+0x12e>
  if (model.pdCor  <    -256 || model.pdCor  >    256) { model.pdCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV pdCor");  }
    982e:	2200      	movs	r2, #0
    9830:	601a      	str	r2, [r3, #0]
    9832:	e77a      	b.n	972a <GeoAlign::modelRead()+0x10a>
  if (model.doCor  <   -8192 || model.doCor  >   8192) { model.doCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV doCor");  }
    9834:	2200      	movs	r2, #0
    9836:	601a      	str	r2, [r3, #0]
    9838:	e763      	b.n	9702 <GeoAlign::modelRead()+0xe2>
  if (model.tfCor  <    -128 || model.tfCor  >    128) { model.tfCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV tfCor");  }
    983a:	2200      	movs	r2, #0
    983c:	601a      	str	r2, [r3, #0]
    983e:	e74c      	b.n	96da <GeoAlign::modelRead()+0xba>
  if (model.dfCor  <    -256 || model.dfCor  >    256) { model.dfCor  = 0; DLF("ERR: GeoAlign::readModel(), bad NV dfCor");  }
    9840:	2200      	movs	r2, #0
    9842:	601a      	str	r2, [r3, #0]
    9844:	e735      	b.n	96b2 <GeoAlign::modelRead()+0x92>
  if (model.ax2Cor < -Deg360 || model.ax2Cor > Deg360) { model.ax2Cor = 0; DLF("ERR: GeoAlign::readModel(), bad NV ax2Cor"); }
    9846:	2200      	movs	r2, #0
    9848:	601a      	str	r2, [r3, #0]
    984a:	e71e      	b.n	968a <GeoAlign::modelRead()+0x6a>
  if (model.ax1Cor < -Deg360 || model.ax1Cor > Deg360) { model.ax1Cor = 0; DLF("ERR: GeoAlign::readModel(), bad NV ax1Cor"); }
    984c:	2300      	movs	r3, #0
    984e:	602b      	str	r3, [r5, #0]
    9850:	e705      	b.n	965e <GeoAlign::modelRead()+0x3e>
    9852:	bf00      	nop
    9854:	f3af 8000 	nop.w
    9858:	54442d18 	.word	0x54442d18
    985c:	c01921fb 	.word	0xc01921fb
    9860:	54442d18 	.word	0x54442d18
    9864:	401921fb 	.word	0x401921fb
    9868:	20005e50 	.word	0x20005e50
    986c:	c3800000 	.word	0xc3800000
    9870:	43800000 	.word	0x43800000
    9874:	c3000000 	.word	0xc3000000
    9878:	43000000 	.word	0x43000000
    987c:	c6000000 	.word	0xc6000000
    9880:	46000000 	.word	0x46000000
    9884:	c6800000 	.word	0xc6800000
    9888:	46800000 	.word	0x46800000

0000988c <GeoAlign::modelWrite()>:
void GeoAlign::modelWrite() {
    988c:	4602      	mov	r2, r0
  nv.updateBytes(NV_ALIGN_MODEL_BASE, &model, AlignModelSize);
    988e:	2330      	movs	r3, #48	; 0x30
    9890:	f44f 7181 	mov.w	r1, #258	; 0x102
    9894:	4802      	ldr	r0, [pc, #8]	; (98a0 <GeoAlign::modelWrite()+0x14>)
    9896:	f202 5214 	addw	r2, r2, #1300	; 0x514
    989a:	f7fb bbe7 	b.w	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    989e:	bf00      	nop
    98a0:	20005e50 	.word	0x20005e50

000098a4 <GeoAlign::modelClear()>:
  modelNumberStars = 0;
    98a4:	2200      	movs	r2, #0
    98a6:	4917      	ldr	r1, [pc, #92]	; (9904 <GeoAlign::modelClear()+0x60>)
  model.ax1Cor = 0;  // align internal index for Axis1
    98a8:	2300      	movs	r3, #0
    98aa:	f200 5c14 	addw	ip, r0, #1300	; 0x514
  modelNumberStars = 0;
    98ae:	700a      	strb	r2, [r1, #0]
  model.ax2Cor = 0;  // align internal index for Axis2
    98b0:	f500 61a3 	add.w	r1, r0, #1304	; 0x518
  model.ax1Cor = 0;  // align internal index for Axis1
    98b4:	f8cc 3000 	str.w	r3, [ip]
  model.altCor = 0;  // polar error relative to NCP/SCP/Zenith, - is below & + above
    98b8:	f200 5c1c 	addw	ip, r0, #1308	; 0x51c
  model.ax2Cor = 0;  // align internal index for Axis2
    98bc:	600b      	str	r3, [r1, #0]
  model.azmCor = 0;  // - is right & + is left
    98be:	f500 61a4 	add.w	r1, r0, #1312	; 0x520
  model.altCor = 0;  // polar error relative to NCP/SCP/Zenith, - is below & + above
    98c2:	f8cc 3000 	str.w	r3, [ip]
  model.doCor  = 0;  // altitude axis/optics orthogonal correction
    98c6:	f200 5c24 	addw	ip, r0, #1316	; 0x524
  model.azmCor = 0;  // - is right & + is left
    98ca:	600b      	str	r3, [r1, #0]
  model.pdCor  = 0;  // altitude axis/Azimuth orthogonal correction
    98cc:	f500 61a5 	add.w	r1, r0, #1320	; 0x528
  model.doCor  = 0;  // altitude axis/optics orthogonal correction
    98d0:	f8cc 3000 	str.w	r3, [ip]
  model.dfCor  = 0;  // altitude axis axis flex
    98d4:	f200 5c2c 	addw	ip, r0, #1324	; 0x52c
  model.pdCor  = 0;  // altitude axis/Azimuth orthogonal correction
    98d8:	600b      	str	r3, [r1, #0]
  model.tfCor  = 0;  // tube flex
    98da:	f500 61a6 	add.w	r1, r0, #1328	; 0x530
  model.dfCor  = 0;  // altitude axis axis flex
    98de:	f8cc 3000 	str.w	r3, [ip]
  model.hcp    = 0;  // cos(Axis1) phase
    98e2:	f200 5c34 	addw	ip, r0, #1332	; 0x534
  model.tfCor  = 0;  // tube flex
    98e6:	600b      	str	r3, [r1, #0]
  model.hca    = 0;  // cos(Axis1) amplitude
    98e8:	f500 61a7 	add.w	r1, r0, #1336	; 0x538
  model.hcp    = 0;  // cos(Axis1) phase
    98ec:	f8cc 3000 	str.w	r3, [ip]
  model.dcp    = 0;  // cos(Axis2) phase
    98f0:	f200 5c3c 	addw	ip, r0, #1340	; 0x53c
  model.hca    = 0;  // cos(Axis1) amplitude
    98f4:	600b      	str	r3, [r1, #0]
  model.dca    = 0;  // cos(Axis2) amplitude
    98f6:	f500 61a8 	add.w	r1, r0, #1344	; 0x540
  model.dcp    = 0;  // cos(Axis2) phase
    98fa:	f8cc 3000 	str.w	r3, [ip]
  model.dca    = 0;  // cos(Axis2) amplitude
    98fe:	600b      	str	r3, [r1, #0]
  modelIsReady = false;
    9900:	7002      	strb	r2, [r0, #0]
}
    9902:	4770      	bx	lr
    9904:	20006aaf 	.word	0x20006aaf

00009908 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)>:

bool GeoAlign::modelReady() {
  return modelIsReady;
}

CommandError GeoAlign::addStar(int thisStar, int numberStars, Coordinate *actual, Coordinate *mount) {
    9908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    990c:	b087      	sub	sp, #28
  // just return if we are processing a model or the star count is out of range, this should never happen
  if (autoModelTask != 0 || thisStar < 1 || thisStar > ALIGN_MAX_NUM_STARS || numberStars < 1 || numberStars > ALIGN_MAX_NUM_STARS) return CE_ALIGN_FAIL;
    990e:	f890 95c0 	ldrb.w	r9, [r0, #1472]	; 0x5c0
CommandError GeoAlign::addStar(int thisStar, int numberStars, Coordinate *actual, Coordinate *mount) {
    9912:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (autoModelTask != 0 || thisStar < 1 || thisStar > ALIGN_MAX_NUM_STARS || numberStars < 1 || numberStars > ALIGN_MAX_NUM_STARS) return CE_ALIGN_FAIL;
    9916:	f1b9 0f00 	cmp.w	r9, #0
    991a:	d15f      	bne.n	99dc <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xd4>
    991c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
    9920:	460e      	mov	r6, r1
    9922:	f1bb 0f08 	cmp.w	fp, #8
    9926:	d859      	bhi.n	99dc <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xd4>
    9928:	461f      	mov	r7, r3
    992a:	1e53      	subs	r3, r2, #1
    992c:	2b08      	cmp	r3, #8
    992e:	d855      	bhi.n	99dc <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xd4>

  int i = thisStar - 1;

  this->mount[i].h = mount->h;
    9930:	eb0b 054b 	add.w	r5, fp, fp, lsl #1
    9934:	4604      	mov	r4, r0
    9936:	ea4f 084b 	mov.w	r8, fp, lsl #1
    993a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
    993e:	ed9a 4b02 	vldr	d4, [sl, #8]
  this->mount[i].d = mount->d;
    9942:	ed9a 5b04 	vldr	d5, [sl, #16]
  this->actual[i].h = actual->h;
    9946:	ed97 6b02 	vldr	d6, [r7, #8]
  this->actual[i].d = actual->d;
    994a:	ed97 7b04 	vldr	d7, [r7, #16]
  this->mount[i].h = mount->h;
    994e:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
  this->mount[i].d = mount->d;
    9952:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  this->actual[i].h = actual->h;
    9956:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  this->actual[i].d = actual->d;
    995a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  this->mount[i].h = mount->h;
    995e:	ed85 4a0a 	vstr	s8, [r5, #40]	; 0x28
  this->mount[i].d = mount->d;
    9962:	ed85 5a0b 	vstr	s10, [r5, #44]	; 0x2c
  this->actual[i].h = actual->h;
    9966:	ed85 6a76 	vstr	s12, [r5, #472]	; 0x1d8
  this->actual[i].d = actual->d;
    996a:	ed85 7a77 	vstr	s14, [r5, #476]	; 0x1dc

  if (mountType == ALTAZM) {
    996e:	f990 3544 	ldrsb.w	r3, [r0, #1348]	; 0x544
    9972:	2b03      	cmp	r3, #3
    9974:	d038      	beq.n	99e8 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xe0>

    transform.equToHor(actual);
    this->actual[i].ax1 = actual->z;
    this->actual[i].ax2 = actual->a;
  } else
  if (mountType == ALTALT) {
    9976:	2b04      	cmp	r3, #4
    9978:	d057      	beq.n	9a2a <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x122>

    transform.equToAa(actual);
    this->actual[i].ax1 = actual->aa1;
    this->actual[i].ax2 = actual->aa2;
  } else {
    this->mount[i].ax1 = mount->h;
    997a:	ed85 4a01 	vstr	s8, [r5, #4]
    this->mount[i].ax2 = mount->d;
    997e:	ed85 5a03 	vstr	s10, [r5, #12]

    this->actual[i].ax1 = actual->h;
    9982:	ed85 6a6d 	vstr	s12, [r5, #436]	; 0x1b4
    this->actual[i].ax2 = actual->d;
  }

  if (mount->pierSide == PIER_SIDE_WEST) {
    9986:	f89a 3050 	ldrb.w	r3, [sl, #80]	; 0x50
    this->actual[i].ax2 = actual->a;
    998a:	eb08 010b 	add.w	r1, r8, fp
  if (mount->pierSide == PIER_SIDE_WEST) {
    998e:	2b02      	cmp	r3, #2
    this->actual[i].ax2 = actual->a;
    9990:	eb04 1101 	add.w	r1, r4, r1, lsl #4
  if (mount->pierSide == PIER_SIDE_WEST) {
    9994:	bf14      	ite	ne
    9996:	2301      	movne	r3, #1
    9998:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    this->actual[i].side = 1;
    this->mount[i].side = 1;
  }

  // two or more stars and finished
  if (thisStar >= 2 && thisStar == numberStars) {
    999c:	2e01      	cmp	r6, #1
    this->actual[i].ax2 = actual->a;
    999e:	ed81 7a6f 	vstr	s14, [r1, #444]	; 0x1bc
    this->actual[i].side = -1;
    99a2:	f8c1 31e0 	str.w	r3, [r1, #480]	; 0x1e0
    this->mount[i].side = -1;
    99a6:	630b      	str	r3, [r1, #48]	; 0x30
  if (thisStar >= 2 && thisStar == numberStars) {
    99a8:	dd1a      	ble.n	99e0 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xd8>
    99aa:	4296      	cmp	r6, r2
    99ac:	d118      	bne.n	99e0 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xd8>

  return CE_NONE;
}

void GeoAlign::createModel(int numberStars) {
  if (autoModelTask != 0) return;
    99ae:	f894 35c0 	ldrb.w	r3, [r4, #1472]	; 0x5c0
    99b2:	b9ab      	cbnz	r3, 99e0 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0xd8>

  // start a task to solve for the model
  modelNumberStars = numberStars;
  autoModelTask = tasks.add(1, 0, false, 6, autoModelWrapper, "Align");
    99b4:	4d31      	ldr	r5, [pc, #196]	; (9a7c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x174>)
  return CE_NONE;
    99b6:	4699      	mov	r9, r3
  modelNumberStars = numberStars;
    99b8:	4831      	ldr	r0, [pc, #196]	; (9a80 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x178>)
  autoModelTask = tasks.add(1, 0, false, 6, autoModelWrapper, "Align");
    99ba:	9502      	str	r5, [sp, #8]
    99bc:	4931      	ldr	r1, [pc, #196]	; (9a84 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x17c>)
  modelNumberStars = numberStars;
    99be:	7002      	strb	r2, [r0, #0]
  autoModelTask = tasks.add(1, 0, false, 6, autoModelWrapper, "Align");
    99c0:	2206      	movs	r2, #6
    99c2:	4831      	ldr	r0, [pc, #196]	; (9a88 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x180>)
    99c4:	e9cd 2100 	strd	r2, r1, [sp]
    99c8:	461a      	mov	r2, r3
    99ca:	2101      	movs	r1, #1
    99cc:	f7fc fc06 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    99d0:	f884 05c0 	strb.w	r0, [r4, #1472]	; 0x5c0
}
    99d4:	4648      	mov	r0, r9
    99d6:	b007      	add	sp, #28
    99d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (autoModelTask != 0 || thisStar < 1 || thisStar > ALIGN_MAX_NUM_STARS || numberStars < 1 || numberStars > ALIGN_MAX_NUM_STARS) return CE_ALIGN_FAIL;
    99dc:	f04f 0906 	mov.w	r9, #6
}
    99e0:	4648      	mov	r0, r9
    99e2:	b007      	add	sp, #28
    99e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    transform.equToHor(mount);
    99e8:	4651      	mov	r1, sl
    99ea:	4828      	ldr	r0, [pc, #160]	; (9a8c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x184>)
    99ec:	9205      	str	r2, [sp, #20]
    99ee:	f001 fc9b 	bl	b328 <Transform::equToHor(Coordinate*)>
    transform.equToHor(actual);
    99f2:	4639      	mov	r1, r7
    99f4:	4825      	ldr	r0, [pc, #148]	; (9a8c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x184>)
    this->mount[i].ax1 = mount->z;
    99f6:	ed9a 6b08 	vldr	d6, [sl, #32]
    this->mount[i].ax2 = mount->a;
    99fa:	ed9a 7b06 	vldr	d7, [sl, #24]
    this->mount[i].ax1 = mount->z;
    99fe:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    this->mount[i].ax2 = mount->a;
    9a02:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    this->mount[i].ax1 = mount->z;
    9a06:	ed85 6a01 	vstr	s12, [r5, #4]
    this->mount[i].ax2 = mount->a;
    9a0a:	ed85 7a03 	vstr	s14, [r5, #12]
    transform.equToHor(actual);
    9a0e:	f001 fc8b 	bl	b328 <Transform::equToHor(Coordinate*)>
    this->actual[i].ax1 = actual->z;
    9a12:	9a05      	ldr	r2, [sp, #20]
    9a14:	ed97 6b08 	vldr	d6, [r7, #32]
    this->actual[i].ax2 = actual->a;
    9a18:	ed97 7b06 	vldr	d7, [r7, #24]
    this->actual[i].ax1 = actual->z;
    9a1c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    this->actual[i].ax2 = actual->a;
    9a20:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    this->actual[i].ax1 = actual->z;
    9a24:	ed85 6a6d 	vstr	s12, [r5, #436]	; 0x1b4
    this->actual[i].ax2 = actual->a;
    9a28:	e7ad      	b.n	9986 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x7e>
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
    9a2a:	4818      	ldr	r0, [pc, #96]	; (9a8c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x184>)
    9a2c:	4651      	mov	r1, sl
    9a2e:	9205      	str	r2, [sp, #20]
    9a30:	f001 fc7a 	bl	b328 <Transform::equToHor(Coordinate*)>
    9a34:	4651      	mov	r1, sl
    9a36:	4815      	ldr	r0, [pc, #84]	; (9a8c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x184>)
    9a38:	f001 fe02 	bl	b640 <Transform::horToAa(Coordinate*)>
    9a3c:	4813      	ldr	r0, [pc, #76]	; (9a8c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x184>)
    9a3e:	4639      	mov	r1, r7
    this->mount[i].ax1 = mount->aa1;
    9a40:	ed9a 6b0a 	vldr	d6, [sl, #40]	; 0x28
    this->mount[i].ax2 = mount->aa2;
    9a44:	ed9a 7b0c 	vldr	d7, [sl, #48]	; 0x30
    this->mount[i].ax1 = mount->aa1;
    9a48:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    this->mount[i].ax2 = mount->aa2;
    9a4c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    this->mount[i].ax1 = mount->aa1;
    9a50:	ed85 6a01 	vstr	s12, [r5, #4]
    this->mount[i].ax2 = mount->aa2;
    9a54:	ed85 7a03 	vstr	s14, [r5, #12]
    9a58:	f001 fc66 	bl	b328 <Transform::equToHor(Coordinate*)>
    9a5c:	4639      	mov	r1, r7
    9a5e:	480b      	ldr	r0, [pc, #44]	; (9a8c <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x184>)
    9a60:	f001 fdee 	bl	b640 <Transform::horToAa(Coordinate*)>
    this->actual[i].ax1 = actual->aa1;
    9a64:	9a05      	ldr	r2, [sp, #20]
    9a66:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    this->actual[i].ax2 = actual->aa2;
    9a6a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
    this->actual[i].ax1 = actual->aa1;
    9a6e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    this->actual[i].ax2 = actual->aa2;
    9a72:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    this->actual[i].ax1 = actual->aa1;
    9a76:	ed85 6a6d 	vstr	s12, [r5, #436]	; 0x1b4
    this->actual[i].ax2 = actual->aa2;
    9a7a:	e784      	b.n	9986 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)+0x7e>
    9a7c:	200022f8 	.word	0x200022f8
    9a80:	20006aaf 	.word	0x20006aaf
    9a84:	0000a805 	.word	0x0000a805
    9a88:	2000634c 	.word	0x2000634c
    9a8c:	200064ac 	.word	0x200064ac

00009a90 <GeoAlign::createModel(int)>:
  if (autoModelTask != 0) return;
    9a90:	f890 35c0 	ldrb.w	r3, [r0, #1472]	; 0x5c0
    9a94:	b103      	cbz	r3, 9a98 <GeoAlign::createModel(int)+0x8>
    9a96:	4770      	bx	lr
void GeoAlign::createModel(int numberStars) {
    9a98:	b530      	push	{r4, r5, lr}
  modelNumberStars = numberStars;
    9a9a:	4a09      	ldr	r2, [pc, #36]	; (9ac0 <GeoAlign::createModel(int)+0x30>)
void GeoAlign::createModel(int numberStars) {
    9a9c:	b085      	sub	sp, #20
  autoModelTask = tasks.add(1, 0, false, 6, autoModelWrapper, "Align");
    9a9e:	4d09      	ldr	r5, [pc, #36]	; (9ac4 <GeoAlign::createModel(int)+0x34>)
    9aa0:	4604      	mov	r4, r0
    9aa2:	4809      	ldr	r0, [pc, #36]	; (9ac8 <GeoAlign::createModel(int)+0x38>)
    9aa4:	9502      	str	r5, [sp, #8]
  modelNumberStars = numberStars;
    9aa6:	7011      	strb	r1, [r2, #0]
  autoModelTask = tasks.add(1, 0, false, 6, autoModelWrapper, "Align");
    9aa8:	2106      	movs	r1, #6
    9aaa:	461a      	mov	r2, r3
    9aac:	e9cd 1000 	strd	r1, r0, [sp]
    9ab0:	2101      	movs	r1, #1
    9ab2:	4806      	ldr	r0, [pc, #24]	; (9acc <GeoAlign::createModel(int)+0x3c>)
    9ab4:	f7fc fb92 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    9ab8:	f884 05c0 	strb.w	r0, [r4, #1472]	; 0x5c0
}
    9abc:	b005      	add	sp, #20
    9abe:	bd30      	pop	{r4, r5, pc}
    9ac0:	20006aaf 	.word	0x20006aaf
    9ac4:	200022f8 	.word	0x200022f8
    9ac8:	0000a805 	.word	0x0000a805
    9acc:	2000634c 	.word	0x2000634c

00009ad0 <GeoAlign::correct(AlignCoordinate&, float, float, float, float, float, float, float, float, float*, float*)>:
  // negative numbers are further (S) from the NCP, swing to the
  // equator and the effect on declination is 0. At the SCP it
  // becomes a (N) offset.  Unchanged with meridian flips.
  DO1 = _deo*sf;
  // works on HA.  meridian flips effect this in HA
  DOh = DO1*(1.0F/mount.cosA2)*mount.side;
    9ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    9ad4:	ed91 5a06 	vldr	s10, [r1, #24]
  DO1 = _deo*sf;
    9ad8:	ee60 0a80 	vmul.f32	s1, s1, s0
  PA  = _pe*sf;

  // ------------------------------------------------------------
  // Axis flex
  DF  = _df*sf;
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9adc:	f500 6ca9 	add.w	ip, r0, #1352	; 0x548
  PA  = _pe*sf;
    9ae0:	ee20 2a02 	vmul.f32	s4, s0, s4
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9ae4:	edd1 4a04 	vldr	s9, [r1, #16]
  DOh = DO1*(1.0F/mount.cosA2)*mount.side;
    9ae8:	eec7 7a05 	vdiv.f32	s15, s14, s10
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9aec:	ed9c 7a00 	vldr	s14, [ip]
  DOh = DO1*(1.0F/mount.cosA2)*mount.side;
    9af0:	edd1 6a0b 	vldr	s13, [r1, #44]	; 0x2c
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9af4:	f200 504c 	addw	r0, r0, #1356	; 0x54c
    9af8:	ed90 6a00 	vldr	s12, [r0]
  PZ  = _pz*sf;
    9afc:	ee60 1a21 	vmul.f32	s3, s0, s3
  FF  = _ff*sf;
  FFd = FF*mount.cosA1;

  // ------------------------------------------------------------
  // Optical axis sag
  TF  = _tf*sf;
    9b00:	ee60 3a23 	vmul.f32	s7, s0, s7
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9b04:	ee62 2ac0 	vnmul.f32	s5, s5, s0
  PDh = -PD*mount.tanA2*mount.side;
    9b08:	ee21 1a40 	vnmul.f32	s2, s2, s0
  FF  = _ff*sf;
    9b0c:	ee20 3a03 	vmul.f32	s6, s0, s6

  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
  TFd = TF*(cosLat*mount.cosA1*mount.sinA2-sinLat*mount.cosA2);

  // ------------------------------------------------------------
  *a1r  = (-PZ*mount.cosA1*mount.tanA2 + PA*mount.sinA1*mount.tanA2 + DOh + PDh + TFh);
    9b10:	ee21 0ae4 	vnmul.f32	s0, s3, s9
void GeoAlign::correct(AlignCoordinate &mount, float sf, float _deo, float _pd, float _pz, float _pe, float _df, float _ff, float _tf, float *a1r, float *a2r) {
    9b14:	ed2d 8b04 	vpush	{d8-d9}
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9b18:	ee27 9a24 	vmul.f32	s18, s14, s9
  PDh = -PD*mount.tanA2*mount.side;
    9b1c:	edd1 8a08 	vldr	s17, [r1, #32]
  DOh = DO1*(1.0F/mount.cosA2)*mount.side;
    9b20:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
  PDh = -PD*mount.tanA2*mount.side;
    9b24:	ee21 1a28 	vmul.f32	s2, s2, s17
  DOh = DO1*(1.0F/mount.cosA2)*mount.side;
    9b28:	ee67 0aa0 	vmul.f32	s1, s15, s1
  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
    9b2c:	edd1 7a05 	vldr	s15, [r1, #20]
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9b30:	eeb0 4a49 	vmov.f32	s8, s18
  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
    9b34:	ee27 7a27 	vmul.f32	s14, s14, s15
  *a1r  = (-PZ*mount.cosA1*mount.tanA2 + PA*mount.sinA1*mount.tanA2 + DOh + PDh + TFh);
    9b38:	ee67 7a82 	vmul.f32	s15, s15, s4
  DFd = -DF*(cosLat*mount.cosA1 + sinLat*mount.tanA2);
    9b3c:	eea8 4a86 	vfma.f32	s8, s17, s12
  TFd = TF*(cosLat*mount.cosA1*mount.sinA2-sinLat*mount.cosA2);
    9b40:	ee26 6a45 	vnmul.f32	s12, s12, s10
  *a1r  = (-PZ*mount.cosA1*mount.tanA2 + PA*mount.sinA1*mount.tanA2 + DOh + PDh + TFh);
    9b44:	ee67 6aa8 	vmul.f32	s13, s15, s17
  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
    9b48:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9b4c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  *a1r  = (-PZ*mount.cosA1*mount.tanA2 + PA*mount.sinA1*mount.tanA2 + DOh + PDh + TFh);
    9b50:	eee8 6a80 	vfma.f32	s13, s17, s0
    9b54:	eee0 6a88 	vfma.f32	s13, s1, s16
    9b58:	eee8 6a01 	vfma.f32	s13, s16, s2
  TFd = TF*(cosLat*mount.cosA1*mount.sinA2-sinLat*mount.cosA2);
    9b5c:	ed91 1a07 	vldr	s2, [r1, #28]
  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
    9b60:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
  TFd = TF*(cosLat*mount.cosA1*mount.sinA2-sinLat*mount.cosA2);
    9b64:	eea9 6a01 	vfma.f32	s12, s18, s2
  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
    9b68:	ee88 0b05 	vdiv.f64	d0, d8, d5
    9b6c:	eeb7 5ae3 	vcvt.f64.f32	d5, s7
  *a2r  = (+PZ*mount.sinA1             + PA*mount.cosA1             + DFd + FFd + TFd);
}
    9b70:	ecbd 8b04 	vpop	{d8-d9}
  TFh = TF*(cosLat*mount.sinA1*(1.0/mount.cosA2));
    9b74:	ee27 7b00 	vmul.f64	d7, d7, d0
    9b78:	ee27 7b05 	vmul.f64	d7, d7, d5
    9b7c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  *a1r  = (-PZ*mount.cosA1*mount.tanA2 + PA*mount.sinA1*mount.tanA2 + DOh + PDh + TFh);
    9b80:	ee37 7a26 	vadd.f32	s14, s14, s13
    9b84:	ed82 7a00 	vstr	s14, [r2]
  *a2r  = (+PZ*mount.sinA1             + PA*mount.cosA1             + DFd + FFd + TFd);
    9b88:	ed91 7a04 	vldr	s14, [r1, #16]
    9b8c:	edd1 7a05 	vldr	s15, [r1, #20]
    9b90:	ee22 2a07 	vmul.f32	s4, s4, s14
    9b94:	eea7 2aa1 	vfma.f32	s4, s15, s3
    9b98:	eea2 2a84 	vfma.f32	s4, s5, s8
    9b9c:	eea4 2a83 	vfma.f32	s4, s9, s6
    9ba0:	eea6 2a23 	vfma.f32	s4, s12, s7
    9ba4:	ed83 2a00 	vstr	s4, [r3]
}
    9ba8:	4770      	bx	lr
    9baa:	bf00      	nop
    9bac:	0000      	movs	r0, r0
	...

00009bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>:
  _oh_m,_oh_p,
  _od_m,_od_p,
  
  _deo,_pd,_pz,_pe, _df,_tf,_ff, _ode,_ohe;

  float sf1 = arcsecToRad(sf);
    9bb0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    9bb4:	ed9f 7bd4 	vldr	d7, [pc, #848]	; 9f08 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x358>
void GeoAlign::doSearch(float sf, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9) {
    9bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float sf1 = arcsecToRad(sf);
    9bbc:	ee86 1b07 	vdiv.f64	d1, d6, d7

  // search
  // set Parameter Space
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9bc0:	ee07 1a90 	vmov	s15, r1
    9bc4:	4249      	negs	r1, r1
    9bc6:	ee07 1a10 	vmov	s14, r1
void GeoAlign::doSearch(float sf, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9) {
    9bca:	ed2d 8b10 	vpush	{d8-d15}
    9bce:	eeb0 ea40 	vmov.f32	s28, s0
    9bd2:	b0ab      	sub	sp, #172	; 0xac
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9bd4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9bd8:	ee07 2a90 	vmov	s15, r2
    9bdc:	4252      	negs	r2, r2
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9bde:	eddd 5a44 	vldr	s11, [sp, #272]	; 0x110
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9be2:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
    9be6:	ee07 2a90 	vmov	s15, r2
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9bea:	f200 526c 	addw	r2, r0, #1388	; 0x56c
    9bee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9bf2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9bf6:	ee07 3a90 	vmov	s15, r3
    9bfa:	425b      	negs	r3, r3
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9bfc:	920b      	str	r2, [sp, #44]	; 0x2c
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9bfe:	eef8 2ae7 	vcvt.f32.s32	s5, s15
    9c02:	ee07 3a90 	vmov	s15, r3
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9c06:	9b44      	ldr	r3, [sp, #272]	; 0x110
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9c08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9c0c:	425b      	negs	r3, r3
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9c0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9c12:	edd2 7a00 	vldr	s15, [r2]
    9c16:	ee04 3a90 	vmov	s9, r3
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c1a:	f200 5384 	addw	r3, r0, #1412	; 0x584
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9c1e:	eec7 0a8e 	vdiv.f32	s1, s15, s28
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c22:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    9c24:	ed93 8a00 	vldr	s16, [r3]
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9c28:	eddd 7a45 	vldr	s15, [sp, #276]	; 0x114
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c2c:	4252      	negs	r2, r2
    9c2e:	930e      	str	r3, [sp, #56]	; 0x38
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9c30:	f500 63af 	add.w	r3, r0, #1400	; 0x578
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c34:	ee05 2a10 	vmov	s10, r2
    9c38:	ee88 3a0e 	vdiv.f32	s6, s16, s28
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9c3c:	9314      	str	r3, [sp, #80]	; 0x50
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9c3e:	eef8 3ae7 	vcvt.f32.s32	s7, s15
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9c42:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c46:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9c4a:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c4e:	eddd 7a47 	vldr	s15, [sp, #284]	; 0x11c
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9c52:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  float sf1 = arcsecToRad(sf);
    9c5a:	eef7 ebc1 	vcvt.f32.f64	s29, d1
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9c5e:	eddd 1a48 	vldr	s3, [sp, #288]	; 0x120
  { return __builtin_roundf(__x); }
    9c62:	fef8 0a60 	vrinta.f32	s1, s1
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9c66:	ee74 4aa0 	vadd.f32	s9, s9, s1
    9c6a:	ee75 5aa0 	vadd.f32	s11, s11, s1
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9c6e:	eef8 0ae1 	vcvt.f32.s32	s1, s3
    9c72:	feb8 3a43 	vrinta.f32	s6, s6
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c76:	ee35 5a03 	vadd.f32	s10, s10, s6
    9c7a:	ee77 7a83 	vadd.f32	s15, s15, s6
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9c7e:	ed93 3a00 	vldr	s6, [r3]
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9c82:	f500 63ac 	add.w	r3, r0, #1376	; 0x560
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9c86:	ee83 1a0e 	vdiv.f32	s2, s6, s28
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9c8a:	edd3 1a00 	vldr	s3, [r3]
    9c8e:	9308      	str	r3, [sp, #32]
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9c90:	f200 5364 	addw	r3, r0, #1380	; 0x564
    9c94:	9309      	str	r3, [sp, #36]	; 0x24
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9c96:	ee81 3a8e 	vdiv.f32	s6, s3, s28
  _df_m = -p7 + round(best_df/sf);  _df_p = p7 + round(best_df/sf);
    9c9a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    9c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    9ca2:	ed8d 5a23 	vstr	s10, [sp, #140]	; 0x8c
    9ca6:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    9caa:	feb8 1a41 	vrinta.f32	s2, s2
    9cae:	feb8 3a43 	vrinta.f32	s6, s6
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9cb2:	ee70 1a03 	vadd.f32	s3, s0, s6
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9cb6:	ed93 0a00 	vldr	s0, [r3]
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9cba:	ee37 7a03 	vadd.f32	s14, s14, s6
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9cbe:	f500 63ad 	add.w	r3, r0, #1384	; 0x568
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9cc2:	ee80 3a0e 	vdiv.f32	s6, s0, s28
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9cc6:	930a      	str	r3, [sp, #40]	; 0x28
    9cc8:	ed93 0a00 	vldr	s0, [r3]
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9ccc:	f500 63b0 	add.w	r3, r0, #1408	; 0x580
    9cd0:	ed93 5a00 	vldr	s10, [r3]
    9cd4:	930d      	str	r3, [sp, #52]	; 0x34
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9cd6:	f500 63b1 	add.w	r3, r0, #1416	; 0x588
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9cda:	ee85 8a0e 	vdiv.f32	s16, s10, s28
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9cde:	edd3 7a00 	vldr	s15, [r3]
    9ce2:	930f      	str	r3, [sp, #60]	; 0x3c
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9ce4:	f200 537c 	addw	r3, r0, #1404	; 0x57c
    9ce8:	930c      	str	r3, [sp, #48]	; 0x30
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9cea:	ee87 5a8e 	vdiv.f32	s10, s15, s28
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9cee:	edd3 7a00 	vldr	s15, [r3]
    9cf2:	feb8 3a43 	vrinta.f32	s6, s6
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9cf6:	ee36 6a03 	vadd.f32	s12, s12, s6
    9cfa:	ee32 2a03 	vadd.f32	s4, s4, s6
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9cfe:	ee80 3a0e 	vdiv.f32	s6, s0, s28
    9d02:	feb8 8a48 	vrinta.f32	s16, s16
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9d06:	ee87 0a8e 	vdiv.f32	s0, s15, s28
    9d0a:	feb8 5a45 	vrinta.f32	s10, s10
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9d0e:	ee34 4a05 	vadd.f32	s8, s8, s10
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9d12:	eebd 6ac6 	vcvt.s32.f32	s12, s12
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9d16:	ee73 3a88 	vadd.f32	s7, s7, s16
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9d1a:	eefd 1ae1 	vcvt.s32.f32	s3, s3
    9d1e:	feb8 3a43 	vrinta.f32	s6, s6
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9d22:	ee76 6a83 	vadd.f32	s13, s13, s6
    9d26:	ee72 2a83 	vadd.f32	s5, s5, s6
    9d2a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    9d2e:	feb8 0a40 	vrinta.f32	s0, s0
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9d32:	ee70 0a80 	vadd.f32	s1, s1, s0
    9d36:	eefd 7ae0 	vcvt.s32.f32	s15, s1
    9d3a:	edcd 7a26 	vstr	s15, [sp, #152]	; 0x98
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9d3e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    9d42:	edcd 7a1a 	vstr	s15, [sp, #104]	; 0x68
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9d46:	eddd 7a49 	vldr	s15, [sp, #292]	; 0x124
    9d4a:	ee17 3a90 	vmov	r3, s15
    9d4e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    9d52:	425b      	negs	r3, r3
    9d54:	ee70 0a81 	vadd.f32	s1, s1, s2
    9d58:	ee03 3a10 	vmov	s6, r3
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9d5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9d5e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
    9d62:	eefd 6ae2 	vcvt.s32.f32	s13, s5
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9d66:	425b      	negs	r3, r3
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9d68:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9d6c:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
    9d70:	eebd 6ac2 	vcvt.s32.f32	s12, s4
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9d74:	ee07 3a10 	vmov	s14, r3
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9d78:	9b46      	ldr	r3, [sp, #280]	; 0x118
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9d7a:	ee33 3a01 	vadd.f32	s6, s6, s2
  _pz_m = -p3 + round(best_pz/sf);  _pz_p = p3 + round(best_pz/sf);
    9d7e:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9d82:	425b      	negs	r3, r3
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9d84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9d88:	eebd 1ae0 	vcvt.s32.f32	s2, s1
  _deo_m= -p1 + round(best_deo/sf); _deo_p= p1 + round(best_deo/sf);
    9d8c:	edcd 1a1b 	vstr	s3, [sp, #108]	; 0x6c
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9d90:	ee07 3a90 	vmov	s15, r3
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9d94:	9b48      	ldr	r3, [sp, #288]	; 0x120
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9d96:	ee37 7a08 	vadd.f32	s14, s14, s16
  _pd_m = -p2 + round(best_pd/sf);  _pd_p = p2 + round(best_pd/sf);
    9d9a:	ed8d 6a1d 	vstr	s12, [sp, #116]	; 0x74
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9da2:	425b      	negs	r3, r3
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9da4:	eebd 3ac3 	vcvt.s32.f32	s6, s6

  float ma2, ma1;
  for (_ohe = _oh_m; _ohe <= _oh_p; _ohe++)
    9da8:	ee11 2a10 	vmov	r2, s2
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9dac:	eefd 6ae4 	vcvt.s32.f32	s13, s9
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9db0:	ed8d 1a27 	vstr	s2, [sp, #156]	; 0x9c
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9db4:	ee77 7a85 	vadd.f32	s15, s15, s10
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9db8:	ee05 3a10 	vmov	s10, r3
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9dbc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  for (_ohe = _oh_m; _ohe <= _oh_p; _ohe++)
    9dc0:	ee13 3a10 	vmov	r3, s6
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9dc4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9dc8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  for (_ohe = _oh_m; _ohe <= _oh_p; _ohe++)
    9dd0:	4293      	cmp	r3, r2
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9dd2:	eefd 6ae5 	vcvt.s32.f32	s13, s11
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9dd6:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9dda:	ee35 5a00 	vadd.f32	s10, s10, s0
  _oh_m = -p9 + round(best_ohe/sf); _oh_p = p9 + round(best_ohe/sf);
    9dde:	ed8d 3a18 	vstr	s6, [sp, #96]	; 0x60
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9de2:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
    9de6:	eefd 7ac4 	vcvt.s32.f32	s15, s8
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9dea:	eebd 7ae3 	vcvt.s32.f32	s14, s7
  _pe_m = -p4 + round(best_pe/sf);  _pe_p = p4 + round(best_pe/sf);
    9dee:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
  _ff_m = -p6 + round(best_ff/sf);  _ff_p = p6 + round(best_ff/sf);
    9df2:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9df6:	eefd 7ac5 	vcvt.s32.f32	s15, s10
  _tf_m = -p5 + round(best_tf/sf);  _tf_p = p5 + round(best_tf/sf);
    9dfa:	ed8d 7a06 	vstr	s14, [sp, #24]
  _od_m = -p8 + round(best_ode/sf); _od_p = p8 + round(best_ode/sf);
    9dfe:	edcd 7a25 	vstr	s15, [sp, #148]	; 0x94
  for (_ohe = _oh_m; _ohe <= _oh_p; _ohe++)
    9e02:	f300 8244 	bgt.w	a28e <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6de>
    9e06:	4683      	mov	fp, r0
        float ma1r, ma2r;
        correct(mount[l], sf1, _deo, _pd, _pz, _pe, _df, _ff, _tf, &ma1r, &ma2r);

        delta[l].ax1 = actual[l].ax1 - (mount[l].ma1 - ma1r);
        if (delta[l].ax1 >  Deg180) delta[l].ax1 = delta[l].ax1 - Deg360; else
        if (delta[l].ax1 < -Deg180) delta[l].ax1 = delta[l].ax1 + Deg360;
    9e08:	ed9f cb41 	vldr	d12, [pc, #260]	; 9f10 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x360>
    9e0c:	ed9f bb42 	vldr	d11, [pc, #264]	; 9f18 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x368>
  for (_ode = _od_m; _ode <= _od_p; _ode++) {
    9e10:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9e14:	4293      	cmp	r3, r2
    9e16:	f300 8233 	bgt.w	a280 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6d0>
    ohe = _ohe*sf1;
    9e1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9e1c:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
    9e20:	9319      	str	r3, [sp, #100]	; 0x64
    9e22:	f50b 63b5 	add.w	r3, fp, #1448	; 0x5a8
    9e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9e2a:	9311      	str	r3, [sp, #68]	; 0x44
    9e2c:	f50b 63b6 	add.w	r3, fp, #1456	; 0x5b0
    9e30:	9313      	str	r3, [sp, #76]	; 0x4c
    9e32:	f20b 53a4 	addw	r3, fp, #1444	; 0x5a4
    9e36:	ee67 7aae 	vmul.f32	s15, s15, s29
    9e3a:	9310      	str	r3, [sp, #64]	; 0x40
    9e3c:	f20b 53ac 	addw	r3, fp, #1452	; 0x5ac
    9e40:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
    9e44:	9312      	str	r3, [sp, #72]	; 0x48
    ode = _ode*sf1;
    9e46:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
    9e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9e4c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    9e50:	ee29 9a2e 	vmul.f32	s18, s18, s29
    odw = -ode;
    9e54:	eef1 7a49 	vneg.f32	s15, s18
    ode = _ode*sf1;
    9e58:	ed83 9a00 	vstr	s18, [r3]
    odw = -ode;
    9e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9e5e:	edc3 7a00 	vstr	s15, [r3]
    ohe = _ohe*sf1;
    9e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9e64:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
    9e68:	edc3 7a00 	vstr	s15, [r3]
    ohw = ohe;
    9e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9e6e:	edc3 7a00 	vstr	s15, [r3]
    for (l = 0; l < num; l++) {
    9e72:	f8db 3550 	ldr.w	r3, [fp, #1360]	; 0x550
    9e76:	2b00      	cmp	r3, #0
    9e78:	dd58      	ble.n	9f2c <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x37c>
    9e7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9e7e:	465c      	mov	r4, fp
    9e80:	eb0b 1503 	add.w	r5, fp, r3, lsl #4
    9e84:	e032      	b.n	9eec <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x33c>
      if (mount[l].side == 1) // east of the mount, default (fork mounts)
    9e86:	2b01      	cmp	r3, #1
    9e88:	d105      	bne.n	9e96 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x2e6>
        ma1 = ma1 + ohe;
    9e8a:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
        ma2 = ma2 + ode;
    9e8e:	ee38 8a09 	vadd.f32	s16, s16, s18
        ma1 = ma1 + ohe;
    9e92:	ee78 8aa7 	vadd.f32	s17, s17, s15
      mount[l].ma2 = ma2;
    9e96:	ed84 8a04 	vstr	s16, [r4, #16]
      mount[l].sinA1 = sinf(ma1);
    9e9a:	eeb0 0a68 	vmov.f32	s0, s17
      mount[l].ma1 = ma1;
    9e9e:	edc4 8a02 	vstr	s17, [r4, #8]
    for (l = 0; l < num; l++) {
    9ea2:	3430      	adds	r4, #48	; 0x30
      mount[l].sinA1 = sinf(ma1);
    9ea4:	f010 fbdc 	bl	1a660 <sinf>
    9ea8:	eef0 7a40 	vmov.f32	s15, s0
      mount[l].cosA1 = cosf(ma1);
    9eac:	eeb0 0a68 	vmov.f32	s0, s17
      mount[l].sinA1 = sinf(ma1);
    9eb0:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
      mount[l].cosA1 = cosf(ma1);
    9eb4:	f010 fcd8 	bl	1a868 <cosf>
    9eb8:	eef0 7a40 	vmov.f32	s15, s0
      mount[l].sinA2 = sinf(ma2);
    9ebc:	eeb0 0a48 	vmov.f32	s0, s16
      mount[l].cosA1 = cosf(ma1);
    9ec0:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
      mount[l].sinA2 = sinf(ma2);
    9ec4:	f010 fbcc 	bl	1a660 <sinf>
    9ec8:	eef0 7a40 	vmov.f32	s15, s0
      mount[l].cosA2 = cosf(ma2);
    9ecc:	eeb0 0a48 	vmov.f32	s0, s16
      mount[l].sinA2 = sinf(ma2);
    9ed0:	eeb0 8a67 	vmov.f32	s16, s15
    9ed4:	ed44 7a04 	vstr	s15, [r4, #-16]
      mount[l].cosA2 = cosf(ma2);
    9ed8:	f010 fcc6 	bl	1a868 <cosf>
    for (l = 0; l < num; l++) {
    9edc:	42ac      	cmp	r4, r5
      mount[l].cosA2 = cosf(ma2);
    9ede:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
      mount[l].tanA2 = mount[l].sinA2/mount[l].cosA2;
    9ee2:	ee88 7a00 	vdiv.f32	s14, s16, s0
    9ee6:	ed04 7a03 	vstr	s14, [r4, #-12]
    for (l = 0; l < num; l++) {
    9eea:	d01f      	beq.n	9f2c <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x37c>
      if (mount[l].side == -1) // west of the mount
    9eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
      ma1 = mount[l].ax1;
    9eee:	edd4 8a01 	vldr	s17, [r4, #4]
      if (mount[l].side == -1) // west of the mount
    9ef2:	1c5a      	adds	r2, r3, #1
      ma2 = mount[l].ax2;
    9ef4:	ed94 8a03 	vldr	s16, [r4, #12]
      if (mount[l].side == -1) // west of the mount
    9ef8:	d1c5      	bne.n	9e86 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x2d6>
        ma1 = ma1 + ohw;
    9efa:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
    9efe:	ee38 8a49 	vsub.f32	s16, s16, s18
    9f02:	ee78 8aa7 	vadd.f32	s17, s17, s15
        ma2 = ma2 + odw;
    9f06:	e7c6      	b.n	9e96 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x2e6>
    9f08:	7331ad79 	.word	0x7331ad79
    9f0c:	41092dc6 	.word	0x41092dc6
    9f10:	54442d18 	.word	0x54442d18
    9f14:	c00921fb 	.word	0xc00921fb
    9f18:	54442d18 	.word	0x54442d18
    9f1c:	401921fb 	.word	0x401921fb
    9f20:	54442d18 	.word	0x54442d18
    9f24:	400921fb 	.word	0x400921fb
    9f28:	00000000 	.word	0x00000000
    for (_deo = _deo_m; _deo <= _deo_p; _deo++)
    9f2c:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	; 0x68
    9f30:	4293      	cmp	r3, r2
    9f32:	f300 819e 	bgt.w	a272 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6c2>
    9f36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9f38:	9302      	str	r3, [sp, #8]
    for (_pd = _pd_m; _pd <= _pd_p; _pd++)
    9f3a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
    9f3e:	4293      	cmp	r3, r2
    9f40:	f300 818f 	bgt.w	a262 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6b2>
    9f44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9f46:	9303      	str	r3, [sp, #12]
    for (_pz = _pz_m; _pz <= _pz_p; _pz++)
    9f48:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
    9f4c:	4293      	cmp	r3, r2
    9f4e:	f300 8180 	bgt.w	a252 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6a2>
    9f52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9f54:	9304      	str	r3, [sp, #16]
    for (_pe = _pe_m; _pe <= _pe_p; _pe++)
    9f56:	e9dd 3220 	ldrd	r3, r2, [sp, #128]	; 0x80
    9f5a:	4293      	cmp	r3, r2
    9f5c:	f300 8171 	bgt.w	a242 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x692>
    9f60:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f62:	9305      	str	r3, [sp, #20]
    for (_df = _df_m; _df <= _df_p; _df++)
    9f64:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
    9f68:	4293      	cmp	r3, r2
    9f6a:	f300 8162 	bgt.w	a232 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x682>
    9f6e:	eddd fa23 	vldr	s31, [sp, #140]	; 0x8c
    for (_ff = _ff_m; _ff <= _ff_p; _ff++)
    9f72:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9f74:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9f76:	4293      	cmp	r3, r2
    9f78:	f300 8150 	bgt.w	a21c <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x66c>
    9f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9f7e:	9301      	str	r3, [sp, #4]
    for (_tf = _tf_m; _tf <= _tf_p; _tf++) {
    9f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9f82:	9a06      	ldr	r2, [sp, #24]
    9f84:	4293      	cmp	r3, r2
    9f86:	f300 8141 	bgt.w	a20c <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x65c>
    9f8a:	f20b 53bc 	addw	r3, fp, #1468	; 0x5bc
    9f8e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    9f90:	f50b 67b7 	add.w	r7, fp, #1464	; 0x5b8
    9f94:	f50b 68b4 	add.w	r8, fp, #1440	; 0x5a0
    9f98:	9307      	str	r3, [sp, #28]
        if (delta[l].ax1 >  Deg180) delta[l].ax1 = delta[l].ax1 - Deg360; else
    9f9a:	ed1f ab1f 	vldr	d10, [pc, #-124]	; 9f20 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x370>
      for (l = 0; l < num; l++) {
    9f9e:	f8db 5550 	ldr.w	r5, [fp, #1360]	; 0x550
    9fa2:	2d00      	cmp	r5, #0
    9fa4:	f340 8183 	ble.w	a2ae <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6fe>
      max_dist = sqrtf(a + b); // was sq(a) + sq(b)

      // remember the best fit
      if (max_dist < best_dist) {
        best_dist = max_dist;
        best_deo  = _deo*sf;
    9fa8:	eddd 7a02 	vldr	s15, [sp, #8]
        best_pd   = _pd*sf;
        best_pz   = _pz*sf;
        best_pe   = _pe*sf;

        best_tf   = _tf*sf;
        best_df   = _df*sf;
    9fac:	eeb8 9aef 	vcvt.f32.s32	s18, s31
    9fb0:	f10b 0104 	add.w	r1, fp, #4
      for (l = 0; l < num; l++) {
    9fb4:	2400      	movs	r4, #0
        best_deo  = _deo*sf;
    9fb6:	eeb8 fae7 	vcvt.f32.s32	s30, s15
        best_pd   = _pd*sf;
    9fba:	eddd 7a03 	vldr	s15, [sp, #12]
    9fbe:	eef8 dae7 	vcvt.f32.s32	s27, s15
        best_pz   = _pz*sf;
    9fc2:	eddd 7a04 	vldr	s15, [sp, #16]
    9fc6:	eeb8 dae7 	vcvt.f32.s32	s26, s15
        best_pe   = _pe*sf;
    9fca:	eddd 7a05 	vldr	s15, [sp, #20]
    9fce:	eef8 9ae7 	vcvt.f32.s32	s19, s15
        best_ff   = _ff*sf;
    9fd2:	eddd 7a01 	vldr	s15, [sp, #4]
    9fd6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
        best_tf   = _tf*sf;
    9fda:	ee07 6a90 	vmov	s15, r6
    9fde:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    9fe2:	e019      	b.n	a018 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x468>
        if (delta[l].ax1 >  Deg180) delta[l].ax1 = delta[l].ax1 - Deg360; else
    9fe4:	ee37 7b4b 	vsub.f64	d7, d7, d11
    9fe8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    9fec:	ed81 7ad8 	vstr	s14, [r1, #864]	; 0x360
        delta[l].ax2 = actual[l].ax2 - (mount[l].ma2 - ma2r);
    9ff0:	edd1 7a03 	vldr	s15, [r1, #12]
      for (l = 0; l < num; l++) {
    9ff4:	3401      	adds	r4, #1
        delta[l].ax2 = actual[l].ax2 - (mount[l].ma2 - ma2r);
    9ff6:	ed9d 7a29 	vldr	s14, [sp, #164]	; 0xa4
      for (l = 0; l < num; l++) {
    9ffa:	3130      	adds	r1, #48	; 0x30
        delta[l].ax2 = actual[l].ax2 - (mount[l].ma2 - ma2r);
    9ffc:	edd1 6a62 	vldr	s13, [r1, #392]	; 0x188
      for (l = 0; l < num; l++) {
    a000:	42ac      	cmp	r4, r5
        delta[l].ax2 = actual[l].ax2 - (mount[l].ma2 - ma2r);
    a002:	ee77 7ac7 	vsub.f32	s15, s15, s14
        delta[l].side = mount[l].side;
    a006:	f851 3c04 	ldr.w	r3, [r1, #-4]
    a00a:	f8c1 335c 	str.w	r3, [r1, #860]	; 0x35c
        delta[l].ax2 = actual[l].ax2 - (mount[l].ma2 - ma2r);
    a00e:	ee76 7ae7 	vsub.f32	s15, s13, s15
    a012:	edc1 7ace 	vstr	s15, [r1, #824]	; 0x338
      for (l = 0; l < num; l++) {
    a016:	d034      	beq.n	a082 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x4d2>
        correct(mount[l], sf1, _deo, _pd, _pz, _pe, _df, _ff, _tf, &ma1r, &ma2r);
    a018:	eef0 3a48 	vmov.f32	s7, s16
    a01c:	ab29      	add	r3, sp, #164	; 0xa4
    a01e:	eeb0 3a68 	vmov.f32	s6, s17
    a022:	aa28      	add	r2, sp, #160	; 0xa0
    a024:	eef0 2a49 	vmov.f32	s5, s18
    a028:	4658      	mov	r0, fp
    a02a:	eeb0 2a69 	vmov.f32	s4, s19
    a02e:	eef0 1a4d 	vmov.f32	s3, s26
    a032:	eeb0 1a6d 	vmov.f32	s2, s27
    a036:	eef0 0a4f 	vmov.f32	s1, s30
    a03a:	eeb0 0a6e 	vmov.f32	s0, s29
    a03e:	f7ff fd47 	bl	9ad0 <GeoAlign::correct(AlignCoordinate&, float, float, float, float, float, float, float, float, float*, float*)>
        delta[l].ax1 = actual[l].ax1 - (mount[l].ma1 - ma1r);
    a042:	eddd 7a28 	vldr	s15, [sp, #160]	; 0xa0
    a046:	edd1 6a01 	vldr	s13, [r1, #4]
    a04a:	ed91 7a6c 	vldr	s14, [r1, #432]	; 0x1b0
    a04e:	ee76 6ae7 	vsub.f32	s13, s13, s15
    a052:	ee77 6a66 	vsub.f32	s13, s14, s13
        if (delta[l].ax1 >  Deg180) delta[l].ax1 = delta[l].ax1 - Deg360; else
    a056:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
    a05a:	eeb4 7bca 	vcmpe.f64	d7, d10
    a05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a062:	dcbf      	bgt.n	9fe4 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x434>
        if (delta[l].ax1 < -Deg180) delta[l].ax1 = delta[l].ax1 + Deg360;
    a064:	eeb4 7bcc 	vcmpe.f64	d7, d12
    a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a06c:	d402      	bmi.n	a074 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x4c4>
        delta[l].ax1 = actual[l].ax1 - (mount[l].ma1 - ma1r);
    a06e:	edc1 6ad8 	vstr	s13, [r1, #864]	; 0x360
    a072:	e7bd      	b.n	9ff0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x440>
        if (delta[l].ax1 < -Deg180) delta[l].ax1 = delta[l].ax1 + Deg360;
    a074:	ee37 7b0b 	vadd.f64	d7, d7, d11
    a078:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a07c:	ed81 7ad8 	vstr	s14, [r1, #864]	; 0x360
    a080:	e7b6      	b.n	9ff0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x440>
      sum1 = 0.0;
    a082:	ed5f 7a57 	vldr	s15, [pc, #-348]	; 9f28 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x378>
    a086:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    a08a:	46d9      	mov	r9, fp
    a08c:	465c      	mov	r4, fp
    a08e:	eeb0 8a67 	vmov.f32	s16, s15
    a092:	eb0b 1a02 	add.w	sl, fp, r2, lsl #4
    a096:	edc7 7a00 	vstr	s15, [r7]
      for (l = 0; l < num; l++) sum1 = sum1 + sq(delta[l].ax1*cosf(actual[l].ax2));
    a09a:	ed94 0a6f 	vldr	s0, [r4, #444]	; 0x1bc
    a09e:	3430      	adds	r4, #48	; 0x30
    a0a0:	f010 fbe2 	bl	1a868 <cosf>
    a0a4:	edd4 7acd 	vldr	s15, [r4, #820]	; 0x334
    a0a8:	45a2      	cmp	sl, r4
    a0aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    a0ae:	eea0 8a00 	vfma.f32	s16, s0, s0
    a0b2:	d1f2      	bne.n	a09a <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x4ea>
      a = sum1/(num - 1); // was sqrt(sum1/(num - 1))
    a0b4:	3d01      	subs	r5, #1
    a0b6:	ee07 5a90 	vmov	s15, r5
    a0ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    a0be:	ed5f 7a66 	vldr	s15, [pc, #-408]	; 9f28 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x378>
    a0c2:	eec8 6a07 	vdiv.f32	s13, s16, s14
      for (l = 0; l < num; l++) sum1 = sum1 + sq(delta[l].ax2);
    a0c6:	ed99 6adb 	vldr	s12, [r9, #876]	; 0x36c
    a0ca:	f109 0930 	add.w	r9, r9, #48	; 0x30
    a0ce:	45d1      	cmp	r9, sl
    a0d0:	eee6 7a06 	vfma.f32	s15, s12, s12
    a0d4:	d1f7      	bne.n	a0c6 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x516>
      b = sum1/(num - 1); // was sqrt(sum1/(num - 1))
    a0d6:	ee87 6a87 	vdiv.f32	s12, s15, s14
    a0da:	edc7 7a00 	vstr	s15, [r7]
      max_dist = sqrtf(a + b); // was sq(a) + sq(b)
    a0de:	ee36 6a26 	vadd.f32	s12, s12, s13
    a0e2:	eeb5 6a40 	vcmp.f32	s12, #0.0
    a0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a0ea:	f100 80ee 	bmi.w	a2ca <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x71a>
    a0ee:	eef1 7ac6 	vsqrt.f32	s15, s12
      if (max_dist < best_dist) {
    a0f2:	ed98 7a00 	vldr	s14, [r8]
      max_dist = sqrtf(a + b); // was sq(a) + sq(b)
    a0f6:	9b07      	ldr	r3, [sp, #28]
    a0f8:	edc3 7a00 	vstr	s15, [r3]
      if (max_dist < best_dist) {
    a0fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    a100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a104:	dd7a      	ble.n	a1fc <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x64c>
        best_deo  = _deo*sf;
    a106:	ed9d 7a02 	vldr	s14, [sp, #8]
        best_tf   = _tf*sf;
    a10a:	ee05 6a90 	vmov	s11, r6
        best_deo  = _deo*sf;
    a10e:	9b08      	ldr	r3, [sp, #32]
        best_df   = _df*sf;
    a110:	eeb8 6aef 	vcvt.f32.s32	s12, s31
        best_deo  = _deo*sf;
    a114:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
        best_pd   = _pd*sf;
    a118:	ed9d 7a03 	vldr	s14, [sp, #12]
        best_dist = max_dist;
    a11c:	edc8 7a00 	vstr	s15, [r8]
        best_tf   = _tf*sf;
    a120:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        best_pd   = _pd*sf;
    a124:	eef8 4ac7 	vcvt.f32.s32	s9, s14
        best_pz   = _pz*sf;
    a128:	ed9d 7a04 	vldr	s14, [sp, #16]
        best_deo  = _deo*sf;
    a12c:	ee24 4a0e 	vmul.f32	s8, s8, s28
        best_ff   = _ff*sf;
    a130:	eddd 6a01 	vldr	s13, [sp, #4]
        best_pz   = _pz*sf;
    a134:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
        best_pe   = _pe*sf;
    a138:	ed9d 7a05 	vldr	s14, [sp, #20]
        best_pd   = _pd*sf;
    a13c:	ee64 4a8e 	vmul.f32	s9, s9, s28
        best_deo  = _deo*sf;
    a140:	ed83 4a00 	vstr	s8, [r3]
        best_pe   = _pe*sf;
    a144:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        best_pd   = _pd*sf;
    a148:	9b09      	ldr	r3, [sp, #36]	; 0x24
        best_pz   = _pz*sf;
    a14a:	ee25 5a0e 	vmul.f32	s10, s10, s28
        best_tf   = _tf*sf;
    a14e:	ee65 5a8e 	vmul.f32	s11, s11, s28
        best_pd   = _pd*sf;
    a152:	edc3 4a00 	vstr	s9, [r3]
        best_pe   = _pe*sf;
    a156:	ee27 7a0e 	vmul.f32	s14, s14, s28
        best_pz   = _pz*sf;
    a15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        best_ff   = _ff*sf;
    a15c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        best_df   = _df*sf;
    a160:	ee26 6a0e 	vmul.f32	s12, s12, s28
        best_pz   = _pz*sf;
    a164:	ed83 5a00 	vstr	s10, [r3]
        best_pe   = _pe*sf;
    a168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        best_ff   = _ff*sf;
    a16a:	ee66 6a8e 	vmul.f32	s13, s13, s28
        best_pe   = _pe*sf;
    a16e:	ed83 7a00 	vstr	s14, [r3]
        best_tf   = _tf*sf;
    a172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a174:	edc3 5a00 	vstr	s11, [r3]
        best_df   = _df*sf;
    a178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a17a:	ed83 6a00 	vstr	s12, [r3]
        best_ff   = _ff*sf;
    a17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a180:	edc3 6a00 	vstr	s13, [r3]
        
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a184:	9b48      	ldr	r3, [sp, #288]	; 0x120
    a186:	2b00      	cmp	r3, #0
    a188:	f000 8086 	beq.w	a298 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x6e8>
    a18c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a18e:	ed93 6a00 	vldr	s12, [r3]
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a192:	9b11      	ldr	r3, [sp, #68]	; 0x44
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a194:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a198:	edd3 7a00 	vldr	s15, [r3]
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a19c:	f20b 5374 	addw	r3, fp, #1396	; 0x574
    a1a0:	ed9f 5b4d 	vldr	d5, [pc, #308]	; a2d8 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x728>
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a1a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a1a8:	ee26 6b05 	vmul.f64	d6, d6, d5
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a1ac:	ee27 7b05 	vmul.f64	d7, d7, d5
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a1b0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a1b4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a1b8:	ed83 6a00 	vstr	s12, [r3]
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a1be:	ed83 7a00 	vstr	s14, [r3]
        if (p9 != 0) best_ohw = radToArcsec(ohw);
    a1c2:	9b49      	ldr	r3, [sp, #292]	; 0x124
    a1c4:	b1d3      	cbz	r3, a1fc <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x64c>
    a1c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a1c8:	ed93 7a00 	vldr	s14, [r3]
        if (p9 != 0) best_ohe = radToArcsec(ohe);
    a1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
        if (p9 != 0) best_ohw = radToArcsec(ohw);
    a1ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        if (p9 != 0) best_ohe = radToArcsec(ohe);
    a1d2:	edd3 6a00 	vldr	s13, [r3]
        if (p9 != 0) best_ohw = radToArcsec(ohw);
    a1d6:	f50b 63ae 	add.w	r3, fp, #1392	; 0x570
    a1da:	ed9f 5b3f 	vldr	d5, [pc, #252]	; a2d8 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x728>
        if (p9 != 0) best_ohe = radToArcsec(ohe);
    a1de:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
        if (p9 != 0) best_ohw = radToArcsec(ohw);
    a1e2:	ee27 7b05 	vmul.f64	d7, d7, d5
        if (p9 != 0) best_ohe = radToArcsec(ohe);
    a1e6:	ee26 6b05 	vmul.f64	d6, d6, d5
        if (p9 != 0) best_ohw = radToArcsec(ohw);
    a1ea:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        if (p9 != 0) best_ohe = radToArcsec(ohe);
    a1ee:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
        if (p9 != 0) best_ohw = radToArcsec(ohw);
    a1f2:	ed83 7a00 	vstr	s14, [r3]
        if (p9 != 0) best_ohe = radToArcsec(ohe);
    a1f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a1f8:	ed83 6a00 	vstr	s12, [r3]
      }
      
      Y;
    a1fc:	4838      	ldr	r0, [pc, #224]	; (a2e0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x730>)
    for (_tf = _tf_m; _tf <= _tf_p; _tf++) {
    a1fe:	3601      	adds	r6, #1
      Y;
    a200:	f7fc f91e 	bl	6440 <Tasks::yield()>
    for (_tf = _tf_m; _tf <= _tf_p; _tf++) {
    a204:	9b06      	ldr	r3, [sp, #24]
    a206:	42b3      	cmp	r3, r6
    a208:	f6bf aec9 	bge.w	9f9e <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x3ee>
    for (_ff = _ff_m; _ff <= _ff_p; _ff++)
    a20c:	9b01      	ldr	r3, [sp, #4]
    a20e:	3301      	adds	r3, #1
    a210:	9301      	str	r3, [sp, #4]
    a212:	9a01      	ldr	r2, [sp, #4]
    a214:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a216:	4293      	cmp	r3, r2
    a218:	f6bf aeb2 	bge.w	9f80 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x3d0>
    for (_df = _df_m; _df <= _df_p; _df++)
    a21c:	ee1f 3a90 	vmov	r3, s31
    a220:	3301      	adds	r3, #1
    a222:	ee0f 3a90 	vmov	s31, r3
    a226:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a228:	ee1f 2a90 	vmov	r2, s31
    a22c:	4293      	cmp	r3, r2
    a22e:	f6bf aea0 	bge.w	9f72 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x3c2>
    for (_pe = _pe_m; _pe <= _pe_p; _pe++)
    a232:	9b05      	ldr	r3, [sp, #20]
    a234:	3301      	adds	r3, #1
    a236:	9305      	str	r3, [sp, #20]
    a238:	9a05      	ldr	r2, [sp, #20]
    a23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a23c:	4293      	cmp	r3, r2
    a23e:	f6bf ae91 	bge.w	9f64 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x3b4>
    for (_pz = _pz_m; _pz <= _pz_p; _pz++)
    a242:	9b04      	ldr	r3, [sp, #16]
    a244:	3301      	adds	r3, #1
    a246:	9304      	str	r3, [sp, #16]
    a248:	9a04      	ldr	r2, [sp, #16]
    a24a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a24c:	4293      	cmp	r3, r2
    a24e:	f6bf ae82 	bge.w	9f56 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x3a6>
    for (_pd = _pd_m; _pd <= _pd_p; _pd++)
    a252:	9b03      	ldr	r3, [sp, #12]
    a254:	3301      	adds	r3, #1
    a256:	9303      	str	r3, [sp, #12]
    a258:	9a03      	ldr	r2, [sp, #12]
    a25a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a25c:	4293      	cmp	r3, r2
    a25e:	f6bf ae73 	bge.w	9f48 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x398>
    for (_deo = _deo_m; _deo <= _deo_p; _deo++)
    a262:	9b02      	ldr	r3, [sp, #8]
    a264:	3301      	adds	r3, #1
    a266:	9302      	str	r3, [sp, #8]
    a268:	9a02      	ldr	r2, [sp, #8]
    a26a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a26c:	4293      	cmp	r3, r2
    a26e:	f6bf ae64 	bge.w	9f3a <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x38a>
  for (_ode = _od_m; _ode <= _od_p; _ode++) {
    a272:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a274:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a276:	3301      	adds	r3, #1
    a278:	429a      	cmp	r2, r3
    a27a:	9319      	str	r3, [sp, #100]	; 0x64
    a27c:	f6bf ade3 	bge.w	9e46 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x296>
  for (_ohe = _oh_m; _ohe <= _oh_p; _ohe++)
    a280:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a282:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    a284:	3301      	adds	r3, #1
    a286:	429a      	cmp	r2, r3
    a288:	9318      	str	r3, [sp, #96]	; 0x60
    a28a:	f6bf adc1 	bge.w	9e10 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x260>
    }
  }
}
    a28e:	b02b      	add	sp, #172	; 0xac
    a290:	ecbd 8b10 	vpop	{d8-d15}
    a294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (p8 != 0) best_odw = radToArcsec(odw); else best_odw = best_pe/2.0;
    a298:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    a29c:	f20b 5374 	addw	r3, fp, #1396	; 0x574
    a2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    a2a4:	eeb1 7a67 	vneg.f32	s14, s15
    a2a8:	edc3 7a00 	vstr	s15, [r3]
        if (p8 != 0) best_ode = radToArcsec(ode); else best_ode = -best_pe/2.0;
    a2ac:	e786      	b.n	a1bc <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x60c>
      a = sum1/(num - 1); // was sqrt(sum1/(num - 1))
    a2ae:	3d01      	subs	r5, #1
    a2b0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; a2e4 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x734>
    a2b4:	ee07 5a90 	vmov	s15, r5
    a2b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    a2bc:	eef0 7a46 	vmov.f32	s15, s12
    a2c0:	eec6 6a07 	vdiv.f32	s13, s12, s14
    a2c4:	eeb0 6a66 	vmov.f32	s12, s13
    a2c8:	e707      	b.n	a0da <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x52a>
      max_dist = sqrtf(a + b); // was sq(a) + sq(b)
    a2ca:	eeb0 0a46 	vmov.f32	s0, s12
    a2ce:	f010 fdc5 	bl	1ae5c <sqrtf>
    a2d2:	eef0 7a40 	vmov.f32	s15, s0
    a2d6:	e70c      	b.n	a0f2 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)+0x542>
    a2d8:	7331ad79 	.word	0x7331ad79
    a2dc:	41092dc6 	.word	0x41092dc6
    a2e0:	2000634c 	.word	0x2000634c
    a2e4:	00000000 	.word	0x00000000

0000a2e8 <GeoAlign::autoModel(int)>:

void GeoAlign::autoModel(int n) {
    a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2ec:	4604      	mov	r4, r0
  modelIsReady = false;
    a2ee:	2300      	movs	r3, #0
  VLF("MSG: Align, calculate pointing model start");

  // how many stars?
  num = n;

  best_dist = 3600.0F*180.0F;
    a2f0:	48e5      	ldr	r0, [pc, #916]	; (a688 <GeoAlign::autoModel(int)+0x3a0>)
void GeoAlign::autoModel(int n) {
    a2f2:	b08b      	sub	sp, #44	; 0x2c
  best_dist = 3600.0F*180.0F;
    a2f4:	f504 62b4 	add.w	r2, r4, #1440	; 0x5a0
  modelIsReady = false;
    a2f8:	7023      	strb	r3, [r4, #0]
  num = n;
    a2fa:	f8c4 1550 	str.w	r1, [r4, #1360]	; 0x550
  best_deo  = 0.0F;
    a2fe:	f504 6bac 	add.w	fp, r4, #1376	; 0x560
  best_dist = 3600.0F*180.0F;
    a302:	6010      	str	r0, [r2, #0]
  best_pd   = 0.0F;
    a304:	f204 5a64 	addw	sl, r4, #1380	; 0x564
  best_deo  = 0.0F;
    a308:	ed9f 7ae0 	vldr	s14, [pc, #896]	; a68c <GeoAlign::autoModel(int)+0x3a4>
  best_pz   = 0.0F;
  best_pe   = 0.0F;
  best_tf   = 0.0F;
    a30c:	f504 62b0 	add.w	r2, r4, #1408	; 0x580
  best_pz   = 0.0F;
    a310:	f504 69ad 	add.w	r9, r4, #1384	; 0x568
  best_pe   = 0.0F;
    a314:	f204 586c 	addw	r8, r4, #1388	; 0x56c
  best_deo  = 0.0F;
    a318:	ed8b 7a00 	vstr	s14, [fp]
  best_ff   = 0.0F;
  best_df   = 0.0F;
  best_ode  = 0.0F;
  best_ohe  = 0.0F;
    a31c:	f504 60af 	add.w	r0, r4, #1400	; 0x578
  best_pd   = 0.0F;
    a320:	ed8a 7a00 	vstr	s14, [sl]

  // figure out the average Axis1 offset as a starting point
  ohe = 0;
    a324:	f204 55a4 	addw	r5, r4, #1444	; 0x5a4
  best_pz   = 0.0F;
    a328:	ed89 7a00 	vstr	s14, [r9]
  float diff;
  for (l = 0; l < num; l++) {
    a32c:	4299      	cmp	r1, r3
  best_pe   = 0.0F;
    a32e:	ed88 7a00 	vstr	s14, [r8]
  best_tf   = 0.0F;
    a332:	9207      	str	r2, [sp, #28]
    a334:	ed82 7a00 	vstr	s14, [r2]
  best_ff   = 0.0F;
    a338:	f504 62b1 	add.w	r2, r4, #1416	; 0x588
    a33c:	ed82 7a00 	vstr	s14, [r2]
    a340:	9209      	str	r2, [sp, #36]	; 0x24
  best_df   = 0.0F;
    a342:	f204 5284 	addw	r2, r4, #1412	; 0x584
    a346:	ed82 7a00 	vstr	s14, [r2]
    a34a:	9208      	str	r2, [sp, #32]
  best_ode  = 0.0F;
    a34c:	f204 527c 	addw	r2, r4, #1404	; 0x57c
    a350:	ed82 7a00 	vstr	s14, [r2]
  best_ohe  = 0.0F;
    a354:	ed80 7a00 	vstr	s14, [r0]
  ohe = 0;
    a358:	ed85 7a00 	vstr	s14, [r5]
  for (l = 0; l < num; l++) {
    a35c:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    a360:	dd2d      	ble.n	a3be <GeoAlign::autoModel(int)+0xd6>
    a362:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    a366:	4623      	mov	r3, r4
    diff = actual[l].ax1 - mount[l].ax1;
    if (diff >  Deg180) diff = diff - Deg360;
    a368:	ed9f 3bbf 	vldr	d3, [pc, #764]	; a668 <GeoAlign::autoModel(int)+0x380>
    a36c:	ed9f 4bc0 	vldr	d4, [pc, #768]	; a670 <GeoAlign::autoModel(int)+0x388>
    if (diff < -Deg180) diff = diff + Deg360;
    a370:	ed9f 5bc1 	vldr	d5, [pc, #772]	; a678 <GeoAlign::autoModel(int)+0x390>
    a374:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    diff = actual[l].ax1 - mount[l].ax1;
    a378:	edd3 6a01 	vldr	s13, [r3, #4]
  for (l = 0; l < num; l++) {
    a37c:	3330      	adds	r3, #48	; 0x30
    diff = actual[l].ax1 - mount[l].ax1;
    a37e:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
    a382:	ee77 7ae6 	vsub.f32	s15, s15, s13
    if (diff >  Deg180) diff = diff - Deg360;
    a386:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    a38a:	eeb4 6bc3 	vcmpe.f64	d6, d3
    a38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a392:	dd05      	ble.n	a3a0 <GeoAlign::autoModel(int)+0xb8>
    a394:	ee36 6b44 	vsub.f64	d6, d6, d4
    a398:	eef7 7bc6 	vcvt.f32.f64	s15, d6
    if (diff < -Deg180) diff = diff + Deg360;
    a39c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    a3a0:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3a8:	d503      	bpl.n	a3b2 <GeoAlign::autoModel(int)+0xca>
    a3aa:	ee36 6b04 	vadd.f64	d6, d6, d4
    a3ae:	eef7 7bc6 	vcvt.f32.f64	s15, d6
  for (l = 0; l < num; l++) {
    a3b2:	4293      	cmp	r3, r2
    ohe = ohe + diff;
    a3b4:	ee37 7a27 	vadd.f32	s14, s14, s15
  for (l = 0; l < num; l++) {
    a3b8:	d1de      	bne.n	a378 <GeoAlign::autoModel(int)+0x90>
    a3ba:	f8c4 1554 	str.w	r1, [r4, #1364]	; 0x554
  }
  ohe = ohe/num;
    a3be:	ee07 1a90 	vmov	s15, r1
  best_ohe = round(radToArcsec(ohe));
  best_ohw = best_ohe;
    a3c2:	f504 63ae 	add.w	r3, r4, #1392	; 0x570
  ohe = ohe/num;
    a3c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  best_ohw = best_ohe;
    a3ca:	9306      	str	r3, [sp, #24]
  best_ohe = round(radToArcsec(ohe));
    a3cc:	ed9f 5bac 	vldr	d5, [pc, #688]	; a680 <GeoAlign::autoModel(int)+0x398>
  ohe = ohe/num;
    a3d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
    a3d4:	edc5 7a00 	vstr	s15, [r5]
  best_ohe = round(radToArcsec(ohe));
    a3d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    a3dc:	ee27 7b05 	vmul.f64	d7, d7, d5
    a3e0:	feb8 7b47 	vrinta.f64	d7, d7
    a3e4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a3e8:	ed80 7a00 	vstr	s14, [r0]
  best_ohw = best_ohe;
    a3ec:	ed83 7a00 	vstr	s14, [r3]

  // fork flex or dec axis flex, as appropriate
  if (mountType == ALTAZM) { Ff = 0; Df = 0; } else
    a3f0:	f994 3544 	ldrsb.w	r3, [r4, #1348]	; 0x544
    a3f4:	2b03      	cmp	r3, #3
    a3f6:	f000 8201 	beq.w	a7fc <GeoAlign::autoModel(int)+0x514>
  if (mountType == FORK) { Ff = 1; Df = 0; } else { Ff = 0; Df = 1; }
    a3fa:	2b02      	cmp	r3, #2
    a3fc:	bf15      	itete	ne
    a3fe:	2300      	movne	r3, #0
    a400:	2301      	moveq	r3, #1
    a402:	2201      	movne	r2, #1
    a404:	2200      	moveq	r2, #0

  // only search for cone error if > 2 stars
  int Do = 0;
  if (num > 2) Do = 1;
    a406:	2902      	cmp	r1, #2

  // search, this can handle about 9 degrees of polar misalignment, and 4 degrees of cone error
  //              DoPdPzPeTfFf Df OdOh
  doSearch(16384,0 ,0,1,1,0, 0, 0,1,1);
    a408:	f04f 0700 	mov.w	r7, #0
    a40c:	f04f 0601 	mov.w	r6, #1
  if (mountType == ALTAZM) { Ff = 0; Df = 0; } else
    a410:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
  if (num > 2) Do = 1;
    a414:	bfd4      	ite	le
    a416:	2500      	movle	r5, #0
    a418:	2501      	movgt	r5, #1
  if (mountType == ALTAZM) { Ff = 0; Df = 0; } else
    a41a:	f8c4 255c 	str.w	r2, [r4, #1372]	; 0x55c
  doSearch(16384,0 ,0,1,1,0, 0, 0,1,1);
    a41e:	4633      	mov	r3, r6
    a420:	ed9f 0a9b 	vldr	s0, [pc, #620]	; a690 <GeoAlign::autoModel(int)+0x3a8>
    a424:	463a      	mov	r2, r7
    a426:	4639      	mov	r1, r7
    a428:	4620      	mov	r0, r4
    a42a:	9701      	str	r7, [sp, #4]
    a42c:	9600      	str	r6, [sp, #0]
    a42e:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a432:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a436:	f7ff fbbb 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  doSearch( 8192,Do,0,1,1,0, 0, 0,1,1);
    a43a:	ed9f 0a96 	vldr	s0, [pc, #600]	; a694 <GeoAlign::autoModel(int)+0x3ac>
    a43e:	4633      	mov	r3, r6
    a440:	463a      	mov	r2, r7
    a442:	4629      	mov	r1, r5
    a444:	4620      	mov	r0, r4
    a446:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a44a:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a44e:	e9cd 6700 	strd	r6, r7, [sp]
    a452:	f7ff fbad 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  doSearch( 4096,Do,0,1,1,0, 0, 0,1,1);
    a456:	ed9f 0a90 	vldr	s0, [pc, #576]	; a698 <GeoAlign::autoModel(int)+0x3b0>
    a45a:	4633      	mov	r3, r6
    a45c:	463a      	mov	r2, r7
    a45e:	4629      	mov	r1, r5
    a460:	4620      	mov	r0, r4
    a462:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a466:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a46a:	e9cd 6700 	strd	r6, r7, [sp]
    a46e:	f7ff fb9f 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  doSearch( 2048,Do,0,1,1,0, 0, 0,1,1);
    a472:	ed9f 0a8a 	vldr	s0, [pc, #552]	; a69c <GeoAlign::autoModel(int)+0x3b4>
    a476:	4633      	mov	r3, r6
    a478:	463a      	mov	r2, r7
    a47a:	4629      	mov	r1, r5
    a47c:	4620      	mov	r0, r4
    a47e:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a482:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a486:	e9cd 6700 	strd	r6, r7, [sp]
    a48a:	f7ff fb91 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  doSearch( 1024,Do,0,1,1,0, 0, 0,1,1);
    a48e:	ed9f 0a84 	vldr	s0, [pc, #528]	; a6a0 <GeoAlign::autoModel(int)+0x3b8>
    a492:	4633      	mov	r3, r6
    a494:	463a      	mov	r2, r7
    a496:	4629      	mov	r1, r5
    a498:	4620      	mov	r0, r4
    a49a:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a49e:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a4a2:	e9cd 6700 	strd	r6, r7, [sp]
    a4a6:	f7ff fb83 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  doSearch(  512,Do,0,1,1,0, 0, 0,1,1);
    a4aa:	4629      	mov	r1, r5
    a4ac:	ed9f 0a7d 	vldr	s0, [pc, #500]	; a6a4 <GeoAlign::autoModel(int)+0x3bc>
    a4b0:	4633      	mov	r3, r6
    a4b2:	463a      	mov	r2, r7
    a4b4:	4620      	mov	r0, r4
    a4b6:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a4ba:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a4be:	e9cd 6700 	strd	r6, r7, [sp]
    a4c2:	f7ff fb75 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  #ifdef HAL_SLOW_PROCESSOR
    doSearch(256,Do,0,1,1,0, 0, 0,1,1);
    doSearch(128,Do,0,1,1,0, 0, 0,1,1);
    doSearch( 64,Do,0,1,1,0, 0, 0,1,1);
  #else
    if (num > 4) {
    a4c6:	f8d4 1550 	ldr.w	r1, [r4, #1360]	; 0x550
    a4ca:	2904      	cmp	r1, #4
    a4cc:	f340 8133 	ble.w	a736 <GeoAlign::autoModel(int)+0x44e>
      doSearch(256,Do,1,1,1,0,Ff,Df,1,1);
    a4d0:	9701      	str	r7, [sp, #4]
    a4d2:	4633      	mov	r3, r6
    a4d4:	9600      	str	r6, [sp, #0]
    a4d6:	4629      	mov	r1, r5
    a4d8:	ed9f 0a74 	vldr	s0, [pc, #464]	; a6ac <GeoAlign::autoModel(int)+0x3c4>
    a4dc:	4620      	mov	r0, r4
    a4de:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a4e2:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a4e6:	9203      	str	r2, [sp, #12]
    a4e8:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a4ec:	9202      	str	r2, [sp, #8]
    a4ee:	4632      	mov	r2, r6
    a4f0:	f7ff fb5e 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
      doSearch(128,Do,1,1,1,1,Ff,Df,1,1);
    a4f4:	ed9f 0a6e 	vldr	s0, [pc, #440]	; a6b0 <GeoAlign::autoModel(int)+0x3c8>
    a4f8:	4633      	mov	r3, r6
    a4fa:	4629      	mov	r1, r5
    a4fc:	4620      	mov	r0, r4
    a4fe:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a502:	e9cd 6600 	strd	r6, r6, [sp]
    a506:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a50a:	9203      	str	r2, [sp, #12]
    a50c:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a510:	9202      	str	r2, [sp, #8]
    a512:	4632      	mov	r2, r6
    a514:	f7ff fb4c 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
      doSearch( 64,Do,1,1,1,1,Ff,Df,1,1);
    a518:	ed9f 0a66 	vldr	s0, [pc, #408]	; a6b4 <GeoAlign::autoModel(int)+0x3cc>
    a51c:	4633      	mov	r3, r6
    a51e:	4629      	mov	r1, r5
    a520:	4620      	mov	r0, r4
    a522:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a526:	e9cd 6600 	strd	r6, r6, [sp]
    a52a:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a52e:	9203      	str	r2, [sp, #12]
    a530:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a534:	9202      	str	r2, [sp, #8]
    a536:	4632      	mov	r2, r6
    a538:	f7ff fb3a 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
      #ifdef HAL_FAST_PROCESSOR
        doSearch( 32,Do,1,1,1,1,Ff,Df,1,1);
    a53c:	ed9f 0a5e 	vldr	s0, [pc, #376]	; a6b8 <GeoAlign::autoModel(int)+0x3d0>
    a540:	4633      	mov	r3, r6
    a542:	4629      	mov	r1, r5
    a544:	4620      	mov	r0, r4
    a546:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a54a:	e9cd 6600 	strd	r6, r6, [sp]
    a54e:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a552:	9203      	str	r2, [sp, #12]
    a554:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a558:	9202      	str	r2, [sp, #8]
    a55a:	4632      	mov	r2, r6
    a55c:	f7ff fb28 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
        doSearch( 16,Do,1,1,1,1,Ff,Df,1,1);
    a560:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
    a564:	4633      	mov	r3, r6
    a566:	4629      	mov	r1, r5
    a568:	4620      	mov	r0, r4
    a56a:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a56e:	e9cd 6600 	strd	r6, r6, [sp]
    a572:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a576:	9203      	str	r2, [sp, #12]
    a578:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a57c:	9202      	str	r2, [sp, #8]
    a57e:	4632      	mov	r2, r6
    a580:	f7ff fb16 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
        doSearch(  8,Do,1,1,1,1,Ff,Df,1,1);
    a584:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
    a588:	4633      	mov	r3, r6
    a58a:	4629      	mov	r1, r5
    a58c:	4620      	mov	r0, r4
    a58e:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a592:	e9cd 6600 	strd	r6, r6, [sp]
    a596:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a59a:	9203      	str	r2, [sp, #12]
    a59c:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a5a0:	9202      	str	r2, [sp, #8]
    a5a2:	4632      	mov	r2, r6
    a5a4:	f7ff fb04 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
        #ifdef HAL_VFAST_PROCESSOR
          doSearch(  4,Do,1,1,1,1,Ff,Df,1,1);
    a5a8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
    a5ac:	4629      	mov	r1, r5
    a5ae:	4633      	mov	r3, r6
    a5b0:	4620      	mov	r0, r4
    a5b2:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a5b6:	e9cd 6600 	strd	r6, r6, [sp]
    a5ba:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
    a5be:	9203      	str	r2, [sp, #12]
    a5c0:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
    a5c4:	9202      	str	r2, [sp, #8]
    a5c6:	4632      	mov	r2, r6
    a5c8:	f7ff faf2 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
  model.doCor = arcsecToRad(best_deo);
  model.pdCor = arcsecToRad(best_pd);
  model.azmCor = arcsecToRad(best_pz);
  model.altCor = arcsecToRad(best_pe);

  model.tfCor = arcsecToRad(best_tf);
    a5cc:	9b07      	ldr	r3, [sp, #28]
  model.pdCor = arcsecToRad(best_pd);
    a5ce:	f504 60a5 	add.w	r0, r4, #1320	; 0x528
  model.doCor = arcsecToRad(best_deo);
    a5d2:	ed9b 3a00 	vldr	s6, [fp]
    a5d6:	f204 5524 	addw	r5, r4, #1316	; 0x524
  model.pdCor = arcsecToRad(best_pd);
    a5da:	ed9a 4a00 	vldr	s8, [sl]
  model.azmCor = arcsecToRad(best_pz);
    a5de:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
    a5e2:	ed99 5a00 	vldr	s10, [r9]
  model.doCor = arcsecToRad(best_deo);
    a5e6:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
  model.altCor = arcsecToRad(best_pe);
    a5ea:	ed98 6a00 	vldr	s12, [r8]
  model.pdCor = arcsecToRad(best_pd);
    a5ee:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
  model.tfCor = arcsecToRad(best_tf);
    a5f2:	ed93 1a00 	vldr	s2, [r3]
  model.azmCor = arcsecToRad(best_pz);
    a5f6:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  model.altCor = arcsecToRad(best_pe);
    a5fa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a5fe:	f204 521c 	addw	r2, r4, #1308	; 0x51c
  model.tfCor = arcsecToRad(best_tf);
    a602:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
    a606:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
  if (mountType == FORK || mountType == ALTAZM) model.dfCor = arcsecToRad(best_ff); else model.dfCor = arcsecToRad(best_df);

  model.ax1Cor = arcsecToRad(best_ohw);
    a60a:	f204 5e14 	addw	lr, r4, #1300	; 0x514
  model.ax2Cor = arcsecToRad(best_odw);
    a60e:	f504 6ca3 	add.w	ip, r4, #1304	; 0x518

  model.hcp = 0;
    a612:	f204 5734 	addw	r7, r4, #1332	; 0x534
  model.hca = 0;
    a616:	f504 66a7 	add.w	r6, r4, #1336	; 0x538
  model.doCor = arcsecToRad(best_deo);
    a61a:	ed9f 7b19 	vldr	d7, [pc, #100]	; a680 <GeoAlign::autoModel(int)+0x398>
    a61e:	ee83 2b07 	vdiv.f64	d2, d3, d7
  model.pdCor = arcsecToRad(best_pd);
    a622:	ee84 3b07 	vdiv.f64	d3, d4, d7
  model.azmCor = arcsecToRad(best_pz);
    a626:	ee85 4b07 	vdiv.f64	d4, d5, d7
  model.altCor = arcsecToRad(best_pe);
    a62a:	ee86 5b07 	vdiv.f64	d5, d6, d7
  model.tfCor = arcsecToRad(best_tf);
    a62e:	ee81 6b07 	vdiv.f64	d6, d1, d7
  model.doCor = arcsecToRad(best_deo);
    a632:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
    a636:	ed85 2a00 	vstr	s4, [r5]
  model.dcp = 0;
    a63a:	f204 553c 	addw	r5, r4, #1340	; 0x53c
  model.pdCor = arcsecToRad(best_pd);
    a63e:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
    a642:	ed80 3a00 	vstr	s6, [r0]
  model.azmCor = arcsecToRad(best_pz);
    a646:	eeb7 4bc4 	vcvt.f32.f64	s8, d4

  // update status and exit
  modelIsReady = true;

  VLF("MSG: Align, calculate pointing model done");
  tasks.setDurationComplete(autoModelTask);
    a64a:	4817      	ldr	r0, [pc, #92]	; (a6a8 <GeoAlign::autoModel(int)+0x3c0>)
  model.ax1Cor = arcsecToRad(best_ohw);
    a64c:	ed9f 3b0c 	vldr	d3, [pc, #48]	; a680 <GeoAlign::autoModel(int)+0x398>
  model.azmCor = arcsecToRad(best_pz);
    a650:	ed81 4a00 	vstr	s8, [r1]
  model.dca = 0;
    a654:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
  model.altCor = arcsecToRad(best_pe);
    a658:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    a65c:	ed82 5a00 	vstr	s10, [r2]
  model.ax2Cor = arcsecToRad(best_odw);
    a660:	f204 5274 	addw	r2, r4, #1396	; 0x574
    a664:	e02a      	b.n	a6bc <GeoAlign::autoModel(int)+0x3d4>
    a666:	bf00      	nop
    a668:	54442d18 	.word	0x54442d18
    a66c:	400921fb 	.word	0x400921fb
    a670:	54442d18 	.word	0x54442d18
    a674:	401921fb 	.word	0x401921fb
    a678:	54442d18 	.word	0x54442d18
    a67c:	c00921fb 	.word	0xc00921fb
    a680:	7331ad79 	.word	0x7331ad79
    a684:	41092dc6 	.word	0x41092dc6
    a688:	491e3400 	.word	0x491e3400
    a68c:	00000000 	.word	0x00000000
    a690:	46800000 	.word	0x46800000
    a694:	46000000 	.word	0x46000000
    a698:	45800000 	.word	0x45800000
    a69c:	45000000 	.word	0x45000000
    a6a0:	44800000 	.word	0x44800000
    a6a4:	44000000 	.word	0x44000000
    a6a8:	2000634c 	.word	0x2000634c
    a6ac:	43800000 	.word	0x43800000
    a6b0:	43000000 	.word	0x43000000
    a6b4:	42800000 	.word	0x42800000
    a6b8:	42000000 	.word	0x42000000
  model.tfCor = arcsecToRad(best_tf);
    a6bc:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    a6c0:	ed83 6a00 	vstr	s12, [r3]
  if (mountType == FORK || mountType == ALTAZM) model.dfCor = arcsecToRad(best_ff); else model.dfCor = arcsecToRad(best_df);
    a6c4:	f894 3544 	ldrb.w	r3, [r4, #1348]	; 0x544
    a6c8:	3b02      	subs	r3, #2
    a6ca:	2b01      	cmp	r3, #1
    a6cc:	bf94      	ite	ls
    a6ce:	9b09      	ldrls	r3, [sp, #36]	; 0x24
    a6d0:	9b08      	ldrhi	r3, [sp, #32]
    a6d2:	ed93 5a00 	vldr	s10, [r3]
  model.ax1Cor = arcsecToRad(best_ohw);
    a6d6:	9b06      	ldr	r3, [sp, #24]
  if (mountType == FORK || mountType == ALTAZM) model.dfCor = arcsecToRad(best_ff); else model.dfCor = arcsecToRad(best_df);
    a6d8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    a6dc:	ee85 6b07 	vdiv.f64	d6, d5, d7
  model.ax1Cor = arcsecToRad(best_ohw);
    a6e0:	ed93 7a00 	vldr	s14, [r3]
  model.ax2Cor = arcsecToRad(best_odw);
    a6e4:	ed92 5a00 	vldr	s10, [r2]
    a6e8:	f204 522c 	addw	r2, r4, #1324	; 0x52c
  model.hcp = 0;
    a6ec:	2300      	movs	r3, #0
  model.ax2Cor = arcsecToRad(best_odw);
    a6ee:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
  model.ax1Cor = arcsecToRad(best_ohw);
    a6f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  if (mountType == FORK || mountType == ALTAZM) model.dfCor = arcsecToRad(best_ff); else model.dfCor = arcsecToRad(best_df);
    a6f6:	eef7 4bc6 	vcvt.f32.f64	s9, d6
  model.ax1Cor = arcsecToRad(best_ohw);
    a6fa:	ee87 6b03 	vdiv.f64	d6, d7, d3
    a6fe:	edc2 4a00 	vstr	s9, [r2]
  modelIsReady = true;
    a702:	2201      	movs	r2, #1
  model.ax2Cor = arcsecToRad(best_odw);
    a704:	ee85 7b03 	vdiv.f64	d7, d5, d3
  model.ax1Cor = arcsecToRad(best_ohw);
    a708:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    a70c:	ed8e 6a00 	vstr	s12, [lr]
  model.ax2Cor = arcsecToRad(best_odw);
    a710:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a714:	ed8c 7a00 	vstr	s14, [ip]
  model.hcp = 0;
    a718:	603b      	str	r3, [r7, #0]
  model.hca = 0;
    a71a:	6033      	str	r3, [r6, #0]
  model.dcp = 0;
    a71c:	602b      	str	r3, [r5, #0]
  model.dca = 0;
    a71e:	600b      	str	r3, [r1, #0]
  modelIsReady = true;
    a720:	7022      	strb	r2, [r4, #0]
  tasks.setDurationComplete(autoModelTask);
    a722:	f894 15c0 	ldrb.w	r1, [r4, #1472]	; 0x5c0
    a726:	f7fb fe33 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
  autoModelTask = 0;
    a72a:	2300      	movs	r3, #0
    a72c:	f884 35c0 	strb.w	r3, [r4, #1472]	; 0x5c0
}
    a730:	b00b      	add	sp, #44	; 0x2c
    a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      doSearch(256,Do,0,1,1,0, 0, 0,1,1);
    a736:	4633      	mov	r3, r6
    a738:	463a      	mov	r2, r7
    a73a:	4629      	mov	r1, r5
    a73c:	4620      	mov	r0, r4
    a73e:	ed1f 0a25 	vldr	s0, [pc, #-148]	; a6ac <GeoAlign::autoModel(int)+0x3c4>
    a742:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a746:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a74a:	e9cd 6700 	strd	r6, r7, [sp]
    a74e:	f7ff fa2f 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
      doSearch(128,Do,0,1,1,0, 0, 0,1,1);
    a752:	4633      	mov	r3, r6
    a754:	463a      	mov	r2, r7
    a756:	4629      	mov	r1, r5
    a758:	4620      	mov	r0, r4
    a75a:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; a6b0 <GeoAlign::autoModel(int)+0x3c8>
    a75e:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a762:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a766:	e9cd 6700 	strd	r6, r7, [sp]
    a76a:	f7ff fa21 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
      doSearch( 64,Do,0,1,1,0, 0, 0,1,1);
    a76e:	4633      	mov	r3, r6
    a770:	463a      	mov	r2, r7
    a772:	4629      	mov	r1, r5
    a774:	4620      	mov	r0, r4
    a776:	ed1f 0a31 	vldr	s0, [pc, #-196]	; a6b4 <GeoAlign::autoModel(int)+0x3cc>
    a77a:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a77e:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a782:	e9cd 6700 	strd	r6, r7, [sp]
    a786:	f7ff fa13 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
      doSearch( 32,Do,0,1,1,0, 0, 0,1,1);
    a78a:	4633      	mov	r3, r6
    a78c:	463a      	mov	r2, r7
    a78e:	4629      	mov	r1, r5
    a790:	4620      	mov	r0, r4
    a792:	ed1f 0a37 	vldr	s0, [pc, #-220]	; a6b8 <GeoAlign::autoModel(int)+0x3d0>
    a796:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a79a:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a79e:	e9cd 6700 	strd	r6, r7, [sp]
    a7a2:	f7ff fa05 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
        doSearch( 16,Do,0,1,1,0, 0, 0,1,1);
    a7a6:	4633      	mov	r3, r6
    a7a8:	463a      	mov	r2, r7
    a7aa:	4629      	mov	r1, r5
    a7ac:	4620      	mov	r0, r4
    a7ae:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
    a7b2:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a7b6:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a7ba:	e9cd 6700 	strd	r6, r7, [sp]
    a7be:	f7ff f9f7 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
        doSearch(  8,Do,0,1,1,0, 0, 0,1,1);
    a7c2:	4633      	mov	r3, r6
    a7c4:	463a      	mov	r2, r7
    a7c6:	4629      	mov	r1, r5
    a7c8:	4620      	mov	r0, r4
    a7ca:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
    a7ce:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a7d2:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a7d6:	e9cd 6700 	strd	r6, r7, [sp]
    a7da:	f7ff f9e9 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
          doSearch(  4,Do,0,1,1,0, 0, 0,1,1);
    a7de:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
    a7e2:	4629      	mov	r1, r5
    a7e4:	463a      	mov	r2, r7
    a7e6:	4633      	mov	r3, r6
    a7e8:	4620      	mov	r0, r4
    a7ea:	9701      	str	r7, [sp, #4]
    a7ec:	9600      	str	r6, [sp, #0]
    a7ee:	e9cd 6604 	strd	r6, r6, [sp, #16]
    a7f2:	e9cd 7702 	strd	r7, r7, [sp, #8]
    a7f6:	f7ff f9db 	bl	9bb0 <GeoAlign::doSearch(float, int, int, int, int, int, int, int, int, int)>
    a7fa:	e6e7      	b.n	a5cc <GeoAlign::autoModel(int)+0x2e4>
    a7fc:	2300      	movs	r3, #0
    a7fe:	461a      	mov	r2, r3
    a800:	e601      	b.n	a406 <GeoAlign::autoModel(int)+0x11e>
    a802:	bf00      	nop

0000a804 <autoModelWrapper()>:
void autoModelWrapper() { transform.align.autoModel(modelNumberStars); }
    a804:	4b02      	ldr	r3, [pc, #8]	; (a810 <autoModelWrapper()+0xc>)
    a806:	4803      	ldr	r0, [pc, #12]	; (a814 <autoModelWrapper()+0x10>)
    a808:	7819      	ldrb	r1, [r3, #0]
    a80a:	f7ff bd6d 	b.w	a2e8 <GeoAlign::autoModel(int)>
    a80e:	bf00      	nop
    a810:	20006aaf 	.word	0x20006aaf
    a814:	200064ac 	.word	0x200064ac

0000a818 <GeoAlign::observedPlaceToMount(Coordinate*)>:

void GeoAlign::observedPlaceToMount(Coordinate *coord) {
  if (!modelIsReady) return;
    a818:	7803      	ldrb	r3, [r0, #0]
    a81a:	2b00      	cmp	r3, #0
    a81c:	f000 8085 	beq.w	a92a <GeoAlign::observedPlaceToMount(Coordinate*)+0x112>

  float p = 1.0F;
  if (coord->pierSide == PIER_SIDE_WEST) p = -1.0F;
    a820:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    a824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    a828:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    a82c:	2b02      	cmp	r3, #2
void GeoAlign::observedPlaceToMount(Coordinate *coord) {
    a82e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  float ax1, ax2;
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    a832:	f990 8544 	ldrsb.w	r8, [r0, #1348]	; 0x544
    a836:	4604      	mov	r4, r0
    a838:	460f      	mov	r7, r1
void GeoAlign::observedPlaceToMount(Coordinate *coord) {
    a83a:	ed2d 8b10 	vpush	{d8-d15}
  if (coord->pierSide == PIER_SIDE_WEST) p = -1.0F;
    a83e:	fe47 daa6 	vseleq.f32	s27, s15, s13
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    a842:	f1b8 0f03 	cmp.w	r8, #3
void GeoAlign::observedPlaceToMount(Coordinate *coord) {
    a846:	b089      	sub	sp, #36	; 0x24
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    a848:	d03b      	beq.n	a8c2 <GeoAlign::observedPlaceToMount(Coordinate*)+0xaa>
  if (mountType == ALTALT) { ax1 = coord->aa1; ax2 = coord->aa2; } else { ax1 = coord->h; ax2 = coord->d; }
    a84a:	f1b8 0f04 	cmp.w	r8, #4
    a84e:	f000 8173 	beq.w	ab38 <GeoAlign::observedPlaceToMount(Coordinate*)+0x320>
    a852:	ed91 7b04 	vldr	d7, [r1, #16]
  
  if (ax2 >  Deg90) ax2 =  Deg90;
    a856:	ed9f 5bd2 	vldr	d5, [pc, #840]	; aba0 <GeoAlign::observedPlaceToMount(Coordinate*)+0x388>
  if (mountType == ALTALT) { ax1 = coord->aa1; ax2 = coord->aa2; } else { ax1 = coord->h; ax2 = coord->d; }
    a85a:	ed91 ab02 	vldr	d10, [r1, #8]
    a85e:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    a862:	eeb7 abca 	vcvt.f32.f64	s20, d10
  if (ax2 >  Deg90) ax2 =  Deg90;
    a866:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    a86a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a872:	f300 8143 	bgt.w	aafc <GeoAlign::observedPlaceToMount(Coordinate*)+0x2e4>
  if (ax2 < -Deg90) ax2 = -Deg90;
    a876:	ed9f 5bcc 	vldr	d5, [pc, #816]	; aba8 <GeoAlign::observedPlaceToMount(Coordinate*)+0x390>
    a87a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a882:	d553      	bpl.n	a92c <GeoAlign::observedPlaceToMount(Coordinate*)+0x114>
      a2 = ax2 + (ax2c + DFd + TFd + COSd);
    }
  }

  // finally, apply the index offsets
  a1 = a1 - model.ax1Cor;
    a884:	f204 5314 	addw	r3, r4, #1300	; 0x514
  a2 = a2 - model.ax2Cor*-p;
    a888:	f504 64a3 	add.w	r4, r4, #1304	; 0x518
    a88c:	ed9f 7aca 	vldr	s14, [pc, #808]	; abb8 <GeoAlign::observedPlaceToMount(Coordinate*)+0x3a0>
    a890:	edd4 7a00 	vldr	s15, [r4]
  a1 = a1 - model.ax1Cor;
    a894:	ed93 9a00 	vldr	s18, [r3]
  a2 = a2 - model.ax2Cor*-p;
    a898:	eead 7aa7 	vfma.f32	s14, s27, s15
  a1 = a1 - model.ax1Cor;
    a89c:	ee3a 9a49 	vsub.f32	s18, s20, s18

  if (mountType == ALTAZM) { coord->z = a1; coord->a = a2; } else
  if (mountType == ALTALT) { coord->aa1 = a1; coord->aa2 = a2; } else { coord->h = a1; coord->d = a2; }
    a8a0:	f1b8 0f04 	cmp.w	r8, #4
    a8a4:	f000 8168 	beq.w	ab78 <GeoAlign::observedPlaceToMount(Coordinate*)+0x360>
    a8a8:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    a8ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a8b0:	ed87 9b02 	vstr	d9, [r7, #8]
    a8b4:	ed87 7b04 	vstr	d7, [r7, #16]
}
    a8b8:	b009      	add	sp, #36	; 0x24
    a8ba:	ecbd 8b10 	vpop	{d8-d15}
    a8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    a8c2:	ed91 7b06 	vldr	d7, [r1, #24]
  if (ax2 >  Deg90) ax2 =  Deg90;
    a8c6:	ed9f 5bb6 	vldr	d5, [pc, #728]	; aba0 <GeoAlign::observedPlaceToMount(Coordinate*)+0x388>
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    a8ca:	ed91 ab08 	vldr	d10, [r1, #32]
    a8ce:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    a8d2:	eeb7 abca 	vcvt.f32.f64	s20, d10
  if (ax2 >  Deg90) ax2 =  Deg90;
    a8d6:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    a8da:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8e2:	f300 811a 	bgt.w	ab1a <GeoAlign::observedPlaceToMount(Coordinate*)+0x302>
  if (ax2 < -Deg90) ax2 = -Deg90;
    a8e6:	ed9f 5bb0 	vldr	d5, [pc, #704]	; aba8 <GeoAlign::observedPlaceToMount(Coordinate*)+0x390>
    a8ea:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8f2:	d51b      	bpl.n	a92c <GeoAlign::observedPlaceToMount(Coordinate*)+0x114>
  a1 = a1 - model.ax1Cor;
    a8f4:	f204 5314 	addw	r3, r4, #1300	; 0x514
  a2 = a2 - model.ax2Cor*-p;
    a8f8:	f504 64a3 	add.w	r4, r4, #1304	; 0x518
    a8fc:	ed9f 7aae 	vldr	s14, [pc, #696]	; abb8 <GeoAlign::observedPlaceToMount(Coordinate*)+0x3a0>
    a900:	edd4 7a00 	vldr	s15, [r4]
  a1 = a1 - model.ax1Cor;
    a904:	ed93 9a00 	vldr	s18, [r3]
  a2 = a2 - model.ax2Cor*-p;
    a908:	eead 7aa7 	vfma.f32	s14, s27, s15
  a1 = a1 - model.ax1Cor;
    a90c:	ee3a 9a49 	vsub.f32	s18, s20, s18
  if (mountType == ALTAZM) { coord->z = a1; coord->a = a2; } else
    a910:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    a914:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a918:	ed87 9b08 	vstr	d9, [r7, #32]
    a91c:	ed87 7b06 	vstr	d7, [r7, #24]
}
    a920:	b009      	add	sp, #36	; 0x24
    a922:	ecbd 8b10 	vpop	{d8-d15}
    a926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a92a:	4770      	bx	lr
  { return __builtin_fabsf(__x); }
    a92c:	eeb0 7ae9 	vabs.f32	s14, s19
  if (fabs(ax2) < degToRadF(89.98333333F)) {
    a930:	ed9f 5b9f 	vldr	d5, [pc, #636]	; abb0 <GeoAlign::observedPlaceToMount(Coordinate*)+0x398>
    a934:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a938:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a940:	f140 8127 	bpl.w	ab92 <GeoAlign::observedPlaceToMount(Coordinate*)+0x37a>
      float DOh = model.doCor*(1.0F/cosAx2)*p;
    a944:	f204 5324 	addw	r3, r4, #1316	; 0x524
      float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    a948:	f504 61a5 	add.w	r1, r4, #1320	; 0x528
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    a94c:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    a950:	f1a8 0602 	sub.w	r6, r8, #2
      float DOh = model.doCor*(1.0F/cosAx2)*p;
    a954:	edd3 7a00 	vldr	s15, [r3]
      float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    a958:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
      float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    a95c:	ed91 ca00 	vldr	s24, [r1]
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    a960:	eef0 8a69 	vmov.f32	s17, s19
      float DOh = model.doCor*(1.0F/cosAx2)*p;
    a964:	edcd 7a01 	vstr	s15, [sp, #4]
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    a968:	eeb0 9a4a 	vmov.f32	s18, s20
      float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    a96c:	eef1 7a4c 	vneg.f32	s15, s24
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    a970:	ed92 da00 	vldr	s26, [r2]
      float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    a974:	ed93 ba00 	vldr	s22, [r3]
    a978:	f504 62a9 	add.w	r2, r4, #1352	; 0x548
      float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    a97c:	f204 534c 	addw	r3, r4, #1356	; 0x54c
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    a980:	b2f6      	uxtb	r6, r6
      float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    a982:	edcd 7a02 	vstr	s15, [sp, #8]
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    a986:	eef1 7a4d 	vneg.f32	s15, s26
      float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    a98a:	edd2 ba00 	vldr	s23, [r2]
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    a98e:	f204 521c 	addw	r2, r4, #1308	; 0x51c
      float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    a992:	edd3 ca00 	vldr	s25, [r3]
      float COSh = cos(a1 + model.hcp)*model.hca*p;
    a996:	f204 5334 	addw	r3, r4, #1332	; 0x534
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    a99a:	edd2 aa00 	vldr	s21, [r2]
      float COSh = cos(a1 + model.hcp)*model.hca*p;
    a99e:	f504 62a7 	add.w	r2, r4, #1336	; 0x538
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    a9a2:	edcd 7a03 	vstr	s15, [sp, #12]
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    a9a6:	2503      	movs	r5, #3
      float COSh = cos(a1 + model.hcp)*model.hca*p;
    a9a8:	edd3 7a00 	vldr	s15, [r3]
      float COSd = cos(a2 + model.dcp)*model.dca*p;
    a9ac:	f204 533c 	addw	r3, r4, #1340	; 0x53c
    a9b0:	f204 592c 	addw	r9, r4, #1324	; 0x52c
      float COSh = cos(a1 + model.hcp)*model.hca*p;
    a9b4:	edcd 7a04 	vstr	s15, [sp, #16]
    a9b8:	edd2 7a00 	vldr	s15, [r2]
    a9bc:	edcd 7a05 	vstr	s15, [sp, #20]
      float COSd = cos(a2 + model.dcp)*model.dca*p;
    a9c0:	edd3 7a00 	vldr	s15, [r3]
    a9c4:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
    a9c8:	edcd 7a06 	vstr	s15, [sp, #24]
    a9cc:	edd3 7a00 	vldr	s15, [r3]
    a9d0:	edcd 7a07 	vstr	s15, [sp, #28]
      float sinAx2 = sinf(a2);
    a9d4:	eeb0 0a68 	vmov.f32	s0, s17
    a9d8:	f00f fe42 	bl	1a660 <sinf>
    a9dc:	eef0 fa40 	vmov.f32	s31, s0
      float cosAx2 = cosf(a2);
    a9e0:	eeb0 0a68 	vmov.f32	s0, s17
    a9e4:	f00f ff40 	bl	1a868 <cosf>
    a9e8:	eef0 ea40 	vmov.f32	s29, s0
      float sinAx1 = sinf(a1);
    a9ec:	eeb0 0a49 	vmov.f32	s0, s18
    a9f0:	f00f fe36 	bl	1a660 <sinf>
    a9f4:	eeb0 ea40 	vmov.f32	s28, s0
      float cosAx1 = cosf(a1);
    a9f8:	eeb0 0a49 	vmov.f32	s0, s18
    a9fc:	f00f ff34 	bl	1a868 <cosf>
      float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    aa00:	ee8f 3aae 	vdiv.f32	s6, s31, s29
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    aa04:	2e01      	cmp	r6, #1
      float DOh = model.doCor*(1.0F/cosAx2)*p;
    aa06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
      float cosAx1 = cosf(a1);
    aa0a:	eef0 4a40 	vmov.f32	s9, s0
      float DOh = model.doCor*(1.0F/cosAx2)*p;
    aa0e:	ee87 4aae 	vdiv.f32	s8, s15, s29
      float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    aa12:	eddd 7a02 	vldr	s15, [sp, #8]
    aa16:	ee67 7a83 	vmul.f32	s15, s15, s6
    aa1a:	ee27 caad 	vmul.f32	s24, s15, s27
      float DOh = model.doCor*(1.0F/cosAx2)*p;
    aa1e:	eddd 7a01 	vldr	s15, [sp, #4]
    aa22:	ee27 5a84 	vmul.f32	s10, s15, s8
    aa26:	ee25 fa2d 	vmul.f32	s30, s10, s27
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    aa2a:	d960      	bls.n	aaee <GeoAlign::observedPlaceToMount(Coordinate*)+0x2d6>
    aa2c:	ee6b 5a80 	vmul.f32	s11, s23, s0
    aa30:	ed99 8a00 	vldr	s16, [r9]
    aa34:	eef0 2a65 	vmov.f32	s5, s11
    aa38:	eee3 2a2c 	vfma.f32	s5, s6, s25
    aa3c:	ee28 8a62 	vnmul.f32	s16, s16, s5
      float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    aa40:	ee2e 6aec 	vnmul.f32	s12, s29, s25
  { return __builtin_cosf(__x); }
    aa44:	eddd 7a04 	vldr	s15, [sp, #16]
      float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    aa48:	ee2b 7a8e 	vmul.f32	s14, s23, s28
    aa4c:	ee37 0a89 	vadd.f32	s0, s15, s18
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    aa50:	eddd 7a03 	vldr	s15, [sp, #12]
      float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    aa54:	eeaf 6aa5 	vfma.f32	s12, s31, s11
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    aa58:	ee6a 5a8e 	vmul.f32	s11, s21, s28
    aa5c:	ee67 2aa4 	vmul.f32	s5, s15, s9
      float ax2c = +model.azmCor*sinAx1                 + model.altCor*cosAx1;
    aa60:	ee2a 9aa4 	vmul.f32	s18, s21, s9
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    aa64:	ee65 5a83 	vmul.f32	s11, s11, s6
      float ax2c = +model.azmCor*sinAx1                 + model.altCor*cosAx1;
    aa68:	eead 9a0e 	vfma.f32	s18, s26, s28
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    aa6c:	eee3 5a22 	vfma.f32	s11, s6, s5
      float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    aa70:	eef0 ea46 	vmov.f32	s29, s12
      float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    aa74:	ee27 ea04 	vmul.f32	s28, s14, s8
      a2 = ax2 + (ax2c + DFd + TFd + COSd);
    aa78:	ee38 8a09 	vadd.f32	s16, s16, s18
      float ax1c = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    aa7c:	eef0 fa65 	vmov.f32	s31, s11
    aa80:	f00f fef2 	bl	1a868 <cosf>
    aa84:	eddd 7a06 	vldr	s15, [sp, #24]
    aa88:	eef0 5a40 	vmov.f32	s11, s0
      a2 = ax2 + (ax2c + DFd + TFd + COSd);
    aa8c:	eeab 8a2e 	vfma.f32	s16, s22, s29
    aa90:	ee37 0aa8 	vadd.f32	s0, s15, s17
      float COSh = cos(a1 + model.hcp)*model.hca*p;
    aa94:	eddd 7a05 	vldr	s15, [sp, #20]
    aa98:	ee67 8aa5 	vmul.f32	s17, s15, s11
    aa9c:	f00f fee4 	bl	1a868 <cosf>
      a1 = ax1 + (ax1c + PDh + DOh + TFh + COSh);
    aaa0:	ee7c 7a2f 	vadd.f32	s15, s24, s31
    for (int pass = 0; pass < 3; pass++) {
    aaa4:	3d01      	subs	r5, #1
      a1 = ax1 + (ax1c + PDh + DOh + TFh + COSh);
    aaa6:	ee77 7a8f 	vadd.f32	s15, s15, s30
    aaaa:	eeeb 7a0e 	vfma.f32	s15, s22, s28
    aaae:	eee8 7aad 	vfma.f32	s15, s17, s27
    aab2:	ee37 9a8a 	vadd.f32	s18, s15, s20
      float COSd = cos(a2 + model.dcp)*model.dca*p;
    aab6:	eddd 7a07 	vldr	s15, [sp, #28]
    aaba:	ee27 0a80 	vmul.f32	s0, s15, s0
      a2 = ax2 + (ax2c + DFd + TFd + COSd);
    aabe:	eea0 8a2d 	vfma.f32	s16, s0, s27
    aac2:	ee78 8a29 	vadd.f32	s17, s16, s19
    for (int pass = 0; pass < 3; pass++) {
    aac6:	d185      	bne.n	a9d4 <GeoAlign::observedPlaceToMount(Coordinate*)+0x1bc>
  a1 = a1 - model.ax1Cor;
    aac8:	f204 5314 	addw	r3, r4, #1300	; 0x514
  a2 = a2 - model.ax2Cor*-p;
    aacc:	f504 64a3 	add.w	r4, r4, #1304	; 0x518
  if (mountType == ALTAZM) { coord->z = a1; coord->a = a2; } else
    aad0:	f1b8 0f03 	cmp.w	r8, #3
  a1 = a1 - model.ax1Cor;
    aad4:	ed93 7a00 	vldr	s14, [r3]
  a2 = a2 - model.ax2Cor*-p;
    aad8:	edd4 7a00 	vldr	s15, [r4]
  a1 = a1 - model.ax1Cor;
    aadc:	ee39 9a47 	vsub.f32	s18, s18, s14
  a2 = a2 - model.ax2Cor*-p;
    aae0:	eeb0 7a68 	vmov.f32	s14, s17
    aae4:	eea7 7aad 	vfma.f32	s14, s15, s27
  if (mountType == ALTAZM) { coord->z = a1; coord->a = a2; } else
    aae8:	f47f aeda 	bne.w	a8a0 <GeoAlign::observedPlaceToMount(Coordinate*)+0x88>
    aaec:	e710      	b.n	a910 <GeoAlign::observedPlaceToMount(Coordinate*)+0xf8>
      if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    aaee:	ed99 8a00 	vldr	s16, [r9]
    aaf2:	ee6b 5a80 	vmul.f32	s11, s23, s0
    aaf6:	ee20 8a08 	vmul.f32	s16, s0, s16
    aafa:	e7a1      	b.n	aa40 <GeoAlign::observedPlaceToMount(Coordinate*)+0x228>
  a1 = a1 - model.ax1Cor;
    aafc:	f200 5314 	addw	r3, r0, #1300	; 0x514
  a2 = a2 - model.ax2Cor*-p;
    ab00:	f500 64a3 	add.w	r4, r0, #1304	; 0x518
    ab04:	ed9f 7a2d 	vldr	s14, [pc, #180]	; abbc <GeoAlign::observedPlaceToMount(Coordinate*)+0x3a4>
  a1 = a1 - model.ax1Cor;
    ab08:	ed93 9a00 	vldr	s18, [r3]
  a2 = a2 - model.ax2Cor*-p;
    ab0c:	edd4 7a00 	vldr	s15, [r4]
  a1 = a1 - model.ax1Cor;
    ab10:	ee3a 9a49 	vsub.f32	s18, s20, s18
  a2 = a2 - model.ax2Cor*-p;
    ab14:	eead 7aa7 	vfma.f32	s14, s27, s15
  if (mountType == ALTALT) { coord->aa1 = a1; coord->aa2 = a2; } else { coord->h = a1; coord->d = a2; }
    ab18:	e6c6      	b.n	a8a8 <GeoAlign::observedPlaceToMount(Coordinate*)+0x90>
  a1 = a1 - model.ax1Cor;
    ab1a:	f200 5314 	addw	r3, r0, #1300	; 0x514
  a2 = a2 - model.ax2Cor*-p;
    ab1e:	f500 64a3 	add.w	r4, r0, #1304	; 0x518
    ab22:	ed9f 7a26 	vldr	s14, [pc, #152]	; abbc <GeoAlign::observedPlaceToMount(Coordinate*)+0x3a4>
  a1 = a1 - model.ax1Cor;
    ab26:	ed93 9a00 	vldr	s18, [r3]
  a2 = a2 - model.ax2Cor*-p;
    ab2a:	edd4 7a00 	vldr	s15, [r4]
  a1 = a1 - model.ax1Cor;
    ab2e:	ee3a 9a49 	vsub.f32	s18, s20, s18
  a2 = a2 - model.ax2Cor*-p;
    ab32:	eead 7aa7 	vfma.f32	s14, s27, s15
  if (mountType == ALTAZM) { coord->z = a1; coord->a = a2; } else
    ab36:	e6eb      	b.n	a910 <GeoAlign::observedPlaceToMount(Coordinate*)+0xf8>
  if (mountType == ALTALT) { ax1 = coord->aa1; ax2 = coord->aa2; } else { ax1 = coord->h; ax2 = coord->d; }
    ab38:	ed91 7b0c 	vldr	d7, [r1, #48]	; 0x30
  if (ax2 >  Deg90) ax2 =  Deg90;
    ab3c:	ed9f 5b18 	vldr	d5, [pc, #96]	; aba0 <GeoAlign::observedPlaceToMount(Coordinate*)+0x388>
  if (mountType == ALTALT) { ax1 = coord->aa1; ax2 = coord->aa2; } else { ax1 = coord->h; ax2 = coord->d; }
    ab40:	ed91 ab0a 	vldr	d10, [r1, #40]	; 0x28
    ab44:	eef7 9bc7 	vcvt.f32.f64	s19, d7
    ab48:	eeb7 abca 	vcvt.f32.f64	s20, d10
  if (ax2 >  Deg90) ax2 =  Deg90;
    ab4c:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
    ab50:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ab54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ab58:	f77f ae8d 	ble.w	a876 <GeoAlign::observedPlaceToMount(Coordinate*)+0x5e>
  a2 = a2 - model.ax2Cor*-p;
    ab5c:	f500 64a3 	add.w	r4, r0, #1304	; 0x518
    ab60:	ed9f 7a16 	vldr	s14, [pc, #88]	; abbc <GeoAlign::observedPlaceToMount(Coordinate*)+0x3a4>
  a1 = a1 - model.ax1Cor;
    ab64:	f200 5314 	addw	r3, r0, #1300	; 0x514
  a2 = a2 - model.ax2Cor*-p;
    ab68:	edd4 7a00 	vldr	s15, [r4]
  a1 = a1 - model.ax1Cor;
    ab6c:	ed93 9a00 	vldr	s18, [r3]
  a2 = a2 - model.ax2Cor*-p;
    ab70:	eead 7aa7 	vfma.f32	s14, s27, s15
  a1 = a1 - model.ax1Cor;
    ab74:	ee3a 9a49 	vsub.f32	s18, s20, s18
  if (mountType == ALTALT) { coord->aa1 = a1; coord->aa2 = a2; } else { coord->h = a1; coord->d = a2; }
    ab78:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
    ab7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    ab80:	ed87 9b0a 	vstr	d9, [r7, #40]	; 0x28
    ab84:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
}
    ab88:	b009      	add	sp, #36	; 0x24
    ab8a:	ecbd 8b10 	vpop	{d8-d15}
    ab8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ab92:	eef0 8a69 	vmov.f32	s17, s19
    ab96:	eeb0 9a4a 	vmov.f32	s18, s20
    ab9a:	e795      	b.n	aac8 <GeoAlign::observedPlaceToMount(Coordinate*)+0x2b0>
    ab9c:	f3af 8000 	nop.w
    aba0:	54442d15 	.word	0x54442d15
    aba4:	3ff921fb 	.word	0x3ff921fb
    aba8:	54442d15 	.word	0x54442d15
    abac:	bff921fb 	.word	0xbff921fb
    abb0:	39f4a6ae 	.word	0x39f4a6ae
    abb4:	3ff920ca 	.word	0x3ff920ca
    abb8:	bfc90fdb 	.word	0xbfc90fdb
    abbc:	3fc90fdb 	.word	0x3fc90fdb

0000abc0 <GeoAlign::mountToObservedPlace(Coordinate*)>:

void GeoAlign::mountToObservedPlace(Coordinate *coord) {
  if (!modelIsReady) return;
    abc0:	7803      	ldrb	r3, [r0, #0]
    abc2:	2b00      	cmp	r3, #0
    abc4:	d07f      	beq.n	acc6 <GeoAlign::mountToObservedPlace(Coordinate*)+0x106>

  float p = 1.0F;
  if (coord->pierSide == PIER_SIDE_WEST) p = -1.0F;
    abc6:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    abca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
void GeoAlign::mountToObservedPlace(Coordinate *coord) {
    abce:	b570      	push	{r4, r5, r6, lr}
    abd0:	ed2d 8b0c 	vpush	{d8-d13}
  if (coord->pierSide == PIER_SIDE_WEST) p = -1.0F;
    abd4:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    abd8:	2b02      	cmp	r3, #2

  float ax1, ax2;
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    abda:	f990 6544 	ldrsb.w	r6, [r0, #1348]	; 0x544
    abde:	4604      	mov	r4, r0
    abe0:	460d      	mov	r5, r1
  if (coord->pierSide == PIER_SIDE_WEST) p = -1.0F;
    abe2:	fe4a 5a27 	vseleq.f32	s11, s20, s15
    abe6:	fe07 aa8a 	vseleq.f32	s20, s15, s20
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    abea:	2e03      	cmp	r6, #3
    abec:	d062      	beq.n	acb4 <GeoAlign::mountToObservedPlace(Coordinate*)+0xf4>
  if (mountType == ALTALT) { ax1 = coord->aa1; ax2 = coord->aa2; } else { ax1 = coord->h; ax2 = coord->d; }
    abee:	2e04      	cmp	r6, #4
    abf0:	f000 8194 	beq.w	af1c <GeoAlign::mountToObservedPlace(Coordinate*)+0x35c>
    abf4:	ed91 0b02 	vldr	d0, [r1, #8]
    abf8:	ed91 6b04 	vldr	d6, [r1, #16]
    abfc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    ac00:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  
  ax1 = ax1 + model.ax1Cor;
  ax2 = ax2 + model.ax2Cor*-p;
    ac04:	f504 62a3 	add.w	r2, r4, #1304	; 0x518
  ax1 = ax1 + model.ax1Cor;
    ac08:	f204 5314 	addw	r3, r4, #1300	; 0x514
  ax2 = ax2 + model.ax2Cor*-p;
    ac0c:	ed92 5a00 	vldr	s10, [r2]
  ax1 = ax1 + model.ax1Cor;
    ac10:	edd3 6a00 	vldr	s13, [r3]
  ax2 = ax2 + model.ax2Cor*-p;
    ac14:	eea5 6a25 	vfma.f32	s12, s10, s11
  ax1 = ax1 + model.ax1Cor;
    ac18:	ee70 8a26 	vadd.f32	s17, s0, s13
  
  if (ax2 >  Deg90) ax2 =  Deg90;
    ac1c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; af30 <GeoAlign::mountToObservedPlace(Coordinate*)+0x370>
  ax2 = ax2 + model.ax2Cor*-p;
    ac20:	eef0 9a46 	vmov.f32	s19, s12
  if (ax2 >  Deg90) ax2 =  Deg90;
    ac24:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    ac28:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac30:	f300 8102 	bgt.w	ae38 <GeoAlign::mountToObservedPlace(Coordinate*)+0x278>
  if (ax2 < -Deg90) ax2 = -Deg90;
    ac34:	ed9f 7bc0 	vldr	d7, [pc, #768]	; af38 <GeoAlign::mountToObservedPlace(Coordinate*)+0x378>
    ac38:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac40:	d542      	bpl.n	acc8 <GeoAlign::mountToObservedPlace(Coordinate*)+0x108>
    ac42:	ed9f 7bbf 	vldr	d7, [pc, #764]	; af40 <GeoAlign::mountToObservedPlace(Coordinate*)+0x380>
  }

  if (ax2 >  Deg90) ax2 =  Deg90;
  if (ax2 < -Deg90) ax2 = -Deg90;

  if (mountType == ALTAZM) {
    ac46:	2e03      	cmp	r6, #3
    while (ax1 >  Deg360) ax1 -= Deg360;
    ac48:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
  if (mountType == ALTAZM) {
    ac4c:	f000 80fb 	beq.w	ae46 <GeoAlign::mountToObservedPlace(Coordinate*)+0x286>
    while (ax1 < -Deg360) ax1 += Deg360;
    coord->z = ax1;
    coord->a = ax2;
  } else
  if (mountType == ALTALT) {
    ac50:	2e04      	cmp	r6, #4
    ac52:	f000 8136 	beq.w	aec2 <GeoAlign::mountToObservedPlace(Coordinate*)+0x302>
    while (ax1 >  Deg360) ax1 -= Deg360;
    while (ax1 < -Deg360) ax1 += Deg360;
    coord->aa1 = ax1;
    coord->aa2 = ax2;
  } else {
    while (ax1 >  Deg180) ax1 -= Deg360;
    ac56:	ed9f 6bbc 	vldr	d6, [pc, #752]	; af48 <GeoAlign::mountToObservedPlace(Coordinate*)+0x388>
    ac5a:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ac5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac62:	dd0c      	ble.n	ac7e <GeoAlign::mountToObservedPlace(Coordinate*)+0xbe>
    ac64:	ed9f 5bba 	vldr	d5, [pc, #744]	; af50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x390>
    ac68:	ee30 0b45 	vsub.f64	d0, d0, d5
    ac6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    ac70:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    ac74:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ac78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac7c:	dcf4      	bgt.n	ac68 <GeoAlign::mountToObservedPlace(Coordinate*)+0xa8>
    while (ax1 < -Deg180) ax1 += Deg360;
    ac7e:	ed9f 6bb6 	vldr	d6, [pc, #728]	; af58 <GeoAlign::mountToObservedPlace(Coordinate*)+0x398>
    ac82:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ac86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac8a:	d50c      	bpl.n	aca6 <GeoAlign::mountToObservedPlace(Coordinate*)+0xe6>
    ac8c:	ed9f 5bb0 	vldr	d5, [pc, #704]	; af50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x390>
    ac90:	ee30 0b05 	vadd.f64	d0, d0, d5
    ac94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    ac98:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    ac9c:	eeb4 0bc6 	vcmpe.f64	d0, d6
    aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aca4:	d4f4      	bmi.n	ac90 <GeoAlign::mountToObservedPlace(Coordinate*)+0xd0>
    coord->h = ax1;
    coord->d = ax2;
  }
}
    aca6:	ecbd 8b0c 	vpop	{d8-d13}
    coord->h = ax1;
    acaa:	ed85 0b02 	vstr	d0, [r5, #8]
    coord->d = ax2;
    acae:	ed85 7b04 	vstr	d7, [r5, #16]
}
    acb2:	bd70      	pop	{r4, r5, r6, pc}
  if (mountType == ALTAZM) { ax1 = coord->z; ax2 = coord->a; } else
    acb4:	ed91 0b08 	vldr	d0, [r1, #32]
    acb8:	ed91 6b06 	vldr	d6, [r1, #24]
    acbc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    acc0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    acc4:	e79e      	b.n	ac04 <GeoAlign::mountToObservedPlace(Coordinate*)+0x44>
    acc6:	4770      	bx	lr
  { return __builtin_fabsf(__x); }
    acc8:	eeb0 7ae9 	vabs.f32	s14, s19
  if (fabs(ax2) < degToRadF(89.98333333F)) {
    accc:	ed9f 5ba4 	vldr	d5, [pc, #656]	; af60 <GeoAlign::mountToObservedPlace(Coordinate*)+0x3a0>
    acd0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    acd4:	eeb4 7bc5 	vcmpe.f64	d7, d5
    acd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acdc:	f140 8099 	bpl.w	ae12 <GeoAlign::mountToObservedPlace(Coordinate*)+0x252>
    float sinAx2 = sinf(ax2);
    ace0:	eeb0 0a69 	vmov.f32	s0, s19
    ace4:	f00f fcbc 	bl	1a660 <sinf>
    ace8:	eeb0 ba40 	vmov.f32	s22, s0
    float cosAx2 = cosf(ax2);
    acec:	eeb0 0a69 	vmov.f32	s0, s19
    acf0:	f00f fdba 	bl	1a868 <cosf>
    acf4:	eeb0 9a40 	vmov.f32	s18, s0
    float sinAx1 = sinf(ax1);
    acf8:	eeb0 0a68 	vmov.f32	s0, s17
    acfc:	f00f fcb0 	bl	1a660 <sinf>
    ad00:	eef0 ba40 	vmov.f32	s23, s0
    float cosAx1 = cosf(ax1);
    ad04:	eeb0 0a68 	vmov.f32	s0, s17
    ad08:	f00f fdae 	bl	1a868 <cosf>
    float DOh = model.doCor*(1.0F/cosAx2)*p;
    ad0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    ad10:	ee8b 6a09 	vdiv.f32	s12, s22, s18
    ad14:	f504 63a5 	add.w	r3, r4, #1320	; 0x528
    float DOh = model.doCor*(1.0F/cosAx2)*p;
    ad18:	f204 5224 	addw	r2, r4, #1316	; 0x524
    float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    ad1c:	ed93 8a00 	vldr	s16, [r3]
    if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    ad20:	1eb3      	subs	r3, r6, #2
    ad22:	b2db      	uxtb	r3, r3
    float DOh = model.doCor*(1.0F/cosAx2)*p;
    ad24:	ee87 5a89 	vdiv.f32	s10, s15, s18
    ad28:	edd2 7a00 	vldr	s15, [r2]
    if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    ad2c:	2b01      	cmp	r3, #1
    float cosAx1 = cosf(ax1);
    ad2e:	eeb0 7a40 	vmov.f32	s14, s0
    float PDh = -model.pdCor*(sinAx2/cosAx2)*p;
    ad32:	ee28 8a46 	vnmul.f32	s16, s16, s12
    ad36:	ee28 8a0a 	vmul.f32	s16, s16, s20
    float DOh = model.doCor*(1.0F/cosAx2)*p;
    ad3a:	ee65 7a27 	vmul.f32	s15, s10, s15
    ad3e:	ee27 da8a 	vmul.f32	s26, s15, s20
    if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    ad42:	f240 80ad 	bls.w	aea0 <GeoAlign::mountToObservedPlace(Coordinate*)+0x2e0>
    ad46:	f504 62a9 	add.w	r2, r4, #1352	; 0x548
    ad4a:	f204 534c 	addw	r3, r4, #1356	; 0x54c
    ad4e:	edd2 6a00 	vldr	s13, [r2]
    ad52:	edd3 5a00 	vldr	s11, [r3]
    ad56:	f204 532c 	addw	r3, r4, #1324	; 0x52c
    ad5a:	ee66 4a80 	vmul.f32	s9, s13, s0
    ad5e:	edd3 7a00 	vldr	s15, [r3]
    ad62:	eeb0 4a64 	vmov.f32	s8, s9
    ad66:	eea6 4a25 	vfma.f32	s8, s12, s11
    ad6a:	ee67 aac4 	vnmul.f32	s21, s15, s8
    float a1 = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    ad6e:	f204 521c 	addw	r2, r4, #1308	; 0x51c
    ad72:	f504 63a4 	add.w	r3, r4, #1312	; 0x520
    float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    ad76:	ee6b 6aa6 	vmul.f32	s13, s23, s13
    float a1 = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    ad7a:	edd2 7a00 	vldr	s15, [r2]
    float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    ad7e:	ee25 cac9 	vnmul.f32	s24, s11, s18
    float a1 = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    ad82:	edd3 5a00 	vldr	s11, [r3]
    float COSh = cos(a1 + model.hcp)*model.hca*p;
    ad86:	f204 5234 	addw	r2, r4, #1332	; 0x534
    float a1 = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    ad8a:	ee27 9aab 	vmul.f32	s18, s15, s23
    float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    ad8e:	f504 63a6 	add.w	r3, r4, #1328	; 0x530
    float TFd = model.tfCor*(cosLat*cosAx1*sinAx2 - sinLat*cosAx2);
    ad92:	eeab ca24 	vfma.f32	s24, s22, s9
    float COSh = cos(a1 + model.hcp)*model.hca*p;
    ad96:	ed92 0a00 	vldr	s0, [r2]
    float TFh = model.tfCor*(cosLat*sinAx1*(1.0F/cosAx2));
    ad9a:	ee26 ba85 	vmul.f32	s22, s13, s10
    ad9e:	edd3 da00 	vldr	s27, [r3]
    float a1 = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    ada2:	ee65 6ac7 	vnmul.f32	s13, s11, s14
    ada6:	ee29 9a06 	vmul.f32	s18, s18, s12
    float a2 = +model.azmCor*sinAx1                 + model.altCor*cosAx1;
    adaa:	ee67 7a87 	vmul.f32	s15, s15, s14
    float a1 = -model.azmCor*cosAx1*(sinAx2/cosAx2) + model.altCor*sinAx1*(sinAx2/cosAx2);
    adae:	eea6 9a26 	vfma.f32	s18, s12, s13
    float a2 = +model.azmCor*sinAx1                 + model.altCor*cosAx1;
    adb2:	eee5 7aab 	vfma.f32	s15, s11, s23
  { return __builtin_cosf(__x); }
    adb6:	ee39 0a00 	vadd.f32	s0, s18, s0
    adba:	eef0 ca67 	vmov.f32	s25, s15
    adbe:	f00f fd53 	bl	1a868 <cosf>
    float COSh = cos(a1 + model.hcp)*model.hca*p;
    adc2:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
    ax1 = ax1 - (a1 + PDh + DOh + TFh + COSh);
    adc6:	ee38 8a09 	vadd.f32	s16, s16, s18
    float COSh = cos(a1 + model.hcp)*model.hca*p;
    adca:	ed93 7a00 	vldr	s14, [r3]
    float COSd = cos(a2 + model.dcp)*model.dca*p;
    adce:	f204 533c 	addw	r3, r4, #1340	; 0x53c
    add2:	f504 64a8 	add.w	r4, r4, #1344	; 0x540
    ax1 = ax1 - (a1 + PDh + DOh + TFh + COSh);
    add6:	ee38 8a0d 	vadd.f32	s16, s16, s26
    float COSd = cos(a2 + model.dcp)*model.dca*p;
    adda:	edd3 7a00 	vldr	s15, [r3]
    float COSh = cos(a1 + model.hcp)*model.hca*p;
    adde:	ee60 ba07 	vmul.f32	s23, s0, s14
    ade2:	ee3c 0aa7 	vadd.f32	s0, s25, s15
    ade6:	f00f fd3f 	bl	1a868 <cosf>
    ax2 = ax2 - (a2 + DFd + TFd + COSd);
    adea:	ee7a 7aac 	vadd.f32	s15, s21, s25
    float COSd = cos(a2 + model.dcp)*model.dca*p;
    adee:	ed94 7a00 	vldr	s14, [r4]
    ax1 = ax1 - (a1 + PDh + DOh + TFh + COSh);
    adf2:	eead 8a8b 	vfma.f32	s16, s27, s22
    ax2 = ax2 - (a2 + DFd + TFd + COSd);
    adf6:	eeed 7a8c 	vfma.f32	s15, s27, s24
    float COSd = cos(a2 + model.dcp)*model.dca*p;
    adfa:	ee20 0a07 	vmul.f32	s0, s0, s14
    ax1 = ax1 - (a1 + PDh + DOh + TFh + COSh);
    adfe:	eeab 8a8a 	vfma.f32	s16, s23, s20
    ax2 = ax2 - (a2 + DFd + TFd + COSd);
    ae02:	eee0 7a0a 	vfma.f32	s15, s0, s20
    ax1 = ax1 - (a1 + PDh + DOh + TFh + COSh);
    ae06:	ee78 8ac8 	vsub.f32	s17, s17, s16
    ax2 = ax2 - (a2 + DFd + TFd + COSd);
    ae0a:	ee79 9ae7 	vsub.f32	s19, s19, s15
  if (ax2 >  Deg90) ax2 =  Deg90;
    ae0e:	eeb7 6ae9 	vcvt.f64.f32	d6, s19
    ae12:	ed9f 7b47 	vldr	d7, [pc, #284]	; af30 <GeoAlign::mountToObservedPlace(Coordinate*)+0x370>
    ae16:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ae1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae1e:	dc0b      	bgt.n	ae38 <GeoAlign::mountToObservedPlace(Coordinate*)+0x278>
  if (ax2 < -Deg90) ax2 = -Deg90;
    ae20:	ed9f 5b45 	vldr	d5, [pc, #276]	; af38 <GeoAlign::mountToObservedPlace(Coordinate*)+0x378>
    coord->a = ax2;
    ae24:	ed9f 7b46 	vldr	d7, [pc, #280]	; af40 <GeoAlign::mountToObservedPlace(Coordinate*)+0x380>
    ae28:	eeb4 6bc5 	vcmpe.f64	d6, d5
    ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae30:	bf58      	it	pl
    ae32:	eeb0 7b46 	vmovpl.f64	d7, d6
    ae36:	e706      	b.n	ac46 <GeoAlign::mountToObservedPlace(Coordinate*)+0x86>
  if (mountType == ALTAZM) {
    ae38:	2e03      	cmp	r6, #3
    while (ax1 >  Deg360) ax1 -= Deg360;
    ae3a:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
    ae3e:	ed9f 7b4a 	vldr	d7, [pc, #296]	; af68 <GeoAlign::mountToObservedPlace(Coordinate*)+0x3a8>
  if (mountType == ALTAZM) {
    ae42:	f47f af05 	bne.w	ac50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x90>
    while (ax1 >  Deg360) ax1 -= Deg360;
    ae46:	ed9f 6b42 	vldr	d6, [pc, #264]	; af50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x390>
    ae4a:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ae4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae52:	dd0a      	ble.n	ae6a <GeoAlign::mountToObservedPlace(Coordinate*)+0x2aa>
    ae54:	ee30 0b46 	vsub.f64	d0, d0, d6
    ae58:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    ae5c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    ae60:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae68:	dcf4      	bgt.n	ae54 <GeoAlign::mountToObservedPlace(Coordinate*)+0x294>
    while (ax1 < -Deg360) ax1 += Deg360;
    ae6a:	ed9f 6b41 	vldr	d6, [pc, #260]	; af70 <GeoAlign::mountToObservedPlace(Coordinate*)+0x3b0>
    ae6e:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae76:	d50c      	bpl.n	ae92 <GeoAlign::mountToObservedPlace(Coordinate*)+0x2d2>
    ae78:	ed9f 5b35 	vldr	d5, [pc, #212]	; af50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x390>
    ae7c:	ee30 0b05 	vadd.f64	d0, d0, d5
    ae80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    ae84:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    ae88:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ae8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae90:	d4f4      	bmi.n	ae7c <GeoAlign::mountToObservedPlace(Coordinate*)+0x2bc>
}
    ae92:	ecbd 8b0c 	vpop	{d8-d13}
    coord->z = ax1;
    ae96:	ed85 0b08 	vstr	d0, [r5, #32]
    coord->a = ax2;
    ae9a:	ed85 7b06 	vstr	d7, [r5, #24]
}
    ae9e:	bd70      	pop	{r4, r5, r6, pc}
    if (mountType == FORK || mountType == ALTAZM) DFd = model.dfCor*cosAx1; else DFd = -model.dfCor*(cosLat*cosAx1 + sinLat*(sinAx2/cosAx2));
    aea0:	f504 63a9 	add.w	r3, r4, #1352	; 0x548
    aea4:	f204 522c 	addw	r2, r4, #1324	; 0x52c
    aea8:	edd3 6a00 	vldr	s13, [r3]
    aeac:	f204 534c 	addw	r3, r4, #1356	; 0x54c
    aeb0:	edd2 7a00 	vldr	s15, [r2]
    aeb4:	ee60 4a26 	vmul.f32	s9, s0, s13
    aeb8:	edd3 5a00 	vldr	s11, [r3]
    aebc:	ee60 aa27 	vmul.f32	s21, s0, s15
    aec0:	e755      	b.n	ad6e <GeoAlign::mountToObservedPlace(Coordinate*)+0x1ae>
    while (ax1 >  Deg360) ax1 -= Deg360;
    aec2:	ed9f 6b23 	vldr	d6, [pc, #140]	; af50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x390>
    aec6:	eeb4 0bc6 	vcmpe.f64	d0, d6
    aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aece:	dd0a      	ble.n	aee6 <GeoAlign::mountToObservedPlace(Coordinate*)+0x326>
    aed0:	ee30 0b46 	vsub.f64	d0, d0, d6
    aed4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    aed8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    aedc:	eeb4 0bc6 	vcmpe.f64	d0, d6
    aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aee4:	dcf4      	bgt.n	aed0 <GeoAlign::mountToObservedPlace(Coordinate*)+0x310>
    while (ax1 < -Deg360) ax1 += Deg360;
    aee6:	ed9f 6b22 	vldr	d6, [pc, #136]	; af70 <GeoAlign::mountToObservedPlace(Coordinate*)+0x3b0>
    aeea:	eeb4 0bc6 	vcmpe.f64	d0, d6
    aeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aef2:	d50c      	bpl.n	af0e <GeoAlign::mountToObservedPlace(Coordinate*)+0x34e>
    aef4:	ed9f 5b16 	vldr	d5, [pc, #88]	; af50 <GeoAlign::mountToObservedPlace(Coordinate*)+0x390>
    aef8:	ee30 0b05 	vadd.f64	d0, d0, d5
    aefc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    af00:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    af04:	eeb4 0bc6 	vcmpe.f64	d0, d6
    af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af0c:	d4f4      	bmi.n	aef8 <GeoAlign::mountToObservedPlace(Coordinate*)+0x338>
}
    af0e:	ecbd 8b0c 	vpop	{d8-d13}
    coord->aa1 = ax1;
    af12:	ed85 0b0a 	vstr	d0, [r5, #40]	; 0x28
    coord->aa2 = ax2;
    af16:	ed85 7b0c 	vstr	d7, [r5, #48]	; 0x30
}
    af1a:	bd70      	pop	{r4, r5, r6, pc}
  if (mountType == ALTALT) { ax1 = coord->aa1; ax2 = coord->aa2; } else { ax1 = coord->h; ax2 = coord->d; }
    af1c:	ed91 0b0a 	vldr	d0, [r1, #40]	; 0x28
    af20:	ed91 6b0c 	vldr	d6, [r1, #48]	; 0x30
    af24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    af28:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    af2c:	e66a      	b.n	ac04 <GeoAlign::mountToObservedPlace(Coordinate*)+0x44>
    af2e:	bf00      	nop
    af30:	54442d15 	.word	0x54442d15
    af34:	3ff921fb 	.word	0x3ff921fb
    af38:	54442d15 	.word	0x54442d15
    af3c:	bff921fb 	.word	0xbff921fb
    af40:	60000000 	.word	0x60000000
    af44:	bff921fb 	.word	0xbff921fb
    af48:	54442d18 	.word	0x54442d18
    af4c:	400921fb 	.word	0x400921fb
    af50:	54442d18 	.word	0x54442d18
    af54:	401921fb 	.word	0x401921fb
    af58:	54442d18 	.word	0x54442d18
    af5c:	c00921fb 	.word	0xc00921fb
    af60:	39f4a6ae 	.word	0x39f4a6ae
    af64:	3ff920ca 	.word	0x3ff920ca
    af68:	60000000 	.word	0x60000000
    af6c:	3ff921fb 	.word	0x3ff921fb
    af70:	54442d18 	.word	0x54442d18
    af74:	c01921fb 	.word	0xc01921fb

0000af78 <Transform::init()>:
void Transform::init() {
    af78:	b538      	push	{r3, r4, r5, lr}
  bool revert = !(nv.readUI(NV_AXIS_SETTINGS_REVERT) & 1);
    af7a:	4d24      	ldr	r5, [pc, #144]	; (b00c <Transform::init()+0x94>)
void Transform::init() {
    af7c:	4604      	mov	r4, r0
  bool revert = !(nv.readUI(NV_AXIS_SETTINGS_REVERT) & 1);
    af7e:	f44f 7199 	mov.w	r1, #306	; 0x132
    af82:	4628      	mov	r0, r5
    af84:	f7fa f808 	bl	4f98 <NonVolatileStorage::readUI(unsigned short)>
  if (!nv.hasValidKey() || revert) {
    af88:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    af8c:	b1f3      	cbz	r3, afcc <Transform::init()+0x54>
    af8e:	07c3      	lsls	r3, r0, #31
    af90:	d51c      	bpl.n	afcc <Transform::init()+0x54>
  mountType = nv.readUC(NV_MOUNT_TYPE_BASE);
    af92:	21be      	movs	r1, #190	; 0xbe
    af94:	481d      	ldr	r0, [pc, #116]	; (b00c <Transform::init()+0x94>)
    af96:	f7f9 fff7 	bl	4f88 <NonVolatileStorage::readUC(unsigned short)>
    af9a:	b241      	sxtb	r1, r0
  if (mountType == 0) {
    af9c:	b331      	cbz	r1, afec <Transform::init()+0x74>
  if (mountType < MOUNT_SUBTYPE_FIRST || mountType > MOUNT_SUBTYPE_LAST) {
    af9e:	1e43      	subs	r3, r0, #1
    afa0:	b2db      	uxtb	r3, r3
    afa2:	2b03      	cmp	r3, #3
    afa4:	d818      	bhi.n	afd8 <Transform::init()+0x60>
  if (mountType == GEM) meridianFlips = true; else meridianFlips = (MOUNT_ALTERNATE_ORIENTATION == ON);
    afa6:	f1a1 0301 	sub.w	r3, r1, #1
  mountType = nv.readUC(NV_MOUNT_TYPE_BASE);
    afaa:	f884 15c4 	strb.w	r1, [r4, #1476]	; 0x5c4
  if (mountType == GEM) meridianFlips = true; else meridianFlips = (MOUNT_ALTERNATE_ORIENTATION == ON);
    afae:	fab3 f383 	clz	r3, r3
    afb2:	095b      	lsrs	r3, r3, #5
    align.init(mountType, site.location.latitude);
    afb4:	4a16      	ldr	r2, [pc, #88]	; (b010 <Transform::init()+0x98>)
    afb6:	4620      	mov	r0, r4
    afb8:	f884 35c5 	strb.w	r3, [r4, #1477]	; 0x5c5
    afbc:	ed92 0b00 	vldr	d0, [r2]
}
    afc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    align.init(mountType, site.location.latitude);
    afc4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    afc8:	f7fe bacc 	b.w	9564 <GeoAlign::init(signed char, float)>
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    afcc:	2201      	movs	r2, #1
    afce:	21be      	movs	r1, #190	; 0xbe
    afd0:	480e      	ldr	r0, [pc, #56]	; (b00c <Transform::init()+0x94>)
    afd2:	f7f9 ff15 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    inline void write(uint16_t i,  uint8_t j) { update (i,j); }
    afd6:	e7dc      	b.n	af92 <Transform::init()+0x1a>
    mountType = MOUNT_SUBTYPE;
    afd8:	2301      	movs	r3, #1
    initError.value = true;
    afda:	480e      	ldr	r0, [pc, #56]	; (b014 <Transform::init()+0x9c>)
    mountType = MOUNT_SUBTYPE;
    afdc:	f884 35c4 	strb.w	r3, [r4, #1476]	; 0x5c4
    initError.value = true;
    afe0:	4619      	mov	r1, r3
    afe2:	7802      	ldrb	r2, [r0, #0]
    afe4:	f042 0202 	orr.w	r2, r2, #2
    afe8:	7002      	strb	r2, [r0, #0]
    VLF("WRN: Transform, unknown mount type reverting to default");
    afea:	e7e3      	b.n	afb4 <Transform::init()+0x3c>
    mountType = MOUNT_SUBTYPE;
    afec:	2201      	movs	r2, #1
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    afee:	21be      	movs	r1, #190	; 0xbe
    aff0:	4806      	ldr	r0, [pc, #24]	; (b00c <Transform::init()+0x94>)
    aff2:	f884 25c4 	strb.w	r2, [r4, #1476]	; 0x5c4
    aff6:	f7f9 ff03 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
  if (mountType == GEM) meridianFlips = true; else meridianFlips = (MOUNT_ALTERNATE_ORIENTATION == ON);
    affa:	f994 15c4 	ldrsb.w	r1, [r4, #1476]	; 0x5c4
    affe:	f1a1 0301 	sub.w	r3, r1, #1
    b002:	fab3 f383 	clz	r3, r3
    b006:	095b      	lsrs	r3, r3, #5
    inline void write(uint16_t i,  uint8_t j) { update (i,j); }
    b008:	e7d4      	b.n	afb4 <Transform::init()+0x3c>
    b00a:	bf00      	nop
    b00c:	20005e50 	.word	0x20005e50
    b010:	200055d0 	.word	0x200055d0
    b014:	20005ccc 	.word	0x20005ccc

0000b018 <Transform::observedPlaceToMount(Coordinate*)>:
void Transform::observedPlaceToMount(Coordinate *coord) {
    b018:	b538      	push	{r3, r4, r5, lr}
    if (coord->pierSide != PIER_SIDE_NONE) align.observedPlaceToMount(coord);
    b01a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
void Transform::observedPlaceToMount(Coordinate *coord) {
    b01e:	460c      	mov	r4, r1
    b020:	4605      	mov	r5, r0
    if (coord->pierSide != PIER_SIDE_NONE) align.observedPlaceToMount(coord);
    b022:	b9ab      	cbnz	r3, b050 <Transform::observedPlaceToMount(Coordinate*)+0x38>
  if (mountType == ALTAZM) {
    b024:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
    b028:	2b03      	cmp	r3, #3
    b02a:	d008      	beq.n	b03e <Transform::observedPlaceToMount(Coordinate*)+0x26>
    coord->a1 = coord->h;
    b02c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    coord->a2 = coord->d;
    b030:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    coord->a1 = coord->h;
    b034:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    coord->a2 = coord->a;
    b038:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
    b03c:	bd38      	pop	{r3, r4, r5, pc}
    coord->a1 = coord->z;
    b03e:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
    coord->a2 = coord->a;
    b042:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    coord->a1 = coord->z;
    b046:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    coord->a2 = coord->a;
    b04a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
    b04e:	bd38      	pop	{r3, r4, r5, pc}
    if (coord->pierSide != PIER_SIDE_NONE) align.observedPlaceToMount(coord);
    b050:	f7ff fbe2 	bl	a818 <GeoAlign::observedPlaceToMount(Coordinate*)>
    b054:	e7e6      	b.n	b024 <Transform::observedPlaceToMount(Coordinate*)+0xc>
    b056:	bf00      	nop

0000b058 <Transform::instrumentToMount(double, double)>:
  if (site.location.latitude >= 0.0 || mountType == ALTAZM) {
    b058:	4b39      	ldr	r3, [pc, #228]	; (b140 <Transform::instrumentToMount(double, double)+0xe8>)
    b05a:	ed93 7b00 	vldr	d7, [r3]
    b05e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b066:	db30      	blt.n	b0ca <Transform::instrumentToMount(double, double)+0x72>
    b068:	f991 35c4 	ldrsb.w	r3, [r1, #1476]	; 0x5c4
    if (a2 > Deg90) {
    b06c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; b120 <Transform::instrumentToMount(double, double)+0xc8>
    b070:	eeb4 1bc7 	vcmpe.f64	d1, d7
    b074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b078:	dd1d      	ble.n	b0b6 <Transform::instrumentToMount(double, double)+0x5e>
      a1 -= Deg180;
    b07a:	2202      	movs	r2, #2
  if (mountType == ALTAZM) { mount.z = a1; mount.a = a2; } else
    b07c:	2b03      	cmp	r3, #3
      a1 -= Deg180;
    b07e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; b128 <Transform::instrumentToMount(double, double)+0xd0>
    } else mount.pierSide = PIER_SIDE_EAST;
    b082:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
      a1 -= Deg180;
    b086:	ee30 0b47 	vsub.f64	d0, d0, d7
      a2  = Deg180 - a2;
    b08a:	ee37 1b41 	vsub.f64	d1, d7, d1
  if (mountType == ALTAZM) { mount.z = a1; mount.a = a2; } else
    b08e:	d017      	beq.n	b0c0 <Transform::instrumentToMount(double, double)+0x68>
  if (mountType == ALTALT) { mount.aa1 = a1; mount.aa2 = a2; } else
    b090:	2b04      	cmp	r3, #4
    b092:	d02a      	beq.n	b0ea <Transform::instrumentToMount(double, double)+0x92>
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    b094:	3b01      	subs	r3, #1
  if (isEquatorial()) { mount.h = a1; mount.d = a2; }
    b096:	b2db      	uxtb	r3, r3
    b098:	2b01      	cmp	r3, #1
    b09a:	d803      	bhi.n	b0a4 <Transform::instrumentToMount(double, double)+0x4c>
    b09c:	ed80 0b02 	vstr	d0, [r0, #8]
    b0a0:	ed80 1b04 	vstr	d1, [r0, #16]
  mount.a1Correction = 0.0;
    b0a4:	2200      	movs	r2, #0
    b0a6:	2300      	movs	r3, #0
  mount.a1 = a1;
    b0a8:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
  mount.a2 = a2;
    b0ac:	ed80 1b12 	vstr	d1, [r0, #72]	; 0x48
  mount.a1Correction = 0.0;
    b0b0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
}
    b0b4:	4770      	bx	lr
    b0b6:	2201      	movs	r2, #1
  if (mountType == ALTAZM) { mount.z = a1; mount.a = a2; } else
    b0b8:	2b03      	cmp	r3, #3
    } else mount.pierSide = PIER_SIDE_EAST;
    b0ba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (mountType == ALTAZM) { mount.z = a1; mount.a = a2; } else
    b0be:	d1e7      	bne.n	b090 <Transform::instrumentToMount(double, double)+0x38>
    b0c0:	ed80 0b08 	vstr	d0, [r0, #32]
    b0c4:	ed80 1b06 	vstr	d1, [r0, #24]
    b0c8:	e7ec      	b.n	b0a4 <Transform::instrumentToMount(double, double)+0x4c>
  if (site.location.latitude >= 0.0 || mountType == ALTAZM) {
    b0ca:	f991 35c4 	ldrsb.w	r3, [r1, #1476]	; 0x5c4
    b0ce:	2b03      	cmp	r3, #3
    b0d0:	d01a      	beq.n	b108 <Transform::instrumentToMount(double, double)+0xb0>
    if (a2 < -Deg90) {
    b0d2:	ed9f 7b17 	vldr	d7, [pc, #92]	; b130 <Transform::instrumentToMount(double, double)+0xd8>
    b0d6:	eeb4 1bc7 	vcmpe.f64	d1, d7
    b0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b0de:	d409      	bmi.n	b0f4 <Transform::instrumentToMount(double, double)+0x9c>
    b0e0:	2201      	movs	r2, #1
  if (mountType == ALTALT) { mount.aa1 = a1; mount.aa2 = a2; } else
    b0e2:	2b04      	cmp	r3, #4
    } else mount.pierSide = PIER_SIDE_EAST;
    b0e4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  if (mountType == ALTALT) { mount.aa1 = a1; mount.aa2 = a2; } else
    b0e8:	d1d4      	bne.n	b094 <Transform::instrumentToMount(double, double)+0x3c>
    b0ea:	ed80 0b0a 	vstr	d0, [r0, #40]	; 0x28
    b0ee:	ed80 1b0c 	vstr	d1, [r0, #48]	; 0x30
    b0f2:	e7d7      	b.n	b0a4 <Transform::instrumentToMount(double, double)+0x4c>
      a1 -= Deg180;
    b0f4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; b128 <Transform::instrumentToMount(double, double)+0xd0>
      a2  = (-Deg180) - a2;
    b0f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; b138 <Transform::instrumentToMount(double, double)+0xe0>
    b0fc:	2202      	movs	r2, #2
      a1 -= Deg180;
    b0fe:	ee30 0b46 	vsub.f64	d0, d0, d6
      a2  = (-Deg180) - a2;
    b102:	ee37 1b41 	vsub.f64	d1, d7, d1
    b106:	e7ec      	b.n	b0e2 <Transform::instrumentToMount(double, double)+0x8a>
    if (a2 > Deg90) {
    b108:	ed9f 7b05 	vldr	d7, [pc, #20]	; b120 <Transform::instrumentToMount(double, double)+0xc8>
    b10c:	eeb4 1bc7 	vcmpe.f64	d1, d7
    b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b114:	dcb1      	bgt.n	b07a <Transform::instrumentToMount(double, double)+0x22>
    } else mount.pierSide = PIER_SIDE_EAST;
    b116:	2301      	movs	r3, #1
    b118:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (mountType == ALTAZM) { mount.z = a1; mount.a = a2; } else
    b11c:	e7d0      	b.n	b0c0 <Transform::instrumentToMount(double, double)+0x68>
    b11e:	bf00      	nop
    b120:	54442d15 	.word	0x54442d15
    b124:	3ff921fb 	.word	0x3ff921fb
    b128:	54442d18 	.word	0x54442d18
    b12c:	400921fb 	.word	0x400921fb
    b130:	54442d15 	.word	0x54442d15
    b134:	bff921fb 	.word	0xbff921fb
    b138:	54442d18 	.word	0x54442d18
    b13c:	c00921fb 	.word	0xc00921fb
    b140:	200055d0 	.word	0x200055d0
    b144:	00000000 	.word	0x00000000

0000b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>:
  if (mountType == ALTAZM) { *a1 = coord->z; *a2 = coord->a; } else
    b148:	f990 05c4 	ldrsb.w	r0, [r0, #1476]	; 0x5c4
    b14c:	2803      	cmp	r0, #3
    b14e:	d025      	beq.n	b19c <Transform::mountToInstrument(Coordinate*, double*, double*)+0x54>
  if (mountType == ALTALT) { *a1 = coord->aa1; *a2 = coord->aa2; } else
    b150:	2804      	cmp	r0, #4
    b152:	d008      	beq.n	b166 <Transform::mountToInstrument(Coordinate*, double*, double*)+0x1e>
    b154:	3801      	subs	r0, #1
  if (isEquatorial()) { *a1 = coord->h; *a2 = coord->d; }
    b156:	b2c0      	uxtb	r0, r0
    b158:	2801      	cmp	r0, #1
    b15a:	d928      	bls.n	b1ae <Transform::mountToInstrument(Coordinate*, double*, double*)+0x66>
    if (coord->pierSide == PIER_SIDE_WEST) {
    b15c:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
    b160:	2902      	cmp	r1, #2
    b162:	d00c      	beq.n	b17e <Transform::mountToInstrument(Coordinate*, double*, double*)+0x36>
}
    b164:	4770      	bx	lr
  if (mountType == ALTALT) { *a1 = coord->aa1; *a2 = coord->aa2; } else
    b166:	ed91 7b0a 	vldr	d7, [r1, #40]	; 0x28
    b16a:	ed82 7b00 	vstr	d7, [r2]
    b16e:	ed91 7b0c 	vldr	d7, [r1, #48]	; 0x30
    if (coord->pierSide == PIER_SIDE_WEST) {
    b172:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
    b176:	2902      	cmp	r1, #2
  if (mountType == ALTALT) { *a1 = coord->aa1; *a2 = coord->aa2; } else
    b178:	ed83 7b00 	vstr	d7, [r3]
    if (coord->pierSide == PIER_SIDE_WEST) {
    b17c:	d1f2      	bne.n	b164 <Transform::mountToInstrument(Coordinate*, double*, double*)+0x1c>
      *a1 += Deg180;
    b17e:	ed92 6b00 	vldr	d6, [r2]
    b182:	ed9f 7b1d 	vldr	d7, [pc, #116]	; b1f8 <Transform::mountToInstrument(Coordinate*, double*, double*)+0xb0>
    b186:	ee36 6b07 	vadd.f64	d6, d6, d7
    b18a:	ed82 6b00 	vstr	d6, [r2]
      *a2 = Deg180 - *a2;
    b18e:	ed93 6b00 	vldr	d6, [r3]
    b192:	ee37 7b46 	vsub.f64	d7, d7, d6
    b196:	ed83 7b00 	vstr	d7, [r3]
    b19a:	4770      	bx	lr
  if (mountType == ALTAZM) { *a1 = coord->z; *a2 = coord->a; } else
    b19c:	ed91 7b08 	vldr	d7, [r1, #32]
    b1a0:	ed82 7b00 	vstr	d7, [r2]
    b1a4:	ed91 7b06 	vldr	d7, [r1, #24]
    b1a8:	ed83 7b00 	vstr	d7, [r3]
    b1ac:	e7d6      	b.n	b15c <Transform::mountToInstrument(Coordinate*, double*, double*)+0x14>
  if (isEquatorial()) { *a1 = coord->h; *a2 = coord->d; }
    b1ae:	ed91 7b02 	vldr	d7, [r1, #8]
  if (site.location.latitude >= 0.0 || !isEquatorial()) {
    b1b2:	4815      	ldr	r0, [pc, #84]	; (b208 <Transform::mountToInstrument(Coordinate*, double*, double*)+0xc0>)
  if (isEquatorial()) { *a1 = coord->h; *a2 = coord->d; }
    b1b4:	ed82 7b00 	vstr	d7, [r2]
    b1b8:	ed91 7b04 	vldr	d7, [r1, #16]
    b1bc:	ed83 7b00 	vstr	d7, [r3]
  if (site.location.latitude >= 0.0 || !isEquatorial()) {
    b1c0:	ed90 7b00 	vldr	d7, [r0]
    b1c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1cc:	dac6      	bge.n	b15c <Transform::mountToInstrument(Coordinate*, double*, double*)+0x14>
    if (coord->pierSide == PIER_SIDE_WEST) {
    b1ce:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
    b1d2:	2902      	cmp	r1, #2
    b1d4:	d1c6      	bne.n	b164 <Transform::mountToInstrument(Coordinate*, double*, double*)+0x1c>
      *a1 += Deg180;
    b1d6:	ed92 6b00 	vldr	d6, [r2]
    b1da:	ed9f 5b07 	vldr	d5, [pc, #28]	; b1f8 <Transform::mountToInstrument(Coordinate*, double*, double*)+0xb0>
      *a2 = (-Deg180) - *a2;
    b1de:	ed9f 7b08 	vldr	d7, [pc, #32]	; b200 <Transform::mountToInstrument(Coordinate*, double*, double*)+0xb8>
      *a1 += Deg180;
    b1e2:	ee36 6b05 	vadd.f64	d6, d6, d5
    b1e6:	ed82 6b00 	vstr	d6, [r2]
      *a2 = (-Deg180) - *a2;
    b1ea:	ed93 6b00 	vldr	d6, [r3]
    b1ee:	ee37 7b46 	vsub.f64	d7, d7, d6
    b1f2:	ed83 7b00 	vstr	d7, [r3]
}
    b1f6:	4770      	bx	lr
    b1f8:	54442d18 	.word	0x54442d18
    b1fc:	400921fb 	.word	0x400921fb
    b200:	54442d18 	.word	0x54442d18
    b204:	c00921fb 	.word	0xc00921fb
    b208:	200055d0 	.word	0x200055d0
    b20c:	00000000 	.word	0x00000000

0000b210 <Transform::hourAngleToRightAscension(Coordinate*, bool)>:
  noInterrupts();
    b210:	b672      	cpsid	i
  unsigned long fs = fracLAST;
    b212:	4b1b      	ldr	r3, [pc, #108]	; (b280 <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x70>)
    b214:	ed93 6a00 	vldr	s12, [r3]
  interrupts();
    b218:	b662      	cpsie	i
  coord->r = fsToRad(fs) - coord->h;
    b21a:	ed9f 4b15 	vldr	d4, [pc, #84]	; b270 <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x60>
    b21e:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    b222:	ed91 5b02 	vldr	d5, [r1, #8]
    b226:	ee86 7b04 	vdiv.f64	d7, d6, d4
    b22a:	ee37 7b45 	vsub.f64	d7, d7, d5
  if (native) coord->r = backInRads(coord->r);
    b22e:	b1da      	cbz	r2, b268 <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x58>
  while (angle >= Deg360) angle -= Deg360;
    b230:	ed9f 6b11 	vldr	d6, [pc, #68]	; b278 <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x68>
    b234:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b23c:	db06      	blt.n	b24c <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x3c>
    b23e:	ee37 7b46 	vsub.f64	d7, d7, d6
    b242:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b24a:	daf8      	bge.n	b23e <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x2e>
  while (angle < 0.0)     angle += Deg360;
    b24c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b254:	d508      	bpl.n	b268 <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x58>
    b256:	ed9f 6b08 	vldr	d6, [pc, #32]	; b278 <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x68>
    b25a:	ee37 7b06 	vadd.f64	d7, d7, d6
    b25e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    b262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b266:	d4f8      	bmi.n	b25a <Transform::hourAngleToRightAscension(Coordinate*, bool)+0x4a>
  if (native) coord->r = backInRads(coord->r);
    b268:	ed81 7b00 	vstr	d7, [r1]
}
    b26c:	4770      	bx	lr
    b26e:	bf00      	nop
    b270:	6d81df90 	.word	0x6d81df90
    b274:	415b9bbc 	.word	0x415b9bbc
    b278:	54442d18 	.word	0x54442d18
    b27c:	401921fb 	.word	0x401921fb
    b280:	20005be8 	.word	0x20005be8
    b284:	00000000 	.word	0x00000000

0000b288 <Transform::rightAscensionToHourAngle(Coordinate*, bool)>:
  if (isnan(coord->r)) return; // NAN flags mount coordinates
    b288:	ed91 7b00 	vldr	d7, [r1]
    b28c:	eeb4 7b47 	vcmp.f64	d7, d7
    b290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b294:	d631      	bvs.n	b2fa <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x72>
  noInterrupts();
    b296:	b672      	cpsid	i
  unsigned long fs = fracLAST;
    b298:	4b21      	ldr	r3, [pc, #132]	; (b320 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x98>)
    b29a:	ed93 6a00 	vldr	s12, [r3]
  interrupts();
    b29e:	b662      	cpsie	i
  coord->h = fsToRad(fs) - coord->r;
    b2a0:	ed9f 4b17 	vldr	d4, [pc, #92]	; b300 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x78>
    b2a4:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    b2a8:	ed91 5b00 	vldr	d5, [r1]
    b2ac:	ee86 7b04 	vdiv.f64	d7, d6, d4
    b2b0:	ee37 7b45 	vsub.f64	d7, d7, d5
  if (native) coord->h = backInRads2(coord->h);
    b2b4:	b1fa      	cbz	r2, b2f6 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x6e>
  while (angle >= Deg180) angle -= Deg360;
    b2b6:	ed9f 6b14 	vldr	d6, [pc, #80]	; b308 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x80>
    b2ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b2c2:	db08      	blt.n	b2d6 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x4e>
    b2c4:	ed9f 5b12 	vldr	d5, [pc, #72]	; b310 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x88>
    b2c8:	ee37 7b45 	vsub.f64	d7, d7, d5
    b2cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b2d4:	daf8      	bge.n	b2c8 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x40>
  while (angle < -Deg180) angle += Deg360;
    b2d6:	ed9f 6b10 	vldr	d6, [pc, #64]	; b318 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x90>
    b2da:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b2e2:	d508      	bpl.n	b2f6 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x6e>
    b2e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; b310 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x88>
    b2e8:	ee37 7b05 	vadd.f64	d7, d7, d5
    b2ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b2f4:	d4f8      	bmi.n	b2e8 <Transform::rightAscensionToHourAngle(Coordinate*, bool)+0x60>
  if (native) coord->h = backInRads2(coord->h);
    b2f6:	ed81 7b02 	vstr	d7, [r1, #8]
}
    b2fa:	4770      	bx	lr
    b2fc:	f3af 8000 	nop.w
    b300:	6d81df90 	.word	0x6d81df90
    b304:	415b9bbc 	.word	0x415b9bbc
    b308:	54442d18 	.word	0x54442d18
    b30c:	400921fb 	.word	0x400921fb
    b310:	54442d18 	.word	0x54442d18
    b314:	401921fb 	.word	0x401921fb
    b318:	54442d18 	.word	0x54442d18
    b31c:	c00921fb 	.word	0xc00921fb
    b320:	20005be8 	.word	0x20005be8
    b324:	00000000 	.word	0x00000000

0000b328 <Transform::equToHor(Coordinate*)>:
void Transform::equToHor(Coordinate *coord) {
    b328:	b530      	push	{r4, r5, lr}
    b32a:	ed2d 8b0a 	vpush	{d8-d12}
  double cosHA  = cos(coord->h);
    b32e:	ed91 bb02 	vldr	d11, [r1, #8]
void Transform::equToHor(Coordinate *coord) {
    b332:	460c      	mov	r4, r1
    b334:	b083      	sub	sp, #12
  double sinAlt = sin(coord->d)*site.locationEx.latitude.sine + cos(coord->d)*site.locationEx.latitude.cosine*cosHA;  
    b336:	4d44      	ldr	r5, [pc, #272]	; (b448 <Transform::equToHor(Coordinate*)+0x120>)
  double cosHA  = cos(coord->h);
    b338:	eeb0 0b4b 	vmov.f64	d0, d11
    b33c:	f00f feb8 	bl	1b0b0 <cos>
    b340:	eeb0 9b40 	vmov.f64	d9, d0
  double sinAlt = sin(coord->d)*site.locationEx.latitude.sine + cos(coord->d)*site.locationEx.latitude.cosine*cosHA;  
    b344:	ed94 8b04 	vldr	d8, [r4, #16]
    b348:	eeb0 0b48 	vmov.f64	d0, d8
    b34c:	f00f ff24 	bl	1b198 <sin>
    b350:	eeb0 ab40 	vmov.f64	d10, d0
    b354:	eeb0 0b48 	vmov.f64	d0, d8
    b358:	f00f feaa 	bl	1b0b0 <cos>
    b35c:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
    b360:	ed95 6b0a 	vldr	d6, [r5, #40]	; 0x28
    b364:	ee20 0b07 	vmul.f64	d0, d0, d7
    b368:	ee20 0b09 	vmul.f64	d0, d0, d9
  coord->a      = asin(sinAlt);
    b36c:	eeaa 0b06 	vfma.f64	d0, d10, d6
    b370:	f00e fe60 	bl	1a034 <asin>
  if (fabs(coord->d - Deg90) < TenthArcSec) coord->z = 0.0; else
    b374:	ed9f 7b2c 	vldr	d7, [pc, #176]	; b428 <Transform::equToHor(Coordinate*)+0x100>
    b378:	ed9f 5b2d 	vldr	d5, [pc, #180]	; b430 <Transform::equToHor(Coordinate*)+0x108>
  coord->a      = asin(sinAlt);
    b37c:	ed84 0b06 	vstr	d0, [r4, #24]
  if (fabs(coord->d - Deg90) < TenthArcSec) coord->z = 0.0; else
    b380:	ee38 6b47 	vsub.f64	d6, d8, d7
  double t2     = cosHA*site.locationEx.latitude.sine - tan(coord->d)*site.locationEx.latitude.cosine;
    b384:	ed95 ab0a 	vldr	d10, [r5, #40]	; 0x28
  { return __builtin_fabsl(__x); }
    b388:	eeb0 6bc6 	vabs.f64	d6, d6
    b38c:	ed95 cb0c 	vldr	d12, [r5, #48]	; 0x30
  if (fabs(coord->d - Deg90) < TenthArcSec) coord->z = 0.0; else
    b390:	eeb4 6bc5 	vcmpe.f64	d6, d5
    b394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b398:	d507      	bpl.n	b3aa <Transform::equToHor(Coordinate*)+0x82>
    b39a:	2200      	movs	r2, #0
    b39c:	2300      	movs	r3, #0
    b39e:	e9c4 2308 	strd	r2, r3, [r4, #32]
}
    b3a2:	b003      	add	sp, #12
    b3a4:	ecbd 8b0a 	vpop	{d8-d12}
    b3a8:	bd30      	pop	{r4, r5, pc}
  if (fabs(coord->d + Deg90) < TenthArcSec) coord->z = Deg180; else {
    b3aa:	ee38 7b07 	vadd.f64	d7, d8, d7
    b3ae:	eeb0 7bc7 	vabs.f64	d7, d7
    b3b2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b3ba:	d508      	bpl.n	b3ce <Transform::equToHor(Coordinate*)+0xa6>
    b3bc:	a31e      	add	r3, pc, #120	; (adr r3, b438 <Transform::equToHor(Coordinate*)+0x110>)
    b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b3c2:	e9c4 2308 	strd	r2, r3, [r4, #32]
}
    b3c6:	b003      	add	sp, #12
    b3c8:	ecbd 8b0a 	vpop	{d8-d12}
    b3cc:	bd30      	pop	{r4, r5, pc}
  double t2     = cosHA*site.locationEx.latitude.sine - tan(coord->d)*site.locationEx.latitude.cosine;
    b3ce:	eeb0 0b48 	vmov.f64	d0, d8
    b3d2:	f00f ff21 	bl	1b218 <tan>
    b3d6:	ee2a 1b09 	vmul.f64	d1, d10, d9
    b3da:	eeb0 7b40 	vmov.f64	d7, d0
  double t1     = sin(coord->h);
    b3de:	eeb0 0b4b 	vmov.f64	d0, d11
  double t2     = cosHA*site.locationEx.latitude.sine - tan(coord->d)*site.locationEx.latitude.cosine;
    b3e2:	eea7 1b4c 	vfms.f64	d1, d7, d12
    b3e6:	ed8d 1b00 	vstr	d1, [sp]
  double t1     = sin(coord->h);
    b3ea:	f00f fed5 	bl	1b198 <sin>
    coord->z = atan2(t1, t2);
    b3ee:	ed9d 1b00 	vldr	d1, [sp]
    b3f2:	f00e fe4b 	bl	1a08c <atan2>
    coord->z += Deg180;
    b3f6:	ed9f 7b10 	vldr	d7, [pc, #64]	; b438 <Transform::equToHor(Coordinate*)+0x110>
    b3fa:	ee30 0b07 	vadd.f64	d0, d0, d7
  if (coord->z > Deg180) coord->z -= Deg360;
    b3fe:	eeb4 0bc7 	vcmpe.f64	d0, d7
    b402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b406:	dd09      	ble.n	b41c <Transform::equToHor(Coordinate*)+0xf4>
    b408:	ed9f 7b0d 	vldr	d7, [pc, #52]	; b440 <Transform::equToHor(Coordinate*)+0x118>
    b40c:	ee30 0b47 	vsub.f64	d0, d0, d7
    b410:	ed84 0b08 	vstr	d0, [r4, #32]
}
    b414:	b003      	add	sp, #12
    b416:	ecbd 8b0a 	vpop	{d8-d12}
    b41a:	bd30      	pop	{r4, r5, pc}
    coord->z += Deg180;
    b41c:	ed84 0b08 	vstr	d0, [r4, #32]
  if (coord->z > Deg180) coord->z -= Deg360;
    b420:	e7bf      	b.n	b3a2 <Transform::equToHor(Coordinate*)+0x7a>
    b422:	bf00      	nop
    b424:	f3af 8000 	nop.w
    b428:	54442d15 	.word	0x54442d15
    b42c:	3ff921fb 	.word	0x3ff921fb
    b430:	8f231020 	.word	0x8f231020
    b434:	3ea04484 	.word	0x3ea04484
    b438:	54442d18 	.word	0x54442d18
    b43c:	400921fb 	.word	0x400921fb
    b440:	54442d18 	.word	0x54442d18
    b444:	401921fb 	.word	0x401921fb
    b448:	200055d0 	.word	0x200055d0

0000b44c <Transform::equToAlt(Coordinate*)>:
void Transform::equToAlt(Coordinate *coord) {
    b44c:	b510      	push	{r4, lr}
    b44e:	460c      	mov	r4, r1
    b450:	ed2d 8b06 	vpush	{d8-d10}
  double cosHA  = cos(coord->h);
    b454:	ed91 0b02 	vldr	d0, [r1, #8]
    b458:	f00f fe2a 	bl	1b0b0 <cos>
    b45c:	eeb0 9b40 	vmov.f64	d9, d0
  double sinAlt = sin(coord->d)*site.locationEx.latitude.sine + cos(coord->d)*site.locationEx.latitude.cosine*cosHA;  
    b460:	ed94 ab04 	vldr	d10, [r4, #16]
    b464:	eeb0 0b4a 	vmov.f64	d0, d10
    b468:	f00f fe96 	bl	1b198 <sin>
    b46c:	eeb0 8b40 	vmov.f64	d8, d0
    b470:	eeb0 0b4a 	vmov.f64	d0, d10
    b474:	f00f fe1c 	bl	1b0b0 <cos>
    b478:	4b08      	ldr	r3, [pc, #32]	; (b49c <Transform::equToAlt(Coordinate*)+0x50>)
    b47a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
    b47e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    b482:	ee20 0b07 	vmul.f64	d0, d0, d7
    b486:	ee20 0b09 	vmul.f64	d0, d0, d9
  coord->a      = asin(sinAlt);
    b48a:	eea8 0b06 	vfma.f64	d0, d8, d6
    b48e:	f00e fdd1 	bl	1a034 <asin>
}
    b492:	ecbd 8b06 	vpop	{d8-d10}
  coord->a      = asin(sinAlt);
    b496:	ed84 0b06 	vstr	d0, [r4, #24]
}
    b49a:	bd10      	pop	{r4, pc}
    b49c:	200055d0 	.word	0x200055d0

0000b4a0 <Transform::horToEqu(Coordinate*)>:
void Transform::horToEqu(Coordinate *coord) { 
    b4a0:	b538      	push	{r3, r4, r5, lr}
    b4a2:	ed2d 8b08 	vpush	{d8-d11}
  double cosAzm = cos(coord->z);
    b4a6:	ed91 bb08 	vldr	d11, [r1, #32]
void Transform::horToEqu(Coordinate *coord) { 
    b4aa:	460c      	mov	r4, r1
  double sinDec = sin(coord->a)*site.locationEx.latitude.sine + cos(coord->a)*site.locationEx.latitude.cosine*cosAzm;  
    b4ac:	4d2a      	ldr	r5, [pc, #168]	; (b558 <Transform::horToEqu(Coordinate*)+0xb8>)
  double cosAzm = cos(coord->z);
    b4ae:	eeb0 0b4b 	vmov.f64	d0, d11
    b4b2:	f00f fdfd 	bl	1b0b0 <cos>
    b4b6:	eeb0 8b40 	vmov.f64	d8, d0
  double sinDec = sin(coord->a)*site.locationEx.latitude.sine + cos(coord->a)*site.locationEx.latitude.cosine*cosAzm;  
    b4ba:	ed94 ab06 	vldr	d10, [r4, #24]
    b4be:	eeb0 0b4a 	vmov.f64	d0, d10
    b4c2:	f00f fe69 	bl	1b198 <sin>
    b4c6:	eeb0 9b40 	vmov.f64	d9, d0
    b4ca:	eeb0 0b4a 	vmov.f64	d0, d10
    b4ce:	f00f fdef 	bl	1b0b0 <cos>
    b4d2:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
    b4d6:	ed95 6b0a 	vldr	d6, [r5, #40]	; 0x28
    b4da:	ee20 0b07 	vmul.f64	d0, d0, d7
    b4de:	ee20 0b08 	vmul.f64	d0, d0, d8
  coord->d      = asin(sinDec); 
    b4e2:	eea9 0b06 	vfma.f64	d0, d9, d6
    b4e6:	f00e fda5 	bl	1a034 <asin>
    b4ea:	ed84 0b04 	vstr	d0, [r4, #16]
  double t1     = sin(coord->z);
    b4ee:	eeb0 0b4b 	vmov.f64	d0, d11
    b4f2:	f00f fe51 	bl	1b198 <sin>
    b4f6:	eeb0 9b40 	vmov.f64	d9, d0
  double t2     = cosAzm*site.locationEx.latitude.sine - tan(coord->a)*site.locationEx.latitude.cosine;
    b4fa:	eeb0 0b4a 	vmov.f64	d0, d10
    b4fe:	f00f fe8b 	bl	1b218 <tan>
    b502:	eeb0 6b40 	vmov.f64	d6, d0
  coord->h      = atan2(t1, t2);
    b506:	eeb0 0b49 	vmov.f64	d0, d9
  double t2     = cosAzm*site.locationEx.latitude.sine - tan(coord->a)*site.locationEx.latitude.cosine;
    b50a:	ed95 1b0c 	vldr	d1, [r5, #48]	; 0x30
    b50e:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
    b512:	ee21 1b46 	vnmul.f64	d1, d1, d6
  coord->h      = atan2(t1, t2);
    b516:	eea7 1b08 	vfma.f64	d1, d7, d8
    b51a:	f00e fdb7 	bl	1a08c <atan2>
  coord->h     += Deg180;
    b51e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; b548 <Transform::horToEqu(Coordinate*)+0xa8>
    b522:	ee30 0b07 	vadd.f64	d0, d0, d7
  if (coord->h > Deg180) coord->h -= Deg360;
    b526:	eeb4 0bc7 	vcmpe.f64	d0, d7
    b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b52e:	dd03      	ble.n	b538 <Transform::horToEqu(Coordinate*)+0x98>
    b530:	ed9f 7b07 	vldr	d7, [pc, #28]	; b550 <Transform::horToEqu(Coordinate*)+0xb0>
    b534:	ee30 0b47 	vsub.f64	d0, d0, d7
}
    b538:	ecbd 8b08 	vpop	{d8-d11}
  if (coord->h > Deg180) coord->h -= Deg360;
    b53c:	ed84 0b02 	vstr	d0, [r4, #8]
}
    b540:	bd38      	pop	{r3, r4, r5, pc}
    b542:	bf00      	nop
    b544:	f3af 8000 	nop.w
    b548:	54442d18 	.word	0x54442d18
    b54c:	400921fb 	.word	0x400921fb
    b550:	54442d18 	.word	0x54442d18
    b554:	401921fb 	.word	0x401921fb
    b558:	200055d0 	.word	0x200055d0
    b55c:	00000000 	.word	0x00000000

0000b560 <Transform::aaToHor(Coordinate*)>:
void Transform::aaToHor(Coordinate *coord) {
    b560:	b510      	push	{r4, lr}
    b562:	ed2d 8b06 	vpush	{d8-d10}
  double cosAA1 = cos(coord->aa1);
    b566:	ed91 ab0a 	vldr	d10, [r1, #40]	; 0x28
void Transform::aaToHor(Coordinate *coord) {
    b56a:	460c      	mov	r4, r1
  double cosAA1 = cos(coord->aa1);
    b56c:	eeb0 0b4a 	vmov.f64	d0, d10
    b570:	f00f fd9e 	bl	1b0b0 <cos>
    b574:	eeb0 9b40 	vmov.f64	d9, d0
  double sinAlt = cos(coord->aa2)*cosAA1;  
    b578:	ed94 8b0c 	vldr	d8, [r4, #48]	; 0x30
    b57c:	eeb0 0b48 	vmov.f64	d0, d8
    b580:	f00f fd96 	bl	1b0b0 <cos>
  coord->a      = asin(sinAlt);
    b584:	ee20 0b09 	vmul.f64	d0, d0, d9
    b588:	f00e fd54 	bl	1a034 <asin>
  if (fabs(coord->aa2 - Deg90) < TenthArcSec) coord->z = 0.0; else
    b58c:	ed9f 7b24 	vldr	d7, [pc, #144]	; b620 <Transform::aaToHor(Coordinate*)+0xc0>
    b590:	ed9f 5b25 	vldr	d5, [pc, #148]	; b628 <Transform::aaToHor(Coordinate*)+0xc8>
  coord->a      = asin(sinAlt);
    b594:	ed84 0b06 	vstr	d0, [r4, #24]
  if (fabs(coord->aa2 - Deg90) < TenthArcSec) coord->z = 0.0; else
    b598:	ee38 6b47 	vsub.f64	d6, d8, d7
    b59c:	eeb0 6bc6 	vabs.f64	d6, d6
    b5a0:	eeb4 6bc5 	vcmpe.f64	d6, d5
    b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b5a8:	d506      	bpl.n	b5b8 <Transform::aaToHor(Coordinate*)+0x58>
    b5aa:	2200      	movs	r2, #0
    b5ac:	2300      	movs	r3, #0
    b5ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
}
    b5b2:	ecbd 8b06 	vpop	{d8-d10}
    b5b6:	bd10      	pop	{r4, pc}
  if (fabs(coord->aa2 + Deg90) < TenthArcSec) coord->z = Deg180; else {
    b5b8:	ee38 7b07 	vadd.f64	d7, d8, d7
    b5bc:	eeb0 7bc7 	vabs.f64	d7, d7
    b5c0:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b5c8:	d507      	bpl.n	b5da <Transform::aaToHor(Coordinate*)+0x7a>
    b5ca:	a319      	add	r3, pc, #100	; (adr r3, b630 <Transform::aaToHor(Coordinate*)+0xd0>)
    b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
}
    b5d0:	ecbd 8b06 	vpop	{d8-d10}
  if (fabs(coord->aa2 + Deg90) < TenthArcSec) coord->z = Deg180; else {
    b5d4:	e9c4 2308 	strd	r2, r3, [r4, #32]
}
    b5d8:	bd10      	pop	{r4, pc}
  double t2     = -tan(coord->aa2);
    b5da:	eeb0 0b48 	vmov.f64	d0, d8
    b5de:	f00f fe1b 	bl	1b218 <tan>
    b5e2:	eeb0 8b40 	vmov.f64	d8, d0
  double t1     = sin(coord->aa1);
    b5e6:	eeb0 0b4a 	vmov.f64	d0, d10
    b5ea:	f00f fdd5 	bl	1b198 <sin>
    coord->z = atan2(t1, t2);
    b5ee:	eeb1 1b48 	vneg.f64	d1, d8
    b5f2:	f00e fd4b 	bl	1a08c <atan2>
    coord->z += Deg180;
    b5f6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; b630 <Transform::aaToHor(Coordinate*)+0xd0>
    b5fa:	ee30 0b07 	vadd.f64	d0, d0, d7
  if (coord->z > Deg180) coord->z -= Deg360;
    b5fe:	eeb4 0bc7 	vcmpe.f64	d0, d7
    b602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b606:	dd08      	ble.n	b61a <Transform::aaToHor(Coordinate*)+0xba>
    b608:	ed9f 7b0b 	vldr	d7, [pc, #44]	; b638 <Transform::aaToHor(Coordinate*)+0xd8>
}
    b60c:	ecbd 8b06 	vpop	{d8-d10}
  if (coord->z > Deg180) coord->z -= Deg360;
    b610:	ee30 0b47 	vsub.f64	d0, d0, d7
    b614:	ed84 0b08 	vstr	d0, [r4, #32]
}
    b618:	bd10      	pop	{r4, pc}
    coord->z += Deg180;
    b61a:	ed84 0b08 	vstr	d0, [r4, #32]
  if (coord->z > Deg180) coord->z -= Deg360;
    b61e:	e7c8      	b.n	b5b2 <Transform::aaToHor(Coordinate*)+0x52>
    b620:	54442d15 	.word	0x54442d15
    b624:	3ff921fb 	.word	0x3ff921fb
    b628:	8f231020 	.word	0x8f231020
    b62c:	3ea04484 	.word	0x3ea04484
    b630:	54442d18 	.word	0x54442d18
    b634:	400921fb 	.word	0x400921fb
    b638:	54442d18 	.word	0x54442d18
    b63c:	401921fb 	.word	0x401921fb

0000b640 <Transform::horToAa(Coordinate*)>:
void Transform::horToAa(Coordinate *coord) { 
    b640:	b510      	push	{r4, lr}
    b642:	ed2d 8b06 	vpush	{d8-d10}
  double cosAzm = cos(coord->z);
    b646:	ed91 ab08 	vldr	d10, [r1, #32]
void Transform::horToAa(Coordinate *coord) { 
    b64a:	460c      	mov	r4, r1
  double cosAzm = cos(coord->z);
    b64c:	eeb0 0b4a 	vmov.f64	d0, d10
    b650:	f00f fd2e 	bl	1b0b0 <cos>
    b654:	eeb0 8b40 	vmov.f64	d8, d0
  double sinAA2 = cos(coord->a)*cosAzm;  
    b658:	ed94 9b06 	vldr	d9, [r4, #24]
    b65c:	eeb0 0b49 	vmov.f64	d0, d9
    b660:	f00f fd26 	bl	1b0b0 <cos>
  coord->aa2    = asin(sinAA2); 
    b664:	ee20 0b08 	vmul.f64	d0, d0, d8
    b668:	f00e fce4 	bl	1a034 <asin>
    b66c:	ed84 0b0c 	vstr	d0, [r4, #48]	; 0x30
  double t1     = sin(coord->z);
    b670:	eeb0 0b4a 	vmov.f64	d0, d10
    b674:	f00f fd90 	bl	1b198 <sin>
    b678:	eeb0 8b40 	vmov.f64	d8, d0
  double t2     = -tan(coord->a);
    b67c:	eeb0 0b49 	vmov.f64	d0, d9
    b680:	f00f fdca 	bl	1b218 <tan>
  coord->aa1    = atan2(t1, t2);
    b684:	eeb1 1b40 	vneg.f64	d1, d0
    b688:	eeb0 0b48 	vmov.f64	d0, d8
    b68c:	f00e fcfe 	bl	1a08c <atan2>
  coord->aa1    += Deg180;
    b690:	ed9f 7b09 	vldr	d7, [pc, #36]	; b6b8 <Transform::horToAa(Coordinate*)+0x78>
    b694:	ee30 0b07 	vadd.f64	d0, d0, d7
  if (coord->aa1 > Deg180) coord->aa1 -= Deg360;
    b698:	eeb4 0bc7 	vcmpe.f64	d0, d7
    b69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b6a0:	dd03      	ble.n	b6aa <Transform::horToAa(Coordinate*)+0x6a>
    b6a2:	ed9f 7b07 	vldr	d7, [pc, #28]	; b6c0 <Transform::horToAa(Coordinate*)+0x80>
    b6a6:	ee30 0b47 	vsub.f64	d0, d0, d7
}
    b6aa:	ecbd 8b06 	vpop	{d8-d10}
  if (coord->aa1 > Deg180) coord->aa1 -= Deg360;
    b6ae:	ed84 0b0a 	vstr	d0, [r4, #40]	; 0x28
}
    b6b2:	bd10      	pop	{r4, pc}
    b6b4:	f3af 8000 	nop.w
    b6b8:	54442d18 	.word	0x54442d18
    b6bc:	400921fb 	.word	0x400921fb
    b6c0:	54442d18 	.word	0x54442d18
    b6c4:	401921fb 	.word	0x401921fb

0000b6c8 <Transform::trueRefrac(double)>:
double Transform::trueRefrac(double altitude) {
    b6c8:	b508      	push	{r3, lr}
  if (!isnan(weather.getPressure())) pressure = weather.getPressure();
    b6ca:	4831      	ldr	r0, [pc, #196]	; (b790 <Transform::trueRefrac(double)+0xc8>)
double Transform::trueRefrac(double altitude) {
    b6cc:	ed2d 8b04 	vpush	{d8-d9}
    b6d0:	eeb0 8b40 	vmov.f64	d8, d0
  if (!isnan(weather.getPressure())) pressure = weather.getPressure();
    b6d4:	f7fb fda2 	bl	721c <Weather::getPressure()>
    b6d8:	eeb4 0a40 	vcmp.f32	s0, s0
    b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b6e0:	d647      	bvs.n	b772 <Transform::trueRefrac(double)+0xaa>
    b6e2:	482b      	ldr	r0, [pc, #172]	; (b790 <Transform::trueRefrac(double)+0xc8>)
    b6e4:	f7fb fd9a 	bl	721c <Weather::getPressure()>
    b6e8:	eeb0 9a40 	vmov.f32	s18, s0
  if (!isnan(weather.getTemperature())) temperature = weather.getTemperature();
    b6ec:	4828      	ldr	r0, [pc, #160]	; (b790 <Transform::trueRefrac(double)+0xc8>)
    b6ee:	f7fb fd73 	bl	71d8 <Weather::getTemperature()>
    b6f2:	eeb4 0a40 	vcmp.f32	s0, s0
    b6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b6fa:	d637      	bvs.n	b76c <Transform::trueRefrac(double)+0xa4>
    b6fc:	4824      	ldr	r0, [pc, #144]	; (b790 <Transform::trueRefrac(double)+0xc8>)
    b6fe:	f7fb fd6b 	bl	71d8 <Weather::getTemperature()>
  float TPC = (pressure/1010.0F)*(283.0F/(273.0F + temperature));
    b702:	ed9f 7a24 	vldr	s14, [pc, #144]	; b794 <Transform::trueRefrac(double)+0xcc>
    b706:	eddf 7a24 	vldr	s15, [pc, #144]	; b798 <Transform::trueRefrac(double)+0xd0>
    b70a:	ee30 0a07 	vadd.f32	s0, s0, s14
    b70e:	eec7 9a80 	vdiv.f32	s19, s15, s0
  float r   = 2.9670597e-4F*cotf(altitude + 0.0031375594F/(altitude + 0.089186324F))*TPC;
    b712:	ed9f 6b19 	vldr	d6, [pc, #100]	; b778 <Transform::trueRefrac(double)+0xb0>
    b716:	ed9f 5b1a 	vldr	d5, [pc, #104]	; b780 <Transform::trueRefrac(double)+0xb8>
    b71a:	ee38 6b06 	vadd.f64	d6, d8, d6
    b71e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    b722:	ee37 7b08 	vadd.f64	d7, d7, d8
  return 1.0F/tanf(n);
    b726:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
    b72a:	f00f fd0b 	bl	1b144 <tanf>
    b72e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  float TPC = (pressure/1010.0F)*(283.0F/(273.0F + temperature));
    b732:	eddf 7a1a 	vldr	s15, [pc, #104]	; b79c <Transform::trueRefrac(double)+0xd4>
  float r   = 2.9670597e-4F*cotf(altitude + 0.0031375594F/(altitude + 0.089186324F))*TPC;
    b736:	eddf 6a1a 	vldr	s13, [pc, #104]	; b7a0 <Transform::trueRefrac(double)+0xd8>
  float TPC = (pressure/1010.0F)*(283.0F/(273.0F + temperature));
    b73a:	ee89 7a27 	vdiv.f32	s14, s18, s15
  return 1.0F/tanf(n);
    b73e:	eec6 7a00 	vdiv.f32	s15, s12, s0
  float TPC = (pressure/1010.0F)*(283.0F/(273.0F + temperature));
    b742:	ee27 7a29 	vmul.f32	s14, s14, s19
  float r   = 2.9670597e-4F*cotf(altitude + 0.0031375594F/(altitude + 0.089186324F))*TPC;
    b746:	ee27 0aa6 	vmul.f32	s0, s15, s13
    b74a:	ee20 0a07 	vmul.f32	s0, s0, s14
  if (r < 0.0F) r = 0.0F;
    b74e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    b752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b756:	d404      	bmi.n	b762 <Transform::trueRefrac(double)+0x9a>
  return r;
    b758:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
}
    b75c:	ecbd 8b04 	vpop	{d8-d9}
    b760:	bd08      	pop	{r3, pc}
    b762:	ecbd 8b04 	vpop	{d8-d9}
    b766:	ed9f 0b08 	vldr	d0, [pc, #32]	; b788 <Transform::trueRefrac(double)+0xc0>
    b76a:	bd08      	pop	{r3, pc}
    b76c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    b770:	e7cf      	b.n	b712 <Transform::trueRefrac(double)+0x4a>
  float pressure = 1010.0F;
    b772:	ed9f 9a0a 	vldr	s18, [pc, #40]	; b79c <Transform::trueRefrac(double)+0xd4>
    b776:	e7b9      	b.n	b6ec <Transform::trueRefrac(double)+0x24>
    b778:	40000000 	.word	0x40000000
    b77c:	3fb6d4ea 	.word	0x3fb6d4ea
    b780:	60000000 	.word	0x60000000
    b784:	3f69b3f0 	.word	0x3f69b3f0
	...
    b790:	200048a4 	.word	0x200048a4
    b794:	43888000 	.word	0x43888000
    b798:	438d8000 	.word	0x438d8000
    b79c:	447c8000 	.word	0x447c8000
    b7a0:	399b8f34 	.word	0x399b8f34
    b7a4:	00000000 	.word	0x00000000

0000b7a8 <Transform::topocentricToObservedPlace(Coordinate*)>:
void Transform::topocentricToObservedPlace(Coordinate *coord) {
    b7a8:	b538      	push	{r3, r4, r5, lr}
  if (mountType != ALTAZM) {
    b7aa:	f990 35c4 	ldrsb.w	r3, [r0, #1476]	; 0x5c4
void Transform::topocentricToObservedPlace(Coordinate *coord) {
    b7ae:	460c      	mov	r4, r1
  if (mountType != ALTAZM) {
    b7b0:	2b03      	cmp	r3, #3
    b7b2:	d02c      	beq.n	b80e <Transform::topocentricToObservedPlace(Coordinate*)+0x66>
      if (fabs(coord->d - Deg90) < OneArcSec || fabs(coord->d + Deg90) < OneArcSec) return; else equToHor(coord);
    b7b4:	ed91 7b04 	vldr	d7, [r1, #16]
    b7b8:	ed9f 4b1b 	vldr	d4, [pc, #108]	; b828 <Transform::topocentricToObservedPlace(Coordinate*)+0x80>
    b7bc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; b830 <Transform::topocentricToObservedPlace(Coordinate*)+0x88>
    b7c0:	ee37 6b44 	vsub.f64	d6, d7, d4
    b7c4:	eeb0 6bc6 	vabs.f64	d6, d6
    b7c8:	eeb4 6bc5 	vcmpe.f64	d6, d5
    b7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7d0:	d408      	bmi.n	b7e4 <Transform::topocentricToObservedPlace(Coordinate*)+0x3c>
    b7d2:	ee37 7b04 	vadd.f64	d7, d7, d4
    b7d6:	eeb0 7bc7 	vabs.f64	d7, d7
    b7da:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b7e2:	d500      	bpl.n	b7e6 <Transform::topocentricToObservedPlace(Coordinate*)+0x3e>
}
    b7e4:	bd38      	pop	{r3, r4, r5, pc}
      if (fabs(coord->d - Deg90) < OneArcSec || fabs(coord->d + Deg90) < OneArcSec) return; else equToHor(coord);
    b7e6:	4605      	mov	r5, r0
    b7e8:	f7ff fd9e 	bl	b328 <Transform::equToHor(Coordinate*)>
    coord->a += trueRefrac(coord->a);
    b7ec:	4628      	mov	r0, r5
    b7ee:	ed94 0b06 	vldr	d0, [r4, #24]
    b7f2:	f7ff ff69 	bl	b6c8 <Transform::trueRefrac(double)>
    horToEqu(coord);
    b7f6:	4621      	mov	r1, r4
    b7f8:	4628      	mov	r0, r5
    coord->a += trueRefrac(coord->a);
    b7fa:	ed94 7b06 	vldr	d7, [r4, #24]
    b7fe:	ee37 0b00 	vadd.f64	d0, d7, d0
    b802:	ed84 0b06 	vstr	d0, [r4, #24]
}
    b806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    horToEqu(coord);
    b80a:	f7ff be49 	b.w	b4a0 <Transform::horToEqu(Coordinate*)>
  } else coord->a += trueRefrac(coord->a);
    b80e:	ed91 0b06 	vldr	d0, [r1, #24]
    b812:	f7ff ff59 	bl	b6c8 <Transform::trueRefrac(double)>
    b816:	ed94 7b06 	vldr	d7, [r4, #24]
    b81a:	ee37 0b00 	vadd.f64	d0, d7, d0
    b81e:	ed84 0b06 	vstr	d0, [r4, #24]
}
    b822:	bd38      	pop	{r3, r4, r5, pc}
    b824:	f3af 8000 	nop.w
    b828:	54442d15 	.word	0x54442d15
    b82c:	3ff921fb 	.word	0x3ff921fb
    b830:	b2fdd7d8 	.word	0xb2fdd7d8
    b834:	3ed455a5 	.word	0x3ed455a5

0000b838 <Transform::nativeToMount(Coordinate*, double*, double*)>:
  if (isnan(coord->r)) return; // NAN flags mount coordinates
    b838:	ed91 7b00 	vldr	d7, [r1]
void Transform::nativeToMount(Coordinate *coord, double *a1, double *a2) {
    b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isnan(coord->r)) return; // NAN flags mount coordinates
    b83e:	eeb4 7b47 	vcmp.f64	d7, d7
void Transform::nativeToMount(Coordinate *coord, double *a1, double *a2) {
    b842:	460c      	mov	r4, r1
    b844:	4605      	mov	r5, r0
    b846:	4616      	mov	r6, r2
    b848:	461f      	mov	r7, r3
  if (isnan(coord->r)) return; // NAN flags mount coordinates
    b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b84e:	d630      	bvs.n	b8b2 <Transform::nativeToMount(Coordinate*, double*, double*)+0x7a>
  noInterrupts();
    b850:	b672      	cpsid	i
  unsigned long fs = fracLAST;
    b852:	4b4d      	ldr	r3, [pc, #308]	; (b988 <Transform::nativeToMount(Coordinate*, double*, double*)+0x150>)
    b854:	ed93 5a00 	vldr	s10, [r3]
  interrupts();
    b858:	b662      	cpsie	i
  coord->h = fsToRad(fs) - coord->r;
    b85a:	ed9f 3b43 	vldr	d3, [pc, #268]	; b968 <Transform::nativeToMount(Coordinate*, double*, double*)+0x130>
    b85e:	eeb8 5b45 	vcvt.f64.u32	d5, s10
    b862:	ed91 4b00 	vldr	d4, [r1]
    b866:	ee85 7b03 	vdiv.f64	d7, d5, d3
  while (angle >= Deg180) angle -= Deg360;
    b86a:	ed9f 6b41 	vldr	d6, [pc, #260]	; b970 <Transform::nativeToMount(Coordinate*, double*, double*)+0x138>
  coord->h = fsToRad(fs) - coord->r;
    b86e:	ee37 7b44 	vsub.f64	d7, d7, d4
  while (angle >= Deg180) angle -= Deg360;
    b872:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b87a:	db08      	blt.n	b88e <Transform::nativeToMount(Coordinate*, double*, double*)+0x56>
    b87c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; b978 <Transform::nativeToMount(Coordinate*, double*, double*)+0x140>
    b880:	ee37 7b45 	vsub.f64	d7, d7, d5
    b884:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b88c:	daf8      	bge.n	b880 <Transform::nativeToMount(Coordinate*, double*, double*)+0x48>
  while (angle < -Deg180) angle += Deg360;
    b88e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; b980 <Transform::nativeToMount(Coordinate*, double*, double*)+0x148>
    b892:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b89a:	d508      	bpl.n	b8ae <Transform::nativeToMount(Coordinate*, double*, double*)+0x76>
    b89c:	ed9f 5b36 	vldr	d5, [pc, #216]	; b978 <Transform::nativeToMount(Coordinate*, double*, double*)+0x140>
    b8a0:	ee37 7b05 	vadd.f64	d7, d7, d5
    b8a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b8ac:	d4f8      	bmi.n	b8a0 <Transform::nativeToMount(Coordinate*, double*, double*)+0x68>
  if (native) coord->h = backInRads2(coord->h);
    b8ae:	ed84 7b02 	vstr	d7, [r4, #8]
  if (mountType == ALTAZM) equToHor(coord); else
    b8b2:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
    b8b6:	2b03      	cmp	r3, #3
    b8b8:	d035      	beq.n	b926 <Transform::nativeToMount(Coordinate*, double*, double*)+0xee>
  if (mountType == ALTALT) equToAa(coord);
    b8ba:	2b04      	cmp	r3, #4
    b8bc:	d03f      	beq.n	b93e <Transform::nativeToMount(Coordinate*, double*, double*)+0x106>
  topocentricToObservedPlace(coord);
    b8be:	4621      	mov	r1, r4
    b8c0:	4628      	mov	r0, r5
    b8c2:	f7ff ff71 	bl	b7a8 <Transform::topocentricToObservedPlace(Coordinate*)>
    if (coord->pierSide != PIER_SIDE_NONE) align.observedPlaceToMount(coord);
    b8c6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    b8ca:	bb3b      	cbnz	r3, b91c <Transform::nativeToMount(Coordinate*, double*, double*)+0xe4>
  if (mountType == ALTAZM) {
    b8cc:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
    b8d0:	2b03      	cmp	r3, #3
    b8d2:	d010      	beq.n	b8f6 <Transform::nativeToMount(Coordinate*, double*, double*)+0xbe>
    coord->a2 = coord->d;
    b8d4:	ed94 7b04 	vldr	d7, [r4, #16]
    coord->a1 = coord->h;
    b8d8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    coord->a2 = coord->d;
    b8dc:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
    coord->a1 = coord->h;
    b8e0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
  if (a1 != NULL && a2 != NULL) {
    b8e4:	b136      	cbz	r6, b8f4 <Transform::nativeToMount(Coordinate*, double*, double*)+0xbc>
    b8e6:	b12f      	cbz	r7, b8f4 <Transform::nativeToMount(Coordinate*, double*, double*)+0xbc>
    if (mountType == ALTALT) { *a1 = coord->aa1; *a2 = coord->aa2; } else
    b8e8:	2b04      	cmp	r3, #4
    b8ea:	d031      	beq.n	b950 <Transform::nativeToMount(Coordinate*, double*, double*)+0x118>
    b8ec:	3b01      	subs	r3, #1
    if (isEquatorial()) { *a1 = coord->h; *a2 = coord->d; }
    b8ee:	b2db      	uxtb	r3, r3
    b8f0:	2b01      	cmp	r3, #1
    b8f2:	d91d      	bls.n	b930 <Transform::nativeToMount(Coordinate*, double*, double*)+0xf8>
}
    b8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    coord->a1 = coord->z;
    b8f6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
    coord->a2 = coord->a;
    b8fa:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    coord->a1 = coord->z;
    b8fe:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    coord->a2 = coord->a;
    b902:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
  if (a1 != NULL && a2 != NULL) {
    b906:	2e00      	cmp	r6, #0
    b908:	d0f4      	beq.n	b8f4 <Transform::nativeToMount(Coordinate*, double*, double*)+0xbc>
    b90a:	2f00      	cmp	r7, #0
    b90c:	d0f2      	beq.n	b8f4 <Transform::nativeToMount(Coordinate*, double*, double*)+0xbc>
    if (mountType == ALTAZM) { *a1 = coord->z; *a2 = coord->a; } else
    b90e:	e9c6 2300 	strd	r2, r3, [r6]
    b912:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    b916:	e9c7 2300 	strd	r2, r3, [r7]
}
    b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (coord->pierSide != PIER_SIDE_NONE) align.observedPlaceToMount(coord);
    b91c:	4621      	mov	r1, r4
    b91e:	4628      	mov	r0, r5
    b920:	f7fe ff7a 	bl	a818 <GeoAlign::observedPlaceToMount(Coordinate*)>
    b924:	e7d2      	b.n	b8cc <Transform::nativeToMount(Coordinate*, double*, double*)+0x94>
  if (mountType == ALTAZM) equToHor(coord); else
    b926:	4621      	mov	r1, r4
    b928:	4628      	mov	r0, r5
    b92a:	f7ff fcfd 	bl	b328 <Transform::equToHor(Coordinate*)>
    b92e:	e7c6      	b.n	b8be <Transform::nativeToMount(Coordinate*, double*, double*)+0x86>
    if (isEquatorial()) { *a1 = coord->h; *a2 = coord->d; }
    b930:	e9c6 0100 	strd	r0, r1, [r6]
    b934:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b938:	e9c7 2300 	strd	r2, r3, [r7]
}
    b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
    b93e:	4621      	mov	r1, r4
    b940:	4628      	mov	r0, r5
    b942:	f7ff fcf1 	bl	b328 <Transform::equToHor(Coordinate*)>
    b946:	4621      	mov	r1, r4
    b948:	4628      	mov	r0, r5
    b94a:	f7ff fe79 	bl	b640 <Transform::horToAa(Coordinate*)>
    b94e:	e7b6      	b.n	b8be <Transform::nativeToMount(Coordinate*, double*, double*)+0x86>
    if (mountType == ALTALT) { *a1 = coord->aa1; *a2 = coord->aa2; } else
    b950:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    b954:	e9c6 2300 	strd	r2, r3, [r6]
    b958:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
    b95c:	e9c7 2300 	strd	r2, r3, [r7]
}
    b960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b962:	bf00      	nop
    b964:	f3af 8000 	nop.w
    b968:	6d81df90 	.word	0x6d81df90
    b96c:	415b9bbc 	.word	0x415b9bbc
    b970:	54442d18 	.word	0x54442d18
    b974:	400921fb 	.word	0x400921fb
    b978:	54442d18 	.word	0x54442d18
    b97c:	401921fb 	.word	0x401921fb
    b980:	54442d18 	.word	0x54442d18
    b984:	c00921fb 	.word	0xc00921fb
    b988:	20005be8 	.word	0x20005be8
    b98c:	00000000 	.word	0x00000000

0000b990 <Transform::observedPlaceToTopocentric(Coordinate*)>:
void Transform::observedPlaceToTopocentric(Coordinate *coord) {
    b990:	b538      	push	{r3, r4, r5, lr}
    b992:	ed2d 8b02 	vpush	{d8}
  if (mountType != ALTAZM) {
    b996:	f990 35c4 	ldrsb.w	r3, [r0, #1476]	; 0x5c4
void Transform::observedPlaceToTopocentric(Coordinate *coord) {
    b99a:	4605      	mov	r5, r0
    b99c:	460c      	mov	r4, r1
  if (mountType != ALTAZM) {
    b99e:	2b03      	cmp	r3, #3
    b9a0:	d036      	beq.n	ba10 <Transform::observedPlaceToTopocentric(Coordinate*)+0x80>
      if (fabs(coord->d - Deg90) < OneArcSec || fabs(coord->d + Deg90) < OneArcSec) return; else equToHor(coord);
    b9a2:	ed91 7b04 	vldr	d7, [r1, #16]
    b9a6:	ed9f 4b24 	vldr	d4, [pc, #144]	; ba38 <Transform::observedPlaceToTopocentric(Coordinate*)+0xa8>
    b9aa:	ed9f 5b25 	vldr	d5, [pc, #148]	; ba40 <Transform::observedPlaceToTopocentric(Coordinate*)+0xb0>
    b9ae:	ee37 6b44 	vsub.f64	d6, d7, d4
    b9b2:	eeb0 6bc6 	vabs.f64	d6, d6
    b9b6:	eeb4 6bc5 	vcmpe.f64	d6, d5
    b9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9be:	d408      	bmi.n	b9d2 <Transform::observedPlaceToTopocentric(Coordinate*)+0x42>
    b9c0:	ee37 7b04 	vadd.f64	d7, d7, d4
    b9c4:	eeb0 7bc7 	vabs.f64	d7, d7
    b9c8:	eeb4 7bc5 	vcmpe.f64	d7, d5
    b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b9d0:	d502      	bpl.n	b9d8 <Transform::observedPlaceToTopocentric(Coordinate*)+0x48>
}
    b9d2:	ecbd 8b02 	vpop	{d8}
    b9d6:	bd38      	pop	{r3, r4, r5, pc}
      if (fabs(coord->d - Deg90) < OneArcSec || fabs(coord->d + Deg90) < OneArcSec) return; else equToHor(coord);
    b9d8:	f7ff fca6 	bl	b328 <Transform::equToHor(Coordinate*)>
  double r = trueRefrac(altitude);
    b9dc:	4628      	mov	r0, r5
    coord->a -= apparentRefrac(coord->a);
    b9de:	ed94 8b06 	vldr	d8, [r4, #24]
  double r = trueRefrac(altitude);
    b9e2:	eeb0 0b48 	vmov.f64	d0, d8
    b9e6:	f7ff fe6f 	bl	b6c8 <Transform::trueRefrac(double)>
  return trueRefrac(altitude - r);
    b9ea:	4628      	mov	r0, r5
    b9ec:	ee38 0b40 	vsub.f64	d0, d8, d0
    b9f0:	f7ff fe6a 	bl	b6c8 <Transform::trueRefrac(double)>
    horToEqu(coord);
    b9f4:	4621      	mov	r1, r4
    b9f6:	4628      	mov	r0, r5
    coord->a -= apparentRefrac(coord->a);
    b9f8:	ed94 7b06 	vldr	d7, [r4, #24]
}
    b9fc:	ecbd 8b02 	vpop	{d8}
    coord->a -= apparentRefrac(coord->a);
    ba00:	ee37 0b40 	vsub.f64	d0, d7, d0
    ba04:	ed84 0b06 	vstr	d0, [r4, #24]
}
    ba08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    horToEqu(coord);
    ba0c:	f7ff bd48 	b.w	b4a0 <Transform::horToEqu(Coordinate*)>
  } else coord->a -= apparentRefrac(coord->a);
    ba10:	ed91 8b06 	vldr	d8, [r1, #24]
  double r = trueRefrac(altitude);
    ba14:	eeb0 0b48 	vmov.f64	d0, d8
    ba18:	f7ff fe56 	bl	b6c8 <Transform::trueRefrac(double)>
  return trueRefrac(altitude - r);
    ba1c:	4628      	mov	r0, r5
    ba1e:	ee38 0b40 	vsub.f64	d0, d8, d0
    ba22:	f7ff fe51 	bl	b6c8 <Transform::trueRefrac(double)>
  } else coord->a -= apparentRefrac(coord->a);
    ba26:	ed94 7b06 	vldr	d7, [r4, #24]
}
    ba2a:	ecbd 8b02 	vpop	{d8}
  } else coord->a -= apparentRefrac(coord->a);
    ba2e:	ee37 0b40 	vsub.f64	d0, d7, d0
    ba32:	ed84 0b06 	vstr	d0, [r4, #24]
}
    ba36:	bd38      	pop	{r3, r4, r5, pc}
    ba38:	54442d15 	.word	0x54442d15
    ba3c:	3ff921fb 	.word	0x3ff921fb
    ba40:	b2fdd7d8 	.word	0xb2fdd7d8
    ba44:	3ed455a5 	.word	0x3ed455a5

0000ba48 <Transform::mountToTopocentric(Coordinate*)>:
void Transform::mountToTopocentric(Coordinate *coord) {
    ba48:	b538      	push	{r3, r4, r5, lr}
    if (coord->pierSide != PIER_SIDE_NONE) align.mountToObservedPlace(coord);
    ba4a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
void Transform::mountToTopocentric(Coordinate *coord) {
    ba4e:	460c      	mov	r4, r1
    ba50:	4605      	mov	r5, r0
    if (coord->pierSide != PIER_SIDE_NONE) align.mountToObservedPlace(coord);
    ba52:	b92b      	cbnz	r3, ba60 <Transform::mountToTopocentric(Coordinate*)+0x18>
  observedPlaceToTopocentric(coord);
    ba54:	4621      	mov	r1, r4
    ba56:	4628      	mov	r0, r5
}
    ba58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  observedPlaceToTopocentric(coord);
    ba5c:	f7ff bf98 	b.w	b990 <Transform::observedPlaceToTopocentric(Coordinate*)>
    if (coord->pierSide != PIER_SIDE_NONE) align.mountToObservedPlace(coord);
    ba60:	f7ff f8ae 	bl	abc0 <GeoAlign::mountToObservedPlace(Coordinate*)>
  observedPlaceToTopocentric(coord);
    ba64:	4621      	mov	r1, r4
    ba66:	4628      	mov	r0, r5
}
    ba68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  observedPlaceToTopocentric(coord);
    ba6c:	f7ff bf90 	b.w	b990 <Transform::observedPlaceToTopocentric(Coordinate*)>

0000ba70 <Transform::mountToNative(Coordinate*, bool)>:
Coordinate Transform::mountToNative(Coordinate *coord, bool returnHorizonCoords) {
    ba70:	b570      	push	{r4, r5, r6, lr}
    ba72:	4604      	mov	r4, r0
    ba74:	460d      	mov	r5, r1
  Coordinate result = *coord;
    ba76:	4611      	mov	r1, r2
    ba78:	2258      	movs	r2, #88	; 0x58
Coordinate Transform::mountToNative(Coordinate *coord, bool returnHorizonCoords) {
    ba7a:	461e      	mov	r6, r3
  Coordinate result = *coord;
    ba7c:	f00c fd26 	bl	184cc <memcpy>
    if (coord->pierSide != PIER_SIDE_NONE) align.mountToObservedPlace(coord);
    ba80:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    ba84:	2b00      	cmp	r3, #0
    ba86:	d146      	bne.n	bb16 <Transform::mountToNative(Coordinate*, bool)+0xa6>
  observedPlaceToTopocentric(coord);
    ba88:	4621      	mov	r1, r4
    ba8a:	4628      	mov	r0, r5
    ba8c:	f7ff ff80 	bl	b990 <Transform::observedPlaceToTopocentric(Coordinate*)>
  if (mountType == ALTAZM) horToEqu(&result); else
    ba90:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
    ba94:	2a03      	cmp	r2, #3
    ba96:	d039      	beq.n	bb0c <Transform::mountToNative(Coordinate*, bool)+0x9c>
  if (mountType == ALTALT) aaToEqu(&result);
    ba98:	2a04      	cmp	r2, #4
    ba9a:	d033      	beq.n	bb04 <Transform::mountToNative(Coordinate*, bool)+0x94>
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    ba9c:	3a01      	subs	r2, #1
  if (isEquatorial() && returnHorizonCoords) equToHor(&result);
    ba9e:	b2d2      	uxtb	r2, r2
    baa0:	2a01      	cmp	r2, #1
    baa2:	d800      	bhi.n	baa6 <Transform::mountToNative(Coordinate*, bool)+0x36>
    baa4:	bbe6      	cbnz	r6, bb20 <Transform::mountToNative(Coordinate*, bool)+0xb0>
  noInterrupts();
    baa6:	b672      	cpsid	i
  unsigned long fs = fracLAST;
    baa8:	4b25      	ldr	r3, [pc, #148]	; (bb40 <Transform::mountToNative(Coordinate*, bool)+0xd0>)
    baaa:	ed93 5a00 	vldr	s10, [r3]
  interrupts();
    baae:	b662      	cpsie	i
  coord->r = fsToRad(fs) - coord->h;
    bab0:	ed9f 3b1f 	vldr	d3, [pc, #124]	; bb30 <Transform::mountToNative(Coordinate*, bool)+0xc0>
    bab4:	eeb8 5b45 	vcvt.f64.u32	d5, s10
    bab8:	ed94 4b02 	vldr	d4, [r4, #8]
    babc:	ee85 7b03 	vdiv.f64	d7, d5, d3
  while (angle >= Deg360) angle -= Deg360;
    bac0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; bb38 <Transform::mountToNative(Coordinate*, bool)+0xc8>
  coord->r = fsToRad(fs) - coord->h;
    bac4:	ee37 7b44 	vsub.f64	d7, d7, d4
  while (angle >= Deg360) angle -= Deg360;
    bac8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    bacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bad0:	db06      	blt.n	bae0 <Transform::mountToNative(Coordinate*, bool)+0x70>
    bad2:	ee37 7b46 	vsub.f64	d7, d7, d6
    bad6:	eeb4 7bc6 	vcmpe.f64	d7, d6
    bada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bade:	daf8      	bge.n	bad2 <Transform::mountToNative(Coordinate*, bool)+0x62>
  while (angle < 0.0)     angle += Deg360;
    bae0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    bae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bae8:	d508      	bpl.n	bafc <Transform::mountToNative(Coordinate*, bool)+0x8c>
    baea:	ed9f 6b13 	vldr	d6, [pc, #76]	; bb38 <Transform::mountToNative(Coordinate*, bool)+0xc8>
    baee:	ee37 7b06 	vadd.f64	d7, d7, d6
    baf2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    baf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bafa:	d4f8      	bmi.n	baee <Transform::mountToNative(Coordinate*, bool)+0x7e>
}
    bafc:	4620      	mov	r0, r4
  if (native) coord->r = backInRads(coord->r);
    bafe:	ed84 7b00 	vstr	d7, [r4]
}
    bb02:	bd70      	pop	{r4, r5, r6, pc}
    void aaToEqu(Coordinate *coord) { aaToHor(coord); horToEqu(coord); };
    bb04:	4621      	mov	r1, r4
    bb06:	4628      	mov	r0, r5
    bb08:	f7ff fd2a 	bl	b560 <Transform::aaToHor(Coordinate*)>
    bb0c:	4621      	mov	r1, r4
    bb0e:	4628      	mov	r0, r5
    bb10:	f7ff fcc6 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    bb14:	e7c7      	b.n	baa6 <Transform::mountToNative(Coordinate*, bool)+0x36>
    if (coord->pierSide != PIER_SIDE_NONE) align.mountToObservedPlace(coord);
    bb16:	4621      	mov	r1, r4
    bb18:	4628      	mov	r0, r5
    bb1a:	f7ff f851 	bl	abc0 <GeoAlign::mountToObservedPlace(Coordinate*)>
    bb1e:	e7b3      	b.n	ba88 <Transform::mountToNative(Coordinate*, bool)+0x18>
  if (isEquatorial() && returnHorizonCoords) equToHor(&result);
    bb20:	4621      	mov	r1, r4
    bb22:	4628      	mov	r0, r5
    bb24:	f7ff fc00 	bl	b328 <Transform::equToHor(Coordinate*)>
    bb28:	e7bd      	b.n	baa6 <Transform::mountToNative(Coordinate*, bool)+0x36>
    bb2a:	bf00      	nop
    bb2c:	f3af 8000 	nop.w
    bb30:	6d81df90 	.word	0x6d81df90
    bb34:	415b9bbc 	.word	0x415b9bbc
    bb38:	54442d18 	.word	0x54442d18
    bb3c:	401921fb 	.word	0x401921fb
    bb40:	20005be8 	.word	0x20005be8

0000bb44 <_GLOBAL__sub_I__ZN9Transform4initEv>:
  float hca;
  float dcp;
  float dca;
} AlignModel;

class GeoAlign
    bb44:	4b04      	ldr	r3, [pc, #16]	; (bb58 <_GLOBAL__sub_I__ZN9Transform4initEv+0x14>)
    bb46:	2200      	movs	r2, #0
class Transform {
    bb48:	2101      	movs	r1, #1
    bb4a:	701a      	strb	r2, [r3, #0]
    bb4c:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
    bb50:	f883 15c4 	strb.w	r1, [r3, #1476]	; 0x5c4

Transform transform;
    bb54:	4770      	bx	lr
    bb56:	bf00      	nop
    bb58:	200064ac 	.word	0x200064ac
    bb5c:	00000000 	.word	0x00000000

0000bb60 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "../guide/Guide.h"
#include "../home/Home.h"
#include "../limits/Limits.h"
#include "../status/Status.h"

bool Goto::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    bb60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bb64:	461d      	mov	r5, r3
    bb66:	4614      	mov	r4, r2
    bb68:	4607      	mov	r7, r0
    bb6a:	4688      	mov	r8, r1
    bb6c:	ed2d 8b02 	vpush	{d8}
  PrecisionMode precisionMode = PM_HIGH;

  if (command[0] == 'A') {
    bb70:	7813      	ldrb	r3, [r2, #0]
bool Goto::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    bb72:	b0d9      	sub	sp, #356	; 0x164
  if (command[0] == 'A') {
    bb74:	2b41      	cmp	r3, #65	; 0x41
    bb76:	f000 80d8 	beq.w	bd2a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ca>
  //  C - Sync Control
  // :CS#       Synchonize the telescope with the current right ascension and declination coordinates
  //            Returns: Nothing (Sync's fail silently)
  // :CM#       Synchonize the telescope with the current database object (as above)
  //            Returns: "N/A#" on success, "En#" on failure where n is the error code per the :MS# command
  if (command[0] == 'C' && (command[1] == 'S' || command[1] == 'M') && parameter[0] == 0) {
    bb7a:	2b43      	cmp	r3, #67	; 0x43
    bb7c:	d049      	beq.n	bc12 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb2>
    *numericReply = false;
  } else

  //  D - Distance Bars
  // :D#        Return: "\0x7f#" if the mount is moving, otherwise "#".
  if (command[0] == 'D' && command[1] == 0) {
    bb7e:	2b44      	cmp	r3, #68	; 0x44
    bb80:	f000 80b3 	beq.w	bcea <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18a>
      *supressFrame = true;
    }
    *numericReply = false;
  } else

  if (command[0] == 'G') {
    bb84:	2b47      	cmp	r3, #71	; 0x47
    bb86:	f000 8118 	beq.w	bdba <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x25a>
       *numericReply = false;
      } else return false;
    } else return false;
  } else

  if (command[0] == 'M') {
    bb8a:	2b4d      	cmp	r3, #77	; 0x4d
    bb8c:	f040 80e4 	bne.w	bd58 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1f8>
    // :MA#       Goto the target Alt and Az
    //            Returns: 0..9, see :MS#
    if (command[1] == 'A' && parameter[0] == 0) {
    bb90:	7853      	ldrb	r3, [r2, #1]
    bb92:	2b41      	cmp	r3, #65	; 0x41
    bb94:	f000 82df 	beq.w	c156 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5f6>
    // :MD#       Goto Destination pier side for the Target Object
    //            Returns:
    //              0=destination is East of the pier
    //              1=destination is West of the pier
    //              2=destination is Unknown
    if (command[1] == 'D' && parameter[0] == 0) {
    bb98:	2b44      	cmp	r3, #68	; 0x44
    bb9a:	f000 81a9 	beq.w	bef0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x390>

    //  :MN#   Goto current RA/Dec but opposite Pier side (within meridian limit overlap)
    //  :MNe#  Goto current RA/Dec but East of the Pier (within meridian limit overlap)
    //  :MNw#  Goto current RA/Dec but West of the Pier (within meridian limit overlap)
    //         Returns: 0..9, see :MS#
    if (command[1] == 'N') {
    bb9e:	2b4e      	cmp	r3, #78	; 0x4e
    bba0:	f000 81d6 	beq.w	bf50 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3f0>
      } else *commandError = CE_CMD_UNKNOWN;
    } else

    // :MP#       Goto the Current Position for Polar Align
    //            Returns: 0..9, see :MS#
    if (command[1] == 'P' && parameter[0] == 0) {
    bba4:	2b50      	cmp	r3, #80	; 0x50
    bba6:	f000 835e 	beq.w	c266 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x706>
    //              5=goto in progress
    //              6=outside limits
    //              7=hardware fault
    //              8=already in motion
    //              9=unspecified error
    if (command[1] == 'S' && parameter[0] == 0) {
    bbaa:	2b53      	cmp	r3, #83	; 0x53
    bbac:	f040 80b6 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    bbb0:	782b      	ldrb	r3, [r5, #0]
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	f040 80b2 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      CommandError e = request(gotoTarget, settings.preferredPierSide);
    bbb8:	f890 3201 	ldrb.w	r3, [r0, #513]	; 0x201
    bbbc:	2101      	movs	r1, #1
    bbbe:	2250      	movs	r2, #80	; 0x50
    bbc0:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    bbc4:	f100 0118 	add.w	r1, r0, #24
    bbc8:	4668      	mov	r0, sp
    bbca:	f00c fc7f 	bl	184cc <memcpy>
    bbce:	f107 0310 	add.w	r3, r7, #16
    bbd2:	4638      	mov	r0, r7
    bbd4:	cb0c      	ldmia	r3, {r2, r3}
    bbd6:	f001 fd63 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
      strcpy(reply,"0");
    bbda:	4bbb      	ldr	r3, [pc, #748]	; (bec8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x368>)
    bbdc:	881a      	ldrh	r2, [r3, #0]
      if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) reply[0] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    bbde:	f1a0 030f 	sub.w	r3, r0, #15
    bbe2:	b2db      	uxtb	r3, r3
      strcpy(reply,"0");
    bbe4:	f8a8 2000 	strh.w	r2, [r8]
      if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) reply[0] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    bbe8:	2b08      	cmp	r3, #8
    bbea:	d803      	bhi.n	bbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x94>
    bbec:	f100 0322 	add.w	r3, r0, #34	; 0x22
    bbf0:	f888 3000 	strb.w	r3, [r8]
      if (e == CE_NONE) reply[0] = '0';
      *numericReply = false;
      *supressFrame = true;
    bbf4:	2301      	movs	r3, #1
      *numericReply = false;
    bbf6:	2200      	movs	r2, #0
    bbf8:	9963      	ldr	r1, [sp, #396]	; 0x18c
        }
      } else return false;
    } else return false;
  } else return false;

  return true;
    bbfa:	461e      	mov	r6, r3
      *numericReply = false;
    bbfc:	700a      	strb	r2, [r1, #0]
      *supressFrame = true;
    bbfe:	9a62      	ldr	r2, [sp, #392]	; 0x188
    bc00:	7013      	strb	r3, [r2, #0]
      *commandError = e;
    bc02:	9b64      	ldr	r3, [sp, #400]	; 0x190
    bc04:	7018      	strb	r0, [r3, #0]
}
    bc06:	4630      	mov	r0, r6
    bc08:	b059      	add	sp, #356	; 0x164
    bc0a:	ecbd 8b02 	vpop	{d8}
    bc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (command[0] == 'C' && (command[1] == 'S' || command[1] == 'M') && parameter[0] == 0) {
    bc12:	7856      	ldrb	r6, [r2, #1]
    bc14:	2e4d      	cmp	r6, #77	; 0x4d
    bc16:	bf18      	it	ne
    bc18:	2e53      	cmpne	r6, #83	; 0x53
    bc1a:	bf0c      	ite	eq
    bc1c:	2601      	moveq	r6, #1
    bc1e:	2600      	movne	r6, #0
    bc20:	d1f1      	bne.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    bc22:	782e      	ldrb	r6, [r5, #0]
    bc24:	2e00      	cmp	r6, #0
    bc26:	d179      	bne.n	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>

    // reset the alignment model
    void alignReset();

    // check if an align is in progress
    inline bool alignActive() { return alignState.lastStar > 0 && alignState.currentStar <= alignState.lastStar; }
    bc28:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	f040 81df 	bne.w	bff0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x490>
      Coordinate before = mount.getMountPosition(CR_MOUNT);
    bc32:	2200      	movs	r2, #0
    bc34:	49a5      	ldr	r1, [pc, #660]	; (becc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36c>)
    bc36:	a816      	add	r0, sp, #88	; 0x58
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    bc38:	f50d 7984 	add.w	r9, sp, #264	; 0x108
    bc3c:	f7fd f956 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    bc40:	48a3      	ldr	r0, [pc, #652]	; (bed0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x370>)
    bc42:	f89d 60a8 	ldrb.w	r6, [sp, #168]	; 0xa8
      PierSideSelect pps = settings.preferredPierSide;
    bc46:	f897 5201 	ldrb.w	r5, [r7, #513]	; 0x201
    bc4a:	f7f5 fa6f 	bl	112c <Axis::getInstrumentCoordinate()>
    bc4e:	2200      	movs	r2, #0
    bc50:	49a0      	ldr	r1, [pc, #640]	; (bed4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x374>)
    bc52:	a82c      	add	r0, sp, #176	; 0xb0
    bc54:	eeb0 8b40 	vmov.f64	d8, d0
    bc58:	f003 fba6 	bl	f3a8 <Home::getPosition(CoordReturn)>
    bc5c:	ed9d 6b3a 	vldr	d6, [sp, #232]	; 0xe8
    bc60:	ed9f 7b93 	vldr	d7, [pc, #588]	; beb0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x350>
    bc64:	ee38 8b46 	vsub.f64	d8, d8, d6
    bc68:	eeb0 8bc8 	vabs.f64	d8, d8
    bc6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    bc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bc74:	f240 83ce 	bls.w	c414 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8b4>
      e = requestSync(gotoTarget, pps);
    bc78:	2301      	movs	r3, #1
    bc7a:	f107 0118 	add.w	r1, r7, #24
    bc7e:	2250      	movs	r2, #80	; 0x50
    bc80:	4668      	mov	r0, sp
    bc82:	9514      	str	r5, [sp, #80]	; 0x50
    bc84:	9315      	str	r3, [sp, #84]	; 0x54
    bc86:	f00c fc21 	bl	184cc <memcpy>
    bc8a:	f107 0310 	add.w	r3, r7, #16
    bc8e:	4638      	mov	r0, r7
    bc90:	cb0c      	ldmia	r3, {r2, r3}
    bc92:	f001 fae5 	bl	d260 <Goto::requestSync(Coordinate, PierSideSelect, bool)>
      Coordinate after = mount.getMountPosition(CR_MOUNT);
    bc96:	2200      	movs	r2, #0
      e = requestSync(gotoTarget, pps);
    bc98:	4605      	mov	r5, r0
      Coordinate after = mount.getMountPosition(CR_MOUNT);
    bc9a:	498c      	ldr	r1, [pc, #560]	; (becc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36c>)
    bc9c:	4648      	mov	r0, r9
    bc9e:	f7fd f925 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      if (before.pierSide != PIER_SIDE_NONE && before.pierSide != after.pierSide) mountStatus.soundAlert();
    bca2:	b15e      	cbz	r6, bcbc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x15c>
    bca4:	f89d 3158 	ldrb.w	r3, [sp, #344]	; 0x158
    bca8:	42b3      	cmp	r3, r6
    bcaa:	d007      	beq.n	bcbc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x15c>
    void flashRate(int period);

    // mount misc. general status indicators
    void general();

    inline void soundAlert() { if (sound.enabled) wake(); sound.alert(); }
    bcac:	488a      	ldr	r0, [pc, #552]	; (bed8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x378>)
    bcae:	7843      	ldrb	r3, [r0, #1]
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	f040 850b 	bne.w	c6cc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb6c>
    bcb6:	4889      	ldr	r0, [pc, #548]	; (bedc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37c>)
    bcb8:	f7f9 fcdc 	bl	5674 <Sound::alert()>
    if (command[1] == 'M') {
    bcbc:	7863      	ldrb	r3, [r4, #1]
    bcbe:	2b4d      	cmp	r3, #77	; 0x4d
    bcc0:	d122      	bne.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
      if (e == CE_NONE) strcpy(reply, "N/A"); else
    bcc2:	2d00      	cmp	r5, #0
    bcc4:	f000 81a4 	beq.w	c010 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4b0>
      if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) {
    bcc8:	f1a5 030f 	sub.w	r3, r5, #15
    bccc:	b2db      	uxtb	r3, r3
    bcce:	2b08      	cmp	r3, #8
    bcd0:	f200 83c5 	bhi.w	c45e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8fe>
        strcpy(reply, "E0");
    bcd4:	4b82      	ldr	r3, [pc, #520]	; (bee0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x380>)
        reply[1] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    bcd6:	3522      	adds	r5, #34	; 0x22
        strcpy(reply, "E0");
    bcd8:	881a      	ldrh	r2, [r3, #0]
    bcda:	789b      	ldrb	r3, [r3, #2]
    bcdc:	f8a8 2000 	strh.w	r2, [r8]
    bce0:	f888 3002 	strb.w	r3, [r8, #2]
        reply[1] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    bce4:	f888 5001 	strb.w	r5, [r8, #1]
    bce8:	e00e      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
  if (command[0] == 'D' && command[1] == 0) {
    bcea:	7853      	ldrb	r3, [r2, #1]
    bcec:	b9b3      	cbnz	r3, bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    if (goTo.state == GS_GOTO) {
    bcee:	4a7d      	ldr	r2, [pc, #500]	; (bee4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>)
    bcf0:	7812      	ldrb	r2, [r2, #0]
    bcf2:	2a01      	cmp	r2, #1
    bcf4:	f000 824d 	beq.w	c192 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x632>
      reply[1] = 0;
    bcf8:	f888 3001 	strb.w	r3, [r8, #1]
      reply[0] = '#';
    bcfc:	2123      	movs	r1, #35	; 0x23
      *supressFrame = true;
    bcfe:	2201      	movs	r2, #1
    bd00:	9b62      	ldr	r3, [sp, #392]	; 0x188
      reply[0] = '#';
    bd02:	f888 1000 	strb.w	r1, [r8]
      *supressFrame = true;
    bd06:	701a      	strb	r2, [r3, #0]
  return true;
    bd08:	2601      	movs	r6, #1
      *numericReply = false;
    bd0a:	2300      	movs	r3, #0
    bd0c:	9a63      	ldr	r2, [sp, #396]	; 0x18c
}
    bd0e:	4630      	mov	r0, r6
      *numericReply = false;
    bd10:	7013      	strb	r3, [r2, #0]
}
    bd12:	b059      	add	sp, #356	; 0x164
    bd14:	ecbd 8b02 	vpop	{d8}
    bd18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        switch (parameter[1]) {
    bd1c:	2600      	movs	r6, #0
}
    bd1e:	4630      	mov	r0, r6
    bd20:	b059      	add	sp, #356	; 0x164
    bd22:	ecbd 8b02 	vpop	{d8}
    bd26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (command[1] == 'W' && parameter[0] == 0) {
    bd2a:	7853      	ldrb	r3, [r2, #1]
    bd2c:	2b57      	cmp	r3, #87	; 0x57
    bd2e:	d066      	beq.n	bdfe <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x29e>
    if (command[1] == '?' && parameter[0] == 0) {
    bd30:	2b3f      	cmp	r3, #63	; 0x3f
    bd32:	d030      	beq.n	bd96 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x236>
    if (command[1] >= '1' && command[1] <= ALIGN_MAX_NUM_STARS + '0' && parameter[0] == 0) {
    bd34:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
    bd38:	2a08      	cmp	r2, #8
    bd3a:	d87d      	bhi.n	be38 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2d8>
    bd3c:	782b      	ldrb	r3, [r5, #0]
    bd3e:	2b00      	cmp	r3, #0
    bd40:	f000 81f8 	beq.w	c134 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5d4>
  return true;
    bd44:	2601      	movs	r6, #1
    } else *commandError = CE_CMD_UNKNOWN;
    bd46:	2302      	movs	r3, #2
    bd48:	9a64      	ldr	r2, [sp, #400]	; 0x190
}
    bd4a:	4630      	mov	r0, r6
    } else *commandError = CE_CMD_UNKNOWN;
    bd4c:	7013      	strb	r3, [r2, #0]
}
    bd4e:	b059      	add	sp, #356	; 0x164
    bd50:	ecbd 8b02 	vpop	{d8}
    bd54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (command[0] == 'S') {
    bd58:	2b53      	cmp	r3, #83	; 0x53
    bd5a:	d1df      	bne.n	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    if (command[1] == 'r') {
    bd5c:	7853      	ldrb	r3, [r2, #1]
    bd5e:	2b72      	cmp	r3, #114	; 0x72
    bd60:	f000 826c 	beq.w	c23c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6dc>
    if (command[1] == 'd') {
    bd64:	2b64      	cmp	r3, #100	; 0x64
    bd66:	f000 8340 	beq.w	c3ea <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88a>
    bd6a:	d850      	bhi.n	be0e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ae>
    bd6c:	2b58      	cmp	r3, #88	; 0x58
    bd6e:	f000 829f 	beq.w	c2b0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x750>
    bd72:	2b61      	cmp	r3, #97	; 0x61
    bd74:	d1d2      	bne.n	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      if (!convert.dmsToDouble(&gotoTarget.a, parameter, true)) *commandError = CE_PARAM_RANGE; else
    bd76:	f100 0128 	add.w	r1, r0, #40	; 0x28
    bd7a:	2301      	movs	r3, #1
    bd7c:	462a      	mov	r2, r5
    bd7e:	485a      	ldr	r0, [pc, #360]	; (bee8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x388>)
    bd80:	f7f8 fe22 	bl	49c8 <Convert::dmsToDouble(double*, char*, bool)>
    bd84:	4606      	mov	r6, r0
    bd86:	2800      	cmp	r0, #0
    bd88:	f040 8147 	bne.w	c01a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ba>
      if (!convert.hmsToDouble(&gotoTarget.r, parameter)) *commandError = CE_PARAM_RANGE; else
    bd8c:	2304      	movs	r3, #4
    bd8e:	9a64      	ldr	r2, [sp, #400]	; 0x190
  return true;
    bd90:	2601      	movs	r6, #1
      if (!convert.hmsToDouble(&gotoTarget.r, parameter)) *commandError = CE_PARAM_RANGE; else
    bd92:	7013      	strb	r3, [r2, #0]
    bd94:	e737      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    if (command[1] == '?' && parameter[0] == 0) {
    bd96:	782b      	ldrb	r3, [r5, #0]
    bd98:	2b00      	cmp	r3, #0
    bd9a:	d1d3      	bne.n	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
      reply[0] = '0' + ALIGN_MAX_NUM_STARS;
    bd9c:	2239      	movs	r2, #57	; 0x39
  return true;
    bd9e:	2601      	movs	r6, #1
      reply[0] = '0' + ALIGN_MAX_NUM_STARS;
    bda0:	700a      	strb	r2, [r1, #0]
      reply[1] = '0' + alignState.currentStar;
    bda2:	f890 21e2 	ldrb.w	r2, [r0, #482]	; 0x1e2
    bda6:	3230      	adds	r2, #48	; 0x30
    bda8:	704a      	strb	r2, [r1, #1]
      reply[2] = '0' + alignState.lastStar;
    bdaa:	f890 21e3 	ldrb.w	r2, [r0, #483]	; 0x1e3
      reply[3] = 0;
    bdae:	70cb      	strb	r3, [r1, #3]
      reply[2] = '0' + alignState.lastStar;
    bdb0:	3230      	adds	r2, #48	; 0x30
    bdb2:	708a      	strb	r2, [r1, #2]
      *numericReply = false;
    bdb4:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    bdb6:	7013      	strb	r3, [r2, #0]
    bdb8:	e725      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    if (command[1] == 'r' && (parameter[0] == 0 || parameter[1] == 0)) {
    bdba:	7853      	ldrb	r3, [r2, #1]
    bdbc:	2b72      	cmp	r3, #114	; 0x72
    bdbe:	d056      	beq.n	be6e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30e>
    if (command[1] == 'd' && (parameter[0] == 0 || parameter[1] == 0)) {
    bdc0:	2b64      	cmp	r3, #100	; 0x64
    bdc2:	f000 81a3 	beq.w	c10c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5ac>
    if (command[1] == 'a' && (parameter[0] == 'H' || parameter[0] == 'l') && parameter[1] == 0) {
    bdc6:	2b61      	cmp	r3, #97	; 0x61
    bdc8:	f000 81ec 	beq.w	c1a4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x644>
    if (command[1] == 'z' ) {
    bdcc:	2b7a      	cmp	r3, #122	; 0x7a
    bdce:	f040 80e8 	bne.w	bfa2 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x442>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    bdd2:	782b      	ldrb	r3, [r5, #0]
    bdd4:	2b48      	cmp	r3, #72	; 0x48
    bdd6:	f000 846d 	beq.w	c6b4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb54>
    bdda:	2b00      	cmp	r3, #0
    bddc:	f040 81dd 	bne.w	c19a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x63a>
  PrecisionMode precisionMode = PM_HIGH;
    bde0:	2402      	movs	r4, #2
      convert.doubleToDms(reply, radToDeg(gotoTarget.z), true, false, precisionMode);
    bde2:	2300      	movs	r3, #0
    bde4:	2201      	movs	r2, #1
    bde6:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
    bdea:	ed9f 7b33 	vldr	d7, [pc, #204]	; beb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x358>
      convert.doubleToDms(reply, radToDeg(gotoTarget.d), false, true, precisionMode);
    bdee:	ee20 0b07 	vmul.f64	d0, d0, d7
    bdf2:	4641      	mov	r1, r8
    bdf4:	483c      	ldr	r0, [pc, #240]	; (bee8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x388>)
    bdf6:	9400      	str	r4, [sp, #0]
    bdf8:	f7f8 fa5e 	bl	42b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>
    bdfc:	e784      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
    if (command[1] == 'W' && parameter[0] == 0) {
    bdfe:	782b      	ldrb	r3, [r5, #0]
    be00:	2b00      	cmp	r3, #0
    be02:	d19f      	bne.n	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
        transform.align.modelWrite();
    be04:	4839      	ldr	r0, [pc, #228]	; (beec <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x38c>)
  return true;
    be06:	2601      	movs	r6, #1
        transform.align.modelWrite();
    be08:	f7fd fd40 	bl	988c <GeoAlign::modelWrite()>
    be0c:	e6fb      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    be0e:	2b7a      	cmp	r3, #122	; 0x7a
    be10:	d184      	bne.n	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      if (!convert.dmsToDouble(&gotoTarget.z, parameter, false)) *commandError = CE_PARAM_RANGE; else
    be12:	f100 0130 	add.w	r1, r0, #48	; 0x30
    be16:	2300      	movs	r3, #0
    be18:	462a      	mov	r2, r5
    be1a:	4833      	ldr	r0, [pc, #204]	; (bee8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x388>)
    be1c:	f7f8 fdd4 	bl	49c8 <Convert::dmsToDouble(double*, char*, bool)>
    be20:	4606      	mov	r6, r0
    be22:	2800      	cmp	r0, #0
    be24:	d0b2      	beq.n	bd8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
      gotoTarget.z = degToRad(gotoTarget.z);
    be26:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
    be2a:	ed9f 6b23 	vldr	d6, [pc, #140]	; beb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x358>
    be2e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    be32:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    be36:	e6e6      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    if (command[1] == '+' && parameter[0] == 0) {
    be38:	2b2b      	cmp	r3, #43	; 0x2b
    be3a:	d183      	bne.n	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
    be3c:	782c      	ldrb	r4, [r5, #0]
    be3e:	2c00      	cmp	r4, #0
    be40:	d180      	bne.n	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
    be42:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    be46:	2b00      	cmp	r3, #0
    be48:	f000 81ca 	beq.w	c1e0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x680>
    be4c:	f890 21e2 	ldrb.w	r2, [r0, #482]	; 0x1e2
    be50:	429a      	cmp	r2, r3
    be52:	f200 81c5 	bhi.w	c1e0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x680>
        CommandError e = alignAddStar();
    be56:	4621      	mov	r1, r4
    be58:	f001 fa8a 	bl	d370 <Goto::alignAddStar(bool)>
        if (e != CE_NONE) {
    be5c:	2800      	cmp	r0, #0
    be5e:	f000 82f2 	beq.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
          *commandError = e;
    be62:	9b64      	ldr	r3, [sp, #400]	; 0x190
  return true;
    be64:	2601      	movs	r6, #1
          alignState.currentStar = 0;
    be66:	f8a7 41e2 	strh.w	r4, [r7, #482]	; 0x1e2
          *commandError = e;
    be6a:	7018      	strb	r0, [r3, #0]
          DLF("ERR: Mount, failed to add align point");
    be6c:	e6cb      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    if (command[1] == 'r' && (parameter[0] == 0 || parameter[1] == 0)) {
    be6e:	782b      	ldrb	r3, [r5, #0]
    be70:	2b00      	cmp	r3, #0
    be72:	f000 8094 	beq.w	bf9e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x43e>
    be76:	786a      	ldrb	r2, [r5, #1]
    be78:	2a00      	cmp	r2, #0
    be7a:	f47f af4f 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      if (parameter[0] == 'H' || parameter[0] == 'a') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    be7e:	2b48      	cmp	r3, #72	; 0x48
    be80:	d002      	beq.n	be88 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x328>
    be82:	2b61      	cmp	r3, #97	; 0x61
    be84:	f040 8189 	bne.w	c19a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x63a>
    be88:	2303      	movs	r3, #3
      convert.doubleToHms(reply, radToHrs(gotoTarget.r), false, precisionMode);
    be8a:	2200      	movs	r2, #0
    be8c:	4641      	mov	r1, r8
    be8e:	4816      	ldr	r0, [pc, #88]	; (bee8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x388>)
  return true;
    be90:	2601      	movs	r6, #1
      convert.doubleToHms(reply, radToHrs(gotoTarget.r), false, precisionMode);
    be92:	ed97 0b04 	vldr	d0, [r7, #16]
    be96:	ed9f 7b0a 	vldr	d7, [pc, #40]	; bec0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x360>
    be9a:	ee20 0b07 	vmul.f64	d0, d0, d7
    be9e:	f7f8 f947 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
      *numericReply = false;
    bea2:	2300      	movs	r3, #0
    bea4:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    bea6:	7013      	strb	r3, [r2, #0]
    bea8:	e6ad      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    beaa:	bf00      	nop
    beac:	f3af 8000 	nop.w
    beb0:	71ef8766 	.word	0x71ef8766
    beb4:	3e9787ad 	.word	0x3e9787ad
    beb8:	1a63c1f8 	.word	0x1a63c1f8
    bebc:	404ca5dc 	.word	0x404ca5dc
    bec0:	a4aeacc4 	.word	0xa4aeacc4
    bec4:	400e8ec8 	.word	0x400e8ec8
    bec8:	20002234 	.word	0x20002234
    becc:	200054e0 	.word	0x200054e0
    bed0:	200050e8 	.word	0x200050e8
    bed4:	20005478 	.word	0x20005478
    bed8:	20005e4c 	.word	0x20005e4c
    bedc:	20005e4d 	.word	0x20005e4d
    bee0:	200021ac 	.word	0x200021ac
    bee4:	20005270 	.word	0x20005270
    bee8:	200043d0 	.word	0x200043d0
    beec:	200064ac 	.word	0x200064ac
    if (command[1] == 'D' && parameter[0] == 0) {
    bef0:	782c      	ldrb	r4, [r5, #0]
    bef2:	2c00      	cmp	r4, #0
    bef4:	f47f af12 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      Coordinate coords = gotoTarget;
    bef8:	f100 0110 	add.w	r1, r0, #16
    befc:	2258      	movs	r2, #88	; 0x58
    befe:	a842      	add	r0, sp, #264	; 0x108
    bf00:	f00c fae4 	bl	184cc <memcpy>
      transform.nativeToMount(&coords);
    bf04:	4623      	mov	r3, r4
    bf06:	4622      	mov	r2, r4
    bf08:	a942      	add	r1, sp, #264	; 0x108
    bf0a:	48bd      	ldr	r0, [pc, #756]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
      coords.pierSide = PIER_SIDE_NONE;
    bf0c:	f88d 4158 	strb.w	r4, [sp, #344]	; 0x158
      transform.nativeToMount(&coords);
    bf10:	f7ff fc92 	bl	b838 <Transform::nativeToMount(Coordinate*, double*, double*)>
      CommandError e = setTarget(&coords, settings.preferredPierSide);
    bf14:	2301      	movs	r3, #1
    bf16:	f897 2201 	ldrb.w	r2, [r7, #513]	; 0x201
    bf1a:	a942      	add	r1, sp, #264	; 0x108
    bf1c:	4638      	mov	r0, r7
    bf1e:	f000 ffa7 	bl	ce70 <Goto::setTarget(Coordinate*, PierSideSelect, bool)>
      strcpy(reply, "2");
    bf22:	4bb8      	ldr	r3, [pc, #736]	; (c204 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a4>)
    bf24:	881b      	ldrh	r3, [r3, #0]
    bf26:	f8a8 3000 	strh.w	r3, [r8]
      if (e == CE_NONE && target.pierSide == PIER_SIDE_EAST) reply[0] = '0';
    bf2a:	2800      	cmp	r0, #0
    bf2c:	f47f ae62 	bne.w	bbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x94>
    bf30:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
    bf34:	2b01      	cmp	r3, #1
    bf36:	d104      	bne.n	bf42 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3e2>
    bf38:	2330      	movs	r3, #48	; 0x30
    bf3a:	f888 3000 	strb.w	r3, [r8]
      if (e == CE_NONE && target.pierSide == PIER_SIDE_WEST) reply[0] = '1';
    bf3e:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
    bf42:	2b02      	cmp	r3, #2
    bf44:	f47f ae56 	bne.w	bbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x94>
    bf48:	2331      	movs	r3, #49	; 0x31
    bf4a:	f888 3000 	strb.w	r3, [r8]
      *numericReply = false;
    bf4e:	e651      	b.n	bbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x94>
      if (transform.meridianFlips) {
    bf50:	4bab      	ldr	r3, [pc, #684]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
    bf52:	f893 65c5 	ldrb.w	r6, [r3, #1477]	; 0x5c5
    bf56:	2e00      	cmp	r6, #0
    bf58:	f43f aef4 	beq.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
        Coordinate newTarget = mount.getPosition();
    bf5c:	f50d 7984 	add.w	r9, sp, #264	; 0x108
    bf60:	2201      	movs	r2, #1
    bf62:	49a9      	ldr	r1, [pc, #676]	; (c208 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a8>)
    bf64:	4648      	mov	r0, r9
    bf66:	f7fc ffaf 	bl	8ec8 <Mount::getPosition(CoordReturn)>
        if (parameter[0] == 0) {
    bf6a:	782b      	ldrb	r3, [r5, #0]
        Coordinate newTarget = mount.getPosition();
    bf6c:	f89d 2158 	ldrb.w	r2, [sp, #344]	; 0x158
        if (parameter[0] == 0) {
    bf70:	2b00      	cmp	r3, #0
    bf72:	f040 83a2 	bne.w	c6ba <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb5a>
          if (newTarget.pierSide == PIER_SIDE_EAST) parameter[0] = 'w'; else
    bf76:	2a01      	cmp	r2, #1
          parameter[1] = 0;
    bf78:	706b      	strb	r3, [r5, #1]
          if (newTarget.pierSide == PIER_SIDE_EAST) parameter[0] = 'w'; else
    bf7a:	f000 855c 	beq.w	ca36 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xed6>
          if (newTarget.pierSide == PIER_SIDE_WEST) parameter[0] = 'e'; else e = CE_SLEW_ERR_UNSPECIFIED;
    bf7e:	2a02      	cmp	r2, #2
    bf80:	f000 8580 	beq.w	ca84 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf24>
    bf84:	2339      	movs	r3, #57	; 0x39
    bf86:	2017      	movs	r0, #23
          if (e == CE_NONE) reply[0] = '0';
    bf88:	f888 3000 	strb.w	r3, [r8]
          reply[1] = 0;
    bf8c:	2300      	movs	r3, #0
          *numericReply = false;
    bf8e:	9963      	ldr	r1, [sp, #396]	; 0x18c
          *supressFrame = true;
    bf90:	2201      	movs	r2, #1
          reply[1] = 0;
    bf92:	f888 3001 	strb.w	r3, [r8, #1]
          *numericReply = false;
    bf96:	700b      	strb	r3, [r1, #0]
          *supressFrame = true;
    bf98:	9b62      	ldr	r3, [sp, #392]	; 0x188
    bf9a:	701a      	strb	r2, [r3, #0]
        *commandError = e;
    bf9c:	e631      	b.n	bc02 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa2>
  PrecisionMode precisionMode = PM_HIGH;
    bf9e:	2302      	movs	r3, #2
    bfa0:	e773      	b.n	be8a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32a>
    if (command[1] == 'X' && parameter[2] == 0)  {
    bfa2:	2b58      	cmp	r3, #88	; 0x58
    bfa4:	f47f aeba 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    bfa8:	78ab      	ldrb	r3, [r5, #2]
    bfaa:	2b00      	cmp	r3, #0
    bfac:	f47f aeb6 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
        if (parameter[0] == '0')  {
    bfb0:	782a      	ldrb	r2, [r5, #0]
    bfb2:	2a30      	cmp	r2, #48	; 0x30
    bfb4:	f000 825b 	beq.w	c46e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x90e>
      if (parameter[0] == '9')  {
    bfb8:	2a39      	cmp	r2, #57	; 0x39
    bfba:	f47f aeaf 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
        switch (parameter[1]) {
    bfbe:	786b      	ldrb	r3, [r5, #1]
    bfc0:	3b32      	subs	r3, #50	; 0x32
    bfc2:	2b07      	cmp	r3, #7
    bfc4:	f63f aeaa 	bhi.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    bfc8:	a201      	add	r2, pc, #4	; (adr r2, bfd0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x470>)
    bfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bfce:	bf00      	nop
    bfd0:	0000c0f7 	.word	0x0000c0f7
    bfd4:	0000c0e5 	.word	0x0000c0e5
    bfd8:	0000c0bd 	.word	0x0000c0bd
    bfdc:	0000c097 	.word	0x0000c097
    bfe0:	0000c073 	.word	0x0000c073
    bfe4:	0000c03f 	.word	0x0000c03f
    bfe8:	0000bd1d 	.word	0x0000bd1d
    bfec:	0000c02d 	.word	0x0000c02d
    bff0:	f890 21e2 	ldrb.w	r2, [r0, #482]	; 0x1e2
    bff4:	429a      	cmp	r2, r3
    bff6:	f63f ae1c 	bhi.w	bc32 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd2>
      e = alignAddStar(true);
    bffa:	2101      	movs	r1, #1
    bffc:	f001 f9b8 	bl	d370 <Goto::alignAddStar(bool)>
      if (e != CE_NONE) {
    c000:	4605      	mov	r5, r0
    c002:	2800      	cmp	r0, #0
    c004:	f040 8222 	bne.w	c44c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8ec>
    if (command[1] == 'M') {
    c008:	7863      	ldrb	r3, [r4, #1]
    c00a:	2b4d      	cmp	r3, #77	; 0x4d
    c00c:	f47f ae7c 	bne.w	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
      if (e == CE_NONE) strcpy(reply, "N/A"); else
    c010:	4b7e      	ldr	r3, [pc, #504]	; (c20c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6ac>)
    c012:	6818      	ldr	r0, [r3, #0]
    c014:	f8c8 0000 	str.w	r0, [r8]
    c018:	e676      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
      gotoTarget.a = degToRad(gotoTarget.a);
    c01a:	ed97 5b0a 	vldr	d5, [r7, #40]	; 0x28
    c01e:	ed9f 6b74 	vldr	d6, [pc, #464]	; c1f0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x690>
    c022:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c026:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    c02a:	e5ec      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
          case '9': sprintF(reply, "%0.3f",usPerStepLowerLimit()); break;
    c02c:	f001 ff4a 	bl	dec4 <Goto::usPerStepLowerLimit()>
    c030:	4977      	ldr	r1, [pc, #476]	; (c210 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b0>)
    c032:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    c036:	4640      	mov	r0, r8
    c038:	f7f7 fffe 	bl	4038 <sprintF(char*, char const*, double)>
    c03c:	e664      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
    inline double getStepsPerMeasure() { return settings.stepsPerMeasure; }
    c03e:	4975      	ldr	r1, [pc, #468]	; (c214 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b4>)
          case '7': sprintF(reply, "%0.1f", (1000000.0F/settings.usPerStepCurrent)/degToRadF(axis1.getStepsPerMeasure())); break;
    c040:	f8d0 4202 	ldr.w	r4, [r0, #514]	; 0x202
    c044:	4640      	mov	r0, r8
    c046:	684a      	ldr	r2, [r1, #4]
    c048:	688b      	ldr	r3, [r1, #8]
    c04a:	ee07 4a10 	vmov	s14, r4
    c04e:	eddf 7a72 	vldr	s15, [pc, #456]	; c218 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b8>
    c052:	4972      	ldr	r1, [pc, #456]	; (c21c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6bc>)
    c054:	ee87 7a87 	vdiv.f32	s14, s15, s14
    c058:	ed9f 6b67 	vldr	d6, [pc, #412]	; c1f8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x698>
    c05c:	ec43 2b15 	vmov	d5, r2, r3
    c060:	ee85 0b06 	vdiv.f64	d0, d5, d6
    c064:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c068:	ee87 0b00 	vdiv.f64	d0, d7, d0
    c06c:	f7f7 ffe4 	bl	4038 <sprintF(char*, char const*, double)>
    c070:	e64a      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
          case '6': reply[0] = transform.meridianFlips ? "EWB"[settings.preferredPierSide - 1] : 'E'; reply[1] = 0; break;
    c072:	4b63      	ldr	r3, [pc, #396]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
    c074:	f893 35c5 	ldrb.w	r3, [r3, #1477]	; 0x5c5
    c078:	2b00      	cmp	r3, #0
    c07a:	f000 8536 	beq.w	caea <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf8a>
    c07e:	4b68      	ldr	r3, [pc, #416]	; (c220 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c0>)
    c080:	f890 2201 	ldrb.w	r2, [r0, #513]	; 0x201
    c084:	4413      	add	r3, r2
    c086:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c08a:	2200      	movs	r2, #0
    c08c:	f888 3000 	strb.w	r3, [r8]
    c090:	f888 2001 	strb.w	r2, [r8, #1]
    c094:	e638      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>

    // if paused at the home position, continue the goto
    inline void homeContinue() { meridianFlipHome.resume = true; }

    // returns true if the automatic meridian flip feature is enabled
    inline bool isAutoFlipEnabled() { return settings.meridianFlipAuto && transform.isEquatorial() && transform.meridianFlips; }
    c096:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
    c09a:	f012 0201 	ands.w	r2, r2, #1
    c09e:	d008      	beq.n	c0b2 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x552>
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    c0a0:	4a57      	ldr	r2, [pc, #348]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
    c0a2:	f892 35c4 	ldrb.w	r3, [r2, #1476]	; 0x5c4
    c0a6:	3b01      	subs	r3, #1
    c0a8:	2b01      	cmp	r3, #1
    c0aa:	bf94      	ite	ls
    c0ac:	f892 25c5 	ldrbls.w	r2, [r2, #1477]	; 0x5c5
    c0b0:	2200      	movhi	r2, #0
          case '5': sprintf(reply, "%d", (int)isAutoFlipEnabled()); break;
    c0b2:	495c      	ldr	r1, [pc, #368]	; (c224 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c4>)
    c0b4:	4640      	mov	r0, r8
    c0b6:	f012 ff1b 	bl	1eef0 <sprintf>
    c0ba:	e625      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
          case '4': sprintf(reply, "%d%s", (int)mount.getMountPosition().pierSide, (!transform.meridianFlips)?" N":""); break;
    c0bc:	a842      	add	r0, sp, #264	; 0x108
    c0be:	2201      	movs	r2, #1
    c0c0:	4951      	ldr	r1, [pc, #324]	; (c208 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a8>)
    c0c2:	f7fc ff13 	bl	8eec <Mount::getMountPosition(CoordReturn)>
    c0c6:	4a4e      	ldr	r2, [pc, #312]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
    c0c8:	4957      	ldr	r1, [pc, #348]	; (c228 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c8>)
    c0ca:	4640      	mov	r0, r8
    c0cc:	f892 45c5 	ldrb.w	r4, [r2, #1477]	; 0x5c5
    c0d0:	4b56      	ldr	r3, [pc, #344]	; (c22c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6cc>)
    c0d2:	f89d 2158 	ldrb.w	r2, [sp, #344]	; 0x158
    c0d6:	2c00      	cmp	r4, #0
    c0d8:	bf08      	it	eq
    c0da:	460b      	moveq	r3, r1
    c0dc:	4954      	ldr	r1, [pc, #336]	; (c230 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6d0>)
    c0de:	f012 ff07 	bl	1eef0 <sprintf>
    c0e2:	e611      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
          case '3': sprintF(reply, "%0.3f", usPerStepBase); break;
    c0e4:	ed90 0a79 	vldr	s0, [r0, #484]	; 0x1e4
    c0e8:	4640      	mov	r0, r8
    c0ea:	4949      	ldr	r1, [pc, #292]	; (c210 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b0>)
    c0ec:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    c0f0:	f7f7 ffa2 	bl	4038 <sprintF(char*, char const*, double)>
    c0f4:	e608      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
          case '2': sprintF(reply, "%0.3f", settings.usPerStepCurrent); break;
    c0f6:	f8d0 3202 	ldr.w	r3, [r0, #514]	; 0x202
    c0fa:	4640      	mov	r0, r8
    c0fc:	4944      	ldr	r1, [pc, #272]	; (c210 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b0>)
    c0fe:	ee00 3a10 	vmov	s0, r3
    c102:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    c106:	f7f7 ff97 	bl	4038 <sprintF(char*, char const*, double)>
    c10a:	e5fd      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
    if (command[1] == 'd' && (parameter[0] == 0 || parameter[1] == 0)) {
    c10c:	782b      	ldrb	r3, [r5, #0]
    c10e:	2b00      	cmp	r3, #0
    c110:	f000 80a7 	beq.w	c262 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x702>
    c114:	786a      	ldrb	r2, [r5, #1]
    c116:	2a00      	cmp	r2, #0
    c118:	f47f ae00 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      if (parameter[0] == 'H' || parameter[0] == 'e') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    c11c:	2b48      	cmp	r3, #72	; 0x48
    c11e:	d001      	beq.n	c124 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5c4>
    c120:	2b65      	cmp	r3, #101	; 0x65
    c122:	d13a      	bne.n	c19a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x63a>
    c124:	2403      	movs	r4, #3
      convert.doubleToDms(reply, radToDeg(gotoTarget.d), false, true, precisionMode);
    c126:	2301      	movs	r3, #1
    c128:	2200      	movs	r2, #0
    c12a:	ed97 0b08 	vldr	d0, [r7, #32]
    c12e:	ed9f 7b30 	vldr	d7, [pc, #192]	; c1f0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x690>
    c132:	e65c      	b.n	bdee <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x28e>
        home.reset();
    c134:	2101      	movs	r1, #1
    c136:	483f      	ldr	r0, [pc, #252]	; (c234 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6d4>)
    c138:	f003 fb3c 	bl	f7b4 <Home::reset(bool)>
      mount.tracking(true);
    c13c:	2101      	movs	r1, #1
    c13e:	4832      	ldr	r0, [pc, #200]	; (c208 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a8>)
    c140:	f7fc fcba 	bl	8ab8 <Mount::tracking(bool)>
      alignState.lastStar = command[1] - '0';
    c144:	7863      	ldrb	r3, [r4, #1]
      alignState.currentStar = 1;
    c146:	2201      	movs	r2, #1
      alignState.lastStar = command[1] - '0';
    c148:	3b30      	subs	r3, #48	; 0x30
  return true;
    c14a:	4616      	mov	r6, r2
      alignState.currentStar = 1;
    c14c:	f887 21e2 	strb.w	r2, [r7, #482]	; 0x1e2
      alignState.lastStar = command[1] - '0';
    c150:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
      alignState.currentStar = 1;
    c154:	e557      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    if (command[1] == 'A' && parameter[0] == 0) {
    c156:	782b      	ldrb	r3, [r5, #0]
    c158:	2b00      	cmp	r3, #0
    c15a:	f47f addf 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      transform.horToEqu(&gotoTarget);
    c15e:	f100 0410 	add.w	r4, r0, #16
    c162:	4827      	ldr	r0, [pc, #156]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
    c164:	4621      	mov	r1, r4
    c166:	f7ff f99b 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
      transform.hourAngleToRightAscension(&gotoTarget, true);
    c16a:	2201      	movs	r2, #1
    c16c:	4621      	mov	r1, r4
    c16e:	4824      	ldr	r0, [pc, #144]	; (c200 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
    c170:	f7ff f84e 	bl	b210 <Transform::hourAngleToRightAscension(Coordinate*, bool)>
      CommandError e = request(gotoTarget, settings.preferredPierSide);
    c174:	f897 2201 	ldrb.w	r2, [r7, #513]	; 0x201
    c178:	2301      	movs	r3, #1
    c17a:	f107 0118 	add.w	r1, r7, #24
    c17e:	9214      	str	r2, [sp, #80]	; 0x50
    c180:	4668      	mov	r0, sp
    c182:	2250      	movs	r2, #80	; 0x50
    c184:	9315      	str	r3, [sp, #84]	; 0x54
    c186:	f00c f9a1 	bl	184cc <memcpy>
    c18a:	4638      	mov	r0, r7
    c18c:	e894 000c 	ldmia.w	r4, {r2, r3}
    c190:	e521      	b.n	bbd6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
      reply[0] = (char)127;
    c192:	227f      	movs	r2, #127	; 0x7f
      reply[1] = 0;
    c194:	704b      	strb	r3, [r1, #1]
      reply[0] = (char)127;
    c196:	700a      	strb	r2, [r1, #0]
      reply[1] = 0;
    c198:	e5b6      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
      if (parameter[0] == 'H' || parameter[0] == 'a') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    c19a:	2305      	movs	r3, #5
    c19c:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c19e:	2601      	movs	r6, #1
    c1a0:	7013      	strb	r3, [r2, #0]
    c1a2:	e530      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    if (command[1] == 'a' && (parameter[0] == 'H' || parameter[0] == 'l') && parameter[1] == 0) {
    c1a4:	782b      	ldrb	r3, [r5, #0]
    c1a6:	2b6c      	cmp	r3, #108	; 0x6c
    c1a8:	bf18      	it	ne
    c1aa:	2b48      	cmpne	r3, #72	; 0x48
    c1ac:	bf0c      	ite	eq
    c1ae:	2601      	moveq	r6, #1
    c1b0:	2600      	movne	r6, #0
    c1b2:	f47f ad28 	bne.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    c1b6:	786c      	ldrb	r4, [r5, #1]
    c1b8:	2c00      	cmp	r4, #0
    c1ba:	f47f adaf 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST;
    c1be:	2b48      	cmp	r3, #72	; 0x48
      convert.doubleToHms(reply, radToDeg(gotoTarget.a), false, precisionMode);
    c1c0:	4622      	mov	r2, r4
    c1c2:	ed90 0b0a 	vldr	d0, [r0, #40]	; 0x28
    c1c6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; c1f0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x690>
    c1ca:	bf14      	ite	ne
    c1cc:	2302      	movne	r3, #2
    c1ce:	2303      	moveq	r3, #3
    c1d0:	4819      	ldr	r0, [pc, #100]	; (c238 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6d8>)
    c1d2:	ee20 0b07 	vmul.f64	d0, d0, d7
    c1d6:	f7f7 ffab 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
      *numericReply = false;
    c1da:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    c1dc:	701c      	strb	r4, [r3, #0]
    c1de:	e512      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
      } else *commandError = CE_ALIGN_NOT_ACTIVE;
    c1e0:	2307      	movs	r3, #7
    c1e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
  return true;
    c1e4:	2601      	movs	r6, #1
      } else *commandError = CE_ALIGN_NOT_ACTIVE;
    c1e6:	7013      	strb	r3, [r2, #0]
    c1e8:	e50d      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    c1ea:	bf00      	nop
    c1ec:	f3af 8000 	nop.w
    c1f0:	1a63c1f8 	.word	0x1a63c1f8
    c1f4:	404ca5dc 	.word	0x404ca5dc
    c1f8:	20000000 	.word	0x20000000
    c1fc:	404ca5dc 	.word	0x404ca5dc
    c200:	200064ac 	.word	0x200064ac
    c204:	200021cc 	.word	0x200021cc
    c208:	200054e0 	.word	0x200054e0
    c20c:	200021a8 	.word	0x200021a8
    c210:	200021b4 	.word	0x200021b4
    c214:	200050e8 	.word	0x200050e8
    c218:	49742400 	.word	0x49742400
    c21c:	200021c4 	.word	0x200021c4
    c220:	200021d0 	.word	0x200021d0
    c224:	2000224c 	.word	0x2000224c
    c228:	200021a4 	.word	0x200021a4
    c22c:	20002724 	.word	0x20002724
    c230:	200021bc 	.word	0x200021bc
    c234:	20005478 	.word	0x20005478
    c238:	200043d0 	.word	0x200043d0
      if (!convert.hmsToDouble(&gotoTarget.r, parameter)) *commandError = CE_PARAM_RANGE; else
    c23c:	f100 0110 	add.w	r1, r0, #16
    c240:	462a      	mov	r2, r5
    c242:	48b1      	ldr	r0, [pc, #708]	; (c508 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9a8>)
    c244:	f7f8 fab0 	bl	47a8 <Convert::hmsToDouble(double*, char*)>
    c248:	4606      	mov	r6, r0
    c24a:	2800      	cmp	r0, #0
    c24c:	f43f ad9e 	beq.w	bd8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
      gotoTarget.r = hrsToRad(gotoTarget.r);
    c250:	ed97 5b04 	vldr	d5, [r7, #16]
    c254:	ed9f 6ba6 	vldr	d6, [pc, #664]	; c4f0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x990>
    c258:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c25c:	ed87 7b04 	vstr	d7, [r7, #16]
    c260:	e4d1      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
  PrecisionMode precisionMode = PM_HIGH;
    c262:	2402      	movs	r4, #2
    c264:	e75f      	b.n	c126 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5c6>
    if (command[1] == 'P' && parameter[0] == 0) {
    c266:	782b      	ldrb	r3, [r5, #0]
    c268:	2b00      	cmp	r3, #0
    c26a:	f47f ad57 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    c26e:	4ca7      	ldr	r4, [pc, #668]	; (c50c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ac>)
    c270:	f894 35c4 	ldrb.w	r3, [r4, #1476]	; 0x5c4
      if (transform.isEquatorial()) {
    c274:	3b01      	subs	r3, #1
    c276:	2b01      	cmp	r3, #1
    c278:	f63f ad64 	bhi.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
        Coordinate newTarget = mount.getPosition();
    c27c:	ad42      	add	r5, sp, #264	; 0x108
    c27e:	2201      	movs	r2, #1
    c280:	49a3      	ldr	r1, [pc, #652]	; (c510 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9b0>)
    c282:	4628      	mov	r0, r5
    c284:	f7fc fe20 	bl	8ec8 <Mount::getPosition(CoordReturn)>
        CommandError e = validate();
    c288:	4638      	mov	r0, r7
    c28a:	f000 fd9b 	bl	cdc4 <Goto::validate()>
        if (e == CE_NONE) e = limits.validateTarget(&newTarget, true);
    c28e:	2800      	cmp	r0, #0
    c290:	f000 83fb 	beq.w	ca8a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf2a>
        if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) reply[0] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    c294:	f1a0 030f 	sub.w	r3, r0, #15
    c298:	b2db      	uxtb	r3, r3
    c29a:	2b08      	cmp	r3, #8
    c29c:	d803      	bhi.n	c2a6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x746>
    c29e:	f100 0322 	add.w	r3, r0, #34	; 0x22
    c2a2:	f888 3000 	strb.w	r3, [r8]
        reply[1] = 0;
    c2a6:	2200      	movs	r2, #0
        *supressFrame = true;
    c2a8:	2301      	movs	r3, #1
        reply[1] = 0;
    c2aa:	f888 2001 	strb.w	r2, [r8, #1]
        *numericReply = false;
    c2ae:	e4a3      	b.n	bbf8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x98>
      if (parameter[2] != ',') { *commandError = CE_PARAM_FORM; return true; }
    c2b0:	78ab      	ldrb	r3, [r5, #2]
    c2b2:	2b2c      	cmp	r3, #44	; 0x2c
    c2b4:	f47f af71 	bne.w	c19a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x63a>
        if (parameter[0] == '0') {
    c2b8:	782b      	ldrb	r3, [r5, #0]
    c2ba:	2b30      	cmp	r3, #48	; 0x30
    c2bc:	f000 820a 	beq.w	c6d4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb74>
      if (parameter[0] == '9') {
    c2c0:	2b39      	cmp	r3, #57	; 0x39
    c2c2:	f47f ad2b 	bne.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
        switch (parameter[1]) {
    c2c6:	786b      	ldrb	r3, [r5, #1]
    c2c8:	3b32      	subs	r3, #50	; 0x32
    c2ca:	2b07      	cmp	r3, #7
    c2cc:	f63f ad26 	bhi.w	bd1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
    c2d0:	a201      	add	r2, pc, #4	; (adr r2, c2d8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x778>)
    c2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c2d6:	bf00      	nop
    c2d8:	0000c3d5 	.word	0x0000c3d5
    c2dc:	0000c3ad 	.word	0x0000c3ad
    c2e0:	0000bd1d 	.word	0x0000bd1d
    c2e4:	0000c375 	.word	0x0000c375
    c2e8:	0000c34d 	.word	0x0000c34d
    c2ec:	0000bd1d 	.word	0x0000bd1d
    c2f0:	0000c321 	.word	0x0000c321
    c2f4:	0000c2f9 	.word	0x0000c2f9
            if (transform.meridianFlips && GOTO_FEATURE != OFF) {
    c2f8:	4b84      	ldr	r3, [pc, #528]	; (c50c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ac>)
    c2fa:	f893 65c5 	ldrb.w	r6, [r3, #1477]	; 0x5c5
    c2fe:	2e00      	cmp	r6, #0
    c300:	f43f ad20 	beq.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
              if (parameter[3] == '1') {
    c304:	78eb      	ldrb	r3, [r5, #3]
    c306:	2b31      	cmp	r3, #49	; 0x31
    c308:	f47f ad40 	bne.w	bd8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
                  if (meridianFlipHome.paused) meridianFlipHome.resume = true;
    c30c:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
    c310:	2b00      	cmp	r3, #0
    c312:	f43f ac78 	beq.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    c316:	2201      	movs	r2, #1
  return true;
    c318:	461e      	mov	r6, r3
                  if (meridianFlipHome.paused) meridianFlipHome.resume = true;
    c31a:	f880 21e1 	strb.w	r2, [r0, #481]	; 0x1e1
    c31e:	e472      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            if (transform.meridianFlips && GOTO_FEATURE != OFF) {
    c320:	4b7a      	ldr	r3, [pc, #488]	; (c50c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ac>)
    c322:	f893 65c5 	ldrb.w	r6, [r3, #1477]	; 0x5c5
    c326:	2e00      	cmp	r6, #0
    c328:	f43f ad0c 	beq.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
              if (parameter[3] == '0' || parameter[3] == '1') {
    c32c:	78eb      	ldrb	r3, [r5, #3]
    c32e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c332:	2a01      	cmp	r2, #1
    c334:	f63f ad2a 	bhi.w	bd8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
                  settings.meridianFlipPause = parameter[3] - '0';
    c338:	3b30      	subs	r3, #48	; 0x30
    c33a:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
    c33e:	bf18      	it	ne
    c340:	2301      	movne	r3, #1
    c342:	f363 0241 	bfi	r2, r3, #1, #1
    c346:	f880 2200 	strb.w	r2, [r0, #512]	; 0x200
    c34a:	e45c      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            if (transform.meridianFlips && GOTO_FEATURE != OFF) {
    c34c:	4b6f      	ldr	r3, [pc, #444]	; (c50c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ac>)
    c34e:	f893 65c5 	ldrb.w	r6, [r3, #1477]	; 0x5c5
    c352:	2e00      	cmp	r6, #0
    c354:	f43f acf6 	beq.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
              switch (parameter[3]) {
    c358:	78eb      	ldrb	r3, [r5, #3]
    c35a:	2b45      	cmp	r3, #69	; 0x45
    c35c:	f000 841e 	beq.w	cb9c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x103c>
    c360:	2b57      	cmp	r3, #87	; 0x57
    c362:	f000 8416 	beq.w	cb92 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1032>
    c366:	2b42      	cmp	r3, #66	; 0x42
    c368:	f000 8458 	beq.w	cc1c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x10bc>
                default: *commandError = CE_PARAM_RANGE;
    c36c:	2304      	movs	r3, #4
    c36e:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c370:	7013      	strb	r3, [r2, #0]
    c372:	e448      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    c374:	4a65      	ldr	r2, [pc, #404]	; (c50c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ac>)
    c376:	f892 35c4 	ldrb.w	r3, [r2, #1476]	; 0x5c4
            if ((transform.isEquatorial()) && transform.meridianFlips && GOTO_FEATURE != OFF) {
    c37a:	3b01      	subs	r3, #1
    c37c:	2b01      	cmp	r3, #1
    c37e:	f63f ace1 	bhi.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
    c382:	f892 65c5 	ldrb.w	r6, [r2, #1477]	; 0x5c5
    c386:	2e00      	cmp	r6, #0
    c388:	f43f acdc 	beq.w	bd44 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1e4>
              if (parameter[3] == '0' || parameter[3] == '1') {
    c38c:	78eb      	ldrb	r3, [r5, #3]
    c38e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c392:	2a01      	cmp	r2, #1
    c394:	f63f acfa 	bhi.w	bd8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
                settings.meridianFlipAuto = parameter[3] - '0';
    c398:	3b30      	subs	r3, #48	; 0x30
    c39a:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
    c39e:	bf18      	it	ne
    c3a0:	2301      	movne	r3, #1
    c3a2:	f363 0200 	bfi	r2, r3, #0, #1
    c3a6:	f880 2200 	strb.w	r2, [r0, #512]	; 0x200
    c3aa:	e42c      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            if (state == GS_NONE && guide.state == GU_NONE) {
    c3ac:	4a59      	ldr	r2, [pc, #356]	; (c514 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9b4>)
            *numericReply = false;
    c3ae:	2100      	movs	r1, #0
            if (state == GS_NONE && guide.state == GU_NONE) {
    c3b0:	7803      	ldrb	r3, [r0, #0]
    c3b2:	7812      	ldrb	r2, [r2, #0]
            *numericReply = false;
    c3b4:	9863      	ldr	r0, [sp, #396]	; 0x18c
            if (state == GS_NONE && guide.state == GU_NONE) {
    c3b6:	4313      	orrs	r3, r2
            *numericReply = false;
    c3b8:	7001      	strb	r1, [r0, #0]
            if (state == GS_NONE && guide.state == GU_NONE) {
    c3ba:	d111      	bne.n	c3e0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x880>
              switch (parameter[3]) {
    c3bc:	78eb      	ldrb	r3, [r5, #3]
    c3be:	3b31      	subs	r3, #49	; 0x31
    c3c0:	2b04      	cmp	r3, #4
    c3c2:	f200 8415 	bhi.w	cbf0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1090>
    c3c6:	e8df f013 	tbh	[pc, r3, lsl #1]
    c3ca:	0435      	.short	0x0435
    c3cc:	0413042e 	.word	0x0413042e
    c3d0:	045d0462 	.word	0x045d0462
            if (state == GS_NONE && guide.state == GU_NONE) {
    c3d4:	4a4f      	ldr	r2, [pc, #316]	; (c514 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9b4>)
    c3d6:	7803      	ldrb	r3, [r0, #0]
    c3d8:	7812      	ldrb	r2, [r2, #0]
    c3da:	4313      	orrs	r3, r2
    c3dc:	f000 838c 	beq.w	caf8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf98>
            } else *commandError = CE_SLEW_IN_MOTION;
    c3e0:	2316      	movs	r3, #22
    c3e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
  return true;
    c3e4:	2601      	movs	r6, #1
            } else *commandError = CE_SLEW_IN_MOTION;
    c3e6:	7013      	strb	r3, [r2, #0]
    c3e8:	e40d      	b.n	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
      if (!convert.dmsToDouble(&gotoTarget.d, parameter, true)) *commandError = CE_PARAM_RANGE; else
    c3ea:	f100 0120 	add.w	r1, r0, #32
    c3ee:	2301      	movs	r3, #1
    c3f0:	462a      	mov	r2, r5
    c3f2:	4845      	ldr	r0, [pc, #276]	; (c508 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9a8>)
    c3f4:	f7f8 fae8 	bl	49c8 <Convert::dmsToDouble(double*, char*, bool)>
    c3f8:	4606      	mov	r6, r0
    c3fa:	2800      	cmp	r0, #0
    c3fc:	f43f acc6 	beq.w	bd8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
      gotoTarget.d = degToRad(gotoTarget.d);
    c400:	ed97 5b08 	vldr	d5, [r7, #32]
    c404:	ed9f 6b3c 	vldr	d6, [pc, #240]	; c4f8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x998>
    c408:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c40c:	ed87 7b08 	vstr	d7, [r7, #32]
    c410:	f7ff bbf9 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    c414:	4840      	ldr	r0, [pc, #256]	; (c518 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9b8>)
    c416:	f7f4 fe89 	bl	112c <Axis::getInstrumentCoordinate()>
    c41a:	2200      	movs	r2, #0
    c41c:	493f      	ldr	r1, [pc, #252]	; (c51c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9bc>)
    c41e:	4648      	mov	r0, r9
    c420:	f002 ffc2 	bl	f3a8 <Home::getPosition(CoordReturn)>
    c424:	e428      	b.n	bc78 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x118>
            case 'd': transform.align.model.dca = arcsecToRad(atol(&parameter[3])); break;    // dca
    c426:	1ce8      	adds	r0, r5, #3
    c428:	f011 f8ac 	bl	1d584 <atol>
    c42c:	4b3c      	ldr	r3, [pc, #240]	; (c520 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c0>)
    c42e:	ed9f 5b34 	vldr	d5, [pc, #208]	; c500 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9a0>
            case '1': transform.align.model.ax2Cor = arcsecToRad(atol(&parameter[3])); break; // ax2Cor 
    c432:	ee07 0a90 	vmov	s15, r0
    c436:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    c43a:	ee86 7b05 	vdiv.f64	d7, d6, d5
    c43e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c442:	ed83 7a00 	vstr	s14, [r3]
  return true;
    c446:	2601      	movs	r6, #1
    c448:	f7ff bbdd 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
        *commandError = e;
    c44c:	9b64      	ldr	r3, [sp, #400]	; 0x190
        alignState.currentStar = 0;
    c44e:	f8a7 61e2 	strh.w	r6, [r7, #482]	; 0x1e2
        *commandError = e;
    c452:	7018      	strb	r0, [r3, #0]
    if (command[1] == 'M') {
    c454:	7863      	ldrb	r3, [r4, #1]
    c456:	2b4d      	cmp	r3, #77	; 0x4d
    c458:	f47f ac56 	bne.w	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
    c45c:	e434      	b.n	bcc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x168>
        strcpy(reply, "E9");
    c45e:	4b31      	ldr	r3, [pc, #196]	; (c524 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c4>)
    c460:	881a      	ldrh	r2, [r3, #0]
    c462:	789b      	ldrb	r3, [r3, #2]
    c464:	f8a8 2000 	strh.w	r2, [r8]
    c468:	f888 3002 	strb.w	r3, [r8, #2]
    *numericReply = false;
    c46c:	e44c      	b.n	bd08 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a8>
          *numericReply = false;
    c46e:	2200      	movs	r2, #0
    c470:	9963      	ldr	r1, [sp, #396]	; 0x18c
    c472:	700a      	strb	r2, [r1, #0]
          switch (parameter[1]) {
    c474:	786a      	ldrb	r2, [r5, #1]
    c476:	3a30      	subs	r2, #48	; 0x30
    c478:	2a34      	cmp	r2, #52	; 0x34
    c47a:	d855      	bhi.n	c528 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c8>
    c47c:	e8df f012 	tbh	[pc, r2, lsl #1]
    c480:	01120114 	.word	0x01120114
    c484:	010e0110 	.word	0x010e0110
    c488:	01160118 	.word	0x01160118
    c48c:	00f70100 	.word	0x00f70100
    c490:	00e400f5 	.word	0x00e400f5
    c494:	00540054 	.word	0x00540054
    c498:	00540054 	.word	0x00540054
    c49c:	00540054 	.word	0x00540054
    c4a0:	00cd0054 	.word	0x00cd0054
    c4a4:	00a600bd 	.word	0x00a600bd
    c4a8:	007c008d 	.word	0x007c008d
    c4ac:	00540054 	.word	0x00540054
    c4b0:	00540054 	.word	0x00540054
    c4b4:	00540054 	.word	0x00540054
    c4b8:	00540054 	.word	0x00540054
    c4bc:	00540054 	.word	0x00540054
    c4c0:	00540054 	.word	0x00540054
    c4c4:	00540054 	.word	0x00540054
    c4c8:	00540054 	.word	0x00540054
    c4cc:	00540054 	.word	0x00540054
    c4d0:	00540054 	.word	0x00540054
    c4d4:	00540054 	.word	0x00540054
    c4d8:	00540054 	.word	0x00540054
    c4dc:	00540054 	.word	0x00540054
    c4e0:	00780054 	.word	0x00780054
    c4e4:	00720076 	.word	0x00720076
    c4e8:	005c      	.short	0x005c
    c4ea:	bf00      	nop
    c4ec:	f3af 8000 	nop.w
    c4f0:	a4aeacc4 	.word	0xa4aeacc4
    c4f4:	400e8ec8 	.word	0x400e8ec8
    c4f8:	1a63c1f8 	.word	0x1a63c1f8
    c4fc:	404ca5dc 	.word	0x404ca5dc
    c500:	7331ad79 	.word	0x7331ad79
    c504:	41092dc6 	.word	0x41092dc6
    c508:	200043d0 	.word	0x200043d0
    c50c:	200064ac 	.word	0x200064ac
    c510:	200054e0 	.word	0x200054e0
    c514:	200043e8 	.word	0x200043e8
    c518:	200051a8 	.word	0x200051a8
    c51c:	20005478 	.word	0x20005478
    c520:	200069ec 	.word	0x200069ec
    c524:	200021b0 	.word	0x200021b0
            default: *numericReply = true; *commandError = CE_CMD_UNKNOWN;
    c528:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    c52a:	2601      	movs	r6, #1
    c52c:	2302      	movs	r3, #2
    c52e:	7016      	strb	r6, [r2, #0]
    c530:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c532:	7013      	strb	r3, [r2, #0]
    c534:	f7ff bb67 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case 'd': sprintf(reply,"%ld",(long)(round(radToArcsec(transform.align.model.dca)))); break;    // dca
    c538:	4bc7      	ldr	r3, [pc, #796]	; (c858 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcf8>)
            case '1': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.ax2Cor)))); break; // ax2Cor
    c53a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; c840 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce0>
    c53e:	ed93 7a00 	vldr	s14, [r3]
    c542:	4640      	mov	r0, r8
    c544:	49c5      	ldr	r1, [pc, #788]	; (c85c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcfc>)
  return true;
    c546:	2601      	movs	r6, #1
            case '1': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.ax2Cor)))); break; // ax2Cor
    c548:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c54c:	ee27 7b06 	vmul.f64	d7, d7, d6
    c550:	feb8 7b47 	vrinta.f64	d7, d7
    c554:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    c558:	ee17 2a90 	vmov	r2, s15
    c55c:	f012 fcc8 	bl	1eef0 <sprintf>
    c560:	f7ff bb51 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case 'c': sprintf(reply,"%ld",(long)(round(radToDeg(transform.align.model.dcp)))); break;       // dcp
    c564:	ed9f 6bb8 	vldr	d6, [pc, #736]	; c848 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    c568:	4bbd      	ldr	r3, [pc, #756]	; (c860 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd00>)
    c56a:	e7e8      	b.n	c53e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9de>
            case 'b': sprintf(reply,"%ld",(long)(round(radToArcsec(transform.align.model.hca)))); break;    // hca
    c56c:	4bbd      	ldr	r3, [pc, #756]	; (c864 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd04>)
    c56e:	e7e4      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case 'a': sprintf(reply,"%ld",(long)(round(radToDeg(transform.align.model.hcp)))); break;       // hcp
    c570:	ed9f 6bb5 	vldr	d6, [pc, #724]	; c848 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    c574:	4bbc      	ldr	r3, [pc, #752]	; (c868 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd08>)
    c576:	e7e2      	b.n	c53e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9de>
            case 'E': sprintf(reply,"%ld",(long)(transform.align.mount[star].side)); star++; break;
    c578:	4cbc      	ldr	r4, [pc, #752]	; (c86c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0c>)
    c57a:	2030      	movs	r0, #48	; 0x30
    c57c:	4bbc      	ldr	r3, [pc, #752]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
  return true;
    c57e:	2601      	movs	r6, #1
            case 'E': sprintf(reply,"%ld",(long)(transform.align.mount[star].side)); star++; break;
    c580:	6822      	ldr	r2, [r4, #0]
    c582:	49b6      	ldr	r1, [pc, #728]	; (c85c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcfc>)
    c584:	fb00 3302 	mla	r3, r0, r2, r3
    c588:	4640      	mov	r0, r8
    c58a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    c58c:	f012 fcb0 	bl	1eef0 <sprintf>
    c590:	6823      	ldr	r3, [r4, #0]
    c592:	4433      	add	r3, r6
    c594:	6023      	str	r3, [r4, #0]
    c596:	f7ff bb36 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case 'D': { convert.doubleToDms(reply,radToDeg(transform.align.mount[star].d),false,true,PM_HIGH); } break;
    c59a:	4bb4      	ldr	r3, [pc, #720]	; (c86c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0c>)
    c59c:	2230      	movs	r2, #48	; 0x30
    c59e:	48b4      	ldr	r0, [pc, #720]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c5a0:	2402      	movs	r4, #2
    c5a2:	681b      	ldr	r3, [r3, #0]
    c5a4:	4641      	mov	r1, r8
    c5a6:	9400      	str	r4, [sp, #0]
    c5a8:	fb02 0003 	mla	r0, r2, r3, r0
    c5ac:	2301      	movs	r3, #1
    c5ae:	2200      	movs	r2, #0
    c5b0:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
    c5b4:	ed9f 0ba4 	vldr	d0, [pc, #656]	; c848 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    c5b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c5bc:	48ad      	ldr	r0, [pc, #692]	; (c874 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd14>)
  return true;
    c5be:	461e      	mov	r6, r3
            case 'D': { convert.doubleToDms(reply,radToDeg(transform.align.mount[star].d),false,true,PM_HIGH); } break;
    c5c0:	ee27 0b00 	vmul.f64	d0, d7, d0
    c5c4:	f7f7 fe78 	bl	42b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>
    c5c8:	f7ff bb1d 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case 'C': { convert.doubleToHms(reply,radToHrs(transform.align.mount[star].h),true,PM_HIGH); } break;
    c5cc:	4ba7      	ldr	r3, [pc, #668]	; (c86c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0c>)
    c5ce:	2030      	movs	r0, #48	; 0x30
    c5d0:	4ca7      	ldr	r4, [pc, #668]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c5d2:	4641      	mov	r1, r8
    c5d4:	681a      	ldr	r2, [r3, #0]
    c5d6:	2302      	movs	r3, #2
    c5d8:	fb00 4402 	mla	r4, r0, r2, r4
    c5dc:	2201      	movs	r2, #1
    c5de:	48a5      	ldr	r0, [pc, #660]	; (c874 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd14>)
    c5e0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
  return true;
    c5e4:	4616      	mov	r6, r2
            case 'C': { convert.doubleToHms(reply,radToHrs(transform.align.mount[star].h),true,PM_HIGH); } break;
    c5e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c5ea:	ed9f 0b99 	vldr	d0, [pc, #612]	; c850 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcf0>
    c5ee:	ee27 0b00 	vmul.f64	d0, d7, d0
    c5f2:	f7f7 fd9d 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
    c5f6:	f7ff bb06 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case 'B': { convert.doubleToDms(reply,radToDeg(transform.align.actual[star].d),false,true,PM_HIGH); } break;
    c5fa:	4b9c      	ldr	r3, [pc, #624]	; (c86c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0c>)
    c5fc:	2230      	movs	r2, #48	; 0x30
    c5fe:	489c      	ldr	r0, [pc, #624]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c600:	2402      	movs	r4, #2
    c602:	681b      	ldr	r3, [r3, #0]
    c604:	4641      	mov	r1, r8
    c606:	9400      	str	r4, [sp, #0]
    c608:	fb02 0003 	mla	r0, r2, r3, r0
    c60c:	2301      	movs	r3, #1
    c60e:	2200      	movs	r2, #0
    c610:	ed90 7a77 	vldr	s14, [r0, #476]	; 0x1dc
    c614:	ed9f 0b8c 	vldr	d0, [pc, #560]	; c848 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    c618:	e7ce      	b.n	c5b8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa58>
            case 'A': { convert.doubleToHms(reply,radToHrs(transform.align.actual[star].h),true,PM_HIGH); } break;
    c61a:	4b94      	ldr	r3, [pc, #592]	; (c86c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0c>)
    c61c:	2030      	movs	r0, #48	; 0x30
    c61e:	4c94      	ldr	r4, [pc, #592]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c620:	4641      	mov	r1, r8
    c622:	681a      	ldr	r2, [r3, #0]
    c624:	2302      	movs	r3, #2
    c626:	fb00 4402 	mla	r4, r0, r2, r4
    c62a:	2201      	movs	r2, #1
    c62c:	4891      	ldr	r0, [pc, #580]	; (c874 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd14>)
    c62e:	ed94 7a76 	vldr	s14, [r4, #472]	; 0x1d8
  return true;
    c632:	4616      	mov	r6, r2
            case 'A': { convert.doubleToHms(reply,radToHrs(transform.align.actual[star].h),true,PM_HIGH); } break;
    c634:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    c638:	ed9f 0b85 	vldr	d0, [pc, #532]	; c850 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcf0>
    c63c:	ee27 0b00 	vmul.f64	d0, d7, d0
    c640:	f7f7 fd76 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
    c644:	f7ff badf 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case '9': { int n = 0; if (alignState.currentStar > alignState.lastStar) n = alignState.lastStar; sprintf(reply,"%ld",(long)(n)); star = 0; } break;
    c648:	f890 11e2 	ldrb.w	r1, [r0, #482]	; 0x1e2
  return true;
    c64c:	2601      	movs	r6, #1
            case '9': { int n = 0; if (alignState.currentStar > alignState.lastStar) n = alignState.lastStar; sprintf(reply,"%ld",(long)(n)); star = 0; } break;
    c64e:	f890 21e3 	ldrb.w	r2, [r0, #483]	; 0x1e3
    c652:	4640      	mov	r0, r8
    c654:	4291      	cmp	r1, r2
    c656:	bf98      	it	ls
    c658:	461a      	movls	r2, r3
    c65a:	4980      	ldr	r1, [pc, #512]	; (c85c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcfc>)
    c65c:	f012 fc48 	bl	1eef0 <sprintf>
    c660:	4b82      	ldr	r3, [pc, #520]	; (c86c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0c>)
    c662:	2200      	movs	r2, #0
    c664:	601a      	str	r2, [r3, #0]
    c666:	f7ff bace 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case '8': sprintf(reply,"%ld",(long)(round(radToArcsec(transform.align.model.tfCor)))); break;  // tfCor
    c66a:	4b83      	ldr	r3, [pc, #524]	; (c878 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd18>)
    c66c:	e765      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '7': if (transform.mountType != FORK && transform.mountType != ALTAZM)                     // dfCor
    c66e:	4b80      	ldr	r3, [pc, #512]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c670:	f893 25c4 	ldrb.w	r2, [r3, #1476]	; 0x5c4
    c674:	3a02      	subs	r2, #2
    c676:	2a01      	cmp	r2, #1
    c678:	d908      	bls.n	c68c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb2c>
              sprintf(reply,"%ld",(long)(round(radToArcsec(transform.align.model.dfCor)))); else sprintf(reply,"%ld",(long)(0));
    c67a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
    c67e:	e75c      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '6': if (transform.mountType == FORK || transform.mountType == ALTAZM)                     // ffCor
    c680:	4b7b      	ldr	r3, [pc, #492]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c682:	f893 25c4 	ldrb.w	r2, [r3, #1476]	; 0x5c4
    c686:	3a02      	subs	r2, #2
    c688:	2a01      	cmp	r2, #1
    c68a:	d9f6      	bls.n	c67a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb1a>
              sprintf(reply,"%ld",(long)(round(radToArcsec(transform.align.model.dfCor)))); else sprintf(reply,"%ld",(long)(0));
    c68c:	2200      	movs	r2, #0
    c68e:	4973      	ldr	r1, [pc, #460]	; (c85c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcfc>)
    c690:	4640      	mov	r0, r8
  return true;
    c692:	2601      	movs	r6, #1
              sprintf(reply,"%ld",(long)(round(radToArcsec(transform.align.model.dfCor)))); else sprintf(reply,"%ld",(long)(0));
    c694:	f012 fc2c 	bl	1eef0 <sprintf>
    c698:	f7ff bab5 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
            case '3': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.azmCor)))); break; // azmCor
    c69c:	4b77      	ldr	r3, [pc, #476]	; (c87c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd1c>)
    c69e:	e74c      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '2': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.altCor)))); break; // altCor
    c6a0:	4b77      	ldr	r3, [pc, #476]	; (c880 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd20>)
    c6a2:	e74a      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '1': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.ax2Cor)))); break; // ax2Cor
    c6a4:	4b77      	ldr	r3, [pc, #476]	; (c884 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd24>)
    c6a6:	e748      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '0': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.ax1Cor)))); break; // ax1Cor
    c6a8:	4b77      	ldr	r3, [pc, #476]	; (c888 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd28>)
    c6aa:	e746      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '5': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.pdCor))));  break; // pdCor
    c6ac:	4b77      	ldr	r3, [pc, #476]	; (c88c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd2c>)
    c6ae:	e744      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
            case '4': sprintf(reply,"%ld",(long)round((radToArcsec(transform.align.model.doCor))));  break; // doCor
    c6b0:	4b77      	ldr	r3, [pc, #476]	; (c890 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd30>)
    c6b2:	e742      	b.n	c53a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9da>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
    c6b4:	2403      	movs	r4, #3
    c6b6:	f7ff bb94 	b.w	bde2 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x282>
          if (parameter[0] == 'e' && parameter[1] == 0) e = request(newTarget, PSS_EAST_ONLY); else
    c6ba:	2b65      	cmp	r3, #101	; 0x65
    c6bc:	f000 81da 	beq.w	ca74 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf14>
          if (parameter[0] == 'w' && parameter[1] == 0) e = request(newTarget, PSS_WEST_ONLY); else e = CE_CMD_UNKNOWN;
    c6c0:	2b77      	cmp	r3, #119	; 0x77
    c6c2:	f000 820d 	beq.w	cae0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf80>
    c6c6:	2002      	movs	r0, #2
    c6c8:	f7ff ba9b 	b.w	bc02 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa2>
    c6cc:	f008 fa36 	bl	14b3c <Status::wake()>
    c6d0:	f7ff baf1 	b.w	bcb6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x156>
          switch (parameter[1]) {
    c6d4:	786b      	ldrb	r3, [r5, #1]
    c6d6:	3b30      	subs	r3, #48	; 0x30
    c6d8:	2b34      	cmp	r3, #52	; 0x34
    c6da:	d86d      	bhi.n	c7b8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc58>
    c6dc:	a201      	add	r2, pc, #4	; (adr r2, c6e4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb84>)
    c6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c6e2:	bf00      	nop
    c6e4:	0000c98d 	.word	0x0000c98d
    c6e8:	0000c97f 	.word	0x0000c97f
    c6ec:	0000c971 	.word	0x0000c971
    c6f0:	0000c963 	.word	0x0000c963
    c6f4:	0000c955 	.word	0x0000c955
    c6f8:	0000c947 	.word	0x0000c947
    c6fc:	0000c937 	.word	0x0000c937
    c700:	0000c905 	.word	0x0000c905
    c704:	0000ca29 	.word	0x0000ca29
    c708:	0000ca07 	.word	0x0000ca07
    c70c:	0000c7b9 	.word	0x0000c7b9
    c710:	0000c7b9 	.word	0x0000c7b9
    c714:	0000c7b9 	.word	0x0000c7b9
    c718:	0000c7b9 	.word	0x0000c7b9
    c71c:	0000c7b9 	.word	0x0000c7b9
    c720:	0000c7b9 	.word	0x0000c7b9
    c724:	0000c7b9 	.word	0x0000c7b9
    c728:	0000c9d3 	.word	0x0000c9d3
    c72c:	0000c99b 	.word	0x0000c99b
    c730:	0000c8d1 	.word	0x0000c8d1
    c734:	0000c899 	.word	0x0000c899
    c738:	0000c7eb 	.word	0x0000c7eb
    c73c:	0000c7b9 	.word	0x0000c7b9
    c740:	0000c7b9 	.word	0x0000c7b9
    c744:	0000c7b9 	.word	0x0000c7b9
    c748:	0000c7b9 	.word	0x0000c7b9
    c74c:	0000c7b9 	.word	0x0000c7b9
    c750:	0000c7b9 	.word	0x0000c7b9
    c754:	0000c7b9 	.word	0x0000c7b9
    c758:	0000c7b9 	.word	0x0000c7b9
    c75c:	0000c7b9 	.word	0x0000c7b9
    c760:	0000c7b9 	.word	0x0000c7b9
    c764:	0000c7b9 	.word	0x0000c7b9
    c768:	0000c7b9 	.word	0x0000c7b9
    c76c:	0000c7b9 	.word	0x0000c7b9
    c770:	0000c7b9 	.word	0x0000c7b9
    c774:	0000c7b9 	.word	0x0000c7b9
    c778:	0000c7b9 	.word	0x0000c7b9
    c77c:	0000c7b9 	.word	0x0000c7b9
    c780:	0000c7b9 	.word	0x0000c7b9
    c784:	0000c7b9 	.word	0x0000c7b9
    c788:	0000c7b9 	.word	0x0000c7b9
    c78c:	0000c7b9 	.word	0x0000c7b9
    c790:	0000c7b9 	.word	0x0000c7b9
    c794:	0000c7b9 	.word	0x0000c7b9
    c798:	0000c7b9 	.word	0x0000c7b9
    c79c:	0000c7b9 	.word	0x0000c7b9
    c7a0:	0000c7b9 	.word	0x0000c7b9
    c7a4:	0000c7b9 	.word	0x0000c7b9
    c7a8:	0000c7dd 	.word	0x0000c7dd
    c7ac:	0000c7cf 	.word	0x0000c7cf
    c7b0:	0000c7c1 	.word	0x0000c7c1
    c7b4:	0000c427 	.word	0x0000c427
            default: *commandError = CE_CMD_UNKNOWN;
    c7b8:	2302      	movs	r3, #2
    c7ba:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c7bc:	7013      	strb	r3, [r2, #0]
    c7be:	e642      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
            case 'c': transform.align.model.dcp = degToRad(atol(&parameter[3])); break;       // dcp
    c7c0:	1ce8      	adds	r0, r5, #3
    c7c2:	f010 fedf 	bl	1d584 <atol>
    c7c6:	4b26      	ldr	r3, [pc, #152]	; (c860 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd00>)
    c7c8:	ed9f 5b1f 	vldr	d5, [pc, #124]	; c848 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    c7cc:	e631      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case 'b': transform.align.model.hca = arcsecToRad(atol(&parameter[3])); break;    // hca
    c7ce:	1ce8      	adds	r0, r5, #3
    c7d0:	f010 fed8 	bl	1d584 <atol>
    c7d4:	4b23      	ldr	r3, [pc, #140]	; (c864 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd04>)
    c7d6:	ed9f 5b1a 	vldr	d5, [pc, #104]	; c840 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce0>
    c7da:	e62a      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case 'a': transform.align.model.hcp = degToRad(atol(&parameter[3])); break;       // hcp
    c7dc:	1ce8      	adds	r0, r5, #3
    c7de:	f010 fed1 	bl	1d584 <atol>
    c7e2:	4b21      	ldr	r3, [pc, #132]	; (c868 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd08>)
    c7e4:	ed9f 5b18 	vldr	d5, [pc, #96]	; c848 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xce8>
    c7e8:	e623      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
              if (star <= 8) {
    c7ea:	4e2a      	ldr	r6, [pc, #168]	; (c894 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd34>)
    c7ec:	6837      	ldr	r7, [r6, #0]
    c7ee:	2f08      	cmp	r7, #8
    c7f0:	f73f ae29 	bgt.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
                transform.align.actual[star].side = transform.align.mount[star].side = atol(&parameter[3]);
    c7f4:	4c1e      	ldr	r4, [pc, #120]	; (c870 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd10>)
    c7f6:	1ce8      	adds	r0, r5, #3
    c7f8:	f010 fec4 	bl	1d584 <atol>
    c7fc:	2530      	movs	r5, #48	; 0x30
    c7fe:	6833      	ldr	r3, [r6, #0]
                if (transform.mountType == ALTAZM) {
    c800:	f994 25c4 	ldrsb.w	r2, [r4, #1476]	; 0x5c4
                transform.align.actual[star].side = transform.align.mount[star].side = atol(&parameter[3]);
    c804:	fb05 4707 	mla	r7, r5, r7, r4
    c808:	fb05 4303 	mla	r3, r5, r3, r4
                if (transform.mountType == ALTAZM) {
    c80c:	2a03      	cmp	r2, #3
                transform.align.actual[star].side = transform.align.mount[star].side = atol(&parameter[3]);
    c80e:	6338      	str	r0, [r7, #48]	; 0x30
    c810:	f8c3 01e0 	str.w	r0, [r3, #480]	; 0x1e0
                if (transform.mountType == ALTAZM) {
    c814:	f000 8289 	beq.w	cd2a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11ca>
                if (transform.mountType == ALTALT) {
    c818:	2a04      	cmp	r2, #4
    c81a:	f000 823f 	beq.w	cc9c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x113c>
                  transform.align.actual[star].ax2 = transform.align.actual[star].d;
    c81e:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
                  transform.align.actual[star].ax1 = transform.align.actual[star].h;
    c822:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
                  transform.align.mount[star].ax1 = transform.align.mount[star].h;
    c826:	6a99      	ldr	r1, [r3, #40]	; 0x28
                  transform.align.actual[star].ax2 = transform.align.actual[star].d;
    c828:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
                  transform.align.mount[star].ax2 = transform.align.mount[star].d;
    c82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                  transform.align.actual[star].ax1 = transform.align.actual[star].h;
    c82e:	f8c3 01b4 	str.w	r0, [r3, #436]	; 0x1b4
                  transform.align.mount[star].ax1 = transform.align.mount[star].h;
    c832:	6059      	str	r1, [r3, #4]
                  transform.align.mount[star].ax2 = transform.align.mount[star].d;
    c834:	60da      	str	r2, [r3, #12]
                star++;
    c836:	6833      	ldr	r3, [r6, #0]
    c838:	3301      	adds	r3, #1
    c83a:	6033      	str	r3, [r6, #0]
    c83c:	e603      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
    c83e:	bf00      	nop
    c840:	7331ad79 	.word	0x7331ad79
    c844:	41092dc6 	.word	0x41092dc6
    c848:	1a63c1f8 	.word	0x1a63c1f8
    c84c:	404ca5dc 	.word	0x404ca5dc
    c850:	a4aeacc4 	.word	0xa4aeacc4
    c854:	400e8ec8 	.word	0x400e8ec8
    c858:	200069ec 	.word	0x200069ec
    c85c:	20002248 	.word	0x20002248
    c860:	200069e8 	.word	0x200069e8
    c864:	200069e4 	.word	0x200069e4
    c868:	200069e0 	.word	0x200069e0
    c86c:	20005808 	.word	0x20005808
    c870:	200064ac 	.word	0x200064ac
    c874:	200043d0 	.word	0x200043d0
    c878:	200069dc 	.word	0x200069dc
    c87c:	200069cc 	.word	0x200069cc
    c880:	200069c8 	.word	0x200069c8
    c884:	200069c4 	.word	0x200069c4
    c888:	200069c0 	.word	0x200069c0
    c88c:	200069d4 	.word	0x200069d4
    c890:	200069d0 	.word	0x200069d0
    c894:	2000580c 	.word	0x2000580c
            case 'D': if (!convert.dmsToDouble(&d, &parameter[3], true, PM_HIGH)) *commandError = CE_PARAM_FORM; else transform.align.mount[star].d = degToRad(d); break;
    c898:	2402      	movs	r4, #2
    c89a:	2301      	movs	r3, #1
    c89c:	1cea      	adds	r2, r5, #3
    c89e:	a942      	add	r1, sp, #264	; 0x108
    c8a0:	48c7      	ldr	r0, [pc, #796]	; (cbc0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1060>)
    c8a2:	9400      	str	r4, [sp, #0]
    c8a4:	f7f7 ff9c 	bl	47e0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)>
    c8a8:	2800      	cmp	r0, #0
    c8aa:	f000 8121 	beq.w	caf0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf90>
    c8ae:	4ac5      	ldr	r2, [pc, #788]	; (cbc4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1064>)
    c8b0:	2130      	movs	r1, #48	; 0x30
    c8b2:	4bc5      	ldr	r3, [pc, #788]	; (cbc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1068>)
    c8b4:	6812      	ldr	r2, [r2, #0]
    c8b6:	ed9f 6bbc 	vldr	d6, [pc, #752]	; cba8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1048>
    c8ba:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
    c8be:	fb01 3302 	mla	r3, r1, r2, r3
    c8c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c8c6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c8ca:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    c8ce:	e5ba      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
            case 'C': if (!convert.hmsToDouble(&d, &parameter[3], PM_HIGH)) *commandError = CE_PARAM_FORM; else transform.align.mount[star].h = hrsToRad(d); break;
    c8d0:	2302      	movs	r3, #2
    c8d2:	1cea      	adds	r2, r5, #3
    c8d4:	a942      	add	r1, sp, #264	; 0x108
    c8d6:	48ba      	ldr	r0, [pc, #744]	; (cbc0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1060>)
    c8d8:	f7f7 fea2 	bl	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
    c8dc:	2800      	cmp	r0, #0
    c8de:	f000 8107 	beq.w	caf0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf90>
    c8e2:	4ab8      	ldr	r2, [pc, #736]	; (cbc4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1064>)
    c8e4:	2130      	movs	r1, #48	; 0x30
    c8e6:	4bb8      	ldr	r3, [pc, #736]	; (cbc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1068>)
    c8e8:	6812      	ldr	r2, [r2, #0]
    c8ea:	ed9f 6bb1 	vldr	d6, [pc, #708]	; cbb0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1050>
    c8ee:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
    c8f2:	fb01 3302 	mla	r3, r1, r2, r3
    c8f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c8fa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c8fe:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    c902:	e5a0      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
              if (transform.mountType != FORK && transform.mountType != ALTAZM)               // fdCor or ffCor
    c904:	4cb0      	ldr	r4, [pc, #704]	; (cbc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1068>)
    c906:	f894 35c4 	ldrb.w	r3, [r4, #1476]	; 0x5c4
    c90a:	3b02      	subs	r3, #2
    c90c:	2b01      	cmp	r3, #1
    c90e:	f67f ad9a 	bls.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
                transform.align.model.dfCor = arcsecToRad(atol(&parameter[3]));                 
    c912:	1ce8      	adds	r0, r5, #3
    c914:	f204 542c 	addw	r4, r4, #1324	; 0x52c
    c918:	f010 fe34 	bl	1d584 <atol>
    c91c:	ee07 0a90 	vmov	s15, r0
    c920:	ed9f 5ba5 	vldr	d5, [pc, #660]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c924:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    c928:	ee86 7b05 	vdiv.f64	d7, d6, d5
    c92c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c930:	ed84 7a00 	vstr	s14, [r4]
    c934:	e587      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
              if (transform.mountType == FORK || transform.mountType == ALTAZM)               // fdCor or ffCor
    c936:	4ca4      	ldr	r4, [pc, #656]	; (cbc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1068>)
    c938:	f894 35c4 	ldrb.w	r3, [r4, #1476]	; 0x5c4
    c93c:	3b02      	subs	r3, #2
    c93e:	2b01      	cmp	r3, #1
    c940:	f63f ad81 	bhi.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
    c944:	e7e5      	b.n	c912 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xdb2>
            case '5': transform.align.model.pdCor = arcsecToRad(atol(&parameter[3])); break;  // pdCor
    c946:	1ce8      	adds	r0, r5, #3
    c948:	f010 fe1c 	bl	1d584 <atol>
    c94c:	4b9f      	ldr	r3, [pc, #636]	; (cbcc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x106c>)
    c94e:	ed9f 5b9a 	vldr	d5, [pc, #616]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c952:	e56e      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case '4': transform.align.model.doCor = arcsecToRad(atol(&parameter[3])); break;  // doCor
    c954:	1ce8      	adds	r0, r5, #3
    c956:	f010 fe15 	bl	1d584 <atol>
    c95a:	4b9d      	ldr	r3, [pc, #628]	; (cbd0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1070>)
    c95c:	ed9f 5b96 	vldr	d5, [pc, #600]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c960:	e567      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case '3': transform.align.model.azmCor = arcsecToRad(atol(&parameter[3])); break; // azmCor
    c962:	1ce8      	adds	r0, r5, #3
    c964:	f010 fe0e 	bl	1d584 <atol>
    c968:	4b9a      	ldr	r3, [pc, #616]	; (cbd4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1074>)
    c96a:	ed9f 5b93 	vldr	d5, [pc, #588]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c96e:	e560      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case '2': transform.align.model.altCor = arcsecToRad(atol(&parameter[3])); break; // altCor
    c970:	1ce8      	adds	r0, r5, #3
    c972:	f010 fe07 	bl	1d584 <atol>
    c976:	4b98      	ldr	r3, [pc, #608]	; (cbd8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1078>)
    c978:	ed9f 5b8f 	vldr	d5, [pc, #572]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c97c:	e559      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case '1': transform.align.model.ax2Cor = arcsecToRad(atol(&parameter[3])); break; // ax2Cor 
    c97e:	1ce8      	adds	r0, r5, #3
    c980:	f010 fe00 	bl	1d584 <atol>
    c984:	4b95      	ldr	r3, [pc, #596]	; (cbdc <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x107c>)
    c986:	ed9f 5b8c 	vldr	d5, [pc, #560]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c98a:	e552      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case '0': transform.align.model.ax1Cor = arcsecToRad(atol(&parameter[3])); break; // ax1Cor
    c98c:	1ce8      	adds	r0, r5, #3
    c98e:	f010 fdf9 	bl	1d584 <atol>
    c992:	4b93      	ldr	r3, [pc, #588]	; (cbe0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1080>)
    c994:	ed9f 5b88 	vldr	d5, [pc, #544]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    c998:	e54b      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
            case 'B': if (!convert.dmsToDouble(&d, &parameter[3], true, PM_HIGH)) *commandError = CE_PARAM_FORM; else transform.align.actual[star].d = degToRad(d); break;
    c99a:	2402      	movs	r4, #2
    c99c:	2301      	movs	r3, #1
    c99e:	1cea      	adds	r2, r5, #3
    c9a0:	a942      	add	r1, sp, #264	; 0x108
    c9a2:	4887      	ldr	r0, [pc, #540]	; (cbc0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1060>)
    c9a4:	9400      	str	r4, [sp, #0]
    c9a6:	f7f7 ff1b 	bl	47e0 <Convert::dmsToDouble(double*, char*, bool, PrecisionMode)>
    c9aa:	2800      	cmp	r0, #0
    c9ac:	f000 80a0 	beq.w	caf0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf90>
    c9b0:	4a84      	ldr	r2, [pc, #528]	; (cbc4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1064>)
    c9b2:	2130      	movs	r1, #48	; 0x30
    c9b4:	4b84      	ldr	r3, [pc, #528]	; (cbc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1068>)
    c9b6:	6812      	ldr	r2, [r2, #0]
    c9b8:	ed9f 6b7b 	vldr	d6, [pc, #492]	; cba8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1048>
    c9bc:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
    c9c0:	fb01 3302 	mla	r3, r1, r2, r3
    c9c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c9c8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    c9cc:	ed83 7a77 	vstr	s14, [r3, #476]	; 0x1dc
    c9d0:	e539      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
            case 'A': if (!convert.hmsToDouble(&d, &parameter[3], PM_HIGH)) *commandError = CE_PARAM_FORM; else transform.align.actual[star].h = hrsToRad(d); break;
    c9d2:	2302      	movs	r3, #2
    c9d4:	1cea      	adds	r2, r5, #3
    c9d6:	a942      	add	r1, sp, #264	; 0x108
    c9d8:	4879      	ldr	r0, [pc, #484]	; (cbc0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1060>)
    c9da:	f7f7 fe21 	bl	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
    c9de:	2800      	cmp	r0, #0
    c9e0:	f000 8086 	beq.w	caf0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf90>
    c9e4:	4a77      	ldr	r2, [pc, #476]	; (cbc4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1064>)
    c9e6:	2130      	movs	r1, #48	; 0x30
    c9e8:	4b77      	ldr	r3, [pc, #476]	; (cbc8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1068>)
    c9ea:	6812      	ldr	r2, [r2, #0]
    c9ec:	ed9f 6b70 	vldr	d6, [pc, #448]	; cbb0 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1050>
    c9f0:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
    c9f4:	fb01 3302 	mla	r3, r1, r2, r3
    c9f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
    c9fc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    ca00:	ed83 7a76 	vstr	s14, [r3, #472]	; 0x1d8
    ca04:	e51f      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
                int n = atol(&parameter[3]);
    ca06:	1ce8      	adds	r0, r5, #3
    ca08:	f010 fdbc 	bl	1d584 <atol>
                if (n == 0) {
    ca0c:	4603      	mov	r3, r0
    ca0e:	2800      	cmp	r0, #0
    ca10:	f000 8127 	beq.w	cc62 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1102>
                if (n == 1) {
    ca14:	2801      	cmp	r0, #1
    ca16:	f000 8114 	beq.w	cc42 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x10e2>
                if (n == 2) {
    ca1a:	2802      	cmp	r0, #2
    ca1c:	f000 812d 	beq.w	cc7a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x111a>
                } else *commandError = CE_PARAM_RANGE;
    ca20:	2304      	movs	r3, #4
    ca22:	9a64      	ldr	r2, [sp, #400]	; 0x190
    ca24:	7013      	strb	r3, [r2, #0]
    ca26:	e50e      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
            case '8': transform.align.model.tfCor = arcsecToRad(atol(&parameter[3])); break;  // tfCor
    ca28:	1ce8      	adds	r0, r5, #3
    ca2a:	f010 fdab 	bl	1d584 <atol>
    ca2e:	4b6d      	ldr	r3, [pc, #436]	; (cbe4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1084>)
    ca30:	ed9f 5b61 	vldr	d5, [pc, #388]	; cbb8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1058>
    ca34:	e4fd      	b.n	c432 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d2>
          if (newTarget.pierSide == PIER_SIDE_EAST) parameter[0] = 'w'; else
    ca36:	2377      	movs	r3, #119	; 0x77
    ca38:	702b      	strb	r3, [r5, #0]
          if (parameter[0] == 'w' && parameter[1] == 0) e = request(newTarget, PSS_WEST_ONLY); else e = CE_CMD_UNKNOWN;
    ca3a:	2301      	movs	r3, #1
    ca3c:	9315      	str	r3, [sp, #84]	; 0x54
    ca3e:	2305      	movs	r3, #5
    ca40:	2250      	movs	r2, #80	; 0x50
    ca42:	a944      	add	r1, sp, #272	; 0x110
    ca44:	4668      	mov	r0, sp
    ca46:	9314      	str	r3, [sp, #80]	; 0x50
    ca48:	f00b fd40 	bl	184cc <memcpy>
    ca4c:	4638      	mov	r0, r7
    ca4e:	e899 000c 	ldmia.w	r9, {r2, r3}
    ca52:	f000 fe25 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
        if (e != CE_CMD_UNKNOWN) {
    ca56:	2802      	cmp	r0, #2
    ca58:	f43f ae35 	beq.w	c6c6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb66>
          if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) reply[0] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    ca5c:	f1a0 030f 	sub.w	r3, r0, #15
    ca60:	b2db      	uxtb	r3, r3
    ca62:	2b08      	cmp	r3, #8
    ca64:	f240 8104 	bls.w	cc70 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1110>
          if (e == CE_NONE) reply[0] = '0';
    ca68:	2800      	cmp	r0, #0
    ca6a:	f47f aa8f 	bne.w	bf8c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42c>
    ca6e:	2330      	movs	r3, #48	; 0x30
    ca70:	f7ff ba8a 	b.w	bf88 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x428>
          if (parameter[0] == 'e' && parameter[1] == 0) e = request(newTarget, PSS_EAST_ONLY); else
    ca74:	786b      	ldrb	r3, [r5, #1]
    ca76:	2b00      	cmp	r3, #0
    ca78:	f47f ae25 	bne.w	c6c6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb66>
    ca7c:	2301      	movs	r3, #1
    ca7e:	9315      	str	r3, [sp, #84]	; 0x54
    ca80:	2304      	movs	r3, #4
    ca82:	e7dd      	b.n	ca40 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xee0>
          if (newTarget.pierSide == PIER_SIDE_WEST) parameter[0] = 'e'; else e = CE_SLEW_ERR_UNSPECIFIED;
    ca84:	2365      	movs	r3, #101	; 0x65
    ca86:	702b      	strb	r3, [r5, #0]
          if (parameter[0] == 'e' && parameter[1] == 0) e = request(newTarget, PSS_EAST_ONLY); else
    ca88:	e7f8      	b.n	ca7c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf1c>
        if (e == CE_NONE) e = limits.validateTarget(&newTarget, true);
    ca8a:	2201      	movs	r2, #1
    ca8c:	4629      	mov	r1, r5
    ca8e:	4856      	ldr	r0, [pc, #344]	; (cbe8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1088>)
    ca90:	f004 f9b6 	bl	10e00 <Limits::validateTarget(Coordinate*, bool)>
        if (e == CE_NONE) {
    ca94:	2800      	cmp	r0, #0
    ca96:	f47f abfd 	bne.w	c294 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x734>
            transform.align.model.altCor = 0.0;
    ca9a:	f204 521c 	addw	r2, r4, #1308	; 0x51c
    ca9e:	2300      	movs	r3, #0
            transform.align.model.azmCor = 0.0;
    caa0:	f504 64a4 	add.w	r4, r4, #1312	; 0x520
          e = request(newTarget, PSS_SAME_ONLY);
    caa4:	a944      	add	r1, sp, #272	; 0x110
            transform.align.model.altCor = 0.0;
    caa6:	6013      	str	r3, [r2, #0]
          e = request(newTarget, PSS_SAME_ONLY);
    caa8:	2201      	movs	r2, #1
            transform.align.model.azmCor = 0.0;
    caaa:	6023      	str	r3, [r4, #0]
          e = request(newTarget, PSS_SAME_ONLY);
    caac:	2306      	movs	r3, #6
    caae:	4668      	mov	r0, sp
    cab0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
    cab4:	2250      	movs	r2, #80	; 0x50
    cab6:	f00b fd09 	bl	184cc <memcpy>
    caba:	4638      	mov	r0, r7
    cabc:	e895 000c 	ldmia.w	r5, {r2, r3}
    cac0:	f000 fdee 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
        if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) reply[0] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    cac4:	f1a0 030f 	sub.w	r3, r0, #15
    cac8:	b2db      	uxtb	r3, r3
    caca:	2b08      	cmp	r3, #8
    cacc:	f67f abe7 	bls.w	c29e <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x73e>
        if (e == CE_NONE) reply[0] = '0';
    cad0:	2800      	cmp	r0, #0
    cad2:	f47f abe8 	bne.w	c2a6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x746>
    cad6:	2330      	movs	r3, #48	; 0x30
    cad8:	f888 3000 	strb.w	r3, [r8]
    cadc:	f7ff bbe3 	b.w	c2a6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x746>
          if (parameter[0] == 'w' && parameter[1] == 0) e = request(newTarget, PSS_WEST_ONLY); else e = CE_CMD_UNKNOWN;
    cae0:	786b      	ldrb	r3, [r5, #1]
    cae2:	2b00      	cmp	r3, #0
    cae4:	f47f adef 	bne.w	c6c6 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb66>
    cae8:	e7a7      	b.n	ca3a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xeda>
          case '6': reply[0] = transform.meridianFlips ? "EWB"[settings.preferredPierSide - 1] : 'E'; reply[1] = 0; break;
    caea:	2345      	movs	r3, #69	; 0x45
    caec:	f7ff bacd 	b.w	c08a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52a>
            case 'A': if (!convert.hmsToDouble(&d, &parameter[3], PM_HIGH)) *commandError = CE_PARAM_FORM; else transform.align.actual[star].h = hrsToRad(d); break;
    caf0:	2305      	movs	r3, #5
    caf2:	9a64      	ldr	r2, [sp, #400]	; 0x190
    caf4:	7013      	strb	r3, [r2, #0]
    caf6:	e4a6      	b.n	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
              settings.usPerStepCurrent = strtod(&parameter[3], &conv_end);
    caf8:	a942      	add	r1, sp, #264	; 0x108
    cafa:	1ce8      	adds	r0, r5, #3
    cafc:	f012 f938 	bl	1ed70 <strtod>
              if (settings.usPerStepCurrent < usPerStepBase/2.0) settings.usPerStepCurrent = usPerStepBase/2.0;
    cb00:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
    cb04:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    cb08:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
              settings.usPerStepCurrent = strtod(&parameter[3], &conv_end);
    cb0c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
              if (settings.usPerStepCurrent < usPerStepBase/2.0) settings.usPerStepCurrent = usPerStepBase/2.0;
    cb10:	ee26 5b05 	vmul.f64	d5, d6, d5
              settings.usPerStepCurrent = strtod(&parameter[3], &conv_end);
    cb14:	ee10 3a10 	vmov	r3, s0
              if (settings.usPerStepCurrent < usPerStepBase/2.0) settings.usPerStepCurrent = usPerStepBase/2.0;
    cb18:	eeb7 4ac0 	vcvt.f64.f32	d4, s0
              settings.usPerStepCurrent = strtod(&parameter[3], &conv_end);
    cb1c:	f8c7 3202 	str.w	r3, [r7, #514]	; 0x202
              if (settings.usPerStepCurrent < usPerStepBase/2.0) settings.usPerStepCurrent = usPerStepBase/2.0;
    cb20:	eeb4 4bc5 	vcmpe.f64	d4, d5
    cb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb28:	d507      	bpl.n	cb3a <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xfda>
    cb2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    cb2e:	ee27 7a87 	vmul.f32	s14, s15, s14
    cb32:	ee17 3a10 	vmov	r3, s14
    cb36:	f8c7 3202 	str.w	r3, [r7, #514]	; 0x202
              if (settings.usPerStepCurrent > usPerStepBase*2.0) settings.usPerStepCurrent = usPerStepBase*2.0;
    cb3a:	f8d7 3202 	ldr.w	r3, [r7, #514]	; 0x202
    cb3e:	ee36 6b06 	vadd.f64	d6, d6, d6
    cb42:	ee07 3a10 	vmov	s14, r3
    cb46:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
    cb4a:	eeb4 5bc6 	vcmpe.f64	d5, d6
    cb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb52:	dd07      	ble.n	cb64 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1004>
    cb54:	ee77 7aa7 	vadd.f32	s15, s15, s15
    cb58:	ee17 3a90 	vmov	r3, s15
    cb5c:	f8c7 3202 	str.w	r3, [r7, #514]	; 0x202
    cb60:	f8d7 3202 	ldr.w	r3, [r7, #514]	; 0x202
              if (settings.usPerStepCurrent < usPerStepLowerLimit()) settings.usPerStepCurrent = usPerStepLowerLimit();
    cb64:	ee08 3a10 	vmov	s16, r3
    cb68:	4638      	mov	r0, r7
    cb6a:	f001 f9ab 	bl	dec4 <Goto::usPerStepLowerLimit()>
    cb6e:	eeb4 8ac0 	vcmpe.f32	s16, s0
    cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb76:	d449      	bmi.n	cc0c <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x10ac>
              nv.updateBytes(NV_MOUNT_GOTO_BASE, &settings, sizeof(GotoSettings));
    cb78:	2306      	movs	r3, #6
    cb7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
    cb7e:	21bf      	movs	r1, #191	; 0xbf
    cb80:	481a      	ldr	r0, [pc, #104]	; (cbec <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x108c>)
    cb82:	f7f8 fa73 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
              updateAccelerationRates();
    cb86:	4638      	mov	r0, r7
  return true;
    cb88:	2601      	movs	r6, #1
              updateAccelerationRates();
    cb8a:	f001 f941 	bl	de10 <Goto::updateAccelerationRates()>
    cb8e:	f7ff b83a 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
                case 'W': settings.preferredPierSide = PSS_WEST; break;
    cb92:	2302      	movs	r3, #2
    cb94:	f880 3201 	strb.w	r3, [r0, #513]	; 0x201
    cb98:	f7ff b835 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
                case 'E': settings.preferredPierSide = PSS_EAST; break;
    cb9c:	2301      	movs	r3, #1
    cb9e:	f880 3201 	strb.w	r3, [r0, #513]	; 0x201
    cba2:	f7ff b830 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
    cba6:	bf00      	nop
    cba8:	1a63c1f8 	.word	0x1a63c1f8
    cbac:	404ca5dc 	.word	0x404ca5dc
    cbb0:	a4aeacc4 	.word	0xa4aeacc4
    cbb4:	400e8ec8 	.word	0x400e8ec8
    cbb8:	7331ad79 	.word	0x7331ad79
    cbbc:	41092dc6 	.word	0x41092dc6
    cbc0:	200043d0 	.word	0x200043d0
    cbc4:	2000580c 	.word	0x2000580c
    cbc8:	200064ac 	.word	0x200064ac
    cbcc:	200069d4 	.word	0x200069d4
    cbd0:	200069d0 	.word	0x200069d0
    cbd4:	200069cc 	.word	0x200069cc
    cbd8:	200069c8 	.word	0x200069c8
    cbdc:	200069c4 	.word	0x200069c4
    cbe0:	200069c0 	.word	0x200069c0
    cbe4:	200069dc 	.word	0x200069dc
    cbe8:	20005cf4 	.word	0x20005cf4
    cbec:	20005e50 	.word	0x20005e50
                case '3': settings.usPerStepCurrent = usPerStepBase;     break; // 100%
    cbf0:	ed97 8a79 	vldr	s16, [r7, #484]	; 0x1e4
                case '5': settings.usPerStepCurrent = usPerStepBase*2.0; break; // 50%
    cbf4:	ee18 3a10 	vmov	r3, s16
              if (settings.usPerStepCurrent < usPerStepLowerLimit()) settings.usPerStepCurrent = usPerStepLowerLimit();
    cbf8:	4638      	mov	r0, r7
                case '5': settings.usPerStepCurrent = usPerStepBase*2.0; break; // 50%
    cbfa:	f8c7 3202 	str.w	r3, [r7, #514]	; 0x202
              if (settings.usPerStepCurrent < usPerStepLowerLimit()) settings.usPerStepCurrent = usPerStepLowerLimit();
    cbfe:	f001 f961 	bl	dec4 <Goto::usPerStepLowerLimit()>
    cc02:	eeb4 0ac8 	vcmpe.f32	s0, s16
    cc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc0a:	ddb5      	ble.n	cb78 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1018>
    cc0c:	4638      	mov	r0, r7
    cc0e:	f001 f959 	bl	dec4 <Goto::usPerStepLowerLimit()>
    cc12:	ee10 3a10 	vmov	r3, s0
    cc16:	f8c7 3202 	str.w	r3, [r7, #514]	; 0x202
    cc1a:	e7ad      	b.n	cb78 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1018>
                case 'B': settings.preferredPierSide = PSS_BEST; break;
    cc1c:	2303      	movs	r3, #3
    cc1e:	f880 3201 	strb.w	r3, [r0, #513]	; 0x201
    cc22:	f7fe bff0 	b.w	bc06 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa6>
                case '2': settings.usPerStepCurrent = usPerStepBase/1.5; break; // 150%
    cc26:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    cc2a:	ed97 7a79 	vldr	s14, [r7, #484]	; 0x1e4
    cc2e:	ee87 8a27 	vdiv.f32	s16, s14, s15
    cc32:	e7df      	b.n	cbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1094>
                case '1': settings.usPerStepCurrent = usPerStepBase/2.0; break; // 200%
    cc34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    cc38:	ed97 8a79 	vldr	s16, [r7, #484]	; 0x1e4
    cc3c:	ee28 8a27 	vmul.f32	s16, s16, s15
    cc40:	e7d8      	b.n	cbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1094>
                  if (star >= 1) {
    cc42:	4b59      	ldr	r3, [pc, #356]	; (cda8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1248>)
    cc44:	6819      	ldr	r1, [r3, #0]
    cc46:	2900      	cmp	r1, #0
    cc48:	f77f abfd 	ble.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
                    alignState.lastStar = star;
    cc4c:	b2cb      	uxtb	r3, r1
                    transform.align.createModel(star);
    cc4e:	4857      	ldr	r0, [pc, #348]	; (cdac <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x124c>)
                    alignState.currentStar = star + 1;
    cc50:	1c5a      	adds	r2, r3, #1
                    alignState.lastStar = star;
    cc52:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
                    alignState.currentStar = star + 1;
    cc56:	f887 21e2 	strb.w	r2, [r7, #482]	; 0x1e2
                    transform.align.createModel(star);
    cc5a:	f7fc ff19 	bl	9a90 <GeoAlign::createModel(int)>
    cc5e:	f7ff bbf2 	b.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
                  star = 0;
    cc62:	4a51      	ldr	r2, [pc, #324]	; (cda8 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1248>)
                  alignReset();
    cc64:	4638      	mov	r0, r7
                  star = 0;
    cc66:	6013      	str	r3, [r2, #0]
                  alignReset();
    cc68:	f000 fc0e 	bl	d488 <Goto::alignReset()>
    cc6c:	f7ff bbeb 	b.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
          if (e >= CE_SLEW_ERR_BELOW_HORIZON && e <= CE_SLEW_ERR_UNSPECIFIED) reply[0] = (char)(e - CE_SLEW_ERR_BELOW_HORIZON) + '1';
    cc70:	f100 0322 	add.w	r3, r0, #34	; 0x22
    cc74:	b2db      	uxtb	r3, r3
    cc76:	f7ff b987 	b.w	bf88 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x428>
                  transform.align.modelIsReady = true;
    cc7a:	4b4c      	ldr	r3, [pc, #304]	; (cdac <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x124c>)
    cc7c:	2201      	movs	r2, #1
    cc7e:	701a      	strb	r2, [r3, #0]
    cc80:	f7ff bbe1 	b.w	c446 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8e6>
                case '5': settings.usPerStepCurrent = usPerStepBase*2.0; break; // 50%
    cc84:	ed97 8a79 	vldr	s16, [r7, #484]	; 0x1e4
    cc88:	ee38 8a08 	vadd.f32	s16, s16, s16
    cc8c:	e7b2      	b.n	cbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1094>
                case '4': settings.usPerStepCurrent = usPerStepBase*1.5; break; // 75%
    cc8e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    cc92:	ed97 8a79 	vldr	s16, [r7, #484]	; 0x1e4
    cc96:	ee28 8a27 	vmul.f32	s16, s16, s15
    cc9a:	e7ab      	b.n	cbf4 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1094>
                  temp.h = transform.align.actual[star].h;
    cc9c:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
    cca0:	4620      	mov	r0, r4
                  temp.d = transform.align.actual[star].d;
    cca2:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
    cca6:	a942      	add	r1, sp, #264	; 0x108
                  temp.h = transform.align.actual[star].h;
    cca8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
                  temp.d = transform.align.actual[star].d;
    ccac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
                  temp.h = transform.align.actual[star].h;
    ccb0:	ed8d 6b44 	vstr	d6, [sp, #272]	; 0x110
                  temp.d = transform.align.actual[star].d;
    ccb4:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
    ccb8:	f7fe fb36 	bl	b328 <Transform::equToHor(Coordinate*)>
    ccbc:	4620      	mov	r0, r4
    ccbe:	a942      	add	r1, sp, #264	; 0x108
    ccc0:	f7fe fcbe 	bl	b640 <Transform::horToAa(Coordinate*)>
                  transform.align.actual[star].ax1 = temp.aa1;
    ccc4:	6833      	ldr	r3, [r6, #0]
    ccc6:	4620      	mov	r0, r4
    ccc8:	a942      	add	r1, sp, #264	; 0x108
    ccca:	fb05 4303 	mla	r3, r5, r3, r4
                  transform.align.actual[star].ax2 = temp.aa2;
    ccce:	ed9d 7b4e 	vldr	d7, [sp, #312]	; 0x138
                  transform.align.actual[star].ax1 = temp.aa1;
    ccd2:	ed9d 5b4c 	vldr	d5, [sp, #304]	; 0x130
                  temp.h = transform.align.mount[star].h;
    ccd6:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
                  transform.align.actual[star].ax1 = temp.aa1;
    ccda:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
                  transform.align.actual[star].ax2 = temp.aa2;
    ccde:	eef7 5bc7 	vcvt.f32.f64	s11, d7
                  temp.d = transform.align.mount[star].d;
    cce2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
                  temp.h = transform.align.mount[star].h;
    cce6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
                  temp.d = transform.align.mount[star].d;
    ccea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
                  transform.align.actual[star].ax1 = temp.aa1;
    ccee:	ed83 5a6d 	vstr	s10, [r3, #436]	; 0x1b4
                  transform.align.actual[star].ax2 = temp.aa2;
    ccf2:	edc3 5a6f 	vstr	s11, [r3, #444]	; 0x1bc
                  temp.h = transform.align.mount[star].h;
    ccf6:	ed8d 6b44 	vstr	d6, [sp, #272]	; 0x110
                  temp.d = transform.align.mount[star].d;
    ccfa:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
    ccfe:	f7fe fb13 	bl	b328 <Transform::equToHor(Coordinate*)>
    cd02:	4620      	mov	r0, r4
    cd04:	a942      	add	r1, sp, #264	; 0x108
    cd06:	f7fe fc9b 	bl	b640 <Transform::horToAa(Coordinate*)>
                  transform.align.mount[star].ax1 = temp.aa1;
    cd0a:	6833      	ldr	r3, [r6, #0]
    cd0c:	ed9d 6b4c 	vldr	d6, [sp, #304]	; 0x130
                  transform.align.mount[star].ax2 = temp.aa2;
    cd10:	ed9d 7b4e 	vldr	d7, [sp, #312]	; 0x138
                  transform.align.mount[star].ax1 = temp.aa1;
    cd14:	fb05 4403 	mla	r4, r5, r3, r4
    cd18:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
                  transform.align.mount[star].ax2 = temp.aa2;
    cd1c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
                  transform.align.mount[star].ax1 = temp.aa1;
    cd20:	ed84 6a01 	vstr	s12, [r4, #4]
                  transform.align.mount[star].ax2 = temp.aa2;
    cd24:	ed84 7a03 	vstr	s14, [r4, #12]
    cd28:	e585      	b.n	c836 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcd6>
                  temp.h = transform.align.actual[star].h;
    cd2a:	ed93 6a76 	vldr	s12, [r3, #472]	; 0x1d8
                  transform.equToHor(&temp);
    cd2e:	a942      	add	r1, sp, #264	; 0x108
                  temp.d = transform.align.actual[star].d;
    cd30:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
                  transform.equToHor(&temp);
    cd34:	4620      	mov	r0, r4
                  temp.h = transform.align.actual[star].h;
    cd36:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
                  temp.d = transform.align.actual[star].d;
    cd3a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
                  temp.h = transform.align.actual[star].h;
    cd3e:	ed8d 6b44 	vstr	d6, [sp, #272]	; 0x110
                  temp.d = transform.align.actual[star].d;
    cd42:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
                  transform.equToHor(&temp);
    cd46:	f7fe faef 	bl	b328 <Transform::equToHor(Coordinate*)>
                  transform.align.actual[star].ax1 = temp.z;
    cd4a:	6833      	ldr	r3, [r6, #0]
                  transform.equToHor(&temp);
    cd4c:	a942      	add	r1, sp, #264	; 0x108
    cd4e:	4620      	mov	r0, r4
                  transform.align.actual[star].ax1 = temp.z;
    cd50:	fb05 4303 	mla	r3, r5, r3, r4
                  transform.align.actual[star].ax2 = temp.a;
    cd54:	ed9d 7b48 	vldr	d7, [sp, #288]	; 0x120
                  transform.align.actual[star].ax1 = temp.z;
    cd58:	ed9d 5b4a 	vldr	d5, [sp, #296]	; 0x128
                  temp.h = transform.align.mount[star].h;
    cd5c:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
                  transform.align.actual[star].ax1 = temp.z;
    cd60:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
                  transform.align.actual[star].ax2 = temp.a;
    cd64:	eef7 5bc7 	vcvt.f32.f64	s11, d7
                  temp.d = transform.align.mount[star].d;
    cd68:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
                  temp.h = transform.align.mount[star].h;
    cd6c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
                  temp.d = transform.align.mount[star].d;
    cd70:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
                  transform.align.actual[star].ax1 = temp.z;
    cd74:	ed83 5a6d 	vstr	s10, [r3, #436]	; 0x1b4
                  transform.align.actual[star].ax2 = temp.a;
    cd78:	edc3 5a6f 	vstr	s11, [r3, #444]	; 0x1bc
                  temp.h = transform.align.mount[star].h;
    cd7c:	ed8d 6b44 	vstr	d6, [sp, #272]	; 0x110
                  temp.d = transform.align.mount[star].d;
    cd80:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
                  transform.equToHor(&temp);
    cd84:	f7fe fad0 	bl	b328 <Transform::equToHor(Coordinate*)>
                  transform.align.mount[star].ax1 = temp.z;
    cd88:	6833      	ldr	r3, [r6, #0]
    cd8a:	ed9d 6b4a 	vldr	d6, [sp, #296]	; 0x128
                  transform.align.mount[star].ax2 = temp.a;
    cd8e:	ed9d 7b48 	vldr	d7, [sp, #288]	; 0x120
                  transform.align.mount[star].ax1 = temp.z;
    cd92:	fb05 4303 	mla	r3, r5, r3, r4
    cd96:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
                  transform.align.mount[star].ax2 = temp.a;
    cd9a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
                  transform.align.mount[star].ax1 = temp.z;
    cd9e:	ed83 6a01 	vstr	s12, [r3, #4]
                  transform.align.mount[star].ax2 = temp.a;
    cda2:	ed83 7a03 	vstr	s14, [r3, #12]
    cda6:	e546      	b.n	c836 <Goto::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcd6>
    cda8:	2000580c 	.word	0x2000580c
    cdac:	200064ac 	.word	0x200064ac

0000cdb0 <Goto::abort()>:
  return CE_NONE;
}

// stop any presently active goto
void Goto::abort() {
  if (state == GS_GOTO && stage > GG_READY_ABORT) stage = GG_READY_ABORT;
    cdb0:	7803      	ldrb	r3, [r0, #0]
    cdb2:	2b01      	cmp	r3, #1
    cdb4:	d000      	beq.n	cdb8 <Goto::abort()+0x8>
}
    cdb6:	4770      	bx	lr
  if (state == GS_GOTO && stage > GG_READY_ABORT) stage = GG_READY_ABORT;
    cdb8:	7843      	ldrb	r3, [r0, #1]
    cdba:	2b02      	cmp	r3, #2
    cdbc:	d9fb      	bls.n	cdb6 <Goto::abort()+0x6>
    cdbe:	2302      	movs	r3, #2
    cdc0:	7043      	strb	r3, [r0, #1]
}
    cdc2:	4770      	bx	lr

0000cdc4 <Goto::validate()>:

// general status checks ahead of sync or goto
CommandError Goto::validate() {
    cdc4:	b570      	push	{r4, r5, r6, lr}
    inline bool isEnabled() { return enabled && !motor->calibrating; }
    cdc6:	4c24      	ldr	r4, [pc, #144]	; (ce58 <Goto::validate()+0x94>)
    cdc8:	b084      	sub	sp, #16
    cdca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    cdce:	b113      	cbz	r3, cdd6 <Goto::validate()+0x12>
    cdd0:	6823      	ldr	r3, [r4, #0]
    cdd2:	7adb      	ldrb	r3, [r3, #11]
    cdd4:	b11b      	cbz	r3, cdde <Goto::validate()+0x1a>
  if (!axis1.isEnabled())      return CE_SLEW_ERR_IN_STANDBY;
    cdd6:	2511      	movs	r5, #17
  if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
  if (mount.isSlewing())       return CE_SLEW_IN_MOTION;
  if (limits.isGotoError())    return CE_SLEW_ERR_OUTSIDE_LIMITS;
  if (mount.motorFault())      return CE_SLEW_ERR_HARDWARE_FAULT;
  return CE_NONE;
}
    cdd8:	4628      	mov	r0, r5
    cdda:	b004      	add	sp, #16
    cddc:	bd70      	pop	{r4, r5, r6, pc}
    cdde:	4e1f      	ldr	r6, [pc, #124]	; (ce5c <Goto::validate()+0x98>)
    cde0:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    cde4:	2b00      	cmp	r3, #0
    cde6:	d0f6      	beq.n	cdd6 <Goto::validate()+0x12>
    cde8:	6833      	ldr	r3, [r6, #0]
    cdea:	7adb      	ldrb	r3, [r3, #11]
    cdec:	2b00      	cmp	r3, #0
    cdee:	d1f2      	bne.n	cdd6 <Goto::validate()+0x12>
  if (park.state == PS_PARKED) return CE_SLEW_ERR_IN_PARK;
    cdf0:	4b1b      	ldr	r3, [pc, #108]	; (ce60 <Goto::validate()+0x9c>)
    cdf2:	781b      	ldrb	r3, [r3, #0]
    cdf4:	2b02      	cmp	r3, #2
    cdf6:	d01f      	beq.n	ce38 <Goto::validate()+0x74>
  if (state != GS_NONE)        return CE_SLEW_IN_SLEW;
    cdf8:	7803      	ldrb	r3, [r0, #0]
    cdfa:	b943      	cbnz	r3, ce0e <Goto::validate()+0x4a>
  if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
    cdfc:	4b19      	ldr	r3, [pc, #100]	; (ce64 <Goto::validate()+0xa0>)
    cdfe:	781d      	ldrb	r5, [r3, #0]
    ce00:	b91d      	cbnz	r5, ce0a <Goto::validate()+0x46>
    }

    // returns true if the mount is slewing (doing a goto or guide > 2X)
    inline bool isSlewing() { return axis1.isSlewing() || axis2.isSlewing(); }
    ce02:	4620      	mov	r0, r4
    ce04:	f7f4 fa92 	bl	132c <Axis::isSlewing()>
    ce08:	b118      	cbz	r0, ce12 <Goto::validate()+0x4e>
    ce0a:	2516      	movs	r5, #22
    ce0c:	e7e4      	b.n	cdd8 <Goto::validate()+0x14>
  if (state != GS_NONE)        return CE_SLEW_IN_SLEW;
    ce0e:	2513      	movs	r5, #19
    ce10:	e7e2      	b.n	cdd8 <Goto::validate()+0x14>
    ce12:	4630      	mov	r0, r6
    ce14:	f7f4 fa8a 	bl	132c <Axis::isSlewing()>
    ce18:	2800      	cmp	r0, #0
    ce1a:	d1f6      	bne.n	ce0a <Goto::validate()+0x46>
  if (limits.isGotoError())    return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ce1c:	4812      	ldr	r0, [pc, #72]	; (ce68 <Goto::validate()+0xa4>)
    ce1e:	f004 f885 	bl	10f2c <Limits::isGotoError()>
    ce22:	b958      	cbnz	r0, ce3c <Goto::validate()+0x78>
    inline bool motorFault() { return motor->getDriverStatus().fault; };
    ce24:	6821      	ldr	r1, [r4, #0]
    ce26:	a801      	add	r0, sp, #4
    ce28:	680b      	ldr	r3, [r1, #0]
    ce2a:	699b      	ldr	r3, [r3, #24]
    ce2c:	4798      	blx	r3
    ce2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
    ce32:	b12b      	cbz	r3, ce40 <Goto::validate()+0x7c>
  if (mount.motorFault())      return CE_SLEW_ERR_HARDWARE_FAULT;
    ce34:	2515      	movs	r5, #21
    ce36:	e7cf      	b.n	cdd8 <Goto::validate()+0x14>
  if (park.state == PS_PARKED) return CE_SLEW_ERR_IN_PARK;
    ce38:	2512      	movs	r5, #18
    ce3a:	e7cd      	b.n	cdd8 <Goto::validate()+0x14>
  if (limits.isGotoError())    return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ce3c:	2514      	movs	r5, #20
    ce3e:	e7cb      	b.n	cdd8 <Goto::validate()+0x14>
    ce40:	6831      	ldr	r1, [r6, #0]
    ce42:	a801      	add	r0, sp, #4
    ce44:	680b      	ldr	r3, [r1, #0]
    ce46:	699b      	ldr	r3, [r3, #24]
    ce48:	4798      	blx	r3
    ce4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
  if (mount.motorFault())      return CE_SLEW_ERR_HARDWARE_FAULT;
    ce4e:	2b00      	cmp	r3, #0
    ce50:	bf18      	it	ne
    ce52:	2515      	movne	r5, #21
    ce54:	e7c0      	b.n	cdd8 <Goto::validate()+0x14>
    ce56:	bf00      	nop
    ce58:	200050e8 	.word	0x200050e8
    ce5c:	200051a8 	.word	0x200051a8
    ce60:	20005ea8 	.word	0x20005ea8
    ce64:	200043e8 	.word	0x200043e8
    ce68:	20005cf4 	.word	0x20005cf4
    ce6c:	00000000 	.word	0x00000000

0000ce70 <Goto::setTarget(Coordinate*, PierSideSelect, bool)>:
CommandError Goto::setTarget(Coordinate *coords, PierSideSelect pierSideSelect, bool isGoto) {
    ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce74:	ed2d 8b08 	vpush	{d8-d11}
    ce78:	b0d7      	sub	sp, #348	; 0x15c
    ce7a:	4605      	mov	r5, r0
    ce7c:	4689      	mov	r9, r1
    ce7e:	4616      	mov	r6, r2
    ce80:	461f      	mov	r7, r3
  CommandError e = validate();
    ce82:	f7ff ff9f 	bl	cdc4 <Goto::validate()>
  if (e == CE_SLEW_ERR_IN_STANDBY && (encodersPresent || mount.isHome())) {
    ce86:	2811      	cmp	r0, #17
  CommandError e = validate();
    ce88:	4604      	mov	r4, r0
  if (e == CE_SLEW_ERR_IN_STANDBY && (encodersPresent || mount.isHome())) {
    ce8a:	f000 80e9 	beq.w	d060 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1f0>
  if (e == CE_NONE && isGoto && limits.isAboveOverhead()) e = CE_SLEW_ERR_OUTSIDE_LIMITS;
    ce8e:	2c00      	cmp	r4, #0
    ce90:	f040 80e0 	bne.w	d054 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e4>
    ce94:	2f00      	cmp	r7, #0
    ce96:	f000 8184 	beq.w	d1a2 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x332>

    // true if an error exists that impacts goto safety
    bool isGotoError();

    // true if an above overhead limit
    bool isAboveOverhead() { return error.altitude.max; }
    ce9a:	4bc9      	ldr	r3, [pc, #804]	; (d1c0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x350>)
    ce9c:	7c9b      	ldrb	r3, [r3, #18]
    ce9e:	2b00      	cmp	r3, #0
    cea0:	f040 80d7 	bne.w	d052 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e2>
  target = *coords;
    cea4:	f505 788c 	add.w	r8, r5, #280	; 0x118
  if (transform.mountType == ALTAZM) transform.horToEqu(&target); else
    cea8:	f8df a324 	ldr.w	sl, [pc, #804]	; d1d0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x360>
  target = *coords;
    ceac:	4649      	mov	r1, r9
    ceae:	2258      	movs	r2, #88	; 0x58
    ceb0:	4640      	mov	r0, r8
    ceb2:	f00b fb0b 	bl	184cc <memcpy>
  if (transform.mountType == ALTAZM) transform.horToEqu(&target); else
    ceb6:	f99a 35c4 	ldrsb.w	r3, [sl, #1476]	; 0x5c4
    ceba:	2b03      	cmp	r3, #3
    cebc:	f000 810c 	beq.w	d0d8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x268>
  if (transform.mountType == ALTALT) transform.aaToEqu(&target); else transform.equToHor(&target);
    cec0:	2b04      	cmp	r3, #4
    void aaToEqu(Coordinate *coord) { aaToHor(coord); horToEqu(coord); };
    cec2:	4641      	mov	r1, r8
    cec4:	4650      	mov	r0, sl
    cec6:	f000 8105 	beq.w	d0d4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x264>
    ceca:	f7fe fa2d 	bl	b328 <Transform::equToHor(Coordinate*)>
  Coordinate current = mount.getMountPosition(CR_MOUNT);
    cece:	2200      	movs	r2, #0
    ced0:	49bc      	ldr	r1, [pc, #752]	; (d1c4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x354>)
    ced2:	a814      	add	r0, sp, #80	; 0x50
    ced4:	f7fc f80a 	bl	8eec <Mount::getMountPosition(CoordReturn)>
  if (!transform.meridianFlips) pierSideSelect = PSS_EAST_ONLY;
    ced8:	f89a 35c5 	ldrb.w	r3, [sl, #1477]	; 0x5c5
  Coordinate current = mount.getMountPosition(CR_MOUNT);
    cedc:	f89d b0a0 	ldrb.w	fp, [sp, #160]	; 0xa0
  if (!transform.meridianFlips) pierSideSelect = PSS_EAST_ONLY;
    cee0:	9305      	str	r3, [sp, #20]
    cee2:	b173      	cbz	r3, cf02 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x92>
  if (pierSideSelect == PSS_BEST) {
    cee4:	2e03      	cmp	r6, #3
    cee6:	f000 80fc 	beq.w	d0e2 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x272>
  if (pierSideSelect == PSS_SAME_ONLY) {
    ceea:	2e06      	cmp	r6, #6
    ceec:	f040 8188 	bne.w	d200 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x390>
    if (current.pierSide == PIER_SIDE_WEST) pierSideSelect = PSS_WEST_ONLY; else pierSideSelect = PSS_EAST_ONLY;
    cef0:	f1bb 0f02 	cmp.w	fp, #2
    cef4:	f04f 0300 	mov.w	r3, #0
    cef8:	bf0c      	ite	eq
    cefa:	2605      	moveq	r6, #5
    cefc:	2604      	movne	r6, #4
    cefe:	9305      	str	r3, [sp, #20]
    cf00:	e000      	b.n	cf04 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x94>
    cf02:	2604      	movs	r6, #4
  double axis1TargetCorrectionE = 0.0;
    cf04:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  e = limits.validateTarget(&target, &eastReachable, &westReachable, &axis1TargetCorrectionE, &axis1TargetCorrectionW, isGoto);
    cf08:	ab08      	add	r3, sp, #32
  target.pierSide = current.pierSide;
    cf0a:	f885 b168 	strb.w	fp, [r5, #360]	; 0x168
  e = limits.validateTarget(&target, &eastReachable, &westReachable, &axis1TargetCorrectionE, &axis1TargetCorrectionW, isGoto);
    cf0e:	f10d 021e 	add.w	r2, sp, #30
    cf12:	9300      	str	r3, [sp, #0]
    cf14:	4641      	mov	r1, r8
    cf16:	9702      	str	r7, [sp, #8]
    cf18:	f10d 031f 	add.w	r3, sp, #31
    cf1c:	f8cd 9004 	str.w	r9, [sp, #4]
    cf20:	48a7      	ldr	r0, [pc, #668]	; (d1c0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x350>)
  target.a1Correction = 0.0;
    cf22:	ed9f 7ba3 	vldr	d7, [pc, #652]	; d1b0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x340>
    cf26:	ed85 7b56 	vstr	d7, [r5, #344]	; 0x158
  double axis1TargetCorrectionE = 0.0;
    cf2a:	ed09 7b02 	vstr	d7, [r9, #-8]
  double axis1TargetCorrectionW = 0.0;
    cf2e:	ed89 7b00 	vstr	d7, [r9]
  e = limits.validateTarget(&target, &eastReachable, &westReachable, &axis1TargetCorrectionE, &axis1TargetCorrectionW, isGoto);
    cf32:	f003 ff99 	bl	10e68 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool)>
  if (e != CE_NONE) return e;
    cf36:	4604      	mov	r4, r0
    cf38:	2800      	cmp	r0, #0
    cf3a:	f040 808b 	bne.w	d054 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e4>
  a1 = axis1.getInstrumentCoordinate();
    cf3e:	48a2      	ldr	r0, [pc, #648]	; (d1c8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x358>)
    cf40:	f7f4 f8f4 	bl	112c <Axis::getInstrumentCoordinate()>
  a2 = axis2.getInstrumentCoordinate();
    cf44:	48a1      	ldr	r0, [pc, #644]	; (d1cc <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x35c>)
  a1 = axis1.getInstrumentCoordinate();
    cf46:	eeb0 9b40 	vmov.f64	d9, d0
  a2 = axis2.getInstrumentCoordinate();
    cf4a:	f7f4 f8ef 	bl	112c <Axis::getInstrumentCoordinate()>
  target.pierSide = PIER_SIDE_EAST;
    cf4e:	2301      	movs	r3, #1
  transform.mountToInstrument(&target, &a1e, &a2e);
    cf50:	aa0c      	add	r2, sp, #48	; 0x30
    cf52:	4641      	mov	r1, r8
    cf54:	489e      	ldr	r0, [pc, #632]	; (d1d0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x360>)
  target.pierSide = PIER_SIDE_EAST;
    cf56:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
  transform.mountToInstrument(&target, &a1e, &a2e);
    cf5a:	ab10      	add	r3, sp, #64	; 0x40
  a2 = axis2.getInstrumentCoordinate();
    cf5c:	eeb0 ab40 	vmov.f64	d10, d0
  transform.mountToInstrument(&target, &a1e, &a2e);
    cf60:	f7fe f8f2 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
  target.pierSide = PIER_SIDE_WEST;
    cf64:	2302      	movs	r3, #2
  transform.mountToInstrument(&target, &a1w, &a2w);
    cf66:	aa0e      	add	r2, sp, #56	; 0x38
    cf68:	4641      	mov	r1, r8
    cf6a:	4899      	ldr	r0, [pc, #612]	; (d1d0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x360>)
  target.pierSide = PIER_SIDE_WEST;
    cf6c:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
  transform.mountToInstrument(&target, &a1w, &a2w);
    cf70:	ab12      	add	r3, sp, #72	; 0x48
  a1e += axis1TargetCorrectionE;
    cf72:	ed19 6b02 	vldr	d6, [r9, #-8]
    cf76:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
    cf7a:	ee37 7b06 	vadd.f64	d7, d7, d6
    cf7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  transform.mountToInstrument(&target, &a1w, &a2w);
    cf82:	f7fe f8e1 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    cf86:	4890      	ldr	r0, [pc, #576]	; (d1c8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x358>)
  target.pierSide = current.pierSide;
    cf88:	f885 b168 	strb.w	fp, [r5, #360]	; 0x168
  if (dist(a1, a1e) > dist(a2, a2e)) eastDistance = dist(a1, a1e); else eastDistance = dist(a2, a2e);
    cf8c:	ed9d bb0c 	vldr	d11, [sp, #48]	; 0x30
  a1w += axis1TargetCorrectionW;
    cf90:	ed9d 8b0e 	vldr	d8, [sp, #56]	; 0x38
    cf94:	ed99 7b00 	vldr	d7, [r9]

    // estimate average microseconds per step lower limit
    float usPerStepLowerLimit();

    // get least distance between coordinates
    inline double dist(double a, double b) { if (a > b) return a - b; else return b - a; }
    cf98:	eeb4 bbc9 	vcmpe.f64	d11, d9
    cf9c:	ee38 8b07 	vadd.f64	d8, d8, d7
    cfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (dist(a1, a1e) > dist(a2, a2e)) eastDistance = dist(a1, a1e); else eastDistance = dist(a2, a2e);
    cfa4:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
    cfa8:	bf4c      	ite	mi
    cfaa:	ee39 bb4b 	vsubmi.f64	d11, d9, d11
    cfae:	ee3b bb49 	vsubpl.f64	d11, d11, d9
    cfb2:	eeb4 7bca 	vcmpe.f64	d7, d10
  a1w += axis1TargetCorrectionW;
    cfb6:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
    cfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cfbe:	bf4c      	ite	mi
    cfc0:	ee3a 7b47 	vsubmi.f64	d7, d10, d7
    cfc4:	ee37 7b4a 	vsubpl.f64	d7, d7, d10
  if (dist(a1, a1e) > dist(a2, a2e)) eastDistance = dist(a1, a1e); else eastDistance = dist(a2, a2e);
    cfc8:	eeb4 bbc7 	vcmpe.f64	d11, d7
    cfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cfd0:	eeb4 8bc9 	vcmpe.f64	d8, d9
    cfd4:	fe3b bb07 	vselgt.f64	d11, d11, d7
  if (dist(a1, a1w) > dist(a2, a2w)) westDistance = dist(a1, a1w); else westDistance = dist(a2, a2w);
    cfd8:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
    cfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cfe0:	eeb4 7bca 	vcmpe.f64	d7, d10
    cfe4:	bf4c      	ite	mi
    cfe6:	ee39 8b48 	vsubmi.f64	d8, d9, d8
    cfea:	ee38 8b49 	vsubpl.f64	d8, d8, d9
    cfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cff2:	bf4c      	ite	mi
    cff4:	ee3a 7b47 	vsubmi.f64	d7, d10, d7
    cff8:	ee37 7b4a 	vsubpl.f64	d7, d7, d10
    cffc:	ed9f ab6e 	vldr	d10, [pc, #440]	; d1b8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x348>
    d000:	eeb4 7bc8 	vcmpe.f64	d7, d8
    d004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d008:	bf58      	it	pl
    d00a:	eeb0 8b47 	vmovpl.f64	d8, d7
    d00e:	f7f4 f88d 	bl	112c <Axis::getInstrumentCoordinate()>
    d012:	2200      	movs	r2, #0
    d014:	496f      	ldr	r1, [pc, #444]	; (d1d4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x364>)
    d016:	a82a      	add	r0, sp, #168	; 0xa8
    d018:	eeb0 9b40 	vmov.f64	d9, d0
    d01c:	f002 f9c4 	bl	f3a8 <Home::getPosition(CoordReturn)>
    d020:	ed9d 7b38 	vldr	d7, [sp, #224]	; 0xe0
    d024:	ee39 9b47 	vsub.f64	d9, d9, d7
    d028:	eeb0 9bc9 	vabs.f64	d9, d9
    d02c:	eeb4 9bca 	vcmpe.f64	d9, d10
    d030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d034:	d95b      	bls.n	d0ee <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x27e>
  target.pierSide = PIER_SIDE_NONE;
    d036:	2300      	movs	r3, #0
  if (pierSideSelect == PSS_EAST_ONLY) {
    d038:	2e04      	cmp	r6, #4
  target.pierSide = PIER_SIDE_NONE;
    d03a:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
  if (pierSideSelect == PSS_EAST_ONLY) {
    d03e:	f000 80aa 	beq.w	d196 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x326>
  if (pierSideSelect == PSS_WEST_ONLY) {
    d042:	2e05      	cmp	r6, #5
    d044:	f000 80cf 	beq.w	d1e6 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x376>
  if (pierSideSelect == PSS_EAST) {
    d048:	2e01      	cmp	r6, #1
    d04a:	d074      	beq.n	d136 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2c6>
  if (pierSideSelect == PSS_WEST) {
    d04c:	2e02      	cmp	r6, #2
    d04e:	f000 80da 	beq.w	d206 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x396>
  if (e == CE_NONE && isGoto && limits.isAboveOverhead()) e = CE_SLEW_ERR_OUTSIDE_LIMITS;
    d052:	2414      	movs	r4, #20
}
    d054:	4620      	mov	r0, r4
    d056:	b057      	add	sp, #348	; 0x15c
    d058:	ecbd 8b08 	vpop	{d8-d11}
    d05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (e == CE_SLEW_ERR_IN_STANDBY && (encodersPresent || mount.isHome())) {
    d060:	f895 800a 	ldrb.w	r8, [r5, #10]
    d064:	f1b8 0f00 	cmp.w	r8, #0
    d068:	d12b      	bne.n	d0c2 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x252>
    d06a:	4857      	ldr	r0, [pc, #348]	; (d1c8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x358>)
    d06c:	f7f4 f85e 	bl	112c <Axis::getInstrumentCoordinate()>
    d070:	4642      	mov	r2, r8
    d072:	4958      	ldr	r1, [pc, #352]	; (d1d4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x364>)
    d074:	a82a      	add	r0, sp, #168	; 0xa8
    d076:	eeb0 8b40 	vmov.f64	d8, d0
    d07a:	f002 f995 	bl	f3a8 <Home::getPosition(CoordReturn)>
    d07e:	ed9d 7b38 	vldr	d7, [sp, #224]	; 0xe0
    d082:	ed9f 9b4d 	vldr	d9, [pc, #308]	; d1b8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x348>
    d086:	ee38 8b47 	vsub.f64	d8, d8, d7
    d08a:	eeb0 8bc8 	vabs.f64	d8, d8
    d08e:	eeb4 8bc9 	vcmpe.f64	d8, d9
    d092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d096:	d8dd      	bhi.n	d054 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e4>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    d098:	484c      	ldr	r0, [pc, #304]	; (d1cc <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x35c>)
    d09a:	f7f4 f847 	bl	112c <Axis::getInstrumentCoordinate()>
    d09e:	4642      	mov	r2, r8
    d0a0:	494c      	ldr	r1, [pc, #304]	; (d1d4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x364>)
    d0a2:	a840      	add	r0, sp, #256	; 0x100
    d0a4:	eeb0 8b40 	vmov.f64	d8, d0
    d0a8:	f002 f97e 	bl	f3a8 <Home::getPosition(CoordReturn)>
    d0ac:	ed9d 7b52 	vldr	d7, [sp, #328]	; 0x148
    d0b0:	ee38 8b47 	vsub.f64	d8, d8, d7
    d0b4:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    d0b8:	eeb4 8bc9 	vcmpe.f64	d8, d9
    d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0c0:	d8c8      	bhi.n	d054 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e4>
    mount.enable(true);
    d0c2:	2101      	movs	r1, #1
    d0c4:	483f      	ldr	r0, [pc, #252]	; (d1c4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x354>)
    d0c6:	f7fb fcdb 	bl	8a80 <Mount::enable(bool)>
    e = validate();
    d0ca:	4628      	mov	r0, r5
    d0cc:	f7ff fe7a 	bl	cdc4 <Goto::validate()>
    d0d0:	4604      	mov	r4, r0
    d0d2:	e6dc      	b.n	ce8e <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e>
    d0d4:	f7fe fa44 	bl	b560 <Transform::aaToHor(Coordinate*)>
    d0d8:	4641      	mov	r1, r8
    d0da:	4650      	mov	r0, sl
    d0dc:	f7fe f9e0 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    d0e0:	e6f5      	b.n	cece <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x5e>
    if (current.pierSide == PIER_SIDE_WEST) pierSideSelect = PSS_WEST; else pierSideSelect = PSS_EAST;
    d0e2:	f1bb 0f02 	cmp.w	fp, #2
    d0e6:	bf14      	ite	ne
    d0e8:	2601      	movne	r6, #1
    d0ea:	2602      	moveq	r6, #2
    d0ec:	e70a      	b.n	cf04 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x94>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    d0ee:	4837      	ldr	r0, [pc, #220]	; (d1cc <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x35c>)
    d0f0:	f7f4 f81c 	bl	112c <Axis::getInstrumentCoordinate()>
    d0f4:	2200      	movs	r2, #0
    d0f6:	4937      	ldr	r1, [pc, #220]	; (d1d4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x364>)
    d0f8:	a840      	add	r0, sp, #256	; 0x100
    d0fa:	eeb0 9b40 	vmov.f64	d9, d0
    d0fe:	f002 f953 	bl	f3a8 <Home::getPosition(CoordReturn)>
    d102:	ed9d 7b52 	vldr	d7, [sp, #328]	; 0x148
    d106:	ee39 9b47 	vsub.f64	d9, d9, d7
    d10a:	eeb0 9bc9 	vabs.f64	d9, d9
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    d10e:	eeb4 9bca 	vcmpe.f64	d9, d10
    d112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d116:	d88e      	bhi.n	d036 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1c6>
  if (mount.isHome() && transform.mountType == GEM) {
    d118:	f99a 35c4 	ldrsb.w	r3, [sl, #1476]	; 0x5c4
    d11c:	2b01      	cmp	r3, #1
    d11e:	d18a      	bne.n	d036 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1c6>
    pierSideBest = true;
    d120:	9305      	str	r3, [sp, #20]
  target.pierSide = PIER_SIDE_NONE;
    d122:	2300      	movs	r3, #0
    if (target.h < 0) pierSideSelect = PSS_WEST; else pierSideSelect = PSS_EAST;
    d124:	ed95 7b48 	vldr	d7, [r5, #288]	; 0x120
  target.pierSide = PIER_SIDE_NONE;
    d128:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
    if (target.h < 0) pierSideSelect = PSS_WEST; else pierSideSelect = PSS_EAST;
    d12c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d134:	d467      	bmi.n	d206 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x396>
    if (westReachable && !eastReachable) target.pierSide = PIER_SIDE_WEST; else
    d136:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d075      	beq.n	d22a <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x3ba>
    d13e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    d142:	2b00      	cmp	r3, #0
    d144:	d054      	beq.n	d1f0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x380>
    if (isGoto && westReachable && pierSideBest && westDistance < eastDistance) {
    d146:	b137      	cbz	r7, d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
    d148:	9b05      	ldr	r3, [sp, #20]
    d14a:	b123      	cbz	r3, d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
    d14c:	eeb4 bbc8 	vcmpe.f64	d11, d8
    d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d154:	dc4c      	bgt.n	d1f0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x380>
    target.pierSide = PIER_SIDE_EAST;
    d156:	2301      	movs	r3, #1
    d158:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
  if (target.pierSide == PIER_SIDE_EAST) target.a1Correction = axis1TargetCorrectionE;
    d15c:	e959 2302 	ldrd	r2, r3, [r9, #-8]
    d160:	e9c5 2356 	strd	r2, r3, [r5, #344]	; 0x158
  transform.observedPlaceToMount(&target);
    d164:	4641      	mov	r1, r8
    d166:	481a      	ldr	r0, [pc, #104]	; (d1d0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x360>)
    d168:	f7fd ff56 	bl	b018 <Transform::observedPlaceToMount(Coordinate*)>
  if (transform.mountType == ALTAZM) transform.horToEqu(&target); else
    d16c:	f99a 35c4 	ldrsb.w	r3, [sl, #1476]	; 0x5c4
    d170:	2b03      	cmp	r3, #3
    d172:	d033      	beq.n	d1dc <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x36c>
  if (transform.mountType == ALTALT) transform.aaToEqu(&target); else transform.equToHor(&target);
    d174:	2b04      	cmp	r3, #4
    d176:	4641      	mov	r1, r8
    d178:	4815      	ldr	r0, [pc, #84]	; (d1d0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x360>)
    d17a:	d02d      	beq.n	d1d8 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x368>
    d17c:	f7fe f8d4 	bl	b328 <Transform::equToHor(Coordinate*)>
  transform.hourAngleToRightAscension(&target, false);
    d180:	2200      	movs	r2, #0
    d182:	4641      	mov	r1, r8
    d184:	4812      	ldr	r0, [pc, #72]	; (d1d0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x360>)
    d186:	f7fe f843 	bl	b210 <Transform::hourAngleToRightAscension(Coordinate*, bool)>
}
    d18a:	4620      	mov	r0, r4
    d18c:	b057      	add	sp, #348	; 0x15c
    d18e:	ecbd 8b08 	vpop	{d8-d11}
    d192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (eastReachable) target.pierSide = PIER_SIDE_EAST;
    d196:	f89d 301e 	ldrb.w	r3, [sp, #30]
    d19a:	2b00      	cmp	r3, #0
    d19c:	f43f af59 	beq.w	d052 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e2>
    d1a0:	e7d9      	b.n	d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
  if (e != CE_NONE) return e;
    d1a2:	2c00      	cmp	r4, #0
    d1a4:	f43f ae7e 	beq.w	cea4 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x34>
    d1a8:	e754      	b.n	d054 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e4>
    d1aa:	bf00      	nop
    d1ac:	f3af 8000 	nop.w
	...
    d1b8:	71ef8766 	.word	0x71ef8766
    d1bc:	3e9787ad 	.word	0x3e9787ad
    d1c0:	20005cf4 	.word	0x20005cf4
    d1c4:	200054e0 	.word	0x200054e0
    d1c8:	200050e8 	.word	0x200050e8
    d1cc:	200051a8 	.word	0x200051a8
    d1d0:	200064ac 	.word	0x200064ac
    d1d4:	20005478 	.word	0x20005478
    d1d8:	f7fe f9c2 	bl	b560 <Transform::aaToHor(Coordinate*)>
    d1dc:	4641      	mov	r1, r8
    d1de:	481e      	ldr	r0, [pc, #120]	; (d258 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x3e8>)
    d1e0:	f7fe f95e 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    d1e4:	e7cc      	b.n	d180 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x310>
    if (westReachable) target.pierSide = PIER_SIDE_WEST;
    d1e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d1ea:	2b00      	cmp	r3, #0
    d1ec:	f43f af31 	beq.w	d052 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e2>
    if (eastReachable) target.pierSide = PIER_SIDE_EAST;
    d1f0:	2302      	movs	r3, #2
    d1f2:	f885 3168 	strb.w	r3, [r5, #360]	; 0x168
  if (target.pierSide == PIER_SIDE_WEST) target.a1Correction = axis1TargetCorrectionW;
    d1f6:	e9d9 2300 	ldrd	r2, r3, [r9]
    d1fa:	e9c5 2356 	strd	r2, r3, [r5, #344]	; 0x158
    d1fe:	e7b1      	b.n	d164 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2f4>
    d200:	2300      	movs	r3, #0
    d202:	9305      	str	r3, [sp, #20]
    d204:	e67e      	b.n	cf04 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x94>
    if (eastReachable && !westReachable) target.pierSide = PIER_SIDE_EAST; else
    d206:	f89d 301e 	ldrb.w	r3, [sp, #30]
    d20a:	b1fb      	cbz	r3, d24c <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x3dc>
    d20c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d210:	2b00      	cmp	r3, #0
    d212:	d0a0      	beq.n	d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
    if (isGoto && eastReachable && pierSideBest && eastDistance < westDistance) {
    d214:	2f00      	cmp	r7, #0
    d216:	d0eb      	beq.n	d1f0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x380>
    d218:	9b05      	ldr	r3, [sp, #20]
    d21a:	2b00      	cmp	r3, #0
    d21c:	d0e8      	beq.n	d1f0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x380>
    d21e:	eeb4 bbc8 	vcmpe.f64	d11, d8
    d222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d226:	d496      	bmi.n	d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
    d228:	e7e2      	b.n	d1f0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x380>
    if (eastReachable) target.pierSide = PIER_SIDE_EAST;
    d22a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    d22e:	2b00      	cmp	r3, #0
    d230:	d191      	bne.n	d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
  if (target.pierSide == PIER_SIDE_NONE) {
    d232:	f895 3168 	ldrb.w	r3, [r5, #360]	; 0x168
    d236:	2b00      	cmp	r3, #0
    d238:	f43f af0b 	beq.w	d052 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x1e2>
  if (target.pierSide != PIER_SIDE_EAST && target.pierSide != PIER_SIDE_WEST) {
    d23c:	1e5a      	subs	r2, r3, #1
    d23e:	2a01      	cmp	r2, #1
    d240:	d889      	bhi.n	d156 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2e6>
  if (target.pierSide == PIER_SIDE_EAST) target.a1Correction = axis1TargetCorrectionE;
    d242:	2b01      	cmp	r3, #1
    d244:	d08a      	beq.n	d15c <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2ec>
  if (target.pierSide == PIER_SIDE_WEST) target.a1Correction = axis1TargetCorrectionW;
    d246:	2b02      	cmp	r3, #2
    d248:	d18c      	bne.n	d164 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x2f4>
    d24a:	e7d4      	b.n	d1f6 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x386>
    if (westReachable) target.pierSide = PIER_SIDE_WEST;
    d24c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    d250:	2b00      	cmp	r3, #0
    d252:	d0ee      	beq.n	d232 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x3c2>
    d254:	e7cc      	b.n	d1f0 <Goto::setTarget(Coordinate*, PierSideSelect, bool)+0x380>
    d256:	bf00      	nop
    d258:	200064ac 	.word	0x200064ac
    d25c:	00000000 	.word	0x00000000

0000d260 <Goto::requestSync(Coordinate, PierSideSelect, bool)>:
CommandError Goto::requestSync(Coordinate coords, PierSideSelect pierSideSelect, bool native) {
    d260:	b082      	sub	sp, #8
    d262:	b530      	push	{r4, r5, lr}
    d264:	ed2d 8b04 	vpush	{d8-d9}
    d268:	b0af      	sub	sp, #188	; 0xbc
    d26a:	ad36      	add	r5, sp, #216	; 0xd8
    d26c:	f89d 1134 	ldrb.w	r1, [sp, #308]	; 0x134
    d270:	f89d 4130 	ldrb.w	r4, [sp, #304]	; 0x130
    d274:	e885 000c 	stmia.w	r5, {r2, r3}
    d278:	4605      	mov	r5, r0
  if (native) {
    d27a:	2900      	cmp	r1, #0
    d27c:	d141      	bne.n	d302 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xa2>
  CommandError e = setTarget(&coords, pierSideSelect, false);
    d27e:	4622      	mov	r2, r4
    d280:	2300      	movs	r3, #0
    d282:	a936      	add	r1, sp, #216	; 0xd8
    d284:	4628      	mov	r0, r5
    d286:	f7ff fdf3 	bl	ce70 <Goto::setTarget(Coordinate*, PierSideSelect, bool)>
  if (e != CE_NONE) return e;
    d28a:	4604      	mov	r4, r0
    d28c:	b138      	cbz	r0, d29e <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x3e>
}
    d28e:	4620      	mov	r0, r4
    d290:	b02f      	add	sp, #188	; 0xbc
    d292:	ecbd 8b04 	vpop	{d8-d9}
    d296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d29a:	b002      	add	sp, #8
    d29c:	4770      	bx	lr
    d29e:	482e      	ldr	r0, [pc, #184]	; (d358 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xf8>)
    d2a0:	f7f3 ff44 	bl	112c <Axis::getInstrumentCoordinate()>
    d2a4:	4622      	mov	r2, r4
    d2a6:	492d      	ldr	r1, [pc, #180]	; (d35c <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xfc>)
    d2a8:	a802      	add	r0, sp, #8
    d2aa:	eeb0 8b40 	vmov.f64	d8, d0
    d2ae:	f002 f87b 	bl	f3a8 <Home::getPosition(CoordReturn)>
    d2b2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
    d2b6:	ed9f 9b26 	vldr	d9, [pc, #152]	; d350 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xf0>
    d2ba:	ee38 8b47 	vsub.f64	d8, d8, d7
    d2be:	eeb0 8bc8 	vabs.f64	d8, d8
    d2c2:	eeb4 8bc9 	vcmpe.f64	d8, d9
    d2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d2ca:	d923      	bls.n	d314 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xb4>
    d2cc:	ab18      	add	r3, sp, #96	; 0x60
  transform.mountToInstrument(&target, &a1, &a2);
    d2ce:	aa02      	add	r2, sp, #8
    d2d0:	f505 718c 	add.w	r1, r5, #280	; 0x118
    d2d4:	4822      	ldr	r0, [pc, #136]	; (d360 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x100>)
    d2d6:	f7fd ff37 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
  axis1.setInstrumentCoordinate(a1 + target.a1Correction);
    d2da:	481f      	ldr	r0, [pc, #124]	; (d358 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xf8>)
    d2dc:	ed9d 7b02 	vldr	d7, [sp, #8]
    d2e0:	ed95 0b56 	vldr	d0, [r5, #344]	; 0x158
    d2e4:	ee30 0b07 	vadd.f64	d0, d0, d7
    d2e8:	f7f3 ff04 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
  axis2.setInstrumentCoordinate(a2);
    d2ec:	481d      	ldr	r0, [pc, #116]	; (d364 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x104>)
    d2ee:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
    d2f2:	f7f3 feff 	bl	10f4 <Axis::setInstrumentCoordinate(double)>

    // return general error code
    uint8_t errorCode();

    // enable or disable limit enforcement
    inline void enabled(bool state) { limitsEnabled = state; }
    d2f6:	2301      	movs	r3, #1
    d2f8:	491b      	ldr	r1, [pc, #108]	; (d368 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x108>)
  mount.syncFromOnStepToEncoders = true;
    d2fa:	4a1c      	ldr	r2, [pc, #112]	; (d36c <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x10c>)
    d2fc:	740b      	strb	r3, [r1, #16]
    d2fe:	7013      	strb	r3, [r2, #0]
  return CE_NONE;
    d300:	e7c5      	b.n	d28e <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x2e>
    coords.pierSide = PIER_SIDE_NONE;
    d302:	2300      	movs	r3, #0
    transform.nativeToMount(&coords);
    d304:	a936      	add	r1, sp, #216	; 0xd8
    d306:	4816      	ldr	r0, [pc, #88]	; (d360 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x100>)
    d308:	461a      	mov	r2, r3
    coords.pierSide = PIER_SIDE_NONE;
    d30a:	f88d 3128 	strb.w	r3, [sp, #296]	; 0x128
    transform.nativeToMount(&coords);
    d30e:	f7fe fa93 	bl	b838 <Transform::nativeToMount(Coordinate*, double*, double*)>
    d312:	e7b4      	b.n	d27e <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x1e>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    d314:	4813      	ldr	r0, [pc, #76]	; (d364 <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x104>)
    d316:	f7f3 ff09 	bl	112c <Axis::getInstrumentCoordinate()>
    d31a:	ab18      	add	r3, sp, #96	; 0x60
    d31c:	4622      	mov	r2, r4
    d31e:	490f      	ldr	r1, [pc, #60]	; (d35c <Goto::requestSync(Coordinate, PierSideSelect, bool)+0xfc>)
    d320:	4618      	mov	r0, r3
    d322:	eeb0 8b40 	vmov.f64	d8, d0
    d326:	9301      	str	r3, [sp, #4]
    d328:	f002 f83e 	bl	f3a8 <Home::getPosition(CoordReturn)>
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    d32c:	9b01      	ldr	r3, [sp, #4]
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
    d32e:	ed9d 7b2a 	vldr	d7, [sp, #168]	; 0xa8
    d332:	ee38 8b47 	vsub.f64	d8, d8, d7
    d336:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
    d33a:	eeb4 8bc9 	vcmpe.f64	d8, d9
    d33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d342:	d8c4      	bhi.n	d2ce <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x6e>
  if (mount.isHome()) mount.tracking(true);
    d344:	2101      	movs	r1, #1
    d346:	4809      	ldr	r0, [pc, #36]	; (d36c <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x10c>)
    d348:	f7fb fbb6 	bl	8ab8 <Mount::tracking(bool)>
    d34c:	9b01      	ldr	r3, [sp, #4]
    d34e:	e7be      	b.n	d2ce <Goto::requestSync(Coordinate, PierSideSelect, bool)+0x6e>
    d350:	71ef8766 	.word	0x71ef8766
    d354:	3e9787ad 	.word	0x3e9787ad
    d358:	200050e8 	.word	0x200050e8
    d35c:	20005478 	.word	0x20005478
    d360:	200064ac 	.word	0x200064ac
    d364:	200051a8 	.word	0x200051a8
    d368:	20005cf4 	.word	0x20005cf4
    d36c:	200054e0 	.word	0x200054e0

0000d370 <Goto::alignAddStar(bool)>:

// add an align star (at the current position relative to target)
CommandError Goto::alignAddStar(bool sync) {
    d370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (alignState.currentStar > alignState.lastStar) return CE_PARAM_RANGE;
    d374:	f890 61e2 	ldrb.w	r6, [r0, #482]	; 0x1e2
CommandError Goto::alignAddStar(bool sync) {
    d378:	b0c3      	sub	sp, #268	; 0x10c
  if (alignState.currentStar > alignState.lastStar) return CE_PARAM_RANGE;
    d37a:	f890 31e3 	ldrb.w	r3, [r0, #483]	; 0x1e3
    d37e:	42b3      	cmp	r3, r6
    d380:	d369      	bcc.n	d456 <Goto::alignAddStar(bool)+0xe6>

  CommandError e = CE_NONE;

  // first star, get ready for a new pointing model, init/sync then call gta.addStar 
  if (alignState.currentStar == 1) {
    d382:	2e01      	cmp	r6, #1
    d384:	4604      	mov	r4, r0
    d386:	4689      	mov	r9, r1
    d388:	d032      	beq.n	d3f0 <Goto::alignAddStar(bool)+0x80>
    d38a:	f500 77b8 	add.w	r7, r0, #368	; 0x170
    d38e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d480 <Goto::alignAddStar(bool)+0x110>
    transform.hourAngleToRightAscension(&lastAlignTarget, true);
  }

  // add an align star
  if (e == CE_NONE) {
    Coordinate mountPosition = mount.getMountPosition(CR_MOUNT_ALL);
    d392:	ad2c      	add	r5, sp, #176	; 0xb0
    d394:	2204      	movs	r2, #4
    d396:	4939      	ldr	r1, [pc, #228]	; (d47c <Goto::alignAddStar(bool)+0x10c>)
    d398:	4628      	mov	r0, r5
    d39a:	f7fb fda7 	bl	8eec <Mount::getMountPosition(CoordReturn)>
    if (sync) { lastAlignTarget = gotoTarget; }
    d39e:	f1b9 0f00 	cmp.w	r9, #0
    d3a2:	d11e      	bne.n	d3e2 <Goto::alignAddStar(bool)+0x72>

    // update the targets HA and Horizon coords as necessary
    transform.rightAscensionToHourAngle(&lastAlignTarget, true);
    d3a4:	2201      	movs	r2, #1
    d3a6:	4639      	mov	r1, r7
    d3a8:	4835      	ldr	r0, [pc, #212]	; (d480 <Goto::alignAddStar(bool)+0x110>)
    d3aa:	f7fd ff6d 	bl	b288 <Transform::rightAscensionToHourAngle(Coordinate*, bool)>
    if (transform.mountType == ALTAZM) transform.equToHor(&lastAlignTarget); else
    d3ae:	f998 35c4 	ldrsb.w	r3, [r8, #1476]	; 0x5c4
    d3b2:	2b03      	cmp	r3, #3
    d3b4:	d05d      	beq.n	d472 <Goto::alignAddStar(bool)+0x102>
    if (transform.mountType == ALTALT) transform.equToAa(&lastAlignTarget);
    d3b6:	2b04      	cmp	r3, #4
    d3b8:	d052      	beq.n	d460 <Goto::alignAddStar(bool)+0xf0>

    #if ALIGN_MAX_NUM_STARS > 1
      e = transform.align.addStar(alignState.currentStar, alignState.lastStar, &lastAlignTarget, &mountPosition);
    d3ba:	f894 21e3 	ldrb.w	r2, [r4, #483]	; 0x1e3
    d3be:	463b      	mov	r3, r7
    d3c0:	f894 11e2 	ldrb.w	r1, [r4, #482]	; 0x1e2
    d3c4:	482e      	ldr	r0, [pc, #184]	; (d480 <Goto::alignAddStar(bool)+0x110>)
    d3c6:	9500      	str	r5, [sp, #0]
    d3c8:	f7fc fa9e 	bl	9908 <GeoAlign::addStar(int, int, Coordinate*, Coordinate*)>
    #else
      UNUSED(mountPosition);
    #endif

    if (e == CE_NONE) alignState.currentStar++;
    d3cc:	4605      	mov	r5, r0
    d3ce:	b920      	cbnz	r0, d3da <Goto::alignAddStar(bool)+0x6a>
    d3d0:	f894 31e2 	ldrb.w	r3, [r4, #482]	; 0x1e2
    d3d4:	3301      	adds	r3, #1
    d3d6:	f884 31e2 	strb.w	r3, [r4, #482]	; 0x1e2
  }

  return e;
}
    d3da:	4628      	mov	r0, r5
    d3dc:	b043      	add	sp, #268	; 0x10c
    d3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sync) { lastAlignTarget = gotoTarget; }
    d3e2:	2258      	movs	r2, #88	; 0x58
    d3e4:	f104 0110 	add.w	r1, r4, #16
    d3e8:	4638      	mov	r0, r7
    d3ea:	f00b f86f 	bl	184cc <memcpy>
    d3ee:	e7d9      	b.n	d3a4 <Goto::alignAddStar(bool)+0x34>
      transform.align.init(transform.mountType, site.location.latitude);
    d3f0:	4b24      	ldr	r3, [pc, #144]	; (d484 <Goto::alignAddStar(bool)+0x114>)
    lastAlignTarget = mount.getMountPosition(CR_MOUNT_ALL);
    d3f2:	f504 77b8 	add.w	r7, r4, #368	; 0x170
      transform.align.init(transform.mountType, site.location.latitude);
    d3f6:	f8df 8088 	ldr.w	r8, [pc, #136]	; d480 <Goto::alignAddStar(bool)+0x110>
    d3fa:	ed93 0b00 	vldr	d0, [r3]
    d3fe:	f998 15c4 	ldrsb.w	r1, [r8, #1476]	; 0x5c4
    d402:	4640      	mov	r0, r8
    d404:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    d408:	f7fc f8ac 	bl	9564 <GeoAlign::init(signed char, float)>
    e = requestSync(gotoTarget, PSS_SAME_ONLY);
    d40c:	2306      	movs	r3, #6
    d40e:	f104 0118 	add.w	r1, r4, #24
    d412:	2250      	movs	r2, #80	; 0x50
    d414:	4668      	mov	r0, sp
    d416:	e9cd 3614 	strd	r3, r6, [sp, #80]	; 0x50
    d41a:	f00b f857 	bl	184cc <memcpy>
    d41e:	f104 0310 	add.w	r3, r4, #16
    d422:	4620      	mov	r0, r4
    d424:	cb0c      	ldmia	r3, {r2, r3}
    d426:	f7ff ff1b 	bl	d260 <Goto::requestSync(Coordinate, PierSideSelect, bool)>
    lastAlignTarget = mount.getMountPosition(CR_MOUNT_ALL);
    d42a:	2204      	movs	r2, #4
    e = requestSync(gotoTarget, PSS_SAME_ONLY);
    d42c:	4605      	mov	r5, r0
    lastAlignTarget = mount.getMountPosition(CR_MOUNT_ALL);
    d42e:	4913      	ldr	r1, [pc, #76]	; (d47c <Goto::alignAddStar(bool)+0x10c>)
    d430:	a816      	add	r0, sp, #88	; 0x58
    d432:	f7fb fd5b 	bl	8eec <Mount::getMountPosition(CoordReturn)>
    d436:	a916      	add	r1, sp, #88	; 0x58
    d438:	2258      	movs	r2, #88	; 0x58
    d43a:	4638      	mov	r0, r7
    d43c:	f00b f846 	bl	184cc <memcpy>
    transform.hourAngleToRightAscension(&lastAlignTarget, true);
    d440:	4632      	mov	r2, r6
    d442:	4639      	mov	r1, r7
    d444:	4640      	mov	r0, r8
    d446:	f7fd fee3 	bl	b210 <Transform::hourAngleToRightAscension(Coordinate*, bool)>
  if (e == CE_NONE) {
    d44a:	2d00      	cmp	r5, #0
    d44c:	d0a1      	beq.n	d392 <Goto::alignAddStar(bool)+0x22>
}
    d44e:	4628      	mov	r0, r5
    d450:	b043      	add	sp, #268	; 0x10c
    d452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (alignState.currentStar > alignState.lastStar) return CE_PARAM_RANGE;
    d456:	2504      	movs	r5, #4
}
    d458:	4628      	mov	r0, r5
    d45a:	b043      	add	sp, #268	; 0x10c
    d45c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
    d460:	4639      	mov	r1, r7
    d462:	4807      	ldr	r0, [pc, #28]	; (d480 <Goto::alignAddStar(bool)+0x110>)
    d464:	f7fd ff60 	bl	b328 <Transform::equToHor(Coordinate*)>
    d468:	4639      	mov	r1, r7
    d46a:	4805      	ldr	r0, [pc, #20]	; (d480 <Goto::alignAddStar(bool)+0x110>)
    d46c:	f7fe f8e8 	bl	b640 <Transform::horToAa(Coordinate*)>
    d470:	e7a3      	b.n	d3ba <Goto::alignAddStar(bool)+0x4a>
    if (transform.mountType == ALTAZM) transform.equToHor(&lastAlignTarget); else
    d472:	4639      	mov	r1, r7
    d474:	4802      	ldr	r0, [pc, #8]	; (d480 <Goto::alignAddStar(bool)+0x110>)
    d476:	f7fd ff57 	bl	b328 <Transform::equToHor(Coordinate*)>
    d47a:	e79e      	b.n	d3ba <Goto::alignAddStar(bool)+0x4a>
    d47c:	200054e0 	.word	0x200054e0
    d480:	200064ac 	.word	0x200064ac
    d484:	200055d0 	.word	0x200055d0

0000d488 <Goto::alignReset()>:

// reset the alignment model
void Goto::alignReset() {
    d488:	4603      	mov	r3, r0
  alignState.currentStar = 0;
    d48a:	2200      	movs	r2, #0
  alignState.lastStar = 0;
  #if ALIGN_MAX_NUM_STARS > 1
    transform.align.modelClear();
    d48c:	4802      	ldr	r0, [pc, #8]	; (d498 <Goto::alignReset()+0x10>)
  alignState.currentStar = 0;
    d48e:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
    transform.align.modelClear();
    d492:	f7fc ba07 	b.w	98a4 <GeoAlign::modelClear()>
    d496:	bf00      	nop
    d498:	200064ac 	.word	0x200064ac
    d49c:	00000000 	.word	0x00000000

0000d4a0 <Goto::waypoint(Coordinate*)>:
  #endif
}

#if GOTO_FEATURE == ON
// set any additional destinations required for a goto
void Goto::waypoint(Coordinate *current) {
    d4a0:	b530      	push	{r4, r5, lr}
  // HA goes from +90...0..-90
  //                W   .   E
  // meridian flip, only happens for equatorial mounts

  stage = GG_WAYPOINT_HOME;
    d4a2:	2303      	movs	r3, #3
void Goto::waypoint(Coordinate *current) {
    d4a4:	b097      	sub	sp, #92	; 0x5c
    d4a6:	4604      	mov	r4, r0

  // default goes straight to the home position
  destination = home.getPosition(CR_MOUNT);
    d4a8:	2200      	movs	r2, #0
  stage = GG_WAYPOINT_HOME;
    d4aa:	7043      	strb	r3, [r0, #1]
void Goto::waypoint(Coordinate *current) {
    d4ac:	460d      	mov	r5, r1
  destination = home.getPosition(CR_MOUNT);
    d4ae:	4668      	mov	r0, sp
    d4b0:	4949      	ldr	r1, [pc, #292]	; (d5d8 <Goto::waypoint(Coordinate*)+0x138>)
    d4b2:	f001 ff79 	bl	f3a8 <Home::getPosition(CoordReturn)>
    d4b6:	2258      	movs	r2, #88	; 0x58
    d4b8:	4669      	mov	r1, sp
    d4ba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d4be:	f00b f805 	bl	184cc <memcpy>

  // if the home position is at 0 hours, we're done
  if (destination.h == 0.0) return;
    d4c2:	ed94 7b32 	vldr	d7, [r4, #200]	; 0xc8
    d4c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
    d4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4ce:	d049      	beq.n	d564 <Goto::waypoint(Coordinate*)+0xc4>

  double d60 = degToRad(120);
  double d45 = degToRad(135);
  if (current->pierSide == PIER_SIDE_EAST) { d60 = Deg180 - d60; d45 = Deg180 - d45; }
    d4d0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50

  // decide if we should first move to 60 deg. HA (4 hours) to get away from the horizon limits
  if (current->a < Deg10 && fabs(start.h) > Deg90) { destination.h = d60; stage = GG_WAYPOINT_AVOID; return; }
    d4d4:	ed95 2b06 	vldr	d2, [r5, #24]
    d4d8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; d590 <Goto::waypoint(Coordinate*)+0xf0>
  if (current->pierSide == PIER_SIDE_EAST) { d60 = Deg180 - d60; d45 = Deg180 - d45; }
    d4dc:	ed9f 3b2e 	vldr	d3, [pc, #184]	; d598 <Goto::waypoint(Coordinate*)+0xf8>
    d4e0:	ed9f 4b2f 	vldr	d4, [pc, #188]	; d5a0 <Goto::waypoint(Coordinate*)+0x100>
    d4e4:	ed9f 7b30 	vldr	d7, [pc, #192]	; d5a8 <Goto::waypoint(Coordinate*)+0x108>
    d4e8:	ed9f 5b31 	vldr	d5, [pc, #196]	; d5b0 <Goto::waypoint(Coordinate*)+0x110>
  if (current->a < Deg10 && fabs(start.h) > Deg90) { destination.h = d60; stage = GG_WAYPOINT_AVOID; return; }
    d4ec:	eeb4 2bc6 	vcmpe.f64	d2, d6
  if (current->pierSide == PIER_SIDE_EAST) { d60 = Deg180 - d60; d45 = Deg180 - d45; }
    d4f0:	2b01      	cmp	r3, #1
    d4f2:	fe04 3b03 	vseleq.f64	d3, d4, d3
    d4f6:	fe05 7b07 	vseleq.f64	d7, d5, d7
  if (current->a < Deg10 && fabs(start.h) > Deg90) { destination.h = d60; stage = GG_WAYPOINT_AVOID; return; }
    d4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4fe:	d50a      	bpl.n	d516 <Goto::waypoint(Coordinate*)+0x76>
    d500:	ed94 6b1c 	vldr	d6, [r4, #112]	; 0x70
    d504:	ed9f 5b2c 	vldr	d5, [pc, #176]	; d5b8 <Goto::waypoint(Coordinate*)+0x118>
    d508:	eeb0 6bc6 	vabs.f64	d6, d6
    d50c:	eeb4 6bc5 	vcmpe.f64	d6, d5
    d510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d514:	dc28      	bgt.n	d568 <Goto::waypoint(Coordinate*)+0xc8>

  // decide if we should first move to 45 deg. HA (3 hours) to get away from the horizon limits
  // if at a low latitude and in the opposite sky, |HA| = 6 is very low on the horizon and we need
  // to delay arriving there during a meridian flip.  In the extreme case, where the user is very
  // near the Earths equator an Horizon limit of -10 or -15 may be necessary for proper operation
  if (current->a < Deg20 && site.locationEx.latitude.absval < Deg45) {
    d516:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d5c0 <Goto::waypoint(Coordinate*)+0x120>
    d51a:	eeb4 2bc7 	vcmpe.f64	d2, d7
    d51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d522:	d51f      	bpl.n	d564 <Goto::waypoint(Coordinate*)+0xc4>
    d524:	4b2d      	ldr	r3, [pc, #180]	; (d5dc <Goto::waypoint(Coordinate*)+0x13c>)
    d526:	ed9f 7b28 	vldr	d7, [pc, #160]	; d5c8 <Goto::waypoint(Coordinate*)+0x128>
    d52a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
    d52e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    d532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d536:	d515      	bpl.n	d564 <Goto::waypoint(Coordinate*)+0xc4>
    if (site.location.latitude >= 0) {
    d538:	ed93 7b00 	vldr	d7, [r3]
    d53c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    d540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d544:	db16      	blt.n	d574 <Goto::waypoint(Coordinate*)+0xd4>
      if (current->d <= Deg90 - site.location.latitude) { destination.h = d45; stage = GG_WAYPOINT_AVOID; }
    d546:	ed9f 6b1c 	vldr	d6, [pc, #112]	; d5b8 <Goto::waypoint(Coordinate*)+0x118>
    d54a:	ed95 5b04 	vldr	d5, [r5, #16]
    d54e:	ee36 7b47 	vsub.f64	d7, d6, d7
    d552:	eeb4 5bc7 	vcmpe.f64	d5, d7
    d556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d55a:	d803      	bhi.n	d564 <Goto::waypoint(Coordinate*)+0xc4>
    } else {
      if (current->d >= -Deg90 - site.location.latitude) { destination.h = d45; stage = GG_WAYPOINT_AVOID; }
    d55c:	2304      	movs	r3, #4
    d55e:	ed84 3b32 	vstr	d3, [r4, #200]	; 0xc8
    d562:	7063      	strb	r3, [r4, #1]
    }
  }
}
    d564:	b017      	add	sp, #92	; 0x5c
    d566:	bd30      	pop	{r4, r5, pc}
  if (current->a < Deg10 && fabs(start.h) > Deg90) { destination.h = d60; stage = GG_WAYPOINT_AVOID; return; }
    d568:	2304      	movs	r3, #4
    d56a:	ed84 7b32 	vstr	d7, [r4, #200]	; 0xc8
    d56e:	7063      	strb	r3, [r4, #1]
}
    d570:	b017      	add	sp, #92	; 0x5c
    d572:	bd30      	pop	{r4, r5, pc}
      if (current->d >= -Deg90 - site.location.latitude) { destination.h = d45; stage = GG_WAYPOINT_AVOID; }
    d574:	ed9f 6b16 	vldr	d6, [pc, #88]	; d5d0 <Goto::waypoint(Coordinate*)+0x130>
    d578:	ed95 5b04 	vldr	d5, [r5, #16]
    d57c:	ee36 7b47 	vsub.f64	d7, d6, d7
    d580:	eeb4 5bc7 	vcmpe.f64	d5, d7
    d584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d588:	dbec      	blt.n	d564 <Goto::waypoint(Coordinate*)+0xc4>
    d58a:	e7e7      	b.n	d55c <Goto::waypoint(Coordinate*)+0xbc>
    d58c:	f3af 8000 	nop.w
    d590:	4ae74465 	.word	0x4ae74465
    d594:	3fc65718 	.word	0x3fc65718
    d598:	7f3321d2 	.word	0x7f3321d2
    d59c:	4002d97c 	.word	0x4002d97c
    d5a0:	54442d18 	.word	0x54442d18
    d5a4:	3fe921fb 	.word	0x3fe921fb
    d5a8:	382d7365 	.word	0x382d7365
    d5ac:	4000c152 	.word	0x4000c152
    d5b0:	382d7366 	.word	0x382d7366
    d5b4:	3ff0c152 	.word	0x3ff0c152
    d5b8:	54442d15 	.word	0x54442d15
    d5bc:	3ff921fb 	.word	0x3ff921fb
    d5c0:	4ae74477 	.word	0x4ae74477
    d5c4:	3fd65718 	.word	0x3fd65718
    d5c8:	54442d15 	.word	0x54442d15
    d5cc:	3fe921fb 	.word	0x3fe921fb
    d5d0:	54442d15 	.word	0x54442d15
    d5d4:	bff921fb 	.word	0xbff921fb
    d5d8:	20005478 	.word	0x20005478
    d5dc:	200055d0 	.word	0x200055d0

0000d5e0 <Goto::startAutoSlew()>:
  CommandError e;

  nearTargetTimeoutAxis1 = millis();
  nearTargetTimeoutAxis2 = millis();

  if (stage == GG_NEAR_DESTINATION || stage == GG_DESTINATION) {
    d5e0:	7843      	ldrb	r3, [r0, #1]
CommandError Goto::startAutoSlew() {
    d5e2:	b530      	push	{r4, r5, lr}
  if (stage == GG_NEAR_DESTINATION || stage == GG_DESTINATION) {
    d5e4:	3b07      	subs	r3, #7
	return systick_millis_count;
    d5e6:	4d29      	ldr	r5, [pc, #164]	; (d68c <Goto::startAutoSlew()+0xac>)
CommandError Goto::startAutoSlew() {
    d5e8:	b085      	sub	sp, #20
    d5ea:	4604      	mov	r4, r0
    d5ec:	6829      	ldr	r1, [r5, #0]
  if (stage == GG_NEAR_DESTINATION || stage == GG_DESTINATION) {
    d5ee:	2b01      	cmp	r3, #1
    d5f0:	682a      	ldr	r2, [r5, #0]
  nearTargetTimeoutAxis2 = millis();
    d5f2:	e9c0 1275 	strd	r1, r2, [r0, #468]	; 0x1d4
  if (stage == GG_NEAR_DESTINATION || stage == GG_DESTINATION) {
    d5f6:	d80f      	bhi.n	d618 <Goto::startAutoSlew()+0x38>
    destination.h -= slewDestinationDistHA;
    d5f8:	ed90 6b32 	vldr	d6, [r0, #200]	; 0xc8
    destination.d -= slewDestinationDistDec;
    d5fc:	ed90 7b34 	vldr	d7, [r0, #208]	; 0xd0
    destination.h -= slewDestinationDistHA;
    d600:	ed90 4b7c 	vldr	d4, [r0, #496]	; 0x1f0
    destination.d -= slewDestinationDistDec;
    d604:	ed90 5b7e 	vldr	d5, [r0, #504]	; 0x1f8
    destination.h -= slewDestinationDistHA;
    d608:	ee36 6b44 	vsub.f64	d6, d6, d4
    destination.d -= slewDestinationDistDec;
    d60c:	ee37 7b45 	vsub.f64	d7, d7, d5
    destination.h -= slewDestinationDistHA;
    d610:	ed80 6b32 	vstr	d6, [r0, #200]	; 0xc8
    destination.d -= slewDestinationDistDec;
    d614:	ed80 7b34 	vstr	d7, [r0, #208]	; 0xd0
  }

  double a1, a2;
  transform.mountToInstrument(&destination, &a1, &a2);
    d618:	ab02      	add	r3, sp, #8
    d61a:	481d      	ldr	r0, [pc, #116]	; (d690 <Goto::startAutoSlew()+0xb0>)
    d61c:	466a      	mov	r2, sp
    d61e:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    d622:	f7fd fd91 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>

  if (stage == GG_DESTINATION && park.state == PS_PARKING) {
    d626:	7863      	ldrb	r3, [r4, #1]
    axis1.setTargetCoordinatePark(a1 + destination.a1Correction);
    d628:	481a      	ldr	r0, [pc, #104]	; (d694 <Goto::startAutoSlew()+0xb4>)
  if (stage == GG_DESTINATION && park.state == PS_PARKING) {
    d62a:	2b08      	cmp	r3, #8
    axis1.setTargetCoordinatePark(a1 + destination.a1Correction);
    d62c:	ed94 0b40 	vldr	d0, [r4, #256]	; 0x100
    d630:	ed9d 7b00 	vldr	d7, [sp]
    d634:	ee30 0b07 	vadd.f64	d0, d0, d7
  if (stage == GG_DESTINATION && park.state == PS_PARKING) {
    d638:	d103      	bne.n	d642 <Goto::startAutoSlew()+0x62>
    d63a:	4b17      	ldr	r3, [pc, #92]	; (d698 <Goto::startAutoSlew()+0xb8>)
    d63c:	781b      	ldrb	r3, [r3, #0]
    d63e:	2b01      	cmp	r3, #1
    d640:	d01b      	beq.n	d67a <Goto::startAutoSlew()+0x9a>
    axis2.setTargetCoordinatePark(a2);
  } else {
    axis1.setTargetCoordinate(a1 + destination.a1Correction);
    d642:	f7f3 fe05 	bl	1250 <Axis::setTargetCoordinate(double)>
    axis2.setTargetCoordinate(a2);
    d646:	4815      	ldr	r0, [pc, #84]	; (d69c <Goto::startAutoSlew()+0xbc>)
    d648:	ed9d 0b02 	vldr	d0, [sp, #8]
    d64c:	f7f3 fe00 	bl	1250 <Axis::setTargetCoordinate(double)>
  }

  VF("MSG: Mount, goto target coordinates set (a1="); V(radToDeg(a1)); VF(" deg, a2="); V(radToDeg(a2)); VLF(" deg)");

  e = axis1.autoGoto(radsPerSecondCurrent);
    d650:	ed94 0a7a 	vldr	s0, [r4, #488]	; 0x1e8
    d654:	480f      	ldr	r0, [pc, #60]	; (d694 <Goto::startAutoSlew()+0xb4>)
    d656:	f7f3 ffff 	bl	1658 <Axis::autoGoto(float)>
  if (e == CE_NONE) e = axis2.autoGoto(radsPerSecondCurrent*((float)(AXIS2_SLEW_RATE_PERCENT)/100.0F));
    d65a:	b120      	cbz	r0, d666 <Goto::startAutoSlew()+0x86>
    d65c:	682b      	ldr	r3, [r5, #0]

  nearTargetTimeout = millis();
    d65e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0

  return e;
}
    d662:	b005      	add	sp, #20
    d664:	bd30      	pop	{r4, r5, pc}
  if (e == CE_NONE) e = axis2.autoGoto(radsPerSecondCurrent*((float)(AXIS2_SLEW_RATE_PERCENT)/100.0F));
    d666:	ed94 0a7a 	vldr	s0, [r4, #488]	; 0x1e8
    d66a:	480c      	ldr	r0, [pc, #48]	; (d69c <Goto::startAutoSlew()+0xbc>)
    d66c:	f7f3 fff4 	bl	1658 <Axis::autoGoto(float)>
    d670:	682b      	ldr	r3, [r5, #0]
  nearTargetTimeout = millis();
    d672:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
}
    d676:	b005      	add	sp, #20
    d678:	bd30      	pop	{r4, r5, pc}
    axis1.setTargetCoordinatePark(a1 + destination.a1Correction);
    d67a:	f7f3 fdb7 	bl	11ec <Axis::setTargetCoordinatePark(double)>
    axis2.setTargetCoordinatePark(a2);
    d67e:	4807      	ldr	r0, [pc, #28]	; (d69c <Goto::startAutoSlew()+0xbc>)
    d680:	ed9d 0b02 	vldr	d0, [sp, #8]
    d684:	f7f3 fdb2 	bl	11ec <Axis::setTargetCoordinatePark(double)>
    d688:	e7e2      	b.n	d650 <Goto::startAutoSlew()+0x70>
    d68a:	bf00      	nop
    d68c:	20006344 	.word	0x20006344
    d690:	200064ac 	.word	0x200064ac
    d694:	200050e8 	.word	0x200050e8
    d698:	20005ea8 	.word	0x20005ea8
    d69c:	200051a8 	.word	0x200051a8

0000d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>:
CommandError Goto::request(Coordinate coords, PierSideSelect pierSideSelect, bool native) {
    d6a0:	b082      	sub	sp, #8
    d6a2:	b570      	push	{r4, r5, r6, lr}
    d6a4:	b09a      	sub	sp, #104	; 0x68
    d6a6:	ac1e      	add	r4, sp, #120	; 0x78
    d6a8:	f89d 10d4 	ldrb.w	r1, [sp, #212]	; 0xd4
    d6ac:	f89d 50d0 	ldrb.w	r5, [sp, #208]	; 0xd0
    d6b0:	e884 000c 	stmia.w	r4, {r2, r3}
    d6b4:	4604      	mov	r4, r0
  if (native) {
    d6b6:	2900      	cmp	r1, #0
    d6b8:	d172      	bne.n	d7a0 <Goto::request(Coordinate, PierSideSelect, bool)+0x100>
  CommandError e = setTarget(&coords, pierSideSelect);
    d6ba:	462a      	mov	r2, r5
    d6bc:	2301      	movs	r3, #1
    d6be:	a91e      	add	r1, sp, #120	; 0x78
    d6c0:	4620      	mov	r0, r4
    d6c2:	f7ff fbd5 	bl	ce70 <Goto::setTarget(Coordinate*, PierSideSelect, bool)>
  if (e == CE_SLEW_IN_SLEW) { abort(); return e; }
    d6c6:	2813      	cmp	r0, #19
  CommandError e = setTarget(&coords, pierSideSelect);
    d6c8:	4605      	mov	r5, r0
  if (e == CE_SLEW_IN_SLEW) { abort(); return e; }
    d6ca:	f000 80ad 	beq.w	d828 <Goto::request(Coordinate, PierSideSelect, bool)+0x188>
  if (e != CE_NONE) return e;
    d6ce:	2800      	cmp	r0, #0
    d6d0:	d156      	bne.n	d780 <Goto::request(Coordinate, PierSideSelect, bool)+0xe0>
  lastAlignTarget = target;
    d6d2:	f504 768c 	add.w	r6, r4, #280	; 0x118
    d6d6:	2258      	movs	r2, #88	; 0x58
    d6d8:	f504 70b8 	add.w	r0, r4, #368	; 0x170
    d6dc:	4631      	mov	r1, r6
    d6de:	f00a fef5 	bl	184cc <memcpy>
    d6e2:	4b5b      	ldr	r3, [pc, #364]	; (d850 <Goto::request(Coordinate, PierSideSelect, bool)+0x1b0>)
    d6e4:	2101      	movs	r1, #1
  mount.syncFromOnStepToEncoders = false;
    d6e6:	485b      	ldr	r0, [pc, #364]	; (d854 <Goto::request(Coordinate, PierSideSelect, bool)+0x1b4>)
    d6e8:	7419      	strb	r1, [r3, #16]
  if (firstGoto) {
    d6ea:	7a23      	ldrb	r3, [r4, #8]
  mount.syncFromOnStepToEncoders = false;
    d6ec:	7005      	strb	r5, [r0, #0]
  if (firstGoto) {
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	f040 8085 	bne.w	d7fe <Goto::request(Coordinate, PierSideSelect, bool)+0x15e>
  guide.backlashEnableControl(true);
    d6f4:	2101      	movs	r1, #1
    d6f6:	4858      	ldr	r0, [pc, #352]	; (d858 <Goto::request(Coordinate, PierSideSelect, bool)+0x1b8>)
    d6f8:	f001 fdb4 	bl	f264 <Guide::backlashEnableControl(bool)>
  nearDestinationRefineStages = 0;
    d6fc:	2100      	movs	r1, #0
  slewDestinationDistHA = 0.0;
    d6fe:	2200      	movs	r2, #0
    d700:	2300      	movs	r3, #0
  nearDestinationRefineStages = 0;
    d702:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
  if ((encodersPresent || (park.state != PS_PARKING && home.state != HS_HOMING))) {
    d706:	7aa1      	ldrb	r1, [r4, #10]
  slewDestinationDistHA = 0.0;
    d708:	e9c4 237c 	strd	r2, r3, [r4, #496]	; 0x1f0
  slewDestinationDistDec = 0.0;
    d70c:	e9c4 237e 	strd	r2, r3, [r4, #504]	; 0x1f8
  if ((encodersPresent || (park.state != PS_PARKING && home.state != HS_HOMING))) {
    d710:	2900      	cmp	r1, #0
    d712:	d03b      	beq.n	d78c <Goto::request(Coordinate, PierSideSelect, bool)+0xec>
    nearDestinationRefineStages = GOTO_REFINE_STAGES;
    d714:	2301      	movs	r3, #1
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    d716:	4d51      	ldr	r5, [pc, #324]	; (d85c <Goto::request(Coordinate, PierSideSelect, bool)+0x1bc>)
    d718:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
    d71c:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
    if (transform.isEquatorial()) { 
    d720:	3b01      	subs	r3, #1
    d722:	2b01      	cmp	r3, #1
    d724:	d96f      	bls.n	d806 <Goto::request(Coordinate, PierSideSelect, bool)+0x166>
  Coordinate current = mount.getMountPosition(CR_MOUNT_HOR);
    d726:	2203      	movs	r2, #3
    d728:	494a      	ldr	r1, [pc, #296]	; (d854 <Goto::request(Coordinate, PierSideSelect, bool)+0x1b4>)
    d72a:	a804      	add	r0, sp, #16
    d72c:	f7fb fbde 	bl	8eec <Mount::getMountPosition(CoordReturn)>
  state = GS_GOTO;
    d730:	f240 5301 	movw	r3, #1281	; 0x501
    d734:	4620      	mov	r0, r4
  start = current;
    d736:	2258      	movs	r2, #88	; 0x58
    d738:	a904      	add	r1, sp, #16
  state = GS_GOTO;
    d73a:	f820 3b68 	strh.w	r3, [r0], #104
  start = current;
    d73e:	f00a fec5 	bl	184cc <memcpy>
  destination = target;
    d742:	2258      	movs	r2, #88	; 0x58
    d744:	4631      	mov	r1, r6
    d746:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d74a:	f00a febf 	bl	184cc <memcpy>
    d74e:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (transform.isEquatorial() && MFLIP_SKIP_HOME == OFF && start.pierSide != destination.pierSide) {
    d752:	3b01      	subs	r3, #1
    d754:	2b01      	cmp	r3, #1
    d756:	d92c      	bls.n	d7b2 <Goto::request(Coordinate, PierSideSelect, bool)+0x112>
  if (taskHandle != 0) tasks.remove(taskHandle);
    d758:	f894 11ca 	ldrb.w	r1, [r4, #458]	; 0x1ca
    d75c:	2900      	cmp	r1, #0
    d75e:	d136      	bne.n	d7ce <Goto::request(Coordinate, PierSideSelect, bool)+0x12e>
  taskHandle = tasks.add(0, 0, true, 3, gotoWrapper, "MntGoto");
    d760:	2200      	movs	r2, #0
    d762:	493f      	ldr	r1, [pc, #252]	; (d860 <Goto::request(Coordinate, PierSideSelect, bool)+0x1c0>)
    d764:	4b3f      	ldr	r3, [pc, #252]	; (d864 <Goto::request(Coordinate, PierSideSelect, bool)+0x1c4>)
    d766:	2003      	movs	r0, #3
    d768:	e9cd 3101 	strd	r3, r1, [sp, #4]
    d76c:	9000      	str	r0, [sp, #0]
    d76e:	2301      	movs	r3, #1
    d770:	4611      	mov	r1, r2
    d772:	483d      	ldr	r0, [pc, #244]	; (d868 <Goto::request(Coordinate, PierSideSelect, bool)+0x1c8>)
    d774:	f7f8 fd32 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    d778:	4605      	mov	r5, r0
    d77a:	f884 01ca 	strb.w	r0, [r4, #458]	; 0x1ca
  if (taskHandle) {
    d77e:	bb50      	cbnz	r0, d7d6 <Goto::request(Coordinate, PierSideSelect, bool)+0x136>
}
    d780:	4628      	mov	r0, r5
    d782:	b01a      	add	sp, #104	; 0x68
    d784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d788:	b002      	add	sp, #8
    d78a:	4770      	bx	lr
  if ((encodersPresent || (park.state != PS_PARKING && home.state != HS_HOMING))) {
    d78c:	4b37      	ldr	r3, [pc, #220]	; (d86c <Goto::request(Coordinate, PierSideSelect, bool)+0x1cc>)
    d78e:	781b      	ldrb	r3, [r3, #0]
    d790:	2b01      	cmp	r3, #1
    d792:	d003      	beq.n	d79c <Goto::request(Coordinate, PierSideSelect, bool)+0xfc>
    d794:	4b36      	ldr	r3, [pc, #216]	; (d870 <Goto::request(Coordinate, PierSideSelect, bool)+0x1d0>)
    d796:	7b5b      	ldrb	r3, [r3, #13]
    d798:	2b01      	cmp	r3, #1
    d79a:	d1bb      	bne.n	d714 <Goto::request(Coordinate, PierSideSelect, bool)+0x74>
    d79c:	4d2f      	ldr	r5, [pc, #188]	; (d85c <Goto::request(Coordinate, PierSideSelect, bool)+0x1bc>)
    d79e:	e7c2      	b.n	d726 <Goto::request(Coordinate, PierSideSelect, bool)+0x86>
    coords.pierSide = PIER_SIDE_NONE;
    d7a0:	2300      	movs	r3, #0
    transform.nativeToMount(&coords);
    d7a2:	a91e      	add	r1, sp, #120	; 0x78
    d7a4:	482d      	ldr	r0, [pc, #180]	; (d85c <Goto::request(Coordinate, PierSideSelect, bool)+0x1bc>)
    d7a6:	461a      	mov	r2, r3
    coords.pierSide = PIER_SIDE_NONE;
    d7a8:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
    transform.nativeToMount(&coords);
    d7ac:	f7fe f844 	bl	b838 <Transform::nativeToMount(Coordinate*, double*, double*)>
    d7b0:	e783      	b.n	d6ba <Goto::request(Coordinate, PierSideSelect, bool)+0x1a>
  if (transform.isEquatorial() && MFLIP_SKIP_HOME == OFF && start.pierSide != destination.pierSide) {
    d7b2:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    d7b6:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    d7ba:	429a      	cmp	r2, r3
    d7bc:	d0cc      	beq.n	d758 <Goto::request(Coordinate, PierSideSelect, bool)+0xb8>
    waypoint(&current);
    d7be:	a904      	add	r1, sp, #16
    d7c0:	4620      	mov	r0, r4
    d7c2:	f7ff fe6d 	bl	d4a0 <Goto::waypoint(Coordinate*)>
  if (taskHandle != 0) tasks.remove(taskHandle);
    d7c6:	f894 11ca 	ldrb.w	r1, [r4, #458]	; 0x1ca
    d7ca:	2900      	cmp	r1, #0
    d7cc:	d0c8      	beq.n	d760 <Goto::request(Coordinate, PierSideSelect, bool)+0xc0>
    d7ce:	4826      	ldr	r0, [pc, #152]	; (d868 <Goto::request(Coordinate, PierSideSelect, bool)+0x1c8>)
    d7d0:	f7f8 fd76 	bl	62c0 <Tasks::remove(unsigned char)>
    d7d4:	e7c4      	b.n	d760 <Goto::request(Coordinate, PierSideSelect, bool)+0xc0>
    e = startAutoSlew();
    d7d6:	4620      	mov	r0, r4
    d7d8:	f7ff ff02 	bl	d5e0 <Goto::startAutoSlew()>
    if (e != CE_NONE) {
    d7dc:	4605      	mov	r5, r0
    d7de:	2800      	cmp	r0, #0
    d7e0:	d1ce      	bne.n	d780 <Goto::request(Coordinate, PierSideSelect, bool)+0xe0>
    tasks.setPeriodMicros(taskHandle, FRACTIONAL_SEC_US);
    d7e2:	4821      	ldr	r0, [pc, #132]	; (d868 <Goto::request(Coordinate, PierSideSelect, bool)+0x1c8>)
    d7e4:	f240 726c 	movw	r2, #1900	; 0x76c
    d7e8:	f894 11ca 	ldrb.w	r1, [r4, #458]	; 0x1ca
    d7ec:	f7f8 fdae 	bl	634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>
    d7f0:	4820      	ldr	r0, [pc, #128]	; (d874 <Goto::request(Coordinate, PierSideSelect, bool)+0x1d4>)
    d7f2:	7843      	ldrb	r3, [r0, #1]
    d7f4:	bb0b      	cbnz	r3, d83a <Goto::request(Coordinate, PierSideSelect, bool)+0x19a>
    d7f6:	4820      	ldr	r0, [pc, #128]	; (d878 <Goto::request(Coordinate, PierSideSelect, bool)+0x1d8>)
    d7f8:	f7f7 ff3c 	bl	5674 <Sound::alert()>
    d7fc:	e7c0      	b.n	d780 <Goto::request(Coordinate, PierSideSelect, bool)+0xe0>
    mount.tracking(true);
    d7fe:	f7fb f95b 	bl	8ab8 <Mount::tracking(bool)>
    firstGoto = false;
    d802:	7225      	strb	r5, [r4, #8]
    d804:	e776      	b.n	d6f4 <Goto::request(Coordinate, PierSideSelect, bool)+0x54>
      slewDestinationDistHA = degToRad(GOTO_OFFSET);
    d806:	a30e      	add	r3, pc, #56	; (adr r3, d840 <Goto::request(Coordinate, PierSideSelect, bool)+0x1a0>)
    d808:	e9d3 2300 	ldrd	r2, r3, [r3]
    d80c:	e9c4 237c 	strd	r2, r3, [r4, #496]	; 0x1f0
      slewDestinationDistDec = degToRad(GOTO_OFFSET);
    d810:	e9c4 237e 	strd	r2, r3, [r4, #504]	; 0x1f8
      if (target.pierSide == PIER_SIDE_WEST) slewDestinationDistDec = -slewDestinationDistDec;
    d814:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    d818:	2b02      	cmp	r3, #2
    d81a:	d184      	bne.n	d726 <Goto::request(Coordinate, PierSideSelect, bool)+0x86>
    d81c:	a30a      	add	r3, pc, #40	; (adr r3, d848 <Goto::request(Coordinate, PierSideSelect, bool)+0x1a8>)
    d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d822:	e9c4 237e 	strd	r2, r3, [r4, #504]	; 0x1f8
    d826:	e77e      	b.n	d726 <Goto::request(Coordinate, PierSideSelect, bool)+0x86>
  if (state == GS_GOTO && stage > GG_READY_ABORT) stage = GG_READY_ABORT;
    d828:	7823      	ldrb	r3, [r4, #0]
    d82a:	2b01      	cmp	r3, #1
    d82c:	d1a8      	bne.n	d780 <Goto::request(Coordinate, PierSideSelect, bool)+0xe0>
    d82e:	7863      	ldrb	r3, [r4, #1]
    d830:	2b02      	cmp	r3, #2
    d832:	d9a5      	bls.n	d780 <Goto::request(Coordinate, PierSideSelect, bool)+0xe0>
    d834:	2302      	movs	r3, #2
    d836:	7063      	strb	r3, [r4, #1]
    d838:	e7a2      	b.n	d780 <Goto::request(Coordinate, PierSideSelect, bool)+0xe0>
    d83a:	f007 f97f 	bl	14b3c <Status::wake()>
    d83e:	e7da      	b.n	d7f6 <Goto::request(Coordinate, PierSideSelect, bool)+0x156>
    d840:	a2529d39 	.word	0xa2529d39
    d844:	3f71df46 	.word	0x3f71df46
    d848:	a2529d39 	.word	0xa2529d39
    d84c:	bf71df46 	.word	0xbf71df46
    d850:	20005cf4 	.word	0x20005cf4
    d854:	200054e0 	.word	0x200054e0
    d858:	200043e8 	.word	0x200043e8
    d85c:	200064ac 	.word	0x200064ac
    d860:	200021d4 	.word	0x200021d4
    d864:	0000de01 	.word	0x0000de01
    d868:	2000634c 	.word	0x2000634c
    d86c:	20005ea8 	.word	0x20005ea8
    d870:	20005478 	.word	0x20005478
    d874:	20005e4c 	.word	0x20005e4c
    d878:	20005e4d 	.word	0x20005e4d
    d87c:	00000000 	.word	0x00000000

0000d880 <Goto::poll()>:
  if (stage == GG_READY_ABORT) {
    d880:	7843      	ldrb	r3, [r0, #1]
    d882:	2b02      	cmp	r3, #2
void Goto::poll() {
    d884:	b5f0      	push	{r4, r5, r6, r7, lr}
    d886:	4604      	mov	r4, r0
    d888:	b0b3      	sub	sp, #204	; 0xcc
  if (stage == GG_READY_ABORT) {
    d88a:	f000 80f5 	beq.w	da78 <Goto::poll()+0x1f8>
  if (axis1.isSlewing()) {
    d88e:	4ec0      	ldr	r6, [pc, #768]	; (db90 <Goto::poll()+0x310>)
    d890:	4630      	mov	r0, r6
    d892:	f7f3 fd4b 	bl	132c <Axis::isSlewing()>
    d896:	2800      	cmp	r0, #0
    d898:	f040 80dc 	bne.w	da54 <Goto::poll()+0x1d4>
  if (axis2.isSlewing()) {
    d89c:	4dbd      	ldr	r5, [pc, #756]	; (db94 <Goto::poll()+0x314>)
    d89e:	4628      	mov	r0, r5
    d8a0:	f7f3 fd44 	bl	132c <Axis::isSlewing()>
    d8a4:	2800      	cmp	r0, #0
    d8a6:	f040 80c3 	bne.w	da30 <Goto::poll()+0x1b0>
    inline bool isSlewing() { return axis1.isSlewing() || axis2.isSlewing(); }
    d8aa:	48b9      	ldr	r0, [pc, #740]	; (db90 <Goto::poll()+0x310>)
    d8ac:	f7f3 fd3e 	bl	132c <Axis::isSlewing()>
    d8b0:	2800      	cmp	r0, #0
    d8b2:	f000 809b 	beq.w	d9ec <Goto::poll()+0x16c>
    d8b6:	4bb8      	ldr	r3, [pc, #736]	; (db98 <Goto::poll()+0x318>)
    d8b8:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
  if (transform.isEquatorial() && MOUNT_HORIZON_AVOIDANCE == ON) {
    d8bc:	3b01      	subs	r3, #1
    d8be:	2b01      	cmp	r3, #1
    d8c0:	d90e      	bls.n	d8e0 <Goto::poll()+0x60>
  if (AXIS1_TARGET_TOLERANCE != 0.0F || AXIS2_TARGET_TOLERANCE != 0.0F || !axis1.nearTarget() || !axis2.nearTarget()) nearTargetTimeout = millis();
    d8c2:	48b3      	ldr	r0, [pc, #716]	; (db90 <Goto::poll()+0x310>)
    d8c4:	f7f3 fcde 	bl	1284 <Axis::nearTarget()>
    d8c8:	bb00      	cbnz	r0, d90c <Goto::poll()+0x8c>
    d8ca:	4bb4      	ldr	r3, [pc, #720]	; (db9c <Goto::poll()+0x31c>)
    d8cc:	681b      	ldr	r3, [r3, #0]
    d8ce:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0

    // enables or disables tracking, enabling tracking powers on the motors if necessary
    void tracking(bool state);

    // returns true if the mount is tracking
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
    d8d2:	4bb3      	ldr	r3, [pc, #716]	; (dba0 <Goto::poll()+0x320>)
  if (mount.isTracking()) {
    d8d4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
    d8d8:	2a01      	cmp	r2, #1
    d8da:	d021      	beq.n	d920 <Goto::poll()+0xa0>
}
    d8dc:	b033      	add	sp, #204	; 0xcc
    d8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (site.locationEx.latitude.absval > degToRad(10.0)) {
    d8e0:	4fb0      	ldr	r7, [pc, #704]	; (dba4 <Goto::poll()+0x324>)
    d8e2:	ed9f 7ba5 	vldr	d7, [pc, #660]	; db78 <Goto::poll()+0x2f8>
    d8e6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
    d8ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
    d8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d8f2:	f300 8173 	bgt.w	dbdc <Goto::poll()+0x35c>
    void setFrequencyScale(float frequency) { if (frequency >= 0.0F && frequency <= 1.0F) scaleFreq = frequency; }
    d8f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  if (AXIS1_TARGET_TOLERANCE != 0.0F || AXIS2_TARGET_TOLERANCE != 0.0F || !axis1.nearTarget() || !axis2.nearTarget()) nearTargetTimeout = millis();
    d8fa:	48a5      	ldr	r0, [pc, #660]	; (db90 <Goto::poll()+0x310>)
    d8fc:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
    d900:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    d904:	f7f3 fcbe 	bl	1284 <Axis::nearTarget()>
    d908:	2800      	cmp	r0, #0
    d90a:	d0de      	beq.n	d8ca <Goto::poll()+0x4a>
    d90c:	48a1      	ldr	r0, [pc, #644]	; (db94 <Goto::poll()+0x314>)
    d90e:	f7f3 fcb9 	bl	1284 <Axis::nearTarget()>
    d912:	2800      	cmp	r0, #0
    d914:	d0d9      	beq.n	d8ca <Goto::poll()+0x4a>
    d916:	4ba2      	ldr	r3, [pc, #648]	; (dba0 <Goto::poll()+0x320>)
  if (mount.isTracking()) {
    d918:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
    d91c:	2a01      	cmp	r2, #1
    d91e:	d1dd      	bne.n	d8dc <Goto::poll()+0x5c>
    target.r += siderealToRad(mount.trackingRateOffsetRA)/FRACTIONAL_SEC;
    d920:	ed93 4a04 	vldr	s8, [r3, #16]
    transform.rightAscensionToHourAngle(&target, false);
    d924:	f504 718c 	add.w	r1, r4, #280	; 0x118
    target.d += siderealToRad(mount.trackingRateOffsetDec)/FRACTIONAL_SEC;
    d928:	ed93 5a05 	vldr	s10, [r3, #20]
    transform.rightAscensionToHourAngle(&target, false);
    d92c:	2200      	movs	r2, #0
    target.r += siderealToRad(mount.trackingRateOffsetRA)/FRACTIONAL_SEC;
    d92e:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    transform.rightAscensionToHourAngle(&target, false);
    d932:	4d99      	ldr	r5, [pc, #612]	; (db98 <Goto::poll()+0x318>)
    target.d += siderealToRad(mount.trackingRateOffsetDec)/FRACTIONAL_SEC;
    d934:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    transform.rightAscensionToHourAngle(&target, false);
    d938:	9101      	str	r1, [sp, #4]
    d93a:	4628      	mov	r0, r5
    target.r += siderealToRad(mount.trackingRateOffsetRA)/FRACTIONAL_SEC;
    d93c:	ed9f 2b90 	vldr	d2, [pc, #576]	; db80 <Goto::poll()+0x300>
    d940:	ed9f 3b91 	vldr	d3, [pc, #580]	; db88 <Goto::poll()+0x308>
    d944:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
    d948:	ee84 0b02 	vdiv.f64	d0, d4, d2
    target.d += siderealToRad(mount.trackingRateOffsetDec)/FRACTIONAL_SEC;
    d94c:	ee85 1b02 	vdiv.f64	d1, d5, d2
    d950:	ed94 7b4a 	vldr	d7, [r4, #296]	; 0x128
    target.r += siderealToRad(mount.trackingRateOffsetRA)/FRACTIONAL_SEC;
    d954:	ee80 4b03 	vdiv.f64	d4, d0, d3
    target.d += siderealToRad(mount.trackingRateOffsetDec)/FRACTIONAL_SEC;
    d958:	ee81 5b03 	vdiv.f64	d5, d1, d3
    target.r += siderealToRad(mount.trackingRateOffsetRA)/FRACTIONAL_SEC;
    d95c:	ee36 6b04 	vadd.f64	d6, d6, d4
    d960:	ed84 6b46 	vstr	d6, [r4, #280]	; 0x118
    target.d += siderealToRad(mount.trackingRateOffsetDec)/FRACTIONAL_SEC;
    d964:	ee37 7b05 	vadd.f64	d7, d7, d5
    d968:	ed84 7b4a 	vstr	d7, [r4, #296]	; 0x128
    transform.rightAscensionToHourAngle(&target, false);
    d96c:	f7fd fc8c 	bl	b288 <Transform::rightAscensionToHourAngle(Coordinate*, bool)>
    if (stage >= GG_NEAR_DESTINATION_START) {
    d970:	7863      	ldrb	r3, [r4, #1]
    d972:	2b04      	cmp	r3, #4
    d974:	d9b2      	bls.n	d8dc <Goto::poll()+0x5c>
    d976:	4b89      	ldr	r3, [pc, #548]	; (db9c <Goto::poll()+0x31c>)
      if (millis() - nearTargetTimeout < 5000) {
    d978:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    d97c:	681b      	ldr	r3, [r3, #0]
    d97e:	1a9b      	subs	r3, r3, r2
    d980:	f241 3287 	movw	r2, #4999	; 0x1387
    d984:	4293      	cmp	r3, r2
    d986:	d8a9      	bhi.n	d8dc <Goto::poll()+0x5c>
        Coordinate nearTarget = target;
    d988:	2258      	movs	r2, #88	; 0x58
    d98a:	9901      	ldr	r1, [sp, #4]
    d98c:	a81c      	add	r0, sp, #112	; 0x70
    d98e:	f00a fd9d 	bl	184cc <memcpy>
        if (transform.mountType == ALTAZM) transform.equToHor(&nearTarget); else
    d992:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
        nearTarget.h -= slewDestinationDistHA;
    d996:	ed9d 6b1e 	vldr	d6, [sp, #120]	; 0x78
        nearTarget.d -= slewDestinationDistDec;
    d99a:	ed9d 7b20 	vldr	d7, [sp, #128]	; 0x80
        nearTarget.h -= slewDestinationDistHA;
    d99e:	ed94 4b7c 	vldr	d4, [r4, #496]	; 0x1f0
        nearTarget.d -= slewDestinationDistDec;
    d9a2:	ed94 5b7e 	vldr	d5, [r4, #504]	; 0x1f8
        if (transform.mountType == ALTAZM) transform.equToHor(&nearTarget); else
    d9a6:	2b03      	cmp	r3, #3
        nearTarget.h -= slewDestinationDistHA;
    d9a8:	ee36 6b44 	vsub.f64	d6, d6, d4
        nearTarget.d -= slewDestinationDistDec;
    d9ac:	ee37 7b45 	vsub.f64	d7, d7, d5
        nearTarget.h -= slewDestinationDistHA;
    d9b0:	ed8d 6b1e 	vstr	d6, [sp, #120]	; 0x78
        nearTarget.d -= slewDestinationDistDec;
    d9b4:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
        if (transform.mountType == ALTAZM) transform.equToHor(&nearTarget); else
    d9b8:	f000 81fa 	beq.w	ddb0 <Goto::poll()+0x530>
        if (transform.mountType == ALTALT) transform.equToAa(&nearTarget);
    d9bc:	2b04      	cmp	r3, #4
    d9be:	f000 8202 	beq.w	ddc6 <Goto::poll()+0x546>
        transform.mountToInstrument(&nearTarget, &a1, &a2);
    d9c2:	ab1a      	add	r3, sp, #104	; 0x68
    d9c4:	aa18      	add	r2, sp, #96	; 0x60
    d9c6:	a91c      	add	r1, sp, #112	; 0x70
    d9c8:	4873      	ldr	r0, [pc, #460]	; (db98 <Goto::poll()+0x318>)
    d9ca:	f7fd fbbd 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
        axis1.setTargetCoordinate(a1 + nearTarget.a1Correction);
    d9ce:	4870      	ldr	r0, [pc, #448]	; (db90 <Goto::poll()+0x310>)
    d9d0:	ed9d 0b2c 	vldr	d0, [sp, #176]	; 0xb0
    d9d4:	ed9d 7b18 	vldr	d7, [sp, #96]	; 0x60
    d9d8:	ee30 0b07 	vadd.f64	d0, d0, d7
    d9dc:	f7f3 fc38 	bl	1250 <Axis::setTargetCoordinate(double)>
        axis2.setTargetCoordinate(a2);
    d9e0:	486c      	ldr	r0, [pc, #432]	; (db94 <Goto::poll()+0x314>)
    d9e2:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
    d9e6:	f7f3 fc33 	bl	1250 <Axis::setTargetCoordinate(double)>
    d9ea:	e777      	b.n	d8dc <Goto::poll()+0x5c>
    inline bool isSlewing() { return axis1.isSlewing() || axis2.isSlewing(); }
    d9ec:	4869      	ldr	r0, [pc, #420]	; (db94 <Goto::poll()+0x314>)
    d9ee:	f7f3 fc9d 	bl	132c <Axis::isSlewing()>
    d9f2:	2800      	cmp	r0, #0
    d9f4:	f47f af5f 	bne.w	d8b6 <Goto::poll()+0x36>
    if (stage == GG_WAYPOINT_AVOID) {
    d9f8:	7863      	ldrb	r3, [r4, #1]
    d9fa:	2b04      	cmp	r3, #4
    d9fc:	f000 8182 	beq.w	dd04 <Goto::poll()+0x484>
    if (stage == GG_WAYPOINT_HOME) {
    da00:	3b01      	subs	r3, #1
    da02:	2b07      	cmp	r3, #7
    da04:	f63f af57 	bhi.w	d8b6 <Goto::poll()+0x36>
    da08:	a201      	add	r2, pc, #4	; (adr r2, da10 <Goto::poll()+0x190>)
    da0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    da0e:	bf00      	nop
    da10:	0000daa5 	.word	0x0000daa5
    da14:	0000d8b7 	.word	0x0000d8b7
    da18:	0000db4d 	.word	0x0000db4d
    da1c:	0000d8b7 	.word	0x0000d8b7
    da20:	0000db33 	.word	0x0000db33
    da24:	0000db63 	.word	0x0000db63
    da28:	0000daf7 	.word	0x0000daf7
    da2c:	0000daa5 	.word	0x0000daa5
    if (!axis2.nearTarget()) nearTargetTimeoutAxis2 = millis();
    da30:	4628      	mov	r0, r5
    da32:	f7f3 fc27 	bl	1284 <Axis::nearTarget()>
    da36:	b380      	cbz	r0, da9a <Goto::poll()+0x21a>
    if ((long)(millis() - nearTargetTimeoutAxis2) > 15000) {
    da38:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
    da3c:	4b57      	ldr	r3, [pc, #348]	; (db9c <Goto::poll()+0x31c>)
    da3e:	681b      	ldr	r3, [r3, #0]
    da40:	1a9b      	subs	r3, r3, r2
    da42:	f643 2298 	movw	r2, #15000	; 0x3a98
    da46:	4293      	cmp	r3, r2
    da48:	f77f af2f 	ble.w	d8aa <Goto::poll()+0x2a>
      axis2.autoSlewAbort();
    da4c:	4851      	ldr	r0, [pc, #324]	; (db94 <Goto::poll()+0x314>)
    da4e:	f7f4 f9db 	bl	1e08 <Axis::autoSlewAbort()>
    da52:	e72a      	b.n	d8aa <Goto::poll()+0x2a>
    if (!axis1.nearTarget()) nearTargetTimeoutAxis1 = millis();
    da54:	4630      	mov	r0, r6
    da56:	f7f3 fc15 	bl	1284 <Axis::nearTarget()>
    da5a:	b1c8      	cbz	r0, da90 <Goto::poll()+0x210>
    if ((long)(millis() - nearTargetTimeoutAxis1) > 15000) {
    da5c:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
    da60:	4b4e      	ldr	r3, [pc, #312]	; (db9c <Goto::poll()+0x31c>)
    da62:	681b      	ldr	r3, [r3, #0]
    da64:	f643 2198 	movw	r1, #15000	; 0x3a98
    da68:	1a9b      	subs	r3, r3, r2
    da6a:	428b      	cmp	r3, r1
    da6c:	f77f af16 	ble.w	d89c <Goto::poll()+0x1c>
      axis1.autoSlewAbort();
    da70:	4847      	ldr	r0, [pc, #284]	; (db90 <Goto::poll()+0x310>)
    da72:	f7f4 f9c9 	bl	1e08 <Axis::autoSlewAbort()>
    da76:	e711      	b.n	d89c <Goto::poll()+0x1c>
    stage = GG_ABORT;
    da78:	2201      	movs	r2, #1
    meridianFlipHome.paused = false;
    da7a:	2300      	movs	r3, #0
    axis1.autoSlewAbort();
    da7c:	4844      	ldr	r0, [pc, #272]	; (db90 <Goto::poll()+0x310>)
    stage = GG_ABORT;
    da7e:	7062      	strb	r2, [r4, #1]
    meridianFlipHome.paused = false;
    da80:	f8a4 31e0 	strh.w	r3, [r4, #480]	; 0x1e0
    axis1.autoSlewAbort();
    da84:	f7f4 f9c0 	bl	1e08 <Axis::autoSlewAbort()>
    axis2.autoSlewAbort();
    da88:	4842      	ldr	r0, [pc, #264]	; (db94 <Goto::poll()+0x314>)
    da8a:	f7f4 f9bd 	bl	1e08 <Axis::autoSlewAbort()>
    da8e:	e6fe      	b.n	d88e <Goto::poll()+0xe>
    da90:	4b42      	ldr	r3, [pc, #264]	; (db9c <Goto::poll()+0x31c>)
    da92:	681a      	ldr	r2, [r3, #0]
    if (!axis1.nearTarget()) nearTargetTimeoutAxis1 = millis();
    da94:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
    da98:	e7e3      	b.n	da62 <Goto::poll()+0x1e2>
    da9a:	4b40      	ldr	r3, [pc, #256]	; (db9c <Goto::poll()+0x31c>)
    da9c:	681a      	ldr	r2, [r3, #0]
    if (!axis2.nearTarget()) nearTargetTimeoutAxis2 = millis();
    da9e:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
    daa2:	e7cc      	b.n	da3e <Goto::poll()+0x1be>
      state = GS_NONE;
    daa4:	2700      	movs	r7, #0
      mount.update();
    daa6:	483e      	ldr	r0, [pc, #248]	; (dba0 <Goto::poll()+0x320>)
      state = GS_NONE;
    daa8:	7027      	strb	r7, [r4, #0]
      mount.update();
    daaa:	f7fa ff1d 	bl	88e8 <Mount::update()>
    daae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
      tasks.setDurationComplete(taskHandle);
    dab2:	483d      	ldr	r0, [pc, #244]	; (dba8 <Goto::poll()+0x328>)
    dab4:	f894 11ca 	ldrb.w	r1, [r4, #458]	; 0x1ca
    dab8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
    dabc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    dac0:	f7f8 fc66 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
      if (park.state == PS_PARKING) {
    dac4:	4839      	ldr	r0, [pc, #228]	; (dbac <Goto::poll()+0x32c>)
      taskHandle = 0;
    dac6:	f884 71ca 	strb.w	r7, [r4, #458]	; 0x1ca
      if (park.state == PS_PARKING) {
    daca:	7803      	ldrb	r3, [r0, #0]
    dacc:	2b01      	cmp	r3, #1
    dace:	f000 8158 	beq.w	dd82 <Goto::poll()+0x502>
      if (home.state == HS_HOMING) {
    dad2:	4837      	ldr	r0, [pc, #220]	; (dbb0 <Goto::poll()+0x330>)
    dad4:	7b43      	ldrb	r3, [r0, #13]
    dad6:	2b01      	cmp	r3, #1
    dad8:	f000 8159 	beq.w	dd8e <Goto::poll()+0x50e>
    dadc:	4835      	ldr	r0, [pc, #212]	; (dbb4 <Goto::poll()+0x334>)
      stage = GG_NONE;
    dade:	2200      	movs	r2, #0
    dae0:	7843      	ldrb	r3, [r0, #1]
    dae2:	7062      	strb	r2, [r4, #1]
    dae4:	2b00      	cmp	r3, #0
    dae6:	f040 8158 	bne.w	dd9a <Goto::poll()+0x51a>
    daea:	4833      	ldr	r0, [pc, #204]	; (dbb8 <Goto::poll()+0x338>)
}
    daec:	b033      	add	sp, #204	; 0xcc
    daee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    daf2:	f7f7 bdbf 	b.w	5674 <Sound::alert()>
      if (nearDestinationRefineStages >= 1) {
    daf6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    dafa:	2b00      	cmp	r3, #0
    dafc:	f340 813e 	ble.w	dd7c <Goto::poll()+0x4fc>
        if (--nearDestinationRefineStages) stage = GG_NEAR_DESTINATION_START; else stage = GG_DESTINATION;
    db00:	3b01      	subs	r3, #1
        destination = target;
    db02:	2258      	movs	r2, #88	; 0x58
    db04:	f504 718c 	add.w	r1, r4, #280	; 0x118
    db08:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
        if (--nearDestinationRefineStages) stage = GG_NEAR_DESTINATION_START; else stage = GG_DESTINATION;
    db0c:	2b00      	cmp	r3, #0
    db0e:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
    db12:	bf14      	ite	ne
    db14:	2305      	movne	r3, #5
    db16:	2308      	moveq	r3, #8
    db18:	7063      	strb	r3, [r4, #1]
        destination = target;
    db1a:	f00a fcd7 	bl	184cc <memcpy>
          slewDestinationDistHA = 0.0;
    db1e:	2200      	movs	r2, #0
    db20:	2300      	movs	r3, #0
        startAutoSlew();
    db22:	4620      	mov	r0, r4
          slewDestinationDistHA = 0.0;
    db24:	e9c4 237c 	strd	r2, r3, [r4, #496]	; 0x1f0
          slewDestinationDistDec = 0.0;
    db28:	e9c4 237e 	strd	r2, r3, [r4, #504]	; 0x1f8
        startAutoSlew();
    db2c:	f7ff fd58 	bl	d5e0 <Goto::startAutoSlew()>
    db30:	e6c1      	b.n	d8b6 <Goto::poll()+0x36>
      if (nearDestinationRefineStages >= 1) {
    db32:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    db36:	2b00      	cmp	r3, #0
    db38:	dd1b      	ble.n	db72 <Goto::poll()+0x2f2>
    db3a:	4b18      	ldr	r3, [pc, #96]	; (db9c <Goto::poll()+0x31c>)
        stage = GG_NEAR_DESTINATION_WAIT;
    db3c:	2206      	movs	r2, #6
    db3e:	681b      	ldr	r3, [r3, #0]
    db40:	7062      	strb	r2, [r4, #1]
        nearDestinationTimeout = millis() + GOTO_SETTLE_TIME;
    db42:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
    db46:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
        stage = GG_NEAR_DESTINATION_WAIT;
    db4a:	e6b4      	b.n	d8b6 <Goto::poll()+0x36>
      if (settings.meridianFlipPause && !meridianFlipHome.resume) { meridianFlipHome.paused = true; goto skip; }
    db4c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
    db50:	079b      	lsls	r3, r3, #30
    db52:	d533      	bpl.n	dbbc <Goto::poll()+0x33c>
    db54:	f894 31e1 	ldrb.w	r3, [r4, #481]	; 0x1e1
    db58:	bb83      	cbnz	r3, dbbc <Goto::poll()+0x33c>
    db5a:	2301      	movs	r3, #1
    db5c:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
    db60:	e6af      	b.n	d8c2 <Goto::poll()+0x42>
    db62:	4b0e      	ldr	r3, [pc, #56]	; (db9c <Goto::poll()+0x31c>)
      if ((long)(millis() - nearDestinationTimeout) > 0) {
    db64:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
    db68:	681b      	ldr	r3, [r3, #0]
    db6a:	1a9b      	subs	r3, r3, r2
    db6c:	2b00      	cmp	r3, #0
    db6e:	f77f aea2 	ble.w	d8b6 <Goto::poll()+0x36>
      } else stage = GG_NEAR_DESTINATION;
    db72:	2307      	movs	r3, #7
    db74:	7063      	strb	r3, [r4, #1]
    db76:	e69e      	b.n	d8b6 <Goto::poll()+0x36>
    db78:	4ae74487 	.word	0x4ae74487
    db7c:	3fc65718 	.word	0x3fc65718
    db80:	58bd85d4 	.word	0x58bd85d4
    db84:	40cadb7e 	.word	0x40cadb7e
    db88:	c0000000 	.word	0xc0000000
    db8c:	40807286 	.word	0x40807286
    db90:	200050e8 	.word	0x200050e8
    db94:	200051a8 	.word	0x200051a8
    db98:	200064ac 	.word	0x200064ac
    db9c:	20006344 	.word	0x20006344
    dba0:	200054e0 	.word	0x200054e0
    dba4:	200055d0 	.word	0x200055d0
    dba8:	2000634c 	.word	0x2000634c
    dbac:	20005ea8 	.word	0x20005ea8
    dbb0:	20005478 	.word	0x20005478
    dbb4:	20005e4c 	.word	0x20005e4c
    dbb8:	20005e4d 	.word	0x20005e4d
      stage = GG_NEAR_DESTINATION_START;
    dbbc:	2305      	movs	r3, #5
      meridianFlipHome.paused = false;
    dbbe:	2200      	movs	r2, #0
      destination = target;
    dbc0:	f504 718c 	add.w	r1, r4, #280	; 0x118
    dbc4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
      meridianFlipHome.paused = false;
    dbc8:	f8a4 21e0 	strh.w	r2, [r4, #480]	; 0x1e0
      destination = target;
    dbcc:	2258      	movs	r2, #88	; 0x58
      stage = GG_NEAR_DESTINATION_START;
    dbce:	7063      	strb	r3, [r4, #1]
      destination = target;
    dbd0:	f00a fc7c 	bl	184cc <memcpy>
      startAutoSlew();
    dbd4:	4620      	mov	r0, r4
    dbd6:	f7ff fd03 	bl	d5e0 <Goto::startAutoSlew()>
    dbda:	e66c      	b.n	d8b6 <Goto::poll()+0x36>
      Coordinate coords = mount.getMountPosition(CR_MOUNT_ALT);
    dbdc:	2202      	movs	r2, #2
    dbde:	4980      	ldr	r1, [pc, #512]	; (dde0 <Goto::poll()+0x560>)
    dbe0:	a81c      	add	r0, sp, #112	; 0x70
    dbe2:	f7fb f983 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      float slowdownFactor = radToDeg(coords.a - limits.settings.altitude.min)/(SLEW_ACCELERATION_DIST*2.0);
    dbe6:	4b7f      	ldr	r3, [pc, #508]	; (dde4 <Goto::poll()+0x564>)
    dbe8:	eeb1 2b04 	vmov.f64	d2, #20	; 0x40a00000  5.0
    dbec:	681b      	ldr	r3, [r3, #0]
      if (slowdownFactor > 1.0F) slowdownFactor = 1.0F;
    dbee:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
      float slowdownFactor = radToDeg(coords.a - limits.settings.altitude.min)/(SLEW_ACCELERATION_DIST*2.0);
    dbf2:	ee05 3a10 	vmov	s10, r3
    dbf6:	ed9d 6b22 	vldr	d6, [sp, #136]	; 0x88
    dbfa:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    dbfe:	ed9f 1b76 	vldr	d1, [pc, #472]	; ddd8 <Goto::poll()+0x558>
    dc02:	ee36 6b45 	vsub.f64	d6, d6, d5
      float a2 = site.locationEx.latitude.sign*coords.d;
    dc06:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
    dc0a:	ed9d 3b20 	vldr	d3, [sp, #128]	; 0x80
      float slowdownFactor = radToDeg(coords.a - limits.settings.altitude.min)/(SLEW_ACCELERATION_DIST*2.0);
    dc0e:	ee26 1b01 	vmul.f64	d1, d6, d1
      float a2 = site.locationEx.latitude.sign*coords.d;
    dc12:	ee27 7b03 	vmul.f64	d7, d7, d3
    dc16:	eeb7 6bc7 	vcvt.f32.f64	s12, d7
      float slowdownFactor = radToDeg(coords.a - limits.settings.altitude.min)/(SLEW_ACCELERATION_DIST*2.0);
    dc1a:	ee81 7b02 	vdiv.f64	d7, d1, d2
    dc1e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      if (slowdownFactor > 1.0F) slowdownFactor = 1.0F;
    dc22:	eeb4 7ae4 	vcmpe.f32	s14, s9
    dc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc2a:	f340 808f 	ble.w	dd4c <Goto::poll()+0x4cc>
    dc2e:	eeb0 7a64 	vmov.f32	s14, s9
      if (a2 < last_a2) slowdownFactor2 = slowdownFactor; else slowdownFactor1 = slowdownFactor;
    dc32:	4a6d      	ldr	r2, [pc, #436]	; (dde8 <Goto::poll()+0x568>)
    dc34:	edd2 7a00 	vldr	s15, [r2]
    dc38:	eef4 7ac6 	vcmpe.f32	s15, s12
    dc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc40:	f300 8096 	bgt.w	dd70 <Goto::poll()+0x4f0>
    dc44:	eef0 6a47 	vmov.f32	s13, s14
      float slowdownFactor2 = 1.0F;
    dc48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
      if (slowdownFactor1a < slowdownFactor1) { slowdownFactor1a += sfr; }
    dc4c:	4b67      	ldr	r3, [pc, #412]	; (ddec <Goto::poll()+0x56c>)
    dc4e:	edd3 7a00 	vldr	s15, [r3]
    dc52:	eef4 7ae6 	vcmpe.f32	s15, s13
    dc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc5a:	d505      	bpl.n	dc68 <Goto::poll()+0x3e8>
    dc5c:	eddf 5a64 	vldr	s11, [pc, #400]	; ddf0 <Goto::poll()+0x570>
    dc60:	ee77 7aa5 	vadd.f32	s15, s15, s11
    dc64:	edc3 7a00 	vstr	s15, [r3]
      if (slowdownFactor1a > slowdownFactor1) { slowdownFactor1a -= sfr; }
    dc68:	eef4 6ae7 	vcmpe.f32	s13, s15
    dc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc70:	d505      	bpl.n	dc7e <Goto::poll()+0x3fe>
    dc72:	eddf 6a5f 	vldr	s13, [pc, #380]	; ddf0 <Goto::poll()+0x570>
    dc76:	ee77 7ae6 	vsub.f32	s15, s15, s13
    dc7a:	edc3 7a00 	vstr	s15, [r3]
      if (slowdownFactor1a > 1.0F) slowdownFactor1a = 1.0F;
    dc7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    dc82:	eef4 7ae6 	vcmpe.f32	s15, s13
    dc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc8a:	dd69      	ble.n	dd60 <Goto::poll()+0x4e0>
      if (slowdownFactor1a < 0.2F) slowdownFactor1a = 0.2F;
    dc8c:	eef0 7a66 	vmov.f32	s15, s13
    dc90:	edc3 6a00 	vstr	s13, [r3]
      if (slowdownFactor2a < slowdownFactor2) { slowdownFactor2a += sfr; }
    dc94:	4b57      	ldr	r3, [pc, #348]	; (ddf4 <Goto::poll()+0x574>)
    dc96:	edd3 6a00 	vldr	s13, [r3]
    dc9a:	eef4 6ac7 	vcmpe.f32	s13, s14
    dc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dca2:	d505      	bpl.n	dcb0 <Goto::poll()+0x430>
    dca4:	eddf 5a52 	vldr	s11, [pc, #328]	; ddf0 <Goto::poll()+0x570>
    dca8:	ee76 6aa5 	vadd.f32	s13, s13, s11
    dcac:	edc3 6a00 	vstr	s13, [r3]
      if (slowdownFactor2a > slowdownFactor2) { slowdownFactor2a -= sfr; }
    dcb0:	eeb4 7ae6 	vcmpe.f32	s14, s13
    dcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dcb8:	d505      	bpl.n	dcc6 <Goto::poll()+0x446>
    dcba:	ed9f 7a4d 	vldr	s14, [pc, #308]	; ddf0 <Goto::poll()+0x570>
    dcbe:	ee76 6ac7 	vsub.f32	s13, s13, s14
    dcc2:	edc3 6a00 	vstr	s13, [r3]
      if (slowdownFactor2a > 1.0F) slowdownFactor2a = 1.0F;
    dcc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    dcca:	eef4 6ac7 	vcmpe.f32	s13, s14
    dcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dcd2:	dd28      	ble.n	dd26 <Goto::poll()+0x4a6>
    dcd4:	ed83 7a00 	vstr	s14, [r3]
    dcd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dce0:	db06      	blt.n	dcf0 <Goto::poll()+0x470>
    dce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    dce6:	eef4 7ac7 	vcmpe.f32	s15, s14
    dcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dcee:	d942      	bls.n	dd76 <Goto::poll()+0x4f6>
      axis2.setFrequencyScale(slowdownFactor2a);
    dcf0:	edd3 7a00 	vldr	s15, [r3]
    dcf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    dcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dcfc:	da50      	bge.n	dda0 <Goto::poll()+0x520>
      last_a2 = a2;
    dcfe:	ed82 6a00 	vstr	s12, [r2]
    dd02:	e5de      	b.n	d8c2 <Goto::poll()+0x42>
      stage = GG_WAYPOINT_HOME;
    dd04:	2303      	movs	r3, #3
      destination = home.getPosition(CR_MOUNT);
    dd06:	4602      	mov	r2, r0
    dd08:	493b      	ldr	r1, [pc, #236]	; (ddf8 <Goto::poll()+0x578>)
    dd0a:	a802      	add	r0, sp, #8
      stage = GG_WAYPOINT_HOME;
    dd0c:	7063      	strb	r3, [r4, #1]
      destination = home.getPosition(CR_MOUNT);
    dd0e:	f001 fb4b 	bl	f3a8 <Home::getPosition(CoordReturn)>
    dd12:	2258      	movs	r2, #88	; 0x58
    dd14:	a902      	add	r1, sp, #8
    dd16:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dd1a:	f00a fbd7 	bl	184cc <memcpy>
      startAutoSlew();
    dd1e:	4620      	mov	r0, r4
    dd20:	f7ff fc5e 	bl	d5e0 <Goto::startAutoSlew()>
    dd24:	e5c7      	b.n	d8b6 <Goto::poll()+0x36>
      if (slowdownFactor2a < 0.2F) slowdownFactor2a = 0.2F;
    dd26:	ed9f 7a35 	vldr	s14, [pc, #212]	; ddfc <Goto::poll()+0x57c>
    dd2a:	eef4 6ac7 	vcmpe.f32	s13, s14
    dd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dd32:	d5d1      	bpl.n	dcd8 <Goto::poll()+0x458>
    dd34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    dd38:	ed83 7a00 	vstr	s14, [r3]
    dd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dd40:	dacf      	bge.n	dce2 <Goto::poll()+0x462>
      axis2.setFrequencyScale(slowdownFactor2a);
    dd42:	eef0 7a47 	vmov.f32	s15, s14
    dd46:	edc5 7a24 	vstr	s15, [r5, #144]	; 0x90
    dd4a:	e7d8      	b.n	dcfe <Goto::poll()+0x47e>
      if (slowdownFactor < 0.2F) slowdownFactor = 0.2F;
    dd4c:	eddf 7a2b 	vldr	s15, [pc, #172]	; ddfc <Goto::poll()+0x57c>
    dd50:	eeb4 7a67 	vcmp.f32	s14, s15
    dd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dd58:	bf48      	it	mi
    dd5a:	eeb0 7a67 	vmovmi.f32	s14, s15
    dd5e:	e768      	b.n	dc32 <Goto::poll()+0x3b2>
      if (slowdownFactor1a < 0.2F) slowdownFactor1a = 0.2F;
    dd60:	eddf 6a26 	vldr	s13, [pc, #152]	; ddfc <Goto::poll()+0x57c>
    dd64:	eef4 7ae6 	vcmpe.f32	s15, s13
    dd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dd6c:	d48e      	bmi.n	dc8c <Goto::poll()+0x40c>
    dd6e:	e791      	b.n	dc94 <Goto::poll()+0x414>
      float slowdownFactor1 = 1.0F;
    dd70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    dd74:	e76a      	b.n	dc4c <Goto::poll()+0x3cc>
    dd76:	edc6 7a24 	vstr	s15, [r6, #144]	; 0x90
    dd7a:	e7b9      	b.n	dcf0 <Goto::poll()+0x470>
        stage = GG_DESTINATION;
    dd7c:	2308      	movs	r3, #8
    dd7e:	7063      	strb	r3, [r4, #1]
    dd80:	e599      	b.n	d8b6 <Goto::poll()+0x36>
        if (stage == GG_ABORT) park.requestAborted(); else park.requestDone();
    dd82:	7863      	ldrb	r3, [r4, #1]
    dd84:	2b01      	cmp	r3, #1
    dd86:	d018      	beq.n	ddba <Goto::poll()+0x53a>
    dd88:	f003 ff16 	bl	11bb8 <Park::requestDone()>
    dd8c:	e6a1      	b.n	dad2 <Goto::poll()+0x252>
        if (stage == GG_ABORT) home.requestAborted(); else home.requestDone();
    dd8e:	7863      	ldrb	r3, [r4, #1]
    dd90:	2b01      	cmp	r3, #1
    dd92:	d015      	beq.n	ddc0 <Goto::poll()+0x540>
    dd94:	f001 fda2 	bl	f8dc <Home::requestDone()>
    dd98:	e6a0      	b.n	dadc <Goto::poll()+0x25c>
    dd9a:	f006 fecf 	bl	14b3c <Status::wake()>
    dd9e:	e6a4      	b.n	daea <Goto::poll()+0x26a>
    dda0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    dda4:	eef4 7ac7 	vcmpe.f32	s15, s14
    dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ddac:	d8a7      	bhi.n	dcfe <Goto::poll()+0x47e>
    ddae:	e7ca      	b.n	dd46 <Goto::poll()+0x4c6>
        if (transform.mountType == ALTAZM) transform.equToHor(&nearTarget); else
    ddb0:	a91c      	add	r1, sp, #112	; 0x70
    ddb2:	4628      	mov	r0, r5
    ddb4:	f7fd fab8 	bl	b328 <Transform::equToHor(Coordinate*)>
    ddb8:	e603      	b.n	d9c2 <Goto::poll()+0x142>
        if (stage == GG_ABORT) park.requestAborted(); else park.requestDone();
    ddba:	f003 fed5 	bl	11b68 <Park::requestAborted()>
    ddbe:	e688      	b.n	dad2 <Goto::poll()+0x252>
        if (stage == GG_ABORT) home.requestAborted(); else home.requestDone();
    ddc0:	f001 fae8 	bl	f394 <Home::requestAborted()>
    ddc4:	e68a      	b.n	dadc <Goto::poll()+0x25c>
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
    ddc6:	a91c      	add	r1, sp, #112	; 0x70
    ddc8:	4628      	mov	r0, r5
    ddca:	f7fd faad 	bl	b328 <Transform::equToHor(Coordinate*)>
    ddce:	a91c      	add	r1, sp, #112	; 0x70
    ddd0:	4628      	mov	r0, r5
    ddd2:	f7fd fc35 	bl	b640 <Transform::horToAa(Coordinate*)>
    ddd6:	e5f4      	b.n	d9c2 <Goto::poll()+0x142>
    ddd8:	1a63c1f8 	.word	0x1a63c1f8
    dddc:	404ca5dc 	.word	0x404ca5dc
    dde0:	200054e0 	.word	0x200054e0
    dde4:	20005cf4 	.word	0x20005cf4
    dde8:	20005804 	.word	0x20005804
    ddec:	20003e28 	.word	0x20003e28
    ddf0:	3a79096c 	.word	0x3a79096c
    ddf4:	20003e2c 	.word	0x20003e2c
    ddf8:	20005478 	.word	0x20005478
    ddfc:	3e4ccccd 	.word	0x3e4ccccd

0000de00 <gotoWrapper()>:
inline void gotoWrapper() { goTo.poll(); }
    de00:	4801      	ldr	r0, [pc, #4]	; (de08 <gotoWrapper()+0x8>)
    de02:	f7ff bd3d 	b.w	d880 <Goto::poll()>
    de06:	bf00      	nop
    de08:	20005270 	.word	0x20005270
    de0c:	00000000 	.word	0x00000000

0000de10 <Goto::updateAccelerationRates()>:
#endif

// update acceleration rates for goto and guiding
void Goto::updateAccelerationRates() {
    de10:	b570      	push	{r4, r5, r6, lr}
    inline double getStepsPerMeasure() { return settings.stepsPerMeasure; }
    de12:	4d29      	ldr	r5, [pc, #164]	; (deb8 <Goto::updateAccelerationRates()+0xa8>)
    de14:	4604      	mov	r4, r0
  radsPerSecondCurrent = (1000000.0F/settings.usPerStepCurrent)/(float)axis1.getStepsPerMeasure();
    de16:	eddf 6a29 	vldr	s13, [pc, #164]	; debc <Goto::updateAccelerationRates()+0xac>
    de1a:	68ab      	ldr	r3, [r5, #8]
    de1c:	686a      	ldr	r2, [r5, #4]
    float secondsToAccelerate = (degToRadF((float)(5.0F))/radsPerSecondCurrent)*2.0F;
    float secondsToAccelerateAbort = (degToRadF((float)(2.0F))/radsPerSecondCurrent)*2.0F;
  #endif
  axis1.setSlewAccelerationRate(radsPerSecondCurrent/secondsToAccelerate);
  axis1.setSlewAccelerationRateAbort(radsPerSecondCurrent/secondsToAccelerateAbort);
  axis2.setSlewAccelerationRate(radsPerSecondCurrent/secondsToAccelerate);
    de1e:	4e28      	ldr	r6, [pc, #160]	; (dec0 <Goto::updateAccelerationRates()+0xb0>)
void Goto::updateAccelerationRates() {
    de20:	ed2d 8b02 	vpush	{d8}
  radsPerSecondCurrent = (1000000.0F/settings.usPerStepCurrent)/(float)axis1.getStepsPerMeasure();
    de24:	f8d0 1202 	ldr.w	r1, [r0, #514]	; 0x202
  axis1.setSlewAccelerationRate(radsPerSecondCurrent/secondsToAccelerate);
    de28:	4628      	mov	r0, r5
  radsPerSecondCurrent = (1000000.0F/settings.usPerStepCurrent)/(float)axis1.getStepsPerMeasure();
    de2a:	ec43 2b17 	vmov	d7, r2, r3
    de2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    de32:	ee07 1a10 	vmov	s14, r1
    de36:	ee86 7a87 	vdiv.f32	s14, s13, s14
    float secondsToAccelerate = (degToRadF((float)(SLEW_ACCELERATION_DIST))/radsPerSecondCurrent)*2.0F;
    de3a:	ed9f 3b1b 	vldr	d3, [pc, #108]	; dea8 <Goto::updateAccelerationRates()+0x98>
    float secondsToAccelerateAbort = (degToRadF((float)(SLEW_RAPID_STOP_DIST))/radsPerSecondCurrent)*2.0F;
    de3e:	ed9f 4b1c 	vldr	d4, [pc, #112]	; deb0 <Goto::updateAccelerationRates()+0xa0>
  radsPerSecondCurrent = (1000000.0F/settings.usPerStepCurrent)/(float)axis1.getStepsPerMeasure();
    de42:	ee87 0a27 	vdiv.f32	s0, s14, s15
    float secondsToAccelerate = (degToRadF((float)(SLEW_ACCELERATION_DIST))/radsPerSecondCurrent)*2.0F;
    de46:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
  radsPerSecondCurrent = (1000000.0F/settings.usPerStepCurrent)/(float)axis1.getStepsPerMeasure();
    de4a:	ed84 0a7a 	vstr	s0, [r4, #488]	; 0x1e8
  rate = radsPerSecondCurrent;
    de4e:	ed84 0a01 	vstr	s0, [r4, #4]
    float secondsToAccelerate = (degToRadF((float)(SLEW_ACCELERATION_DIST))/radsPerSecondCurrent)*2.0F;
    de52:	ee83 6b05 	vdiv.f64	d6, d3, d5
    float secondsToAccelerateAbort = (degToRadF((float)(SLEW_RAPID_STOP_DIST))/radsPerSecondCurrent)*2.0F;
    de56:	ee84 7b05 	vdiv.f64	d7, d4, d5
    float secondsToAccelerate = (degToRadF((float)(SLEW_ACCELERATION_DIST))/radsPerSecondCurrent)*2.0F;
    de5a:	ee36 6b06 	vadd.f64	d6, d6, d6
    de5e:	eef7 8bc6 	vcvt.f32.f64	s17, d6
    float secondsToAccelerateAbort = (degToRadF((float)(SLEW_RAPID_STOP_DIST))/radsPerSecondCurrent)*2.0F;
    de62:	ee37 7b07 	vadd.f64	d7, d7, d7
  axis1.setSlewAccelerationRate(radsPerSecondCurrent/secondsToAccelerate);
    de66:	ee80 0a28 	vdiv.f32	s0, s0, s17
    float secondsToAccelerateAbort = (degToRadF((float)(SLEW_RAPID_STOP_DIST))/radsPerSecondCurrent)*2.0F;
    de6a:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  axis1.setSlewAccelerationRate(radsPerSecondCurrent/secondsToAccelerate);
    de6e:	f7f3 fa29 	bl	12c4 <Axis::setSlewAccelerationRate(float)>
  axis1.setSlewAccelerationRateAbort(radsPerSecondCurrent/secondsToAccelerateAbort);
    de72:	ed94 0a7a 	vldr	s0, [r4, #488]	; 0x1e8
    de76:	4628      	mov	r0, r5
    de78:	ee80 0a08 	vdiv.f32	s0, s0, s16
    de7c:	f7f3 fa3c 	bl	12f8 <Axis::setSlewAccelerationRateAbort(float)>
  axis2.setSlewAccelerationRate(radsPerSecondCurrent/secondsToAccelerate);
    de80:	ed94 0a7a 	vldr	s0, [r4, #488]	; 0x1e8
    de84:	4630      	mov	r0, r6
    de86:	ee80 0a28 	vdiv.f32	s0, s0, s17
    de8a:	f7f3 fa1b 	bl	12c4 <Axis::setSlewAccelerationRate(float)>
  axis2.setSlewAccelerationRateAbort(radsPerSecondCurrent/secondsToAccelerateAbort);
    de8e:	ed94 0a7a 	vldr	s0, [r4, #488]	; 0x1e8
    de92:	4630      	mov	r0, r6
    de94:	ee80 0a08 	vdiv.f32	s0, s0, s16
}
    de98:	ecbd 8b02 	vpop	{d8}
    de9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  axis2.setSlewAccelerationRateAbort(radsPerSecondCurrent/secondsToAccelerateAbort);
    dea0:	f7f3 ba2a 	b.w	12f8 <Axis::setSlewAccelerationRateAbort(float)>
    dea4:	f3af 8000 	nop.w
    dea8:	468741a1 	.word	0x468741a1
    deac:	3fa65718 	.word	0x3fa65718
    deb0:	ee3be85b 	.word	0xee3be85b
    deb4:	3f9acee9 	.word	0x3f9acee9
    deb8:	200050e8 	.word	0x200050e8
    debc:	49742400 	.word	0x49742400
    dec0:	200051a8 	.word	0x200051a8

0000dec4 <Goto::usPerStepLowerLimit()>:

// estimate average microseconds per step lower limit
float Goto::usPerStepLowerLimit() {
    dec4:	b508      	push	{r3, lr}
    inline int getStepsPerStepSlewing() { return motor->getStepsPerStepSlewing(); }
    dec6:	4b14      	ldr	r3, [pc, #80]	; (df18 <Goto::usPerStepLowerLimit()+0x54>)
    dec8:	6818      	ldr	r0, [r3, #0]
    deca:	6803      	ldr	r3, [r0, #0]
    decc:	ed2d 8b02 	vpush	{d8}
    ded0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ded2:	4798      	blx	r3
    ded4:	4b11      	ldr	r3, [pc, #68]	; (df1c <Goto::usPerStepLowerLimit()+0x58>)
    ded6:	ee08 0a10 	vmov	s16, r0
    deda:	6818      	ldr	r0, [r3, #0]
    dedc:	6803      	ldr	r3, [r0, #0]
    dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dee0:	4798      	blx	r3
    r_us /= 1.6F;
  #endif

  // average required goto us rates for each axis with any micro-step mode switching applied
  float r_us_axis1 = r_us/axis1.getStepsPerStepSlewing();
  float r_us_axis2 = r_us/axis2.getStepsPerStepSlewing();
    dee2:	ee07 0a90 	vmov	s15, r0
  float r_us_axis1 = r_us/axis1.getStepsPerStepSlewing();
    dee6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    deea:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  float r_us_axis2 = r_us/axis2.getStepsPerStepSlewing();
    deee:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  // average in axis2 step rate scaling for drives where the reduction ratio isn't equal
  r_us = (1.0F/(1.0F/r_us_axis1 + 1.0F/r_us_axis2))*2.0F;
    def2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  float r_us_axis1 = r_us/axis1.getStepsPerStepSlewing();
    def6:	eec6 5a88 	vdiv.f32	s11, s13, s16
  float r_us_axis2 = r_us/axis2.getStepsPerStepSlewing();
    defa:	ee86 6aa7 	vdiv.f32	s12, s13, s15

  // return rate in us units
  return r_us;
}
    defe:	ecbd 8b02 	vpop	{d8}
  r_us = (1.0F/(1.0F/r_us_axis1 + 1.0F/r_us_axis2))*2.0F;
    df02:	eec7 7a25 	vdiv.f32	s15, s14, s11
    df06:	eec7 6a06 	vdiv.f32	s13, s14, s12
    df0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    df0e:	ee87 0a27 	vdiv.f32	s0, s14, s15
}
    df12:	ee30 0a00 	vadd.f32	s0, s0, s0
    df16:	bd08      	pop	{r3, pc}
    df18:	200050e8 	.word	0x200050e8
    df1c:	200051a8 	.word	0x200051a8

0000df20 <Goto::init()>:
    inline bool hasValidKey() { return keyMatches; }
    df20:	4b47      	ldr	r3, [pc, #284]	; (e040 <Goto::init()+0x120>)
  if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_GOTO_BASE, sizeof(GotoSettings))) {
    df22:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
void Goto::init() {
    df26:	b5d0      	push	{r4, r6, r7, lr}
    df28:	4604      	mov	r4, r0
    df2a:	ed2d 8b02 	vpush	{d8}
    df2e:	b082      	sub	sp, #8
  if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_GOTO_BASE, sizeof(GotoSettings))) {
    df30:	b132      	cbz	r2, df40 <Goto::init()+0x20>
    df32:	2206      	movs	r2, #6
    df34:	21bf      	movs	r1, #191	; 0xbf
    df36:	4618      	mov	r0, r3
    df38:	f7f7 f854 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
    df3c:	2800      	cmp	r0, #0
    df3e:	d069      	beq.n	e014 <Goto::init()+0xf4>
    nv.writeBytes(NV_MOUNT_GOTO_BASE, &settings, sizeof(GotoSettings));
    df40:	f504 7200 	add.w	r2, r4, #512	; 0x200
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
    df44:	2306      	movs	r3, #6
    df46:	21bf      	movs	r1, #191	; 0xbf
    df48:	483d      	ldr	r0, [pc, #244]	; (e040 <Goto::init()+0x120>)
    df4a:	9201      	str	r2, [sp, #4]
    df4c:	f7f7 f88e 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    df50:	9a01      	ldr	r2, [sp, #4]
  nv.readBytes(NV_MOUNT_GOTO_BASE, &settings, sizeof(GotoSettings));
    df52:	2306      	movs	r3, #6
    df54:	21bf      	movs	r1, #191	; 0xbf
    df56:	483a      	ldr	r0, [pc, #232]	; (e040 <Goto::init()+0x120>)
    df58:	f7f7 f85e 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  if (MFLIP_AUTOMATIC_MEMORY != ON || !transform.meridianFlips) settings.meridianFlipAuto = (MFLIP_AUTOMATIC_DEFAULT == ON);
    df5c:	f8b4 3200 	ldrh.w	r3, [r4, #512]	; 0x200
    inline double getStepsPerMeasure() { return settings.stepsPerMeasure; }
    df60:	4a38      	ldr	r2, [pc, #224]	; (e044 <Goto::init()+0x124>)
    usPerStepBase = 1000000.0F/((axis1.getStepsPerMeasure()/RAD_DEG_RATIO)*SLEW_RATE_BASE_DESIRED);
    df62:	eeb0 7b04 	vmov.f64	d7, #4	; 0x40200000  2.5
  if (MFLIP_AUTOMATIC_MEMORY != ON || !transform.meridianFlips) settings.meridianFlipAuto = (MFLIP_AUTOMATIC_DEFAULT == ON);
    df66:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
  if (usPerStepBase < usPerStepLowerLimit()) usPerStepBase = usPerStepLowerLimit()*2.0F;
    df6a:	4620      	mov	r0, r4
    df6c:	6856      	ldr	r6, [r2, #4]
  if (MFLIP_AUTOMATIC_MEMORY != ON || !transform.meridianFlips) settings.meridianFlipAuto = (MFLIP_AUTOMATIC_DEFAULT == ON);
    df6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    usPerStepBase = 1000000.0F/((axis1.getStepsPerMeasure()/RAD_DEG_RATIO)*SLEW_RATE_BASE_DESIRED);
    df72:	ed9f 4b2f 	vldr	d4, [pc, #188]	; e030 <Goto::init()+0x110>
  if (MFLIP_AUTOMATIC_MEMORY != ON || !transform.meridianFlips) settings.meridianFlipAuto = (MFLIP_AUTOMATIC_DEFAULT == ON);
    df76:	f8a4 3200 	strh.w	r3, [r4, #512]	; 0x200
    df7a:	6897      	ldr	r7, [r2, #8]
    usPerStepBase = 1000000.0F/((axis1.getStepsPerMeasure()/RAD_DEG_RATIO)*SLEW_RATE_BASE_DESIRED);
    df7c:	ec47 6b16 	vmov	d6, r6, r7
    df80:	ee86 6b04 	vdiv.f64	d6, d6, d4
    df84:	ed9f 5b2c 	vldr	d5, [pc, #176]	; e038 <Goto::init()+0x118>
    df88:	ee26 6b07 	vmul.f64	d6, d6, d7
    df8c:	ee85 8b06 	vdiv.f64	d8, d5, d6
    df90:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
    df94:	ed84 8a79 	vstr	s16, [r4, #484]	; 0x1e4
  if (usPerStepBase < usPerStepLowerLimit()) usPerStepBase = usPerStepLowerLimit()*2.0F;
    df98:	f7ff ff94 	bl	dec4 <Goto::usPerStepLowerLimit()>
    df9c:	eeb4 8ac0 	vcmpe.f32	s16, s0
    dfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dfa4:	d439      	bmi.n	e01a <Goto::init()+0xfa>
  if (settings.usPerStepCurrent > 1000000.0F) settings.usPerStepCurrent = usPerStepBase;
    dfa6:	ed94 0a79 	vldr	s0, [r4, #484]	; 0x1e4
    dfaa:	f8d4 3202 	ldr.w	r3, [r4, #514]	; 0x202
    dfae:	ed9f 7a26 	vldr	s14, [pc, #152]	; e048 <Goto::init()+0x128>
    dfb2:	ee07 3a90 	vmov	s15, r3
    dfb6:	eef4 7ac7 	vcmpe.f32	s15, s14
    dfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dfbe:	dd05      	ble.n	dfcc <Goto::init()+0xac>
    dfc0:	eef0 7a40 	vmov.f32	s15, s0
    dfc4:	ee10 3a10 	vmov	r3, s0
    dfc8:	f8c4 3202 	str.w	r3, [r4, #514]	; 0x202
  if (settings.usPerStepCurrent < usPerStepBase/2.0F) settings.usPerStepCurrent = usPerStepBase/2.0F;
    dfcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    dfd0:	ee20 7a07 	vmul.f32	s14, s0, s14
    dfd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    dfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dfdc:	dd05      	ble.n	dfea <Goto::init()+0xca>
    dfde:	eef0 7a47 	vmov.f32	s15, s14
    dfe2:	ee17 3a10 	vmov	r3, s14
    dfe6:	f8c4 3202 	str.w	r3, [r4, #514]	; 0x202
  if (settings.usPerStepCurrent > usPerStepBase*2.0F) settings.usPerStepCurrent = usPerStepBase*2.0F;
    dfea:	ee30 0a00 	vadd.f32	s0, s0, s0
    dfee:	eeb4 0ae7 	vcmpe.f32	s0, s15
    dff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dff6:	d503      	bpl.n	e000 <Goto::init()+0xe0>
    dff8:	ee10 3a10 	vmov	r3, s0
    dffc:	f8c4 3202 	str.w	r3, [r4, #514]	; 0x202
      AXIS1_TARGET_TOLERANCE != 0.0F || AXIS2_TARGET_TOLERANCE != 0.0F || absoluteEncodersPresent) encodersPresent = true;
    e000:	2301      	movs	r3, #1
  updateAccelerationRates();
    e002:	4620      	mov	r0, r4
      AXIS1_TARGET_TOLERANCE != 0.0F || AXIS2_TARGET_TOLERANCE != 0.0F || absoluteEncodersPresent) encodersPresent = true;
    e004:	72a3      	strb	r3, [r4, #10]
}
    e006:	b002      	add	sp, #8
    e008:	ecbd 8b02 	vpop	{d8}
    e00c:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
  updateAccelerationRates();
    e010:	f7ff befe 	b.w	de10 <Goto::updateAccelerationRates()>
    nv.writeBytes(NV_MOUNT_GOTO_BASE, &settings, sizeof(GotoSettings));
    e014:	f504 7200 	add.w	r2, r4, #512	; 0x200
    e018:	e79b      	b.n	df52 <Goto::init()+0x32>
  if (usPerStepBase < usPerStepLowerLimit()) usPerStepBase = usPerStepLowerLimit()*2.0F;
    e01a:	4620      	mov	r0, r4
    e01c:	f7ff ff52 	bl	dec4 <Goto::usPerStepLowerLimit()>
    e020:	ee30 0a00 	vadd.f32	s0, s0, s0
    e024:	ed84 0a79 	vstr	s0, [r4, #484]	; 0x1e4
    e028:	e7bf      	b.n	dfaa <Goto::init()+0x8a>
    e02a:	bf00      	nop
    e02c:	f3af 8000 	nop.w
    e030:	1a63c1f8 	.word	0x1a63c1f8
    e034:	404ca5dc 	.word	0x404ca5dc
    e038:	00000000 	.word	0x00000000
    e03c:	412e8480 	.word	0x412e8480
    e040:	20005e50 	.word	0x20005e50
    e044:	200050e8 	.word	0x200050e8
    e048:	49742400 	.word	0x49742400

0000e04c <_GLOBAL__sub_I__ZN4Goto4initEv>:

Goto goTo;
    e04c:	b538      	push	{r3, r4, r5, lr}
class Goto {
    e04e:	4c1a      	ldr	r4, [pc, #104]	; (e0b8 <_GLOBAL__sub_I__ZN4Goto4initEv+0x6c>)
    e050:	2500      	movs	r5, #0
    e052:	2301      	movs	r3, #1
    e054:	2258      	movs	r2, #88	; 0x58
    e056:	4629      	mov	r1, r5
    e058:	f104 0010 	add.w	r0, r4, #16
    e05c:	8123      	strh	r3, [r4, #8]
    e05e:	8025      	strh	r5, [r4, #0]
    e060:	72a5      	strb	r5, [r4, #10]
    e062:	f011 f8c5 	bl	1f1f0 <memset>
    e066:	2258      	movs	r2, #88	; 0x58
    e068:	4629      	mov	r1, r5
    e06a:	f504 708c 	add.w	r0, r4, #280	; 0x118
    e06e:	f011 f8bf 	bl	1f1f0 <memset>
    e072:	2258      	movs	r2, #88	; 0x58
    e074:	4629      	mov	r1, r5
    e076:	f504 70b8 	add.w	r0, r4, #368	; 0x170
    e07a:	f011 f8b9 	bl	1f1f0 <memset>
    e07e:	2000      	movs	r0, #0
    e080:	2100      	movs	r1, #0
    e082:	4b0e      	ldr	r3, [pc, #56]	; (e0bc <_GLOBAL__sub_I__ZN4Goto4initEv+0x70>)
    e084:	f04f 4286 	mov.w	r2, #1124073472	; 0x43000000
    e088:	f8a4 51c8 	strh.w	r5, [r4, #456]	; 0x1c8
    e08c:	f884 51ca 	strb.w	r5, [r4, #458]	; 0x1ca
    e090:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
    e094:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
    e098:	e9c4 017c 	strd	r0, r1, [r4, #496]	; 0x1f0
    e09c:	e9c4 017e 	strd	r0, r1, [r4, #504]	; 0x1f8
    e0a0:	e893 0003 	ldmia.w	r3, {r0, r1}
    e0a4:	e9c4 5574 	strd	r5, r5, [r4, #464]	; 0x1d0
    e0a8:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
    e0ac:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    e0b0:	f8a4 1204 	strh.w	r1, [r4, #516]	; 0x204
    e0b4:	bd38      	pop	{r3, r4, r5, pc}
    e0b6:	bf00      	nop
    e0b8:	20005270 	.word	0x20005270
    e0bc:	20001e38 	.word	0x20001e38

0000e0c0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "../../../lib/tasks/OnTask.h"

#include "../site/Site.h"
#include "../goto/Goto.h"

bool Guide::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0c4:	ed2d 8b02 	vpush	{d8}
    e0c8:	b082      	sub	sp, #8
    e0ca:	461d      	mov	r5, r3
  *supressFrame = false;
    e0cc:	f04f 0800 	mov.w	r8, #0
bool Guide::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    e0d0:	4614      	mov	r4, r2
    e0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0d4:	4606      	mov	r6, r0
  *supressFrame = false;
    e0d6:	f883 8000 	strb.w	r8, [r3]
  
  // :GX90#     Get setting pulse guide rate
  //            Returns: n.nn#
  if (command[0] == 'G' && command[1] == 'X' && parameter[0] == '9' && parameter[1] == '0' && parameter[2] == 0) {
    e0da:	7813      	ldrb	r3, [r2, #0]
    e0dc:	2b47      	cmp	r3, #71	; 0x47
    e0de:	d03c      	beq.n	e15a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9a>
    sprintF(reply, "%0.2f", rateSelectToRate(settings.pulseRateSelect));
    *numericReply = false;
  } else

  // M - Telescope Movement (Guiding) Commands
  if (command[0] == 'M') {
    e0e0:	2b4d      	cmp	r3, #77	; 0x4d
    e0e2:	d123      	bne.n	e12c <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c>
    // :Mgd[n]#   Pulse guide command where n is the guide time in milliseconds
    //            Returns: Nothing
    // :MGd[n]#   Pulse guide command where n is the guide time in milliseconds
    //            Return: 0 on failure
    //                    1 on success
    if (command[1] == 'g' || command[1] == 'G') {
    e0e4:	7853      	ldrb	r3, [r2, #1]
    e0e6:	f003 02df 	and.w	r2, r3, #223	; 0xdf
    e0ea:	2a47      	cmp	r2, #71	; 0x47
    e0ec:	f000 80a6 	beq.w	e23c <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x17c>
      } else *commandError = CE_PARAM_FORM;
    } else

    // :Mw#       Move Telescope West at current guide rate
    //            Returns: Nothing
    if (command[1] == 'w' && parameter[0] == 0) {
    e0f0:	2b77      	cmp	r3, #119	; 0x77
    e0f2:	d06d      	beq.n	e1d0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x110>
      *commandError = startAxis1(GA_FORWARD, settings.axis1RateSelect, GUIDE_TIME_LIMIT*1000);
      *numericReply = false;
    } else
    // :Me#       Move Telescope East at current guide rate
    //            Returns: Nothing
    if (command[1] == 'e' && parameter[0] == 0) {
    e0f4:	2b65      	cmp	r3, #101	; 0x65
    e0f6:	d07f      	beq.n	e1f8 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x138>
      *commandError = startAxis1(GA_REVERSE, settings.axis1RateSelect, GUIDE_TIME_LIMIT*1000);
      *numericReply = false;
    } else
    // :Mn#       Move Telescope North at current guide rate
    //            Returns: Nothing
    if (command[1] == 'n' && parameter[0] == 0) {
    e0f8:	2b6e      	cmp	r3, #110	; 0x6e
    e0fa:	f000 80d7 	beq.w	e2ac <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ec>
      *commandError = startAxis2(GA_FORWARD, settings.axis2RateSelect, GUIDE_TIME_LIMIT*1000);
      *numericReply = false;
    } else
    // :Ms#       Move Telescope South at current guide rate
    //            Returns: Nothing
    if (command[1] == 's' && parameter[0] == 0) {
    e0fe:	2b73      	cmp	r3, #115	; 0x73
    e100:	f000 80e9 	beq.w	e2d6 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x216>
      *commandError = startAxis2(GA_REVERSE, settings.axis2RateSelect, GUIDE_TIME_LIMIT*1000);
      *numericReply = false;
    } else
    // :Mp#       Move Telescope for sPiral search at current guide rate
    //            Returns: Nothing
    if (command[1] == 'p' && parameter[0] == 0) {
    e104:	2b70      	cmp	r3, #112	; 0x70
    e106:	d12b      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    e108:	782d      	ldrb	r5, [r5, #0]
    e10a:	bb4d      	cbnz	r5, e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      *commandError = startSpiral(settings.axis1RateSelect, GUIDE_SPIRAL_TIME_LIMIT*1000);
    e10c:	4ab4      	ldr	r2, [pc, #720]	; (e3e0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>)
    e10e:	7b41      	ldrb	r1, [r0, #13]
    e110:	f001 f864 	bl	f1dc <Guide::startSpiral(GuideRateSelect, unsigned long)>
    e114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      } else *commandError = CE_PARAM_RANGE;
      *numericReply = false; 
    } else return false;
  } else return false;

  return true;
    e116:	f04f 0801 	mov.w	r8, #1
      *commandError = startSpiral(settings.axis1RateSelect, GUIDE_SPIRAL_TIME_LIMIT*1000);
    e11a:	7018      	strb	r0, [r3, #0]
}
    e11c:	4640      	mov	r0, r8
      *numericReply = false;
    e11e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e120:	701d      	strb	r5, [r3, #0]
}
    e122:	b002      	add	sp, #8
    e124:	ecbd 8b02 	vpop	{d8}
    e128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (command[0] == 'Q') {
    e12c:	2b51      	cmp	r3, #81	; 0x51
    e12e:	d11d      	bne.n	e16c <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xac>
    if (command[1] == 0) {
    e130:	7857      	ldrb	r7, [r2, #1]
    e132:	2f00      	cmp	r7, #0
    e134:	d055      	beq.n	e1e2 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x122>
    if ((command[1] == 'e' || command[1] == 'w') && parameter[0] == 0) {
    e136:	2f77      	cmp	r7, #119	; 0x77
    e138:	bf18      	it	ne
    e13a:	2f65      	cmpne	r7, #101	; 0x65
    e13c:	bf0c      	ite	eq
    e13e:	2601      	moveq	r6, #1
    e140:	2600      	movne	r6, #0
    e142:	f040 809e 	bne.w	e282 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c2>
    e146:	782d      	ldrb	r5, [r5, #0]
    e148:	b955      	cbnz	r5, e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      stopAxis1();
    e14a:	462a      	mov	r2, r5
    e14c:	2101      	movs	r1, #1
    e14e:	f000 f9f1 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
      *numericReply = false;
    e152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return true;
    e154:	46b0      	mov	r8, r6
      *numericReply = false;
    e156:	701d      	strb	r5, [r3, #0]
    e158:	e002      	b.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
  if (command[0] == 'G' && command[1] == 'X' && parameter[0] == '9' && parameter[1] == '0' && parameter[2] == 0) {
    e15a:	7853      	ldrb	r3, [r2, #1]
    e15c:	2b58      	cmp	r3, #88	; 0x58
    e15e:	d054      	beq.n	e20a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x14a>
}
    e160:	4640      	mov	r0, r8
    e162:	b002      	add	sp, #8
    e164:	ecbd 8b02 	vpop	{d8}
    e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (command[0] == 'R') {
    e16c:	2b52      	cmp	r3, #82	; 0x52
    e16e:	d1f7      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      float maxDegsPerSec = radToDegF(goTo.rate);
    e170:	4b9c      	ldr	r3, [pc, #624]	; (e3e4 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x324>)
    if (command[1] == 'A') {
    e172:	7857      	ldrb	r7, [r2, #1]
      float maxDegsPerSec = radToDegF(goTo.rate);
    e174:	ed9f 7a9c 	vldr	s14, [pc, #624]	; e3e8 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x328>
    e178:	edd3 7a01 	vldr	s15, [r3, #4]
    if (command[1] == 'A') {
    e17c:	2f41      	cmp	r7, #65	; 0x41
      float maxDegsPerSec = radToDegF(goTo.rate);
    e17e:	ee27 8a87 	vmul.f32	s16, s15, s14
    if (command[1] == 'A') {
    e182:	f000 80b2 	beq.w	e2ea <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22a>
    if (command[1] == 'E') {
    e186:	2f45      	cmp	r7, #69	; 0x45
    e188:	f000 8102 	beq.w	e390 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2d0>
    if (strchr("GCMFS0123456789", command[1]) && parameter[0] == 0) {
    e18c:	4639      	mov	r1, r7
    e18e:	4897      	ldr	r0, [pc, #604]	; (e3ec <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32c>)
    e190:	f011 f8a0 	bl	1f2d4 <strchr>
    e194:	2800      	cmp	r0, #0
    e196:	f000 811c 	beq.w	e3d2 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x312>
    e19a:	782b      	ldrb	r3, [r5, #0]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d1df      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      if (command[1] == 'G') r = 2; else
    e1a0:	f1a7 0343 	sub.w	r3, r7, #67	; 0x43
    e1a4:	2b10      	cmp	r3, #16
    e1a6:	f200 80cb 	bhi.w	e340 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x280>
    e1aa:	e8df f013 	tbh	[pc, r3, lsl #1]
    e1ae:	00e1      	.short	0x00e1
    e1b0:	00c900c9 	.word	0x00c900c9
    e1b4:	00d400ed 	.word	0x00d400ed
    e1b8:	00c900c9 	.word	0x00c900c9
    e1bc:	00c900c9 	.word	0x00c900c9
    e1c0:	00e900c9 	.word	0x00e900c9
    e1c4:	00c900c9 	.word	0x00c900c9
    e1c8:	00c900c9 	.word	0x00c900c9
    e1cc:	00e500c9 	.word	0x00e500c9
    if (command[1] == 'w' && parameter[0] == 0) {
    e1d0:	782d      	ldrb	r5, [r5, #0]
    e1d2:	2d00      	cmp	r5, #0
    e1d4:	d1c4      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      *commandError = startAxis1(GA_FORWARD, settings.axis1RateSelect, GUIDE_TIME_LIMIT*1000);
    e1d6:	4b86      	ldr	r3, [pc, #536]	; (e3f0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
    e1d8:	2102      	movs	r1, #2
    e1da:	7b42      	ldrb	r2, [r0, #13]
    e1dc:	f000 fc86 	bl	eaec <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)>
    e1e0:	e798      	b.n	e114 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x54>
          goTo.abort();
    e1e2:	4880      	ldr	r0, [pc, #512]	; (e3e4 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x324>)
  return true;
    e1e4:	f04f 0801 	mov.w	r8, #1
          goTo.abort();
    e1e8:	f7fe fde2 	bl	cdb0 <Goto::abort()>
        stop();
    e1ec:	4630      	mov	r0, r6
    e1ee:	f000 f9fd 	bl	e5ec <Guide::stop()>
        *numericReply = false;
    e1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e1f4:	701f      	strb	r7, [r3, #0]
    e1f6:	e7b3      	b.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    if (command[1] == 'e' && parameter[0] == 0) {
    e1f8:	782d      	ldrb	r5, [r5, #0]
    e1fa:	2d00      	cmp	r5, #0
    e1fc:	d1b0      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      *commandError = startAxis1(GA_REVERSE, settings.axis1RateSelect, GUIDE_TIME_LIMIT*1000);
    e1fe:	4b7c      	ldr	r3, [pc, #496]	; (e3f0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
    e200:	2103      	movs	r1, #3
    e202:	7b42      	ldrb	r2, [r0, #13]
    e204:	f000 fc72 	bl	eaec <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)>
    e208:	e784      	b.n	e114 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x54>
  if (command[0] == 'G' && command[1] == 'X' && parameter[0] == '9' && parameter[1] == '0' && parameter[2] == 0) {
    e20a:	782b      	ldrb	r3, [r5, #0]
    e20c:	2b39      	cmp	r3, #57	; 0x39
    e20e:	d1a7      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    e210:	786b      	ldrb	r3, [r5, #1]
    e212:	2b30      	cmp	r3, #48	; 0x30
    e214:	d1a4      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    e216:	78ad      	ldrb	r5, [r5, #2]
    e218:	2d00      	cmp	r5, #0
    e21a:	d1a1      	bne.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    sprintF(reply, "%0.2f", rateSelectToRate(settings.pulseRateSelect));
    e21c:	460f      	mov	r7, r1
    e21e:	2201      	movs	r2, #1
    e220:	7b01      	ldrb	r1, [r0, #12]
  return true;
    e222:	f04f 0801 	mov.w	r8, #1
    sprintF(reply, "%0.2f", rateSelectToRate(settings.pulseRateSelect));
    e226:	f000 fa2b 	bl	e680 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)>
    e22a:	4972      	ldr	r1, [pc, #456]	; (e3f4 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x334>)
    e22c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    e230:	4638      	mov	r0, r7
    e232:	f7f5 ff01 	bl	4038 <sprintF(char*, char const*, double)>
    *numericReply = false;
    e236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e238:	701d      	strb	r5, [r3, #0]
    e23a:	e791      	b.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      if (convert.atoi2(&parameter[1], &timeMs)) {
    e23c:	2301      	movs	r3, #1
    e23e:	aa01      	add	r2, sp, #4
    e240:	486d      	ldr	r0, [pc, #436]	; (e3f8 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x338>)
    e242:	18e9      	adds	r1, r5, r3
    e244:	f7f6 f906 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    e248:	2800      	cmp	r0, #0
    e24a:	d039      	beq.n	e2c0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x200>
        if (timeMs >= 0) {
    e24c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    e250:	2b00      	cmp	r3, #0
    e252:	db7c      	blt.n	e34e <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x28e>
          if (parameter[0] == 'w') {
    e254:	782a      	ldrb	r2, [r5, #0]
    e256:	2a77      	cmp	r2, #119	; 0x77
    e258:	f000 80d8 	beq.w	e40c <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x34c>
          if (parameter[0] == 'e') {
    e25c:	2a65      	cmp	r2, #101	; 0x65
    e25e:	f000 80db 	beq.w	e418 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x358>
          if (parameter[0] == 'n') {
    e262:	2a6e      	cmp	r2, #110	; 0x6e
    e264:	f000 80de 	beq.w	e424 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x364>
          if (parameter[0] == 's') {
    e268:	2a73      	cmp	r2, #115	; 0x73
    e26a:	f000 80e1 	beq.w	e430 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x370>
    e26e:	2002      	movs	r0, #2
            *commandError = startAxis1(GA_FORWARD, (GUIDE_SEPARATE_PULSE_RATE == ON) ? settings.pulseRateSelect : settings.axis1RateSelect, timeMs);
    e270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e272:	7018      	strb	r0, [r3, #0]
          if (command[1] == 'g') *numericReply = false;
    e274:	7863      	ldrb	r3, [r4, #1]
    e276:	2b67      	cmp	r3, #103	; 0x67
    e278:	d125      	bne.n	e2c6 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x206>
    e27a:	2300      	movs	r3, #0
    e27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e27e:	7013      	strb	r3, [r2, #0]
    e280:	e021      	b.n	e2c6 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x206>
    if ((command[1] == 'n' || command[1] == 's') && parameter[0] == 0) {
    e282:	2f73      	cmp	r7, #115	; 0x73
    e284:	bf18      	it	ne
    e286:	2f6e      	cmpne	r7, #110	; 0x6e
    e288:	bf0c      	ite	eq
    e28a:	f04f 0801 	moveq.w	r8, #1
    e28e:	f04f 0800 	movne.w	r8, #0
    e292:	f47f af65 	bne.w	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    e296:	782d      	ldrb	r5, [r5, #0]
    e298:	2d00      	cmp	r5, #0
    e29a:	f040 80b5 	bne.w	e408 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x348>
      stopAxis2();
    e29e:	462a      	mov	r2, r5
    e2a0:	2101      	movs	r1, #1
    e2a2:	f000 f975 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
      *numericReply = false;
    e2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e2a8:	701d      	strb	r5, [r3, #0]
    e2aa:	e759      	b.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    if (command[1] == 'n' && parameter[0] == 0) {
    e2ac:	782d      	ldrb	r5, [r5, #0]
    e2ae:	2d00      	cmp	r5, #0
    e2b0:	f47f af56 	bne.w	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      *commandError = startAxis2(GA_FORWARD, settings.axis2RateSelect, GUIDE_TIME_LIMIT*1000);
    e2b4:	4b4e      	ldr	r3, [pc, #312]	; (e3f0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
    e2b6:	2102      	movs	r1, #2
    e2b8:	7b82      	ldrb	r2, [r0, #14]
    e2ba:	f000 fd39 	bl	ed30 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)>
    e2be:	e729      	b.n	e114 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x54>
      } else *commandError = CE_PARAM_FORM;
    e2c0:	2305      	movs	r3, #5
    e2c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e2c4:	7013      	strb	r3, [r2, #0]
  return true;
    e2c6:	f04f 0801 	mov.w	r8, #1
}
    e2ca:	4640      	mov	r0, r8
    e2cc:	b002      	add	sp, #8
    e2ce:	ecbd 8b02 	vpop	{d8}
    e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (command[1] == 's' && parameter[0] == 0) {
    e2d6:	782d      	ldrb	r5, [r5, #0]
    e2d8:	2d00      	cmp	r5, #0
    e2da:	f47f af41 	bne.w	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      *commandError = startAxis2(GA_REVERSE, settings.axis2RateSelect, GUIDE_TIME_LIMIT*1000);
    e2de:	4b44      	ldr	r3, [pc, #272]	; (e3f0 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>)
    e2e0:	2103      	movs	r1, #3
    e2e2:	7b82      	ldrb	r2, [r0, #14]
    e2e4:	f000 fd24 	bl	ed30 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)>
    e2e8:	e714      	b.n	e114 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x54>
      float f = strtod(parameter, &conv_end);
    e2ea:	a901      	add	r1, sp, #4
    e2ec:	4628      	mov	r0, r5
    e2ee:	f010 fd3f 	bl	1ed70 <strtod>
      if (&parameter[0] != conv_end) {
    e2f2:	9b01      	ldr	r3, [sp, #4]
    e2f4:	42ab      	cmp	r3, r5
    e2f6:	d06e      	beq.n	e3d6 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x316>
      float f = strtod(parameter, &conv_end);
    e2f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        if (f < 0.0001F/3600.0F) f = 0.0001F/3600.0F;
    e2fc:	eddf 7a3f 	vldr	s15, [pc, #252]	; e3fc <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x33c>
        customRateAxis1 = f*240.0F;
    e300:	ed9f 7a3f 	vldr	s14, [pc, #252]	; e400 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x340>
        settings.axis1RateSelect = GR_CUSTOM;
    e304:	230a      	movs	r3, #10
        if (f < 0.0001F/3600.0F) f = 0.0001F/3600.0F;
    e306:	eeb4 0a67 	vcmp.f32	s0, s15
        settings.axis1RateSelect = GR_CUSTOM;
    e30a:	7373      	strb	r3, [r6, #13]
        if (f < 0.0001F/3600.0F) f = 0.0001F/3600.0F;
    e30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e310:	bf48      	it	mi
    e312:	eeb0 0a67 	vmovmi.f32	s0, s15
        if (f > maxDegsPerSec) f = maxDegsPerSec;
    e316:	eeb4 0a48 	vcmp.f32	s0, s16
    e31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e31e:	fe38 0a00 	vselgt.f32	s0, s16, s0
        customRateAxis1 = f*240.0F;
    e322:	ee20 0a07 	vmul.f32	s0, s0, s14
    e326:	ed86 0a05 	vstr	s0, [r6, #20]
  return true;
    e32a:	f04f 0801 	mov.w	r8, #1
      *numericReply = false; 
    e32e:	2300      	movs	r3, #0
    e330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
}
    e332:	4640      	mov	r0, r8
      *numericReply = false; 
    e334:	7013      	strb	r3, [r2, #0]
}
    e336:	b002      	add	sp, #8
    e338:	ecbd 8b02 	vpop	{d8}
    e33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (command[1] == 'S') r = 8; else r = command[1] - '0';
    e340:	3f30      	subs	r7, #48	; 0x30
      if (r >= 0 && r <= 9) { 
    e342:	2f09      	cmp	r7, #9
    e344:	d97a      	bls.n	e43c <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37c>
      } else *commandError = CE_PARAM_RANGE;
    e346:	2304      	movs	r3, #4
    e348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e34a:	7013      	strb	r3, [r2, #0]
    e34c:	e7ed      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
        } else *commandError = CE_PARAM_RANGE;
    e34e:	2304      	movs	r3, #4
    e350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e352:	7013      	strb	r3, [r2, #0]
    e354:	e7b7      	b.n	e2c6 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x206>
        settings.axis1RateSelect = (GuideRateSelect)r;
    e356:	2302      	movs	r3, #2
    e358:	461c      	mov	r4, r3
    e35a:	7373      	strb	r3, [r6, #13]
        settings.axis2RateSelect = (GuideRateSelect)r;
    e35c:	73b3      	strb	r3, [r6, #14]
          settings.pulseRateSelect = (GuideRateSelect)r;
    e35e:	4632      	mov	r2, r6
          nv.updateBytes(NV_MOUNT_GUIDE_BASE, &settings, sizeof(GuideSettings));
    e360:	2303      	movs	r3, #3
    e362:	21c5      	movs	r1, #197	; 0xc5
    e364:	4827      	ldr	r0, [pc, #156]	; (e404 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x344>)
          settings.pulseRateSelect = (GuideRateSelect)r;
    e366:	f802 4f0c 	strb.w	r4, [r2, #12]!
          nv.updateBytes(NV_MOUNT_GUIDE_BASE, &settings, sizeof(GuideSettings));
    e36a:	f7f6 fe7f 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    e36e:	e7dc      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
        settings.axis1RateSelect = (GuideRateSelect)r;
    e370:	2305      	movs	r3, #5
    e372:	7373      	strb	r3, [r6, #13]
        settings.axis2RateSelect = (GuideRateSelect)r;
    e374:	73b3      	strb	r3, [r6, #14]
        if (GUIDE_SEPARATE_PULSE_RATE == ON && (GuideRateSelect)r <= GR_1X) {
    e376:	e7d8      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
        settings.axis1RateSelect = (GuideRateSelect)r;
    e378:	2308      	movs	r3, #8
    e37a:	7373      	strb	r3, [r6, #13]
        settings.axis2RateSelect = (GuideRateSelect)r;
    e37c:	73b3      	strb	r3, [r6, #14]
        if (GUIDE_SEPARATE_PULSE_RATE == ON && (GuideRateSelect)r <= GR_1X) {
    e37e:	e7d4      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
        settings.axis1RateSelect = (GuideRateSelect)r;
    e380:	2306      	movs	r3, #6
    e382:	7373      	strb	r3, [r6, #13]
        settings.axis2RateSelect = (GuideRateSelect)r;
    e384:	73b3      	strb	r3, [r6, #14]
        if (GUIDE_SEPARATE_PULSE_RATE == ON && (GuideRateSelect)r <= GR_1X) {
    e386:	e7d0      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
        settings.axis1RateSelect = (GuideRateSelect)r;
    e388:	2307      	movs	r3, #7
    e38a:	7373      	strb	r3, [r6, #13]
        settings.axis2RateSelect = (GuideRateSelect)r;
    e38c:	73b3      	strb	r3, [r6, #14]
        if (GUIDE_SEPARATE_PULSE_RATE == ON && (GuideRateSelect)r <= GR_1X) {
    e38e:	e7cc      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
      float f = strtod(parameter, &conv_end);
    e390:	a901      	add	r1, sp, #4
    e392:	4628      	mov	r0, r5
    e394:	f010 fcec 	bl	1ed70 <strtod>
      if (&parameter[0] != conv_end) {
    e398:	9b01      	ldr	r3, [sp, #4]
    e39a:	42ab      	cmp	r3, r5
    e39c:	d01b      	beq.n	e3d6 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x316>
      float f = strtod(parameter, &conv_end);
    e39e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        if (f < 0.0001F/3600.0F) f = 0.0001F/3600.0F;
    e3a2:	eddf 7a16 	vldr	s15, [pc, #88]	; e3fc <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x33c>
        customRateAxis2 = f*240.0F;
    e3a6:	ed9f 7a16 	vldr	s14, [pc, #88]	; e400 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x340>
        settings.axis2RateSelect = GR_CUSTOM;
    e3aa:	230a      	movs	r3, #10
        if (f < 0.0001F/3600.0F) f = 0.0001F/3600.0F;
    e3ac:	eeb4 0a67 	vcmp.f32	s0, s15
        settings.axis2RateSelect = GR_CUSTOM;
    e3b0:	73b3      	strb	r3, [r6, #14]
        if (f < 0.0001F/3600.0F) f = 0.0001F/3600.0F;
    e3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3b6:	bf48      	it	mi
    e3b8:	eeb0 0a67 	vmovmi.f32	s0, s15
        if (f > maxDegsPerSec) f = maxDegsPerSec;
    e3bc:	eeb4 0a48 	vcmp.f32	s0, s16
    e3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3c4:	fe38 0a00 	vselgt.f32	s0, s16, s0
        customRateAxis2 = f*240.0F;
    e3c8:	ee20 0a07 	vmul.f32	s0, s0, s14
    e3cc:	ed86 0a06 	vstr	s0, [r6, #24]
    e3d0:	e7ab      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
  } else return false;
    e3d2:	4680      	mov	r8, r0
    e3d4:	e6c4      	b.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
      } else *commandError = CE_PARAM_FORM;
    e3d6:	2305      	movs	r3, #5
    e3d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e3da:	7013      	strb	r3, [r2, #0]
      *numericReply = false;
    e3dc:	e7a5      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
    e3de:	bf00      	nop
    e3e0:	000193e8 	.word	0x000193e8
    e3e4:	20005270 	.word	0x20005270
    e3e8:	42652ee1 	.word	0x42652ee1
    e3ec:	2000221c 	.word	0x2000221c
    e3f0:	0001d4c0 	.word	0x0001d4c0
    e3f4:	20002214 	.word	0x20002214
    e3f8:	200043d0 	.word	0x200043d0
    e3fc:	32ee9bfa 	.word	0x32ee9bfa
    e400:	43700000 	.word	0x43700000
    e404:	20005e50 	.word	0x20005e50
  } else return false;
    e408:	46b0      	mov	r8, r6
    e40a:	e6a9      	b.n	e160 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
            *commandError = startAxis1(GA_FORWARD, (GUIDE_SEPARATE_PULSE_RATE == ON) ? settings.pulseRateSelect : settings.axis1RateSelect, timeMs);
    e40c:	7b32      	ldrb	r2, [r6, #12]
    e40e:	2102      	movs	r1, #2
    e410:	4630      	mov	r0, r6
    e412:	f000 fb6b 	bl	eaec <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)>
    e416:	e72b      	b.n	e270 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b0>
            *commandError = startAxis1(GA_REVERSE, (GUIDE_SEPARATE_PULSE_RATE == ON) ? settings.pulseRateSelect : settings.axis1RateSelect, timeMs);
    e418:	7b32      	ldrb	r2, [r6, #12]
    e41a:	2103      	movs	r1, #3
    e41c:	4630      	mov	r0, r6
    e41e:	f000 fb65 	bl	eaec <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)>
    e422:	e725      	b.n	e270 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b0>
            *commandError = startAxis2(GA_FORWARD, (GUIDE_SEPARATE_PULSE_RATE == ON) ? settings.pulseRateSelect : settings.axis2RateSelect, timeMs);
    e424:	7b32      	ldrb	r2, [r6, #12]
    e426:	2102      	movs	r1, #2
    e428:	4630      	mov	r0, r6
    e42a:	f000 fc81 	bl	ed30 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)>
    e42e:	e71f      	b.n	e270 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b0>
            *commandError = startAxis2(GA_REVERSE, (GUIDE_SEPARATE_PULSE_RATE == ON) ? settings.pulseRateSelect : settings.axis2RateSelect, timeMs);
    e430:	7b32      	ldrb	r2, [r6, #12]
    e432:	2103      	movs	r1, #3
    e434:	4630      	mov	r0, r6
    e436:	f000 fc7b 	bl	ed30 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)>
    e43a:	e719      	b.n	e270 <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b0>
        settings.axis1RateSelect = (GuideRateSelect)r;
    e43c:	b2fc      	uxtb	r4, r7
        if (GUIDE_SEPARATE_PULSE_RATE == ON && (GuideRateSelect)r <= GR_1X) {
    e43e:	2f02      	cmp	r7, #2
        settings.axis1RateSelect = (GuideRateSelect)r;
    e440:	7374      	strb	r4, [r6, #13]
        settings.axis2RateSelect = (GuideRateSelect)r;
    e442:	73b4      	strb	r4, [r6, #14]
        if (GUIDE_SEPARATE_PULSE_RATE == ON && (GuideRateSelect)r <= GR_1X) {
    e444:	dd8b      	ble.n	e35e <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x29e>
    e446:	e770      	b.n	e32a <Guide::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>

0000e448 <Guide::init()>:
    inline bool hasValidKey() { return keyMatches; }
    e448:	4916      	ldr	r1, [pc, #88]	; (e4a4 <Guide::init()+0x5c>)
    nv.writeBytes(NV_MOUNT_GUIDE_BASE, &settings, sizeof(GuideSettings));
    e44a:	f100 020c 	add.w	r2, r0, #12
  if (!nv.hasValidKey()) {
    e44e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
void Guide::init() {
    e452:	b510      	push	{r4, lr}
    e454:	4604      	mov	r4, r0
    e456:	b086      	sub	sp, #24
  if (!nv.hasValidKey()) {
    e458:	b1e3      	cbz	r3, e494 <Guide::init()+0x4c>
  nv.readBytes(NV_MOUNT_GUIDE_BASE, &settings, sizeof(GuideSettings));
    e45a:	2303      	movs	r3, #3
    e45c:	21c5      	movs	r1, #197	; 0xc5
    e45e:	4811      	ldr	r0, [pc, #68]	; (e4a4 <Guide::init()+0x5c>)
    e460:	f7f6 fdda 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  settings.axis1RateSelect = GR_20X;
    e464:	2306      	movs	r3, #6
  int taskHandle = tasks.add(0, 0, true, 3, guideWrapper, "MtGuide");
    e466:	2200      	movs	r2, #0
    e468:	490f      	ldr	r1, [pc, #60]	; (e4a8 <Guide::init()+0x60>)
  settings.axis1RateSelect = GR_20X;
    e46a:	7363      	strb	r3, [r4, #13]
  settings.axis2RateSelect = GR_20X;
    e46c:	73a3      	strb	r3, [r4, #14]
  int taskHandle = tasks.add(0, 0, true, 3, guideWrapper, "MtGuide");
    e46e:	2403      	movs	r4, #3
    e470:	480e      	ldr	r0, [pc, #56]	; (e4ac <Guide::init()+0x64>)
    e472:	2301      	movs	r3, #1
    e474:	9102      	str	r1, [sp, #8]
    e476:	4611      	mov	r1, r2
    e478:	9001      	str	r0, [sp, #4]
    e47a:	9400      	str	r4, [sp, #0]
    e47c:	480c      	ldr	r0, [pc, #48]	; (e4b0 <Guide::init()+0x68>)
    e47e:	f7f7 fead 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
  tasks.setPeriodMicros(taskHandle, FRACTIONAL_SEC_US/2);
    e482:	f240 32b6 	movw	r2, #950	; 0x3b6
  int taskHandle = tasks.add(0, 0, true, 3, guideWrapper, "MtGuide");
    e486:	4601      	mov	r1, r0
  tasks.setPeriodMicros(taskHandle, FRACTIONAL_SEC_US/2);
    e488:	4809      	ldr	r0, [pc, #36]	; (e4b0 <Guide::init()+0x68>)
}
    e48a:	b006      	add	sp, #24
    e48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tasks.setPeriodMicros(taskHandle, FRACTIONAL_SEC_US/2);
    e490:	f7f7 bf5c 	b.w	634c <Tasks::setPeriodMicros(unsigned char, unsigned long)>
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
    e494:	4608      	mov	r0, r1
    e496:	2303      	movs	r3, #3
    e498:	21c5      	movs	r1, #197	; 0xc5
    e49a:	9205      	str	r2, [sp, #20]
    e49c:	f7f6 fde6 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    e4a0:	9a05      	ldr	r2, [sp, #20]
    e4a2:	e7da      	b.n	e45a <Guide::init()+0x12>
    e4a4:	20005e50 	.word	0x20005e50
    e4a8:	2000220c 	.word	0x2000220c
    e4ac:	0000f1cd 	.word	0x0000f1cd
    e4b0:	2000634c 	.word	0x2000634c

0000e4b4 <Guide::abort()>:
  if (state == GU_HOME_GUIDE) {
    e4b4:	7803      	ldrb	r3, [r0, #0]
    e4b6:	2b04      	cmp	r3, #4
void Guide::abort() {
    e4b8:	b510      	push	{r4, lr}
    e4ba:	4604      	mov	r4, r0
  if (state == GU_HOME_GUIDE) {
    e4bc:	d101      	bne.n	e4c2 <Guide::abort()+0xe>
    state = GU_HOME_GUIDE_ABORT;
    e4be:	2305      	movs	r3, #5
    e4c0:	7003      	strb	r3, [r0, #0]
  if (guideActionAxis1 > GA_BREAK) {
    e4c2:	7c23      	ldrb	r3, [r4, #16]
    e4c4:	2b01      	cmp	r3, #1
    e4c6:	d90c      	bls.n	e4e2 <Guide::abort()+0x2e>
    if (rateAxis1 == 0.0F) {
    e4c8:	edd4 7a01 	vldr	s15, [r4, #4]
    e4cc:	2300      	movs	r3, #0
    e4ce:	eef5 7a40 	vcmp.f32	s15, #0.0
    e4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e4d6:	d11f      	bne.n	e518 <Guide::abort()+0x64>
      guideActionAxis1 = GA_BREAK;
    e4d8:	2301      	movs	r3, #1
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e4da:	4813      	ldr	r0, [pc, #76]	; (e528 <Guide::abort()+0x74>)
      guideActionAxis1 = GA_BREAK;
    e4dc:	7423      	strb	r3, [r4, #16]
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e4de:	f7f3 fc93 	bl	1e08 <Axis::autoSlewAbort()>
  if (guideActionAxis2 > GA_BREAK) {
    e4e2:	7c63      	ldrb	r3, [r4, #17]
    e4e4:	2b01      	cmp	r3, #1
    e4e6:	d90e      	bls.n	e506 <Guide::abort()+0x52>
    if (rateAxis2 == 0.0F) {
    e4e8:	edd4 7a02 	vldr	s15, [r4, #8]
    e4ec:	2300      	movs	r3, #0
    e4ee:	eef5 7a40 	vcmp.f32	s15, #0.0
    e4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e4f6:	d107      	bne.n	e508 <Guide::abort()+0x54>
      guideActionAxis2 = GA_BREAK;
    e4f8:	2301      	movs	r3, #1
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e4fa:	480c      	ldr	r0, [pc, #48]	; (e52c <Guide::abort()+0x78>)
      guideActionAxis2 = GA_BREAK;
    e4fc:	7463      	strb	r3, [r4, #17]
}
    e4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e502:	f7f3 bc81 	b.w	1e08 <Axis::autoSlewAbort()>
}
    e506:	bd10      	pop	{r4, pc}
      guideActionAxis2 = GA_NONE;
    e508:	2200      	movs	r2, #0
      rateAxis2 = 0.0F;
    e50a:	60a3      	str	r3, [r4, #8]
      mount.update();
    e50c:	4808      	ldr	r0, [pc, #32]	; (e530 <Guide::abort()+0x7c>)
      guideActionAxis2 = GA_NONE;
    e50e:	7462      	strb	r2, [r4, #17]
}
    e510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      mount.update();
    e514:	f7fa b9e8 	b.w	88e8 <Mount::update()>
      guideActionAxis1 = GA_NONE;
    e518:	2200      	movs	r2, #0
      mount.update();
    e51a:	4805      	ldr	r0, [pc, #20]	; (e530 <Guide::abort()+0x7c>)
      rateAxis1 = 0.0F;
    e51c:	6063      	str	r3, [r4, #4]
      guideActionAxis1 = GA_NONE;
    e51e:	7422      	strb	r2, [r4, #16]
      mount.update();
    e520:	f7fa f9e2 	bl	88e8 <Mount::update()>
    e524:	e7dd      	b.n	e4e2 <Guide::abort()+0x2e>
    e526:	bf00      	nop
    e528:	200050e8 	.word	0x200050e8
    e52c:	200051a8 	.word	0x200051a8
    e530:	200054e0 	.word	0x200054e0

0000e534 <Guide::stopAxis1(GuideAction, bool)>:
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e534:	f890 c000 	ldrb.w	ip, [r0]
void Guide::stopAxis1(GuideAction stopDirection, bool abort) {
    e538:	4603      	mov	r3, r0
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e53a:	f1bc 0f04 	cmp.w	ip, #4
    e53e:	d100      	bne.n	e542 <Guide::stopAxis1(GuideAction, bool)+0xe>
    e540:	b1ca      	cbz	r2, e576 <Guide::stopAxis1(GuideAction, bool)+0x42>
  if (guideActionAxis1 > GA_BREAK) {
    e542:	7c18      	ldrb	r0, [r3, #16]
    e544:	2801      	cmp	r0, #1
    e546:	d913      	bls.n	e570 <Guide::stopAxis1(GuideAction, bool)+0x3c>
    if (stopDirection != GA_BREAK && guideActionAxis1 != stopDirection && guideActionAxis1 != GA_HOME) return;
    e548:	4288      	cmp	r0, r1
    e54a:	bf18      	it	ne
    e54c:	2805      	cmpne	r0, #5
    e54e:	d001      	beq.n	e554 <Guide::stopAxis1(GuideAction, bool)+0x20>
    e550:	2901      	cmp	r1, #1
    e552:	d10d      	bne.n	e570 <Guide::stopAxis1(GuideAction, bool)+0x3c>
    if (rateAxis1 == 0.0F) {
    e554:	edd3 7a01 	vldr	s15, [r3, #4]
    e558:	2100      	movs	r1, #0
    e55a:	eef5 7a40 	vcmp.f32	s15, #0.0
    e55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e562:	d10a      	bne.n	e57a <Guide::stopAxis1(GuideAction, bool)+0x46>
      guideActionAxis1 = GA_BREAK;
    e564:	2101      	movs	r1, #1
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e566:	4808      	ldr	r0, [pc, #32]	; (e588 <Guide::stopAxis1(GuideAction, bool)+0x54>)
      guideActionAxis1 = GA_BREAK;
    e568:	7419      	strb	r1, [r3, #16]
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e56a:	b112      	cbz	r2, e572 <Guide::stopAxis1(GuideAction, bool)+0x3e>
    e56c:	f7f3 bc4c 	b.w	1e08 <Axis::autoSlewAbort()>
}
    e570:	4770      	bx	lr
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e572:	f7f3 bc25 	b.w	1dc0 <Axis::autoSlewStop()>
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e576:	f7ff bf9d 	b.w	e4b4 <Guide::abort()>
      guideActionAxis1 = GA_NONE;
    e57a:	2200      	movs	r2, #0
      mount.update();
    e57c:	4803      	ldr	r0, [pc, #12]	; (e58c <Guide::stopAxis1(GuideAction, bool)+0x58>)
      rateAxis1 = 0.0F;
    e57e:	6059      	str	r1, [r3, #4]
      guideActionAxis1 = GA_NONE;
    e580:	741a      	strb	r2, [r3, #16]
      mount.update();
    e582:	f7fa b9b1 	b.w	88e8 <Mount::update()>
    e586:	bf00      	nop
    e588:	200050e8 	.word	0x200050e8
    e58c:	200054e0 	.word	0x200054e0

0000e590 <Guide::stopAxis2(GuideAction, bool)>:
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e590:	f890 c000 	ldrb.w	ip, [r0]
void Guide::stopAxis2(GuideAction stopDirection, bool abort) {
    e594:	4603      	mov	r3, r0
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e596:	f1bc 0f04 	cmp.w	ip, #4
    e59a:	d100      	bne.n	e59e <Guide::stopAxis2(GuideAction, bool)+0xe>
    e59c:	b1ca      	cbz	r2, e5d2 <Guide::stopAxis2(GuideAction, bool)+0x42>
  if (guideActionAxis2 > GA_BREAK) {
    e59e:	7c58      	ldrb	r0, [r3, #17]
    e5a0:	2801      	cmp	r0, #1
    e5a2:	d913      	bls.n	e5cc <Guide::stopAxis2(GuideAction, bool)+0x3c>
    if (stopDirection != GA_BREAK && guideActionAxis2 != stopDirection && guideActionAxis2 != GA_HOME) return;
    e5a4:	4288      	cmp	r0, r1
    e5a6:	bf18      	it	ne
    e5a8:	2805      	cmpne	r0, #5
    e5aa:	d001      	beq.n	e5b0 <Guide::stopAxis2(GuideAction, bool)+0x20>
    e5ac:	2901      	cmp	r1, #1
    e5ae:	d10d      	bne.n	e5cc <Guide::stopAxis2(GuideAction, bool)+0x3c>
    if (rateAxis2 == 0.0F) {
    e5b0:	edd3 7a02 	vldr	s15, [r3, #8]
    e5b4:	2100      	movs	r1, #0
    e5b6:	eef5 7a40 	vcmp.f32	s15, #0.0
    e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5be:	d10a      	bne.n	e5d6 <Guide::stopAxis2(GuideAction, bool)+0x46>
      guideActionAxis2 = GA_BREAK;
    e5c0:	2101      	movs	r1, #1
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e5c2:	4808      	ldr	r0, [pc, #32]	; (e5e4 <Guide::stopAxis2(GuideAction, bool)+0x54>)
      guideActionAxis2 = GA_BREAK;
    e5c4:	7459      	strb	r1, [r3, #17]
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e5c6:	b112      	cbz	r2, e5ce <Guide::stopAxis2(GuideAction, bool)+0x3e>
    e5c8:	f7f3 bc1e 	b.w	1e08 <Axis::autoSlewAbort()>
}
    e5cc:	4770      	bx	lr
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e5ce:	f7f3 bbf7 	b.w	1dc0 <Axis::autoSlewStop()>
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e5d2:	f7ff bf6f 	b.w	e4b4 <Guide::abort()>
      guideActionAxis2 = GA_NONE;
    e5d6:	2200      	movs	r2, #0
      mount.update();
    e5d8:	4803      	ldr	r0, [pc, #12]	; (e5e8 <Guide::stopAxis2(GuideAction, bool)+0x58>)
      rateAxis2 = 0.0F;
    e5da:	6099      	str	r1, [r3, #8]
      guideActionAxis2 = GA_NONE;
    e5dc:	745a      	strb	r2, [r3, #17]
      mount.update();
    e5de:	f7fa b983 	b.w	88e8 <Mount::update()>
    e5e2:	bf00      	nop
    e5e4:	200051a8 	.word	0x200051a8
    e5e8:	200054e0 	.word	0x200054e0

0000e5ec <Guide::stop()>:
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e5ec:	7803      	ldrb	r3, [r0, #0]
    e5ee:	2b04      	cmp	r3, #4
void Guide::stop() {
    e5f0:	b510      	push	{r4, lr}
    e5f2:	4604      	mov	r4, r0
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e5f4:	d02a      	beq.n	e64c <Guide::stop()+0x60>
  if (guideActionAxis1 > GA_BREAK) {
    e5f6:	7c03      	ldrb	r3, [r0, #16]
    e5f8:	2b01      	cmp	r3, #1
    e5fa:	d914      	bls.n	e626 <Guide::stop()+0x3a>
    if (rateAxis1 == 0.0F) {
    e5fc:	edd0 7a01 	vldr	s15, [r0, #4]
    e600:	2300      	movs	r3, #0
    e602:	eef5 7a40 	vcmp.f32	s15, #0.0
    e606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e60a:	d12a      	bne.n	e662 <Guide::stop()+0x76>
      guideActionAxis1 = GA_BREAK;
    e60c:	2301      	movs	r3, #1
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e60e:	4818      	ldr	r0, [pc, #96]	; (e670 <Guide::stop()+0x84>)
      guideActionAxis1 = GA_BREAK;
    e610:	7423      	strb	r3, [r4, #16]
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    e612:	f7f3 fbd5 	bl	1dc0 <Axis::autoSlewStop()>
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e616:	7823      	ldrb	r3, [r4, #0]
    e618:	2b04      	cmp	r3, #4
    e61a:	d104      	bne.n	e626 <Guide::stop()+0x3a>
    e61c:	4620      	mov	r0, r4
}
    e61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e622:	f7ff bf47 	b.w	e4b4 <Guide::abort()>
  if (guideActionAxis2 > GA_BREAK) {
    e626:	7c63      	ldrb	r3, [r4, #17]
    e628:	2b01      	cmp	r3, #1
    e62a:	d90e      	bls.n	e64a <Guide::stop()+0x5e>
    if (rateAxis2 == 0.0F) {
    e62c:	edd4 7a02 	vldr	s15, [r4, #8]
    e630:	2300      	movs	r3, #0
    e632:	eef5 7a40 	vcmp.f32	s15, #0.0
    e636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e63a:	d10a      	bne.n	e652 <Guide::stop()+0x66>
      guideActionAxis2 = GA_BREAK;
    e63c:	2301      	movs	r3, #1
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e63e:	480d      	ldr	r0, [pc, #52]	; (e674 <Guide::stop()+0x88>)
      guideActionAxis2 = GA_BREAK;
    e640:	7463      	strb	r3, [r4, #17]
}
    e642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    e646:	f7f3 bbbb 	b.w	1dc0 <Axis::autoSlewStop()>
}
    e64a:	bd10      	pop	{r4, pc}
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    e64c:	f7ff ff32 	bl	e4b4 <Guide::abort()>
    e650:	e7e1      	b.n	e616 <Guide::stop()+0x2a>
      guideActionAxis2 = GA_NONE;
    e652:	2200      	movs	r2, #0
      rateAxis2 = 0.0F;
    e654:	60a3      	str	r3, [r4, #8]
      mount.update();
    e656:	4808      	ldr	r0, [pc, #32]	; (e678 <Guide::stop()+0x8c>)
      guideActionAxis2 = GA_NONE;
    e658:	7462      	strb	r2, [r4, #17]
}
    e65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      mount.update();
    e65e:	f7fa b943 	b.w	88e8 <Mount::update()>
      guideActionAxis1 = GA_NONE;
    e662:	2200      	movs	r2, #0
      mount.update();
    e664:	4804      	ldr	r0, [pc, #16]	; (e678 <Guide::stop()+0x8c>)
      rateAxis1 = 0.0F;
    e666:	6063      	str	r3, [r4, #4]
      guideActionAxis1 = GA_NONE;
    e668:	7422      	strb	r2, [r4, #16]
      mount.update();
    e66a:	f7fa f93d 	bl	88e8 <Mount::update()>
    e66e:	e7d2      	b.n	e616 <Guide::stop()+0x2a>
    e670:	200050e8 	.word	0x200050e8
    e674:	200051a8 	.word	0x200051a8
    e678:	200054e0 	.word	0x200054e0
    e67c:	00000000 	.word	0x00000000

0000e680 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)>:

// return guide rate (sidereal x) for guide rate selection
float Guide::rateSelectToRate(GuideRateSelect rateSelect, uint8_t axis) {
  switch (rateSelect) {
    e680:	290a      	cmp	r1, #10
    e682:	d817      	bhi.n	e6b4 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0x34>
    e684:	e8df f001 	tbb	[pc, r1]
    e688:	0f0c0609 	.word	0x0f0c0609
    e68c:	5850482f 	.word	0x5850482f
    e690:	2919      	.short	0x2919
    e692:	12          	.byte	0x12
    e693:	00          	.byte	0x00
    e694:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    e698:	4770      	bx	lr
    case GR_QUARTER: return 0.25F;
    e69a:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    e69e:	4770      	bx	lr
    case GR_HALF: return 0.5F;
    case GR_1X: return 1.0F;
    e6a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    e6a4:	4770      	bx	lr
    case GR_2X: return 2.0F;
    e6a6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    e6aa:	4770      	bx	lr
    #else
      case GR_48X: return limitGuideRate(20.0F);
      case GR_HALF_MAX: return limitGuideRate(20.0F);
      case GR_MAX: return limitGuideRate(20.0F);
    #endif
    case GR_CUSTOM: if (axis == 1) return customRateAxis1; else if (axis == 2) return customRateAxis2; else return 0.0F;
    e6ac:	2a01      	cmp	r2, #1
    e6ae:	d04e      	beq.n	e74e <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xce>
    e6b0:	2a02      	cmp	r2, #2
    e6b2:	d049      	beq.n	e748 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xc8>
    e6b4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; e770 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf0>
    default: return 0.0F;
  }
}
    e6b8:	4770      	bx	lr
      case GR_HALF_MAX: return radToDegF(goTo.rate)*120.0F;
    e6ba:	ed9f 6b27 	vldr	d6, [pc, #156]	; e758 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xd8>
    e6be:	ed9f 7b28 	vldr	d7, [pc, #160]	; e760 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xe0>
    e6c2:	4b2c      	ldr	r3, [pc, #176]	; (e774 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf4>)
      case GR_MAX: return radToDegF(goTo.rate)*240.0F;
    e6c4:	ed93 0a01 	vldr	s0, [r3, #4]
    e6c8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    e6cc:	ee20 0b06 	vmul.f64	d0, d0, d6
    e6d0:	ee20 0b07 	vmul.f64	d0, d0, d7
    e6d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    e6d8:	4770      	bx	lr
    e6da:	ed9f 6b1f 	vldr	d6, [pc, #124]	; e758 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xd8>
    e6de:	ed9f 7b22 	vldr	d7, [pc, #136]	; e768 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xe8>
    e6e2:	4b24      	ldr	r3, [pc, #144]	; (e774 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf4>)
    e6e4:	e7ee      	b.n	e6c4 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0x44>
    float rateLimit = radToDegF(goTo.rate)*120.0F;
    e6e6:	ed9f 5b1c 	vldr	d5, [pc, #112]	; e758 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xd8>
    e6ea:	ed9f 6b1d 	vldr	d6, [pc, #116]	; e760 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xe0>
    if (rate > rateLimit) rate = rateLimit;
    e6ee:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    float rateLimit = radToDegF(goTo.rate)*120.0F;
    e6f2:	4b20      	ldr	r3, [pc, #128]	; (e774 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf4>)
    e6f4:	ed93 0a01 	vldr	s0, [r3, #4]
    e6f8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    e6fc:	ee20 0b05 	vmul.f64	d0, d0, d5
    e700:	ee20 0b06 	vmul.f64	d0, d0, d6
    e704:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    if (rate > rateLimit) rate = rateLimit;
    e708:	eeb4 0ae7 	vcmpe.f32	s0, s15
    e70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e710:	bf58      	it	pl
    e712:	eeb0 0a67 	vmovpl.f32	s0, s15
    e716:	4770      	bx	lr
    float rateLimit = radToDegF(goTo.rate)*120.0F;
    e718:	ed9f 5b0f 	vldr	d5, [pc, #60]	; e758 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xd8>
    e71c:	ed9f 6b10 	vldr	d6, [pc, #64]	; e760 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xe0>
    if (rate > rateLimit) rate = rateLimit;
    e720:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    float rateLimit = radToDegF(goTo.rate)*120.0F;
    e724:	4b13      	ldr	r3, [pc, #76]	; (e774 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf4>)
    e726:	e7e5      	b.n	e6f4 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0x74>
    e728:	ed9f 5b0b 	vldr	d5, [pc, #44]	; e758 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xd8>
    e72c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; e760 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xe0>
    if (rate > rateLimit) rate = rateLimit;
    e730:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
    float rateLimit = radToDegF(goTo.rate)*120.0F;
    e734:	4b0f      	ldr	r3, [pc, #60]	; (e774 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf4>)
    e736:	e7dd      	b.n	e6f4 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0x74>
    e738:	ed9f 5b07 	vldr	d5, [pc, #28]	; e758 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xd8>
    e73c:	ed9f 6b08 	vldr	d6, [pc, #32]	; e760 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xe0>
    e740:	4b0c      	ldr	r3, [pc, #48]	; (e774 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf4>)
    if (rate > rateLimit) rate = rateLimit;
    e742:	eddf 7a0d 	vldr	s15, [pc, #52]	; e778 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0xf8>
    e746:	e7d5      	b.n	e6f4 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)+0x74>
    case GR_CUSTOM: if (axis == 1) return customRateAxis1; else if (axis == 2) return customRateAxis2; else return 0.0F;
    e748:	ed90 0a06 	vldr	s0, [r0, #24]
    e74c:	4770      	bx	lr
    e74e:	ed90 0a05 	vldr	s0, [r0, #20]
    e752:	4770      	bx	lr
    e754:	f3af 8000 	nop.w
    e758:	20000000 	.word	0x20000000
    e75c:	404ca5dc 	.word	0x404ca5dc
    e760:	00000000 	.word	0x00000000
    e764:	405e0000 	.word	0x405e0000
    e768:	00000000 	.word	0x00000000
    e76c:	406e0000 	.word	0x406e0000
    e770:	00000000 	.word	0x00000000
    e774:	20005270 	.word	0x20005270
    e778:	42400000 	.word	0x42400000
    e77c:	00000000 	.word	0x00000000

0000e780 <Guide::validAxis1(GuideAction)>:

// valid guide for Axis1
bool Guide::validAxis1(GuideAction guideAction) {
    e780:	b530      	push	{r4, r5, lr}
    e782:	b097      	sub	sp, #92	; 0x5c
  Coordinate location = mount.getMountPosition(CR_MOUNT_ALT);
    e784:	2202      	movs	r2, #2
bool Guide::validAxis1(GuideAction guideAction) {
    e786:	460c      	mov	r4, r1
  Coordinate location = mount.getMountPosition(CR_MOUNT_ALT);
    e788:	4935      	ldr	r1, [pc, #212]	; (e860 <Guide::validAxis1(GuideAction)+0xe0>)
    e78a:	4668      	mov	r0, sp
    e78c:	f7fa fbae 	bl	8eec <Mount::getMountPosition(CoordReturn)>

    // check if limits are being enforced
    inline bool isEnabled() { return limitsEnabled; }
    e790:	4b34      	ldr	r3, [pc, #208]	; (e864 <Guide::validAxis1(GuideAction)+0xe4>)
    e792:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    e796:	7c18      	ldrb	r0, [r3, #16]
    e798:	ed9d 6b02 	vldr	d6, [sp, #8]
    e79c:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38

  if (!limits.isEnabled()) return true;
    e7a0:	2800      	cmp	r0, #0
    e7a2:	d039      	beq.n	e818 <Guide::validAxis1(GuideAction)+0x98>
    location.a1 = axis1.getMotorPosition();
  #endif

  // for Fork and Alt/Azm mounts limits are based on shaft angles
  // so convert axis1 into normal PIER_SIDE_EAST coordinates
  if (transform.mountType != GEM && location.pierSide == PIER_SIDE_WEST) location.a1 += Deg180;
    e7a4:	4930      	ldr	r1, [pc, #192]	; (e868 <Guide::validAxis1(GuideAction)+0xe8>)
    e7a6:	f991 15c4 	ldrsb.w	r1, [r1, #1476]	; 0x5c4
    e7aa:	2901      	cmp	r1, #1
    e7ac:	d01c      	beq.n	e7e8 <Guide::validAxis1(GuideAction)+0x68>
    e7ae:	2a02      	cmp	r2, #2
    e7b0:	d103      	bne.n	e7ba <Guide::validAxis1(GuideAction)+0x3a>
    e7b2:	ed9f 5b29 	vldr	d5, [pc, #164]	; e858 <Guide::validAxis1(GuideAction)+0xd8>
    e7b6:	ee37 7b05 	vadd.f64	d7, d7, d5

  if (guideAction == GA_REVERSE || guideAction == GA_SPIRAL) {
    e7ba:	f1a4 0c03 	sub.w	ip, r4, #3
    e7be:	f1bc 0f01 	cmp.w	ip, #1
    e7c2:	d92e      	bls.n	e822 <Guide::validAxis1(GuideAction)+0xa2>
      if (location.h < -limits.settings.pastMeridianE) return false;
    }
    if (location.a1 < axis1.settings.limits.min) return false;
  }

  if (guideAction == GA_FORWARD || guideAction == GA_SPIRAL) {
    e7c4:	2c02      	cmp	r4, #2
    e7c6:	d10d      	bne.n	e7e4 <Guide::validAxis1(GuideAction)+0x64>
    if (transform.mountType == GEM && location.pierSide == PIER_SIDE_WEST) {
      if (location.h > limits.settings.pastMeridianW) return false;
    }
    if (location.a1 > axis1.settings.limits.max) return false;
    e7c8:	4b28      	ldr	r3, [pc, #160]	; (e86c <Guide::validAxis1(GuideAction)+0xec>)
    e7ca:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
    e7ce:	ee06 3a10 	vmov	s12, r3
    e7d2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e7d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    e7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7de:	bf54      	ite	pl
    e7e0:	2001      	movpl	r0, #1
    e7e2:	2000      	movmi	r0, #0
  }
  return true;
}
    e7e4:	b017      	add	sp, #92	; 0x5c
    e7e6:	bd30      	pop	{r4, r5, pc}
  if (guideAction == GA_REVERSE || guideAction == GA_SPIRAL) {
    e7e8:	1ee5      	subs	r5, r4, #3
    e7ea:	2d01      	cmp	r5, #1
    e7ec:	d917      	bls.n	e81e <Guide::validAxis1(GuideAction)+0x9e>
  if (guideAction == GA_FORWARD || guideAction == GA_SPIRAL) {
    e7ee:	2c02      	cmp	r4, #2
    e7f0:	d001      	beq.n	e7f6 <Guide::validAxis1(GuideAction)+0x76>
    e7f2:	2c04      	cmp	r4, #4
    e7f4:	d1f6      	bne.n	e7e4 <Guide::validAxis1(GuideAction)+0x64>
    if (transform.mountType == GEM && location.pierSide == PIER_SIDE_WEST) {
    e7f6:	2901      	cmp	r1, #1
    e7f8:	d1e6      	bne.n	e7c8 <Guide::validAxis1(GuideAction)+0x48>
    e7fa:	2a02      	cmp	r2, #2
    e7fc:	d1e4      	bne.n	e7c8 <Guide::validAxis1(GuideAction)+0x48>
      if (location.h > limits.settings.pastMeridianW) return false;
    e7fe:	68db      	ldr	r3, [r3, #12]
    e800:	ee05 3a10 	vmov	s10, r3
    e804:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    e808:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e810:	ddda      	ble.n	e7c8 <Guide::validAxis1(GuideAction)+0x48>
      if (location.h < -limits.settings.pastMeridianE) return false;
    e812:	2000      	movs	r0, #0
}
    e814:	b017      	add	sp, #92	; 0x5c
    e816:	bd30      	pop	{r4, r5, pc}
  if (!limits.isEnabled()) return true;
    e818:	2001      	movs	r0, #1
}
    e81a:	b017      	add	sp, #92	; 0x5c
    e81c:	bd30      	pop	{r4, r5, pc}
    if (transform.mountType == GEM && location.pierSide == PIER_SIDE_EAST) {
    e81e:	2a01      	cmp	r2, #1
    e820:	d00c      	beq.n	e83c <Guide::validAxis1(GuideAction)+0xbc>
    if (location.a1 < axis1.settings.limits.min) return false;
    e822:	4d12      	ldr	r5, [pc, #72]	; (e86c <Guide::validAxis1(GuideAction)+0xec>)
    e824:	f8d5 5025 	ldr.w	r5, [r5, #37]	; 0x25
    e828:	ee05 5a10 	vmov	s10, r5
    e82c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    e830:	eeb4 5bc7 	vcmpe.f64	d5, d7
    e834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e838:	ddd9      	ble.n	e7ee <Guide::validAxis1(GuideAction)+0x6e>
    e83a:	e7ea      	b.n	e812 <Guide::validAxis1(GuideAction)+0x92>
      if (location.h < -limits.settings.pastMeridianE) return false;
    e83c:	689d      	ldr	r5, [r3, #8]
    e83e:	ee05 5a90 	vmov	s11, r5
    e842:	eeb1 5a65 	vneg.f32	s10, s11
    e846:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    e84a:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e852:	d5e6      	bpl.n	e822 <Guide::validAxis1(GuideAction)+0xa2>
    e854:	e7dd      	b.n	e812 <Guide::validAxis1(GuideAction)+0x92>
    e856:	bf00      	nop
    e858:	54442d18 	.word	0x54442d18
    e85c:	400921fb 	.word	0x400921fb
    e860:	200054e0 	.word	0x200054e0
    e864:	20005cf4 	.word	0x20005cf4
    e868:	200064ac 	.word	0x200064ac
    e86c:	200050e8 	.word	0x200050e8

0000e870 <Guide::validAxis2(GuideAction)>:

// valid guide for Axis2
bool Guide::validAxis2(GuideAction guideAction) {
    e870:	b530      	push	{r4, r5, lr}
    e872:	b097      	sub	sp, #92	; 0x5c
    e874:	4605      	mov	r5, r0
  Coordinate location = mount.getMountPosition(CR_MOUNT_ALT);
    e876:	2202      	movs	r2, #2
bool Guide::validAxis2(GuideAction guideAction) {
    e878:	460c      	mov	r4, r1
  Coordinate location = mount.getMountPosition(CR_MOUNT_ALT);
    e87a:	4668      	mov	r0, sp
    e87c:	4946      	ldr	r1, [pc, #280]	; (e998 <Guide::validAxis2(GuideAction)+0x128>)
    e87e:	f7fa fb35 	bl	8eec <Mount::getMountPosition(CoordReturn)>
    e882:	4a46      	ldr	r2, [pc, #280]	; (e99c <Guide::validAxis2(GuideAction)+0x12c>)
  pierSide = location.pierSide;
    e884:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    e888:	7c10      	ldrb	r0, [r2, #16]
    e88a:	74ab      	strb	r3, [r5, #18]
  Coordinate location = mount.getMountPosition(CR_MOUNT_ALT);
    e88c:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48

  if (!limits.isEnabled()) return true;
    e890:	2800      	cmp	r0, #0
    e892:	d047      	beq.n	e924 <Guide::validAxis2(GuideAction)+0xb4>

  #if AXIS2_TANGENT_ARM == ON
    location.a2 = axis2.getMotorPosition();
  #endif

  if (guideAction == GA_REVERSE || guideAction == GA_SPIRAL) {
    e894:	1ee2      	subs	r2, r4, #3
    e896:	2a01      	cmp	r2, #1
    e898:	d916      	bls.n	e8c8 <Guide::validAxis2(GuideAction)+0x58>
    } else {
      if (flt(location.a2, axis2.settings.limits.min)) return false;
    }
  }

  if (guideAction == GA_FORWARD || guideAction == GA_SPIRAL) {
    e89a:	2c02      	cmp	r4, #2
    e89c:	d112      	bne.n	e8c4 <Guide::validAxis2(GuideAction)+0x54>
    if (pierSide == PIER_SIDE_WEST) {
    e89e:	2b02      	cmp	r3, #2
      if (flt(location.a2, axis2.settings.limits.min)) return false;
    e8a0:	4b3f      	ldr	r3, [pc, #252]	; (e9a0 <Guide::validAxis2(GuideAction)+0x130>)
    e8a2:	ed9f 5b39 	vldr	d5, [pc, #228]	; e988 <Guide::validAxis2(GuideAction)+0x118>
    if (pierSide == PIER_SIDE_WEST) {
    e8a6:	d05f      	beq.n	e968 <Guide::validAxis2(GuideAction)+0xf8>
    } else {
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e8a8:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
    e8ac:	ee06 3a10 	vmov	s12, r3
    e8b0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e8b4:	ee37 7b46 	vsub.f64	d7, d7, d6
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e8b8:	eeb4 7b45 	vcmp.f64	d7, d5
    e8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e8c0:	bfc8      	it	gt
    e8c2:	2000      	movgt	r0, #0
  }
  if (guideAction == GA_SPIRAL) {
    if (fabs(location.a2) > degToRad(75.0)) return false;
  }
  return true;
}
    e8c4:	b017      	add	sp, #92	; 0x5c
    e8c6:	bd30      	pop	{r4, r5, pc}
    if (pierSide == PIER_SIDE_WEST) {
    e8c8:	2b02      	cmp	r3, #2
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e8ca:	4b35      	ldr	r3, [pc, #212]	; (e9a0 <Guide::validAxis2(GuideAction)+0x130>)
    e8cc:	ed9f 5b2e 	vldr	d5, [pc, #184]	; e988 <Guide::validAxis2(GuideAction)+0x118>
    if (pierSide == PIER_SIDE_WEST) {
    e8d0:	d02b      	beq.n	e92a <Guide::validAxis2(GuideAction)+0xba>
      if (flt(location.a2, axis2.settings.limits.min)) return false;
    e8d2:	f8d3 2025 	ldr.w	r2, [r3, #37]	; 0x25
    e8d6:	ee06 2a10 	vmov	s12, r2
    e8da:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e8de:	ee36 6b47 	vsub.f64	d6, d6, d7
    e8e2:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e8ea:	dc3a      	bgt.n	e962 <Guide::validAxis2(GuideAction)+0xf2>
  if (guideAction == GA_FORWARD || guideAction == GA_SPIRAL) {
    e8ec:	2c04      	cmp	r4, #4
    e8ee:	d1e9      	bne.n	e8c4 <Guide::validAxis2(GuideAction)+0x54>
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e8f0:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
    e8f4:	ee06 3a10 	vmov	s12, r3
    e8f8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e8fc:	ee37 6b46 	vsub.f64	d6, d7, d6
    e900:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e908:	dc2b      	bgt.n	e962 <Guide::validAxis2(GuideAction)+0xf2>
    if (fabs(location.a2) > degToRad(75.0)) return false;
    e90a:	eeb0 7bc7 	vabs.f64	d7, d7
    e90e:	ed9f 6b20 	vldr	d6, [pc, #128]	; e990 <Guide::validAxis2(GuideAction)+0x120>
    e912:	eeb4 7bc6 	vcmpe.f64	d7, d6
    e916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e91a:	bfd4      	ite	le
    e91c:	2001      	movle	r0, #1
    e91e:	2000      	movgt	r0, #0
}
    e920:	b017      	add	sp, #92	; 0x5c
    e922:	bd30      	pop	{r4, r5, pc}
  if (!limits.isEnabled()) return true;
    e924:	2001      	movs	r0, #1
}
    e926:	b017      	add	sp, #92	; 0x5c
    e928:	bd30      	pop	{r4, r5, pc}
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e92a:	f8d3 2029 	ldr.w	r2, [r3, #41]	; 0x29
    e92e:	ee06 2a10 	vmov	s12, r2
    e932:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e936:	ee37 6b46 	vsub.f64	d6, d7, d6
    e93a:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e942:	dc0e      	bgt.n	e962 <Guide::validAxis2(GuideAction)+0xf2>
  if (guideAction == GA_FORWARD || guideAction == GA_SPIRAL) {
    e944:	2c04      	cmp	r4, #4
    e946:	d1bd      	bne.n	e8c4 <Guide::validAxis2(GuideAction)+0x54>
      if (flt(location.a2, axis2.settings.limits.min)) return false;
    e948:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
    e94c:	ee06 3a10 	vmov	s12, r3
    e950:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e954:	ee36 6b47 	vsub.f64	d6, d6, d7
    e958:	eeb4 6bc5 	vcmpe.f64	d6, d5
    e95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e960:	ddd3      	ble.n	e90a <Guide::validAxis2(GuideAction)+0x9a>
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e962:	2000      	movs	r0, #0
}
    e964:	b017      	add	sp, #92	; 0x5c
    e966:	bd30      	pop	{r4, r5, pc}
      if (flt(location.a2, axis2.settings.limits.min)) return false;
    e968:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
    e96c:	ee06 3a10 	vmov	s12, r3
    e970:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    e974:	ee36 7b47 	vsub.f64	d7, d6, d7
      if (fgt(location.a2, axis2.settings.limits.max)) return false;
    e978:	eeb4 7b45 	vcmp.f64	d7, d5
    e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e980:	bfc8      	it	gt
    e982:	2000      	movgt	r0, #0
    e984:	e79e      	b.n	e8c4 <Guide::validAxis2(GuideAction)+0x54>
    e986:	bf00      	nop
    e988:	a0000000 	.word	0xa0000000
    e98c:	3ea0c6f7 	.word	0x3ea0c6f7
    e990:	c638d03f 	.word	0xc638d03f
    e994:	3ff4f1a6 	.word	0x3ff4f1a6
    e998:	200054e0 	.word	0x200054e0
    e99c:	20005cf4 	.word	0x20005cf4
    e9a0:	200051a8 	.word	0x200051a8

0000e9a4 <Guide::validate(int, GuideAction)>:

// general validation of guide request
CommandError Guide::validate(int axis, GuideAction guideAction) {
    e9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    inline bool isEnabled() { return enabled && !motor->calibrating; }
    e9a8:	f8df 813c 	ldr.w	r8, [pc, #316]	; eae8 <Guide::validate(int, GuideAction)+0x144>
    e9ac:	b084      	sub	sp, #16
    e9ae:	f898 3044 	ldrb.w	r3, [r8, #68]	; 0x44
    e9b2:	b11b      	cbz	r3, e9bc <Guide::validate(int, GuideAction)+0x18>
    e9b4:	f8d8 3000 	ldr.w	r3, [r8]
    e9b8:	7adb      	ldrb	r3, [r3, #11]
    e9ba:	b123      	cbz	r3, e9c6 <Guide::validate(int, GuideAction)+0x22>
  if (!mount.isEnabled()) return CE_SLEW_ERR_IN_STANDBY;
    e9bc:	2511      	movs	r5, #17
  }

  if (mount.motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;

  return CE_NONE;
}
    e9be:	4628      	mov	r0, r5
    e9c0:	b004      	add	sp, #16
    e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e9c6:	f8df 911c 	ldr.w	r9, [pc, #284]	; eae4 <Guide::validate(int, GuideAction)+0x140>
    e9ca:	f899 3044 	ldrb.w	r3, [r9, #68]	; 0x44
    e9ce:	2b00      	cmp	r3, #0
    e9d0:	d0f4      	beq.n	e9bc <Guide::validate(int, GuideAction)+0x18>
    e9d2:	f8d9 3000 	ldr.w	r3, [r9]
    e9d6:	7adb      	ldrb	r3, [r3, #11]
    e9d8:	2b00      	cmp	r3, #0
    e9da:	d1ef      	bne.n	e9bc <Guide::validate(int, GuideAction)+0x18>
  if ((guideAction == GA_SPIRAL || guideAction == GA_HOME) && mount.isSlewing()) return CE_SLEW_IN_MOTION;
    e9dc:	1f13      	subs	r3, r2, #4
    e9de:	4607      	mov	r7, r0
    e9e0:	460e      	mov	r6, r1
    e9e2:	4614      	mov	r4, r2
    e9e4:	2b01      	cmp	r3, #1
    e9e6:	d93d      	bls.n	ea64 <Guide::validate(int, GuideAction)+0xc0>
    if (park.state == PS_PARKED) return CE_SLEW_ERR_IN_PARK;
    e9e8:	4b3b      	ldr	r3, [pc, #236]	; (ead8 <Guide::validate(int, GuideAction)+0x134>)
    e9ea:	781b      	ldrb	r3, [r3, #0]
    e9ec:	2b02      	cmp	r3, #2
    e9ee:	d066      	beq.n	eabe <Guide::validate(int, GuideAction)+0x11a>
    if (goTo.state != GS_NONE) { goTo.abort(); return CE_SLEW_IN_MOTION; }
    e9f0:	483a      	ldr	r0, [pc, #232]	; (eadc <Guide::validate(int, GuideAction)+0x138>)
    e9f2:	7805      	ldrb	r5, [r0, #0]
    e9f4:	2d00      	cmp	r5, #0
    e9f6:	d164      	bne.n	eac2 <Guide::validate(int, GuideAction)+0x11e>
  if (axis == 1 || guideAction == GA_SPIRAL) {
    e9f8:	f1a4 0a04 	sub.w	sl, r4, #4
    e9fc:	2e01      	cmp	r6, #1
    e9fe:	faba fa8a 	clz	sl, sl
    ea02:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    ea06:	d036      	beq.n	ea76 <Guide::validate(int, GuideAction)+0xd2>
    ea08:	f1ba 0f00 	cmp.w	sl, #0
    ea0c:	d133      	bne.n	ea76 <Guide::validate(int, GuideAction)+0xd2>
  if (axis == 2 || guideAction == GA_SPIRAL) {
    ea0e:	2e02      	cmp	r6, #2
    ea10:	d011      	beq.n	ea36 <Guide::validate(int, GuideAction)+0x92>
    ea12:	f1ba 0f00 	cmp.w	sl, #0
    ea16:	d10e      	bne.n	ea36 <Guide::validate(int, GuideAction)+0x92>
    inline bool motorFault() { return motor->getDriverStatus().fault; };
    ea18:	f8d8 1000 	ldr.w	r1, [r8]
    ea1c:	a801      	add	r0, sp, #4
    ea1e:	680b      	ldr	r3, [r1, #0]
    ea20:	699b      	ldr	r3, [r3, #24]
    ea22:	4798      	blx	r3
    ea24:	f89d 300c 	ldrb.w	r3, [sp, #12]
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d039      	beq.n	eaa0 <Guide::validate(int, GuideAction)+0xfc>
  if (mount.motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    ea2c:	2515      	movs	r5, #21
}
    ea2e:	4628      	mov	r0, r5
    ea30:	b004      	add	sp, #16
    ea32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!validAxis2(guideAction)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ea36:	4621      	mov	r1, r4
    ea38:	4638      	mov	r0, r7
    ea3a:	f7ff ff19 	bl	e870 <Guide::validAxis2(GuideAction)>
    ea3e:	b160      	cbz	r0, ea5a <Guide::validate(int, GuideAction)+0xb6>
    if (settings.axis2RateSelect < 3) {
    ea40:	7bbb      	ldrb	r3, [r7, #14]
    ea42:	2b02      	cmp	r3, #2
    ea44:	d8e8      	bhi.n	ea18 <Guide::validate(int, GuideAction)+0x74>
      if (limits.isError() || axis2.motionError(DIR_BOTH)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ea46:	4826      	ldr	r0, [pc, #152]	; (eae0 <Guide::validate(int, GuideAction)+0x13c>)
    ea48:	f002 fa42 	bl	10ed0 <Limits::isError()>
    ea4c:	b928      	cbnz	r0, ea5a <Guide::validate(int, GuideAction)+0xb6>
    ea4e:	2103      	movs	r1, #3
    ea50:	4824      	ldr	r0, [pc, #144]	; (eae4 <Guide::validate(int, GuideAction)+0x140>)
    ea52:	f7f2 fd8d 	bl	1570 <Axis::motionError(Direction)>
    ea56:	2800      	cmp	r0, #0
    ea58:	d0de      	beq.n	ea18 <Guide::validate(int, GuideAction)+0x74>
    if (!validAxis1(guideAction)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ea5a:	2514      	movs	r5, #20
}
    ea5c:	4628      	mov	r0, r5
    ea5e:	b004      	add	sp, #16
    ea60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    inline bool isSlewing() { return axis1.isSlewing() || axis2.isSlewing(); }
    ea64:	4640      	mov	r0, r8
    ea66:	f7f2 fc61 	bl	132c <Axis::isSlewing()>
    ea6a:	b370      	cbz	r0, eaca <Guide::validate(int, GuideAction)+0x126>
  if ((guideAction == GA_SPIRAL || guideAction == GA_HOME) && mount.isSlewing()) return CE_SLEW_IN_MOTION;
    ea6c:	2516      	movs	r5, #22
}
    ea6e:	4628      	mov	r0, r5
    ea70:	b004      	add	sp, #16
    ea72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!validAxis1(guideAction)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ea76:	4621      	mov	r1, r4
    ea78:	4638      	mov	r0, r7
    ea7a:	f7ff fe81 	bl	e780 <Guide::validAxis1(GuideAction)>
    ea7e:	2800      	cmp	r0, #0
    ea80:	d0eb      	beq.n	ea5a <Guide::validate(int, GuideAction)+0xb6>
    if (settings.axis1RateSelect < 3) {
    ea82:	7b7b      	ldrb	r3, [r7, #13]
    ea84:	2b02      	cmp	r3, #2
    ea86:	d8c2      	bhi.n	ea0e <Guide::validate(int, GuideAction)+0x6a>
      if (limits.isError() || axis1.motionError(DIR_BOTH)) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    ea88:	4815      	ldr	r0, [pc, #84]	; (eae0 <Guide::validate(int, GuideAction)+0x13c>)
    ea8a:	f002 fa21 	bl	10ed0 <Limits::isError()>
    ea8e:	2800      	cmp	r0, #0
    ea90:	d1e3      	bne.n	ea5a <Guide::validate(int, GuideAction)+0xb6>
    ea92:	2103      	movs	r1, #3
    ea94:	4814      	ldr	r0, [pc, #80]	; (eae8 <Guide::validate(int, GuideAction)+0x144>)
    ea96:	f7f2 fd6b 	bl	1570 <Axis::motionError(Direction)>
    ea9a:	2800      	cmp	r0, #0
    ea9c:	d0b7      	beq.n	ea0e <Guide::validate(int, GuideAction)+0x6a>
    ea9e:	e7dc      	b.n	ea5a <Guide::validate(int, GuideAction)+0xb6>
    eaa0:	f8d9 1000 	ldr.w	r1, [r9]
    eaa4:	a801      	add	r0, sp, #4
    eaa6:	680b      	ldr	r3, [r1, #0]
    eaa8:	699b      	ldr	r3, [r3, #24]
    eaaa:	4798      	blx	r3
    eaac:	f89d 300c 	ldrb.w	r3, [sp, #12]
  if (mount.motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
    eab0:	2b00      	cmp	r3, #0
    eab2:	bf18      	it	ne
    eab4:	2515      	movne	r5, #21
}
    eab6:	4628      	mov	r0, r5
    eab8:	b004      	add	sp, #16
    eaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (park.state == PS_PARKED) return CE_SLEW_ERR_IN_PARK;
    eabe:	2512      	movs	r5, #18
    eac0:	e77d      	b.n	e9be <Guide::validate(int, GuideAction)+0x1a>
    if (goTo.state != GS_NONE) { goTo.abort(); return CE_SLEW_IN_MOTION; }
    eac2:	2516      	movs	r5, #22
    eac4:	f7fe f974 	bl	cdb0 <Goto::abort()>
    eac8:	e779      	b.n	e9be <Guide::validate(int, GuideAction)+0x1a>
    eaca:	4648      	mov	r0, r9
    eacc:	f7f2 fc2e 	bl	132c <Axis::isSlewing()>
    ead0:	2800      	cmp	r0, #0
    ead2:	d1cb      	bne.n	ea6c <Guide::validate(int, GuideAction)+0xc8>
    ead4:	e788      	b.n	e9e8 <Guide::validate(int, GuideAction)+0x44>
    ead6:	bf00      	nop
    ead8:	20005ea8 	.word	0x20005ea8
    eadc:	20005270 	.word	0x20005270
    eae0:	20005cf4 	.word	0x20005cf4
    eae4:	200051a8 	.word	0x200051a8
    eae8:	200050e8 	.word	0x200050e8

0000eaec <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)>:
CommandError Guide::startAxis1(GuideAction guideAction, GuideRateSelect rateSelect, unsigned long guideTimeLimit) {
    eaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaf0:	ed2d 8b02 	vpush	{d8}
  if (guideAction == GA_NONE) return CE_NONE;
    eaf4:	2900      	cmp	r1, #0
    eaf6:	d03d      	beq.n	eb74 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x88>
  if (state == GU_HOME_GUIDE || state == GU_HOME_GUIDE_ABORT) return CE_NONE;
    eaf8:	7805      	ldrb	r5, [r0, #0]
    eafa:	4606      	mov	r6, r0
    eafc:	3d04      	subs	r5, #4
    eafe:	2d01      	cmp	r5, #1
    eb00:	d938      	bls.n	eb74 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x88>
  CommandError e = validate(1, guideAction);
    eb02:	4690      	mov	r8, r2
    eb04:	460c      	mov	r4, r1
    eb06:	460a      	mov	r2, r1
    eb08:	2101      	movs	r1, #1
    eb0a:	461f      	mov	r7, r3
    eb0c:	f7ff ff4a 	bl	e9a4 <Guide::validate(int, GuideAction)>
  if (e != CE_NONE) return e;
    eb10:	4605      	mov	r5, r0
    eb12:	bb80      	cbnz	r0, eb76 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x8a>
  float rate = rateSelectToRate(rateSelect, 1);
    eb14:	2201      	movs	r2, #1
    eb16:	4641      	mov	r1, r8
    eb18:	4630      	mov	r0, r6
  guideActionAxis1 = guideAction;
    eb1a:	7434      	strb	r4, [r6, #16]
  float rate = rateSelectToRate(rateSelect, 1);
    eb1c:	f7ff fdb0 	bl	e680 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)>
  if (rate <= 2) {
    eb20:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
  if (guideTimeLimit == 0) guideTimeLimit = 0x1FFFFFFF;
    eb24:	2f00      	cmp	r7, #0
    eb26:	4b35      	ldr	r3, [pc, #212]	; (ebfc <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x110>)
  float rate = rateSelectToRate(rateSelect, 1);
    eb28:	eeb0 8a40 	vmov.f32	s16, s0
  if (rate <= 2) {
    eb2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (guideTimeLimit == 0) guideTimeLimit = 0x1FFFFFFF;
    eb30:	bf08      	it	eq
    eb32:	f06f 4760 	mvneq.w	r7, #3758096384	; 0xe0000000
    eb36:	681b      	ldr	r3, [r3, #0]
  if (rate <= 2) {
    eb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  guideFinishTimeAxis1 = millis() + guideTimeLimit;
    eb3c:	443b      	add	r3, r7
    eb3e:	6273      	str	r3, [r6, #36]	; 0x24
  if (rate <= 2) {
    eb40:	d91e      	bls.n	eb80 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x94>
    state = GU_GUIDE;
    eb42:	2302      	movs	r3, #2
    if (rateSelect != GR_CUSTOM) {
    eb44:	f1b8 0f0a 	cmp.w	r8, #10
    state = GU_GUIDE;
    eb48:	7033      	strb	r3, [r6, #0]
    if (rateSelect != GR_CUSTOM) {
    eb4a:	d033      	beq.n	ebb4 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0xc8>
      if (guideAction == GA_REVERSE) rate -= mount.trackingRateAxis1; else rate += mount.trackingRateAxis1;
    eb4c:	4b2c      	ldr	r3, [pc, #176]	; (ec00 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x114>)
    eb4e:	2c03      	cmp	r4, #3
    axis1.setFrequencySlew(degToRadF(rate/240.0F));
    eb50:	ed9f 7a2c 	vldr	s14, [pc, #176]	; ec04 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x118>
    eb54:	eddf 7a2c 	vldr	s15, [pc, #176]	; ec08 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x11c>
    eb58:	482c      	ldr	r0, [pc, #176]	; (ec0c <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x120>)
      if (guideAction == GA_REVERSE) rate -= mount.trackingRateAxis1; else rate += mount.trackingRateAxis1;
    eb5a:	edd3 6a02 	vldr	s13, [r3, #8]
    eb5e:	d03e      	beq.n	ebde <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0xf2>
    eb60:	ee30 8a26 	vadd.f32	s16, s0, s13
    axis1.setFrequencySlew(degToRadF(rate/240.0F));
    eb64:	ee88 0a07 	vdiv.f32	s0, s16, s14
    eb68:	ee80 0a27 	vdiv.f32	s0, s0, s15
    eb6c:	f7f2 fbe8 	bl	1340 <Axis::setFrequencySlew(float)>

// start axis1 movement
void Guide::axis1AutoSlew(GuideAction guideAction) {
  if (guideAction == GA_REVERSE) axis1.autoSlew(DIR_REVERSE); else
    if (guideAction == GA_FORWARD) axis1.autoSlew(DIR_FORWARD);
    eb70:	2c02      	cmp	r4, #2
    eb72:	d02d      	beq.n	ebd0 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0xe4>
  if (guideAction == GA_NONE) return CE_NONE;
    eb74:	2500      	movs	r5, #0
}
    eb76:	4628      	mov	r0, r5
    eb78:	ecbd 8b02 	vpop	{d8}
    eb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    axis1.setPowerDownOverrideTime(300000UL);
    eb80:	4923      	ldr	r1, [pc, #140]	; (ec10 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x124>)
    eb82:	4822      	ldr	r0, [pc, #136]	; (ec0c <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x120>)
    eb84:	f7f2 fa4c 	bl	1020 <Axis::setPowerDownOverrideTime(int)>
    axis2.setPowerDownOverrideTime(300000UL);
    eb88:	4921      	ldr	r1, [pc, #132]	; (ec10 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x124>)
    eb8a:	4822      	ldr	r0, [pc, #136]	; (ec14 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x128>)
    eb8c:	f7f2 fa48 	bl	1020 <Axis::setPowerDownOverrideTime(int)>
  if (rate <= 2 && rateSelect != GR_CUSTOM) {
    eb90:	f1b8 0f0a 	cmp.w	r8, #10
    eb94:	d00c      	beq.n	ebb0 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0xc4>
    if (guideAction == GA_REVERSE) { VF("MSG: Guide, Axis1 rev @"); rateAxis1 = -rate; } else { VF("MSG: Guide, Axis1 fwd @"); rateAxis1 = rate; }
    eb96:	2c03      	cmp	r4, #3
    state = GU_PULSE_GUIDE;
    eb98:	f04f 0301 	mov.w	r3, #1
    mount.update();
    eb9c:	4818      	ldr	r0, [pc, #96]	; (ec00 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x114>)
    if (guideAction == GA_REVERSE) { VF("MSG: Guide, Axis1 rev @"); rateAxis1 = -rate; } else { VF("MSG: Guide, Axis1 fwd @"); rateAxis1 = rate; }
    eb9e:	bf08      	it	eq
    eba0:	eeb1 8a48 	vnegeq.f32	s16, s16
    state = GU_PULSE_GUIDE;
    eba4:	7033      	strb	r3, [r6, #0]
    if (guideAction == GA_REVERSE) { VF("MSG: Guide, Axis1 rev @"); rateAxis1 = -rate; } else { VF("MSG: Guide, Axis1 fwd @"); rateAxis1 = rate; }
    eba6:	ed86 8a01 	vstr	s16, [r6, #4]
    mount.update();
    ebaa:	f7f9 fe9d 	bl	88e8 <Mount::update()>
    ebae:	e7e2      	b.n	eb76 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x8a>
    state = GU_GUIDE;
    ebb0:	2302      	movs	r3, #2
    ebb2:	7033      	strb	r3, [r6, #0]
    axis1.setFrequencySlew(degToRadF(rate/240.0F));
    ebb4:	ed9f 7a13 	vldr	s14, [pc, #76]	; ec04 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x118>
    ebb8:	eddf 7a13 	vldr	s15, [pc, #76]	; ec08 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x11c>
    ebbc:	ee88 0a07 	vdiv.f32	s0, s16, s14
    ebc0:	4812      	ldr	r0, [pc, #72]	; (ec0c <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x120>)
    ebc2:	ee80 0a27 	vdiv.f32	s0, s0, s15
    ebc6:	f7f2 fbbb 	bl	1340 <Axis::setFrequencySlew(float)>
  if (guideAction == GA_REVERSE) axis1.autoSlew(DIR_REVERSE); else
    ebca:	2c03      	cmp	r4, #3
    ebcc:	d1d0      	bne.n	eb70 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x84>
    ebce:	e00e      	b.n	ebee <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x102>
    if (guideAction == GA_FORWARD) axis1.autoSlew(DIR_FORWARD);
    ebd0:	ed9f 0a11 	vldr	s0, [pc, #68]	; ec18 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x12c>
    ebd4:	2101      	movs	r1, #1
    ebd6:	480d      	ldr	r0, [pc, #52]	; (ec0c <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x120>)
    ebd8:	f7f2 fd98 	bl	170c <Axis::autoSlew(Direction, float)>
}
    ebdc:	e7cb      	b.n	eb76 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x8a>
      if (guideAction == GA_REVERSE) rate -= mount.trackingRateAxis1; else rate += mount.trackingRateAxis1;
    ebde:	ee30 8a66 	vsub.f32	s16, s0, s13
    axis1.setFrequencySlew(degToRadF(rate/240.0F));
    ebe2:	ee88 0a07 	vdiv.f32	s0, s16, s14
    ebe6:	ee80 0a27 	vdiv.f32	s0, s0, s15
    ebea:	f7f2 fba9 	bl	1340 <Axis::setFrequencySlew(float)>
  if (guideAction == GA_REVERSE) axis1.autoSlew(DIR_REVERSE); else
    ebee:	ed9f 0a0a 	vldr	s0, [pc, #40]	; ec18 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x12c>
    ebf2:	2102      	movs	r1, #2
    ebf4:	4805      	ldr	r0, [pc, #20]	; (ec0c <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x120>)
    ebf6:	f7f2 fd89 	bl	170c <Axis::autoSlew(Direction, float)>
    ebfa:	e7bc      	b.n	eb76 <Guide::startAxis1(GuideAction, GuideRateSelect, unsigned long)+0x8a>
    ebfc:	20006344 	.word	0x20006344
    ec00:	200054e0 	.word	0x200054e0
    ec04:	43700000 	.word	0x43700000
    ec08:	42652ee1 	.word	0x42652ee1
    ec0c:	200050e8 	.word	0x200050e8
    ec10:	000493e0 	.word	0x000493e0
    ec14:	200051a8 	.word	0x200051a8
    ec18:	7fc00000 	.word	0x7fc00000

0000ec1c <Guide::startHome()>:
CommandError Guide::startHome() {
    ec1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (state == GU_HOME_GUIDE) { abort(); return CE_NONE; }
    ec20:	7803      	ldrb	r3, [r0, #0]
    ec22:	2b04      	cmp	r3, #4
    ec24:	d03f      	beq.n	eca6 <Guide::startHome()+0x8a>
    if (guideActionAxis1 != GA_NONE || guideActionAxis2 != GA_NONE) return CE_SLEW_IN_MOTION;
    ec26:	8a01      	ldrh	r1, [r0, #16]
    ec28:	4604      	mov	r4, r0
    ec2a:	2900      	cmp	r1, #0
    ec2c:	d134      	bne.n	ec98 <Guide::startHome()+0x7c>
    CommandError e = validate(0, GA_HOME); if (e != CE_NONE) return e;
    ec2e:	2205      	movs	r2, #5
    ec30:	f7ff feb8 	bl	e9a4 <Guide::validate(int, GuideAction)>
    ec34:	4605      	mov	r5, r0
    ec36:	b110      	cbz	r0, ec3e <Guide::startHome()+0x22>
}
    ec38:	4628      	mov	r0, r5
    ec3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ec3e:	481d      	ldr	r0, [pc, #116]	; (ecb4 <Guide::startHome()+0x98>)
    ec40:	7843      	ldrb	r3, [r0, #1]
    ec42:	bb6b      	cbnz	r3, eca0 <Guide::startHome()+0x84>
    ec44:	4f1c      	ldr	r7, [pc, #112]	; (ecb8 <Guide::startHome()+0x9c>)
      guideActionAxis1 = GA_HOME;
    ec46:	f04f 0805 	mov.w	r8, #5
    ec4a:	481c      	ldr	r0, [pc, #112]	; (ecbc <Guide::startHome()+0xa0>)
    ec4c:	f7f6 fd12 	bl	5674 <Sound::alert()>
      guideFinishTimeAxis1 = millis() + (unsigned long)(GUIDE_HOME_TIME_LIMIT * 1000.0);
    ec50:	4e1b      	ldr	r6, [pc, #108]	; (ecc0 <Guide::startHome()+0xa4>)
    ec52:	683b      	ldr	r3, [r7, #0]
    state = GU_HOME_GUIDE;
    ec54:	2204      	movs	r2, #4
      axis1.setFrequencySlew(goTo.rate);
    ec56:	f8df 9074 	ldr.w	r9, [pc, #116]	; eccc <Guide::startHome()+0xb0>
      guideFinishTimeAxis1 = millis() + (unsigned long)(GUIDE_HOME_TIME_LIMIT * 1000.0);
    ec5a:	4433      	add	r3, r6
    state = GU_HOME_GUIDE;
    ec5c:	7022      	strb	r2, [r4, #0]
      axis1.setFrequencySlew(goTo.rate);
    ec5e:	ed99 0a01 	vldr	s0, [r9, #4]
      guideFinishTimeAxis1 = millis() + (unsigned long)(GUIDE_HOME_TIME_LIMIT * 1000.0);
    ec62:	6263      	str	r3, [r4, #36]	; 0x24
      axis1.setFrequencySlew(goTo.rate);
    ec64:	4817      	ldr	r0, [pc, #92]	; (ecc4 <Guide::startHome()+0xa8>)
      guideActionAxis1 = GA_HOME;
    ec66:	f884 8010 	strb.w	r8, [r4, #16]
      axis1.setFrequencySlew(goTo.rate);
    ec6a:	f7f2 fb69 	bl	1340 <Axis::setFrequencySlew(float)>
      axis1.autoSlewHome();
    ec6e:	2100      	movs	r1, #0
    ec70:	4814      	ldr	r0, [pc, #80]	; (ecc4 <Guide::startHome()+0xa8>)
    ec72:	f7f2 fdab 	bl	17cc <Axis::autoSlewHome(unsigned long)>
    ec76:	683b      	ldr	r3, [r7, #0]
    axis2.setFrequencySlew(goTo.rate*((float)(AXIS2_SLEW_RATE_PERCENT)/100.0F));
    ec78:	ed99 0a01 	vldr	s0, [r9, #4]
    guideFinishTimeAxis2 = millis() + (unsigned long)(GUIDE_HOME_TIME_LIMIT * 1000.0);
    ec7c:	4433      	add	r3, r6
    axis2.setFrequencySlew(goTo.rate*((float)(AXIS2_SLEW_RATE_PERCENT)/100.0F));
    ec7e:	4812      	ldr	r0, [pc, #72]	; (ecc8 <Guide::startHome()+0xac>)
    guideActionAxis2 = GA_HOME;
    ec80:	f884 8011 	strb.w	r8, [r4, #17]
    guideFinishTimeAxis2 = millis() + (unsigned long)(GUIDE_HOME_TIME_LIMIT * 1000.0);
    ec84:	62a3      	str	r3, [r4, #40]	; 0x28
    axis2.setFrequencySlew(goTo.rate*((float)(AXIS2_SLEW_RATE_PERCENT)/100.0F));
    ec86:	f7f2 fb5b 	bl	1340 <Axis::setFrequencySlew(float)>
    axis2.autoSlewHome();
    ec8a:	2100      	movs	r1, #0
    ec8c:	480e      	ldr	r0, [pc, #56]	; (ecc8 <Guide::startHome()+0xac>)
    ec8e:	f7f2 fd9d 	bl	17cc <Axis::autoSlewHome(unsigned long)>
}
    ec92:	4628      	mov	r0, r5
    ec94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (guideActionAxis1 != GA_NONE || guideActionAxis2 != GA_NONE) return CE_SLEW_IN_MOTION;
    ec98:	2516      	movs	r5, #22
}
    ec9a:	4628      	mov	r0, r5
    ec9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eca0:	f005 ff4c 	bl	14b3c <Status::wake()>
    eca4:	e7ce      	b.n	ec44 <Guide::startHome()+0x28>
    if (state == GU_HOME_GUIDE) { abort(); return CE_NONE; }
    eca6:	2500      	movs	r5, #0
    eca8:	f7ff fc04 	bl	e4b4 <Guide::abort()>
}
    ecac:	4628      	mov	r0, r5
    ecae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ecb2:	bf00      	nop
    ecb4:	20005e4c 	.word	0x20005e4c
    ecb8:	20006344 	.word	0x20006344
    ecbc:	20005e4d 	.word	0x20005e4d
    ecc0:	000927c0 	.word	0x000927c0
    ecc4:	200050e8 	.word	0x200050e8
    ecc8:	200051a8 	.word	0x200051a8
    eccc:	20005270 	.word	0x20005270

0000ecd0 <Guide::axis2AutoSlew(GuideAction)>:

// start axis2 movement
void Guide::axis2AutoSlew(GuideAction guideAction) {
    ecd0:	b510      	push	{r4, lr}
    ecd2:	b096      	sub	sp, #88	; 0x58
    ecd4:	460c      	mov	r4, r1
  Coordinate location = mount.getMountPosition(CR_MOUNT);
    ecd6:	2200      	movs	r2, #0
    ecd8:	4911      	ldr	r1, [pc, #68]	; (ed20 <Guide::axis2AutoSlew(GuideAction)+0x50>)
    ecda:	4668      	mov	r0, sp
    ecdc:	f7fa f906 	bl	8eec <Mount::getMountPosition(CoordReturn)>
  if (location.pierSide == PIER_SIDE_WEST) {
    ece0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    ece4:	2b02      	cmp	r3, #2
    ece6:	d005      	beq.n	ecf4 <Guide::axis2AutoSlew(GuideAction)+0x24>
    if (guideAction == GA_REVERSE) axis2.autoSlew(DIR_FORWARD); else
      if (guideAction == GA_FORWARD) axis2.autoSlew(DIR_REVERSE);
  } else {
    if (guideAction == GA_REVERSE) axis2.autoSlew(DIR_REVERSE); else
    ece8:	2c03      	cmp	r4, #3
    ecea:	d007      	beq.n	ecfc <Guide::axis2AutoSlew(GuideAction)+0x2c>
      if (guideAction == GA_FORWARD) axis2.autoSlew(DIR_FORWARD);
    ecec:	2c02      	cmp	r4, #2
    ecee:	d00e      	beq.n	ed0e <Guide::axis2AutoSlew(GuideAction)+0x3e>
  }
}
    ecf0:	b016      	add	sp, #88	; 0x58
    ecf2:	bd10      	pop	{r4, pc}
    if (guideAction == GA_REVERSE) axis2.autoSlew(DIR_FORWARD); else
    ecf4:	2c03      	cmp	r4, #3
    ecf6:	d00a      	beq.n	ed0e <Guide::axis2AutoSlew(GuideAction)+0x3e>
      if (guideAction == GA_FORWARD) axis2.autoSlew(DIR_REVERSE);
    ecf8:	2c02      	cmp	r4, #2
    ecfa:	d1f9      	bne.n	ecf0 <Guide::axis2AutoSlew(GuideAction)+0x20>
    ecfc:	ed9f 0a09 	vldr	s0, [pc, #36]	; ed24 <Guide::axis2AutoSlew(GuideAction)+0x54>
    ed00:	2102      	movs	r1, #2
    ed02:	4809      	ldr	r0, [pc, #36]	; (ed28 <Guide::axis2AutoSlew(GuideAction)+0x58>)
}
    ed04:	b016      	add	sp, #88	; 0x58
    ed06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (guideAction == GA_FORWARD) axis2.autoSlew(DIR_REVERSE);
    ed0a:	f7f2 bcff 	b.w	170c <Axis::autoSlew(Direction, float)>
    if (guideAction == GA_REVERSE) axis2.autoSlew(DIR_FORWARD); else
    ed0e:	ed9f 0a05 	vldr	s0, [pc, #20]	; ed24 <Guide::axis2AutoSlew(GuideAction)+0x54>
    ed12:	2101      	movs	r1, #1
      if (guideAction == GA_FORWARD) axis2.autoSlew(DIR_REVERSE);
    ed14:	4804      	ldr	r0, [pc, #16]	; (ed28 <Guide::axis2AutoSlew(GuideAction)+0x58>)
}
    ed16:	b016      	add	sp, #88	; 0x58
    ed18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (guideAction == GA_FORWARD) axis2.autoSlew(DIR_REVERSE);
    ed1c:	f7f2 bcf6 	b.w	170c <Axis::autoSlew(Direction, float)>
    ed20:	200054e0 	.word	0x200054e0
    ed24:	7fc00000 	.word	0x7fc00000
    ed28:	200051a8 	.word	0x200051a8
    ed2c:	00000000 	.word	0x00000000

0000ed30 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)>:
CommandError Guide::startAxis2(GuideAction guideAction, GuideRateSelect rateSelect, unsigned long guideTimeLimit) {
    ed30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (guideAction == GA_NONE) return CE_NONE;
    ed34:	460c      	mov	r4, r1
CommandError Guide::startAxis2(GuideAction guideAction, GuideRateSelect rateSelect, unsigned long guideTimeLimit) {
    ed36:	ed2d 8b02 	vpush	{d8}
  if (guideAction == GA_NONE) return CE_NONE;
    ed3a:	2900      	cmp	r1, #0
    ed3c:	d058      	beq.n	edf0 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xc0>
  if (state == GU_HOME_GUIDE || state == GU_HOME_GUIDE_ABORT) return CE_NONE;
    ed3e:	7805      	ldrb	r5, [r0, #0]
    ed40:	4606      	mov	r6, r0
    ed42:	3d04      	subs	r5, #4
    ed44:	2d01      	cmp	r5, #1
    ed46:	d953      	bls.n	edf0 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xc0>
  CommandError e = validate(2, guideAction); // if successful always sets pierSide
    ed48:	4690      	mov	r8, r2
    ed4a:	460a      	mov	r2, r1
    ed4c:	2102      	movs	r1, #2
    ed4e:	461f      	mov	r7, r3
    ed50:	f7ff fe28 	bl	e9a4 <Guide::validate(int, GuideAction)>
  if (e != CE_NONE) return e;
    ed54:	4605      	mov	r5, r0
    ed56:	2800      	cmp	r0, #0
    ed58:	d14b      	bne.n	edf2 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xc2>
  float rate = rateSelectToRate(rateSelect, 2);
    ed5a:	2202      	movs	r2, #2
    ed5c:	4641      	mov	r1, r8
    ed5e:	4630      	mov	r0, r6
  guideActionAxis2 = guideAction;
    ed60:	7474      	strb	r4, [r6, #17]
  float rate = rateSelectToRate(rateSelect, 2);
    ed62:	f7ff fc8d 	bl	e680 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)>
      case GR_MAX: return radToDegF(goTo.rate)*240.0F;
    ed66:	4b3a      	ldr	r3, [pc, #232]	; (ee50 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x120>)
  if (rate <= 2) {
    ed68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
      case GR_MAX: return radToDegF(goTo.rate)*240.0F;
    ed6c:	ed93 7a01 	vldr	s14, [r3, #4]
    ed70:	4b38      	ldr	r3, [pc, #224]	; (ee54 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x124>)
    ed72:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    ed76:	681b      	ldr	r3, [r3, #0]
    ed78:	ed9f 4b31 	vldr	d4, [pc, #196]	; ee40 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x110>
    ed7c:	ed9f 5b32 	vldr	d5, [pc, #200]	; ee48 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x118>
    ed80:	ee27 7b04 	vmul.f64	d7, d7, d4
    ed84:	ee27 7b05 	vmul.f64	d7, d7, d5
    ed88:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  if (rate > fastestRate) rate = fastestRate;
    ed8c:	eeb4 0a47 	vcmp.f32	s0, s14
    ed90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed94:	fe37 8a00 	vselgt.f32	s16, s14, s0
  if (guideTimeLimit == 0) guideTimeLimit = 0x1FFFFFFF;
    ed98:	2f00      	cmp	r7, #0
  if (rate <= 2) {
    ed9a:	eeb4 8ae6 	vcmpe.f32	s16, s13
  if (guideTimeLimit == 0) guideTimeLimit = 0x1FFFFFFF;
    ed9e:	bf08      	it	eq
    eda0:	f06f 4760 	mvneq.w	r7, #3758096384	; 0xe0000000
  if (rate <= 2) {
    eda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  guideFinishTimeAxis2 = millis() + guideTimeLimit;
    eda8:	443b      	add	r3, r7
    edaa:	62b3      	str	r3, [r6, #40]	; 0x28
  if (rate <= 2) {
    edac:	d926      	bls.n	edfc <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xcc>
    if (rateSelect != GR_CUSTOM) {
    edae:	f1b8 0f0a 	cmp.w	r8, #10
    state = GU_GUIDE;
    edb2:	7032      	strb	r2, [r6, #0]
    if (rateSelect != GR_CUSTOM) {
    edb4:	d008      	beq.n	edc8 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x98>
      if (guideAction == GA_REVERSE) rate -= mount.trackingRateAxis2; else rate += mount.trackingRateAxis2;
    edb6:	4b28      	ldr	r3, [pc, #160]	; (ee58 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x128>)
    edb8:	2c03      	cmp	r4, #3
    edba:	edd3 7a03 	vldr	s15, [r3, #12]
    edbe:	bf0c      	ite	eq
    edc0:	ee38 8a67 	vsubeq.f32	s16, s16, s15
    edc4:	ee38 8a27 	vaddne.f32	s16, s16, s15
    axis2.setFrequencySlew(degToRadF(rate/240.0F));
    edc8:	ed9f 7a24 	vldr	s14, [pc, #144]	; ee5c <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x12c>
    edcc:	eddf 7a24 	vldr	s15, [pc, #144]	; ee60 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x130>
    edd0:	ee88 0a07 	vdiv.f32	s0, s16, s14
    edd4:	4823      	ldr	r0, [pc, #140]	; (ee64 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x134>)
    edd6:	ee80 0a27 	vdiv.f32	s0, s0, s15
    edda:	f7f2 fab1 	bl	1340 <Axis::setFrequencySlew(float)>
    axis2AutoSlew(guideAction);
    edde:	4630      	mov	r0, r6
    ede0:	4621      	mov	r1, r4
    ede2:	f7ff ff75 	bl	ecd0 <Guide::axis2AutoSlew(GuideAction)>
}
    ede6:	4628      	mov	r0, r5
    ede8:	ecbd 8b02 	vpop	{d8}
    edec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (guideAction == GA_NONE) return CE_NONE;
    edf0:	2500      	movs	r5, #0
}
    edf2:	4628      	mov	r0, r5
    edf4:	ecbd 8b02 	vpop	{d8}
    edf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    axis1.setPowerDownOverrideTime(300000UL);
    edfc:	491a      	ldr	r1, [pc, #104]	; (ee68 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x138>)
    edfe:	481b      	ldr	r0, [pc, #108]	; (ee6c <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x13c>)
    ee00:	f7f2 f90e 	bl	1020 <Axis::setPowerDownOverrideTime(int)>
    axis2.setPowerDownOverrideTime(300000UL);
    ee04:	4918      	ldr	r1, [pc, #96]	; (ee68 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x138>)
    ee06:	4817      	ldr	r0, [pc, #92]	; (ee64 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x134>)
    ee08:	f7f2 f90a 	bl	1020 <Axis::setPowerDownOverrideTime(int)>
  if (rate <= 2 && rateSelect != GR_CUSTOM) {
    ee0c:	f1b8 0f0a 	cmp.w	r8, #10
    ee10:	d011      	beq.n	ee36 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x106>
    if (pierSide == PIER_SIDE_WEST) { if (guideAction == GA_FORWARD) guideAction = GA_REVERSE; else guideAction = GA_FORWARD; };
    ee12:	7cb3      	ldrb	r3, [r6, #18]
    state = GU_PULSE_GUIDE;
    ee14:	2201      	movs	r2, #1
    if (pierSide == PIER_SIDE_WEST) { if (guideAction == GA_FORWARD) guideAction = GA_REVERSE; else guideAction = GA_FORWARD; };
    ee16:	2b02      	cmp	r3, #2
    state = GU_PULSE_GUIDE;
    ee18:	7032      	strb	r2, [r6, #0]
    if (pierSide == PIER_SIDE_WEST) { if (guideAction == GA_FORWARD) guideAction = GA_REVERSE; else guideAction = GA_FORWARD; };
    ee1a:	d007      	beq.n	ee2c <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xfc>
    if (guideAction == GA_REVERSE) { VF("MSG: Guide, Axis2 rev @"); rateAxis2 = -rate; } else { VF("MSG: Guide, Axis2 fwd @"); rateAxis2 = rate; }
    ee1c:	2c03      	cmp	r4, #3
    ee1e:	d007      	beq.n	ee30 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x100>
    mount.update();
    ee20:	480d      	ldr	r0, [pc, #52]	; (ee58 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x128>)
    ee22:	ed86 8a02 	vstr	s16, [r6, #8]
    ee26:	f7f9 fd5f 	bl	88e8 <Mount::update()>
    ee2a:	e7e2      	b.n	edf2 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xc2>
    if (pierSide == PIER_SIDE_WEST) { if (guideAction == GA_FORWARD) guideAction = GA_REVERSE; else guideAction = GA_FORWARD; };
    ee2c:	2c02      	cmp	r4, #2
    ee2e:	d1f7      	bne.n	ee20 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xf0>
    if (guideAction == GA_REVERSE) { VF("MSG: Guide, Axis2 rev @"); rateAxis2 = -rate; } else { VF("MSG: Guide, Axis2 fwd @"); rateAxis2 = rate; }
    ee30:	eeb1 8a48 	vneg.f32	s16, s16
    ee34:	e7f4      	b.n	ee20 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0xf0>
    state = GU_GUIDE;
    ee36:	2302      	movs	r3, #2
    ee38:	7033      	strb	r3, [r6, #0]
    if (rateSelect != GR_CUSTOM) {
    ee3a:	e7c5      	b.n	edc8 <Guide::startAxis2(GuideAction, GuideRateSelect, unsigned long)+0x98>
    ee3c:	f3af 8000 	nop.w
    ee40:	20000000 	.word	0x20000000
    ee44:	404ca5dc 	.word	0x404ca5dc
    ee48:	00000000 	.word	0x00000000
    ee4c:	406e0000 	.word	0x406e0000
    ee50:	20005270 	.word	0x20005270
    ee54:	20006344 	.word	0x20006344
    ee58:	200054e0 	.word	0x200054e0
    ee5c:	43700000 	.word	0x43700000
    ee60:	42652ee1 	.word	0x42652ee1
    ee64:	200051a8 	.word	0x200051a8
    ee68:	000493e0 	.word	0x000493e0
    ee6c:	200050e8 	.word	0x200050e8

0000ee70 <Guide::spiralPoll()>:
    ee70:	4b69      	ldr	r3, [pc, #420]	; (f018 <Guide::spiralPoll()+0x1a8>)
void Guide::spiralPoll() {
  // current elapsed time in seconds
  float T = ((long)(millis() - spiralStartTime))/1000.0;

  // actual rate we'll be using (in sidereal X)
  float rate = rateSelectToRate(spiralGuideRateSelect);
    ee72:	2201      	movs	r2, #1
  float T = ((long)(millis() - spiralStartTime))/1000.0;
    ee74:	6a01      	ldr	r1, [r0, #32]
    ee76:	681b      	ldr	r3, [r3, #0]
    ee78:	1a5b      	subs	r3, r3, r1
  float rate = rateSelectToRate(spiralGuideRateSelect);
    ee7a:	7bc1      	ldrb	r1, [r0, #15]
  float T = ((long)(millis() - spiralStartTime))/1000.0;
    ee7c:	ee07 3a90 	vmov	s15, r3
    ee80:	ed9f 6b5b 	vldr	d6, [pc, #364]	; eff0 <Guide::spiralPoll()+0x180>
    ee84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
void Guide::spiralPoll() {
    ee88:	b510      	push	{r4, lr}
  float T = ((long)(millis() - spiralStartTime))/1000.0;
    ee8a:	ee87 0b06 	vdiv.f64	d0, d7, d6
void Guide::spiralPoll() {
    ee8e:	4604      	mov	r4, r0
    ee90:	ed2d 8b06 	vpush	{d8-d10}
      case GR_MAX: return radToDegF(goTo.rate)*240.0F;
    ee94:	ed9f 2b58 	vldr	d2, [pc, #352]	; eff8 <Guide::spiralPoll()+0x188>
    ee98:	ed9f 3b59 	vldr	d3, [pc, #356]	; f000 <Guide::spiralPoll()+0x190>
  float T = ((long)(millis() - spiralStartTime))/1000.0;
    ee9c:	eef7 4bc0 	vcvt.f32.f64	s9, d0
  float rate = rateSelectToRate(spiralGuideRateSelect);
    eea0:	f7ff fbee 	bl	e680 <Guide::rateSelectToRate(GuideRateSelect, unsigned char)>
      case GR_MAX: return radToDegF(goTo.rate)*240.0F;
    eea4:	4b5d      	ldr	r3, [pc, #372]	; (f01c <Guide::spiralPoll()+0x1ac>)
  float maxRate = rateSelectToRate(GR_MAX);
  if (rate > maxRate/2.0) rate = maxRate/2.0;
    eea6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    eeaa:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
      case GR_MAX: return radToDegF(goTo.rate)*240.0F;
    eeae:	ed93 7a01 	vldr	s14, [r3, #4]
    eeb2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    eeb6:	ee27 7b02 	vmul.f64	d7, d7, d2
    eeba:	ee27 7b03 	vmul.f64	d7, d7, d3
    eebe:	eef7 8bc7 	vcvt.f32.f64	s17, d7
  if (rate > maxRate/2.0) rate = maxRate/2.0;
    eec2:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
    eec6:	ee27 7b05 	vmul.f64	d7, d7, d5
    eeca:	eeb4 6bc7 	vcmpe.f64	d6, d7
    eece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eed2:	dd71      	ble.n	efb8 <Guide::spiralPoll()+0x148>
    eed4:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    eed8:	ee28 9a89 	vmul.f32	s18, s17, s18
  float fastestRate = rateSelectToRate(GR_MAX, 2)*((float)(AXIS2_SLEW_RATE_PERCENT)/100.0F);
  if (rate > fastestRate) rate = fastestRate;
    eedc:	eeb4 9a68 	vcmp.f32	s18, s17
  
  // apparaent FOV (in arc-seconds) = rate*15.0*2.0;
  // current radius assuming movement at 2 seconds per fov
  double radius = pow(T/6.28318, 1.0/1.74);
    eee0:	eeb7 0ae4 	vcvt.f64.f32	d0, s9
    eee4:	ed9f ab48 	vldr	d10, [pc, #288]	; f008 <Guide::spiralPoll()+0x198>
  if (rate > fastestRate) rate = fastestRate;
    eee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  double radius = pow(T/6.28318, 1.0/1.74);
    eeec:	ed9f 1b48 	vldr	d1, [pc, #288]	; f010 <Guide::spiralPoll()+0x1a0>
    eef0:	ee80 0b0a 	vdiv.f64	d0, d0, d10
  if (rate > fastestRate) rate = fastestRate;
    eef4:	fe38 9a89 	vselgt.f32	s18, s17, s18
  double radius = pow(T/6.28318, 1.0/1.74);
    eef8:	f00b f8f2 	bl	1a0e0 <pow>

  // current angle in radians
  float angle = (radius - trunc(radius))*6.28318;
    eefc:	eeb6 7bc0 	vrintz.f64	d7, d0
    ef00:	ee30 7b47 	vsub.f64	d7, d0, d7
    ef04:	ee27 7b0a 	vmul.f64	d7, d7, d10
    ef08:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  { return __builtin_cosf(__x); }
    ef0c:	eeb0 0a48 	vmov.f32	s0, s16
    ef10:	f00b fcaa 	bl	1a868 <cosf>
    ef14:	eef0 7a40 	vmov.f32	s15, s0
  { return __builtin_sinf(__x); }
    ef18:	eeb0 0a48 	vmov.f32	s0, s16
  { return __builtin_cosf(__x); }
    ef1c:	eeb0 8a67 	vmov.f32	s16, s15
  { return __builtin_sinf(__x); }
    ef20:	f00b fb9e 	bl	1a660 <sinf>
  // calculate the Axis rates for this moment (in sidereal X)
  customRateAxis1 = rate*cos(angle);
  customRateAxis2 = rate*sin(angle);

  // add the current tracking rates
  customRateAxis1 += mount.trackingRateAxis1;
    ef24:	4b3e      	ldr	r3, [pc, #248]	; (f020 <Guide::spiralPoll()+0x1b0>)
  customRateAxis2 += mount.trackingRateAxis2;

  // set any new directions
  guideActionAxis1 = GA_FORWARD;
    ef26:	f240 2202 	movw	r2, #514	; 0x202
  customRateAxis1 += mount.trackingRateAxis1;
    ef2a:	ed93 7a02 	vldr	s14, [r3, #8]
  customRateAxis2 += mount.trackingRateAxis2;
    ef2e:	edd3 7a03 	vldr	s15, [r3, #12]
  customRateAxis1 += mount.trackingRateAxis1;
    ef32:	eea9 7a08 	vfma.f32	s14, s18, s16
  guideActionAxis1 = GA_FORWARD;
    ef36:	8222      	strh	r2, [r4, #16]
  customRateAxis2 += mount.trackingRateAxis2;
    ef38:	eee9 7a00 	vfma.f32	s15, s18, s0
  guideActionAxis2 = GA_FORWARD;
  if (customRateAxis1 < 0) { customRateAxis1 = fabs(customRateAxis1); guideActionAxis1 = GA_REVERSE; }
    ef3c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
  customRateAxis1 += mount.trackingRateAxis1;
    ef40:	ed84 7a05 	vstr	s14, [r4, #20]
  customRateAxis2 += mount.trackingRateAxis2;
    ef44:	edc4 7a06 	vstr	s15, [r4, #24]
  if (customRateAxis1 < 0) { customRateAxis1 = fabs(customRateAxis1); guideActionAxis1 = GA_REVERSE; }
    ef48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef4c:	d437      	bmi.n	efbe <Guide::spiralPoll()+0x14e>
  if (customRateAxis2 < 0) { customRateAxis2 = fabs(customRateAxis2); guideActionAxis2 = GA_REVERSE; }
    ef4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef56:	d505      	bpl.n	ef64 <Guide::spiralPoll()+0xf4>
  { return __builtin_fabsf(__x); }
    ef58:	eef0 7ae7 	vabs.f32	s15, s15
    ef5c:	2303      	movs	r3, #3
    ef5e:	7463      	strb	r3, [r4, #17]
    ef60:	edc4 7a06 	vstr	s15, [r4, #24]
    if (guideAction == GA_FORWARD) axis1.autoSlew(DIR_FORWARD);
    ef64:	2101      	movs	r1, #1
    ef66:	ed9f 0a2f 	vldr	s0, [pc, #188]	; f024 <Guide::spiralPoll()+0x1b4>
    ef6a:	482f      	ldr	r0, [pc, #188]	; (f028 <Guide::spiralPoll()+0x1b8>)
    ef6c:	f7f2 fbce 	bl	170c <Axis::autoSlew(Direction, float)>
  axis1AutoSlew(guideActionAxis1);
  axis2AutoSlew(guideActionAxis2);
    ef70:	7c61      	ldrb	r1, [r4, #17]
    ef72:	4620      	mov	r0, r4
  // shape of the spiral will degrade to an 2:1 aspect oval at half max rate (fastest allowed) and |Axis2| = 75 deg
  customRateAxis1 /= spiralScaleAxis1;
  if (customRateAxis1 > maxRate) customRateAxis1 = maxRate;

  // set the new guide rates
  axis1.setFrequencySlew(siderealToRadF(customRateAxis1));
    ef74:	ed9f 8a2d 	vldr	s16, [pc, #180]	; f02c <Guide::spiralPoll()+0x1bc>
  axis2AutoSlew(guideActionAxis2);
    ef78:	f7ff feaa 	bl	ecd0 <Guide::axis2AutoSlew(GuideAction)>
  customRateAxis1 /= spiralScaleAxis1;
    ef7c:	edd4 6a05 	vldr	s13, [r4, #20]
    ef80:	ed94 7a07 	vldr	s14, [r4, #28]
  axis1.setFrequencySlew(siderealToRadF(customRateAxis1));
    ef84:	4828      	ldr	r0, [pc, #160]	; (f028 <Guide::spiralPoll()+0x1b8>)
  customRateAxis1 /= spiralScaleAxis1;
    ef86:	eec6 7a87 	vdiv.f32	s15, s13, s14
  if (customRateAxis1 > maxRate) customRateAxis1 = maxRate;
    ef8a:	eef4 7ae8 	vcmpe.f32	s15, s17
    ef8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef92:	fe78 8aa7 	vselgt.f32	s17, s17, s15
  axis1.setFrequencySlew(siderealToRadF(customRateAxis1));
    ef96:	ee88 0a88 	vdiv.f32	s0, s17, s16
    ef9a:	edc4 8a05 	vstr	s17, [r4, #20]
    ef9e:	f7f2 f9cf 	bl	1340 <Axis::setFrequencySlew(float)>
  axis2.setFrequencySlew(siderealToRadF(customRateAxis2));
    efa2:	ed94 0a06 	vldr	s0, [r4, #24]
    efa6:	4822      	ldr	r0, [pc, #136]	; (f030 <Guide::spiralPoll()+0x1c0>)
    efa8:	ee80 0a08 	vdiv.f32	s0, s0, s16
}
    efac:	ecbd 8b06 	vpop	{d8-d10}
    efb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  axis2.setFrequencySlew(siderealToRadF(customRateAxis2));
    efb4:	f7f2 b9c4 	b.w	1340 <Axis::setFrequencySlew(float)>
    efb8:	eeb0 9a40 	vmov.f32	s18, s0
    efbc:	e78e      	b.n	eedc <Guide::spiralPoll()+0x6c>
  if (customRateAxis2 < 0) { customRateAxis2 = fabs(customRateAxis2); guideActionAxis2 = GA_REVERSE; }
    efbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  if (customRateAxis1 < 0) { customRateAxis1 = fabs(customRateAxis1); guideActionAxis1 = GA_REVERSE; }
    efc2:	2303      	movs	r3, #3
    efc4:	eeb0 7ac7 	vabs.f32	s14, s14
    efc8:	7423      	strb	r3, [r4, #16]
  if (customRateAxis2 < 0) { customRateAxis2 = fabs(customRateAxis2); guideActionAxis2 = GA_REVERSE; }
    efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  if (customRateAxis1 < 0) { customRateAxis1 = fabs(customRateAxis1); guideActionAxis1 = GA_REVERSE; }
    efce:	ed84 7a05 	vstr	s14, [r4, #20]
  if (customRateAxis2 < 0) { customRateAxis2 = fabs(customRateAxis2); guideActionAxis2 = GA_REVERSE; }
    efd2:	d504      	bpl.n	efde <Guide::spiralPoll()+0x16e>
    efd4:	eef0 7ae7 	vabs.f32	s15, s15
    efd8:	7463      	strb	r3, [r4, #17]
    efda:	edc4 7a06 	vstr	s15, [r4, #24]
  if (guideAction == GA_REVERSE) axis1.autoSlew(DIR_REVERSE); else
    efde:	2102      	movs	r1, #2
    efe0:	ed9f 0a10 	vldr	s0, [pc, #64]	; f024 <Guide::spiralPoll()+0x1b4>
    efe4:	4810      	ldr	r0, [pc, #64]	; (f028 <Guide::spiralPoll()+0x1b8>)
    efe6:	f7f2 fb91 	bl	170c <Axis::autoSlew(Direction, float)>
  axis2AutoSlew(guideActionAxis2);
    efea:	7c61      	ldrb	r1, [r4, #17]
    efec:	e7c1      	b.n	ef72 <Guide::spiralPoll()+0x102>
    efee:	bf00      	nop
    eff0:	00000000 	.word	0x00000000
    eff4:	408f4000 	.word	0x408f4000
    eff8:	20000000 	.word	0x20000000
    effc:	404ca5dc 	.word	0x404ca5dc
    f000:	00000000 	.word	0x00000000
    f004:	406e0000 	.word	0x406e0000
    f008:	f01b866e 	.word	0xf01b866e
    f00c:	401921f9 	.word	0x401921f9
    f010:	c52640bc 	.word	0xc52640bc
    f014:	3fe2640b 	.word	0x3fe2640b
    f018:	20006344 	.word	0x20006344
    f01c:	20005270 	.word	0x20005270
    f020:	200054e0 	.word	0x200054e0
    f024:	7fc00000 	.word	0x7fc00000
    f028:	200050e8 	.word	0x200050e8
    f02c:	4656dbf3 	.word	0x4656dbf3
    f030:	200051a8 	.word	0x200051a8

0000f034 <Guide::poll() [clone .part.0]>:
void Guide::poll() {
  // just return if no guide is active
  if (state == GU_NONE) return;

  // check fast guide completion axis1
  if (guideActionAxis1 == GA_BREAK && rateAxis1 == 0.0F && !axis1.isSlewing()) {
    f034:	7c03      	ldrb	r3, [r0, #16]
    f036:	2b01      	cmp	r3, #1
void Guide::poll() {
    f038:	b510      	push	{r4, lr}
    f03a:	4604      	mov	r4, r0
  if (guideActionAxis1 == GA_BREAK && rateAxis1 == 0.0F && !axis1.isSlewing()) {
    f03c:	d04d      	beq.n	f0da <Guide::poll() [clone .part.0]+0xa6>
    guideActionAxis1 = GA_NONE;
    mount.update();
  } else {
    if (guideActionAxis1 > GA_BREAK && (long)(millis() - guideFinishTimeAxis1) >= 0) stopAxis1();
    f03e:	2b01      	cmp	r3, #1
    f040:	d905      	bls.n	f04e <Guide::poll() [clone .part.0]+0x1a>
    f042:	4b5b      	ldr	r3, [pc, #364]	; (f1b0 <Guide::poll() [clone .part.0]+0x17c>)
    f044:	6a62      	ldr	r2, [r4, #36]	; 0x24
    f046:	681b      	ldr	r3, [r3, #0]
    f048:	1a9b      	subs	r3, r3, r2
    f04a:	2b00      	cmp	r3, #0
    f04c:	da25      	bge.n	f09a <Guide::poll() [clone .part.0]+0x66>
  }

  // check fast guide completion axis2
  if (guideActionAxis2 == GA_BREAK && rateAxis2 == 0.0F && !axis2.isSlewing()) {
    f04e:	7c63      	ldrb	r3, [r4, #17]
    f050:	2b01      	cmp	r3, #1
    f052:	d033      	beq.n	f0bc <Guide::poll() [clone .part.0]+0x88>
    guideActionAxis2 = GA_NONE;
    mount.update();
  } else {
    if (guideActionAxis2 > GA_BREAK && (long)(millis() - guideFinishTimeAxis2) >= 0) stopAxis2();
    f054:	2b01      	cmp	r3, #1
    f056:	d905      	bls.n	f064 <Guide::poll() [clone .part.0]+0x30>
    f058:	4b55      	ldr	r3, [pc, #340]	; (f1b0 <Guide::poll() [clone .part.0]+0x17c>)
    f05a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f05c:	681b      	ldr	r3, [r3, #0]
    f05e:	1a9b      	subs	r3, r3, r2
    f060:	2b00      	cmp	r3, #0
    f062:	da09      	bge.n	f078 <Guide::poll() [clone .part.0]+0x44>
  }

  // do spiral guiding, change rates and stop both axes at once
  if (state == GU_SPIRAL_GUIDE) {
    f064:	7823      	ldrb	r3, [r4, #0]
    f066:	2b03      	cmp	r3, #3
    f068:	d046      	beq.n	f0f8 <Guide::poll() [clone .part.0]+0xc4>
    if (guideActionAxis1 > GA_BREAK && guideActionAxis2 > GA_BREAK) spiralPoll(); else
    if (guideActionAxis1 > GA_BREAK || guideActionAxis2 > GA_BREAK) stop();
  }

  // handle end of home guiding
  if ((state == GU_HOME_GUIDE || state == GU_HOME_GUIDE_ABORT) && !mount.isSlewing()) {
    f06a:	3b04      	subs	r3, #4
    f06c:	2b01      	cmp	r3, #1
    f06e:	d950      	bls.n	f112 <Guide::poll() [clone .part.0]+0xde>
      home.guideDone(false);
    }
  }

  // watch for finished guides
  if (guideActionAxis1 == GA_NONE && guideActionAxis2 == GA_NONE) state = GU_NONE;
    f070:	8a23      	ldrh	r3, [r4, #16]
    f072:	b903      	cbnz	r3, f076 <Guide::poll() [clone .part.0]+0x42>
    f074:	7023      	strb	r3, [r4, #0]
}
    f076:	bd10      	pop	{r4, pc}
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    f078:	7823      	ldrb	r3, [r4, #0]
    f07a:	2b04      	cmp	r3, #4
    f07c:	d06d      	beq.n	f15a <Guide::poll() [clone .part.0]+0x126>
    if (rateAxis2 == 0.0F) {
    f07e:	edd4 7a02 	vldr	s15, [r4, #8]
    f082:	2300      	movs	r3, #0
    f084:	eef5 7a40 	vcmp.f32	s15, #0.0
    f088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f08c:	d176      	bne.n	f17c <Guide::poll() [clone .part.0]+0x148>
      guideActionAxis2 = GA_BREAK;
    f08e:	2301      	movs	r3, #1
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    f090:	4848      	ldr	r0, [pc, #288]	; (f1b4 <Guide::poll() [clone .part.0]+0x180>)
      guideActionAxis2 = GA_BREAK;
    f092:	7463      	strb	r3, [r4, #17]
      if (abort) axis2.autoSlewAbort(); else axis2.autoSlewStop();
    f094:	f7f2 fe94 	bl	1dc0 <Axis::autoSlewStop()>
    f098:	e7e4      	b.n	f064 <Guide::poll() [clone .part.0]+0x30>
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    f09a:	7823      	ldrb	r3, [r4, #0]
    f09c:	2b04      	cmp	r3, #4
    f09e:	d058      	beq.n	f152 <Guide::poll() [clone .part.0]+0x11e>
    if (rateAxis1 == 0.0F) {
    f0a0:	edd4 7a01 	vldr	s15, [r4, #4]
    f0a4:	2300      	movs	r3, #0
    f0a6:	eef5 7a40 	vcmp.f32	s15, #0.0
    f0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f0ae:	d16c      	bne.n	f18a <Guide::poll() [clone .part.0]+0x156>
      guideActionAxis1 = GA_BREAK;
    f0b0:	2301      	movs	r3, #1
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    f0b2:	4841      	ldr	r0, [pc, #260]	; (f1b8 <Guide::poll() [clone .part.0]+0x184>)
      guideActionAxis1 = GA_BREAK;
    f0b4:	7423      	strb	r3, [r4, #16]
      if (abort) axis1.autoSlewAbort(); else axis1.autoSlewStop();
    f0b6:	f7f2 fe83 	bl	1dc0 <Axis::autoSlewStop()>
    f0ba:	e7c8      	b.n	f04e <Guide::poll() [clone .part.0]+0x1a>
  if (guideActionAxis2 == GA_BREAK && rateAxis2 == 0.0F && !axis2.isSlewing()) {
    f0bc:	edd4 7a02 	vldr	s15, [r4, #8]
    f0c0:	eef5 7a40 	vcmp.f32	s15, #0.0
    f0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f0c8:	d1cc      	bne.n	f064 <Guide::poll() [clone .part.0]+0x30>
    f0ca:	483a      	ldr	r0, [pc, #232]	; (f1b4 <Guide::poll() [clone .part.0]+0x180>)
    f0cc:	f7f2 f92e 	bl	132c <Axis::isSlewing()>
    f0d0:	4603      	mov	r3, r0
    f0d2:	2800      	cmp	r0, #0
    f0d4:	d04d      	beq.n	f172 <Guide::poll() [clone .part.0]+0x13e>
    if (guideActionAxis2 > GA_BREAK && (long)(millis() - guideFinishTimeAxis2) >= 0) stopAxis2();
    f0d6:	7c63      	ldrb	r3, [r4, #17]
    f0d8:	e7bc      	b.n	f054 <Guide::poll() [clone .part.0]+0x20>
  if (guideActionAxis1 == GA_BREAK && rateAxis1 == 0.0F && !axis1.isSlewing()) {
    f0da:	edd0 7a01 	vldr	s15, [r0, #4]
    f0de:	eef5 7a40 	vcmp.f32	s15, #0.0
    f0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f0e6:	d1b2      	bne.n	f04e <Guide::poll() [clone .part.0]+0x1a>
    f0e8:	4833      	ldr	r0, [pc, #204]	; (f1b8 <Guide::poll() [clone .part.0]+0x184>)
    f0ea:	f7f2 f91f 	bl	132c <Axis::isSlewing()>
    f0ee:	4603      	mov	r3, r0
    f0f0:	2800      	cmp	r0, #0
    f0f2:	d039      	beq.n	f168 <Guide::poll() [clone .part.0]+0x134>
    if (guideActionAxis1 > GA_BREAK && (long)(millis() - guideFinishTimeAxis1) >= 0) stopAxis1();
    f0f4:	7c23      	ldrb	r3, [r4, #16]
    f0f6:	e7a2      	b.n	f03e <Guide::poll() [clone .part.0]+0xa>
    if (guideActionAxis1 > GA_BREAK && guideActionAxis2 > GA_BREAK) spiralPoll(); else
    f0f8:	7c23      	ldrb	r3, [r4, #16]
    f0fa:	2b01      	cmp	r3, #1
    f0fc:	7c63      	ldrb	r3, [r4, #17]
    f0fe:	d930      	bls.n	f162 <Guide::poll() [clone .part.0]+0x12e>
    f100:	2b01      	cmp	r3, #1
    f102:	d821      	bhi.n	f148 <Guide::poll() [clone .part.0]+0x114>
    if (guideActionAxis1 > GA_BREAK || guideActionAxis2 > GA_BREAK) stop();
    f104:	4620      	mov	r0, r4
    f106:	f7ff fa71 	bl	e5ec <Guide::stop()>
  if ((state == GU_HOME_GUIDE || state == GU_HOME_GUIDE_ABORT) && !mount.isSlewing()) {
    f10a:	7823      	ldrb	r3, [r4, #0]
    f10c:	3b04      	subs	r3, #4
    f10e:	2b01      	cmp	r3, #1
    f110:	d8ae      	bhi.n	f070 <Guide::poll() [clone .part.0]+0x3c>
    f112:	4829      	ldr	r0, [pc, #164]	; (f1b8 <Guide::poll() [clone .part.0]+0x184>)
    f114:	f7f2 f90a 	bl	132c <Axis::isSlewing()>
    f118:	2800      	cmp	r0, #0
    f11a:	d1a9      	bne.n	f070 <Guide::poll() [clone .part.0]+0x3c>
    f11c:	4825      	ldr	r0, [pc, #148]	; (f1b4 <Guide::poll() [clone .part.0]+0x180>)
    f11e:	f7f2 f905 	bl	132c <Axis::isSlewing()>
    f122:	2800      	cmp	r0, #0
    f124:	d1a4      	bne.n	f070 <Guide::poll() [clone .part.0]+0x3c>
    f126:	4b25      	ldr	r3, [pc, #148]	; (f1bc <Guide::poll() [clone .part.0]+0x188>)
    guideActionAxis1 = GA_NONE;
    f128:	8220      	strh	r0, [r4, #16]
    f12a:	785a      	ldrb	r2, [r3, #1]
    f12c:	2a00      	cmp	r2, #0
    f12e:	d13a      	bne.n	f1a6 <Guide::poll() [clone .part.0]+0x172>
    f130:	4823      	ldr	r0, [pc, #140]	; (f1c0 <Guide::poll() [clone .part.0]+0x18c>)
    f132:	f7f6 fa9f 	bl	5674 <Sound::alert()>
    if (state == GU_HOME_GUIDE) {
    f136:	7823      	ldrb	r3, [r4, #0]
    f138:	2b04      	cmp	r3, #4
    f13a:	d02d      	beq.n	f198 <Guide::poll() [clone .part.0]+0x164>
      state = GU_NONE;
    f13c:	2100      	movs	r1, #0
      home.guideDone(false);
    f13e:	4821      	ldr	r0, [pc, #132]	; (f1c4 <Guide::poll() [clone .part.0]+0x190>)
      state = GU_NONE;
    f140:	7021      	strb	r1, [r4, #0]
      home.guideDone(false);
    f142:	f000 fb5d 	bl	f800 <Home::guideDone(bool)>
    f146:	e793      	b.n	f070 <Guide::poll() [clone .part.0]+0x3c>
    if (guideActionAxis1 > GA_BREAK && guideActionAxis2 > GA_BREAK) spiralPoll(); else
    f148:	4620      	mov	r0, r4
    f14a:	f7ff fe91 	bl	ee70 <Guide::spiralPoll()>
  if ((state == GU_HOME_GUIDE || state == GU_HOME_GUIDE_ABORT) && !mount.isSlewing()) {
    f14e:	7823      	ldrb	r3, [r4, #0]
    if (guideActionAxis1 > GA_BREAK && guideActionAxis2 > GA_BREAK) spiralPoll(); else
    f150:	e78b      	b.n	f06a <Guide::poll() [clone .part.0]+0x36>
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    f152:	4620      	mov	r0, r4
    f154:	f7ff f9ae 	bl	e4b4 <Guide::abort()>
    f158:	e779      	b.n	f04e <Guide::poll() [clone .part.0]+0x1a>
  if (state == GU_HOME_GUIDE && !abort) { this->abort(); return; }
    f15a:	4620      	mov	r0, r4
    f15c:	f7ff f9aa 	bl	e4b4 <Guide::abort()>
    f160:	e780      	b.n	f064 <Guide::poll() [clone .part.0]+0x30>
    if (guideActionAxis1 > GA_BREAK || guideActionAxis2 > GA_BREAK) stop();
    f162:	2b01      	cmp	r3, #1
    f164:	d8ce      	bhi.n	f104 <Guide::poll() [clone .part.0]+0xd0>
    f166:	e783      	b.n	f070 <Guide::poll() [clone .part.0]+0x3c>
    mount.update();
    f168:	4817      	ldr	r0, [pc, #92]	; (f1c8 <Guide::poll() [clone .part.0]+0x194>)
    guideActionAxis1 = GA_NONE;
    f16a:	7423      	strb	r3, [r4, #16]
    mount.update();
    f16c:	f7f9 fbbc 	bl	88e8 <Mount::update()>
    f170:	e76d      	b.n	f04e <Guide::poll() [clone .part.0]+0x1a>
    mount.update();
    f172:	4815      	ldr	r0, [pc, #84]	; (f1c8 <Guide::poll() [clone .part.0]+0x194>)
    guideActionAxis2 = GA_NONE;
    f174:	7463      	strb	r3, [r4, #17]
    mount.update();
    f176:	f7f9 fbb7 	bl	88e8 <Mount::update()>
    f17a:	e773      	b.n	f064 <Guide::poll() [clone .part.0]+0x30>
      guideActionAxis2 = GA_NONE;
    f17c:	2200      	movs	r2, #0
      mount.update();
    f17e:	4812      	ldr	r0, [pc, #72]	; (f1c8 <Guide::poll() [clone .part.0]+0x194>)
      rateAxis2 = 0.0F;
    f180:	60a3      	str	r3, [r4, #8]
      guideActionAxis2 = GA_NONE;
    f182:	7462      	strb	r2, [r4, #17]
      mount.update();
    f184:	f7f9 fbb0 	bl	88e8 <Mount::update()>
    f188:	e76c      	b.n	f064 <Guide::poll() [clone .part.0]+0x30>
      guideActionAxis1 = GA_NONE;
    f18a:	2200      	movs	r2, #0
      mount.update();
    f18c:	480e      	ldr	r0, [pc, #56]	; (f1c8 <Guide::poll() [clone .part.0]+0x194>)
      rateAxis1 = 0.0F;
    f18e:	6063      	str	r3, [r4, #4]
      guideActionAxis1 = GA_NONE;
    f190:	7422      	strb	r2, [r4, #16]
      mount.update();
    f192:	f7f9 fba9 	bl	88e8 <Mount::update()>
    f196:	e75a      	b.n	f04e <Guide::poll() [clone .part.0]+0x1a>
      state = GU_NONE;
    f198:	2300      	movs	r3, #0
      home.guideDone(true);
    f19a:	2101      	movs	r1, #1
    f19c:	4809      	ldr	r0, [pc, #36]	; (f1c4 <Guide::poll() [clone .part.0]+0x190>)
      state = GU_NONE;
    f19e:	7023      	strb	r3, [r4, #0]
      home.guideDone(true);
    f1a0:	f000 fb2e 	bl	f800 <Home::guideDone(bool)>
    f1a4:	e764      	b.n	f070 <Guide::poll() [clone .part.0]+0x3c>
    f1a6:	4618      	mov	r0, r3
    f1a8:	f005 fcc8 	bl	14b3c <Status::wake()>
    f1ac:	e7c0      	b.n	f130 <Guide::poll() [clone .part.0]+0xfc>
    f1ae:	bf00      	nop
    f1b0:	20006344 	.word	0x20006344
    f1b4:	200051a8 	.word	0x200051a8
    f1b8:	200050e8 	.word	0x200050e8
    f1bc:	20005e4c 	.word	0x20005e4c
    f1c0:	20005e4d 	.word	0x20005e4d
    f1c4:	20005478 	.word	0x20005478
    f1c8:	200054e0 	.word	0x200054e0

0000f1cc <guideWrapper()>:
  if (state == GU_NONE) return;
    f1cc:	4802      	ldr	r0, [pc, #8]	; (f1d8 <guideWrapper()+0xc>)
    f1ce:	7803      	ldrb	r3, [r0, #0]
    f1d0:	b10b      	cbz	r3, f1d6 <guideWrapper()+0xa>
    f1d2:	f7ff bf2f 	b.w	f034 <Guide::poll() [clone .part.0]>
inline void guideWrapper() { guide.poll(); }
    f1d6:	4770      	bx	lr
    f1d8:	200043e8 	.word	0x200043e8

0000f1dc <Guide::startSpiral(GuideRateSelect, unsigned long)>:
  if (state == GU_SPIRAL_GUIDE) { stop(); return CE_NONE; }
    f1dc:	7803      	ldrb	r3, [r0, #0]
    f1de:	2b03      	cmp	r3, #3
CommandError Guide::startSpiral(GuideRateSelect rateSelect, unsigned long guideTimeLimit) {
    f1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1e2:	b097      	sub	sp, #92	; 0x5c
  if (state == GU_SPIRAL_GUIDE) { stop(); return CE_NONE; }
    f1e4:	d034      	beq.n	f250 <Guide::startSpiral(GuideRateSelect, unsigned long)+0x74>
  if (guideActionAxis1 != GA_NONE || guideActionAxis2 != GA_NONE) return CE_SLEW_IN_MOTION;
    f1e6:	460e      	mov	r6, r1
    f1e8:	8a01      	ldrh	r1, [r0, #16]
    f1ea:	4604      	mov	r4, r0
    f1ec:	bb61      	cbnz	r1, f248 <Guide::startSpiral(GuideRateSelect, unsigned long)+0x6c>
  CommandError e = validate(0, GA_SPIRAL); if (e != CE_NONE) return e;
    f1ee:	4615      	mov	r5, r2
    f1f0:	2204      	movs	r2, #4
    f1f2:	f7ff fbd7 	bl	e9a4 <Guide::validate(int, GuideAction)>
    f1f6:	4607      	mov	r7, r0
    f1f8:	bb18      	cbnz	r0, f242 <Guide::startSpiral(GuideRateSelect, unsigned long)+0x66>
  spiralGuideRateSelect = rateSelect;
    f1fa:	2e08      	cmp	r6, #8
    f1fc:	4631      	mov	r1, r6
    f1fe:	4b17      	ldr	r3, [pc, #92]	; (f25c <Guide::startSpiral(GuideRateSelect, unsigned long)+0x80>)
  Coordinate location = mount.getMountPosition(CR_MOUNT);
    f200:	4602      	mov	r2, r0
  spiralGuideRateSelect = rateSelect;
    f202:	bf28      	it	cs
    f204:	2108      	movcs	r1, #8
  Coordinate location = mount.getMountPosition(CR_MOUNT);
    f206:	4668      	mov	r0, sp
    f208:	681b      	ldr	r3, [r3, #0]
  spiralGuideRateSelect = rateSelect;
    f20a:	2903      	cmp	r1, #3
  spiralStartTime = millis();
    f20c:	6223      	str	r3, [r4, #32]
  spiralGuideRateSelect = rateSelect;
    f20e:	bf38      	it	cc
    f210:	2103      	movcc	r1, #3
  if (guideTimeLimit == 0) guideTimeLimit = 0x1FFFFFFF;
    f212:	2d00      	cmp	r5, #0
    f214:	bf08      	it	eq
    f216:	f06f 4560 	mvneq.w	r5, #3758096384	; 0xe0000000
  spiralGuideRateSelect = rateSelect;
    f21a:	73e1      	strb	r1, [r4, #15]
  Coordinate location = mount.getMountPosition(CR_MOUNT);
    f21c:	4910      	ldr	r1, [pc, #64]	; (f260 <Guide::startSpiral(GuideRateSelect, unsigned long)+0x84>)
  guideFinishTimeAxis1 = spiralStartTime + guideTimeLimit;
    f21e:	441d      	add	r5, r3
  guideFinishTimeAxis2 = guideFinishTimeAxis1;
    f220:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  Coordinate location = mount.getMountPosition(CR_MOUNT);
    f224:	f7f9 fe62 	bl	8eec <Mount::getMountPosition(CoordReturn)>
  spiralScaleAxis1 = cos(location.a2);
    f228:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
    f22c:	f00b ff40 	bl	1b0b0 <cos>
    f230:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  spiralPoll();
    f234:	4620      	mov	r0, r4
  spiralScaleAxis1 = cos(location.a2);
    f236:	ed84 0a07 	vstr	s0, [r4, #28]
  spiralPoll();
    f23a:	f7ff fe19 	bl	ee70 <Guide::spiralPoll()>
  state = GU_SPIRAL_GUIDE;
    f23e:	2303      	movs	r3, #3
    f240:	7023      	strb	r3, [r4, #0]
}
    f242:	4638      	mov	r0, r7
    f244:	b017      	add	sp, #92	; 0x5c
    f246:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (guideActionAxis1 != GA_NONE || guideActionAxis2 != GA_NONE) return CE_SLEW_IN_MOTION;
    f248:	2716      	movs	r7, #22
}
    f24a:	4638      	mov	r0, r7
    f24c:	b017      	add	sp, #92	; 0x5c
    f24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (state == GU_SPIRAL_GUIDE) { stop(); return CE_NONE; }
    f250:	2700      	movs	r7, #0
    f252:	f7ff f9cb 	bl	e5ec <Guide::stop()>
}
    f256:	4638      	mov	r0, r7
    f258:	b017      	add	sp, #92	; 0x5c
    f25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f25c:	20006344 	.word	0x20006344
    f260:	200054e0 	.word	0x200054e0

0000f264 <Guide::backlashEnableControl(bool)>:
    axis1.setBacklash(enable ? mount.settings.backlash.axis1 : 0.0F);
    axis2.setBacklash(enable ? mount.settings.backlash.axis2 : 0.0F);
  #else
    UNUSED(enable);
  #endif
}
    f264:	4770      	bx	lr
    f266:	bf00      	nop

0000f268 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "../park/Park.h"

bool Home::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
  UNUSED(reply);
  UNUSED(supressFrame);
  if (command[0] == 'h') {
    f268:	f892 c000 	ldrb.w	ip, [r2]
    f26c:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
    f270:	d11e      	bne.n	f2b0 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x48>
bool Home::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    f272:	b570      	push	{r4, r5, r6, lr}
    // :h?#       Get home status - has sense, auto home enabled, offset axis1, offset axis2 (in arcseconds.)
    //            Returns: n,n,n,n#
    if (command[1] == '?' && parameter[0] == 0) {
    f274:	7852      	ldrb	r2, [r2, #1]
bool Home::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    f276:	b082      	sub	sp, #8
    f278:	4604      	mov	r4, r0
    if (command[1] == '?' && parameter[0] == 0) {
    f27a:	2a3f      	cmp	r2, #63	; 0x3f
    f27c:	d01a      	beq.n	f2b4 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      *numericReply = false;
    } else

    // :hAn#      Set auto home state.
    //            Returns: Nothing
    if (command[1] == 'A' && parameter[1] == 0) {
    f27e:	2a41      	cmp	r2, #65	; 0x41
    f280:	d01d      	beq.n	f2be <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
      *numericReply = false;
    } else

    // :hC#       Moves mount to the home position
    //            Returns: Nothing
    if (command[1] == 'C' && parameter[0] == 0) {
    f282:	2a43      	cmp	r2, #67	; 0x43
    f284:	d031      	beq.n	f2ea <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x82>
    } else

    // :hF#       Reset mount at the home position.  This position is required for a cold Start.
    //            Point to the celestial pole.  GEM w/counterweights pointing downwards (CWD position).  Equatorial fork mounts at HA = 0.
    //            Returns: Nothing
    if (command[1] == 'F' && parameter[0] == 0) {
    f286:	2a46      	cmp	r2, #70	; 0x46
    f288:	d116      	bne.n	f2b8 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50>
    f28a:	781c      	ldrb	r4, [r3, #0]
    f28c:	b9a4      	cbnz	r4, f2b8 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50>
      *commandError = reset(true);
    f28e:	2101      	movs	r1, #1
    f290:	f000 fa90 	bl	f7b4 <Home::reset(bool)>
    f294:	9908      	ldr	r1, [sp, #32]

    // returns a parked telescope to operation
    CommandError restore(bool withTrackingOn);

    // resets park state, clears any errors but does not erase the park position
    inline void reset() { state = PS_UNPARKED; nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings)); }
    f296:	4a3c      	ldr	r2, [pc, #240]	; (f388 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x120>)
    f298:	230f      	movs	r3, #15
    f29a:	7008      	strb	r0, [r1, #0]
    f29c:	21e3      	movs	r1, #227	; 0xe3
    f29e:	483b      	ldr	r0, [pc, #236]	; (f38c <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x124>)
    f2a0:	f802 4b01 	strb.w	r4, [r2], #1
    f2a4:	f7f5 fee2 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
      park.reset();
      *numericReply = false;
    f2a8:	9b07      	ldr	r3, [sp, #28]
    } else return false;

  } else return false;

  return true;
    f2aa:	2001      	movs	r0, #1
      *numericReply = false;
    f2ac:	701c      	strb	r4, [r3, #0]
    f2ae:	e004      	b.n	f2ba <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52>
    } else return false;
    f2b0:	2000      	movs	r0, #0
}
    f2b2:	4770      	bx	lr
    if (command[1] == '?' && parameter[0] == 0) {
    f2b4:	781d      	ldrb	r5, [r3, #0]
    f2b6:	b36d      	cbz	r5, f314 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xac>
    } else return false;
    f2b8:	2000      	movs	r0, #0
}
    f2ba:	b002      	add	sp, #8
    f2bc:	bd70      	pop	{r4, r5, r6, pc}
    if (command[1] == 'A' && parameter[1] == 0) {
    f2be:	785a      	ldrb	r2, [r3, #1]
    f2c0:	2a00      	cmp	r2, #0
    f2c2:	d1f9      	bne.n	f2b8 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50>
      switch (parameter[0]) {
    f2c4:	781b      	ldrb	r3, [r3, #0]
    f2c6:	2b30      	cmp	r3, #48	; 0x30
    f2c8:	d04d      	beq.n	f366 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xfe>
    f2ca:	2b31      	cmp	r3, #49	; 0x31
    f2cc:	d130      	bne.n	f330 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc8>
        case '1': settings.automaticAtBoot = true; break;
    f2ce:	2301      	movs	r3, #1
    f2d0:	7043      	strb	r3, [r0, #1]
    f2d2:	1c62      	adds	r2, r4, #1
    f2d4:	230b      	movs	r3, #11
    f2d6:	21d8      	movs	r1, #216	; 0xd8
    f2d8:	482c      	ldr	r0, [pc, #176]	; (f38c <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x124>)
    f2da:	f7f5 fec7 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
      *numericReply = false;
    f2de:	2300      	movs	r3, #0
  return true;
    f2e0:	2001      	movs	r0, #1
      *numericReply = false;
    f2e2:	9a07      	ldr	r2, [sp, #28]
    f2e4:	7013      	strb	r3, [r2, #0]
}
    f2e6:	b002      	add	sp, #8
    f2e8:	bd70      	pop	{r4, r5, r6, pc}
    if (command[1] == 'C' && parameter[0] == 0) {
    f2ea:	781d      	ldrb	r5, [r3, #0]
    f2ec:	b325      	cbz	r5, f338 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd0>
    if (command[1] == 'C' && parameter[0] == '1' && parameter[1] == ',') {
    f2ee:	2d31      	cmp	r5, #49	; 0x31
    f2f0:	d02b      	beq.n	f34a <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xe2>
    if (command[1] == 'C' && parameter[0] == '2' && parameter[1] == ',') {
    f2f2:	2d32      	cmp	r5, #50	; 0x32
    f2f4:	d1e0      	bne.n	f2b8 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50>
    f2f6:	785a      	ldrb	r2, [r3, #1]
    f2f8:	2a2c      	cmp	r2, #44	; 0x2c
    f2fa:	d1dd      	bne.n	f2b8 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50>
      if (parameter[2] == 'R' && parameter[3] == 0) {
    f2fc:	789a      	ldrb	r2, [r3, #2]
    f2fe:	2a52      	cmp	r2, #82	; 0x52
    f300:	d102      	bne.n	f308 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0>
    f302:	78da      	ldrb	r2, [r3, #3]
    f304:	2a00      	cmp	r2, #0
    f306:	d037      	beq.n	f378 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x110>
        long l = atol(&parameter[2]);
    f308:	1c98      	adds	r0, r3, #2
    f30a:	f00e f93b 	bl	1d584 <atol>
          settings.axis2.senseOffset = l;
    f30e:	f8c4 0007 	str.w	r0, [r4, #7]
    f312:	e7de      	b.n	f2d2 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a>
      sprintf(reply, "%d,%ld,%ld",  (int)hasSense, settings.axis1.senseOffset, settings.axis2.senseOffset);
    f314:	f8d0 6007 	ldr.w	r6, [r0, #7]
    f318:	f8d0 3002 	ldr.w	r3, [r0, #2]
    f31c:	7802      	ldrb	r2, [r0, #0]
    f31e:	4608      	mov	r0, r1
    f320:	9600      	str	r6, [sp, #0]
    f322:	491b      	ldr	r1, [pc, #108]	; (f390 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x128>)
    f324:	f00f fde4 	bl	1eef0 <sprintf>
      *numericReply = false;
    f328:	9b07      	ldr	r3, [sp, #28]
  return true;
    f32a:	2001      	movs	r0, #1
      *numericReply = false;
    f32c:	701d      	strb	r5, [r3, #0]
    f32e:	e7c4      	b.n	f2ba <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52>
        default: *commandError = CE_PARAM_RANGE; break;
    f330:	2304      	movs	r3, #4
    f332:	9a08      	ldr	r2, [sp, #32]
    f334:	7013      	strb	r3, [r2, #0]
    f336:	e7cc      	b.n	f2d2 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a>
      *commandError = request();
    f338:	f000 faf6 	bl	f928 <Home::request()>
    f33c:	9a08      	ldr	r2, [sp, #32]
    f33e:	4603      	mov	r3, r0
  return true;
    f340:	2001      	movs	r0, #1
      *commandError = request();
    f342:	7013      	strb	r3, [r2, #0]
      *numericReply = false;
    f344:	9b07      	ldr	r3, [sp, #28]
    f346:	701d      	strb	r5, [r3, #0]
    f348:	e7b7      	b.n	f2ba <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52>
    if (command[1] == 'C' && parameter[0] == '1' && parameter[1] == ',') {
    f34a:	785a      	ldrb	r2, [r3, #1]
    f34c:	2a2c      	cmp	r2, #44	; 0x2c
    f34e:	d1b3      	bne.n	f2b8 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x50>
      if (parameter[2] == 'R' && parameter[3] == 0) {
    f350:	789a      	ldrb	r2, [r3, #2]
    f352:	2a52      	cmp	r2, #82	; 0x52
    f354:	d101      	bne.n	f35a <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf2>
    f356:	78da      	ldrb	r2, [r3, #3]
    f358:	b13a      	cbz	r2, f36a <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x102>
        long l = atol(&parameter[2]);
    f35a:	1c98      	adds	r0, r3, #2
    f35c:	f00e f912 	bl	1d584 <atol>
          settings.axis1.senseOffset = l;
    f360:	f8c4 0002 	str.w	r0, [r4, #2]
    f364:	e7b5      	b.n	f2d2 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a>
        case '0': settings.automaticAtBoot = false; break;
    f366:	7042      	strb	r2, [r0, #1]
    f368:	e7b3      	b.n	f2d2 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a>
        settings.axis1.senseReverse = !settings.axis1.senseReverse;
    f36a:	7983      	ldrb	r3, [r0, #6]
    f36c:	f083 0301 	eor.w	r3, r3, #1
    f370:	7183      	strb	r3, [r0, #6]
        setReversal();
    f372:	f000 f8e5 	bl	f540 <Home::setReversal()>
    f376:	e7ac      	b.n	f2d2 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a>
        settings.axis2.senseReverse = !settings.axis2.senseReverse;
    f378:	7ac3      	ldrb	r3, [r0, #11]
    f37a:	f083 0301 	eor.w	r3, r3, #1
    f37e:	72c3      	strb	r3, [r0, #11]
        setReversal();
    f380:	f000 f8de 	bl	f540 <Home::setReversal()>
    f384:	e7a5      	b.n	f2d2 <Home::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a>
    f386:	bf00      	nop
    f388:	20005ea8 	.word	0x20005ea8
    f38c:	20005e50 	.word	0x20005e50
    f390:	200021dc 	.word	0x200021dc

0000f394 <Home::requestAborted()>:
    return result;
  } else return reset();
}

// clear home state on abort
void Home::requestAborted() {
    f394:	4603      	mov	r3, r0
  state = HS_NONE;
    f396:	2200      	movs	r2, #0
  mount.tracking(wasTracking);
    f398:	4802      	ldr	r0, [pc, #8]	; (f3a4 <Home::requestAborted()+0x10>)
    f39a:	7b99      	ldrb	r1, [r3, #14]
  state = HS_NONE;
    f39c:	735a      	strb	r2, [r3, #13]
  mount.tracking(wasTracking);
    f39e:	f7f9 bb8b 	b.w	8ab8 <Mount::tracking(bool)>
    f3a2:	bf00      	nop
    f3a4:	200054e0 	.word	0x200054e0

0000f3a8 <Home::getPosition(CoordReturn)>:

  return CE_NONE;
}

// get the home position (Mount coordinate system)
Coordinate Home::getPosition(CoordReturn coordReturn) {
    f3a8:	b570      	push	{r4, r5, r6, lr}
        homePosition.d += arcsecToRad(settings.axis2.senseOffset);
      }
    }
  #endif

  if (transform.mountType == ALTAZM) {
    f3aa:	4e63      	ldr	r6, [pc, #396]	; (f538 <Home::getPosition(CoordReturn)+0x190>)
Coordinate Home::getPosition(CoordReturn coordReturn) {
    f3ac:	4615      	mov	r5, r2
  Coordinate homePosition = position;
    f3ae:	3110      	adds	r1, #16
    f3b0:	2258      	movs	r2, #88	; 0x58
Coordinate Home::getPosition(CoordReturn coordReturn) {
    f3b2:	4604      	mov	r4, r0
  Coordinate homePosition = position;
    f3b4:	f009 f88a 	bl	184cc <memcpy>
  if (transform.mountType == ALTAZM) {
    f3b8:	f996 35c4 	ldrsb.w	r3, [r6, #1476]	; 0x5c4
  homePosition.pierSide = PIER_SIDE_EAST;
    f3bc:	2201      	movs	r2, #1
  if (transform.mountType == ALTAZM) {
    f3be:	2b03      	cmp	r3, #3
  homePosition.pierSide = PIER_SIDE_EAST;
    f3c0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  if (transform.mountType == ALTAZM) {
    f3c4:	d048      	beq.n	f458 <Home::getPosition(CoordReturn)+0xb0>
    homePosition.a1 = homePosition.z;
    homePosition.a2 = homePosition.a;
  } else
  if (transform.mountType == ALTALT) {
    f3c6:	2b04      	cmp	r3, #4
    f3c8:	d02d      	beq.n	f426 <Home::getPosition(CoordReturn)+0x7e>
    homePosition.a2 = homePosition.aa2;
  } else {
    homePosition.a1 = homePosition.h;
    homePosition.a2 = homePosition.d;

    if (site.location.latitude >= 0.0) {
    f3ca:	4a5c      	ldr	r2, [pc, #368]	; (f53c <Home::getPosition(CoordReturn)+0x194>)
    f3cc:	ed92 5b00 	vldr	d5, [r2]
    homePosition.a1 = homePosition.h;
    f3d0:	ed94 6b02 	vldr	d6, [r4, #8]
    homePosition.a2 = homePosition.d;
    f3d4:	ed94 7b04 	vldr	d7, [r4, #16]
    if (site.location.latitude >= 0.0) {
    f3d8:	eeb5 5bc0 	vcmpe.f64	d5, #0.0
    homePosition.a1 = homePosition.h;
    f3dc:	ed84 6b0e 	vstr	d6, [r4, #56]	; 0x38
    if (site.location.latitude >= 0.0) {
    f3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    homePosition.a2 = homePosition.d;
    f3e4:	ed84 7b12 	vstr	d7, [r4, #72]	; 0x48
    if (site.location.latitude >= 0.0) {
    f3e8:	db70      	blt.n	f4cc <Home::getPosition(CoordReturn)+0x124>
      if (homePosition.d > Deg90) {
    f3ea:	ed9f 5b4b 	vldr	d5, [pc, #300]	; f518 <Home::getPosition(CoordReturn)+0x170>
    f3ee:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3f6:	dd5a      	ble.n	f4ae <Home::getPosition(CoordReturn)+0x106>
        homePosition.pierSide = PIER_SIDE_WEST;
    f3f8:	2202      	movs	r2, #2
        homePosition.h -= Deg180;
    f3fa:	ed9f 5b49 	vldr	d5, [pc, #292]	; f520 <Home::getPosition(CoordReturn)+0x178>
        homePosition.pierSide = PIER_SIDE_WEST;
    f3fe:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        homePosition.h -= Deg180;
    f402:	ee36 6b45 	vsub.f64	d6, d6, d5
        homePosition.d  = Deg180 - homePosition.d;
    f406:	ee35 5b47 	vsub.f64	d5, d5, d7
        homePosition.h -= Deg180;
    f40a:	ed84 6b02 	vstr	d6, [r4, #8]
        homePosition.d  = Deg180 - homePosition.d;
    f40e:	ed84 5b04 	vstr	d5, [r4, #16]
        homePosition.d  = (-Deg180) - homePosition.d;
      }
    }
  }

  switch (coordReturn) {
    f412:	2d04      	cmp	r5, #4
    f414:	d073      	beq.n	f4fe <Home::getPosition(CoordReturn)+0x156>
    f416:	d804      	bhi.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    f418:	2d01      	cmp	r5, #1
    f41a:	d041      	beq.n	f4a0 <Home::getPosition(CoordReturn)+0xf8>
    f41c:	3d02      	subs	r5, #2
    f41e:	2d01      	cmp	r5, #1
    f420:	d94b      	bls.n	f4ba <Home::getPosition(CoordReturn)+0x112>
      transform.hourAngleToRightAscension(&homePosition, true);
    break;
  }

  return homePosition;
}
    f422:	4620      	mov	r0, r4
    f424:	bd70      	pop	{r4, r5, r6, pc}
    homePosition.a1 = homePosition.aa1;
    f426:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
  switch (coordReturn) {
    f42a:	2d01      	cmp	r5, #1
    homePosition.a1 = homePosition.aa1;
    f42c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    homePosition.a2 = homePosition.aa2;
    f430:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
    f434:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  switch (coordReturn) {
    f438:	d023      	beq.n	f482 <Home::getPosition(CoordReturn)+0xda>
    f43a:	2d00      	cmp	r5, #0
    f43c:	d0f1      	beq.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    f43e:	2d03      	cmp	r5, #3
    f440:	d962      	bls.n	f508 <Home::getPosition(CoordReturn)+0x160>
    f442:	2d04      	cmp	r5, #4
    f444:	d1ed      	bne.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    void aaToEqu(Coordinate *coord) { aaToHor(coord); horToEqu(coord); };
    f446:	4621      	mov	r1, r4
    f448:	4630      	mov	r0, r6
    f44a:	f7fc f889 	bl	b560 <Transform::aaToHor(Coordinate*)>
    f44e:	4621      	mov	r1, r4
    f450:	4630      	mov	r0, r6
    f452:	f7fc f825 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    f456:	e023      	b.n	f4a0 <Home::getPosition(CoordReturn)+0xf8>
    homePosition.a1 = homePosition.z;
    f458:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
  switch (coordReturn) {
    f45c:	2d03      	cmp	r5, #3
    homePosition.a1 = homePosition.z;
    f45e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    homePosition.a2 = homePosition.a;
    f462:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    f466:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  switch (coordReturn) {
    f46a:	d813      	bhi.n	f494 <Home::getPosition(CoordReturn)+0xec>
    f46c:	2d01      	cmp	r5, #1
    f46e:	d8d8      	bhi.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    f470:	d1d7      	bne.n	f422 <Home::getPosition(CoordReturn)+0x7a>
      if (transform.mountType == ALTAZM) transform.horToEqu(&homePosition);
    f472:	4621      	mov	r1, r4
    f474:	4630      	mov	r0, r6
    f476:	f7fc f813 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
      if (transform.mountType == ALTALT) transform.aaToEqu(&homePosition);
    f47a:	f996 35c4 	ldrsb.w	r3, [r6, #1476]	; 0x5c4
    f47e:	2b04      	cmp	r3, #4
    f480:	d10e      	bne.n	f4a0 <Home::getPosition(CoordReturn)+0xf8>
    f482:	4621      	mov	r1, r4
    f484:	482c      	ldr	r0, [pc, #176]	; (f538 <Home::getPosition(CoordReturn)+0x190>)
    f486:	f7fc f86b 	bl	b560 <Transform::aaToHor(Coordinate*)>
    f48a:	4621      	mov	r1, r4
    f48c:	482a      	ldr	r0, [pc, #168]	; (f538 <Home::getPosition(CoordReturn)+0x190>)
    f48e:	f7fc f807 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
    f492:	e005      	b.n	f4a0 <Home::getPosition(CoordReturn)+0xf8>
  switch (coordReturn) {
    f494:	2d04      	cmp	r5, #4
    f496:	d1c4      	bne.n	f422 <Home::getPosition(CoordReturn)+0x7a>
      if (transform.mountType == ALTAZM) transform.horToEqu(&homePosition); else
    f498:	4621      	mov	r1, r4
    f49a:	4630      	mov	r0, r6
    f49c:	f7fc f800 	bl	b4a0 <Transform::horToEqu(Coordinate*)>
      transform.hourAngleToRightAscension(&homePosition, true);
    f4a0:	2201      	movs	r2, #1
    f4a2:	4621      	mov	r1, r4
    f4a4:	4824      	ldr	r0, [pc, #144]	; (f538 <Home::getPosition(CoordReturn)+0x190>)
    f4a6:	f7fb feb3 	bl	b210 <Transform::hourAngleToRightAscension(Coordinate*, bool)>
}
    f4aa:	4620      	mov	r0, r4
    f4ac:	bd70      	pop	{r4, r5, r6, pc}
  switch (coordReturn) {
    f4ae:	2d01      	cmp	r5, #1
    f4b0:	d0f6      	beq.n	f4a0 <Home::getPosition(CoordReturn)+0xf8>
    f4b2:	2d00      	cmp	r5, #0
    f4b4:	d0b5      	beq.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    f4b6:	2d03      	cmp	r5, #3
    f4b8:	d81f      	bhi.n	f4fa <Home::getPosition(CoordReturn)+0x152>
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
    f4ba:	3b01      	subs	r3, #1
      if (transform.isEquatorial()) transform.equToHor(&homePosition);
    f4bc:	b2db      	uxtb	r3, r3
    f4be:	2b01      	cmp	r3, #1
    f4c0:	d8af      	bhi.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    f4c2:	4621      	mov	r1, r4
    f4c4:	481c      	ldr	r0, [pc, #112]	; (f538 <Home::getPosition(CoordReturn)+0x190>)
    f4c6:	f7fb ff2f 	bl	b328 <Transform::equToHor(Coordinate*)>
    f4ca:	e7aa      	b.n	f422 <Home::getPosition(CoordReturn)+0x7a>
      if (homePosition.d < -Deg90) {
    f4cc:	ed9f 5b16 	vldr	d5, [pc, #88]	; f528 <Home::getPosition(CoordReturn)+0x180>
    f4d0:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4d8:	d59b      	bpl.n	f412 <Home::getPosition(CoordReturn)+0x6a>
        homePosition.pierSide = PIER_SIDE_WEST;
    f4da:	2202      	movs	r2, #2
        homePosition.h -= Deg180;
    f4dc:	ed9f 4b10 	vldr	d4, [pc, #64]	; f520 <Home::getPosition(CoordReturn)+0x178>
        homePosition.d  = (-Deg180) - homePosition.d;
    f4e0:	ed9f 5b13 	vldr	d5, [pc, #76]	; f530 <Home::getPosition(CoordReturn)+0x188>
        homePosition.pierSide = PIER_SIDE_WEST;
    f4e4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        homePosition.h -= Deg180;
    f4e8:	ee36 6b44 	vsub.f64	d6, d6, d4
        homePosition.d  = (-Deg180) - homePosition.d;
    f4ec:	ee35 7b47 	vsub.f64	d7, d5, d7
        homePosition.h -= Deg180;
    f4f0:	ed84 6b02 	vstr	d6, [r4, #8]
        homePosition.d  = (-Deg180) - homePosition.d;
    f4f4:	ed84 7b04 	vstr	d7, [r4, #16]
    f4f8:	e78b      	b.n	f412 <Home::getPosition(CoordReturn)+0x6a>
  switch (coordReturn) {
    f4fa:	2d04      	cmp	r5, #4
    f4fc:	d191      	bne.n	f422 <Home::getPosition(CoordReturn)+0x7a>
      if (transform.mountType == ALTALT) transform.aaToEqu(&homePosition); else transform.equToHor(&homePosition);
    f4fe:	4621      	mov	r1, r4
    f500:	480d      	ldr	r0, [pc, #52]	; (f538 <Home::getPosition(CoordReturn)+0x190>)
    f502:	f7fb ff11 	bl	b328 <Transform::equToHor(Coordinate*)>
    f506:	e7cb      	b.n	f4a0 <Home::getPosition(CoordReturn)+0xf8>
      else if (transform.mountType == ALTALT) transform.aaToHor(&homePosition);
    f508:	4621      	mov	r1, r4
    f50a:	4630      	mov	r0, r6
    f50c:	f7fc f828 	bl	b560 <Transform::aaToHor(Coordinate*)>
    f510:	e787      	b.n	f422 <Home::getPosition(CoordReturn)+0x7a>
    f512:	bf00      	nop
    f514:	f3af 8000 	nop.w
    f518:	54442d15 	.word	0x54442d15
    f51c:	3ff921fb 	.word	0x3ff921fb
    f520:	54442d18 	.word	0x54442d18
    f524:	400921fb 	.word	0x400921fb
    f528:	54442d15 	.word	0x54442d15
    f52c:	bff921fb 	.word	0xbff921fb
    f530:	54442d18 	.word	0x54442d18
    f534:	c00921fb 	.word	0xc00921fb
    f538:	200064ac 	.word	0x200064ac
    f53c:	200055d0 	.word	0x200055d0

0000f540 <Home::setReversal()>:

bool Home::useOffset() {
  if (hasSense && (settings.axis1.senseOffset != 0 || settings.axis2.senseOffset != 0)) return true; else return false;
}

void Home::setReversal() {
    f540:	b538      	push	{r3, r4, r5, lr}
    f542:	4b1e      	ldr	r3, [pc, #120]	; (f5bc <Home::setReversal()+0x7c>)
    f544:	4604      	mov	r4, r0
        if (settings.reverse == ON) motor->setReverse(OFF); else motor->setReverse(ON);
    f546:	4d1e      	ldr	r5, [pc, #120]	; (f5c0 <Home::setReversal()+0x80>)
    f548:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
  bool latitudeReversal = transform.isEquatorial() && site.locationEx.latitude.sign < 0.0;
    f54c:	3b01      	subs	r3, #1
    f54e:	2b01      	cmp	r3, #1
    f550:	d918      	bls.n	f584 <Home::setReversal()+0x44>
        motor->setReverse(settings.reverse);
    f552:	6828      	ldr	r0, [r5, #0]
    f554:	f995 100c 	ldrsb.w	r1, [r5, #12]
    f558:	6803      	ldr	r3, [r0, #0]
    f55a:	685b      	ldr	r3, [r3, #4]
    f55c:	4798      	blx	r3
    f55e:	2200      	movs	r2, #0
  axis1.setReverse(latitudeReversal);
  if (!settings.axis1.senseReverse) axis1.setHomeReverse(latitudeReversal); else axis1.setHomeReverse(!latitudeReversal);
    f560:	79a3      	ldrb	r3, [r4, #6]
    f562:	b10b      	cbz	r3, f568 <Home::setReversal()+0x28>
    inline void setHomeReverse(bool reverse) { sense.reverse(homeSenseHandle, reverse); }
    f564:	f082 0201 	eor.w	r2, r2, #1
    f568:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
    f56c:	4815      	ldr	r0, [pc, #84]	; (f5c4 <Home::setReversal()+0x84>)
    f56e:	f7f5 ff85 	bl	547c <Sense::reverse(unsigned char, bool)>
    f572:	4b15      	ldr	r3, [pc, #84]	; (f5c8 <Home::setReversal()+0x88>)
    f574:	7ae2      	ldrb	r2, [r4, #11]
    f576:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
    f57a:	4812      	ldr	r0, [pc, #72]	; (f5c4 <Home::setReversal()+0x84>)
  axis2.setHomeReverse(settings.axis2.senseReverse);
}
    f57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f580:	f7f5 bf7c 	b.w	547c <Sense::reverse(unsigned char, bool)>
  bool latitudeReversal = transform.isEquatorial() && site.locationEx.latitude.sign < 0.0;
    f584:	4b11      	ldr	r3, [pc, #68]	; (f5cc <Home::setReversal()+0x8c>)
    f586:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
    f58a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    f58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f592:	d5de      	bpl.n	f552 <Home::setReversal()+0x12>
        if (settings.reverse == ON) motor->setReverse(OFF); else motor->setReverse(ON);
    f594:	f995 300c 	ldrsb.w	r3, [r5, #12]
    f598:	3302      	adds	r3, #2
    f59a:	d007      	beq.n	f5ac <Home::setReversal()+0x6c>
    f59c:	6828      	ldr	r0, [r5, #0]
    f59e:	f06f 0101 	mvn.w	r1, #1
    f5a2:	6803      	ldr	r3, [r0, #0]
    f5a4:	685b      	ldr	r3, [r3, #4]
    f5a6:	4798      	blx	r3
    f5a8:	2201      	movs	r2, #1
    f5aa:	e7d9      	b.n	f560 <Home::setReversal()+0x20>
    f5ac:	6828      	ldr	r0, [r5, #0]
    f5ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f5b2:	6803      	ldr	r3, [r0, #0]
    f5b4:	685b      	ldr	r3, [r3, #4]
    f5b6:	4798      	blx	r3
    f5b8:	2201      	movs	r2, #1
    }
    f5ba:	e7d1      	b.n	f560 <Home::setReversal()+0x20>
    f5bc:	200064ac 	.word	0x200064ac
    f5c0:	200050e8 	.word	0x200050e8
    f5c4:	200062f8 	.word	0x200062f8
    f5c8:	200051a8 	.word	0x200051a8
    f5cc:	200055d0 	.word	0x200055d0

0000f5d0 <Home::init()>:
    inline bool hasValidKey() { return keyMatches; }
    f5d0:	4923      	ldr	r1, [pc, #140]	; (f660 <Home::init()+0x90>)
    nv.writeBytes(NV_MOUNT_HOME_BASE, &settings, sizeof(Settings));
    f5d2:	1c42      	adds	r2, r0, #1
  if (!nv.hasValidKey()) {
    f5d4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
void Home::init() {
    f5d8:	b510      	push	{r4, lr}
    f5da:	4604      	mov	r4, r0
    f5dc:	b082      	sub	sp, #8
  if (!nv.hasValidKey()) {
    f5de:	2b00      	cmp	r3, #0
    f5e0:	d031      	beq.n	f646 <Home::init()+0x76>
  nv.readBytes(NV_MOUNT_HOME_BASE, &settings, sizeof(Settings));
    f5e2:	230b      	movs	r3, #11
    f5e4:	21d8      	movs	r1, #216	; 0xd8
    f5e6:	481e      	ldr	r0, [pc, #120]	; (f660 <Home::init()+0x90>)
    f5e8:	f7f5 fd16 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    if (transform.mountType == GEM) position.h = Deg90; else { position.h = 0.0L; position.z = 0.0L; position.aa1 = 0.0L; }
    f5ec:	4b1d      	ldr	r3, [pc, #116]	; (f664 <Home::init()+0x94>)
    f5ee:	f993 15c4 	ldrsb.w	r1, [r3, #1476]	; 0x5c4
    f5f2:	2901      	cmp	r1, #1
    f5f4:	d018      	beq.n	f628 <Home::init()+0x58>
    f5f6:	2200      	movs	r2, #0
    f5f8:	2300      	movs	r3, #0
    if (transform.mountType == ALTAZM) position.a = 0.0; else
    f5fa:	2903      	cmp	r1, #3
    if (transform.mountType == GEM) position.h = Deg90; else { position.h = 0.0L; position.z = 0.0L; position.aa1 = 0.0L; }
    f5fc:	e9c4 2306 	strd	r2, r3, [r4, #24]
    f600:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    f604:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    if (transform.mountType == ALTAZM) position.a = 0.0; else
    f608:	d109      	bne.n	f61e <Home::init()+0x4e>
    f60a:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  setReversal();
    f60e:	4620      	mov	r0, r4
    f610:	f7ff ff96 	bl	f540 <Home::setReversal()>
  position.pierSide = PIER_SIDE_NONE;
    f614:	2300      	movs	r3, #0
    f616:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
    f61a:	b002      	add	sp, #8
    f61c:	bd10      	pop	{r4, pc}
    if (transform.mountType == ALTALT) position.aa2 = 0.0; else position.d = site.locationEx.latitude.sign*Deg90;
    f61e:	2904      	cmp	r1, #4
    f620:	d107      	bne.n	f632 <Home::init()+0x62>
    f622:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    f626:	e7f2      	b.n	f60e <Home::init()+0x3e>
    if (transform.mountType == GEM) position.h = Deg90; else { position.h = 0.0L; position.z = 0.0L; position.aa1 = 0.0L; }
    f628:	a30b      	add	r3, pc, #44	; (adr r3, f658 <Home::init()+0x88>)
    f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f62e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (transform.mountType == ALTALT) position.aa2 = 0.0; else position.d = site.locationEx.latitude.sign*Deg90;
    f632:	4b0d      	ldr	r3, [pc, #52]	; (f668 <Home::init()+0x98>)
    f634:	ed9f 6b08 	vldr	d6, [pc, #32]	; f658 <Home::init()+0x88>
    f638:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
    f63c:	ee27 7b06 	vmul.f64	d7, d7, d6
    f640:	ed84 7b08 	vstr	d7, [r4, #32]
    f644:	e7e3      	b.n	f60e <Home::init()+0x3e>
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
    f646:	4608      	mov	r0, r1
    f648:	230b      	movs	r3, #11
    f64a:	21d8      	movs	r1, #216	; 0xd8
    f64c:	9201      	str	r2, [sp, #4]
    f64e:	f7f5 fd0d 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    f652:	9a01      	ldr	r2, [sp, #4]
    f654:	e7c5      	b.n	f5e2 <Home::init()+0x12>
    f656:	bf00      	nop
    f658:	54442d15 	.word	0x54442d15
    f65c:	3ff921fb 	.word	0x3ff921fb
    f660:	20005e50 	.word	0x20005e50
    f664:	200064ac 	.word	0x200064ac
    f668:	200055d0 	.word	0x200055d0
    f66c:	00000000 	.word	0x00000000

0000f670 <Home::reset(bool) [clone .part.0]>:
CommandError Home::reset(bool fullReset) {
    f670:	b5f0      	push	{r4, r5, r6, r7, lr}
  mount.tracking(false);
    f672:	4c49      	ldr	r4, [pc, #292]	; (f798 <Home::reset(bool) [clone .part.0]+0x128>)
CommandError Home::reset(bool fullReset) {
    f674:	4605      	mov	r5, r0
    f676:	460e      	mov	r6, r1
  goTo.firstGoto = true;
    f678:	4f48      	ldr	r7, [pc, #288]	; (f79c <Home::reset(bool) [clone .part.0]+0x12c>)
CommandError Home::reset(bool fullReset) {
    f67a:	ed2d 8b04 	vpush	{d8-d9}
    f67e:	b097      	sub	sp, #92	; 0x5c
  init();
    f680:	f7ff ffa6 	bl	f5d0 <Home::init()>
  mount.tracking(false);
    f684:	2100      	movs	r1, #0
    f686:	4620      	mov	r0, r4
    f688:	f7f9 fa16 	bl	8ab8 <Mount::tracking(bool)>
  mount.trackingRateOffsetRA = 0.0F;
    f68c:	2300      	movs	r3, #0
  mount.trackingRate = hzToSidereal(TRACKING_RATE_DEFAULT_HZ);
    f68e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  tasks.yieldMicros(10000);
    f692:	f242 7110 	movw	r1, #10000	; 0x2710
  mount.trackingRateOffsetRA = 0.0F;
    f696:	6123      	str	r3, [r4, #16]
  mount.trackingRateOffsetDec = 0.0F;
    f698:	6163      	str	r3, [r4, #20]
  goTo.firstGoto = true;
    f69a:	2301      	movs	r3, #1
  tasks.yieldMicros(10000);
    f69c:	4840      	ldr	r0, [pc, #256]	; (f7a0 <Home::reset(bool) [clone .part.0]+0x130>)
  goTo.firstGoto = true;
    f69e:	723b      	strb	r3, [r7, #8]
  mount.trackingRate = hzToSidereal(TRACKING_RATE_DEFAULT_HZ);
    f6a0:	6062      	str	r2, [r4, #4]
  tasks.yieldMicros(10000);
    f6a2:	f7f6 ff35 	bl	6510 <Tasks::yieldMicros(unsigned long)>
  Coordinate homePosition = getPosition(CR_MOUNT);
    f6a6:	2200      	movs	r2, #0
    f6a8:	4629      	mov	r1, r5
    f6aa:	4668      	mov	r0, sp
    f6ac:	f7ff fe7c 	bl	f3a8 <Home::getPosition(CoordReturn)>
  if (!goTo.absoluteEncodersPresent) {
    f6b0:	7a7b      	ldrb	r3, [r7, #9]
    f6b2:	b1eb      	cbz	r3, f6f0 <Home::reset(bool) [clone .part.0]+0x80>
  axis1.setBacklash(mount.settings.backlash.axis1);
    f6b4:	f8d4 3019 	ldr.w	r3, [r4, #25]
    f6b8:	483a      	ldr	r0, [pc, #232]	; (f7a4 <Home::reset(bool) [clone .part.0]+0x134>)
    f6ba:	ee00 3a10 	vmov	s0, r3
    f6be:	f7f1 fccb 	bl	1058 <Axis::setBacklash(float)>
  axis2.setBacklash(mount.settings.backlash.axis2);
    f6c2:	f8d4 301d 	ldr.w	r3, [r4, #29]
    f6c6:	4838      	ldr	r0, [pc, #224]	; (f7a8 <Home::reset(bool) [clone .part.0]+0x138>)
    f6c8:	ee00 3a10 	vmov	s0, r3
    f6cc:	f7f1 fcc4 	bl	1058 <Axis::setBacklash(float)>
  axis1.setFrequencySlew(degToRadF(0.1F));
    f6d0:	ed9f 0a36 	vldr	s0, [pc, #216]	; f7ac <Home::reset(bool) [clone .part.0]+0x13c>
    f6d4:	4833      	ldr	r0, [pc, #204]	; (f7a4 <Home::reset(bool) [clone .part.0]+0x134>)
    f6d6:	f7f1 fe33 	bl	1340 <Axis::setFrequencySlew(float)>
  axis2.setFrequencySlew(degToRadF(0.1F));
    f6da:	ed9f 0a34 	vldr	s0, [pc, #208]	; f7ac <Home::reset(bool) [clone .part.0]+0x13c>
    f6de:	4832      	ldr	r0, [pc, #200]	; (f7a8 <Home::reset(bool) [clone .part.0]+0x138>)
    f6e0:	f7f1 fe2e 	bl	1340 <Axis::setFrequencySlew(float)>
  if (fullReset) {
    f6e4:	bb4e      	cbnz	r6, f73a <Home::reset(bool) [clone .part.0]+0xca>
}
    f6e6:	2000      	movs	r0, #0
    f6e8:	b017      	add	sp, #92	; 0x5c
    f6ea:	ecbd 8b04 	vpop	{d8-d9}
    f6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (axis1.resetPosition(0.0L) != 0) { DL("WRN: Home::reset(), failed to resetPosition Axis1"); }
    f6f0:	ed9f 0b25 	vldr	d0, [pc, #148]	; f788 <Home::reset(bool) [clone .part.0]+0x118>
    f6f4:	482b      	ldr	r0, [pc, #172]	; (f7a4 <Home::reset(bool) [clone .part.0]+0x134>)
  Coordinate homePosition = getPosition(CR_MOUNT);
    f6f6:	ed9d 9b0e 	vldr	d9, [sp, #56]	; 0x38
    f6fa:	ed9d 8b12 	vldr	d8, [sp, #72]	; 0x48
    if (axis1.resetPosition(0.0L) != 0) { DL("WRN: Home::reset(), failed to resetPosition Axis1"); }
    f6fe:	f7f1 fcdd 	bl	10bc <Axis::resetPosition(double)>
    if (axis2.resetPosition(0.0L) != 0) { DL("WRN: Home::reset(), failed to resetPosition Axis2"); }
    f702:	4829      	ldr	r0, [pc, #164]	; (f7a8 <Home::reset(bool) [clone .part.0]+0x138>)
    f704:	ed9f 0b20 	vldr	d0, [pc, #128]	; f788 <Home::reset(bool) [clone .part.0]+0x118>
    f708:	f7f1 fcd8 	bl	10bc <Axis::resetPosition(double)>
  if (hasSense && (settings.axis1.senseOffset != 0 || settings.axis2.senseOffset != 0)) return true; else return false;
    f70c:	782b      	ldrb	r3, [r5, #0]
    f70e:	b14b      	cbz	r3, f724 <Home::reset(bool) [clone .part.0]+0xb4>
    f710:	f8d5 3002 	ldr.w	r3, [r5, #2]
    f714:	b913      	cbnz	r3, f71c <Home::reset(bool) [clone .part.0]+0xac>
    f716:	f8d5 2007 	ldr.w	r2, [r5, #7]
    f71a:	b11a      	cbz	r2, f724 <Home::reset(bool) [clone .part.0]+0xb4>
      if (useOffset() && state == HS_HOMING && !fullReset) {
    f71c:	7b6a      	ldrb	r2, [r5, #13]
    f71e:	2a01      	cmp	r2, #1
    f720:	d100      	bne.n	f724 <Home::reset(bool) [clone .part.0]+0xb4>
    f722:	b1b6      	cbz	r6, f752 <Home::reset(bool) [clone .part.0]+0xe2>
    axis1.setInstrumentCoordinate(homePosition.a1);
    f724:	eeb0 0b49 	vmov.f64	d0, d9
    f728:	481e      	ldr	r0, [pc, #120]	; (f7a4 <Home::reset(bool) [clone .part.0]+0x134>)
    f72a:	f7f1 fce3 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
    axis2.setInstrumentCoordinate(homePosition.a2);
    f72e:	eeb0 0b48 	vmov.f64	d0, d8
    f732:	481d      	ldr	r0, [pc, #116]	; (f7a8 <Home::reset(bool) [clone .part.0]+0x138>)
    f734:	f7f1 fcde 	bl	10f4 <Axis::setInstrumentCoordinate(double)>
    f738:	e7bc      	b.n	f6b4 <Home::reset(bool) [clone .part.0]+0x44>
    mount.enable(MOUNT_ENABLE_IN_STANDBY == ON);
    f73a:	2100      	movs	r1, #0
    f73c:	4816      	ldr	r0, [pc, #88]	; (f798 <Home::reset(bool) [clone .part.0]+0x128>)
    f73e:	f7f9 f99f 	bl	8a80 <Mount::enable(bool)>
      goTo.alignReset();
    f742:	4816      	ldr	r0, [pc, #88]	; (f79c <Home::reset(bool) [clone .part.0]+0x12c>)
    f744:	f7fd fea0 	bl	d488 <Goto::alignReset()>
}
    f748:	2000      	movs	r0, #0
    f74a:	b017      	add	sp, #92	; 0x5c
    f74c:	ecbd 8b04 	vpop	{d8-d9}
    f750:	bdf0      	pop	{r4, r5, r6, r7, pc}
        homePosition.a1 += arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f752:	ee07 3a90 	vmov	s15, r3
    f756:	4a16      	ldr	r2, [pc, #88]	; (f7b0 <Home::reset(bool) [clone .part.0]+0x140>)
        homePosition.a2 += arcsecToRad(settings.axis2.senseOffset);
    f758:	f8d5 3007 	ldr.w	r3, [r5, #7]
        homePosition.a1 += arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f75c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        homePosition.a2 += arcsecToRad(settings.axis2.senseOffset);
    f760:	ee06 3a10 	vmov	s12, r3
        homePosition.a1 += arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f764:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
    f768:	ed9f 5b09 	vldr	d5, [pc, #36]	; f790 <Home::reset(bool) [clone .part.0]+0x120>
        homePosition.a2 += arcsecToRad(settings.axis2.senseOffset);
    f76c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
        homePosition.a1 += arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f770:	ee27 7b04 	vmul.f64	d7, d7, d4
        homePosition.a2 += arcsecToRad(settings.axis2.senseOffset);
    f774:	ee86 4b05 	vdiv.f64	d4, d6, d5
        homePosition.a1 += arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f778:	ee87 6b05 	vdiv.f64	d6, d7, d5
        homePosition.a2 += arcsecToRad(settings.axis2.senseOffset);
    f77c:	ee38 8b04 	vadd.f64	d8, d8, d4
        homePosition.a1 += arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f780:	ee39 9b06 	vadd.f64	d9, d9, d6
        homePosition.a2 += arcsecToRad(settings.axis2.senseOffset);
    f784:	e7ce      	b.n	f724 <Home::reset(bool) [clone .part.0]+0xb4>
    f786:	bf00      	nop
	...
    f790:	7331ad79 	.word	0x7331ad79
    f794:	41092dc6 	.word	0x41092dc6
    f798:	200054e0 	.word	0x200054e0
    f79c:	20005270 	.word	0x20005270
    f7a0:	2000634c 	.word	0x2000634c
    f7a4:	200050e8 	.word	0x200050e8
    f7a8:	200051a8 	.word	0x200051a8
    f7ac:	3ae4c388 	.word	0x3ae4c388
    f7b0:	200055d0 	.word	0x200055d0

0000f7b4 <Home::reset(bool)>:
CommandError Home::reset(bool fullReset) {
    f7b4:	b508      	push	{r3, lr}
    if (goTo.state != GS_NONE) {
    f7b6:	4b0d      	ldr	r3, [pc, #52]	; (f7ec <Home::reset(bool)+0x38>)
    f7b8:	781b      	ldrb	r3, [r3, #0]
    f7ba:	b953      	cbnz	r3, f7d2 <Home::reset(bool)+0x1e>
  if (guide.state != GU_NONE) {
    f7bc:	4a0c      	ldr	r2, [pc, #48]	; (f7f0 <Home::reset(bool)+0x3c>)
    f7be:	7813      	ldrb	r3, [r2, #0]
    f7c0:	b91b      	cbnz	r3, f7ca <Home::reset(bool)+0x16>
}
    f7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f7c6:	f7ff bf53 	b.w	f670 <Home::reset(bool) [clone .part.0]>
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    f7ca:	2b04      	cmp	r3, #4
    f7cc:	d009      	beq.n	f7e2 <Home::reset(bool)+0x2e>
}
    f7ce:	2016      	movs	r0, #22
    f7d0:	bd08      	pop	{r3, pc}
      axis1.autoSlewAbort();
    f7d2:	4808      	ldr	r0, [pc, #32]	; (f7f4 <Home::reset(bool)+0x40>)
    f7d4:	f7f2 fb18 	bl	1e08 <Axis::autoSlewAbort()>
      axis2.autoSlewAbort();
    f7d8:	4807      	ldr	r0, [pc, #28]	; (f7f8 <Home::reset(bool)+0x44>)
    f7da:	f7f2 fb15 	bl	1e08 <Axis::autoSlewAbort()>
}
    f7de:	2016      	movs	r0, #22
    f7e0:	bd08      	pop	{r3, pc}
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    f7e2:	4610      	mov	r0, r2
    f7e4:	f7fe ff02 	bl	e5ec <Guide::stop()>
    f7e8:	e7f1      	b.n	f7ce <Home::reset(bool)+0x1a>
    f7ea:	bf00      	nop
    f7ec:	20005270 	.word	0x20005270
    f7f0:	200043e8 	.word	0x200043e8
    f7f4:	200050e8 	.word	0x200050e8
    f7f8:	200051a8 	.word	0x200051a8
    f7fc:	00000000 	.word	0x00000000

0000f800 <Home::guideDone(bool)>:
void Home::guideDone(bool success) {
    f800:	b538      	push	{r3, r4, r5, lr}
    f802:	4604      	mov	r4, r0
    f804:	ed2d 8b06 	vpush	{d8-d10}
  if (!success) { state = HS_NONE; reset(isRequestWithReset); return; }
    f808:	2900      	cmp	r1, #0
    f80a:	d04d      	beq.n	f8a8 <Home::guideDone(bool)+0xa8>
  if (hasSense && (settings.axis1.senseOffset != 0 || settings.axis2.senseOffset != 0)) return true; else return false;
    f80c:	7803      	ldrb	r3, [r0, #0]
    f80e:	2b00      	cmp	r3, #0
    f810:	d04a      	beq.n	f8a8 <Home::guideDone(bool)+0xa8>
    f812:	f8d0 3002 	ldr.w	r3, [r0, #2]
    f816:	b91b      	cbnz	r3, f820 <Home::guideDone(bool)+0x20>
    f818:	f8d0 3007 	ldr.w	r3, [r0, #7]
    f81c:	2b00      	cmp	r3, #0
    f81e:	d043      	beq.n	f8a8 <Home::guideDone(bool)+0xa8>
      reset(isRequestWithReset);
    f820:	7b21      	ldrb	r1, [r4, #12]
    f822:	4620      	mov	r0, r4
    f824:	f7ff ffc6 	bl	f7b4 <Home::reset(bool)>
        double a1 = axis1.getInstrumentCoordinate() - arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f828:	4827      	ldr	r0, [pc, #156]	; (f8c8 <Home::guideDone(bool)+0xc8>)
    f82a:	f7f1 fc7f 	bl	112c <Axis::getInstrumentCoordinate()>
    f82e:	f8d4 3002 	ldr.w	r3, [r4, #2]
        double a2 = axis2.getInstrumentCoordinate() - arcsecToRad(settings.axis2.senseOffset);
    f832:	4826      	ldr	r0, [pc, #152]	; (f8cc <Home::guideDone(bool)+0xcc>)
        double a1 = axis1.getInstrumentCoordinate() - arcsecToRad(site.locationEx.latitude.sign*settings.axis1.senseOffset);
    f834:	ee07 3a10 	vmov	s14, r3
    f838:	4b25      	ldr	r3, [pc, #148]	; (f8d0 <Home::guideDone(bool)+0xd0>)
    inline float getRadsPerSecond() { return radsPerSecondCurrent; }
    f83a:	4d26      	ldr	r5, [pc, #152]	; (f8d4 <Home::guideDone(bool)+0xd4>)
    f83c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    f840:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
    f844:	ed9f ab1e 	vldr	d10, [pc, #120]	; f8c0 <Home::guideDone(bool)+0xc0>
    f848:	ee27 7b06 	vmul.f64	d7, d7, d6
    f84c:	ee87 9b0a 	vdiv.f64	d9, d7, d10
    f850:	ee30 9b49 	vsub.f64	d9, d0, d9
        double a2 = axis2.getInstrumentCoordinate() - arcsecToRad(settings.axis2.senseOffset);
    f854:	f7f1 fc6a 	bl	112c <Axis::getInstrumentCoordinate()>
    f858:	f8d4 3007 	ldr.w	r3, [r4, #7]
    f85c:	eeb0 8b40 	vmov.f64	d8, d0
        axis1.setTargetCoordinate(a1);
    f860:	4819      	ldr	r0, [pc, #100]	; (f8c8 <Home::guideDone(bool)+0xc8>)
        double a2 = axis2.getInstrumentCoordinate() - arcsecToRad(settings.axis2.senseOffset);
    f862:	ee07 3a10 	vmov	s14, r3
        axis1.setTargetCoordinate(a1);
    f866:	eeb0 0b49 	vmov.f64	d0, d9
        double a2 = axis2.getInstrumentCoordinate() - arcsecToRad(settings.axis2.senseOffset);
    f86a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    f86e:	ee87 6b0a 	vdiv.f64	d6, d7, d10
    f872:	ee38 8b46 	vsub.f64	d8, d8, d6
        axis1.setTargetCoordinate(a1);
    f876:	f7f1 fceb 	bl	1250 <Axis::setTargetCoordinate(double)>
        axis1.autoGoto(goTo.getRadsPerSecond());
    f87a:	ed95 0a7a 	vldr	s0, [r5, #488]	; 0x1e8
    f87e:	4812      	ldr	r0, [pc, #72]	; (f8c8 <Home::guideDone(bool)+0xc8>)
    f880:	f7f1 feea 	bl	1658 <Axis::autoGoto(float)>
        axis2.setTargetCoordinate(a2);
    f884:	eeb0 0b48 	vmov.f64	d0, d8
    f888:	4810      	ldr	r0, [pc, #64]	; (f8cc <Home::guideDone(bool)+0xcc>)
    f88a:	f7f1 fce1 	bl	1250 <Axis::setTargetCoordinate(double)>
        axis2.autoGoto(goTo.getRadsPerSecond());
    f88e:	ed95 0a7a 	vldr	s0, [r5, #488]	; 0x1e8
    f892:	480e      	ldr	r0, [pc, #56]	; (f8cc <Home::guideDone(bool)+0xcc>)
    f894:	f7f1 fee0 	bl	1658 <Axis::autoGoto(float)>
      mount.syncFromOnStepToEncoders = true;
    f898:	4a0f      	ldr	r2, [pc, #60]	; (f8d8 <Home::guideDone(bool)+0xd8>)
    f89a:	2101      	movs	r1, #1
      state = HS_NONE;
    f89c:	2300      	movs	r3, #0
}
    f89e:	ecbd 8b06 	vpop	{d8-d10}
      mount.syncFromOnStepToEncoders = true;
    f8a2:	7011      	strb	r1, [r2, #0]
      state = HS_NONE;
    f8a4:	7363      	strb	r3, [r4, #13]
}
    f8a6:	bd38      	pop	{r3, r4, r5, pc}
  if (!success) { state = HS_NONE; reset(isRequestWithReset); return; }
    f8a8:	2300      	movs	r3, #0
    f8aa:	7b21      	ldrb	r1, [r4, #12]
    f8ac:	4620      	mov	r0, r4
    f8ae:	7363      	strb	r3, [r4, #13]
}
    f8b0:	ecbd 8b06 	vpop	{d8-d10}
    f8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (!success) { state = HS_NONE; reset(isRequestWithReset); return; }
    f8b8:	f7ff bf7c 	b.w	f7b4 <Home::reset(bool)>
    f8bc:	f3af 8000 	nop.w
    f8c0:	7331ad79 	.word	0x7331ad79
    f8c4:	41092dc6 	.word	0x41092dc6
    f8c8:	200050e8 	.word	0x200050e8
    f8cc:	200051a8 	.word	0x200051a8
    f8d0:	200055d0 	.word	0x200055d0
    f8d4:	20005270 	.word	0x20005270
    f8d8:	200054e0 	.word	0x200054e0

0000f8dc <Home::requestDone()>:
    if (goTo.state != GS_NONE) {
    f8dc:	4a0e      	ldr	r2, [pc, #56]	; (f918 <Home::requestDone()+0x3c>)
  state = HS_NONE;
    f8de:	2100      	movs	r1, #0
    if (goTo.state != GS_NONE) {
    f8e0:	7812      	ldrb	r2, [r2, #0]
void Home::requestDone() {
    f8e2:	b508      	push	{r3, lr}
  state = HS_NONE;
    f8e4:	7341      	strb	r1, [r0, #13]
    if (goTo.state != GS_NONE) {
    f8e6:	b94a      	cbnz	r2, f8fc <Home::requestDone()+0x20>
  if (guide.state != GU_NONE) {
    f8e8:	4b0c      	ldr	r3, [pc, #48]	; (f91c <Home::requestDone()+0x40>)
    f8ea:	7819      	ldrb	r1, [r3, #0]
    f8ec:	b919      	cbnz	r1, f8f6 <Home::requestDone()+0x1a>
}
    f8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f8f2:	f7ff bebd 	b.w	f670 <Home::reset(bool) [clone .part.0]>
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    f8f6:	2904      	cmp	r1, #4
    f8f8:	d008      	beq.n	f90c <Home::requestDone()+0x30>
}
    f8fa:	bd08      	pop	{r3, pc}
      axis1.autoSlewAbort();
    f8fc:	4808      	ldr	r0, [pc, #32]	; (f920 <Home::requestDone()+0x44>)
    f8fe:	f7f2 fa83 	bl	1e08 <Axis::autoSlewAbort()>
      axis2.autoSlewAbort();
    f902:	4808      	ldr	r0, [pc, #32]	; (f924 <Home::requestDone()+0x48>)
}
    f904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      axis2.autoSlewAbort();
    f908:	f7f2 ba7e 	b.w	1e08 <Axis::autoSlewAbort()>
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    f90c:	4618      	mov	r0, r3
}
    f90e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    f912:	f7fe be6b 	b.w	e5ec <Guide::stop()>
    f916:	bf00      	nop
    f918:	20005270 	.word	0x20005270
    f91c:	200043e8 	.word	0x200043e8
    f920:	200050e8 	.word	0x200050e8
    f924:	200051a8 	.word	0x200051a8

0000f928 <Home::request()>:
    if (!site.dateIsReady || !site.timeIsReady) return CE_SLEW_ERR_IN_STANDBY;
    f928:	4b63      	ldr	r3, [pc, #396]	; (fab8 <Home::request()+0x190>)
    f92a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
CommandError Home::request() {
    f92e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f932:	ed2d 8b02 	vpush	{d8}
    f936:	b0ad      	sub	sp, #180	; 0xb4
    if (!site.dateIsReady || !site.timeIsReady) return CE_SLEW_ERR_IN_STANDBY;
    f938:	2a00      	cmp	r2, #0
    f93a:	d07c      	beq.n	fa36 <Home::request()+0x10e>
    f93c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
    f940:	2b00      	cmp	r3, #0
    f942:	d078      	beq.n	fa36 <Home::request()+0x10e>
    if (goTo.state != GS_NONE) return CE_SLEW_IN_MOTION;
    f944:	4e5d      	ldr	r6, [pc, #372]	; (fabc <Home::request()+0x194>)
    f946:	7833      	ldrb	r3, [r6, #0]
    f948:	2b00      	cmp	r3, #0
    f94a:	d16d      	bne.n	fa28 <Home::request()+0x100>
    if (guide.state != GU_NONE) {
    f94c:	4f5c      	ldr	r7, [pc, #368]	; (fac0 <Home::request()+0x198>)
    f94e:	783d      	ldrb	r5, [r7, #0]
    f950:	2d00      	cmp	r5, #0
    f952:	d167      	bne.n	fa24 <Home::request()+0xfc>
    f954:	4604      	mov	r4, r0
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
    f956:	485b      	ldr	r0, [pc, #364]	; (fac4 <Home::request()+0x19c>)
      mount.tracking(false);
    f958:	4629      	mov	r1, r5
    Coordinate homePosition = getPosition(CR_MOUNT_EQU);
    f95a:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    f95e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    f962:	f1a3 0301 	sub.w	r3, r3, #1
    f966:	fab3 f383 	clz	r3, r3
    f96a:	095b      	lsrs	r3, r3, #5
    f96c:	73a3      	strb	r3, [r4, #14]
      mount.tracking(false);
    f96e:	f7f9 f8a3 	bl	8ab8 <Mount::tracking(bool)>
    mount.enable(true);
    f972:	4854      	ldr	r0, [pc, #336]	; (fac4 <Home::request()+0x19c>)
    f974:	2101      	movs	r1, #1
    f976:	f7f9 f883 	bl	8a80 <Mount::enable(bool)>
    Coordinate homePosition = getPosition(CR_MOUNT_EQU);
    f97a:	2201      	movs	r2, #1
    f97c:	4621      	mov	r1, r4
    f97e:	4640      	mov	r0, r8
    goTo.firstGoto = false;
    f980:	7235      	strb	r5, [r6, #8]
    Coordinate homePosition = getPosition(CR_MOUNT_EQU);
    f982:	f7ff fd11 	bl	f3a8 <Home::getPosition(CoordReturn)>
    if (hasSense) {
    f986:	f894 9000 	ldrb.w	r9, [r4]
    f98a:	f1b9 0f00 	cmp.w	r9, #0
    f98e:	d060      	beq.n	fa52 <Home::request()+0x12a>
        double a1 = axis1.getInstrumentCoordinate() - homePosition.a1;
    f990:	484d      	ldr	r0, [pc, #308]	; (fac8 <Home::request()+0x1a0>)
    f992:	f7f1 fbcb 	bl	112c <Axis::getInstrumentCoordinate()>
        double a2 = axis2.getInstrumentCoordinate() - homePosition.a2;
    f996:	484d      	ldr	r0, [pc, #308]	; (facc <Home::request()+0x1a4>)
        double a1 = axis1.getInstrumentCoordinate() - homePosition.a1;
    f998:	ed9d 8b24 	vldr	d8, [sp, #144]	; 0x90
    f99c:	ee30 8b48 	vsub.f64	d8, d0, d8
        double a2 = axis2.getInstrumentCoordinate() - homePosition.a2;
    f9a0:	f7f1 fbc4 	bl	112c <Axis::getInstrumentCoordinate()>
        if (abs(a1) > degToRad(AXIS1_SENSE_HOME_DIST_LIMIT) - abs(arcsecToRad(settings.axis1.senseOffset))) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    f9a4:	f8d4 3002 	ldr.w	r3, [r4, #2]
    f9a8:	ee05 3a10 	vmov	s10, r3
    f9ac:	eeb0 8bc8 	vabs.f64	d8, d8
        double a2 = axis2.getInstrumentCoordinate() - homePosition.a2;
    f9b0:	ed9d 7b28 	vldr	d7, [sp, #160]	; 0xa0
        if (abs(a1) > degToRad(AXIS1_SENSE_HOME_DIST_LIMIT) - abs(arcsecToRad(settings.axis1.senseOffset))) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    f9b4:	ed9f 4b3c 	vldr	d4, [pc, #240]	; faa8 <Home::request()+0x180>
    f9b8:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
        double a2 = axis2.getInstrumentCoordinate() - homePosition.a2;
    f9bc:	ee30 0b47 	vsub.f64	d0, d0, d7
        if (abs(a1) > degToRad(AXIS1_SENSE_HOME_DIST_LIMIT) - abs(arcsecToRad(settings.axis1.senseOffset))) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    f9c0:	ee85 7b04 	vdiv.f64	d7, d5, d4
    f9c4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; fab0 <Home::request()+0x188>
    f9c8:	eeb0 7bc7 	vabs.f64	d7, d7
    f9cc:	ee36 7b47 	vsub.f64	d7, d6, d7
    f9d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9d8:	dc34      	bgt.n	fa44 <Home::request()+0x11c>
        if (abs(a2) > degToRad(AXIS2_SENSE_HOME_DIST_LIMIT) - abs(arcsecToRad(settings.axis2.senseOffset))) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    f9da:	f8d4 3007 	ldr.w	r3, [r4, #7]
    f9de:	eeb0 0bc0 	vabs.f64	d0, d0
    f9e2:	ee05 3a10 	vmov	s10, r3
    f9e6:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    f9ea:	ee85 7b04 	vdiv.f64	d7, d5, d4
    f9ee:	eeb0 7bc7 	vabs.f64	d7, d7
    f9f2:	ee36 6b47 	vsub.f64	d6, d6, d7
    f9f6:	eeb4 0bc6 	vcmpe.f64	d0, d6
    f9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9fe:	dc21      	bgt.n	fa44 <Home::request()+0x11c>
    if (goTo.state != GS_NONE) {
    fa00:	7833      	ldrb	r3, [r6, #0]
    fa02:	2b00      	cmp	r3, #0
    fa04:	d147      	bne.n	fa96 <Home::request()+0x16e>
  if (guide.state != GU_NONE) {
    fa06:	7839      	ldrb	r1, [r7, #0]
    fa08:	2900      	cmp	r1, #0
    fa0a:	d13d      	bne.n	fa88 <Home::request()+0x160>
    fa0c:	4620      	mov	r0, r4
    fa0e:	f7ff fe2f 	bl	f670 <Home::reset(bool) [clone .part.0]>
        if (e != CE_NONE) return e;
    fa12:	4605      	mov	r5, r0
    fa14:	b948      	cbnz	r0, fa2a <Home::request()+0x102>
      isRequestWithReset = false;
    fa16:	f44f 7380 	mov.w	r3, #256	; 0x100
      guide.startHome();
    fa1a:	4829      	ldr	r0, [pc, #164]	; (fac0 <Home::request()+0x198>)
      isRequestWithReset = false;
    fa1c:	81a3      	strh	r3, [r4, #12]
      guide.startHome();
    fa1e:	f7ff f8fd 	bl	ec1c <Guide::startHome()>
  return CE_NONE;
    fa22:	e002      	b.n	fa2a <Home::request()+0x102>
      if (guide.state == GU_HOME_GUIDE) guide.stop();
    fa24:	2d04      	cmp	r5, #4
    fa26:	d02a      	beq.n	fa7e <Home::request()+0x156>
    if (goTo.state != GS_NONE) return CE_SLEW_IN_MOTION;
    fa28:	2516      	movs	r5, #22
}
    fa2a:	4628      	mov	r0, r5
    fa2c:	b02d      	add	sp, #180	; 0xb4
    fa2e:	ecbd 8b02 	vpop	{d8}
    fa32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!site.dateIsReady || !site.timeIsReady) return CE_SLEW_ERR_IN_STANDBY;
    fa36:	2511      	movs	r5, #17
}
    fa38:	4628      	mov	r0, r5
    fa3a:	b02d      	add	sp, #180	; 0xb4
    fa3c:	ecbd 8b02 	vpop	{d8}
    fa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (abs(a1) > degToRad(AXIS1_SENSE_HOME_DIST_LIMIT) - abs(arcsecToRad(settings.axis1.senseOffset))) return CE_SLEW_ERR_OUTSIDE_LIMITS;
    fa44:	2514      	movs	r5, #20
}
    fa46:	4628      	mov	r0, r5
    fa48:	b02d      	add	sp, #180	; 0xb4
    fa4a:	ecbd 8b02 	vpop	{d8}
    fa4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        state = HS_HOMING;
    fa52:	2301      	movs	r3, #1
        CommandError result = goTo.request(homePosition, PSS_EAST_ONLY, false);
    fa54:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
    fa58:	2250      	movs	r2, #80	; 0x50
    fa5a:	a918      	add	r1, sp, #96	; 0x60
        state = HS_HOMING;
    fa5c:	7363      	strb	r3, [r4, #13]
        CommandError result = goTo.request(homePosition, PSS_EAST_ONLY, false);
    fa5e:	2304      	movs	r3, #4
    fa60:	4668      	mov	r0, sp
    fa62:	9314      	str	r3, [sp, #80]	; 0x50
    fa64:	f008 fd32 	bl	184cc <memcpy>
    fa68:	4630      	mov	r0, r6
    fa6a:	e898 000c 	ldmia.w	r8, {r2, r3}
    fa6e:	f7fd fe17 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
        if (result != CE_NONE) {
    fa72:	4605      	mov	r5, r0
    fa74:	2800      	cmp	r0, #0
    fa76:	d0d8      	beq.n	fa2a <Home::request()+0x102>
          state = HS_NONE;
    fa78:	f884 900d 	strb.w	r9, [r4, #13]
    fa7c:	e7d5      	b.n	fa2a <Home::request()+0x102>
      if (guide.state == GU_HOME_GUIDE) guide.stop();
    fa7e:	4638      	mov	r0, r7
      return CE_SLEW_IN_MOTION;
    fa80:	2516      	movs	r5, #22
      if (guide.state == GU_HOME_GUIDE) guide.stop();
    fa82:	f7fe fdb3 	bl	e5ec <Guide::stop()>
    fa86:	e7d0      	b.n	fa2a <Home::request()+0x102>
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    fa88:	2904      	cmp	r1, #4
    fa8a:	d1cd      	bne.n	fa28 <Home::request()+0x100>
    fa8c:	480c      	ldr	r0, [pc, #48]	; (fac0 <Home::request()+0x198>)
    return CE_SLEW_IN_MOTION;
    fa8e:	2516      	movs	r5, #22
    if (guide.state == GU_HOME_GUIDE) guide.stop();
    fa90:	f7fe fdac 	bl	e5ec <Guide::stop()>
        if (e != CE_NONE) return e;
    fa94:	e7c9      	b.n	fa2a <Home::request()+0x102>
      axis1.autoSlewAbort();
    fa96:	480c      	ldr	r0, [pc, #48]	; (fac8 <Home::request()+0x1a0>)
      return CE_SLEW_IN_MOTION;
    fa98:	2516      	movs	r5, #22
      axis1.autoSlewAbort();
    fa9a:	f7f2 f9b5 	bl	1e08 <Axis::autoSlewAbort()>
      axis2.autoSlewAbort();
    fa9e:	480b      	ldr	r0, [pc, #44]	; (facc <Home::request()+0x1a4>)
    faa0:	f7f2 f9b2 	bl	1e08 <Axis::autoSlewAbort()>
        if (e != CE_NONE) return e;
    faa4:	e7c1      	b.n	fa2a <Home::request()+0x102>
    faa6:	bf00      	nop
    faa8:	7331ad79 	.word	0x7331ad79
    faac:	41092dc6 	.word	0x41092dc6
    fab0:	54442d18 	.word	0x54442d18
    fab4:	400921fb 	.word	0x400921fb
    fab8:	200055d0 	.word	0x200055d0
    fabc:	20005270 	.word	0x20005270
    fac0:	200043e8 	.word	0x200043e8
    fac4:	200054e0 	.word	0x200054e0
    fac8:	200050e8 	.word	0x200050e8
    facc:	200051a8 	.word	0x200051a8

0000fad0 <_GLOBAL__sub_I__ZN4Home4initEv>:
  HomeSense axis1;
  HomeSense axis2;
} Settings;
#pragma pack()

class Home {
    fad0:	4b05      	ldr	r3, [pc, #20]	; (fae8 <_GLOBAL__sub_I__ZN4Home4initEv+0x18>)
    fad2:	2200      	movs	r2, #0
    fad4:	f8c3 2001 	str.w	r2, [r3, #1]
    fad8:	731a      	strb	r2, [r3, #12]
    fada:	739a      	strb	r2, [r3, #14]
    fadc:	f803 2b01 	strb.w	r2, [r3], #1
    fae0:	605a      	str	r2, [r3, #4]
    fae2:	f8c3 2007 	str.w	r2, [r3, #7]

Home home;
    fae6:	4770      	bx	lr
    fae8:	20005478 	.word	0x20005478
    faec:	00000000 	.word	0x00000000

0000faf0 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "../coordinates/Transform.h"
#include "../goto/Goto.h"

char const *ObjectStr[] = {"UNK", "OC", "GC", "PN", "DN", "SG", "EG", "IG", "KNT", "SNR", "GAL", "CN", "STR", "PLA", "CMT", "AST"};

bool Library::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    faf2:	ed2d 8b04 	vpush	{d8-d9}
    faf6:	b0a1      	sub	sp, #132	; 0x84
    faf8:	469c      	mov	ip, r3
  *supressFrame = false;
    fafa:	2400      	movs	r4, #0
bool Library::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
    fafc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  *supressFrame = false;
    fafe:	701c      	strb	r4, [r3, #0]

    //   L - Object Library Commands
    if (command[0] == 'L') {
    fb00:	7813      	ldrb	r3, [r2, #0]
    fb02:	2b4c      	cmp	r3, #76	; 0x4c
    fb04:	d12e      	bne.n	fb64 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x74>

      // :LB#       Find previous catalog object subject to the current constraints
      //            Returns: Nothing
      if (command[1] == 'B' && parameter[0] == 0) { 
    fb06:	7852      	ldrb	r2, [r2, #1]
    fb08:	2a42      	cmp	r2, #66	; 0x42
    fb0a:	d030      	beq.n	fb6e <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7e>
        *numericReply = false;
      } else 

      // :LC[n]#    Set current target object to catalog object number
      //            Returns: Nothing
      if (command[1] == 'C') {
    fb0c:	2a43      	cmp	r2, #67	; 0x43
    fb0e:	4605      	mov	r5, r0
    fb10:	f000 80a7 	beq.w	fc62 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x172>
        } else *commandError = CE_PARAM_FORM;
      } else 

      // :LI#       Get Object Information
      //            Returns: s# (string containing the current target object’s name and object type)
      if (command[1] == 'I' && parameter[0] == 0) {
    fb14:	2a49      	cmp	r2, #73	; 0x49
    fb16:	460e      	mov	r6, r1
    fb18:	f000 808a 	beq.w	fc30 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x140>
        *numericReply = false;
      } else 

      // :LR#       Get catalog object information including RA and Dec, with advance to next record
      //            Returns: s# (string containing the current target object’s name, type, RA, and Dec)
      if (command[1] == 'R' && parameter[0] == 0) {
    fb1c:	2a52      	cmp	r2, #82	; 0x52
    fb1e:	d030      	beq.n	fb82 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x92>
      // :LW[s]#    Write catalog object information including current target RA,Dec to next available empty record
      //            If at the end of the object list (:LI# command returns an empty string "#") a new item is automatically added
      //            [s] is a string of up to eleven chars followed by a comma and a type designation for ex. ":LWM31 AND,GAL#"
      //            Returns: 0 on failure (memory full, for example)
      //                     1 on success
      if (command[1] == 'W') {
    fb20:	2a57      	cmp	r2, #87	; 0x57
    fb22:	d05b      	beq.n	fbdc <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0xec>
        if (firstFreeRec()) writeVars(name, i, target.r, target.d); else *commandError = CE_LIBRARY_FULL;
      } else 

      // :LN#       Find next catalog object subject to the current constraints
      //            Returns: Nothing
      if (command[1] == 'N' && parameter[0] == 0) { 
    fb24:	2a4e      	cmp	r2, #78	; 0x4e
    fb26:	f000 80b0 	beq.w	fc8a <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x19a>
        *numericReply = false;
      } else 

      // :L$#       Move to catalog name record
      //            Returns: 1
      if (command[1] == '$' && parameter[0] == 0) { 
    fb2a:	2a24      	cmp	r2, #36	; 0x24
    fb2c:	f000 80be 	beq.w	fcac <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1bc>
        *numericReply = true;
      } else 

      // :LD#       Clear current record
      //            Returns: Nothing
      if (command[1] == 'D' && parameter[0] == 0) { 
    fb30:	2a44      	cmp	r2, #68	; 0x44
    fb32:	f000 80db 	beq.w	fcec <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1fc>
        *numericReply = false;
      } else 

      // :LL#       Clear current catalog
      //            Returns: Nothing
      if (command[1] == 'L' && parameter[0] == 0) { 
    fb36:	2a4c      	cmp	r2, #76	; 0x4c
    fb38:	f000 80e4 	beq.w	fd04 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x214>
        *numericReply = false;
      } else 

      // :L!#       Clear library (all catalogs)
      //            Returns: Nothing
      if (command[1] == '!' && parameter[0] == 0) { 
    fb3c:	2a21      	cmp	r2, #33	; 0x21
    fb3e:	f000 8105 	beq.w	fd4c <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x25c>
        *numericReply = false;
      } else 

      // :L?#       Get library free records (all catalogs)
      //            Returns: n#
      if (command[1] == '?' && parameter[0] == 0) { 
    fb42:	2a3f      	cmp	r2, #63	; 0x3f
    fb44:	f040 80be 	bne.w	fcc4 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1d4>
    fb48:	f89c 4000 	ldrb.w	r4, [ip]
    fb4c:	b9a4      	cbnz	r4, fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        sprintf(reply, "%ld", recFreeAll());
    fb4e:	f000 fc97 	bl	10480 <Library::recFreeAll()>
    fb52:	49b7      	ldr	r1, [pc, #732]	; (fe30 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x340>)
    fb54:	4602      	mov	r2, r0
    fb56:	4630      	mov	r0, r6
    fb58:	f00f f9ca 	bl	1eef0 <sprintf>
        *numericReply = false;
    fb5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
      } else *commandError = CE_PARAM_FORM;
    } else *commandError = CE_CMD_UNKNOWN;

  } else return false;

  return true;
    fb5e:	2001      	movs	r0, #1
        *numericReply = false;
    fb60:	701c      	strb	r4, [r3, #0]
    fb62:	e000      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
  } else return false;
    fb64:	4620      	mov	r0, r4
}
    fb66:	b021      	add	sp, #132	; 0x84
    fb68:	ecbd 8b04 	vpop	{d8-d9}
    fb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (command[1] == 'B' && parameter[0] == 0) { 
    fb6e:	f89c 4000 	ldrb.w	r4, [ip]
    fb72:	2c00      	cmp	r4, #0
    fb74:	f000 8094 	beq.w	fca0 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1b0>
    } else *commandError = CE_CMD_UNKNOWN;
    fb78:	2302      	movs	r3, #2
    fb7a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  return true;
    fb7c:	2001      	movs	r0, #1
    } else *commandError = CE_CMD_UNKNOWN;
    fb7e:	7013      	strb	r3, [r2, #0]
    fb80:	e7f1      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
      if (command[1] == 'R' && parameter[0] == 0) {
    fb82:	f89c 4000 	ldrb.w	r4, [ip]
    fb86:	2c00      	cmp	r4, #0
    fb88:	d1f6      	bne.n	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        readVars(reply, &i, &target.r, &target.d);
    fb8a:	ab0e      	add	r3, sp, #56	; 0x38
    fb8c:	aa04      	add	r2, sp, #16
        strcat(reply, ",");
    fb8e:	272c      	movs	r7, #44	; 0x2c
        readVars(reply, &i, &target.r, &target.d);
    fb90:	9300      	str	r3, [sp, #0]
    fb92:	ab0a      	add	r3, sp, #40	; 0x28
    fb94:	f000 fa04 	bl	ffa0 <Library::readVars(char*, int*, double*, double*)>
    inline void setGotoTarget(Coordinate *coords) { gotoTarget = *coords; }
    fb98:	2258      	movs	r2, #88	; 0x58
    fb9a:	a90a      	add	r1, sp, #40	; 0x28
    fb9c:	48a5      	ldr	r0, [pc, #660]	; (fe34 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x344>)
    fb9e:	f008 fc95 	bl	184cc <memcpy>
        char const * objType = ObjectStr[i];
    fba2:	9a04      	ldr	r2, [sp, #16]
    fba4:	4ba4      	ldr	r3, [pc, #656]	; (fe38 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x348>)
        strcat(reply, ",");
    fba6:	4630      	mov	r0, r6
        char const * objType = ObjectStr[i];
    fba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    fbac:	9103      	str	r1, [sp, #12]
        strcat(reply, ",");
    fbae:	f010 f8e7 	bl	1fd80 <strlen>
    fbb2:	5437      	strb	r7, [r6, r0]
    fbb4:	3001      	adds	r0, #1
        strcat(reply, objType);
    fbb6:	9903      	ldr	r1, [sp, #12]
    fbb8:	4430      	add	r0, r6
    fbba:	f010 f84f 	bl	1fc5c <strcpy>
        if (strcmp(reply, ",UNK") != 0) {
    fbbe:	499f      	ldr	r1, [pc, #636]	; (fe3c <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x34c>)
    fbc0:	4630      	mov	r0, r6
    fbc2:	f00f fee1 	bl	1f988 <strcmp>
    fbc6:	2800      	cmp	r0, #0
    fbc8:	f040 80fb 	bne.w	fdc2 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2d2>
        nextRec();
    fbcc:	4628      	mov	r0, r5
    fbce:	f000 fb01 	bl	101d4 <Library::nextRec()>
        *numericReply = false;
    fbd2:	2300      	movs	r3, #0
    fbd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  return true;
    fbd6:	2001      	movs	r0, #1
        *numericReply = false;
    fbd8:	7013      	strb	r3, [r2, #0]
      } else 
    fbda:	e7c4      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
    fbdc:	ab0a      	add	r3, sp, #40	; 0x28
    fbde:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
          name[l] = 0;
    fbe2:	4620      	mov	r0, r4
          if (parameter[l] == ',') break;
    fbe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
          name[l] = 0;
    fbe8:	f803 0b01 	strb.w	r0, [r3], #1
          if (parameter[l] == ',') break;
    fbec:	2a2c      	cmp	r2, #44	; 0x2c
    fbee:	f000 80b8 	beq.w	fd62 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x272>
          name[l + 1] = 0;
    fbf2:	3401      	adds	r4, #1
          name[l] = parameter[l];
    fbf4:	f803 2c01 	strb.w	r2, [r3, #-1]
          name[l + 1] = 0;
    fbf8:	7018      	strb	r0, [r3, #0]
        } while (l < 12);
    fbfa:	2c0c      	cmp	r4, #12
    fbfc:	d1f2      	bne.n	fbe4 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0xf4>
        if (parameter[l] == ',') {
    fbfe:	f89c 300c 	ldrb.w	r3, [ip, #12]
    fc02:	2b2c      	cmp	r3, #44	; 0x2c
    fc04:	f000 80ad 	beq.w	fd62 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x272>
        int16_t i = 0;
    fc08:	2600      	movs	r6, #0
    inline Coordinate getGotoTarget() { return gotoTarget; }
    fc0a:	4b8d      	ldr	r3, [pc, #564]	; (fe40 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x350>)
        if (firstFreeRec()) writeVars(name, i, target.r, target.d); else *commandError = CE_LIBRARY_FULL;
    fc0c:	4628      	mov	r0, r5
    fc0e:	ed93 8b04 	vldr	d8, [r3, #16]
    fc12:	ed93 9b08 	vldr	d9, [r3, #32]
    fc16:	f000 fa83 	bl	10120 <Library::firstFreeRec()>
    fc1a:	2800      	cmp	r0, #0
    fc1c:	f040 80c1 	bne.w	fda2 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2b2>
    fc20:	230e      	movs	r3, #14
    fc22:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    fc24:	7013      	strb	r3, [r2, #0]
  return true;
    fc26:	2001      	movs	r0, #1
}
    fc28:	b021      	add	sp, #132	; 0x84
    fc2a:	ecbd 8b04 	vpop	{d8-d9}
    fc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (command[1] == 'I' && parameter[0] == 0) {
    fc30:	f89c 4000 	ldrb.w	r4, [ip]
    fc34:	2c00      	cmp	r4, #0
    fc36:	d070      	beq.n	fd1a <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22a>
      if (command[1] == 'I' && parameter[0] == 'G' && parameter[1] == 0) {
    fc38:	2c47      	cmp	r4, #71	; 0x47
    fc3a:	d19d      	bne.n	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
    fc3c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    fc40:	2c00      	cmp	r4, #0
    fc42:	d199      	bne.n	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        readVars(reply, &i, &target.r, &target.d);
    fc44:	ab0e      	add	r3, sp, #56	; 0x38
    fc46:	aa05      	add	r2, sp, #20
    fc48:	9300      	str	r3, [sp, #0]
    fc4a:	ab0a      	add	r3, sp, #40	; 0x28
    fc4c:	f000 f9a8 	bl	ffa0 <Library::readVars(char*, int*, double*, double*)>
    inline void setGotoTarget(Coordinate *coords) { gotoTarget = *coords; }
    fc50:	2258      	movs	r2, #88	; 0x58
    fc52:	a90a      	add	r1, sp, #40	; 0x28
    fc54:	4877      	ldr	r0, [pc, #476]	; (fe34 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x344>)
    fc56:	f008 fc39 	bl	184cc <memcpy>
        *numericReply = false;
    fc5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  return true;
    fc5c:	2001      	movs	r0, #1
        *numericReply = false;
    fc5e:	701c      	strb	r4, [r3, #0]
      } else 
    fc60:	e781      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
        if (convert.atoi2(parameter, &i)) {
    fc62:	2301      	movs	r3, #1
    fc64:	aa0a      	add	r2, sp, #40	; 0x28
    fc66:	4661      	mov	r1, ip
    fc68:	4876      	ldr	r0, [pc, #472]	; (fe44 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x354>)
    fc6a:	f7f4 fbf3 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    fc6e:	b140      	cbz	r0, fc82 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x192>
            if (i >= 0) {
    fc70:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
    fc74:	2900      	cmp	r1, #0
    fc76:	f280 809e 	bge.w	fdb6 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2c6>
        } else *commandError = CE_PARAM_RANGE;
    fc7a:	2304      	movs	r3, #4
    fc7c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    fc7e:	7013      	strb	r3, [r2, #0]
    fc80:	e7d1      	b.n	fc26 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x136>
      } else *commandError = CE_PARAM_FORM;
    fc82:	2305      	movs	r3, #5
    fc84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    fc86:	7013      	strb	r3, [r2, #0]
    fc88:	e7cd      	b.n	fc26 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x136>
      if (command[1] == 'N' && parameter[0] == 0) { 
    fc8a:	f89c 4000 	ldrb.w	r4, [ip]
    fc8e:	2c00      	cmp	r4, #0
    fc90:	f47f af72 	bne.w	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        nextRec();
    fc94:	f000 fa9e 	bl	101d4 <Library::nextRec()>
        *numericReply = false;
    fc98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  return true;
    fc9a:	2001      	movs	r0, #1
        *numericReply = false;
    fc9c:	701c      	strb	r4, [r3, #0]
    fc9e:	e762      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
        prevRec();
    fca0:	f000 fa6a 	bl	10178 <Library::prevRec()>
        *numericReply = false;
    fca4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  return true;
    fca6:	2001      	movs	r0, #1
        *numericReply = false;
    fca8:	701c      	strb	r4, [r3, #0]
    fcaa:	e75c      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
      if (command[1] == '$' && parameter[0] == 0) { 
    fcac:	f89c 3000 	ldrb.w	r3, [ip]
    fcb0:	2b00      	cmp	r3, #0
    fcb2:	f47f af61 	bne.w	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        nameRec();
    fcb6:	f000 fa01 	bl	100bc <Library::nameRec()>
        *numericReply = true;
    fcba:	2301      	movs	r3, #1
    fcbc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  return true;
    fcbe:	4618      	mov	r0, r3
        *numericReply = true;
    fcc0:	7013      	strb	r3, [r2, #0]
    fcc2:	e750      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
      if (command[1] == 'o') {
    fcc4:	2a6f      	cmp	r2, #111	; 0x6f
    fcc6:	f47f af57 	bne.w	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
      if (convert.atoi2(parameter, &i)) {
    fcca:	2301      	movs	r3, #1
    fccc:	aa0a      	add	r2, sp, #40	; 0x28
    fcce:	4661      	mov	r1, ip
    fcd0:	485c      	ldr	r0, [pc, #368]	; (fe44 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x354>)
    fcd2:	f7f4 fbbf 	bl	4454 <Convert::atoi2(char*, short*, bool)>
    fcd6:	2800      	cmp	r0, #0
    fcd8:	d0d3      	beq.n	fc82 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x192>
        if (i >= 0 && i <= 14) {
    fcda:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
    fcde:	b28b      	uxth	r3, r1
    fce0:	2b0e      	cmp	r3, #14
    fce2:	d8ca      	bhi.n	fc7a <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18a>
          setCatalog(i);
    fce4:	4628      	mov	r0, r5
    fce6:	f000 fafd 	bl	102e4 <Library::setCatalog(int)>
    fcea:	e79c      	b.n	fc26 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x136>
      if (command[1] == 'D' && parameter[0] == 0) { 
    fcec:	f89c 3000 	ldrb.w	r3, [ip]
    fcf0:	2b00      	cmp	r3, #0
    fcf2:	f47f af41 	bne.w	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        clearCurrentRec();
    fcf6:	f000 fb51 	bl	1039c <Library::clearCurrentRec()>
        *numericReply = false;
    fcfa:	2300      	movs	r3, #0
    fcfc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  return true;
    fcfe:	2001      	movs	r0, #1
        *numericReply = false;
    fd00:	7013      	strb	r3, [r2, #0]
    fd02:	e730      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
      if (command[1] == 'L' && parameter[0] == 0) { 
    fd04:	f89c 4000 	ldrb.w	r4, [ip]
    fd08:	2c00      	cmp	r4, #0
    fd0a:	f47f af35 	bne.w	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        clearLib();
    fd0e:	f000 fb6f 	bl	103f0 <Library::clearLib()>
        *numericReply = false;
    fd12:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  return true;
    fd14:	2001      	movs	r0, #1
        *numericReply = false;
    fd16:	701c      	strb	r4, [r3, #0]
    fd18:	e725      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
        readVars(reply, &i, &target.r, &target.d);
    fd1a:	ab0e      	add	r3, sp, #56	; 0x38
    fd1c:	aa05      	add	r2, sp, #20
    fd1e:	9300      	str	r3, [sp, #0]
    fd20:	ab0a      	add	r3, sp, #40	; 0x28
    fd22:	f000 f93d 	bl	ffa0 <Library::readVars(char*, int*, double*, double*)>
        char const *objType = ObjectStr[i];
    fd26:	9a05      	ldr	r2, [sp, #20]
    fd28:	4b43      	ldr	r3, [pc, #268]	; (fe38 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x348>)
        strcat(reply, ",");
    fd2a:	4630      	mov	r0, r6
        char const *objType = ObjectStr[i];
    fd2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    fd30:	9103      	str	r1, [sp, #12]
        strcat(reply, ",");
    fd32:	f010 f825 	bl	1fd80 <strlen>
    fd36:	232c      	movs	r3, #44	; 0x2c
        strcat(reply, objType);
    fd38:	9903      	ldr	r1, [sp, #12]
        strcat(reply, ",");
    fd3a:	5433      	strb	r3, [r6, r0]
    fd3c:	3001      	adds	r0, #1
        strcat(reply, objType);
    fd3e:	4430      	add	r0, r6
    fd40:	f00f ff8c 	bl	1fc5c <strcpy>
        *numericReply = false;
    fd44:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  return true;
    fd46:	2001      	movs	r0, #1
        *numericReply = false;
    fd48:	701c      	strb	r4, [r3, #0]
      } else 
    fd4a:	e70c      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
      if (command[1] == '!' && parameter[0] == 0) { 
    fd4c:	f89c 4000 	ldrb.w	r4, [ip]
    fd50:	2c00      	cmp	r4, #0
    fd52:	f47f af11 	bne.w	fb78 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88>
        clearAll();
    fd56:	f000 fb7b 	bl	10450 <Library::clearAll()>
        *numericReply = false;
    fd5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  return true;
    fd5c:	2001      	movs	r0, #1
        *numericReply = false;
    fd5e:	701c      	strb	r4, [r3, #0]
    fd60:	e701      	b.n	fb66 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76>
            objType[m] = parameter[l];
    fd62:	eb0c 0204 	add.w	r2, ip, r4
    fd66:	2300      	movs	r3, #0
    fd68:	3401      	adds	r4, #1
    fd6a:	7856      	ldrb	r6, [r2, #1]
            objType[m + 1] = 0;
    fd6c:	4618      	mov	r0, r3
    fd6e:	4464      	add	r4, ip
    fd70:	aa20      	add	r2, sp, #128	; 0x80
    fd72:	fa02 f183 	sxtah	r1, r2, r3
          } while (parameter[l] != 0);
    fd76:	3301      	adds	r3, #1
            objType[m] = parameter[l];
    fd78:	f801 6c6c 	strb.w	r6, [r1, #-108]
          } while (parameter[l] != 0);
    fd7c:	f814 6f01 	ldrb.w	r6, [r4, #1]!
            objType[m + 1] = 0;
    fd80:	f801 0c6b 	strb.w	r0, [r1, #-107]
          } while (parameter[l] != 0);
    fd84:	2e00      	cmp	r6, #0
    fd86:	d1f3      	bne.n	fd70 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x280>
    fd88:	4f2f      	ldr	r7, [pc, #188]	; (fe48 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x358>)
          for (l = 0; l <= 15; l++) { if (strcmp(objType, ObjectStr[l]) == 0) i = l; }
    fd8a:	4634      	mov	r4, r6
    fd8c:	f857 1f04 	ldr.w	r1, [r7, #4]!
    fd90:	a805      	add	r0, sp, #20
    fd92:	f00f fdf9 	bl	1f988 <strcmp>
    fd96:	b900      	cbnz	r0, fd9a <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2aa>
    fd98:	b226      	sxth	r6, r4
    fd9a:	3401      	adds	r4, #1
    fd9c:	2c10      	cmp	r4, #16
    fd9e:	d1f5      	bne.n	fd8c <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x29c>
    fda0:	e733      	b.n	fc0a <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
        if (firstFreeRec()) writeVars(name, i, target.r, target.d); else *commandError = CE_LIBRARY_FULL;
    fda2:	eeb0 1b49 	vmov.f64	d1, d9
    fda6:	4632      	mov	r2, r6
    fda8:	eeb0 0b48 	vmov.f64	d0, d8
    fdac:	a90a      	add	r1, sp, #40	; 0x28
    fdae:	4628      	mov	r0, r5
    fdb0:	f000 f84e 	bl	fe50 <Library::writeVars(char*, int, double, double)>
    fdb4:	e737      	b.n	fc26 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x136>
            gotoRec(i);
    fdb6:	4628      	mov	r0, r5
    fdb8:	f000 faba 	bl	10330 <Library::gotoRec(long)>
            *numericReply = false;
    fdbc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    fdbe:	701c      	strb	r4, [r3, #0]
    fdc0:	e731      	b.n	fc26 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x136>
          convert.doubleToHms(ws, radToHrs(target.r), false, PM_HIGH); strcat(reply, ","); strcat(reply, ws);
    fdc2:	ed9f 7b17 	vldr	d7, [pc, #92]	; fe20 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>
    fdc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
    fdca:	4622      	mov	r2, r4
    fdcc:	2302      	movs	r3, #2
    fdce:	a905      	add	r1, sp, #20
    fdd0:	481c      	ldr	r0, [pc, #112]	; (fe44 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x354>)
    fdd2:	ee20 0b07 	vmul.f64	d0, d0, d7
    fdd6:	f7f4 f9ab 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
    fdda:	4630      	mov	r0, r6
    fddc:	f00f ffd0 	bl	1fd80 <strlen>
    fde0:	5437      	strb	r7, [r6, r0]
    fde2:	3001      	adds	r0, #1
    fde4:	a905      	add	r1, sp, #20
    fde6:	4430      	add	r0, r6
    fde8:	f00f ff38 	bl	1fc5c <strcpy>
          convert.doubleToDms(ws, radToDeg(target.d), false, true, PM_HIGH); strcat(reply, ","); strcat(reply, ws);
    fdec:	2302      	movs	r3, #2
    fdee:	a905      	add	r1, sp, #20
    fdf0:	4622      	mov	r2, r4
    fdf2:	9300      	str	r3, [sp, #0]
    fdf4:	2301      	movs	r3, #1
    fdf6:	4813      	ldr	r0, [pc, #76]	; (fe44 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x354>)
    fdf8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; fe28 <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0x338>
    fdfc:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
    fe00:	ee20 0b07 	vmul.f64	d0, d0, d7
    fe04:	f7f4 fa58 	bl	42b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>
    fe08:	4630      	mov	r0, r6
    fe0a:	f00f ffb9 	bl	1fd80 <strlen>
    fe0e:	5437      	strb	r7, [r6, r0]
    fe10:	3001      	adds	r0, #1
    fe12:	a905      	add	r1, sp, #20
    fe14:	4430      	add	r0, r6
    fe16:	f00f ff21 	bl	1fc5c <strcpy>
    fe1a:	e6d7      	b.n	fbcc <Library::command(char*, char*, char*, bool*, bool*, CommandError*)+0xdc>
    fe1c:	f3af 8000 	nop.w
    fe20:	a4aeacc4 	.word	0xa4aeacc4
    fe24:	400e8ec8 	.word	0x400e8ec8
    fe28:	1a63c1f8 	.word	0x1a63c1f8
    fe2c:	404ca5dc 	.word	0x404ca5dc
    fe30:	20002248 	.word	0x20002248
    fe34:	20005280 	.word	0x20005280
    fe38:	20003698 	.word	0x20003698
    fe3c:	200022f0 	.word	0x200022f0
    fe40:	20005270 	.word	0x20005270
    fe44:	200043d0 	.word	0x200043d0
    fe48:	20003694 	.word	0x20003694
    fe4c:	00000000 	.word	0x00000000

0000fe50 <Library::writeVars(char*, int, double, double)>:
  RA = radToDeg(RA);
    fe50:	ed9f 6b45 	vldr	d6, [pc, #276]	; ff68 <Library::writeVars(char*, int, double, double)+0x118>
void Library::writeVars(char* name, int code, double RA, double Dec) {
    fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
  RA = radToDeg(RA);
    fe56:	ee20 0b06 	vmul.f64	d0, d0, d6
void Library::writeVars(char* name, int code, double RA, double Dec) {
    fe5a:	b089      	sub	sp, #36	; 0x24
    fe5c:	460c      	mov	r4, r1
  work.libRec.code = (code | (catalog << 4));
    fe5e:	6981      	ldr	r1, [r0, #24]
  for (int16_t l = 0; l < 11; l++) work.libRec.name[l] = name[l];
    fe60:	466d      	mov	r5, sp
void Library::writeVars(char* name, int code, double RA, double Dec) {
    fe62:	4684      	mov	ip, r0
  work.libRec.code = (code | (catalog << 4));
    fe64:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  for (int16_t l = 0; l < 11; l++) work.libRec.name[l] = name[l];
    fe68:	6820      	ldr	r0, [r4, #0]
    fe6a:	6861      	ldr	r1, [r4, #4]
    fe6c:	462b      	mov	r3, r5
  Dec = radToDeg(Dec);
    fe6e:	ee21 1b06 	vmul.f64	d1, d1, d6
  work.libRec.code = (code | (catalog << 4));
    fe72:	b2d2      	uxtb	r2, r2
    libRec_t list;

    libRec_t readRec(long address);
    void writeRec(long address, libRec_t data);
    void clearRec(long address);
    inline double degRange(double d) { while (d >= 360.0) d -= 360.0; while (d < 0.0)  d += 360.0; return d; }
    fe74:	ed9f 7b3e 	vldr	d7, [pc, #248]	; ff70 <Library::writeVars(char*, int, double, double)+0x120>
  for (int16_t l = 0; l < 11; l++) work.libRec.name[l] = name[l];
    fe78:	c303      	stmia	r3!, {r0, r1}
    fe7a:	8921      	ldrh	r1, [r4, #8]
    fe7c:	eeb4 0bc7 	vcmpe.f64	d0, d7
    fe80:	8019      	strh	r1, [r3, #0]
    fe82:	7aa1      	ldrb	r1, [r4, #10]
    fe84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe88:	7099      	strb	r1, [r3, #2]
    fe8a:	db06      	blt.n	fe9a <Library::writeVars(char*, int, double, double)+0x4a>
    fe8c:	ee30 0b47 	vsub.f64	d0, d0, d7
    fe90:	eeb4 0bc7 	vcmpe.f64	d0, d7
    fe94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe98:	daf8      	bge.n	fe8c <Library::writeVars(char*, int, double, double)+0x3c>
    fe9a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    fe9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fea2:	d508      	bpl.n	feb6 <Library::writeVars(char*, int, double, double)+0x66>
    fea4:	ed9f 7b32 	vldr	d7, [pc, #200]	; ff70 <Library::writeVars(char*, int, double, double)+0x120>
    fea8:	ee30 0b07 	vadd.f64	d0, d0, d7
    feac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    feb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    feb4:	d4f8      	bmi.n	fea8 <Library::writeVars(char*, int, double, double)+0x58>
  if (Dec > 90.0) Dec = 90.0; 
    feb6:	ed9f 6b30 	vldr	d6, [pc, #192]	; ff78 <Library::writeVars(char*, int, double, double)+0x128>
  RA = degRange(RA)/360.0;
    feba:	ed9f 5b2d 	vldr	d5, [pc, #180]	; ff70 <Library::writeVars(char*, int, double, double)+0x120>
  if (Dec > 90.0) Dec = 90.0; 
    febe:	eeb4 1bc6 	vcmpe.f64	d1, d6
  RA = degRange(RA)/360.0;
    fec2:	ee80 7b05 	vdiv.f64	d7, d0, d5
  if (Dec > 90.0) Dec = 90.0; 
    fec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    feca:	dc37      	bgt.n	ff3c <Library::writeVars(char*, int, double, double)+0xec>
  if (Dec < -90.0) Dec = -90.0;
    fecc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; ff80 <Library::writeVars(char*, int, double, double)+0x130>
    fed0:	eeb4 1bc5 	vcmpe.f64	d1, d5
    fed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fed8:	d533      	bpl.n	ff42 <Library::writeVars(char*, int, double, double)+0xf2>
    feda:	2300      	movs	r3, #0
  uint16_t r = round(RA*65536.0);
    fedc:	f8ad 300e 	strh.w	r3, [sp, #14]
    fee0:	ac04      	add	r4, sp, #16
  writeRec(recPos, work);
    fee2:	f8dc 6000 	ldr.w	r6, [ip]
    fee6:	f88d 200b 	strb.w	r2, [sp, #11]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
  return work;
}

void Library::writeRec(long address, libRec_t data) {
  if (address >= 0 && address < recMax) {
    feea:	2e00      	cmp	r6, #0
  uint16_t r = round(RA*65536.0);
    feec:	ed9f 6b26 	vldr	d6, [pc, #152]	; ff88 <Library::writeVars(char*, int, double, double)+0x138>
    fef0:	ee27 7b06 	vmul.f64	d7, d7, d6
    fef4:	feb8 7b47 	vrinta.f64	d7, d7
    fef8:	eebc 7bc7 	vcvt.u32.f64	s14, d7
    fefc:	ee17 3a10 	vmov	r3, s14
    ff00:	f8ad 300c 	strh.w	r3, [sp, #12]
    ff04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ff08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (address >= 0 && address < recMax) {
    ff0c:	db14      	blt.n	ff38 <Library::writeVars(char*, int, double, double)+0xe8>
    ff0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ff12:	429e      	cmp	r6, r3
    ff14:	da10      	bge.n	ff38 <Library::writeVars(char*, int, double, double)+0xe8>
    long l = address*rec_size + byteMin;
    ff16:	f8dc 501c 	ldr.w	r5, [ip, #28]
    ff1a:	af08      	add	r7, sp, #32
    ff1c:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
    ff20:	4e1d      	ldr	r6, [pc, #116]	; (ff98 <Library::writeVars(char*, int, double, double)+0x148>)
    for (int m = 0; m < 16; m++) nv.write(l+m, data.libRecBytes[m]);
    ff22:	b2ad      	uxth	r5, r5
    ff24:	1b2d      	subs	r5, r5, r4
    ff26:	1929      	adds	r1, r5, r4
    ff28:	f814 2b01 	ldrb.w	r2, [r4], #1
    ff2c:	4630      	mov	r0, r6
    ff2e:	b289      	uxth	r1, r1
    ff30:	f7f4 ff66 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    ff34:	42a7      	cmp	r7, r4
    ff36:	d1f6      	bne.n	ff26 <Library::writeVars(char*, int, double, double)+0xd6>
}
    ff38:	b009      	add	sp, #36	; 0x24
    ff3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ff40:	e7cc      	b.n	fedc <Library::writeVars(char*, int, double, double)+0x8c>
  Dec = Dec + 90.0; Dec = Dec/180.0;
    ff42:	ee31 1b06 	vadd.f64	d1, d1, d6
    ff46:	ed9f 4b12 	vldr	d4, [pc, #72]	; ff90 <Library::writeVars(char*, int, double, double)+0x140>
  uint16_t d = round(Dec*65536.0);
    ff4a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; ff88 <Library::writeVars(char*, int, double, double)+0x138>
  Dec = Dec + 90.0; Dec = Dec/180.0;
    ff4e:	ee81 6b04 	vdiv.f64	d6, d1, d4
  uint16_t d = round(Dec*65536.0);
    ff52:	ee26 6b05 	vmul.f64	d6, d6, d5
    ff56:	feb8 6b46 	vrinta.f64	d6, d6
    ff5a:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    ff5e:	ee16 3a10 	vmov	r3, s12
    ff62:	b29b      	uxth	r3, r3
    ff64:	e7ba      	b.n	fedc <Library::writeVars(char*, int, double, double)+0x8c>
    ff66:	bf00      	nop
    ff68:	1a63c1f8 	.word	0x1a63c1f8
    ff6c:	404ca5dc 	.word	0x404ca5dc
    ff70:	00000000 	.word	0x00000000
    ff74:	40768000 	.word	0x40768000
    ff78:	00000000 	.word	0x00000000
    ff7c:	40568000 	.word	0x40568000
    ff80:	00000000 	.word	0x00000000
    ff84:	c0568000 	.word	0xc0568000
    ff88:	00000000 	.word	0x00000000
    ff8c:	40f00000 	.word	0x40f00000
    ff90:	00000000 	.word	0x00000000
    ff94:	40668000 	.word	0x40668000
    ff98:	20005e50 	.word	0x20005e50
    ff9c:	00000000 	.word	0x00000000

0000ffa0 <Library::readVars(char*, int*, double*, double*)>:
void Library::readVars(char* name, int* code, double* RA, double* Dec) {
    ffa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffa4:	460d      	mov	r5, r1
    ffa6:	b08b      	sub	sp, #44	; 0x2c
  long l = address*rec_size + byteMin;
    ffa8:	69c1      	ldr	r1, [r0, #28]
void Library::readVars(char* name, int* code, double* RA, double* Dec) {
    ffaa:	461e      	mov	r6, r3
  long l = address*rec_size + byteMin;
    ffac:	6803      	ldr	r3, [r0, #0]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
    ffae:	f10d 0a18 	add.w	sl, sp, #24
void Library::readVars(char* name, int* code, double* RA, double* Dec) {
    ffb2:	4604      	mov	r4, r0
    ffb4:	4617      	mov	r7, r2
  long l = address*rec_size + byteMin;
    ffb6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
    ffba:	483f      	ldr	r0, [pc, #252]	; (100b8 <Library::readVars(char*, int*, double*, double*)+0x118>)
    ffbc:	2310      	movs	r3, #16
    ffbe:	4652      	mov	r2, sl
    ffc0:	b289      	uxth	r1, r1
void Library::readVars(char* name, int* code, double* RA, double* Dec) {
    ffc2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
    ffc6:	f7f5 f827 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  work = readRec(recPos);
    ffca:	f89d 9023 	ldrb.w	r9, [sp, #35]	; 0x23
    ffce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    ffd2:	f10d 0c08 	add.w	ip, sp, #8
  int16_t cat = work.libRec.code >> 4;
    ffd6:	ea4f 1b19 	mov.w	fp, r9, lsr #4
  work = readRec(recPos);
    ffda:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
    ffde:	9301      	str	r3, [sp, #4]
  if (cat == 15 || cat != catalog) { name[0] = 0; *code = 0; *RA = 0.0; *Dec = 0.0; return; }
    ffe0:	f1bb 0f0f 	cmp.w	fp, #15
  work = readRec(recPos);
    ffe4:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
    ffe8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (cat == 15 || cat != catalog) { name[0] = 0; *code = 0; *RA = 0.0; *Dec = 0.0; return; }
    ffec:	d002      	beq.n	fff4 <Library::readVars(char*, int*, double*, double*)+0x54>
    ffee:	69a3      	ldr	r3, [r4, #24]
    fff0:	459b      	cmp	fp, r3
    fff2:	d00d      	beq.n	10010 <Library::readVars(char*, int*, double*, double*)+0x70>
    fff4:	2300      	movs	r3, #0
    fff6:	ed9f 6b24 	vldr	d6, [pc, #144]	; 10088 <Library::readVars(char*, int*, double*, double*)+0xe8>
    fffa:	702b      	strb	r3, [r5, #0]
    fffc:	603b      	str	r3, [r7, #0]
    fffe:	eeb0 7b46 	vmov.f64	d7, d6
   10002:	ed86 6b00 	vstr	d6, [r6]
  *Dec = degToRad(*Dec);
   10006:	ed88 7b00 	vstr	d7, [r8]
}
   1000a:	b00b      	add	sp, #44	; 0x2c
   1000c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *Dec = (double)d;
   10010:	eddd 7a01 	vldr	s15, [sp, #4]
  name[11] = 0;
   10014:	2200      	movs	r2, #0
  *code = work.libRec.code & 15;
   10016:	f009 030f 	and.w	r3, r9, #15
  *Dec = (double)d;
   1001a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
  *RA = (double)r;
   1001e:	ee07 ea90 	vmov	s15, lr
  name[11] = 0;
   10022:	72ea      	strb	r2, [r5, #11]
  *RA = (double)r;
   10024:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  *RA = (*RA/65536.0)*360.0;
   10028:	ed9f 4b19 	vldr	d4, [pc, #100]	; 10090 <Library::readVars(char*, int*, double*, double*)+0xf0>
  *Dec = ((*Dec/65536.0)*180.0)-90.0;
   1002c:	ed9f 2b1a 	vldr	d2, [pc, #104]	; 10098 <Library::readVars(char*, int*, double*, double*)+0xf8>
   10030:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 100a0 <Library::readVars(char*, int*, double*, double*)+0x100>
   10034:	ee26 6b04 	vmul.f64	d6, d6, d4
  *RA = (*RA/65536.0)*360.0;
   10038:	ee27 7b04 	vmul.f64	d7, d7, d4
  *Dec = ((*Dec/65536.0)*180.0)-90.0;
   1003c:	eea6 5b02 	vfma.f64	d5, d6, d2
  *RA = (*RA/65536.0)*360.0;
   10040:	ed9f 3b19 	vldr	d3, [pc, #100]	; 100a8 <Library::readVars(char*, int*, double*, double*)+0x108>
  for (int16_t l = 0; l < 11; l++) name[l] = work.libRec.name[l];
   10044:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
  *RA = degToRad(*RA);
   10048:	ed9f 4b19 	vldr	d4, [pc, #100]	; 100b0 <Library::readVars(char*, int*, double*, double*)+0x110>
  *RA = (*RA/65536.0)*360.0;
   1004c:	ee27 7b03 	vmul.f64	d7, d7, d3
  for (int16_t l = 0; l < 11; l++) name[l] = work.libRec.name[l];
   10050:	f8bc 2000 	ldrh.w	r2, [ip]
   10054:	6028      	str	r0, [r5, #0]
   10056:	812a      	strh	r2, [r5, #8]
   10058:	f89c 2002 	ldrb.w	r2, [ip, #2]
   1005c:	6069      	str	r1, [r5, #4]
   1005e:	72aa      	strb	r2, [r5, #10]
  *code = work.libRec.code & 15;
   10060:	603b      	str	r3, [r7, #0]
  *RA = (*RA/65536.0)*360.0;
   10062:	ed86 7b00 	vstr	d7, [r6]
  *Dec = ((*Dec/65536.0)*180.0)-90.0;
   10066:	ed88 5b00 	vstr	d5, [r8]
  *RA = degToRad(*RA);
   1006a:	ed96 6b00 	vldr	d6, [r6]
   1006e:	ee86 7b04 	vdiv.f64	d7, d6, d4
   10072:	ed86 7b00 	vstr	d7, [r6]
  *Dec = degToRad(*Dec);
   10076:	ed98 6b00 	vldr	d6, [r8]
   1007a:	ee86 7b04 	vdiv.f64	d7, d6, d4
   1007e:	ed88 7b00 	vstr	d7, [r8]
}
   10082:	b00b      	add	sp, #44	; 0x2c
   10084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   10094:	3ef00000 	.word	0x3ef00000
   10098:	00000000 	.word	0x00000000
   1009c:	40668000 	.word	0x40668000
   100a0:	00000000 	.word	0x00000000
   100a4:	c0568000 	.word	0xc0568000
   100a8:	00000000 	.word	0x00000000
   100ac:	40768000 	.word	0x40768000
   100b0:	1a63c1f8 	.word	0x1a63c1f8
   100b4:	404ca5dc 	.word	0x404ca5dc
   100b8:	20005e50 	.word	0x20005e50

000100bc <Library::nameRec()>:
bool Library::nameRec() {
   100bc:	b570      	push	{r4, r5, r6, lr}
    recPos++; if (recPos >= recMax) break;
   100be:	6841      	ldr	r1, [r0, #4]
bool Library::nameRec() {
   100c0:	b084      	sub	sp, #16
    recPos++; if (recPos >= recMax) break;
   100c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   100c6:	4e15      	ldr	r6, [pc, #84]	; (1011c <Library::nameRec()+0x60>)
bool Library::nameRec() {
   100c8:	4605      	mov	r5, r0
   100ca:	e003      	b.n	100d4 <Library::nameRec()+0x18>
  } while (recPos < recMax);
   100cc:	e9d5 4100 	ldrd	r4, r1, [r5]
   100d0:	428c      	cmp	r4, r1
   100d2:	da1d      	bge.n	10110 <Library::nameRec()+0x54>
    recPos++; if (recPos >= recMax) break;
   100d4:	3401      	adds	r4, #1
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   100d6:	2310      	movs	r3, #16
   100d8:	466a      	mov	r2, sp
   100da:	4630      	mov	r0, r6
    recPos++; if (recPos >= recMax) break;
   100dc:	428c      	cmp	r4, r1
   100de:	602c      	str	r4, [r5, #0]
   100e0:	da16      	bge.n	10110 <Library::nameRec()+0x54>
  long l = address*rec_size + byteMin;
   100e2:	69e9      	ldr	r1, [r5, #28]
   100e4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   100e8:	b289      	uxth	r1, r1
   100ea:	f7f4 ff95 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    work = readRec(recPos);
   100ee:	f89d 3000 	ldrb.w	r3, [sp]
   100f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if (work.libRec.name[0] == '$' && cat == catalog) break;
   100f6:	2b24      	cmp	r3, #36	; 0x24
   100f8:	d1e8      	bne.n	100cc <Library::nameRec()+0x10>
   100fa:	69ab      	ldr	r3, [r5, #24]
   100fc:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   10100:	d1e4      	bne.n	100cc <Library::nameRec()+0x10>
  if (recPos >= recMax) { recPos = recMax - 1; return false; }
   10102:	e9d5 3100 	ldrd	r3, r1, [r5]
   10106:	428b      	cmp	r3, r1
   10108:	da02      	bge.n	10110 <Library::nameRec()+0x54>
  return true;
   1010a:	2001      	movs	r0, #1
}
   1010c:	b004      	add	sp, #16
   1010e:	bd70      	pop	{r4, r5, r6, pc}
  if (recPos >= recMax) { recPos = recMax - 1; return false; }
   10110:	3901      	subs	r1, #1
   10112:	2000      	movs	r0, #0
   10114:	6029      	str	r1, [r5, #0]
}
   10116:	b004      	add	sp, #16
   10118:	bd70      	pop	{r4, r5, r6, pc}
   1011a:	bf00      	nop
   1011c:	20005e50 	.word	0x20005e50

00010120 <Library::firstFreeRec()>:
bool Library::firstFreeRec() {
   10120:	b570      	push	{r4, r5, r6, lr}
    recPos++; if (recPos >= recMax) break;
   10122:	6841      	ldr	r1, [r0, #4]
bool Library::firstFreeRec() {
   10124:	b084      	sub	sp, #16
    recPos++; if (recPos >= recMax) break;
   10126:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1012a:	4e12      	ldr	r6, [pc, #72]	; (10174 <Library::firstFreeRec()+0x54>)
bool Library::firstFreeRec() {
   1012c:	4605      	mov	r5, r0
   1012e:	e00e      	b.n	1014e <Library::firstFreeRec()+0x2e>
  long l = address*rec_size + byteMin;
   10130:	69e9      	ldr	r1, [r5, #28]
   10132:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10136:	b289      	uxth	r1, r1
   10138:	f7f4 ff6e 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    cat = (int16_t)work.libRec.code>>4;
   1013c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if (cat == 15) break; // unused?
   10140:	091b      	lsrs	r3, r3, #4
   10142:	2b0f      	cmp	r3, #15
   10144:	d00f      	beq.n	10166 <Library::firstFreeRec()+0x46>
  } while (recPos < recMax);
   10146:	e9d5 4100 	ldrd	r4, r1, [r5]
   1014a:	428c      	cmp	r4, r1
   1014c:	da06      	bge.n	1015c <Library::firstFreeRec()+0x3c>
    recPos++; if (recPos >= recMax) break;
   1014e:	3401      	adds	r4, #1
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10150:	2310      	movs	r3, #16
   10152:	466a      	mov	r2, sp
   10154:	4630      	mov	r0, r6
    recPos++; if (recPos >= recMax) break;
   10156:	428c      	cmp	r4, r1
   10158:	602c      	str	r4, [r5, #0]
   1015a:	dbe9      	blt.n	10130 <Library::firstFreeRec()+0x10>
  if (recPos >= recMax) { recPos = recMax - 1; return false; }
   1015c:	3901      	subs	r1, #1
   1015e:	2000      	movs	r0, #0
   10160:	6029      	str	r1, [r5, #0]
}
   10162:	b004      	add	sp, #16
   10164:	bd70      	pop	{r4, r5, r6, pc}
  if (recPos >= recMax) { recPos = recMax - 1; return false; }
   10166:	e9d5 3100 	ldrd	r3, r1, [r5]
   1016a:	428b      	cmp	r3, r1
   1016c:	daf6      	bge.n	1015c <Library::firstFreeRec()+0x3c>
  return true;
   1016e:	2001      	movs	r0, #1
}
   10170:	b004      	add	sp, #16
   10172:	bd70      	pop	{r4, r5, r6, pc}
   10174:	20005e50 	.word	0x20005e50

00010178 <Library::prevRec()>:
bool Library::prevRec() {
   10178:	b570      	push	{r4, r5, r6, lr}
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1017a:	4e15      	ldr	r6, [pc, #84]	; (101d0 <Library::prevRec()+0x58>)
bool Library::prevRec() {
   1017c:	b084      	sub	sp, #16
   1017e:	4605      	mov	r5, r0
    recPos--; if (recPos < 0) break;
   10180:	6804      	ldr	r4, [r0, #0]
   10182:	e012      	b.n	101aa <Library::prevRec()+0x32>
  long l = address*rec_size + byteMin;
   10184:	69e9      	ldr	r1, [r5, #28]
   10186:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1018a:	b289      	uxth	r1, r1
   1018c:	f7f4 ff44 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    work = readRec(recPos);
   10190:	f89d 3000 	ldrb.w	r3, [sp]
   10194:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if (work.libRec.name[0] != '$' && cat == catalog) break;
   10198:	2b24      	cmp	r3, #36	; 0x24
   1019a:	d003      	beq.n	101a4 <Library::prevRec()+0x2c>
   1019c:	69ab      	ldr	r3, [r5, #24]
   1019e:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   101a2:	d00e      	beq.n	101c2 <Library::prevRec()+0x4a>
  } while (recPos >= 0);
   101a4:	682c      	ldr	r4, [r5, #0]
   101a6:	2c00      	cmp	r4, #0
   101a8:	db06      	blt.n	101b8 <Library::prevRec()+0x40>
    recPos--; if (recPos < 0) break;
   101aa:	3c01      	subs	r4, #1
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   101ac:	2310      	movs	r3, #16
   101ae:	466a      	mov	r2, sp
   101b0:	4630      	mov	r0, r6
    recPos--; if (recPos < 0) break;
   101b2:	2c00      	cmp	r4, #0
   101b4:	602c      	str	r4, [r5, #0]
   101b6:	dae5      	bge.n	10184 <Library::prevRec()+0xc>
  if (recPos < 0) { recPos = 0; return false; }
   101b8:	2300      	movs	r3, #0
   101ba:	4618      	mov	r0, r3
   101bc:	602b      	str	r3, [r5, #0]
}
   101be:	b004      	add	sp, #16
   101c0:	bd70      	pop	{r4, r5, r6, pc}
  if (recPos < 0) { recPos = 0; return false; }
   101c2:	682b      	ldr	r3, [r5, #0]
   101c4:	2b00      	cmp	r3, #0
   101c6:	dbf7      	blt.n	101b8 <Library::prevRec()+0x40>
  return true;
   101c8:	2001      	movs	r0, #1
}
   101ca:	b004      	add	sp, #16
   101cc:	bd70      	pop	{r4, r5, r6, pc}
   101ce:	bf00      	nop
   101d0:	20005e50 	.word	0x20005e50

000101d4 <Library::nextRec()>:
bool Library::nextRec() {
   101d4:	b570      	push	{r4, r5, r6, lr}
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   101d6:	4e16      	ldr	r6, [pc, #88]	; (10230 <Library::nextRec()+0x5c>)
bool Library::nextRec() {
   101d8:	b084      	sub	sp, #16
   101da:	4605      	mov	r5, r0
    recPos++; if (recPos >= recMax) break;
   101dc:	e9d0 4100 	ldrd	r4, r1, [r0]
   101e0:	e013      	b.n	1020a <Library::nextRec()+0x36>
  long l = address*rec_size + byteMin;
   101e2:	69e9      	ldr	r1, [r5, #28]
   101e4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   101e8:	b289      	uxth	r1, r1
   101ea:	f7f4 ff15 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    work=readRec(recPos);
   101ee:	f89d 3000 	ldrb.w	r3, [sp]
   101f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if (work.libRec.name[0] != '$' && cat == catalog) break;
   101f6:	2b24      	cmp	r3, #36	; 0x24
   101f8:	d003      	beq.n	10202 <Library::nextRec()+0x2e>
   101fa:	69ab      	ldr	r3, [r5, #24]
   101fc:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   10200:	d00f      	beq.n	10222 <Library::nextRec()+0x4e>
  } while (recPos < recMax);
   10202:	e9d5 4100 	ldrd	r4, r1, [r5]
   10206:	428c      	cmp	r4, r1
   10208:	da06      	bge.n	10218 <Library::nextRec()+0x44>
    recPos++; if (recPos >= recMax) break;
   1020a:	3401      	adds	r4, #1
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1020c:	2310      	movs	r3, #16
   1020e:	466a      	mov	r2, sp
   10210:	4630      	mov	r0, r6
    recPos++; if (recPos >= recMax) break;
   10212:	428c      	cmp	r4, r1
   10214:	602c      	str	r4, [r5, #0]
   10216:	dbe4      	blt.n	101e2 <Library::nextRec()+0xe>
  if (recPos >= recMax) { recPos = recMax-1; return false; }
   10218:	3901      	subs	r1, #1
   1021a:	2000      	movs	r0, #0
   1021c:	6029      	str	r1, [r5, #0]
}
   1021e:	b004      	add	sp, #16
   10220:	bd70      	pop	{r4, r5, r6, pc}
  if (recPos >= recMax) { recPos = recMax-1; return false; }
   10222:	e9d5 3100 	ldrd	r3, r1, [r5]
   10226:	428b      	cmp	r3, r1
   10228:	daf6      	bge.n	10218 <Library::nextRec()+0x44>
  return true;
   1022a:	2001      	movs	r0, #1
}
   1022c:	b004      	add	sp, #16
   1022e:	bd70      	pop	{r4, r5, r6, pc}
   10230:	20005e50 	.word	0x20005e50

00010234 <Library::firstRec()>:
bool Library::firstRec() {
   10234:	b530      	push	{r4, r5, lr}
  recPos = 0;
   10236:	2500      	movs	r5, #0
bool Library::firstRec() {
   10238:	b085      	sub	sp, #20
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1023a:	2310      	movs	r3, #16
   1023c:	8b81      	ldrh	r1, [r0, #28]
   1023e:	466a      	mov	r2, sp
  recPos = 0;
   10240:	6005      	str	r5, [r0, #0]
bool Library::firstRec() {
   10242:	4604      	mov	r4, r0
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10244:	480a      	ldr	r0, [pc, #40]	; (10270 <Library::firstRec()+0x3c>)
   10246:	f7f4 fee7 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  work = readRec(recPos);
   1024a:	f89d 2000 	ldrb.w	r2, [sp]
  int16_t cat = (int16_t)work.libRec.code >> 4;
   1024e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  if (work.libRec.name[0] != '$' && cat == catalog) return true;
   10252:	2a24      	cmp	r2, #36	; 0x24
   10254:	d003      	beq.n	1025e <Library::firstRec()+0x2a>
   10256:	091b      	lsrs	r3, r3, #4
   10258:	69a2      	ldr	r2, [r4, #24]
   1025a:	4293      	cmp	r3, r2
   1025c:	d005      	beq.n	1026a <Library::firstRec()+0x36>
  return nextRec();
   1025e:	4620      	mov	r0, r4
}
   10260:	b005      	add	sp, #20
   10262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return nextRec();
   10266:	f7ff bfb5 	b.w	101d4 <Library::nextRec()>
}
   1026a:	2001      	movs	r0, #1
   1026c:	b005      	add	sp, #20
   1026e:	bd30      	pop	{r4, r5, pc}
   10270:	20005e50 	.word	0x20005e50

00010274 <Library::init()>:
void Library::init() {
   10274:	b570      	push	{r4, r5, r6, lr}
  byteMax = nv.size - 1;
   10276:	4c1a      	ldr	r4, [pc, #104]	; (102e0 <Library::init()+0x6c>)
  catalog = 0;
   10278:	2200      	movs	r2, #0
  byteMin = NV_LIBRARY_DATA_BASE;
   1027a:	f240 3176 	movw	r1, #886	; 0x376
  byteMax = nv.size - 1;
   1027e:	88a3      	ldrh	r3, [r4, #4]
  byteMin = NV_LIBRARY_DATA_BASE;
   10280:	e9c0 2106 	strd	r2, r1, [r0, #24]
  long byteCount = (byteMax - byteMin) + 1;
   10284:	f2a3 3276 	subw	r2, r3, #886	; 0x376
  byteMax = nv.size - 1;
   10288:	3b01      	subs	r3, #1
   1028a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1028e:	6203      	str	r3, [r0, #32]
  recMax = byteCount/rec_size; // maximum number of records
   10290:	1113      	asrs	r3, r2, #4
   10292:	6043      	str	r3, [r0, #4]
  if (recMax == 0) { VLF("WRN: Library::init(); recMax == 0, no library space available"); return; }
   10294:	b31b      	cbz	r3, 102de <Library::init()+0x6a>
  if (!nv.hasValidKey() || nv.isNull(byteMin, byteCount)) {
   10296:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1029a:	4605      	mov	r5, r0
   1029c:	b9a3      	cbnz	r3, 102c8 <Library::init()+0x54>
   1029e:	2400      	movs	r4, #0
   102a0:	4e0f      	ldr	r6, [pc, #60]	; (102e0 <Library::init()+0x6c>)
   102a2:	e000      	b.n	102a6 <Library::init()+0x32>
   102a4:	69e9      	ldr	r1, [r5, #28]
  }
}

void Library::clearRec(long address) {
  if (address >= 0 && address < recMax) {
    long l = address*rec_size+byteMin;
   102a6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   102aa:	22f0      	movs	r2, #240	; 0xf0
   102ac:	4630      	mov	r0, r6
  for (long l = 0; l < recMax; l++) clearRec(l);
   102ae:	3401      	adds	r4, #1
    int code = 15 << 4;
    nv.write(l + 11, (byte)code); // catalog code 15 = deleted
   102b0:	310b      	adds	r1, #11
   102b2:	b289      	uxth	r1, r1
   102b4:	f7f4 fda4 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
  for (long l = 0; l < recMax; l++) clearRec(l);
   102b8:	686b      	ldr	r3, [r5, #4]
   102ba:	429c      	cmp	r4, r3
   102bc:	dbf2      	blt.n	102a4 <Library::init()+0x30>
  firstRec();
   102be:	4628      	mov	r0, r5
}
   102c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  firstRec();
   102c4:	f7ff bfb6 	b.w	10234 <Library::firstRec()>
  if (!nv.hasValidKey() || nv.isNull(byteMin, byteCount)) {
   102c8:	b212      	sxth	r2, r2
   102ca:	4620      	mov	r0, r4
   102cc:	f7f4 fe8a 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
   102d0:	2800      	cmp	r0, #0
   102d2:	d0f4      	beq.n	102be <Library::init()+0x4a>
  for (long l = 0; l < recMax; l++) clearRec(l);
   102d4:	686b      	ldr	r3, [r5, #4]
   102d6:	2b00      	cmp	r3, #0
   102d8:	ddf1      	ble.n	102be <Library::init()+0x4a>
   102da:	69e9      	ldr	r1, [r5, #28]
   102dc:	e7df      	b.n	1029e <Library::init()+0x2a>
}
   102de:	bd70      	pop	{r4, r5, r6, pc}
   102e0:	20005e50 	.word	0x20005e50

000102e4 <Library::setCatalog(int)>:
  if (num < 0 || num > 14) return false;
   102e4:	290e      	cmp	r1, #14
   102e6:	d901      	bls.n	102ec <Library::setCatalog(int)+0x8>
   102e8:	2000      	movs	r0, #0
}
   102ea:	4770      	bx	lr
bool Library::setCatalog(int num) {
   102ec:	b510      	push	{r4, lr}
   102ee:	4604      	mov	r4, r0
   102f0:	b084      	sub	sp, #16
  recPos = 0;
   102f2:	2000      	movs	r0, #0
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   102f4:	2310      	movs	r3, #16
   102f6:	466a      	mov	r2, sp
  catalog = num;
   102f8:	61a1      	str	r1, [r4, #24]
  recPos = 0;
   102fa:	6020      	str	r0, [r4, #0]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   102fc:	8ba1      	ldrh	r1, [r4, #28]
   102fe:	480b      	ldr	r0, [pc, #44]	; (1032c <Library::setCatalog(int)+0x48>)
   10300:	f7f4 fe8a 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  work = readRec(recPos);
   10304:	f89d 2000 	ldrb.w	r2, [sp]
  int16_t cat = (int16_t)work.libRec.code >> 4;
   10308:	f89d 300b 	ldrb.w	r3, [sp, #11]
  if (work.libRec.name[0] != '$' && cat == catalog) return true;
   1030c:	2a24      	cmp	r2, #36	; 0x24
  int16_t cat = (int16_t)work.libRec.code >> 4;
   1030e:	ea4f 1313 	mov.w	r3, r3, lsr #4
  if (work.libRec.name[0] != '$' && cat == catalog) return true;
   10312:	d002      	beq.n	1031a <Library::setCatalog(int)+0x36>
   10314:	69a2      	ldr	r2, [r4, #24]
   10316:	4293      	cmp	r3, r2
   10318:	d005      	beq.n	10326 <Library::setCatalog(int)+0x42>
  return nextRec();
   1031a:	4620      	mov	r0, r4
}
   1031c:	b004      	add	sp, #16
   1031e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return nextRec();
   10322:	f7ff bf57 	b.w	101d4 <Library::nextRec()>
  if (work.libRec.name[0] != '$' && cat == catalog) return true;
   10326:	2001      	movs	r0, #1
}
   10328:	b004      	add	sp, #16
   1032a:	bd10      	pop	{r4, pc}
   1032c:	20005e50 	.word	0x20005e50

00010330 <Library::gotoRec(long)>:
  for (long l = 0; l < recMax; l++) {
   10330:	6843      	ldr	r3, [r0, #4]
   10332:	2b00      	cmp	r3, #0
bool Library::gotoRec(long num) {
   10334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10338:	4605      	mov	r5, r0
   1033a:	b084      	sub	sp, #16
   1033c:	460f      	mov	r7, r1
  for (long l = 0; l < recMax; l++) {
   1033e:	dd23      	ble.n	10388 <Library::gotoRec(long)+0x58>
   10340:	2400      	movs	r4, #0
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10342:	f8df 8054 	ldr.w	r8, [pc, #84]	; 10398 <Library::gotoRec(long)+0x68>
  long c = 0;
   10346:	4626      	mov	r6, r4
   10348:	e003      	b.n	10352 <Library::gotoRec(long)+0x22>
  for (long l = 0; l < recMax; l++) {
   1034a:	3401      	adds	r4, #1
   1034c:	686b      	ldr	r3, [r5, #4]
   1034e:	42a3      	cmp	r3, r4
   10350:	dd1b      	ble.n	1038a <Library::gotoRec(long)+0x5a>
  long l = address*rec_size + byteMin;
   10352:	69e9      	ldr	r1, [r5, #28]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10354:	2310      	movs	r3, #16
   10356:	466a      	mov	r2, sp
   10358:	4640      	mov	r0, r8
  long l = address*rec_size + byteMin;
   1035a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1035e:	b289      	uxth	r1, r1
   10360:	f7f4 fe5a 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    work=readRec(l); r = l;
   10364:	f89d 3000 	ldrb.w	r3, [sp]
   10368:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if (work.libRec.name[0] != '$' && cat == catalog) c++;
   1036c:	2b24      	cmp	r3, #36	; 0x24
   1036e:	d004      	beq.n	1037a <Library::gotoRec(long)+0x4a>
   10370:	69ab      	ldr	r3, [r5, #24]
   10372:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   10376:	bf08      	it	eq
   10378:	3601      	addeq	r6, #1
    if (c == num) break;
   1037a:	42be      	cmp	r6, r7
   1037c:	d1e5      	bne.n	1034a <Library::gotoRec(long)+0x1a>
  if (c == num) { recPos = r; return true; } else return false;
   1037e:	2001      	movs	r0, #1
   10380:	602c      	str	r4, [r5, #0]
}
   10382:	b004      	add	sp, #16
   10384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (c == num) { recPos = r; return true; } else return false;
   10388:	b119      	cbz	r1, 10392 <Library::gotoRec(long)+0x62>
   1038a:	2000      	movs	r0, #0
}
   1038c:	b004      	add	sp, #16
   1038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  long r = 0;
   10392:	460c      	mov	r4, r1
   10394:	e7f3      	b.n	1037e <Library::gotoRec(long)+0x4e>
   10396:	bf00      	nop
   10398:	20005e50 	.word	0x20005e50

0001039c <Library::clearCurrentRec()>:
void Library::clearCurrentRec() {
   1039c:	b530      	push	{r4, r5, lr}
   1039e:	4604      	mov	r4, r0
   103a0:	b085      	sub	sp, #20
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   103a2:	2310      	movs	r3, #16
   103a4:	4811      	ldr	r0, [pc, #68]	; (103ec <Library::clearCurrentRec()+0x50>)
  long l = address*rec_size + byteMin;
   103a6:	69e1      	ldr	r1, [r4, #28]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   103a8:	466a      	mov	r2, sp
  long l = address*rec_size + byteMin;
   103aa:	6825      	ldr	r5, [r4, #0]
   103ac:	eb01 1105 	add.w	r1, r1, r5, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   103b0:	b289      	uxth	r1, r1
   103b2:	f7f4 fe31 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  cat = (int16_t)work.libRec.code >> 4;
   103b6:	f89d 200b 	ldrb.w	r2, [sp, #11]
  if (cat == catalog) clearRec(recPos);
   103ba:	69a3      	ldr	r3, [r4, #24]
   103bc:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   103c0:	d001      	beq.n	103c6 <Library::clearCurrentRec()+0x2a>
}
   103c2:	b005      	add	sp, #20
   103c4:	bd30      	pop	{r4, r5, pc}
  if (cat == catalog) clearRec(recPos);
   103c6:	6823      	ldr	r3, [r4, #0]
  if (address >= 0 && address < recMax) {
   103c8:	2b00      	cmp	r3, #0
   103ca:	dbfa      	blt.n	103c2 <Library::clearCurrentRec()+0x26>
   103cc:	6862      	ldr	r2, [r4, #4]
   103ce:	4293      	cmp	r3, r2
   103d0:	daf7      	bge.n	103c2 <Library::clearCurrentRec()+0x26>
    long l = address*rec_size+byteMin;
   103d2:	69e1      	ldr	r1, [r4, #28]
   103d4:	22f0      	movs	r2, #240	; 0xf0
   103d6:	4805      	ldr	r0, [pc, #20]	; (103ec <Library::clearCurrentRec()+0x50>)
   103d8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    nv.write(l + 11, (byte)code); // catalog code 15 = deleted
   103dc:	310b      	adds	r1, #11
   103de:	b289      	uxth	r1, r1
}
   103e0:	b005      	add	sp, #20
   103e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   103e6:	f7f4 bd0b 	b.w	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
   103ea:	bf00      	nop
   103ec:	20005e50 	.word	0x20005e50

000103f0 <Library::clearLib()>:
  for (long l = 0; l < recMax; l++) {
   103f0:	6843      	ldr	r3, [r0, #4]
   103f2:	2b00      	cmp	r3, #0
   103f4:	dd29      	ble.n	1044a <Library::clearLib()+0x5a>
void Library::clearLib() {
   103f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   103f8:	4605      	mov	r5, r0
   103fa:	b085      	sub	sp, #20
  for (long l = 0; l < recMax; l++) {
   103fc:	2400      	movs	r4, #0
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   103fe:	4f13      	ldr	r7, [pc, #76]	; (1044c <Library::clearLib()+0x5c>)
   10400:	e002      	b.n	10408 <Library::clearLib()+0x18>
  for (long l = 0; l < recMax; l++) {
   10402:	3401      	adds	r4, #1
   10404:	429c      	cmp	r4, r3
   10406:	da1e      	bge.n	10446 <Library::clearLib()+0x56>
  long l = address*rec_size + byteMin;
   10408:	69e9      	ldr	r1, [r5, #28]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   1040a:	2310      	movs	r3, #16
   1040c:	466a      	mov	r2, sp
   1040e:	4638      	mov	r0, r7
  long l = address*rec_size + byteMin;
   10410:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   10414:	0126      	lsls	r6, r4, #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10416:	b289      	uxth	r1, r1
   10418:	f7f4 fdfe 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    if (cat == catalog) clearRec(l);
   1041c:	69ab      	ldr	r3, [r5, #24]
    cat = (int16_t)work.libRec.code >> 4;
   1041e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if (cat == catalog) clearRec(l);
   10422:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
  if (address >= 0 && address < recMax) {
   10426:	686b      	ldr	r3, [r5, #4]
    if (cat == catalog) clearRec(l);
   10428:	d1eb      	bne.n	10402 <Library::clearLib()+0x12>
  if (address >= 0 && address < recMax) {
   1042a:	42a3      	cmp	r3, r4
   1042c:	dde9      	ble.n	10402 <Library::clearLib()+0x12>
    long l = address*rec_size+byteMin;
   1042e:	69eb      	ldr	r3, [r5, #28]
   10430:	22f0      	movs	r2, #240	; 0xf0
   10432:	4638      	mov	r0, r7
  for (long l = 0; l < recMax; l++) {
   10434:	3401      	adds	r4, #1
    long l = address*rec_size+byteMin;
   10436:	18f1      	adds	r1, r6, r3
    nv.write(l + 11, (byte)code); // catalog code 15 = deleted
   10438:	310b      	adds	r1, #11
   1043a:	b289      	uxth	r1, r1
   1043c:	f7f4 fce0 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
  for (long l = 0; l < recMax; l++) {
   10440:	686b      	ldr	r3, [r5, #4]
   10442:	429c      	cmp	r4, r3
   10444:	dbe0      	blt.n	10408 <Library::clearLib()+0x18>
}
   10446:	b005      	add	sp, #20
   10448:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1044a:	4770      	bx	lr
   1044c:	20005e50 	.word	0x20005e50

00010450 <Library::clearAll()>:
  for (long l = 0; l < recMax; l++) clearRec(l);
   10450:	6843      	ldr	r3, [r0, #4]
   10452:	2b00      	cmp	r3, #0
   10454:	dd11      	ble.n	1047a <Library::clearAll()+0x2a>
void Library::clearAll() {
   10456:	b570      	push	{r4, r5, r6, lr}
   10458:	4605      	mov	r5, r0
  for (long l = 0; l < recMax; l++) clearRec(l);
   1045a:	2400      	movs	r4, #0
   1045c:	4e07      	ldr	r6, [pc, #28]	; (1047c <Library::clearAll()+0x2c>)
    long l = address*rec_size+byteMin;
   1045e:	69e9      	ldr	r1, [r5, #28]
   10460:	22f0      	movs	r2, #240	; 0xf0
   10462:	4630      	mov	r0, r6
   10464:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  for (long l = 0; l < recMax; l++) clearRec(l);
   10468:	3401      	adds	r4, #1
    nv.write(l + 11, (byte)code); // catalog code 15 = deleted
   1046a:	310b      	adds	r1, #11
   1046c:	b289      	uxth	r1, r1
   1046e:	f7f4 fcc7 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
  for (long l = 0; l < recMax; l++) clearRec(l);
   10472:	686b      	ldr	r3, [r5, #4]
   10474:	42a3      	cmp	r3, r4
   10476:	dcf2      	bgt.n	1045e <Library::clearAll()+0xe>
}
   10478:	bd70      	pop	{r4, r5, r6, pc}
   1047a:	4770      	bx	lr
   1047c:	20005e50 	.word	0x20005e50

00010480 <Library::recFreeAll()>:
long Library::recFreeAll() {
   10480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return recMax - recCountAll();
   10484:	6847      	ldr	r7, [r0, #4]
long Library::recFreeAll() {
   10486:	b084      	sub	sp, #16
  for (long l = 0; l < recMax; l++) {
   10488:	2f00      	cmp	r7, #0
   1048a:	dd18      	ble.n	104be <Library::recFreeAll()+0x3e>
  long c = 0;
   1048c:	2600      	movs	r6, #0
   1048e:	4605      	mov	r5, r0
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10490:	f8df 8034 	ldr.w	r8, [pc, #52]	; 104c8 <Library::recFreeAll()+0x48>
  for (long l = 0; l < recMax; l++) {
   10494:	4634      	mov	r4, r6
  long l = address*rec_size + byteMin;
   10496:	69e9      	ldr	r1, [r5, #28]
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   10498:	2310      	movs	r3, #16
   1049a:	466a      	mov	r2, sp
   1049c:	4640      	mov	r0, r8
  long l = address*rec_size + byteMin;
   1049e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  nv.readBytes(l, (uint8_t*)&work.libRecBytes, 16);
   104a2:	3401      	adds	r4, #1
   104a4:	b289      	uxth	r1, r1
   104a6:	f7f4 fdb7 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
    cat = (int16_t)work.libRec.code >> 4;
   104aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if (cat >= 0 && cat <= 14) c++;
   104ae:	091b      	lsrs	r3, r3, #4
   104b0:	2b0f      	cmp	r3, #15
  for (long l = 0; l < recMax; l++) {
   104b2:	686b      	ldr	r3, [r5, #4]
    if (cat >= 0 && cat <= 14) c++;
   104b4:	bf18      	it	ne
   104b6:	3601      	addne	r6, #1
  for (long l = 0; l < recMax; l++) {
   104b8:	429c      	cmp	r4, r3
   104ba:	dbec      	blt.n	10496 <Library::recFreeAll()+0x16>
  return recMax - recCountAll();
   104bc:	1bbf      	subs	r7, r7, r6
}
   104be:	4638      	mov	r0, r7
   104c0:	b004      	add	sp, #16
   104c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104c6:	bf00      	nop
   104c8:	20005e50 	.word	0x20005e50
   104cc:	00000000 	.word	0x00000000

000104d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)>:

#include "../../Telescope.h"
#include "../Mount.h"
#include "../site/Site.h"

bool Limits::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   104d0:	b570      	push	{r4, r5, r6, lr}
   104d2:	b084      	sub	sp, #16
   104d4:	460e      	mov	r6, r1
  *supressFrame = false;
   104d6:	f04f 0c00 	mov.w	ip, #0
bool Limits::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   104da:	4619      	mov	r1, r3
  *supressFrame = false;
   104dc:	9b08      	ldr	r3, [sp, #32]
bool Limits::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   104de:	4605      	mov	r5, r0
  *supressFrame = false;
   104e0:	f883 c000 	strb.w	ip, [r3]
  
  if (command[0] == 'G') {
   104e4:	f892 e000 	ldrb.w	lr, [r2]
   104e8:	f1be 0f47 	cmp.w	lr, #71	; 0x47
   104ec:	d013      	beq.n	10516 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x46>
        default: return false;
      }
    } else return false;
  } else
  
  if (command[0] == 'S') {
   104ee:	f1be 0f53 	cmp.w	lr, #83	; 0x53
   104f2:	d10d      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
    //  :Sh[sDD]#
    //            Set the elevation lower limit
    //            Return: 0 on failure
    //                    1 on success
    if (command[1] == 'h') {
   104f4:	7853      	ldrb	r3, [r2, #1]
   104f6:	2b68      	cmp	r3, #104	; 0x68
   104f8:	d059      	beq.n	105ae <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xde>

    //  :So[DD]#
    //            Set the overhead elevation limit in degrees relative to the horizon
    //            Return: 0 on failure
    //                    1 on success
    if (command[1] == 'o') {
   104fa:	2b6f      	cmp	r3, #111	; 0x6f
   104fc:	d06a      	beq.n	105d4 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x104>

    //  :SXE9,[n]#
    //  :SXEA,[n]#
    //            Set meridian limit east (9) or west (A) to value [n] in minutes
    //            Return: 0 on failure or 1 on success
    if (command[1] == 'X' && parameter[0] == 'E' && parameter[2] == ',') {
   104fe:	2b58      	cmp	r3, #88	; 0x58
   10500:	d106      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
   10502:	780b      	ldrb	r3, [r1, #0]
   10504:	2b45      	cmp	r3, #69	; 0x45
   10506:	d103      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
   10508:	788b      	ldrb	r3, [r1, #2]
   1050a:	2b2c      	cmp	r3, #44	; 0x2c
   1050c:	f000 8090 	beq.w	10630 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x160>
    } else return false;
   10510:	4660      	mov	r0, ip
      }
    } else return false;
  } else return false;

  return true;
}
   10512:	b004      	add	sp, #16
   10514:	bd70      	pop	{r4, r5, r6, pc}
    if (command[1] == 'h' && parameter[0] == 0) {
   10516:	7853      	ldrb	r3, [r2, #1]
   10518:	2b68      	cmp	r3, #104	; 0x68
   1051a:	d042      	beq.n	105a2 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xd2>
    if (command[1] == 'o' && parameter[0] == 0) {
   1051c:	2b6f      	cmp	r3, #111	; 0x6f
   1051e:	d02b      	beq.n	10578 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa8>
    if (command[1] == 'X' && parameter[0] == 'E' && parameter[2] == 0) {
   10520:	2b58      	cmp	r3, #88	; 0x58
   10522:	d1f5      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
   10524:	780b      	ldrb	r3, [r1, #0]
   10526:	2b45      	cmp	r3, #69	; 0x45
   10528:	d1f2      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
   1052a:	788b      	ldrb	r3, [r1, #2]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d1ef      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
      *numericReply = false;
   10530:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10532:	7013      	strb	r3, [r2, #0]
      switch (parameter[1]) {
   10534:	784b      	ldrb	r3, [r1, #1]
   10536:	2b65      	cmp	r3, #101	; 0x65
   10538:	f200 80df 	bhi.w	106fa <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22a>
   1053c:	2b38      	cmp	r3, #56	; 0x38
   1053e:	d934      	bls.n	105aa <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xda>
   10540:	3b39      	subs	r3, #57	; 0x39
   10542:	2b2c      	cmp	r3, #44	; 0x2c
   10544:	d831      	bhi.n	105aa <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xda>
   10546:	e8df f003 	tbb	[pc, r3]
   1054a:	30c0      	.short	0x30c0
   1054c:	30303030 	.word	0x30303030
   10550:	97b03030 	.word	0x97b03030
   10554:	3030c2cc 	.word	0x3030c2cc
   10558:	30303030 	.word	0x30303030
   1055c:	30303030 	.word	0x30303030
   10560:	30303030 	.word	0x30303030
   10564:	30303030 	.word	0x30303030
   10568:	30303030 	.word	0x30303030
   1056c:	30303030 	.word	0x30303030
   10570:	30303030 	.word	0x30303030
   10574:	3030      	.short	0x3030
   10576:	d2          	.byte	0xd2
   10577:	00          	.byte	0x00
    if (command[1] == 'o' && parameter[0] == 0) {
   10578:	780c      	ldrb	r4, [r1, #0]
   1057a:	2c00      	cmp	r4, #0
   1057c:	d1c8      	bne.n	10510 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40>
      sprintf(reply,"%02ld*", lroundf(radToDegF(settings.altitude.max)));
   1057e:	6843      	ldr	r3, [r0, #4]
   10580:	eddf 7a8f 	vldr	s15, [pc, #572]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
   10584:	ee00 3a10 	vmov	s0, r3
   10588:	ee20 0a27 	vmul.f32	s0, s0, s15
   1058c:	f00b f9e6 	bl	1b95c <lroundf>
   10590:	498c      	ldr	r1, [pc, #560]	; (107c4 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f4>)
   10592:	4602      	mov	r2, r0
   10594:	4630      	mov	r0, r6
   10596:	f00e fcab 	bl	1eef0 <sprintf>
      *numericReply=false;
   1059a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  return true;
   1059c:	2001      	movs	r0, #1
      *numericReply=false;
   1059e:	701c      	strb	r4, [r3, #0]
   105a0:	e7b7      	b.n	10512 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42>
    if (command[1] == 'h' && parameter[0] == 0) {
   105a2:	780c      	ldrb	r4, [r1, #0]
   105a4:	2c00      	cmp	r4, #0
   105a6:	f000 80ad 	beq.w	10704 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x234>
        default: return false;
   105aa:	2000      	movs	r0, #0
   105ac:	e7b1      	b.n	10512 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42>
      if (convert.atoi2(parameter, &deg)) {
   105ae:	2301      	movs	r3, #1
   105b0:	f10d 020e 	add.w	r2, sp, #14
   105b4:	4884      	ldr	r0, [pc, #528]	; (107c8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f8>)
   105b6:	f7f3 ff4d 	bl	4454 <Convert::atoi2(char*, short*, bool)>
   105ba:	b190      	cbz	r0, 105e2 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x112>
        if (deg >= -30.0F && deg <= 30.0F) {
   105bc:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   105c0:	f102 031e 	add.w	r3, r2, #30
   105c4:	b29b      	uxth	r3, r3
   105c6:	2b3c      	cmp	r3, #60	; 0x3c
   105c8:	f240 80a8 	bls.w	1071c <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x24c>
        } else *commandError = CE_PARAM_RANGE;
   105cc:	2304      	movs	r3, #4
   105ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   105d0:	7013      	strb	r3, [r2, #0]
   105d2:	e009      	b.n	105e8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x118>
      if (convert.atoi2(parameter, &deg)) {
   105d4:	2301      	movs	r3, #1
   105d6:	f10d 020e 	add.w	r2, sp, #14
   105da:	487b      	ldr	r0, [pc, #492]	; (107c8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f8>)
   105dc:	f7f3 ff3a 	bl	4454 <Convert::atoi2(char*, short*, bool)>
   105e0:	b928      	cbnz	r0, 105ee <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11e>
      } else *commandError = CE_PARAM_FORM;
   105e2:	2305      	movs	r3, #5
   105e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   105e6:	7013      	strb	r3, [r2, #0]
  return true;
   105e8:	2001      	movs	r0, #1
}
   105ea:	b004      	add	sp, #16
   105ec:	bd70      	pop	{r4, r5, r6, pc}
        if (deg >= 60.0F && deg <= 90.0F) {
   105ee:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   105f2:	f1a2 033c 	sub.w	r3, r2, #60	; 0x3c
   105f6:	b29b      	uxth	r3, r3
   105f8:	2b1e      	cmp	r3, #30
   105fa:	d8e7      	bhi.n	105cc <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xfc>
          settings.altitude.max = degToRadF(deg);
   105fc:	ee07 2a90 	vmov	s15, r2
          if (transform.mountType == ALTAZM && settings.altitude.max > 87) settings.altitude.max = 87;
   10600:	4b72      	ldr	r3, [pc, #456]	; (107cc <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2fc>)
          settings.altitude.max = degToRadF(deg);
   10602:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   10606:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 107b8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e8>
   1060a:	ee87 6b05 	vdiv.f64	d6, d7, d5
   1060e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   10612:	ee16 2a10 	vmov	r2, s12
   10616:	606a      	str	r2, [r5, #4]
          if (transform.mountType == ALTAZM && settings.altitude.max > 87) settings.altitude.max = 87;
   10618:	f993 35c4 	ldrsb.w	r3, [r3, #1476]	; 0x5c4
   1061c:	2b03      	cmp	r3, #3
   1061e:	f000 80ae 	beq.w	1077e <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ae>
          nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   10622:	2310      	movs	r3, #16
   10624:	462a      	mov	r2, r5
   10626:	21c8      	movs	r1, #200	; 0xc8
   10628:	4869      	ldr	r0, [pc, #420]	; (107d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>)
   1062a:	f7f4 fd1f 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   1062e:	e7db      	b.n	105e8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x118>
      long l = atol(&parameter[3]); float degs = l/4.0;
   10630:	1cc8      	adds	r0, r1, #3
   10632:	9101      	str	r1, [sp, #4]
   10634:	f00c ffa6 	bl	1d584 <atol>
      switch (parameter[1]) {
   10638:	9901      	ldr	r1, [sp, #4]
      long l = atol(&parameter[3]); float degs = l/4.0;
   1063a:	ee07 0a10 	vmov	s14, r0
   1063e:	eeba 7bcf 	vcvt.f64.s32	d7, d7, #2
      switch (parameter[1]) {
   10642:	784b      	ldrb	r3, [r1, #1]
   10644:	2b39      	cmp	r3, #57	; 0x39
      long l = atol(&parameter[3]); float degs = l/4.0;
   10646:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      switch (parameter[1]) {
   1064a:	d07b      	beq.n	10744 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x274>
   1064c:	2b41      	cmp	r3, #65	; 0x41
   1064e:	d1ac      	bne.n	105aa <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xda>
          if (degs >= -360.0F && degs <= 360.0F) {
   10650:	eddf 7a60 	vldr	s15, [pc, #384]	; 107d4 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x304>
   10654:	eeb4 7ae7 	vcmpe.f32	s14, s15
   10658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1065c:	db07      	blt.n	1066e <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x19e>
   1065e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 107d8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x308>
   10662:	eeb4 7ae7 	vcmpe.f32	s14, s15
   10666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1066a:	f240 8094 	bls.w	10796 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2c6>
          } else *commandError = CE_PARAM_RANGE;
   1066e:	2304      	movs	r3, #4
   10670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  return true;
   10672:	2001      	movs	r0, #1
          } else *commandError = CE_PARAM_RANGE;
   10674:	7013      	strb	r3, [r2, #0]
   10676:	e74c      	b.n	10512 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42>
        case 'B': sprintf(reply,"%ld",lroundf(radToDegF(axis1.settings.limits.max)/15.0F)); break; // RA west or +Az limit, in hours
   10678:	4b58      	ldr	r3, [pc, #352]	; (107dc <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>)
   1067a:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
   1067e:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
   10682:	ee07 3a10 	vmov	s14, r3
   10686:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 107b8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e8>
   1068a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   1068e:	ee27 7b05 	vmul.f64	d7, d7, d5
   10692:	ee87 0b06 	vdiv.f64	d0, d7, d6
   10696:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
        case 'w': sprintf(reply,"%ld",lroundf(radToDegF(axis1.settings.limits.max))); break;       // RA west or +Az limit, in degrees
   1069a:	f00b f95f 	bl	1b95c <lroundf>
   1069e:	4950      	ldr	r1, [pc, #320]	; (107e0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x310>)
   106a0:	4602      	mov	r2, r0
   106a2:	4630      	mov	r0, r6
   106a4:	f00e fc24 	bl	1eef0 <sprintf>
   106a8:	e79e      	b.n	105e8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x118>
        case 'A': sprintf(reply,"%ld",lroundf(radToDegF(settings.pastMeridianW)*4.0F)); break;     // minutes past meridianW
   106aa:	68c3      	ldr	r3, [r0, #12]
   106ac:	ee00 3a10 	vmov	s0, r3
   106b0:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
   106b4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 107b8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e8>
   106b8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   106bc:	ee20 0b06 	vmul.f64	d0, d0, d6
   106c0:	ee20 0b07 	vmul.f64	d0, d0, d7
   106c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   106c8:	e7e7      	b.n	1069a <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ca>
        case '9': sprintf(reply,"%ld",lroundf(radToDegF(settings.pastMeridianE)*4.0F)); break;     // minutes past meridianE
   106ca:	6883      	ldr	r3, [r0, #8]
   106cc:	e7ee      	b.n	106ac <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1dc>
        case 'D': sprintf(reply,"%ld",lroundf(radToDegF(axis2.settings.limits.max))); break;       // Dec north or +Alt limit, in degrees
   106ce:	4b45      	ldr	r3, [pc, #276]	; (107e4 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
        case 'w': sprintf(reply,"%ld",lroundf(radToDegF(axis1.settings.limits.max))); break;       // RA west or +Az limit, in degrees
   106d0:	eddf 7a3b 	vldr	s15, [pc, #236]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
   106d4:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
   106d8:	ee00 3a10 	vmov	s0, r3
   106dc:	ee20 0a27 	vmul.f32	s0, s0, s15
   106e0:	e7db      	b.n	1069a <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ca>
        case 'C': sprintf(reply,"%ld",lroundf(radToDegF(axis2.settings.limits.min))); break;       // Dec south or -Alt limit, in degrees
   106e2:	4b40      	ldr	r3, [pc, #256]	; (107e4 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x314>)
   106e4:	eddf 7a36 	vldr	s15, [pc, #216]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
   106e8:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
   106ec:	e7f4      	b.n	106d8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x208>
        case 'e': sprintf(reply,"%ld",lroundf(radToDegF(axis1.settings.limits.min))); break;       // RA east or -Az limit, in degrees
   106ee:	4b3b      	ldr	r3, [pc, #236]	; (107dc <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>)
   106f0:	eddf 7a33 	vldr	s15, [pc, #204]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
   106f4:	f8d3 3025 	ldr.w	r3, [r3, #37]	; 0x25
   106f8:	e7ee      	b.n	106d8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x208>
      switch (parameter[1]) {
   106fa:	2b77      	cmp	r3, #119	; 0x77
   106fc:	f47f af55 	bne.w	105aa <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xda>
        case 'w': sprintf(reply,"%ld",lroundf(radToDegF(axis1.settings.limits.max))); break;       // RA west or +Az limit, in degrees
   10700:	4b36      	ldr	r3, [pc, #216]	; (107dc <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>)
   10702:	e7e5      	b.n	106d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x200>
      sprintf(reply,"%+02ld*", lroundf(radToDegF(settings.altitude.min)));
   10704:	6803      	ldr	r3, [r0, #0]
   10706:	eddf 7a2e 	vldr	s15, [pc, #184]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
   1070a:	ee00 3a10 	vmov	s0, r3
   1070e:	ee20 0a27 	vmul.f32	s0, s0, s15
   10712:	f00b f923 	bl	1b95c <lroundf>
   10716:	4934      	ldr	r1, [pc, #208]	; (107e8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x318>)
   10718:	4602      	mov	r2, r0
   1071a:	e73b      	b.n	10594 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc4>
          settings.altitude.min = degToRadF(deg);
   1071c:	ee07 2a90 	vmov	s15, r2
          nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   10720:	2310      	movs	r3, #16
   10722:	462a      	mov	r2, r5
   10724:	21c8      	movs	r1, #200	; 0xc8
          settings.altitude.min = degToRadF(deg);
   10726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
          nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   1072a:	4829      	ldr	r0, [pc, #164]	; (107d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>)
          settings.altitude.min = degToRadF(deg);
   1072c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 107b8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e8>
   10730:	ee87 6b05 	vdiv.f64	d6, d7, d5
   10734:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   10738:	ee16 4a10 	vmov	r4, s12
   1073c:	602c      	str	r4, [r5, #0]
          nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   1073e:	f7f4 fc95 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   10742:	e751      	b.n	105e8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x118>
          if (degs >= -360.0F && degs <= 360.0F) {
   10744:	eddf 7a23 	vldr	s15, [pc, #140]	; 107d4 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x304>
   10748:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10750:	db8d      	blt.n	1066e <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x19e>
   10752:	eddf 7a21 	vldr	s15, [pc, #132]	; 107d8 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x308>
   10756:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1075e:	d886      	bhi.n	1066e <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x19e>
            settings.pastMeridianE = degToRadF(degs);
   10760:	eddf 7a17 	vldr	s15, [pc, #92]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
            nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   10764:	2310      	movs	r3, #16
   10766:	462a      	mov	r2, r5
   10768:	21c8      	movs	r1, #200	; 0xc8
            settings.pastMeridianE = degToRadF(degs);
   1076a:	eec7 7a27 	vdiv.f32	s15, s14, s15
   1076e:	ee17 0a90 	vmov	r0, s15
   10772:	60a8      	str	r0, [r5, #8]
            nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   10774:	4816      	ldr	r0, [pc, #88]	; (107d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>)
   10776:	f7f4 fc79 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   1077a:	2001      	movs	r0, #1
            nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   1077c:	e6c9      	b.n	10512 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42>
          if (transform.mountType == ALTAZM && settings.altitude.max > 87) settings.altitude.max = 87;
   1077e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 107ec <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x31c>
   10782:	eeb4 6ae7 	vcmpe.f32	s12, s15
   10786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1078a:	f77f af4a 	ble.w	10622 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x152>
   1078e:	ee17 3a90 	vmov	r3, s15
   10792:	606b      	str	r3, [r5, #4]
   10794:	e745      	b.n	10622 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x152>
            settings.pastMeridianW = degToRadF(degs);
   10796:	eddf 7a0a 	vldr	s15, [pc, #40]	; 107c0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f0>
            nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   1079a:	2310      	movs	r3, #16
   1079c:	462a      	mov	r2, r5
   1079e:	21c8      	movs	r1, #200	; 0xc8
            settings.pastMeridianW = degToRadF(degs);
   107a0:	eec7 7a27 	vdiv.f32	s15, s14, s15
   107a4:	ee17 0a90 	vmov	r0, s15
   107a8:	60e8      	str	r0, [r5, #12]
            nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   107aa:	4809      	ldr	r0, [pc, #36]	; (107d0 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x300>)
   107ac:	f7f4 fc5e 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   107b0:	2001      	movs	r0, #1
            nv.updateBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   107b2:	e6ae      	b.n	10512 <Limits::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42>
   107b4:	f3af 8000 	nop.w
   107b8:	20000000 	.word	0x20000000
   107bc:	404ca5dc 	.word	0x404ca5dc
   107c0:	42652ee1 	.word	0x42652ee1
   107c4:	20002288 	.word	0x20002288
   107c8:	200043d0 	.word	0x200043d0
   107cc:	200064ac 	.word	0x200064ac
   107d0:	20005e50 	.word	0x20005e50
   107d4:	c3b40000 	.word	0xc3b40000
   107d8:	43b40000 	.word	0x43b40000
   107dc:	200050e8 	.word	0x200050e8
   107e0:	20002248 	.word	0x20002248
   107e4:	200051a8 	.word	0x200051a8
   107e8:	20002280 	.word	0x20002280
   107ec:	42ae0000 	.word	0x42ae0000

000107f0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]>:
  double eastCorrection, westCorrection;
  return validateTarget(coords, &eastReachable, &westReachable, &eastCorrection, &westCorrection, isGoto);
}

// target coordinate check ahead of sync, goto, etc.
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   107f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  double a1e, a2e, a1w, a2w;

  PierSide lastPierSide = coords->pierSide; 
  coords->pierSide = PIER_SIDE_EAST;
  transform.mountToInstrument(coords, &a1e, &a2e);
   107f4:	4dbc      	ldr	r5, [pc, #752]	; (10ae8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2f8>)
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   107f6:	4698      	mov	r8, r3
  coords->pierSide = PIER_SIDE_EAST;
   107f8:	2301      	movs	r3, #1
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   107fa:	4604      	mov	r4, r0
  PierSide lastPierSide = coords->pierSide; 
   107fc:	f890 9050 	ldrb.w	r9, [r0, #80]	; 0x50
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   10800:	460e      	mov	r6, r1
   10802:	4617      	mov	r7, r2
  transform.mountToInstrument(coords, &a1e, &a2e);
   10804:	4601      	mov	r1, r0
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   10806:	ed2d 8b06 	vpush	{d8-d10}
   1080a:	b089      	sub	sp, #36	; 0x24
  coords->pierSide = PIER_SIDE_EAST;
   1080c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  transform.mountToInstrument(coords, &a1e, &a2e);
   10810:	4628      	mov	r0, r5
   10812:	ab02      	add	r3, sp, #8
   10814:	466a      	mov	r2, sp
   10816:	f7fa fc97 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
  coords->pierSide = PIER_SIDE_WEST;
   1081a:	2302      	movs	r3, #2
  transform.mountToInstrument(coords, &a1w, &a2w);
   1081c:	4628      	mov	r0, r5
   1081e:	aa04      	add	r2, sp, #16
  coords->pierSide = PIER_SIDE_WEST;
   10820:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  transform.mountToInstrument(coords, &a1w, &a2w);
   10824:	4621      	mov	r1, r4
   10826:	ab06      	add	r3, sp, #24
   10828:	f7fa fc8e 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
  coords->pierSide = lastPierSide;

  float eastLimitMin = axis1.settings.limits.min;
   1082c:	48af      	ldr	r0, [pc, #700]	; (10aec <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2fc>)
  coords->pierSide = lastPierSide;
   1082e:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
  float eastLimitMin = axis1.settings.limits.min;
   10832:	f8d0 3025 	ldr.w	r3, [r0, #37]	; 0x25
   10836:	ee08 3a10 	vmov	s16, r3
  float eastLimitMax = axis1.settings.limits.max;
   1083a:	f8d0 3029 	ldr.w	r3, [r0, #41]	; 0x29
   1083e:	ee09 3a10 	vmov	s18, r3
      westLimitMin = -Deg180;
      westLimitMax = Deg180;
    }
  }

  if (transform.mountType == GEM) {
   10842:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
   10846:	2b01      	cmp	r3, #1
   10848:	f000 811d 	beq.w	10a86 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x296>
  float westLimitMax = axis1.settings.limits.max;
   1084c:	eef0 8a49 	vmov.f32	s17, s18
  float westLimitMin = axis1.settings.limits.min;
   10850:	eef0 9a48 	vmov.f32	s19, s16
    if (limits.settings.pastMeridianW < westLimitMax) westLimitMax = limits.settings.pastMeridianW;
    westLimitMin += Deg180;
    westLimitMax += Deg180;
  }

  double a1 = axis1.getInstrumentCoordinate();
   10854:	48a5      	ldr	r0, [pc, #660]	; (10aec <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2fc>)
   10856:	f7f0 fc69 	bl	112c <Axis::getInstrumentCoordinate()>

  bool inRange;
  if ((a1e >= eastLimitMin) && (a1e <= eastLimitMax)) inRange = true; else inRange = false;
   1085a:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
   1085e:	ed9d 4b00 	vldr	d4, [sp]
   10862:	eeb4 7bc4 	vcmpe.f64	d7, d4
   10866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1086a:	f200 8086 	bhi.w	1097a <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x18a>
   1086e:	eeb7 3ac9 	vcvt.f64.f32	d3, s18
   10872:	eeb4 4bc3 	vcmpe.f64	d4, d3
   10876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1087a:	d87e      	bhi.n	1097a <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x18a>

  if ((a1e + Deg360 > eastLimitMin) && (a1e + Deg360 < eastLimitMax) && inRange && (dist(a1, a1e) > dist(a1, a1e + Deg360))) {
   1087c:	ed9f 5b94 	vldr	d5, [pc, #592]	; 10ad0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e0>
   10880:	ee34 6b05 	vadd.f64	d6, d4, d5
   10884:	eeb4 7bc6 	vcmpe.f64	d7, d6
   10888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1088c:	f140 8199 	bpl.w	10bc2 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x3d2>
   10890:	eeb4 3bc6 	vcmpe.f64	d3, d6
   10894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10898:	f340 821d 	ble.w	10cd6 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x4e6>
  private:
    void stop();
    void stopAxis1(GuideAction stopDirection = GA_BREAK);
    void stopAxis2(GuideAction stopDirection = GA_BREAK);
    // get least distance between coordinates
    inline double dist(double a, double b) { if (a > b) return a - b; else return b - a; }
   1089c:	eeb4 0bc4 	vcmpe.f64	d0, d4
   108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108a4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   108a8:	bfcc      	ite	gt
   108aa:	ee30 2b44 	vsubgt.f64	d2, d0, d4
   108ae:	ee34 2b40 	vsuble.f64	d2, d4, d0
   108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108b6:	bfcc      	ite	gt
   108b8:	ee30 5b46 	vsubgt.f64	d5, d0, d6
   108bc:	ee36 5b40 	vsuble.f64	d5, d6, d0
   108c0:	eeb4 2bc5 	vcmpe.f64	d2, d5
   108c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108c8:	f340 8203 	ble.w	10cd2 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x4e2>
    a1e += Deg360;
    *eastCorrection = Deg360;
   108cc:	eeb0 4b46 	vmov.f64	d4, d6
   108d0:	ed9f 3b7f 	vldr	d3, [pc, #508]	; 10ad0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e0>
   108d4:	ed88 3b00 	vstr	d3, [r8]
    a1w -= Deg360;
    *westCorrection = -Deg360;
    VF("MSG: Mount, validate destination west axis1 normalized to "); VL(radToDeg(a1w));
  }

  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   108d8:	eeb0 3b44 	vmov.f64	d3, d4
  if ((a1w >= westLimitMin) && (a1w <= westLimitMax)) inRange = true; else inRange = false;
   108dc:	eeb7 6ae9 	vcvt.f64.f32	d6, s19
   108e0:	ed9d 2b04 	vldr	d2, [sp, #16]
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w + Deg360))) {
   108e4:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 10ad0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e0>
  if ((a1w >= westLimitMin) && (a1w <= westLimitMax)) inRange = true; else inRange = false;
   108e8:	eeb4 6bc2 	vcmpe.f64	d6, d2
   108ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108f0:	d876      	bhi.n	109e0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x1f0>
   108f2:	eeb7 4ae8 	vcvt.f64.f32	d4, s17
   108f6:	eeb4 2bc4 	vcmpe.f64	d2, d4
   108fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108fe:	d86f      	bhi.n	109e0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x1f0>
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w + Deg360))) {
   10900:	ee32 1b05 	vadd.f64	d1, d2, d5
   10904:	eeb4 6bc1 	vcmpe.f64	d6, d1
   10908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1090c:	f140 814b 	bpl.w	10ba6 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x3b6>
   10910:	eeb4 4bc1 	vcmpe.f64	d4, d1
   10914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10918:	f300 81b8 	bgt.w	10c8c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x49c>
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w - Deg360))) {
   1091c:	ee32 5b45 	vsub.f64	d5, d2, d5
   10920:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10928:	f140 81d1 	bpl.w	10cce <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x4de>
   1092c:	eeb4 4bc5 	vcmpe.f64	d4, d5
   10930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10934:	f340 81cb 	ble.w	10cce <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x4de>
   10938:	eeb4 0bc2 	vcmpe.f64	d0, d2
   1093c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10940:	eeb4 0bc5 	vcmpe.f64	d0, d5
   10944:	bfcc      	ite	gt
   10946:	ee30 4b42 	vsubgt.f64	d4, d0, d2
   1094a:	ee32 4b40 	vsuble.f64	d4, d2, d0
   1094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10952:	bfcc      	ite	gt
   10954:	ee30 0b45 	vsubgt.f64	d0, d0, d5
   10958:	ee35 0b40 	vsuble.f64	d0, d5, d0
   1095c:	eeb4 0bc4 	vcmpe.f64	d0, d4
   10960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10964:	f140 80dc 	bpl.w	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
    *westCorrection = -Deg360;
   10968:	9916      	ldr	r1, [sp, #88]	; 0x58
    a1w -= Deg360;
   1096a:	eeb0 2b45 	vmov.f64	d2, d5
    *westCorrection = -Deg360;
   1096e:	a35a      	add	r3, pc, #360	; (adr r3, 10ad8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e8>)
   10970:	e9d3 2300 	ldrd	r2, r3, [r3]
   10974:	e9c1 2300 	strd	r2, r3, [r1]
    VF("MSG: Mount, validate destination best west axis1 normalized to "); VL(radToDeg(a1w));
   10978:	e0d2      	b.n	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
  if ((a1e - Deg360 > eastLimitMin) && (a1e - Deg360 < eastLimitMax) && inRange && (dist(a1, a1e) > dist(a1, a1e - Deg360))) {
   1097a:	ed9f 3b55 	vldr	d3, [pc, #340]	; 10ad0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e0>
   1097e:	ee34 5b43 	vsub.f64	d5, d4, d3
   10982:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1098a:	d519      	bpl.n	109c0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x1d0>
  if ((a1e + Deg360 > eastLimitMin) && (a1e + Deg360 < eastLimitMax) && !inRange) {
   1098c:	ee34 3b03 	vadd.f64	d3, d4, d3
   10990:	eeb4 7bc3 	vcmpe.f64	d7, d3
   10994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10998:	f100 8167 	bmi.w	10c6a <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x47a>
  if ((a1e >= eastLimitMin) && (a1e <= eastLimitMax)) inRange = true; else inRange = false;
   1099c:	2300      	movs	r3, #0
  if ((a1e - Deg360 > eastLimitMin) && (a1e - Deg360 < eastLimitMax) && !inRange) {
   1099e:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
   109a2:	eeb4 6b45 	vcmp.f64	d6, d5
   109a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109aa:	dd95      	ble.n	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
   109ac:	2b00      	cmp	r3, #0
   109ae:	d193      	bne.n	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
    *eastCorrection = -Deg360;
   109b0:	eeb0 3b45 	vmov.f64	d3, d5
   109b4:	a348      	add	r3, pc, #288	; (adr r3, 10ad8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e8>)
   109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   109ba:	e9c8 2300 	strd	r2, r3, [r8]
    VF("MSG: Mount, validate destination east axis1 normalized to "); VL(radToDeg(a1e));
   109be:	e78d      	b.n	108dc <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xec>
  if ((a1e + Deg360 > eastLimitMin) && (a1e + Deg360 < eastLimitMax) && !inRange) {
   109c0:	ee34 3b03 	vadd.f64	d3, d4, d3
   109c4:	eeb4 7bc3 	vcmpe.f64	d7, d3
   109c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109cc:	f100 80da 	bmi.w	10b84 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x394>
  if ((a1e >= eastLimitMin) && (a1e <= eastLimitMax)) inRange = true; else inRange = false;
   109d0:	2300      	movs	r3, #0
  if ((a1e - Deg360 > eastLimitMin) && (a1e - Deg360 < eastLimitMax) && !inRange) {
   109d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   109d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109da:	f57f af7d 	bpl.w	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
   109de:	e7de      	b.n	1099e <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x1ae>
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w - Deg360))) {
   109e0:	ee32 4b45 	vsub.f64	d4, d2, d5
   109e4:	eeb4 6bc4 	vcmpe.f64	d6, d4
   109e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109ec:	d409      	bmi.n	10a02 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x212>
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && !inRange) {
   109ee:	ee32 5b05 	vadd.f64	d5, d2, d5
   109f2:	eeb4 6bc5 	vcmpe.f64	d6, d5
   109f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109fa:	f100 80b1 	bmi.w	10b60 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x370>
  if ((a1w >= westLimitMin) && (a1w <= westLimitMax)) inRange = true; else inRange = false;
   109fe:	2300      	movs	r3, #0
   10a00:	e088      	b.n	10b14 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x324>
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && !inRange) {
   10a02:	ee32 5b05 	vadd.f64	d5, d2, d5
   10a06:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a0e:	d471      	bmi.n	10af4 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x304>
  if ((a1w >= westLimitMin) && (a1w <= westLimitMax)) inRange = true; else inRange = false;
   10a10:	2300      	movs	r3, #0
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && !inRange) {
   10a12:	eeb7 5ae8 	vcvt.f64.f32	d5, s17
   10a16:	eeb4 5b44 	vcmp.f64	d5, d4
   10a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a1e:	dd7f      	ble.n	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
   10a20:	2b00      	cmp	r3, #0
   10a22:	d17d      	bne.n	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
    *westCorrection = -Deg360;
   10a24:	eeb0 5b44 	vmov.f64	d5, d4
   10a28:	9916      	ldr	r1, [sp, #88]	; 0x58
   10a2a:	a32b      	add	r3, pc, #172	; (adr r3, 10ad8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2e8>)
   10a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a30:	e9c1 2300 	strd	r2, r3, [r1]
  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   10a34:	eeb4 7bc3 	vcmpe.f64	d7, d3
   10a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a3c:	d877      	bhi.n	10b2e <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x33e>
   10a3e:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
   10a42:	eeb4 9bc3 	vcmpe.f64	d9, d3
   10a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  *westReachable = a1w >= westLimitMin && a1w <= westLimitMax;
   10a4a:	eeb4 6bc5 	vcmpe.f64	d6, d5
  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   10a4e:	bfac      	ite	ge
   10a50:	2001      	movge	r0, #1
   10a52:	2000      	movlt	r0, #0
  *westReachable = a1w >= westLimitMin && a1w <= westLimitMax;
   10a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   10a58:	7030      	strb	r0, [r6, #0]
  *westReachable = a1w >= westLimitMin && a1w <= westLimitMax;
   10a5a:	d86f      	bhi.n	10b3c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x34c>
   10a5c:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
   10a60:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a68:	db68      	blt.n	10b3c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x34c>
   10a6a:	2301      	movs	r3, #1
   10a6c:	703b      	strb	r3, [r7, #0]
   10a6e:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
    *westCorrection = 0.0;
    return CE_SLEW_ERR_OUTSIDE_LIMITS;
  }

  #if AXIS2_TANGENT_ARM == OFF
    if (transform.isEquatorial()) {
   10a72:	3b01      	subs	r3, #1
   10a74:	2b01      	cmp	r3, #1
   10a76:	f240 80d2 	bls.w	10c1e <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x42e>
        return CE_SLEW_ERR_OUTSIDE_LIMITS;
      }
    }
  #endif

  return CE_NONE;
   10a7a:	2000      	movs	r0, #0
}
   10a7c:	b009      	add	sp, #36	; 0x24
   10a7e:	ecbd 8b06 	vpop	{d8-d10}
   10a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    westLimitMin += Deg180;
   10a86:	eeb7 6ac8 	vcvt.f64.f32	d6, s16
    if (-limits.settings.pastMeridianE > eastLimitMin) eastLimitMin = -limits.settings.pastMeridianE;
   10a8a:	4b19      	ldr	r3, [pc, #100]	; (10af0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x300>)
    westLimitMin += Deg180;
   10a8c:	ed9f 5b14 	vldr	d5, [pc, #80]	; 10ae0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x2f0>
    if (limits.settings.pastMeridianW < westLimitMax) westLimitMax = limits.settings.pastMeridianW;
   10a90:	ed93 7a03 	vldr	s14, [r3, #12]
    westLimitMin += Deg180;
   10a94:	ee36 6b05 	vadd.f64	d6, d6, d5
   10a98:	eef7 9bc6 	vcvt.f32.f64	s19, d6
    if (-limits.settings.pastMeridianE > eastLimitMin) eastLimitMin = -limits.settings.pastMeridianE;
   10a9c:	edd3 6a02 	vldr	s13, [r3, #8]
   10aa0:	eef1 6a66 	vneg.f32	s13, s13
  float eastLimitMin = axis1.settings.limits.min;
   10aa4:	eeb4 8ae6 	vcmpe.f32	s16, s13
   10aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float westLimitMax = axis1.settings.limits.max;
   10aac:	eeb4 9ac7 	vcmpe.f32	s18, s14
  float eastLimitMin = axis1.settings.limits.min;
   10ab0:	bf58      	it	pl
   10ab2:	eef0 6a48 	vmovpl.f32	s13, s16
  float westLimitMax = axis1.settings.limits.max;
   10ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10aba:	eeb0 8a66 	vmov.f32	s16, s13
   10abe:	fe37 7a09 	vselgt.f32	s14, s14, s18
    westLimitMax += Deg180;
   10ac2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10ac6:	ee37 7b05 	vadd.f64	d7, d7, d5
   10aca:	eef7 8bc7 	vcvt.f32.f64	s17, d7
   10ace:	e6c1      	b.n	10854 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x64>
   10ad0:	54442d18 	.word	0x54442d18
   10ad4:	401921fb 	.word	0x401921fb
   10ad8:	54442d18 	.word	0x54442d18
   10adc:	c01921fb 	.word	0xc01921fb
   10ae0:	54442d18 	.word	0x54442d18
   10ae4:	400921fb 	.word	0x400921fb
   10ae8:	200064ac 	.word	0x200064ac
   10aec:	200050e8 	.word	0x200050e8
   10af0:	20005cf4 	.word	0x20005cf4
  if ((a1w >= westLimitMin) && (a1w <= westLimitMax)) inRange = true; else inRange = false;
   10af4:	eeb7 4ae8 	vcvt.f64.f32	d4, s17
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && !inRange) {
   10af8:	eeb4 4bc5 	vcmpe.f64	d4, d5
   10afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b00:	bfd4      	ite	le
   10b02:	2301      	movle	r3, #1
   10b04:	2300      	movgt	r3, #0
   10b06:	2b00      	cmp	r3, #0
   10b08:	d035      	beq.n	10b76 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x386>
   10b0a:	2300      	movs	r3, #0
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w - Deg360))) {
   10b0c:	ed9f 4b7e 	vldr	d4, [pc, #504]	; 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>
   10b10:	ee32 4b44 	vsub.f64	d4, d2, d4
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && !inRange) {
   10b14:	eeb4 6bc4 	vcmpe.f64	d6, d4
   10b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b1c:	f53f af79 	bmi.w	10a12 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x222>
  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   10b20:	eeb4 7bc3 	vcmpe.f64	d7, d3
  *westReachable = a1w >= westLimitMin && a1w <= westLimitMax;
   10b24:	eeb0 5b42 	vmov.f64	d5, d2
  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   10b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b2c:	d987      	bls.n	10a3e <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x24e>
  *westReachable = a1w >= westLimitMin && a1w <= westLimitMax;
   10b2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
  *eastReachable = a1e >= eastLimitMin && a1e <= eastLimitMax;
   10b32:	2000      	movs	r0, #0
   10b34:	7030      	strb	r0, [r6, #0]
  *westReachable = a1w >= westLimitMin && a1w <= westLimitMax;
   10b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b3a:	d98f      	bls.n	10a5c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x26c>
   10b3c:	2300      	movs	r3, #0
   10b3e:	703b      	strb	r3, [r7, #0]
  if (!*eastReachable && !*westReachable) {
   10b40:	7833      	ldrb	r3, [r6, #0]
   10b42:	2b00      	cmp	r3, #0
   10b44:	d193      	bne.n	10a6e <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x27e>
    *eastCorrection = 0.0;
   10b46:	2200      	movs	r2, #0
   10b48:	2300      	movs	r3, #0
    return CE_SLEW_ERR_OUTSIDE_LIMITS;
   10b4a:	2014      	movs	r0, #20
    *westCorrection = 0.0;
   10b4c:	9916      	ldr	r1, [sp, #88]	; 0x58
    *eastCorrection = 0.0;
   10b4e:	e9c8 2300 	strd	r2, r3, [r8]
    *westCorrection = 0.0;
   10b52:	e9c1 2300 	strd	r2, r3, [r1]
}
   10b56:	b009      	add	sp, #36	; 0x24
   10b58:	ecbd 8b06 	vpop	{d8-d10}
   10b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((a1w >= westLimitMin) && (a1w <= westLimitMax)) inRange = true; else inRange = false;
   10b60:	eeb7 4ae8 	vcvt.f64.f32	d4, s17
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && !inRange) {
   10b64:	eeb4 5bc4 	vcmpe.f64	d5, d4
   10b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b6c:	bf54      	ite	pl
   10b6e:	2301      	movpl	r3, #1
   10b70:	2300      	movmi	r3, #0
   10b72:	2b00      	cmp	r3, #0
   10b74:	d1c9      	bne.n	10b0a <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x31a>
    *westCorrection = Deg360;
   10b76:	9916      	ldr	r1, [sp, #88]	; 0x58
   10b78:	a363      	add	r3, pc, #396	; (adr r3, 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>)
   10b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b7e:	e9c1 2300 	strd	r2, r3, [r1]
   10b82:	e757      	b.n	10a34 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x244>
  if ((a1e >= eastLimitMin) && (a1e <= eastLimitMax)) inRange = true; else inRange = false;
   10b84:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
  if ((a1e + Deg360 > eastLimitMin) && (a1e + Deg360 < eastLimitMax) && !inRange) {
   10b88:	eeb4 3bc6 	vcmpe.f64	d3, d6
   10b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b90:	bf54      	ite	pl
   10b92:	2301      	movpl	r3, #1
   10b94:	2300      	movmi	r3, #0
   10b96:	2b00      	cmp	r3, #0
   10b98:	d072      	beq.n	10c80 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x490>
   10b9a:	2300      	movs	r3, #0
  if ((a1e - Deg360 > eastLimitMin) && (a1e - Deg360 < eastLimitMax) && inRange && (dist(a1, a1e) > dist(a1, a1e - Deg360))) {
   10b9c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>
   10ba0:	ee34 5b45 	vsub.f64	d5, d4, d5
   10ba4:	e715      	b.n	109d2 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x1e2>
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w - Deg360))) {
   10ba6:	ee32 5b45 	vsub.f64	d5, d2, d5
   10baa:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bb2:	d5b5      	bpl.n	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
   10bb4:	eeb4 4bc5 	vcmpe.f64	d4, d5
   10bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bbc:	f73f aebc 	bgt.w	10938 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x148>
   10bc0:	e7ae      	b.n	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
  if ((a1e - Deg360 > eastLimitMin) && (a1e - Deg360 < eastLimitMax) && inRange && (dist(a1, a1e) > dist(a1, a1e - Deg360))) {
   10bc2:	ee34 5b45 	vsub.f64	d5, d4, d5
   10bc6:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bce:	f57f ae83 	bpl.w	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
   10bd2:	eeb4 3bc5 	vcmpe.f64	d3, d5
   10bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bda:	f77f ae7d 	ble.w	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
   10bde:	eeb4 0bc4 	vcmpe.f64	d0, d4
   10be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10be6:	eeb4 0bc5 	vcmpe.f64	d0, d5
   10bea:	bfcc      	ite	gt
   10bec:	ee30 6b44 	vsubgt.f64	d6, d0, d4
   10bf0:	ee34 6b40 	vsuble.f64	d6, d4, d0
   10bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bf8:	bfcc      	ite	gt
   10bfa:	ee30 3b45 	vsubgt.f64	d3, d0, d5
   10bfe:	ee35 3b40 	vsuble.f64	d3, d5, d0
   10c02:	eeb4 3bc6 	vcmpe.f64	d3, d6
   10c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10c0a:	f57f ae65 	bpl.w	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
    a1e -= Deg360;
   10c0e:	eeb0 4b45 	vmov.f64	d4, d5
    *eastCorrection = -Deg360;
   10c12:	a342      	add	r3, pc, #264	; (adr r3, 10d1c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x52c>)
   10c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c18:	e9c8 2300 	strd	r2, r3, [r8]
    VF("MSG: Mount, validate destination east axis1 best normalized to "); VL(radToDeg(a1e));
   10c1c:	e65c      	b.n	108d8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xe8>
      if (flt(coords->d, axis2.settings.limits.min)) {
   10c1e:	4b3e      	ldr	r3, [pc, #248]	; (10d18 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x528>)
   10c20:	f8d3 2025 	ldr.w	r2, [r3, #37]	; 0x25
   10c24:	ee07 2a10 	vmov	s14, r2
   10c28:	ed94 6b04 	vldr	d6, [r4, #16]
   10c2c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10c30:	ed9f 5b37 	vldr	d5, [pc, #220]	; 10d10 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x520>
   10c34:	ee37 7b46 	vsub.f64	d7, d7, d6
   10c38:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10c40:	dc58      	bgt.n	10cf4 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x504>
      if (fgt(coords->d, axis2.settings.limits.max)) {
   10c42:	f8d3 3029 	ldr.w	r3, [r3, #41]	; 0x29
   10c46:	ee07 3a10 	vmov	s14, r3
   10c4a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10c4e:	ee36 6b47 	vsub.f64	d6, d6, d7
  return CE_NONE;
   10c52:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10c5a:	bfcc      	ite	gt
   10c5c:	2014      	movgt	r0, #20
   10c5e:	2000      	movle	r0, #0
}
   10c60:	b009      	add	sp, #36	; 0x24
   10c62:	ecbd 8b06 	vpop	{d8-d10}
   10c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((a1e >= eastLimitMin) && (a1e <= eastLimitMax)) inRange = true; else inRange = false;
   10c6a:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
  if ((a1e + Deg360 > eastLimitMin) && (a1e + Deg360 < eastLimitMax) && !inRange) {
   10c6e:	eeb4 6bc3 	vcmpe.f64	d6, d3
   10c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10c76:	bfd4      	ite	le
   10c78:	2301      	movle	r3, #1
   10c7a:	2300      	movgt	r3, #0
   10c7c:	2b00      	cmp	r3, #0
   10c7e:	d18c      	bne.n	10b9a <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x3aa>
    *eastCorrection = Deg360;
   10c80:	a321      	add	r3, pc, #132	; (adr r3, 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>)
   10c82:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c86:	e9c8 2300 	strd	r2, r3, [r8]
   10c8a:	e627      	b.n	108dc <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0xec>
   10c8c:	eeb4 0bc2 	vcmpe.f64	d0, d2
   10c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10c94:	eeb4 0bc1 	vcmpe.f64	d0, d1
   10c98:	bfcc      	ite	gt
   10c9a:	ee30 5b42 	vsubgt.f64	d5, d0, d2
   10c9e:	ee32 5b40 	vsuble.f64	d5, d2, d0
   10ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ca6:	bfcc      	ite	gt
   10ca8:	ee30 ab41 	vsubgt.f64	d10, d0, d1
   10cac:	ee31 ab40 	vsuble.f64	d10, d1, d0
  if ((a1w + Deg360 > westLimitMin) && (a1w + Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w + Deg360))) {
   10cb0:	eeb4 abc5 	vcmpe.f64	d10, d5
   10cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10cb8:	d41e      	bmi.n	10cf8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x508>
  if ((a1w - Deg360 > westLimitMin) && (a1w - Deg360 < westLimitMax) && inRange && (dist(a1, a1w) > dist(a1, a1w - Deg360))) {
   10cba:	ed9f 5b13 	vldr	d5, [pc, #76]	; 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>
   10cbe:	ee32 5b45 	vsub.f64	d5, d2, d5
   10cc2:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10cca:	f53f ae2f 	bmi.w	1092c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x13c>
   10cce:	2301      	movs	r3, #1
   10cd0:	e71c      	b.n	10b0c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x31c>
  if ((a1e - Deg360 > eastLimitMin) && (a1e - Deg360 < eastLimitMax) && inRange && (dist(a1, a1e) > dist(a1, a1e - Deg360))) {
   10cd2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>
   10cd6:	ee34 5b45 	vsub.f64	d5, d4, d5
   10cda:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ce2:	d505      	bpl.n	10cf0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x500>
   10ce4:	eeb4 3bc5 	vcmpe.f64	d3, d5
   10ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10cec:	f73f af77 	bgt.w	10bde <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x3ee>
   10cf0:	2301      	movs	r3, #1
   10cf2:	e753      	b.n	10b9c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x3ac>
        return CE_SLEW_ERR_OUTSIDE_LIMITS;
   10cf4:	2014      	movs	r0, #20
   10cf6:	e6c1      	b.n	10a7c <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x28c>
    *westCorrection = Deg360;
   10cf8:	ed9f 4b03 	vldr	d4, [pc, #12]	; 10d08 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x518>
   10cfc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10cfe:	eeb0 2b41 	vmov.f64	d2, d1
   10d02:	ed83 4b00 	vstr	d4, [r3]
    VF("MSG: Mount, validate destination best west axis1 normalized to "); VL(radToDeg(a1w));
   10d06:	e70b      	b.n	10b20 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]+0x330>
   10d08:	54442d18 	.word	0x54442d18
   10d0c:	401921fb 	.word	0x401921fb
   10d10:	a0000000 	.word	0xa0000000
   10d14:	3ea0c6f7 	.word	0x3ea0c6f7
   10d18:	200051a8 	.word	0x200051a8
   10d1c:	54442d18 	.word	0x54442d18
   10d20:	c01921fb 	.word	0xc01921fb
   10d24:	00000000 	.word	0x00000000

00010d28 <Limits::init()>:
    inline bool hasValidKey() { return keyMatches; }
   10d28:	4b2f      	ldr	r3, [pc, #188]	; (10de8 <Limits::init()+0xc0>)
  if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_LIMITS_BASE, sizeof(LimitSettings))) {
   10d2a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
void Limits::init() {
   10d2e:	b510      	push	{r4, lr}
   10d30:	4604      	mov	r4, r0
   10d32:	b084      	sub	sp, #16
  if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_LIMITS_BASE, sizeof(LimitSettings))) {
   10d34:	b3aa      	cbz	r2, 10da2 <Limits::init()+0x7a>
   10d36:	2210      	movs	r2, #16
   10d38:	21c8      	movs	r1, #200	; 0xc8
   10d3a:	4618      	mov	r0, r3
   10d3c:	f7f4 f952 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
   10d40:	bb78      	cbnz	r0, 10da2 <Limits::init()+0x7a>
  nv.readBytes(NV_MOUNT_LIMITS_BASE, &settings, sizeof(LimitSettings));
   10d42:	2310      	movs	r3, #16
   10d44:	4622      	mov	r2, r4
   10d46:	21c8      	movs	r1, #200	; 0xc8
   10d48:	4827      	ldr	r0, [pc, #156]	; (10de8 <Limits::init()+0xc0>)
   10d4a:	f7f4 f965 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  if (settings.pastMeridianE > Deg360) {
   10d4e:	68a3      	ldr	r3, [r4, #8]
   10d50:	ee07 3a10 	vmov	s14, r3
   10d54:	ed9f 6b20 	vldr	d6, [pc, #128]	; 10dd8 <Limits::init()+0xb0>
   10d58:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10d5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
   10d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d64:	dd2e      	ble.n	10dc4 <Limits::init()+0x9c>
    settings.pastMeridianE = Deg360;
   10d66:	4b21      	ldr	r3, [pc, #132]	; (10dec <Limits::init()+0xc4>)
   10d68:	60a3      	str	r3, [r4, #8]
  if (settings.pastMeridianW > Deg360) {
   10d6a:	68e3      	ldr	r3, [r4, #12]
   10d6c:	ee07 3a10 	vmov	s14, r3
   10d70:	ed9f 6b19 	vldr	d6, [pc, #100]	; 10dd8 <Limits::init()+0xb0>
   10d74:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10d78:	eeb4 7bc6 	vcmpe.f64	d7, d6
   10d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10d80:	dd16      	ble.n	10db0 <Limits::init()+0x88>
    settings.pastMeridianW = Deg360;
   10d82:	4b1a      	ldr	r3, [pc, #104]	; (10dec <Limits::init()+0xc4>)
   10d84:	60e3      	str	r3, [r4, #12]
  if (tasks.add(100, 0, true, 2, limitsWrapper, "MntLmt")) { VLF("success"); } else { VLF("FAILED!"); }
   10d86:	481a      	ldr	r0, [pc, #104]	; (10df0 <Limits::init()+0xc8>)
   10d88:	2402      	movs	r4, #2
   10d8a:	491a      	ldr	r1, [pc, #104]	; (10df4 <Limits::init()+0xcc>)
   10d8c:	2301      	movs	r3, #1
   10d8e:	2200      	movs	r2, #0
   10d90:	9400      	str	r4, [sp, #0]
   10d92:	e9cd 1001 	strd	r1, r0, [sp, #4]
   10d96:	2164      	movs	r1, #100	; 0x64
   10d98:	4817      	ldr	r0, [pc, #92]	; (10df8 <Limits::init()+0xd0>)
   10d9a:	f7f5 fa1f 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
}
   10d9e:	b004      	add	sp, #16
   10da0:	bd10      	pop	{r4, pc}
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
   10da2:	2310      	movs	r3, #16
   10da4:	4622      	mov	r2, r4
   10da6:	21c8      	movs	r1, #200	; 0xc8
   10da8:	480f      	ldr	r0, [pc, #60]	; (10de8 <Limits::init()+0xc0>)
   10daa:	f7f4 f95f 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   10dae:	e7c8      	b.n	10d42 <Limits::init()+0x1a>
  if (settings.pastMeridianW < -Deg360) {
   10db0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 10de0 <Limits::init()+0xb8>
   10db4:	eeb4 7bc6 	vcmpe.f64	d7, d6
   10db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10dbc:	d5e3      	bpl.n	10d86 <Limits::init()+0x5e>
    settings.pastMeridianW = -Deg360;
   10dbe:	4b0f      	ldr	r3, [pc, #60]	; (10dfc <Limits::init()+0xd4>)
   10dc0:	60e3      	str	r3, [r4, #12]
    DLF("WRN: Limits::init(), pastMeridianW < -360 deg setting to -360 deg");
   10dc2:	e7e0      	b.n	10d86 <Limits::init()+0x5e>
  if (settings.pastMeridianE < -Deg360) {
   10dc4:	ed9f 6b06 	vldr	d6, [pc, #24]	; 10de0 <Limits::init()+0xb8>
   10dc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
   10dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10dd0:	d5cb      	bpl.n	10d6a <Limits::init()+0x42>
    settings.pastMeridianE = -Deg360;
   10dd2:	4b0a      	ldr	r3, [pc, #40]	; (10dfc <Limits::init()+0xd4>)
   10dd4:	60a3      	str	r3, [r4, #8]
    DLF("WRN: Limits::init(), pastMeridianE < -360 deg setting to -360 deg");
   10dd6:	e7c8      	b.n	10d6a <Limits::init()+0x42>
   10dd8:	54442d18 	.word	0x54442d18
   10ddc:	401921fb 	.word	0x401921fb
   10de0:	54442d18 	.word	0x54442d18
   10de4:	c01921fb 	.word	0xc01921fb
   10de8:	20005e50 	.word	0x20005e50
   10dec:	40c90fdb 	.word	0x40c90fdb
   10df0:	20002278 	.word	0x20002278
   10df4:	000117bd 	.word	0x000117bd
   10df8:	2000634c 	.word	0x2000634c
   10dfc:	c0c90fdb 	.word	0xc0c90fdb

00010e00 <Limits::validateTarget(Coordinate*, bool)>:
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10e00:	6802      	ldr	r2, [r0, #0]
   10e02:	ee07 2a10 	vmov	s14, r2
   10e06:	ed91 6b06 	vldr	d6, [r1, #24]
   10e0a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10e0e:	ed9f 5b14 	vldr	d5, [pc, #80]	; 10e60 <Limits::validateTarget(Coordinate*, bool)+0x60>
   10e12:	ee37 7b46 	vsub.f64	d7, d7, d6
   10e16:	eeb4 7bc5 	vcmpe.f64	d7, d5
   10e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e1e:	dc1b      	bgt.n	10e58 <Limits::validateTarget(Coordinate*, bool)+0x58>
  if (fgt(coords->a, settings.altitude.max)) return CE_SLEW_ERR_ABOVE_OVERHEAD;
   10e20:	6843      	ldr	r3, [r0, #4]
   10e22:	ee07 3a10 	vmov	s14, r3
   10e26:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10e2a:	ee36 6b47 	vsub.f64	d6, d6, d7
   10e2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e36:	dc0d      	bgt.n	10e54 <Limits::validateTarget(Coordinate*, bool)+0x54>
   10e38:	4608      	mov	r0, r1
CommandError Limits::validateTarget(Coordinate *coords, bool isGoto) {
   10e3a:	b510      	push	{r4, lr}
   10e3c:	b088      	sub	sp, #32
   10e3e:	ac06      	add	r4, sp, #24
   10e40:	ab04      	add	r3, sp, #16
   10e42:	f10d 020f 	add.w	r2, sp, #15
   10e46:	f10d 010e 	add.w	r1, sp, #14
   10e4a:	9400      	str	r4, [sp, #0]
   10e4c:	f7ff fcd0 	bl	107f0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]>
}
   10e50:	b008      	add	sp, #32
   10e52:	bd10      	pop	{r4, pc}
  if (fgt(coords->a, settings.altitude.max)) return CE_SLEW_ERR_ABOVE_OVERHEAD;
   10e54:	2010      	movs	r0, #16
}
   10e56:	4770      	bx	lr
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10e58:	200f      	movs	r0, #15
   10e5a:	4770      	bx	lr
   10e5c:	f3af 8000 	nop.w
   10e60:	a0000000 	.word	0xa0000000
   10e64:	3ea0c6f7 	.word	0x3ea0c6f7

00010e68 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool)>:
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   10e68:	4684      	mov	ip, r0
   10e6a:	4608      	mov	r0, r1
   10e6c:	4611      	mov	r1, r2
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10e6e:	f8dc 2000 	ldr.w	r2, [ip]
   10e72:	ee07 2a10 	vmov	s14, r2
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   10e76:	461a      	mov	r2, r3
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10e78:	ed90 6b06 	vldr	d6, [r0, #24]
   10e7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10e80:	ed9f 5b11 	vldr	d5, [pc, #68]	; 10ec8 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool)+0x60>
   10e84:	ee37 7b46 	vsub.f64	d7, d7, d6
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   10e88:	b430      	push	{r4, r5}
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10e8a:	eeb4 7bc5 	vcmpe.f64	d7, d5
CommandError Limits::validateTarget(Coordinate *coords, bool *eastReachable, bool *westReachable, double *eastCorrection, double *westCorrection, bool isGoto) {
   10e8e:	9b02      	ldr	r3, [sp, #8]
   10e90:	9c03      	ldr	r4, [sp, #12]
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e96:	dc13      	bgt.n	10ec0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool)+0x58>
  if (fgt(coords->a, settings.altitude.max)) return CE_SLEW_ERR_ABOVE_OVERHEAD;
   10e98:	f8dc 5004 	ldr.w	r5, [ip, #4]
   10e9c:	ee07 5a10 	vmov	s14, r5
   10ea0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   10ea4:	ee36 6b47 	vsub.f64	d6, d6, d7
   10ea8:	eeb4 6bc5 	vcmpe.f64	d6, d5
   10eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10eb0:	dc03      	bgt.n	10eba <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool)+0x52>
   10eb2:	9402      	str	r4, [sp, #8]
}
   10eb4:	bc30      	pop	{r4, r5}
   10eb6:	f7ff bc9b 	b.w	107f0 <Limits::validateTarget(Coordinate*, bool*, bool*, double*, double*, bool) [clone .part.0]>
  if (fgt(coords->a, settings.altitude.max)) return CE_SLEW_ERR_ABOVE_OVERHEAD;
   10eba:	2010      	movs	r0, #16
}
   10ebc:	bc30      	pop	{r4, r5}
   10ebe:	4770      	bx	lr
  if (flt(coords->a, settings.altitude.min)) return CE_SLEW_ERR_BELOW_HORIZON;
   10ec0:	200f      	movs	r0, #15
}
   10ec2:	bc30      	pop	{r4, r5}
   10ec4:	4770      	bx	lr
   10ec6:	bf00      	nop
   10ec8:	a0000000 	.word	0xa0000000
   10ecc:	3ea0c6f7 	.word	0x3ea0c6f7

00010ed0 <Limits::isError()>:

// true if an error exists
bool Limits::isError() {
  return initError.nv ||
         initError.value ||
   10ed0:	4b15      	ldr	r3, [pc, #84]	; (10f28 <Limits::isError()+0x58>)
   10ed2:	781b      	ldrb	r3, [r3, #0]
         error.limit.axis2.max ||
         error.limitSense.axis1.min ||
         error.limitSense.axis1.max ||
         error.limitSense.axis2.min ||
         error.limitSense.axis2.max ||
         error.meridian.east ||
   10ed4:	f013 0f13 	tst.w	r3, #19
   10ed8:	d101      	bne.n	10ede <Limits::isError()+0xe>
         initError.tls ||
   10eda:	7c43      	ldrb	r3, [r0, #17]
   10edc:	b10b      	cbz	r3, 10ee2 <Limits::isError()+0x12>
         error.meridian.east ||
   10ede:	2001      	movs	r0, #1
         error.meridian.west;
}
   10ee0:	4770      	bx	lr
         error.altitude.min ||
   10ee2:	7c83      	ldrb	r3, [r0, #18]
   10ee4:	2b00      	cmp	r3, #0
   10ee6:	d1fa      	bne.n	10ede <Limits::isError()+0xe>
         error.altitude.max ||
   10ee8:	7cc3      	ldrb	r3, [r0, #19]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d1f7      	bne.n	10ede <Limits::isError()+0xe>
         error.limit.axis1.min ||
   10eee:	7d03      	ldrb	r3, [r0, #20]
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d1f4      	bne.n	10ede <Limits::isError()+0xe>
         error.limit.axis1.max ||
   10ef4:	7d43      	ldrb	r3, [r0, #21]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d1f1      	bne.n	10ede <Limits::isError()+0xe>
         error.limit.axis2.min ||
   10efa:	7d83      	ldrb	r3, [r0, #22]
   10efc:	2b00      	cmp	r3, #0
   10efe:	d1ee      	bne.n	10ede <Limits::isError()+0xe>
         error.limit.axis2.max ||
   10f00:	7dc3      	ldrb	r3, [r0, #23]
   10f02:	2b00      	cmp	r3, #0
   10f04:	d1eb      	bne.n	10ede <Limits::isError()+0xe>
         error.limitSense.axis1.min ||
   10f06:	7e03      	ldrb	r3, [r0, #24]
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d1e8      	bne.n	10ede <Limits::isError()+0xe>
         error.limitSense.axis1.max ||
   10f0c:	7e43      	ldrb	r3, [r0, #25]
   10f0e:	2b00      	cmp	r3, #0
   10f10:	d1e5      	bne.n	10ede <Limits::isError()+0xe>
         error.limitSense.axis2.min ||
   10f12:	7e83      	ldrb	r3, [r0, #26]
   10f14:	2b00      	cmp	r3, #0
   10f16:	d1e2      	bne.n	10ede <Limits::isError()+0xe>
         error.limitSense.axis2.max ||
   10f18:	7ec3      	ldrb	r3, [r0, #27]
   10f1a:	2b00      	cmp	r3, #0
   10f1c:	d1df      	bne.n	10ede <Limits::isError()+0xe>
         error.meridian.east ||
   10f1e:	7f00      	ldrb	r0, [r0, #28]
   10f20:	3800      	subs	r0, #0
   10f22:	bf18      	it	ne
   10f24:	2001      	movne	r0, #1
   10f26:	4770      	bx	lr
   10f28:	20005ccc 	.word	0x20005ccc

00010f2c <Limits::isGotoError()>:

// true if an error exists that impacts goto safety
bool Limits::isGotoError() {
  return initError.nv ||
   10f2c:	4b0d      	ldr	r3, [pc, #52]	; (10f64 <Limits::isGotoError()+0x38>)
   10f2e:	781a      	ldrb	r2, [r3, #0]
bool Limits::isGotoError() {
   10f30:	4603      	mov	r3, r0
         initError.value ||
         !site.dateIsReady ||
         !site.timeIsReady ||
         error.limitSense.axis1.min ||
         error.limitSense.axis1.max ||
         error.limitSense.axis2.min ||
   10f32:	0792      	lsls	r2, r2, #30
   10f34:	d103      	bne.n	10f3e <Limits::isGotoError()+0x12>
         !site.dateIsReady ||
   10f36:	4a0c      	ldr	r2, [pc, #48]	; (10f68 <Limits::isGotoError()+0x3c>)
   10f38:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
         initError.value ||
   10f3c:	b908      	cbnz	r0, 10f42 <Limits::isGotoError()+0x16>
         error.limitSense.axis2.min ||
   10f3e:	2001      	movs	r0, #1
   10f40:	4770      	bx	lr
         !site.timeIsReady ||
   10f42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
         !site.dateIsReady ||
   10f46:	b15a      	cbz	r2, 10f60 <Limits::isGotoError()+0x34>
         !site.timeIsReady ||
   10f48:	7dd9      	ldrb	r1, [r3, #23]
   10f4a:	b941      	cbnz	r1, 10f5e <Limits::isGotoError()+0x32>
         error.limitSense.axis1.min ||
   10f4c:	7e19      	ldrb	r1, [r3, #24]
   10f4e:	b931      	cbnz	r1, 10f5e <Limits::isGotoError()+0x32>
         error.limitSense.axis1.max ||
   10f50:	7e59      	ldrb	r1, [r3, #25]
   10f52:	b921      	cbnz	r1, 10f5e <Limits::isGotoError()+0x32>
         error.limitSense.axis2.min ||
   10f54:	7e98      	ldrb	r0, [r3, #26]
   10f56:	3800      	subs	r0, #0
   10f58:	bf18      	it	ne
   10f5a:	2001      	movne	r0, #1
   10f5c:	4770      	bx	lr
   10f5e:	4610      	mov	r0, r2
         error.limitSense.axis2.max;
}
   10f60:	4770      	bx	lr
   10f62:	bf00      	nop
   10f64:	20005ccc 	.word	0x20005ccc
   10f68:	200055d0 	.word	0x200055d0

00010f6c <Limits::errorCode()>:
    inline bool motorFault() { return motor->getDriverStatus().fault; };
   10f6c:	4b2d      	ldr	r3, [pc, #180]	; (11024 <Limits::errorCode()+0xb8>)
   10f6e:	6819      	ldr	r1, [r3, #0]

// return general error code
uint8_t Limits::errorCode() {
   10f70:	b510      	push	{r4, lr}
   10f72:	680b      	ldr	r3, [r1, #0]
   10f74:	b084      	sub	sp, #16
   10f76:	4604      	mov	r4, r0
   10f78:	699b      	ldr	r3, [r3, #24]
   10f7a:	a801      	add	r0, sp, #4
   10f7c:	4798      	blx	r3
   10f7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
   10f82:	b113      	cbz	r3, 10f8a <Limits::errorCode()+0x1e>
  ERR_NONE, ERR_MOTOR_FAULT, ERR_ALT_MIN, ERR_LIMIT_SENSE, ERR_DEC, ERR_AZM,
  ERR_UNDER_POLE, ERR_MERIDIAN, ERR_SYNC, ERR_PARK, ERR_GOTO_SYNC, ERR_UNSPECIFIED,
  ERR_ALT_MAX, ERR_WEATHER_INIT, ERR_SITE_INIT, ERR_NV_INIT};

  // priority highest to lowest
  if (mount.motorFault()) return (uint8_t)ERR_MOTOR_FAULT;
   10f84:	2001      	movs	r0, #1
  if (error.meridian.east || error.meridian.west) return (uint8_t)ERR_MERIDIAN;
  if (initError.nv || initError.value) return (uint8_t)ERR_NV_INIT;
  if (initError.tls) return (uint8_t)ERR_SITE_INIT;
  if (initError.weather) return (uint8_t)ERR_WEATHER_INIT;
  return ERR_NONE;
}
   10f86:	b004      	add	sp, #16
   10f88:	bd10      	pop	{r4, pc}
   10f8a:	4b27      	ldr	r3, [pc, #156]	; (11028 <Limits::errorCode()+0xbc>)
   10f8c:	a801      	add	r0, sp, #4
   10f8e:	6819      	ldr	r1, [r3, #0]
   10f90:	680b      	ldr	r3, [r1, #0]
   10f92:	699b      	ldr	r3, [r3, #24]
   10f94:	4798      	blx	r3
   10f96:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	d1f2      	bne.n	10f84 <Limits::errorCode()+0x18>
  if (error.limitSense.axis1.min || error.limitSense.axis1.max ||
   10f9e:	7de3      	ldrb	r3, [r4, #23]
   10fa0:	b9cb      	cbnz	r3, 10fd6 <Limits::errorCode()+0x6a>
   10fa2:	7e23      	ldrb	r3, [r4, #24]
   10fa4:	b9bb      	cbnz	r3, 10fd6 <Limits::errorCode()+0x6a>
   10fa6:	7e63      	ldrb	r3, [r4, #25]
   10fa8:	b9ab      	cbnz	r3, 10fd6 <Limits::errorCode()+0x6a>
      error.limitSense.axis2.min || error.limitSense.axis2.max) return (uint8_t)ERR_LIMIT_SENSE;
   10faa:	7ea3      	ldrb	r3, [r4, #26]
   10fac:	b99b      	cbnz	r3, 10fd6 <Limits::errorCode()+0x6a>
  if (error.altitude.min) return (uint8_t)ERR_ALT_MIN;
   10fae:	7c63      	ldrb	r3, [r4, #17]
   10fb0:	b9a3      	cbnz	r3, 10fdc <Limits::errorCode()+0x70>
  if (error.altitude.max) return (uint8_t)ERR_ALT_MAX;
   10fb2:	7ca3      	ldrb	r3, [r4, #18]
   10fb4:	b96b      	cbnz	r3, 10fd2 <Limits::errorCode()+0x66>
   10fb6:	4b1d      	ldr	r3, [pc, #116]	; (1102c <Limits::errorCode()+0xc0>)
   10fb8:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
  if (transform.isEquatorial()) {
   10fbc:	3b01      	subs	r3, #1
   10fbe:	2b01      	cmp	r3, #1
    if (error.limit.axis1.min || error.limit.axis1.max) return (uint8_t)ERR_UNDER_POLE;
   10fc0:	7ce3      	ldrb	r3, [r4, #19]
  if (transform.isEquatorial()) {
   10fc2:	d90d      	bls.n	10fe0 <Limits::errorCode()+0x74>
    if (error.limit.axis1.min || error.limit.axis1.max) return (uint8_t)ERR_AZM;
   10fc4:	bb23      	cbnz	r3, 11010 <Limits::errorCode()+0xa4>
   10fc6:	7d23      	ldrb	r3, [r4, #20]
   10fc8:	bb13      	cbnz	r3, 11010 <Limits::errorCode()+0xa4>
    if (error.limit.axis2.min) return (uint8_t)ERR_ALT_MIN;
   10fca:	7d63      	ldrb	r3, [r4, #21]
   10fcc:	b933      	cbnz	r3, 10fdc <Limits::errorCode()+0x70>
    if (error.limit.axis2.max) return (uint8_t)ERR_ALT_MAX;
   10fce:	7da3      	ldrb	r3, [r4, #22]
   10fd0:	b16b      	cbz	r3, 10fee <Limits::errorCode()+0x82>
  if (error.altitude.max) return (uint8_t)ERR_ALT_MAX;
   10fd2:	200c      	movs	r0, #12
   10fd4:	e7d7      	b.n	10f86 <Limits::errorCode()+0x1a>
      error.limitSense.axis2.min || error.limitSense.axis2.max) return (uint8_t)ERR_LIMIT_SENSE;
   10fd6:	2003      	movs	r0, #3
}
   10fd8:	b004      	add	sp, #16
   10fda:	bd10      	pop	{r4, pc}
  if (error.altitude.min) return (uint8_t)ERR_ALT_MIN;
   10fdc:	2002      	movs	r0, #2
   10fde:	e7d2      	b.n	10f86 <Limits::errorCode()+0x1a>
    if (error.limit.axis1.min || error.limit.axis1.max) return (uint8_t)ERR_UNDER_POLE;
   10fe0:	b9a3      	cbnz	r3, 1100c <Limits::errorCode()+0xa0>
   10fe2:	7d23      	ldrb	r3, [r4, #20]
   10fe4:	b993      	cbnz	r3, 1100c <Limits::errorCode()+0xa0>
    if (error.limit.axis2.min || error.limit.axis2.max) return (uint8_t)ERR_DEC;
   10fe6:	7d63      	ldrb	r3, [r4, #21]
   10fe8:	b9b3      	cbnz	r3, 11018 <Limits::errorCode()+0xac>
   10fea:	7da3      	ldrb	r3, [r4, #22]
   10fec:	b9a3      	cbnz	r3, 11018 <Limits::errorCode()+0xac>
  if (error.meridian.east || error.meridian.west) return (uint8_t)ERR_MERIDIAN;
   10fee:	7ee3      	ldrb	r3, [r4, #27]
   10ff0:	b983      	cbnz	r3, 11014 <Limits::errorCode()+0xa8>
   10ff2:	7f23      	ldrb	r3, [r4, #28]
   10ff4:	b973      	cbnz	r3, 11014 <Limits::errorCode()+0xa8>
  if (initError.nv || initError.value) return (uint8_t)ERR_NV_INIT;
   10ff6:	4b0e      	ldr	r3, [pc, #56]	; (11030 <Limits::errorCode()+0xc4>)
   10ff8:	7818      	ldrb	r0, [r3, #0]
   10ffa:	0782      	lsls	r2, r0, #30
   10ffc:	d10e      	bne.n	1101c <Limits::errorCode()+0xb0>
  if (initError.tls) return (uint8_t)ERR_SITE_INIT;
   10ffe:	06c3      	lsls	r3, r0, #27
   11000:	d40e      	bmi.n	11020 <Limits::errorCode()+0xb4>
  if (initError.weather) return (uint8_t)ERR_WEATHER_INIT;
   11002:	f010 0008 	ands.w	r0, r0, #8
   11006:	bf18      	it	ne
   11008:	200d      	movne	r0, #13
   1100a:	e7bc      	b.n	10f86 <Limits::errorCode()+0x1a>
    if (error.limit.axis1.min || error.limit.axis1.max) return (uint8_t)ERR_UNDER_POLE;
   1100c:	2006      	movs	r0, #6
   1100e:	e7ba      	b.n	10f86 <Limits::errorCode()+0x1a>
    if (error.limit.axis1.min || error.limit.axis1.max) return (uint8_t)ERR_AZM;
   11010:	2005      	movs	r0, #5
   11012:	e7b8      	b.n	10f86 <Limits::errorCode()+0x1a>
  if (error.meridian.east || error.meridian.west) return (uint8_t)ERR_MERIDIAN;
   11014:	2007      	movs	r0, #7
   11016:	e7b6      	b.n	10f86 <Limits::errorCode()+0x1a>
    if (error.limit.axis2.min || error.limit.axis2.max) return (uint8_t)ERR_DEC;
   11018:	2004      	movs	r0, #4
   1101a:	e7b4      	b.n	10f86 <Limits::errorCode()+0x1a>
  if (initError.nv || initError.value) return (uint8_t)ERR_NV_INIT;
   1101c:	200f      	movs	r0, #15
   1101e:	e7b2      	b.n	10f86 <Limits::errorCode()+0x1a>
  if (initError.tls) return (uint8_t)ERR_SITE_INIT;
   11020:	200e      	movs	r0, #14
   11022:	e7b0      	b.n	10f86 <Limits::errorCode()+0x1a>
   11024:	200050e8 	.word	0x200050e8
   11028:	200051a8 	.word	0x200051a8
   1102c:	200064ac 	.word	0x200064ac
   11030:	20005ccc 	.word	0x20005ccc

00011034 <Limits::stopAxis1(GuideAction)>:
  guide.stopAxis1(GA_BREAK, true);
  guide.stopAxis2(GA_BREAK, true);
  mount.tracking(false);
}

void Limits::stopAxis1(GuideAction stopDirection) {
   11034:	b510      	push	{r4, lr}
   11036:	460c      	mov	r4, r1
  #if GOTO_FEATURE == ON
    goTo.abort();
   11038:	480b      	ldr	r0, [pc, #44]	; (11068 <Limits::stopAxis1(GuideAction)+0x34>)
   1103a:	f7fb feb9 	bl	cdb0 <Goto::abort()>
  #endif
  guide.stopAxis1(stopDirection, true);
   1103e:	2201      	movs	r2, #1
   11040:	480a      	ldr	r0, [pc, #40]	; (1106c <Limits::stopAxis1(GuideAction)+0x38>)
   11042:	4621      	mov	r1, r4
   11044:	f7fd fa76 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11048:	2c02      	cmp	r4, #2
   1104a:	d005      	beq.n	11058 <Limits::stopAxis1(GuideAction)+0x24>
   1104c:	4b08      	ldr	r3, [pc, #32]	; (11070 <Limits::stopAxis1(GuideAction)+0x3c>)
   1104e:	f893 35c4 	ldrb.w	r3, [r3, #1476]	; 0x5c4
   11052:	3b01      	subs	r3, #1
   11054:	2b01      	cmp	r3, #1
   11056:	d905      	bls.n	11064 <Limits::stopAxis1(GuideAction)+0x30>
   11058:	2100      	movs	r1, #0
   1105a:	4806      	ldr	r0, [pc, #24]	; (11074 <Limits::stopAxis1(GuideAction)+0x40>)
}
   1105c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11060:	f7f7 bd2a 	b.w	8ab8 <Mount::tracking(bool)>
}
   11064:	bd10      	pop	{r4, pc}
   11066:	bf00      	nop
   11068:	20005270 	.word	0x20005270
   1106c:	200043e8 	.word	0x200043e8
   11070:	200064ac 	.word	0x200064ac
   11074:	200054e0 	.word	0x200054e0

00011078 <Limits::poll()>:
  #endif
  guide.stopAxis2(stopDirection, true);
  if (!transform.isEquatorial()) mount.tracking(false);
}

void Limits::poll() {
   11078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static int autoFlipDelayCycles = 0;
  if (autoFlipDelayCycles > 0) autoFlipDelayCycles--;
   1107c:	4e9c      	ldr	r6, [pc, #624]	; (112f0 <Limits::poll()+0x278>)
void Limits::poll() {
   1107e:	4604      	mov	r4, r0
  if (autoFlipDelayCycles > 0) autoFlipDelayCycles--;
   11080:	6833      	ldr	r3, [r6, #0]
   11082:	2b00      	cmp	r3, #0
void Limits::poll() {
   11084:	ed2d 8b08 	vpush	{d8-d11}
   11088:	b0e5      	sub	sp, #404	; 0x194
  if (autoFlipDelayCycles > 0) autoFlipDelayCycles--;
   1108a:	dd01      	ble.n	11090 <Limits::poll()+0x18>
   1108c:	3b01      	subs	r3, #1
   1108e:	6033      	str	r3, [r6, #0]

  LimitsError lastError = error;
   11090:	7ce3      	ldrb	r3, [r4, #19]

  Coordinate current = mount.getMountPosition(CR_MOUNT_ALT);
   11092:	2202      	movs	r2, #2
   11094:	4997      	ldr	r1, [pc, #604]	; (112f4 <Limits::poll()+0x27c>)
   11096:	a822      	add	r0, sp, #136	; 0x88
  LimitsError lastError = error;
   11098:	9318      	str	r3, [sp, #96]	; 0x60
   1109a:	7d23      	ldrb	r3, [r4, #20]
   1109c:	f894 b011 	ldrb.w	fp, [r4, #17]
   110a0:	9319      	str	r3, [sp, #100]	; 0x64
   110a2:	7d63      	ldrb	r3, [r4, #21]
   110a4:	f894 a012 	ldrb.w	sl, [r4, #18]
   110a8:	931a      	str	r3, [sp, #104]	; 0x68
   110aa:	7da3      	ldrb	r3, [r4, #22]
   110ac:	f894 901b 	ldrb.w	r9, [r4, #27]
   110b0:	931f      	str	r3, [sp, #124]	; 0x7c
   110b2:	7de3      	ldrb	r3, [r4, #23]
   110b4:	931b      	str	r3, [sp, #108]	; 0x6c
   110b6:	7e23      	ldrb	r3, [r4, #24]
   110b8:	931c      	str	r3, [sp, #112]	; 0x70
   110ba:	7e63      	ldrb	r3, [r4, #25]
   110bc:	931d      	str	r3, [sp, #116]	; 0x74
   110be:	7ea3      	ldrb	r3, [r4, #26]
   110c0:	931e      	str	r3, [sp, #120]	; 0x78
   110c2:	7f23      	ldrb	r3, [r4, #28]
   110c4:	9317      	str	r3, [sp, #92]	; 0x5c
  Coordinate current = mount.getMountPosition(CR_MOUNT_ALT);
   110c6:	f7f7 ff11 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      VLF("MSG: Mount, tracking without limits disallowed");
      mount.tracking(false);
    }
  #endif

  if (limitsEnabled && guide.state != GU_HOME_GUIDE && guide.state != GU_HOME_GUIDE_ABORT) {
   110ca:	7c23      	ldrb	r3, [r4, #16]
  Coordinate current = mount.getMountPosition(CR_MOUNT_ALT);
   110cc:	f89d 70d8 	ldrb.w	r7, [sp, #216]	; 0xd8
   110d0:	ed9d 5b24 	vldr	d5, [sp, #144]	; 0x90
   110d4:	ed9d 7b28 	vldr	d7, [sp, #160]	; 0xa0
   110d8:	ed9d bb30 	vldr	d11, [sp, #192]	; 0xc0
   110dc:	ed9d 9b34 	vldr	d9, [sp, #208]	; 0xd0
  if (limitsEnabled && guide.state != GU_HOME_GUIDE && guide.state != GU_HOME_GUIDE_ABORT) {
   110e0:	b12b      	cbz	r3, 110ee <Limits::poll()+0x76>
   110e2:	4b85      	ldr	r3, [pc, #532]	; (112f8 <Limits::poll()+0x280>)
   110e4:	781b      	ldrb	r3, [r3, #0]
   110e6:	3b04      	subs	r3, #4
   110e8:	2b01      	cmp	r3, #1
   110ea:	f200 810f 	bhi.w	1130c <Limits::poll()+0x294>
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_FORWARD : GA_REVERSE);
      error.limit.axis2.max = true;
    } else error.limit.axis2.max = false;

  } else {
    error.altitude.min = false;
   110ee:	2300      	movs	r3, #0
   110f0:	4d82      	ldr	r5, [pc, #520]	; (112fc <Limits::poll()+0x284>)
   110f2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 11304 <Limits::poll()+0x28c>
   110f6:	4e82      	ldr	r6, [pc, #520]	; (11300 <Limits::poll()+0x288>)
   110f8:	7463      	strb	r3, [r4, #17]
    error.altitude.max = false;
   110fa:	74a3      	strb	r3, [r4, #18]
    error.limit.axis1.min = false;
   110fc:	74e3      	strb	r3, [r4, #19]
    error.limit.axis1.max = false;
   110fe:	7523      	strb	r3, [r4, #20]
    error.limit.axis2.min = false;
   11100:	7563      	strb	r3, [r4, #21]
    error.limit.axis2.max = false;
   11102:	75a3      	strb	r3, [r4, #22]
    error.meridian.east = false;
   11104:	76e3      	strb	r3, [r4, #27]
    error.meridian.west = false;
   11106:	7723      	strb	r3, [r4, #28]
  }

  // min and max limit switches
  error.limitSense.axis1.min = axis1.motionErrorSensed(DIR_REVERSE);
   11108:	2102      	movs	r1, #2
   1110a:	487e      	ldr	r0, [pc, #504]	; (11304 <Limits::poll()+0x28c>)
   1110c:	f7f0 fea4 	bl	1e58 <Axis::motionErrorSensed(Direction)>
   11110:	75e0      	strb	r0, [r4, #23]
  if (error.limitSense.axis1.min) {
   11112:	b1b8      	cbz	r0, 11144 <Limits::poll()+0xcc>
    if (!axis1.commonMinMaxSense || lastError.limitSense.axis1.min != error.limitSense.axis1.min) stopAxis1(GA_REVERSE);
   11114:	f898 302d 	ldrb.w	r3, [r8, #45]	; 0x2d
   11118:	2b01      	cmp	r3, #1
   1111a:	d102      	bne.n	11122 <Limits::poll()+0xaa>
   1111c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1111e:	2b01      	cmp	r3, #1
   11120:	d010      	beq.n	11144 <Limits::poll()+0xcc>
    goTo.abort();
   11122:	4879      	ldr	r0, [pc, #484]	; (11308 <Limits::poll()+0x290>)
   11124:	f7fb fe44 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(stopDirection, true);
   11128:	2201      	movs	r2, #1
   1112a:	2103      	movs	r1, #3
   1112c:	4872      	ldr	r0, [pc, #456]	; (112f8 <Limits::poll()+0x280>)
   1112e:	f7fd fa01 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
   11132:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11136:	3b01      	subs	r3, #1
   11138:	2b01      	cmp	r3, #1
   1113a:	d903      	bls.n	11144 <Limits::poll()+0xcc>
   1113c:	2100      	movs	r1, #0
   1113e:	486d      	ldr	r0, [pc, #436]	; (112f4 <Limits::poll()+0x27c>)
   11140:	f7f7 fcba 	bl	8ab8 <Mount::tracking(bool)>
  }

  error.limitSense.axis1.max = axis1.motionErrorSensed(DIR_FORWARD);
   11144:	2101      	movs	r1, #1
   11146:	486f      	ldr	r0, [pc, #444]	; (11304 <Limits::poll()+0x28c>)
   11148:	f7f0 fe86 	bl	1e58 <Axis::motionErrorSensed(Direction)>
   1114c:	7620      	strb	r0, [r4, #24]
  if (error.limitSense.axis1.max) {
   1114e:	b190      	cbz	r0, 11176 <Limits::poll()+0xfe>
    if (!axis1.commonMinMaxSense || lastError.limitSense.axis1.max != error.limitSense.axis1.max) stopAxis1(GA_FORWARD);
   11150:	f898 302d 	ldrb.w	r3, [r8, #45]	; 0x2d
   11154:	2b01      	cmp	r3, #1
   11156:	d102      	bne.n	1115e <Limits::poll()+0xe6>
   11158:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1115a:	2b01      	cmp	r3, #1
   1115c:	d00b      	beq.n	11176 <Limits::poll()+0xfe>
    goTo.abort();
   1115e:	486a      	ldr	r0, [pc, #424]	; (11308 <Limits::poll()+0x290>)
   11160:	f7fb fe26 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(stopDirection, true);
   11164:	2102      	movs	r1, #2
   11166:	4864      	ldr	r0, [pc, #400]	; (112f8 <Limits::poll()+0x280>)
   11168:	2201      	movs	r2, #1
   1116a:	f7fd f9e3 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   1116e:	2100      	movs	r1, #0
   11170:	4860      	ldr	r0, [pc, #384]	; (112f4 <Limits::poll()+0x27c>)
   11172:	f7f7 fca1 	bl	8ab8 <Mount::tracking(bool)>
  }

  error.limitSense.axis2.min = axis2.motionErrorSensed(DIR_REVERSE);
   11176:	2102      	movs	r1, #2
   11178:	4861      	ldr	r0, [pc, #388]	; (11300 <Limits::poll()+0x288>)
   1117a:	f7f0 fe6d 	bl	1e58 <Axis::motionErrorSensed(Direction)>
   1117e:	7660      	strb	r0, [r4, #25]
  if (error.limitSense.axis2.min) {
   11180:	b1c8      	cbz	r0, 111b6 <Limits::poll()+0x13e>
    if (!axis2.commonMinMaxSense || lastError.limitSense.axis2.min != error.limitSense.axis2.min)
   11182:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   11186:	2b01      	cmp	r3, #1
   11188:	d102      	bne.n	11190 <Limits::poll()+0x118>
   1118a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1118c:	2b01      	cmp	r3, #1
   1118e:	d012      	beq.n	111b6 <Limits::poll()+0x13e>
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_REVERSE : GA_FORWARD);
   11190:	2f01      	cmp	r7, #1
    goTo.abort();
   11192:	485d      	ldr	r0, [pc, #372]	; (11308 <Limits::poll()+0x290>)
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_REVERSE : GA_FORWARD);
   11194:	bf0c      	ite	eq
   11196:	2103      	moveq	r1, #3
   11198:	2102      	movne	r1, #2
   1119a:	911b      	str	r1, [sp, #108]	; 0x6c
    goTo.abort();
   1119c:	f7fb fe08 	bl	cdb0 <Goto::abort()>
  guide.stopAxis2(stopDirection, true);
   111a0:	991b      	ldr	r1, [sp, #108]	; 0x6c
   111a2:	2201      	movs	r2, #1
   111a4:	4854      	ldr	r0, [pc, #336]	; (112f8 <Limits::poll()+0x280>)
   111a6:	f7fd f9f3 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
   111aa:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (!transform.isEquatorial()) mount.tracking(false);
   111ae:	3b01      	subs	r3, #1
   111b0:	2b01      	cmp	r3, #1
   111b2:	f200 815f 	bhi.w	11474 <Limits::poll()+0x3fc>
  }

  error.limitSense.axis2.max = axis2.motionErrorSensed(DIR_FORWARD);
   111b6:	2101      	movs	r1, #1
   111b8:	4851      	ldr	r0, [pc, #324]	; (11300 <Limits::poll()+0x288>)
   111ba:	f7f0 fe4d 	bl	1e58 <Axis::motionErrorSensed(Direction)>
   111be:	76a0      	strb	r0, [r4, #26]
  if (error.limitSense.axis2.max) {
   111c0:	2800      	cmp	r0, #0
   111c2:	d042      	beq.n	1124a <Limits::poll()+0x1d2>
    if (!axis2.commonMinMaxSense || lastError.limitSense.axis2.max != error.limitSense.axis2.max)
   111c4:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   111c8:	2b01      	cmp	r3, #1
   111ca:	d102      	bne.n	111d2 <Limits::poll()+0x15a>
   111cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   111ce:	2b01      	cmp	r3, #1
   111d0:	d03b      	beq.n	1124a <Limits::poll()+0x1d2>
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_FORWARD : GA_REVERSE);
   111d2:	2f01      	cmp	r7, #1
    goTo.abort();
   111d4:	484c      	ldr	r0, [pc, #304]	; (11308 <Limits::poll()+0x290>)
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_FORWARD : GA_REVERSE);
   111d6:	bf0c      	ite	eq
   111d8:	2102      	moveq	r1, #2
   111da:	2103      	movne	r1, #3
   111dc:	911b      	str	r1, [sp, #108]	; 0x6c
    goTo.abort();
   111de:	f7fb fde7 	bl	cdb0 <Goto::abort()>
  guide.stopAxis2(stopDirection, true);
   111e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   111e4:	2201      	movs	r2, #1
   111e6:	4844      	ldr	r0, [pc, #272]	; (112f8 <Limits::poll()+0x280>)
   111e8:	f7fd f9d2 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
   111ec:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (!transform.isEquatorial()) mount.tracking(false);
   111f0:	3b01      	subs	r3, #1
   111f2:	2b01      	cmp	r3, #1
   111f4:	d825      	bhi.n	11242 <Limits::poll()+0x1ca>
  // respond to overhead and horizon limits
  if (transform.mountType == ALTAZM) {
    if (error.altitude.min) stopAxis2(GA_REVERSE);
    if (error.altitude.max) stopAxis2(GA_FORWARD);
  } else {
    if (!lastError.altitude.min && error.altitude.min) stop();
   111f6:	f1bb 0f00 	cmp.w	fp, #0
   111fa:	d103      	bne.n	11204 <Limits::poll()+0x18c>
   111fc:	7c63      	ldrb	r3, [r4, #17]
   111fe:	2b00      	cmp	r3, #0
   11200:	f040 813d 	bne.w	1147e <Limits::poll()+0x406>
    if (!lastError.altitude.max && error.altitude.max) stop();
   11204:	f1ba 0f00 	cmp.w	sl, #0
   11208:	d059      	beq.n	112be <Limits::poll()+0x246>
  }

  // if first time breaking a meridian or min/max limit stop all guides
  if ((!lastError.meridian.east && error.meridian.east) ||
   1120a:	f1b9 0f00 	cmp.w	r9, #0
   1120e:	d13b      	bne.n	11288 <Limits::poll()+0x210>
   11210:	7ee3      	ldrb	r3, [r4, #27]
   11212:	2b00      	cmp	r3, #0
   11214:	d038      	beq.n	11288 <Limits::poll()+0x210>
    goTo.abort();
   11216:	483c      	ldr	r0, [pc, #240]	; (11308 <Limits::poll()+0x290>)
   11218:	f7fb fdca 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(GA_BREAK, true);
   1121c:	2201      	movs	r2, #1
   1121e:	4836      	ldr	r0, [pc, #216]	; (112f8 <Limits::poll()+0x280>)
   11220:	4611      	mov	r1, r2
   11222:	f7fd f987 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  guide.stopAxis2(GA_BREAK, true);
   11226:	2201      	movs	r2, #1
   11228:	4833      	ldr	r0, [pc, #204]	; (112f8 <Limits::poll()+0x280>)
   1122a:	4611      	mov	r1, r2
   1122c:	f7fd f9b0 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
  mount.tracking(false);
   11230:	2100      	movs	r1, #0
   11232:	4830      	ldr	r0, [pc, #192]	; (112f4 <Limits::poll()+0x27c>)
      (!lastError.meridian.west && error.meridian.west) ||
      (!lastError.limit.axis1.min && error.limit.axis1.min) ||
      (!lastError.limit.axis1.max && error.limit.axis1.max) ||
      (!lastError.limit.axis2.min && error.limit.axis2.min) ||
      (!lastError.limit.axis2.max && error.limit.axis2.max)) stop();
}
   11234:	b065      	add	sp, #404	; 0x194
   11236:	ecbd 8b08 	vpop	{d8-d11}
   1123a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mount.tracking(false);
   1123e:	f7f7 bc3b 	b.w	8ab8 <Mount::tracking(bool)>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11242:	2100      	movs	r1, #0
   11244:	482b      	ldr	r0, [pc, #172]	; (112f4 <Limits::poll()+0x27c>)
   11246:	f7f7 fc37 	bl	8ab8 <Mount::tracking(bool)>
  if (transform.mountType == ALTAZM) {
   1124a:	f995 65c4 	ldrsb.w	r6, [r5, #1476]	; 0x5c4
   1124e:	2e03      	cmp	r6, #3
   11250:	d1d1      	bne.n	111f6 <Limits::poll()+0x17e>
    if (error.altitude.min) stopAxis2(GA_REVERSE);
   11252:	7c63      	ldrb	r3, [r4, #17]
   11254:	2b00      	cmp	r3, #0
   11256:	f040 81a8 	bne.w	115aa <Limits::poll()+0x532>
    if (error.altitude.max) stopAxis2(GA_FORWARD);
   1125a:	7ca3      	ldrb	r3, [r4, #18]
   1125c:	2b00      	cmp	r3, #0
   1125e:	d0d4      	beq.n	1120a <Limits::poll()+0x192>
    goTo.abort();
   11260:	4829      	ldr	r0, [pc, #164]	; (11308 <Limits::poll()+0x290>)
   11262:	f7fb fda5 	bl	cdb0 <Goto::abort()>
  guide.stopAxis2(stopDirection, true);
   11266:	2201      	movs	r2, #1
   11268:	2102      	movs	r1, #2
   1126a:	4823      	ldr	r0, [pc, #140]	; (112f8 <Limits::poll()+0x280>)
   1126c:	f7fd f990 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
   11270:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (!transform.isEquatorial()) mount.tracking(false);
   11274:	3b01      	subs	r3, #1
   11276:	2b01      	cmp	r3, #1
   11278:	d9c7      	bls.n	1120a <Limits::poll()+0x192>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   1127a:	2100      	movs	r1, #0
   1127c:	481d      	ldr	r0, [pc, #116]	; (112f4 <Limits::poll()+0x27c>)
   1127e:	f7f7 fc1b 	bl	8ab8 <Mount::tracking(bool)>
  if ((!lastError.meridian.east && error.meridian.east) ||
   11282:	f1b9 0f00 	cmp.w	r9, #0
   11286:	d0c3      	beq.n	11210 <Limits::poll()+0x198>
   11288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1128a:	b913      	cbnz	r3, 11292 <Limits::poll()+0x21a>
      (!lastError.meridian.west && error.meridian.west) ||
   1128c:	7f23      	ldrb	r3, [r4, #28]
   1128e:	2b00      	cmp	r3, #0
   11290:	d1c1      	bne.n	11216 <Limits::poll()+0x19e>
   11292:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11294:	b343      	cbz	r3, 112e8 <Limits::poll()+0x270>
      (!lastError.limit.axis1.min && error.limit.axis1.min) ||
   11296:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11298:	b913      	cbnz	r3, 112a0 <Limits::poll()+0x228>
      (!lastError.limit.axis1.max && error.limit.axis1.max) ||
   1129a:	7d23      	ldrb	r3, [r4, #20]
   1129c:	2b00      	cmp	r3, #0
   1129e:	d1ba      	bne.n	11216 <Limits::poll()+0x19e>
   112a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   112a2:	b913      	cbnz	r3, 112aa <Limits::poll()+0x232>
      (!lastError.limit.axis2.min && error.limit.axis2.min) ||
   112a4:	7d63      	ldrb	r3, [r4, #21]
   112a6:	2b00      	cmp	r3, #0
   112a8:	d1b5      	bne.n	11216 <Limits::poll()+0x19e>
   112aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   112ac:	b913      	cbnz	r3, 112b4 <Limits::poll()+0x23c>
      (!lastError.limit.axis2.max && error.limit.axis2.max)) stop();
   112ae:	7da3      	ldrb	r3, [r4, #22]
   112b0:	2b00      	cmp	r3, #0
   112b2:	d1b0      	bne.n	11216 <Limits::poll()+0x19e>
}
   112b4:	b065      	add	sp, #404	; 0x194
   112b6:	ecbd 8b08 	vpop	{d8-d11}
   112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!lastError.altitude.max && error.altitude.max) stop();
   112be:	7ca3      	ldrb	r3, [r4, #18]
   112c0:	2b00      	cmp	r3, #0
   112c2:	d0a2      	beq.n	1120a <Limits::poll()+0x192>
    goTo.abort();
   112c4:	4810      	ldr	r0, [pc, #64]	; (11308 <Limits::poll()+0x290>)
   112c6:	f7fb fd73 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(GA_BREAK, true);
   112ca:	2201      	movs	r2, #1
   112cc:	480a      	ldr	r0, [pc, #40]	; (112f8 <Limits::poll()+0x280>)
   112ce:	4611      	mov	r1, r2
   112d0:	f7fd f930 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  guide.stopAxis2(GA_BREAK, true);
   112d4:	2201      	movs	r2, #1
   112d6:	4808      	ldr	r0, [pc, #32]	; (112f8 <Limits::poll()+0x280>)
   112d8:	4611      	mov	r1, r2
   112da:	f7fd f959 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
  mount.tracking(false);
   112de:	4651      	mov	r1, sl
   112e0:	4804      	ldr	r0, [pc, #16]	; (112f4 <Limits::poll()+0x27c>)
   112e2:	f7f7 fbe9 	bl	8ab8 <Mount::tracking(bool)>
}
   112e6:	e790      	b.n	1120a <Limits::poll()+0x192>
      (!lastError.limit.axis1.min && error.limit.axis1.min) ||
   112e8:	7ce3      	ldrb	r3, [r4, #19]
   112ea:	2b00      	cmp	r3, #0
   112ec:	d193      	bne.n	11216 <Limits::poll()+0x19e>
   112ee:	e7d2      	b.n	11296 <Limits::poll()+0x21e>
   112f0:	20005818 	.word	0x20005818
   112f4:	200054e0 	.word	0x200054e0
   112f8:	200043e8 	.word	0x200043e8
   112fc:	200064ac 	.word	0x200064ac
   11300:	200051a8 	.word	0x200051a8
   11304:	200050e8 	.word	0x200050e8
   11308:	20005270 	.word	0x20005270
    if (current.a < settings.altitude.min) error.altitude.min = true; else error.altitude.min = false;
   1130c:	6823      	ldr	r3, [r4, #0]
   1130e:	ee04 3a10 	vmov	s8, r3
    if (fabs(settings.altitude.max - Deg90) > OneArcSec) {
   11312:	6863      	ldr	r3, [r4, #4]
    if (current.a < settings.altitude.min) error.altitude.min = true; else error.altitude.min = false;
   11314:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    if (fabs(settings.altitude.max - Deg90) > OneArcSec) {
   11318:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 11618 <Limits::poll()+0x5a0>
    if (current.a < settings.altitude.min) error.altitude.min = true; else error.altitude.min = false;
   1131c:	eeb4 4bc7 	vcmpe.f64	d4, d7
    if (fabs(settings.altitude.max - Deg90) > OneArcSec) {
   11320:	ee04 3a10 	vmov	s8, r3
   11324:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    if (current.a < settings.altitude.min) error.altitude.min = true; else error.altitude.min = false;
   11328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (fabs(settings.altitude.max - Deg90) > OneArcSec) {
   1132c:	ee34 6b46 	vsub.f64	d6, d4, d6
    if (current.a < settings.altitude.min) error.altitude.min = true; else error.altitude.min = false;
   11330:	bfcc      	ite	gt
   11332:	2301      	movgt	r3, #1
   11334:	2300      	movle	r3, #0
    if (fabs(settings.altitude.max - Deg90) > OneArcSec) {
   11336:	ed9f 3bba 	vldr	d3, [pc, #744]	; 11620 <Limits::poll()+0x5a8>
  { return __builtin_fabsl(__x); }
   1133a:	eeb0 6bc6 	vabs.f64	d6, d6
    if (current.a < settings.altitude.min) error.altitude.min = true; else error.altitude.min = false;
   1133e:	7463      	strb	r3, [r4, #17]
    if (fabs(settings.altitude.max - Deg90) > OneArcSec) {
   11340:	eeb4 6bc3 	vcmpe.f64	d6, d3
   11344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11348:	f300 80af 	bgt.w	114aa <Limits::poll()+0x432>
   1134c:	2300      	movs	r3, #0
    if (transform.mountType == GEM && current.pierSide == PIER_SIDE_EAST) {
   1134e:	4dba      	ldr	r5, [pc, #744]	; (11638 <Limits::poll()+0x5c0>)
   11350:	2f01      	cmp	r7, #1
      if (current.a > settings.altitude.max) error.altitude.max = true; else error.altitude.max = false;
   11352:	74a3      	strb	r3, [r4, #18]
    if (transform.mountType == GEM && current.pierSide == PIER_SIDE_EAST) {
   11354:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
   11358:	f1a3 0201 	sub.w	r2, r3, #1
   1135c:	fab2 f282 	clz	r2, r2
   11360:	ea4f 1252 	mov.w	r2, r2, lsr #5
   11364:	d102      	bne.n	1136c <Limits::poll()+0x2f4>
   11366:	2a00      	cmp	r2, #0
   11368:	f040 81d8 	bne.w	1171c <Limits::poll()+0x6a4>
    } else error.meridian.east = false;
   1136c:	2100      	movs	r1, #0
   1136e:	76e1      	strb	r1, [r4, #27]
    if (transform.mountType == GEM && current.pierSide == PIER_SIDE_WEST) {
   11370:	f1a7 0102 	sub.w	r1, r7, #2
   11374:	fab1 f181 	clz	r1, r1
   11378:	0949      	lsrs	r1, r1, #5
   1137a:	b112      	cbz	r2, 11382 <Limits::poll()+0x30a>
   1137c:	2900      	cmp	r1, #0
   1137e:	f040 819a 	bne.w	116b6 <Limits::poll()+0x63e>
    } else error.meridian.west = false;
   11382:	2200      	movs	r2, #0
    if (transform.mountType != GEM && current.pierSide == PIER_SIDE_WEST) current.a1 += Deg180;
   11384:	2b01      	cmp	r3, #1
    } else error.meridian.west = false;
   11386:	7722      	strb	r2, [r4, #28]
    if (transform.mountType != GEM && current.pierSide == PIER_SIDE_WEST) current.a1 += Deg180;
   11388:	d002      	beq.n	11390 <Limits::poll()+0x318>
   1138a:	2900      	cmp	r1, #0
   1138c:	f040 81c1 	bne.w	11712 <Limits::poll()+0x69a>
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   11390:	48aa      	ldr	r0, [pc, #680]	; (1163c <Limits::poll()+0x5c4>)
   11392:	f7ef fecb 	bl	112c <Axis::getInstrumentCoordinate()>
   11396:	2200      	movs	r2, #0
   11398:	49a9      	ldr	r1, [pc, #676]	; (11640 <Limits::poll()+0x5c8>)
   1139a:	a838      	add	r0, sp, #224	; 0xe0
   1139c:	eeb0 8b40 	vmov.f64	d8, d0
   113a0:	f7fe f802 	bl	f3a8 <Home::getPosition(CoordReturn)>
   113a4:	ed9d 7b46 	vldr	d7, [sp, #280]	; 0x118
   113a8:	ed9f ab9f 	vldr	d10, [pc, #636]	; 11628 <Limits::poll()+0x5b0>
   113ac:	ee38 8b47 	vsub.f64	d8, d8, d7
   113b0:	eeb0 8bc8 	vabs.f64	d8, d8
   113b4:	eeb4 8bca 	vcmpe.f64	d8, d10
   113b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   113bc:	f240 815d 	bls.w	1167a <Limits::poll()+0x602>
    if (flt(current.a1, axis1.settings.limits.min)) {
   113c0:	f8df 8278 	ldr.w	r8, [pc, #632]	; 1163c <Limits::poll()+0x5c4>
   113c4:	f8d8 3025 	ldr.w	r3, [r8, #37]	; 0x25
   113c8:	ee07 3a10 	vmov	s14, r3
   113cc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   113d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 11630 <Limits::poll()+0x5b8>
   113d4:	ee37 7b4b 	vsub.f64	d7, d7, d11
   113d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
   113dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   113e0:	f300 8138 	bgt.w	11654 <Limits::poll()+0x5dc>
   113e4:	2300      	movs	r3, #0
      error.limit.axis1.min = true;
   113e6:	74e3      	strb	r3, [r4, #19]
    if (fgt(current.a1, axis1.settings.limits.max) && autoFlipDelayCycles == 0) {
   113e8:	f8d8 3029 	ldr.w	r3, [r8, #41]	; 0x29
   113ec:	ee07 3a10 	vmov	s14, r3
   113f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   113f4:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 11630 <Limits::poll()+0x5b8>
   113f8:	ee3b 7b47 	vsub.f64	d7, d11, d7
   113fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
   11400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11404:	f340 80ce 	ble.w	115a4 <Limits::poll()+0x52c>
   11408:	6833      	ldr	r3, [r6, #0]
   1140a:	2b00      	cmp	r3, #0
   1140c:	f040 80ca 	bne.w	115a4 <Limits::poll()+0x52c>
        if (current.pierSide == PIER_SIDE_EAST && goTo.isAutoFlipEnabled() && mount.isTracking()) {
   11410:	2f01      	cmp	r7, #1
   11412:	d152      	bne.n	114ba <Limits::poll()+0x442>
    inline bool isAutoFlipEnabled() { return settings.meridianFlipAuto && transform.isEquatorial() && transform.meridianFlips; }
   11414:	4a8b      	ldr	r2, [pc, #556]	; (11644 <Limits::poll()+0x5cc>)
   11416:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
   1141a:	07d2      	lsls	r2, r2, #31
   1141c:	d54d      	bpl.n	114ba <Limits::poll()+0x442>
   1141e:	f895 25c4 	ldrb.w	r2, [r5, #1476]	; 0x5c4
   11422:	3a01      	subs	r2, #1
   11424:	2a01      	cmp	r2, #1
   11426:	d848      	bhi.n	114ba <Limits::poll()+0x442>
   11428:	f895 25c5 	ldrb.w	r2, [r5, #1477]	; 0x5c5
   1142c:	2a00      	cmp	r2, #0
   1142e:	d044      	beq.n	114ba <Limits::poll()+0x442>
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   11430:	4985      	ldr	r1, [pc, #532]	; (11648 <Limits::poll()+0x5d0>)
   11432:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
   11436:	2a01      	cmp	r2, #1
   11438:	d13f      	bne.n	114ba <Limits::poll()+0x442>
          autoFlipDelayCycles = 10;
   1143a:	220a      	movs	r2, #10
          Coordinate target = mount.getMountPosition();
   1143c:	a84e      	add	r0, sp, #312	; 0x138
   1143e:	9320      	str	r3, [sp, #128]	; 0x80
          autoFlipDelayCycles = 10;
   11440:	6032      	str	r2, [r6, #0]
          Coordinate target = mount.getMountPosition();
   11442:	463a      	mov	r2, r7
   11444:	f7f7 fd52 	bl	8eec <Mount::getMountPosition(CoordReturn)>
          CommandError e = goTo.request(target, PSS_WEST_ONLY, false);
   11448:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1144a:	2250      	movs	r2, #80	; 0x50
   1144c:	a950      	add	r1, sp, #320	; 0x140
   1144e:	9315      	str	r3, [sp, #84]	; 0x54
   11450:	2305      	movs	r3, #5
   11452:	4668      	mov	r0, sp
   11454:	9314      	str	r3, [sp, #80]	; 0x50
   11456:	f007 f839 	bl	184cc <memcpy>
   1145a:	ab4e      	add	r3, sp, #312	; 0x138
   1145c:	4879      	ldr	r0, [pc, #484]	; (11644 <Limits::poll()+0x5cc>)
   1145e:	cb0c      	ldmia	r3, {r2, r3}
   11460:	f7fc f91e 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
          if (e != CE_NONE) {
   11464:	2800      	cmp	r0, #0
   11466:	d036      	beq.n	114d6 <Limits::poll()+0x45e>
            stopAxis1(GA_FORWARD);
   11468:	2102      	movs	r1, #2
   1146a:	4620      	mov	r0, r4
   1146c:	f7ff fde2 	bl	11034 <Limits::stopAxis1(GuideAction)>
            error.limit.axis1.max = true;
   11470:	7527      	strb	r7, [r4, #20]
            DF("WRN: Limits::limitPoll(), goto for automatic meridian flip failed ("); D(e); DL(")");
   11472:	e030      	b.n	114d6 <Limits::poll()+0x45e>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11474:	2100      	movs	r1, #0
   11476:	4874      	ldr	r0, [pc, #464]	; (11648 <Limits::poll()+0x5d0>)
   11478:	f7f7 fb1e 	bl	8ab8 <Mount::tracking(bool)>
}
   1147c:	e69b      	b.n	111b6 <Limits::poll()+0x13e>
    goTo.abort();
   1147e:	4871      	ldr	r0, [pc, #452]	; (11644 <Limits::poll()+0x5cc>)
   11480:	f7fb fc96 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(GA_BREAK, true);
   11484:	2201      	movs	r2, #1
   11486:	4871      	ldr	r0, [pc, #452]	; (1164c <Limits::poll()+0x5d4>)
   11488:	4611      	mov	r1, r2
   1148a:	f7fd f853 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  guide.stopAxis2(GA_BREAK, true);
   1148e:	2201      	movs	r2, #1
   11490:	486e      	ldr	r0, [pc, #440]	; (1164c <Limits::poll()+0x5d4>)
   11492:	4611      	mov	r1, r2
   11494:	f7fd f87c 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
  mount.tracking(false);
   11498:	4659      	mov	r1, fp
   1149a:	486b      	ldr	r0, [pc, #428]	; (11648 <Limits::poll()+0x5d0>)
   1149c:	f7f7 fb0c 	bl	8ab8 <Mount::tracking(bool)>
    if (!lastError.altitude.max && error.altitude.max) stop();
   114a0:	f1ba 0f00 	cmp.w	sl, #0
   114a4:	f47f aeb1 	bne.w	1120a <Limits::poll()+0x192>
   114a8:	e709      	b.n	112be <Limits::poll()+0x246>
      if (current.a > settings.altitude.max) error.altitude.max = true; else error.altitude.max = false;
   114aa:	eeb4 4bc7 	vcmpe.f64	d4, d7
   114ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   114b2:	bf4c      	ite	mi
   114b4:	2301      	movmi	r3, #1
   114b6:	2300      	movpl	r3, #0
   114b8:	e749      	b.n	1134e <Limits::poll()+0x2d6>
    goTo.abort();
   114ba:	4862      	ldr	r0, [pc, #392]	; (11644 <Limits::poll()+0x5cc>)
   114bc:	f7fb fc78 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(stopDirection, true);
   114c0:	2201      	movs	r2, #1
   114c2:	2102      	movs	r1, #2
   114c4:	4861      	ldr	r0, [pc, #388]	; (1164c <Limits::poll()+0x5d4>)
   114c6:	f7fd f835 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   114ca:	2100      	movs	r1, #0
   114cc:	485e      	ldr	r0, [pc, #376]	; (11648 <Limits::poll()+0x5d0>)
   114ce:	f7f7 faf3 	bl	8ab8 <Mount::tracking(bool)>
        error.limit.axis1.max = true;
   114d2:	2301      	movs	r3, #1
   114d4:	7523      	strb	r3, [r4, #20]
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   114d6:	4859      	ldr	r0, [pc, #356]	; (1163c <Limits::poll()+0x5c4>)
   114d8:	f7ef fe28 	bl	112c <Axis::getInstrumentCoordinate()>
   114dc:	a838      	add	r0, sp, #224	; 0xe0
   114de:	2200      	movs	r2, #0
   114e0:	4957      	ldr	r1, [pc, #348]	; (11640 <Limits::poll()+0x5c8>)
   114e2:	eeb0 8b40 	vmov.f64	d8, d0
   114e6:	f7fd ff5f 	bl	f3a8 <Home::getPosition(CoordReturn)>
   114ea:	ed9d 7b46 	vldr	d7, [sp, #280]	; 0x118
   114ee:	ed9f ab4e 	vldr	d10, [pc, #312]	; 11628 <Limits::poll()+0x5b0>
   114f2:	ee38 8b47 	vsub.f64	d8, d8, d7
   114f6:	eeb0 8bc8 	vabs.f64	d8, d8
   114fa:	eeb4 8bca 	vcmpe.f64	d8, d10
   114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11502:	d96a      	bls.n	115da <Limits::poll()+0x562>
    if (flt(current.a2, axis2.settings.limits.min)) {
   11504:	4e52      	ldr	r6, [pc, #328]	; (11650 <Limits::poll()+0x5d8>)
   11506:	f8d6 3025 	ldr.w	r3, [r6, #37]	; 0x25
   1150a:	ee07 3a10 	vmov	s14, r3
   1150e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   11512:	ed9f 6b47 	vldr	d6, [pc, #284]	; 11630 <Limits::poll()+0x5b8>
   11516:	ee37 7b49 	vsub.f64	d7, d7, d9
   1151a:	eeb4 7bc6 	vcmpe.f64	d7, d6
   1151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11522:	dd58      	ble.n	115d6 <Limits::poll()+0x55e>
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_REVERSE : GA_FORWARD);
   11524:	2f01      	cmp	r7, #1
    goTo.abort();
   11526:	4847      	ldr	r0, [pc, #284]	; (11644 <Limits::poll()+0x5cc>)
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_REVERSE : GA_FORWARD);
   11528:	bf0c      	ite	eq
   1152a:	2103      	moveq	r1, #3
   1152c:	2102      	movne	r1, #2
   1152e:	9120      	str	r1, [sp, #128]	; 0x80
    goTo.abort();
   11530:	f7fb fc3e 	bl	cdb0 <Goto::abort()>
  guide.stopAxis2(stopDirection, true);
   11534:	9920      	ldr	r1, [sp, #128]	; 0x80
   11536:	2201      	movs	r2, #1
   11538:	4844      	ldr	r0, [pc, #272]	; (1164c <Limits::poll()+0x5d4>)
   1153a:	f7fd f829 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
   1153e:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (!transform.isEquatorial()) mount.tracking(false);
   11542:	3b01      	subs	r3, #1
   11544:	2b01      	cmp	r3, #1
   11546:	d903      	bls.n	11550 <Limits::poll()+0x4d8>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11548:	2100      	movs	r1, #0
   1154a:	483f      	ldr	r0, [pc, #252]	; (11648 <Limits::poll()+0x5d0>)
   1154c:	f7f7 fab4 	bl	8ab8 <Mount::tracking(bool)>
      error.limit.axis2.min = true;
   11550:	2301      	movs	r3, #1
   11552:	7563      	strb	r3, [r4, #21]
    if (fgt(current.a2, axis2.settings.limits.max)) {
   11554:	f8d6 3029 	ldr.w	r3, [r6, #41]	; 0x29
   11558:	ee07 3a10 	vmov	s14, r3
   1155c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   11560:	ed9f 6b33 	vldr	d6, [pc, #204]	; 11630 <Limits::poll()+0x5b8>
   11564:	ee39 7b47 	vsub.f64	d7, d9, d7
   11568:	eeb4 7bc6 	vcmpe.f64	d7, d6
   1156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11570:	dd2e      	ble.n	115d0 <Limits::poll()+0x558>
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_FORWARD : GA_REVERSE);
   11572:	2f01      	cmp	r7, #1
    goTo.abort();
   11574:	4833      	ldr	r0, [pc, #204]	; (11644 <Limits::poll()+0x5cc>)
      stopAxis2((current.pierSide == PIER_SIDE_EAST) ? GA_FORWARD : GA_REVERSE);
   11576:	bf0c      	ite	eq
   11578:	2102      	moveq	r1, #2
   1157a:	2103      	movne	r1, #3
   1157c:	9120      	str	r1, [sp, #128]	; 0x80
    goTo.abort();
   1157e:	f7fb fc17 	bl	cdb0 <Goto::abort()>
  guide.stopAxis2(stopDirection, true);
   11582:	9920      	ldr	r1, [sp, #128]	; 0x80
   11584:	2201      	movs	r2, #1
   11586:	4831      	ldr	r0, [pc, #196]	; (1164c <Limits::poll()+0x5d4>)
   11588:	f7fd f802 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
   1158c:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (!transform.isEquatorial()) mount.tracking(false);
   11590:	3b01      	subs	r3, #1
   11592:	2b01      	cmp	r3, #1
   11594:	d903      	bls.n	1159e <Limits::poll()+0x526>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11596:	2100      	movs	r1, #0
   11598:	482b      	ldr	r0, [pc, #172]	; (11648 <Limits::poll()+0x5d0>)
   1159a:	f7f7 fa8d 	bl	8ab8 <Mount::tracking(bool)>
      error.limit.axis2.max = true;
   1159e:	2301      	movs	r3, #1
   115a0:	75a3      	strb	r3, [r4, #22]
   115a2:	e5b1      	b.n	11108 <Limits::poll()+0x90>
    } else error.limit.axis1.max = false;
   115a4:	2300      	movs	r3, #0
   115a6:	7523      	strb	r3, [r4, #20]
   115a8:	e795      	b.n	114d6 <Limits::poll()+0x45e>
    goTo.abort();
   115aa:	4826      	ldr	r0, [pc, #152]	; (11644 <Limits::poll()+0x5cc>)
   115ac:	f7fb fc00 	bl	cdb0 <Goto::abort()>
  guide.stopAxis2(stopDirection, true);
   115b0:	4631      	mov	r1, r6
   115b2:	2201      	movs	r2, #1
   115b4:	4825      	ldr	r0, [pc, #148]	; (1164c <Limits::poll()+0x5d4>)
   115b6:	f7fc ffeb 	bl	e590 <Guide::stopAxis2(GuideAction, bool)>
   115ba:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (!transform.isEquatorial()) mount.tracking(false);
   115be:	3b01      	subs	r3, #1
   115c0:	2b01      	cmp	r3, #1
   115c2:	f67f ae4a 	bls.w	1125a <Limits::poll()+0x1e2>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   115c6:	2100      	movs	r1, #0
   115c8:	481f      	ldr	r0, [pc, #124]	; (11648 <Limits::poll()+0x5d0>)
   115ca:	f7f7 fa75 	bl	8ab8 <Mount::tracking(bool)>
}
   115ce:	e644      	b.n	1125a <Limits::poll()+0x1e2>
    } else error.limit.axis2.max = false;
   115d0:	2300      	movs	r3, #0
   115d2:	75a3      	strb	r3, [r4, #22]
   115d4:	e598      	b.n	11108 <Limits::poll()+0x90>
   115d6:	2300      	movs	r3, #0
   115d8:	e7bb      	b.n	11552 <Limits::poll()+0x4da>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   115da:	481d      	ldr	r0, [pc, #116]	; (11650 <Limits::poll()+0x5d8>)
   115dc:	f7ef fda6 	bl	112c <Axis::getInstrumentCoordinate()>
   115e0:	2200      	movs	r2, #0
   115e2:	4917      	ldr	r1, [pc, #92]	; (11640 <Limits::poll()+0x5c8>)
   115e4:	a84e      	add	r0, sp, #312	; 0x138
   115e6:	eeb0 8b40 	vmov.f64	d8, d0
   115ea:	f7fd fedd 	bl	f3a8 <Home::getPosition(CoordReturn)>
   115ee:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
   115f2:	ee38 8b47 	vsub.f64	d8, d8, d7
   115f6:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   115fa:	eeb4 8bca 	vcmpe.f64	d8, d10
   115fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11602:	f63f af7f 	bhi.w	11504 <Limits::poll()+0x48c>
    if (mount.isHome()) current.a2 = home.getPosition(CR_MOUNT).a2;
   11606:	a84e      	add	r0, sp, #312	; 0x138
   11608:	2200      	movs	r2, #0
   1160a:	490d      	ldr	r1, [pc, #52]	; (11640 <Limits::poll()+0x5c8>)
   1160c:	f7fd fecc 	bl	f3a8 <Home::getPosition(CoordReturn)>
   11610:	ed9d 9b60 	vldr	d9, [sp, #384]	; 0x180
   11614:	e776      	b.n	11504 <Limits::poll()+0x48c>
   11616:	bf00      	nop
   11618:	54442d15 	.word	0x54442d15
   1161c:	3ff921fb 	.word	0x3ff921fb
   11620:	b2fdd7d8 	.word	0xb2fdd7d8
   11624:	3ed455a5 	.word	0x3ed455a5
   11628:	71ef8766 	.word	0x71ef8766
   1162c:	3e9787ad 	.word	0x3e9787ad
   11630:	a0000000 	.word	0xa0000000
   11634:	3ea0c6f7 	.word	0x3ea0c6f7
   11638:	200064ac 	.word	0x200064ac
   1163c:	200050e8 	.word	0x200050e8
   11640:	20005478 	.word	0x20005478
   11644:	20005270 	.word	0x20005270
   11648:	200054e0 	.word	0x200054e0
   1164c:	200043e8 	.word	0x200043e8
   11650:	200051a8 	.word	0x200051a8
    goTo.abort();
   11654:	4854      	ldr	r0, [pc, #336]	; (117a8 <Limits::poll()+0x730>)
   11656:	f7fb fbab 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(stopDirection, true);
   1165a:	2201      	movs	r2, #1
   1165c:	2103      	movs	r1, #3
   1165e:	4853      	ldr	r0, [pc, #332]	; (117ac <Limits::poll()+0x734>)
   11660:	f7fc ff68 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
   11664:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11668:	3b01      	subs	r3, #1
   1166a:	2b01      	cmp	r3, #1
   1166c:	d903      	bls.n	11676 <Limits::poll()+0x5fe>
   1166e:	2100      	movs	r1, #0
   11670:	484f      	ldr	r0, [pc, #316]	; (117b0 <Limits::poll()+0x738>)
   11672:	f7f7 fa21 	bl	8ab8 <Mount::tracking(bool)>
      if (lastError.limit.axis1.min != error.limit.axis1.min) {
   11676:	2301      	movs	r3, #1
   11678:	e6b5      	b.n	113e6 <Limits::poll()+0x36e>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   1167a:	484e      	ldr	r0, [pc, #312]	; (117b4 <Limits::poll()+0x73c>)
   1167c:	f7ef fd56 	bl	112c <Axis::getInstrumentCoordinate()>
   11680:	2200      	movs	r2, #0
   11682:	494d      	ldr	r1, [pc, #308]	; (117b8 <Limits::poll()+0x740>)
   11684:	a84e      	add	r0, sp, #312	; 0x138
   11686:	eeb0 8b40 	vmov.f64	d8, d0
   1168a:	f7fd fe8d 	bl	f3a8 <Home::getPosition(CoordReturn)>
   1168e:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
   11692:	ee38 8b47 	vsub.f64	d8, d8, d7
   11696:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   1169a:	eeb4 8bca 	vcmpe.f64	d8, d10
   1169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116a2:	f63f ae8d 	bhi.w	113c0 <Limits::poll()+0x348>
    if (mount.isHome()) current.a1 = home.getPosition(CR_MOUNT).a1;
   116a6:	a84e      	add	r0, sp, #312	; 0x138
   116a8:	2200      	movs	r2, #0
   116aa:	4943      	ldr	r1, [pc, #268]	; (117b8 <Limits::poll()+0x740>)
   116ac:	f7fd fe7c 	bl	f3a8 <Home::getPosition(CoordReturn)>
   116b0:	ed9d bb5c 	vldr	d11, [sp, #368]	; 0x170
   116b4:	e684      	b.n	113c0 <Limits::poll()+0x348>
      if (current.h > settings.pastMeridianW && autoFlipDelayCycles == 0) {
   116b6:	68e3      	ldr	r3, [r4, #12]
   116b8:	ee07 3a10 	vmov	s14, r3
   116bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   116c0:	eeb4 7bc5 	vcmpe.f64	d7, d5
   116c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116c8:	d536      	bpl.n	11738 <Limits::poll()+0x6c0>
   116ca:	6833      	ldr	r3, [r6, #0]
   116cc:	bba3      	cbnz	r3, 11738 <Limits::poll()+0x6c0>
   116ce:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 117a8 <Limits::poll()+0x730>
   116d2:	f898 2200 	ldrb.w	r2, [r8, #512]	; 0x200
   116d6:	07d1      	lsls	r1, r2, #31
   116d8:	d508      	bpl.n	116ec <Limits::poll()+0x674>
   116da:	f895 25c5 	ldrb.w	r2, [r5, #1477]	; 0x5c5
   116de:	b12a      	cbz	r2, 116ec <Limits::poll()+0x674>
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   116e0:	4933      	ldr	r1, [pc, #204]	; (117b0 <Limits::poll()+0x738>)
          if (goTo.isAutoFlipEnabled() && mount.isTracking()) {
   116e2:	f891 2080 	ldrb.w	r2, [r1, #128]	; 0x80
   116e6:	2a01      	cmp	r2, #1
   116e8:	9220      	str	r2, [sp, #128]	; 0x80
   116ea:	d03b      	beq.n	11764 <Limits::poll()+0x6ec>
    goTo.abort();
   116ec:	482e      	ldr	r0, [pc, #184]	; (117a8 <Limits::poll()+0x730>)
   116ee:	f7fb fb5f 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(stopDirection, true);
   116f2:	2201      	movs	r2, #1
   116f4:	2102      	movs	r1, #2
   116f6:	482d      	ldr	r0, [pc, #180]	; (117ac <Limits::poll()+0x734>)
   116f8:	f7fc ff1c 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   116fc:	2100      	movs	r1, #0
   116fe:	482c      	ldr	r0, [pc, #176]	; (117b0 <Limits::poll()+0x738>)
   11700:	f7f7 f9da 	bl	8ab8 <Mount::tracking(bool)>
          error.meridian.west = true;
   11704:	2301      	movs	r3, #1
   11706:	7723      	strb	r3, [r4, #28]
    if (transform.mountType != GEM && current.pierSide == PIER_SIDE_WEST) current.a1 += Deg180;
   11708:	f995 35c4 	ldrsb.w	r3, [r5, #1476]	; 0x5c4
   1170c:	2b01      	cmp	r3, #1
   1170e:	f43f ae3f 	beq.w	11390 <Limits::poll()+0x318>
   11712:	ed9f 7b23 	vldr	d7, [pc, #140]	; 117a0 <Limits::poll()+0x728>
   11716:	ee3b bb07 	vadd.f64	d11, d11, d7
   1171a:	e639      	b.n	11390 <Limits::poll()+0x318>
      if (current.h < -settings.pastMeridianE) {
   1171c:	68a3      	ldr	r3, [r4, #8]
   1171e:	ee07 3a90 	vmov	s15, r3
   11722:	eeb1 7a67 	vneg.f32	s14, s15
   11726:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   1172a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11732:	dc04      	bgt.n	1173e <Limits::poll()+0x6c6>
   11734:	2300      	movs	r3, #0
        error.meridian.east = true;
   11736:	76e3      	strb	r3, [r4, #27]
    } else error.meridian.west = false;
   11738:	2300      	movs	r3, #0
   1173a:	7723      	strb	r3, [r4, #28]
    if (transform.mountType != GEM && current.pierSide == PIER_SIDE_WEST) current.a1 += Deg180;
   1173c:	e628      	b.n	11390 <Limits::poll()+0x318>
    goTo.abort();
   1173e:	481a      	ldr	r0, [pc, #104]	; (117a8 <Limits::poll()+0x730>)
   11740:	f7fb fb36 	bl	cdb0 <Goto::abort()>
  guide.stopAxis1(stopDirection, true);
   11744:	2201      	movs	r2, #1
   11746:	2103      	movs	r1, #3
   11748:	4818      	ldr	r0, [pc, #96]	; (117ac <Limits::poll()+0x734>)
   1174a:	f7fc fef3 	bl	e534 <Guide::stopAxis1(GuideAction, bool)>
   1174e:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
  if (stopDirection == GA_FORWARD || !transform.isEquatorial()) mount.tracking(false);
   11752:	3b01      	subs	r3, #1
   11754:	2b01      	cmp	r3, #1
   11756:	d903      	bls.n	11760 <Limits::poll()+0x6e8>
   11758:	2100      	movs	r1, #0
   1175a:	4815      	ldr	r0, [pc, #84]	; (117b0 <Limits::poll()+0x738>)
   1175c:	f7f7 f9ac 	bl	8ab8 <Mount::tracking(bool)>
        error.meridian.east = true;
   11760:	2301      	movs	r3, #1
   11762:	e7e8      	b.n	11736 <Limits::poll()+0x6be>
            autoFlipDelayCycles = 10;
   11764:	220a      	movs	r2, #10
            Coordinate target = mount.getMountPosition();
   11766:	a84e      	add	r0, sp, #312	; 0x138
   11768:	9321      	str	r3, [sp, #132]	; 0x84
            autoFlipDelayCycles = 10;
   1176a:	6032      	str	r2, [r6, #0]
            Coordinate target = mount.getMountPosition();
   1176c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1176e:	f7f7 fbbd 	bl	8eec <Mount::getMountPosition(CoordReturn)>
            CommandError e = goTo.request(target, PSS_EAST_ONLY, false);
   11772:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11774:	2250      	movs	r2, #80	; 0x50
   11776:	a950      	add	r1, sp, #320	; 0x140
   11778:	9315      	str	r3, [sp, #84]	; 0x54
   1177a:	2304      	movs	r3, #4
   1177c:	4668      	mov	r0, sp
   1177e:	9314      	str	r3, [sp, #80]	; 0x50
   11780:	f006 fea4 	bl	184cc <memcpy>
   11784:	ab4e      	add	r3, sp, #312	; 0x138
   11786:	4640      	mov	r0, r8
   11788:	cb0c      	ldmia	r3, {r2, r3}
   1178a:	f7fb ff89 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
            if (e != CE_NONE) {
   1178e:	2800      	cmp	r0, #0
   11790:	d0ba      	beq.n	11708 <Limits::poll()+0x690>
              stopAxis1(GA_FORWARD);
   11792:	2102      	movs	r1, #2
   11794:	4620      	mov	r0, r4
   11796:	f7ff fc4d 	bl	11034 <Limits::stopAxis1(GuideAction)>
              error.meridian.west = true;
   1179a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1179c:	7723      	strb	r3, [r4, #28]
              DF("WRN: Limits::limitPoll(), goto for automatic meridian flip failed ("); D(e); DL(")");
   1179e:	e7b3      	b.n	11708 <Limits::poll()+0x690>
   117a0:	54442d18 	.word	0x54442d18
   117a4:	400921fb 	.word	0x400921fb
   117a8:	20005270 	.word	0x20005270
   117ac:	200043e8 	.word	0x200043e8
   117b0:	200054e0 	.word	0x200054e0
   117b4:	200051a8 	.word	0x200051a8
   117b8:	20005478 	.word	0x20005478

000117bc <limitsWrapper()>:
inline void limitsWrapper() { limits.poll(); }
   117bc:	4801      	ldr	r0, [pc, #4]	; (117c4 <limitsWrapper()+0x8>)
   117be:	f7ff bc5b 	b.w	11078 <Limits::poll()>
   117c2:	bf00      	nop
   117c4:	20005cf4 	.word	0x20005cf4

000117c8 <_GLOBAL__sub_I__ZN6Limits4initEv>:
class Limits {
   117c8:	4b05      	ldr	r3, [pc, #20]	; (117e0 <_GLOBAL__sub_I__ZN6Limits4initEv+0x18>)

Limits limits;
   117ca:	b410      	push	{r4}
   117cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   117ce:	4c05      	ldr	r4, [pc, #20]	; (117e4 <_GLOBAL__sub_I__ZN6Limits4initEv+0x1c>)
   117d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   117d4:	2300      	movs	r3, #0
   117d6:	7423      	strb	r3, [r4, #16]
   117d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   117dc:	4770      	bx	lr
   117de:	bf00      	nop
   117e0:	20001e40 	.word	0x20001e40
   117e4:	20005cf4 	.word	0x20005cf4

000117e8 <Park::command(char*, char*, char*, bool*, bool*, CommandError*)>:

bool Park::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
  UNUSED(reply);
  UNUSED(supressFrame);
  UNUSED(numericReply);
  if (command[0] == 'h') {
   117e8:	7811      	ldrb	r1, [r2, #0]
   117ea:	2968      	cmp	r1, #104	; 0x68
   117ec:	d113      	bne.n	11816 <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e>
bool Park::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   117ee:	b508      	push	{r3, lr}
    // :hP#       Moves mount to the park position
    //            Return: 0 on failure
    //                    1 on success
    if (command[1] == 'P' && parameter[0] == 0) {
   117f0:	7852      	ldrb	r2, [r2, #1]
   117f2:	2a50      	cmp	r2, #80	; 0x50
   117f4:	d011      	beq.n	1181a <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x32>
    } else 

    // :hQ#       Set the mount park position
    //            Return: 0 on failure
    //                    1 on success
    if (command[1] == 'Q' && parameter[0] == 0) *commandError = set(); else 
   117f6:	2a51      	cmp	r2, #81	; 0x51
   117f8:	d013      	beq.n	11822 <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a>

    // :hR#       Restore parked mount to operation
    //            Return: 0 on failure
    //                    1 on success
    if (command[1] == 'R' && parameter[0] == 0) {
   117fa:	2a52      	cmp	r2, #82	; 0x52
   117fc:	d10f      	bne.n	1181e <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36>
   117fe:	781b      	ldrb	r3, [r3, #0]
   11800:	b96b      	cbnz	r3, 1181e <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36>
      CommandError e = restore(true);
   11802:	2101      	movs	r1, #1
   11804:	f000 f9f8 	bl	11bf8 <Park::restore(bool)>
      if (e == CE_NONE) *commandError = CE_1; else { VF("MSG: Mount, unpark error "); VL(e); *commandError = e; }
   11808:	4603      	mov	r3, r0
   1180a:	b9c8      	cbnz	r0, 11840 <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      if (e == CE_NONE) *commandError = CE_1; else { VF("MSG: Mount, park error "); VL(e); *commandError = e; } 
   1180c:	2319      	movs	r3, #25
   1180e:	9a04      	ldr	r2, [sp, #16]
    } else return false;
  } else return false;

  return true;
   11810:	2001      	movs	r0, #1
      if (e == CE_NONE) *commandError = CE_1; else { VF("MSG: Mount, park error "); VL(e); *commandError = e; } 
   11812:	7013      	strb	r3, [r2, #0]
}
   11814:	bd08      	pop	{r3, pc}
  } else return false;
   11816:	2000      	movs	r0, #0
}
   11818:	4770      	bx	lr
    if (command[1] == 'P' && parameter[0] == 0) {
   1181a:	781b      	ldrb	r3, [r3, #0]
   1181c:	b15b      	cbz	r3, 11836 <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
  } else return false;
   1181e:	2000      	movs	r0, #0
}
   11820:	bd08      	pop	{r3, pc}
    if (command[1] == 'Q' && parameter[0] == 0) *commandError = set(); else 
   11822:	781b      	ldrb	r3, [r3, #0]
   11824:	2b00      	cmp	r3, #0
   11826:	d1fa      	bne.n	1181e <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36>
   11828:	f000 f80e 	bl	11848 <Park::set()>
   1182c:	9a04      	ldr	r2, [sp, #16]
   1182e:	4603      	mov	r3, r0
  return true;
   11830:	2001      	movs	r0, #1
    if (command[1] == 'Q' && parameter[0] == 0) *commandError = set(); else 
   11832:	7013      	strb	r3, [r2, #0]
}
   11834:	bd08      	pop	{r3, pc}
      CommandError e = request();
   11836:	f000 f8b5 	bl	119a4 <Park::request()>
      if (e == CE_NONE) *commandError = CE_1; else { VF("MSG: Mount, park error "); VL(e); *commandError = e; } 
   1183a:	4603      	mov	r3, r0
   1183c:	2800      	cmp	r0, #0
   1183e:	d0e5      	beq.n	1180c <Park::command(char*, char*, char*, bool*, bool*, CommandError*)+0x24>
      if (e == CE_NONE) *commandError = CE_1; else { VF("MSG: Mount, unpark error "); VL(e); *commandError = e; }
   11840:	9a04      	ldr	r2, [sp, #16]
  return true;
   11842:	2001      	movs	r0, #1
      if (e == CE_NONE) *commandError = CE_1; else { VF("MSG: Mount, unpark error "); VL(e); *commandError = e; }
   11844:	7013      	strb	r3, [r2, #0]
}
   11846:	bd08      	pop	{r3, pc}

00011848 <Park::set()>:
  #endif
}

// sets the park position
CommandError Park::set() {
  if (state == PS_PARK_FAILED) return CE_PARK_FAILED;
   11848:	7803      	ldrb	r3, [r0, #0]
   1184a:	2b03      	cmp	r3, #3
CommandError Park::set() {
   1184c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1184e:	b097      	sub	sp, #92	; 0x5c
  if (state == PS_PARK_FAILED) return CE_PARK_FAILED;
   11850:	d067      	beq.n	11922 <Park::set()+0xda>
  if (state == PS_PARKED)      return CE_PARKED;
   11852:	2b02      	cmp	r3, #2
   11854:	d069      	beq.n	1192a <Park::set()+0xe2>
  if (goTo.state != GS_NONE)   return CE_SLEW_IN_MOTION;
   11856:	4a38      	ldr	r2, [pc, #224]	; (11938 <Park::set()+0xf0>)
  if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
   11858:	4b38      	ldr	r3, [pc, #224]	; (1193c <Park::set()+0xf4>)
   1185a:	7815      	ldrb	r5, [r2, #0]
   1185c:	781b      	ldrb	r3, [r3, #0]
   1185e:	431d      	orrs	r5, r3
   11860:	d10d      	bne.n	1187e <Park::set()+0x36>
   11862:	4b37      	ldr	r3, [pc, #220]	; (11940 <Park::set()+0xf8>)
   11864:	4604      	mov	r4, r0
   11866:	4668      	mov	r0, sp
   11868:	6819      	ldr	r1, [r3, #0]
   1186a:	680b      	ldr	r3, [r1, #0]
   1186c:	699b      	ldr	r3, [r3, #24]
   1186e:	4798      	blx	r3
   11870:	f89d 3008 	ldrb.w	r3, [sp, #8]
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
   11874:	b13b      	cbz	r3, 11886 <Park::set()+0x3e>
  if (mount.motorFault())      return CE_SLEW_ERR_HARDWARE_FAULT;
   11876:	2515      	movs	r5, #21

  mount.tracking(wasTracking);
  
  VLF("MSG: Mount, setting park done");
  return CE_NONE;
}
   11878:	4628      	mov	r0, r5
   1187a:	b017      	add	sp, #92	; 0x5c
   1187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
   1187e:	2516      	movs	r5, #22
}
   11880:	4628      	mov	r0, r5
   11882:	b017      	add	sp, #92	; 0x5c
   11884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11886:	4b2f      	ldr	r3, [pc, #188]	; (11944 <Park::set()+0xfc>)
   11888:	4668      	mov	r0, sp
   1188a:	6819      	ldr	r1, [r3, #0]
   1188c:	680b      	ldr	r3, [r1, #0]
   1188e:	699b      	ldr	r3, [r3, #24]
   11890:	4798      	blx	r3
   11892:	f89d 3008 	ldrb.w	r3, [sp, #8]
   11896:	2b00      	cmp	r3, #0
   11898:	d1ed      	bne.n	11876 <Park::set()+0x2e>
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   1189a:	4f2b      	ldr	r7, [pc, #172]	; (11948 <Park::set()+0x100>)
  mount.tracking(false);
   1189c:	4629      	mov	r1, r5
   1189e:	4638      	mov	r0, r7
   118a0:	f897 6080 	ldrb.w	r6, [r7, #128]	; 0x80
   118a4:	f7f7 f908 	bl	8ab8 <Mount::tracking(bool)>
  Coordinate current = mount.getPosition(CR_MOUNT_EQU);
   118a8:	2201      	movs	r2, #1
   118aa:	4639      	mov	r1, r7
   118ac:	4668      	mov	r0, sp
   118ae:	f7f7 fb0b 	bl	8ec8 <Mount::getPosition(CoordReturn)>
   118b2:	f1a6 0601 	sub.w	r6, r6, #1
  settings.state = state;
   118b6:	7822      	ldrb	r2, [r4, #0]
   118b8:	fab6 f686 	clz	r6, r6
   118bc:	72e2      	strb	r2, [r4, #11]
   118be:	0976      	lsrs	r6, r6, #5
  Coordinate current = mount.getPosition(CR_MOUNT_EQU);
   118c0:	ed9d 6b02 	vldr	d6, [sp, #8]
  settings.position.d = current.d;
   118c4:	ed9d 7b04 	vldr	d7, [sp, #16]
  settings.position.h = current.h;
   118c8:	eef7 5bc6 	vcvt.f32.f64	s11, d6
  settings.position.d = current.d;
   118cc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  settings.position.h = current.h;
   118d0:	ee15 3a90 	vmov	r3, s11
  settings.position.d = current.d;
   118d4:	ee17 2a10 	vmov	r2, s14
  settings.position.h = current.h;
   118d8:	f8c4 3001 	str.w	r3, [r4, #1]
  settings.position.pierSide = current.pierSide;
   118dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  settings.position.d = current.d;
   118e0:	f8c4 2005 	str.w	r2, [r4, #5]
  settings.position.pierSide = current.pierSide;
   118e4:	7263      	strb	r3, [r4, #9]
  if (settings.position.pierSide == PIER_SIDE_NONE) {
   118e6:	b953      	cbnz	r3, 118fe <Park::set()+0xb6>
    if (transform.meridianFlips) {
   118e8:	4b18      	ldr	r3, [pc, #96]	; (1194c <Park::set()+0x104>)
   118ea:	f893 35c5 	ldrb.w	r3, [r3, #1477]	; 0x5c5
   118ee:	b123      	cbz	r3, 118fa <Park::set()+0xb2>
      if (current.h < 0) settings.position.pierSide = PIER_SIDE_WEST; else settings.position.pierSide = PIER_SIDE_EAST;
   118f0:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
   118f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   118f8:	d41b      	bmi.n	11932 <Park::set()+0xea>
   118fa:	2301      	movs	r3, #1
   118fc:	7263      	strb	r3, [r4, #9]
  settings.saved = true;
   118fe:	2201      	movs	r2, #1
  nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11900:	230f      	movs	r3, #15
   11902:	21e3      	movs	r1, #227	; 0xe3
   11904:	4812      	ldr	r0, [pc, #72]	; (11950 <Park::set()+0x108>)
  settings.saved = true;
   11906:	72a2      	strb	r2, [r4, #10]
  nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11908:	18a2      	adds	r2, r4, r2
   1190a:	f7f3 fbaf 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    transform.align.modelWrite();
   1190e:	480f      	ldr	r0, [pc, #60]	; (1194c <Park::set()+0x104>)
   11910:	f7f7 ffbc 	bl	988c <GeoAlign::modelWrite()>
  mount.tracking(wasTracking);
   11914:	4631      	mov	r1, r6
   11916:	480c      	ldr	r0, [pc, #48]	; (11948 <Park::set()+0x100>)
   11918:	f7f7 f8ce 	bl	8ab8 <Mount::tracking(bool)>
}
   1191c:	4628      	mov	r0, r5
   1191e:	b017      	add	sp, #92	; 0x5c
   11920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (state == PS_PARK_FAILED) return CE_PARK_FAILED;
   11922:	250a      	movs	r5, #10
}
   11924:	4628      	mov	r0, r5
   11926:	b017      	add	sp, #92	; 0x5c
   11928:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (state == PS_PARKED)      return CE_PARKED;
   1192a:	2509      	movs	r5, #9
}
   1192c:	4628      	mov	r0, r5
   1192e:	b017      	add	sp, #92	; 0x5c
   11930:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (current.h < 0) settings.position.pierSide = PIER_SIDE_WEST; else settings.position.pierSide = PIER_SIDE_EAST;
   11932:	2302      	movs	r3, #2
   11934:	7263      	strb	r3, [r4, #9]
   11936:	e7e2      	b.n	118fe <Park::set()+0xb6>
   11938:	20005270 	.word	0x20005270
   1193c:	200043e8 	.word	0x200043e8
   11940:	200050e8 	.word	0x200050e8
   11944:	200051a8 	.word	0x200051a8
   11948:	200054e0 	.word	0x200054e0
   1194c:	200064ac 	.word	0x200064ac
   11950:	20005e50 	.word	0x20005e50

00011954 <Park::init()>:
    inline bool hasValidKey() { return keyMatches; }
   11954:	4b12      	ldr	r3, [pc, #72]	; (119a0 <Park::init()+0x4c>)
  if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_PARK_BASE, sizeof(ParkSettings))) {
   11956:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
void Park::init() {
   1195a:	b510      	push	{r4, lr}
   1195c:	4604      	mov	r4, r0
   1195e:	b082      	sub	sp, #8
  if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_PARK_BASE, sizeof(ParkSettings))) {
   11960:	b12a      	cbz	r2, 1196e <Park::init()+0x1a>
   11962:	220f      	movs	r2, #15
   11964:	21e3      	movs	r1, #227	; 0xe3
   11966:	4618      	mov	r0, r3
   11968:	f7f3 fb3c 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
   1196c:	b1a8      	cbz	r0, 1199a <Park::init()+0x46>
    nv.writeBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   1196e:	1c62      	adds	r2, r4, #1
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
   11970:	230f      	movs	r3, #15
   11972:	21e3      	movs	r1, #227	; 0xe3
   11974:	480a      	ldr	r0, [pc, #40]	; (119a0 <Park::init()+0x4c>)
   11976:	9201      	str	r2, [sp, #4]
   11978:	f7f3 fb78 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    state = settings.state;
   1197c:	7ae3      	ldrb	r3, [r4, #11]
    set();
   1197e:	4620      	mov	r0, r4
    state = settings.state;
   11980:	7023      	strb	r3, [r4, #0]
    set();
   11982:	f7ff ff61 	bl	11848 <Park::set()>
   11986:	9a01      	ldr	r2, [sp, #4]
  nv.readBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11988:	230f      	movs	r3, #15
   1198a:	21e3      	movs	r1, #227	; 0xe3
   1198c:	4804      	ldr	r0, [pc, #16]	; (119a0 <Park::init()+0x4c>)
   1198e:	f7f3 fb43 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  state = settings.state;
   11992:	7ae3      	ldrb	r3, [r4, #11]
   11994:	7023      	strb	r3, [r4, #0]
}
   11996:	b002      	add	sp, #8
   11998:	bd10      	pop	{r4, pc}
    nv.writeBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   1199a:	1c62      	adds	r2, r4, #1
   1199c:	e7f4      	b.n	11988 <Park::init()+0x34>
   1199e:	bf00      	nop
   119a0:	20005e50 	.word	0x20005e50

000119a4 <Park::request()>:

// move the mount to the park position
CommandError Park::request() {
    if (!settings.saved)         return CE_NO_PARK_POSITION_SET;
   119a4:	7a83      	ldrb	r3, [r0, #10]
CommandError Park::request() {
   119a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119aa:	b0ad      	sub	sp, #180	; 0xb4
    if (!settings.saved)         return CE_NO_PARK_POSITION_SET;
   119ac:	b373      	cbz	r3, 11a0c <Park::request()+0x68>
    if (state == PS_PARKED)      return CE_NONE;
   119ae:	7803      	ldrb	r3, [r0, #0]
   119b0:	4604      	mov	r4, r0
   119b2:	2b02      	cmp	r3, #2
   119b4:	d02f      	beq.n	11a16 <Park::request()+0x72>
    if (state == PS_PARKING)     return CE_PARK_FAILED;
    if (state == PS_PARK_FAILED) return CE_PARK_FAILED;
   119b6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   119ba:	2b01      	cmp	r3, #1
   119bc:	d030      	beq.n	11a20 <Park::request()+0x7c>
    inline bool isEnabled() { return enabled && !motor->calibrating; }
   119be:	4b62      	ldr	r3, [pc, #392]	; (11b48 <Park::request()+0x1a4>)
   119c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
   119c4:	b1ea      	cbz	r2, 11a02 <Park::request()+0x5e>
   119c6:	6819      	ldr	r1, [r3, #0]
   119c8:	7acb      	ldrb	r3, [r1, #11]
   119ca:	b9d3      	cbnz	r3, 11a02 <Park::request()+0x5e>
   119cc:	4d5f      	ldr	r5, [pc, #380]	; (11b4c <Park::request()+0x1a8>)
   119ce:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   119d2:	b1b3      	cbz	r3, 11a02 <Park::request()+0x5e>
   119d4:	682b      	ldr	r3, [r5, #0]
   119d6:	7adb      	ldrb	r3, [r3, #11]
   119d8:	b99b      	cbnz	r3, 11a02 <Park::request()+0x5e>
    if (!mount.isEnabled())      return CE_SLEW_ERR_IN_STANDBY;
    if (goTo.state != GS_NONE)   return CE_SLEW_IN_MOTION;
    if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
   119da:	4b5d      	ldr	r3, [pc, #372]	; (11b50 <Park::request()+0x1ac>)
    if (goTo.state != GS_NONE)   return CE_SLEW_IN_MOTION;
   119dc:	4e5d      	ldr	r6, [pc, #372]	; (11b54 <Park::request()+0x1b0>)
    if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
   119de:	781a      	ldrb	r2, [r3, #0]
   119e0:	7833      	ldrb	r3, [r6, #0]
   119e2:	4313      	orrs	r3, r2
   119e4:	d121      	bne.n	11a2a <Park::request()+0x86>
    inline bool motorFault() { return motor->getDriverStatus().fault; };
   119e6:	680b      	ldr	r3, [r1, #0]
   119e8:	f10d 0858 	add.w	r8, sp, #88	; 0x58
   119ec:	699b      	ldr	r3, [r3, #24]
   119ee:	4640      	mov	r0, r8
   119f0:	4798      	blx	r3
   119f2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
   119f6:	b1eb      	cbz	r3, 11a34 <Park::request()+0x90>
    if (mount.motorFault())      return CE_SLEW_ERR_HARDWARE_FAULT;
   119f8:	2515      	movs	r5, #21

      VF(": Mount::parkGoto(), Failed to start goto (CE "); V(e); VL(")");
      return e;
    }
  return CE_NONE;
}
   119fa:	4628      	mov	r0, r5
   119fc:	b02d      	add	sp, #180	; 0xb4
   119fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!mount.isEnabled())      return CE_SLEW_ERR_IN_STANDBY;
   11a02:	2511      	movs	r5, #17
}
   11a04:	4628      	mov	r0, r5
   11a06:	b02d      	add	sp, #180	; 0xb4
   11a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!settings.saved)         return CE_NO_PARK_POSITION_SET;
   11a0c:	250c      	movs	r5, #12
}
   11a0e:	4628      	mov	r0, r5
   11a10:	b02d      	add	sp, #180	; 0xb4
   11a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state == PS_PARKED)      return CE_NONE;
   11a16:	2500      	movs	r5, #0
}
   11a18:	4628      	mov	r0, r5
   11a1a:	b02d      	add	sp, #180	; 0xb4
   11a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state == PS_PARK_FAILED) return CE_PARK_FAILED;
   11a20:	250a      	movs	r5, #10
}
   11a22:	4628      	mov	r0, r5
   11a24:	b02d      	add	sp, #180	; 0xb4
   11a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (guide.state != GU_NONE)  return CE_SLEW_IN_MOTION;
   11a2a:	2516      	movs	r5, #22
}
   11a2c:	4628      	mov	r0, r5
   11a2e:	b02d      	add	sp, #180	; 0xb4
   11a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11a34:	6829      	ldr	r1, [r5, #0]
   11a36:	4640      	mov	r0, r8
   11a38:	680b      	ldr	r3, [r1, #0]
   11a3a:	699b      	ldr	r3, [r3, #24]
   11a3c:	4798      	blx	r3
   11a3e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   11a42:	2b00      	cmp	r3, #0
   11a44:	d1d8      	bne.n	119f8 <Park::request()+0x54>
    CommandError e = goTo.validate();
   11a46:	4843      	ldr	r0, [pc, #268]	; (11b54 <Park::request()+0x1b0>)
   11a48:	f7fb f9bc 	bl	cdc4 <Goto::validate()>
   11a4c:	4607      	mov	r7, r0
   11a4e:	4605      	mov	r5, r0
    if (e != CE_NONE) return e;
   11a50:	2800      	cmp	r0, #0
   11a52:	d1d7      	bne.n	11a04 <Park::request()+0x60>
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   11a54:	4840      	ldr	r0, [pc, #256]	; (11b58 <Park::request()+0x1b4>)
    mount.tracking(false);
   11a56:	4639      	mov	r1, r7
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11a58:	f104 0901 	add.w	r9, r4, #1
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11a5c:	4d3f      	ldr	r5, [pc, #252]	; (11b5c <Park::request()+0x1b8>)
   11a5e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
   11a62:	f1a3 0301 	sub.w	r3, r3, #1
   11a66:	fab3 f383 	clz	r3, r3
   11a6a:	095b      	lsrs	r3, r3, #5
   11a6c:	74a3      	strb	r3, [r4, #18]
    mount.tracking(false);
   11a6e:	f7f7 f823 	bl	8ab8 <Mount::tracking(bool)>
    mount.enable(true);
   11a72:	4839      	ldr	r0, [pc, #228]	; (11b58 <Park::request()+0x1b4>)
   11a74:	2101      	movs	r1, #1
   11a76:	f7f7 f803 	bl	8a80 <Mount::enable(bool)>
    state = PS_PARKING;
   11a7a:	2301      	movs	r3, #1
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11a7c:	464a      	mov	r2, r9
   11a7e:	21e3      	movs	r1, #227	; 0xe3
    goTo.firstGoto = false;
   11a80:	7237      	strb	r7, [r6, #8]
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11a82:	4837      	ldr	r0, [pc, #220]	; (11b60 <Park::request()+0x1bc>)
    ParkState priorParkState = state;
   11a84:	7826      	ldrb	r6, [r4, #0]
    settings.state = state;
   11a86:	72e3      	strb	r3, [r4, #11]
    state = PS_PARKING;
   11a88:	7023      	strb	r3, [r4, #0]
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11a8a:	230f      	movs	r3, #15
   11a8c:	f7f3 faee 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    axis1.setBacklash(0.0L);
   11a90:	ed9f 0a34 	vldr	s0, [pc, #208]	; 11b64 <Park::request()+0x1c0>
   11a94:	482c      	ldr	r0, [pc, #176]	; (11b48 <Park::request()+0x1a4>)
   11a96:	f7ef fadf 	bl	1058 <Axis::setBacklash(float)>
    axis2.setBacklash(0.0L);
   11a9a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 11b64 <Park::request()+0x1c0>
   11a9e:	482b      	ldr	r0, [pc, #172]	; (11b4c <Park::request()+0x1a8>)
   11aa0:	f7ef fada 	bl	1058 <Axis::setBacklash(float)>
    parkTarget.h = settings.position.h;
   11aa4:	f8d4 3001 	ldr.w	r3, [r4, #1]
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11aa8:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
    parkTarget.h = settings.position.h;
   11aac:	ee07 3a10 	vmov	s14, r3
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11ab0:	2a03      	cmp	r2, #3
    parkTarget.h = settings.position.h;
   11ab2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   11ab6:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
    parkTarget.d = settings.position.d;
   11aba:	f8d4 3005 	ldr.w	r3, [r4, #5]
   11abe:	ee07 3a10 	vmov	s14, r3
    parkTarget.pierSide = settings.position.pierSide;
   11ac2:	7a63      	ldrb	r3, [r4, #9]
    parkTarget.d = settings.position.d;
   11ac4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    parkTarget.pierSide = settings.position.pierSide;
   11ac8:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
    parkTarget.d = settings.position.d;
   11acc:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11ad0:	d023      	beq.n	11b1a <Park::request()+0x176>
    if (transform.mountType == ALTALT) transform.equToAa(&parkTarget);
   11ad2:	2a04      	cmp	r2, #4
   11ad4:	d02c      	beq.n	11b30 <Park::request()+0x18c>
    if (parkTarget.pierSide == PIER_SIDE_EAST) e = goTo.request(parkTarget, PSS_EAST_ONLY, false); else
   11ad6:	2b01      	cmp	r3, #1
   11ad8:	d026      	beq.n	11b28 <Park::request()+0x184>
    if (parkTarget.pierSide == PIER_SIDE_WEST) e = goTo.request(parkTarget, PSS_WEST_ONLY, false);
   11ada:	2b02      	cmp	r3, #2
   11adc:	d19b      	bne.n	11a16 <Park::request()+0x72>
   11ade:	2300      	movs	r3, #0
   11ae0:	9315      	str	r3, [sp, #84]	; 0x54
   11ae2:	2305      	movs	r3, #5
   11ae4:	2250      	movs	r2, #80	; 0x50
   11ae6:	a918      	add	r1, sp, #96	; 0x60
   11ae8:	4668      	mov	r0, sp
   11aea:	9314      	str	r3, [sp, #80]	; 0x50
   11aec:	f006 fcee 	bl	184cc <memcpy>
   11af0:	4818      	ldr	r0, [pc, #96]	; (11b54 <Park::request()+0x1b0>)
   11af2:	e898 000c 	ldmia.w	r8, {r2, r3}
   11af6:	f7fb fdd3 	bl	d6a0 <Goto::request(Coordinate, PierSideSelect, bool)>
   11afa:	4605      	mov	r5, r0
    if (e != CE_NONE) {
   11afc:	2800      	cmp	r0, #0
   11afe:	d081      	beq.n	11a04 <Park::request()+0x60>
      mount.tracking(wasTracking);
   11b00:	7ca1      	ldrb	r1, [r4, #18]
   11b02:	4815      	ldr	r0, [pc, #84]	; (11b58 <Park::request()+0x1b4>)
   11b04:	f7f6 ffd8 	bl	8ab8 <Mount::tracking(bool)>
      nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11b08:	230f      	movs	r3, #15
   11b0a:	464a      	mov	r2, r9
   11b0c:	21e3      	movs	r1, #227	; 0xe3
   11b0e:	4814      	ldr	r0, [pc, #80]	; (11b60 <Park::request()+0x1bc>)
      state = priorParkState;
   11b10:	7026      	strb	r6, [r4, #0]
      settings.state = state;
   11b12:	72e6      	strb	r6, [r4, #11]
      nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11b14:	f7f3 faaa 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
      return e;
   11b18:	e774      	b.n	11a04 <Park::request()+0x60>
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11b1a:	4628      	mov	r0, r5
   11b1c:	4641      	mov	r1, r8
   11b1e:	f7f9 fc03 	bl	b328 <Transform::equToHor(Coordinate*)>
    if (parkTarget.pierSide == PIER_SIDE_EAST) e = goTo.request(parkTarget, PSS_EAST_ONLY, false); else
   11b22:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
   11b26:	e7d6      	b.n	11ad6 <Park::request()+0x132>
   11b28:	2300      	movs	r3, #0
   11b2a:	9315      	str	r3, [sp, #84]	; 0x54
   11b2c:	2304      	movs	r3, #4
   11b2e:	e7d9      	b.n	11ae4 <Park::request()+0x140>
    void equToAa(Coordinate *coord) { equToHor(coord); horToAa(coord); };
   11b30:	4641      	mov	r1, r8
   11b32:	4628      	mov	r0, r5
   11b34:	f7f9 fbf8 	bl	b328 <Transform::equToHor(Coordinate*)>
   11b38:	4641      	mov	r1, r8
   11b3a:	4628      	mov	r0, r5
   11b3c:	f7f9 fd80 	bl	b640 <Transform::horToAa(Coordinate*)>
   11b40:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
   11b44:	e7c7      	b.n	11ad6 <Park::request()+0x132>
   11b46:	bf00      	nop
   11b48:	200050e8 	.word	0x200050e8
   11b4c:	200051a8 	.word	0x200051a8
   11b50:	200043e8 	.word	0x200043e8
   11b54:	20005270 	.word	0x20005270
   11b58:	200054e0 	.word	0x200054e0
   11b5c:	200064ac 	.word	0x200064ac
   11b60:	20005e50 	.word	0x20005e50
   11b64:	00000000 	.word	0x00000000

00011b68 <Park::requestAborted()>:

// clear park state on abort
void Park::requestAborted() {
  state = PS_UNPARKED;
   11b68:	2200      	movs	r2, #0
  settings.state = state;
  nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11b6a:	21e3      	movs	r1, #227	; 0xe3
void Park::requestAborted() {
   11b6c:	b538      	push	{r3, r4, r5, lr}
  
  // restore backlash settings
  axis1.setBacklash(mount.settings.backlash.axis1);
   11b6e:	4d0e      	ldr	r5, [pc, #56]	; (11ba8 <Park::requestAborted()+0x40>)
void Park::requestAborted() {
   11b70:	4604      	mov	r4, r0
  state = PS_UNPARKED;
   11b72:	7002      	strb	r2, [r0, #0]
  nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11b74:	230f      	movs	r3, #15
  settings.state = state;
   11b76:	72c2      	strb	r2, [r0, #11]
  nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11b78:	1c42      	adds	r2, r0, #1
   11b7a:	480c      	ldr	r0, [pc, #48]	; (11bac <Park::requestAborted()+0x44>)
   11b7c:	f7f3 fa76 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  axis1.setBacklash(mount.settings.backlash.axis1);
   11b80:	f8d5 3019 	ldr.w	r3, [r5, #25]
   11b84:	480a      	ldr	r0, [pc, #40]	; (11bb0 <Park::requestAborted()+0x48>)
   11b86:	ee00 3a10 	vmov	s0, r3
   11b8a:	f7ef fa65 	bl	1058 <Axis::setBacklash(float)>
  axis2.setBacklash(mount.settings.backlash.axis2);
   11b8e:	f8d5 301d 	ldr.w	r3, [r5, #29]
   11b92:	4808      	ldr	r0, [pc, #32]	; (11bb4 <Park::requestAborted()+0x4c>)
   11b94:	ee00 3a10 	vmov	s0, r3
   11b98:	f7ef fa5e 	bl	1058 <Axis::setBacklash(float)>
  
  mount.tracking(wasTracking);
   11b9c:	7ca1      	ldrb	r1, [r4, #18]
   11b9e:	4628      	mov	r0, r5
}
   11ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  mount.tracking(wasTracking);
   11ba4:	f7f6 bf88 	b.w	8ab8 <Mount::tracking(bool)>
   11ba8:	200054e0 	.word	0x200054e0
   11bac:	20005e50 	.word	0x20005e50
   11bb0:	200050e8 	.word	0x200050e8
   11bb4:	200051a8 	.word	0x200051a8

00011bb8 <Park::requestDone()>:

// once parked save the park state
void Park::requestDone() {
   11bb8:	b508      	push	{r3, lr}
      DLF("WRN: Mount, park sense state failed!");
      state = PS_PARK_FAILED;
    }
  #endif

  if (state != PS_PARK_FAILED) {
   11bba:	7803      	ldrb	r3, [r0, #0]
   11bbc:	2b03      	cmp	r3, #3
   11bbe:	d00e      	beq.n	11bde <Park::requestDone()+0x26>
      VF("MSG: Mount, park axis2 motor target   "); VL(axis2.getTargetCoordinateSteps() - index);
      VF("MSG: Mount, park axis2 motor position "); VL(axis2.getMotorPositionSteps());
    #endif

    // save the axis state
    state = PS_PARKED;
   11bc0:	f04f 0c02 	mov.w	ip, #2
    settings.state = state;
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11bc4:	1c42      	adds	r2, r0, #1
   11bc6:	230f      	movs	r3, #15
   11bc8:	21e3      	movs	r1, #227	; 0xe3
    state = PS_PARKED;
   11bca:	f880 c000 	strb.w	ip, [r0]
    settings.state = state;
   11bce:	f880 c00b 	strb.w	ip, [r0, #11]
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11bd2:	4806      	ldr	r0, [pc, #24]	; (11bec <Park::requestDone()+0x34>)
   11bd4:	f7f3 fa4a 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>

    #if ALIGN_MAX_NUM_STARS > 1  
      transform.align.modelWrite();
   11bd8:	4805      	ldr	r0, [pc, #20]	; (11bf0 <Park::requestDone()+0x38>)
   11bda:	f7f7 fe57 	bl	988c <GeoAlign::modelWrite()>
    #endif

    VLF("MSG: Mount, parking done");
  } else { DLF("ERR: Mount::parkFinish(), Parking failed"); }

  mount.enable(MOUNT_ENABLE_IN_STANDBY == ON);
   11bde:	2100      	movs	r1, #0
   11be0:	4804      	ldr	r0, [pc, #16]	; (11bf4 <Park::requestDone()+0x3c>)
}
   11be2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mount.enable(MOUNT_ENABLE_IN_STANDBY == ON);
   11be6:	f7f6 bf4b 	b.w	8a80 <Mount::enable(bool)>
   11bea:	bf00      	nop
   11bec:	20005e50 	.word	0x20005e50
   11bf0:	200064ac 	.word	0x200064ac
   11bf4:	200054e0 	.word	0x200054e0

00011bf8 <Park::restore(bool)>:

// returns a parked telescope to operation
CommandError Park::restore(bool withTrackingOn) {
  if (!settings.saved) return CE_NO_PARK_POSITION_SET;
   11bf8:	7a83      	ldrb	r3, [r0, #10]
   11bfa:	2b00      	cmp	r3, #0
   11bfc:	d054      	beq.n	11ca8 <Park::restore(bool)+0xb0>
  if (state != PS_PARKED) {
   11bfe:	7803      	ldrb	r3, [r0, #0]
   11c00:	2b02      	cmp	r3, #2
CommandError Park::restore(bool withTrackingOn) {
   11c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c06:	4605      	mov	r5, r0
   11c08:	460c      	mov	r4, r1
   11c0a:	ed2d 8b04 	vpush	{d8-d9}
   11c0e:	b0ae      	sub	sp, #184	; 0xb8
  if (state != PS_PARKED) {
   11c10:	d031      	beq.n	11c76 <Park::restore(bool)+0x7e>
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   11c12:	488b      	ldr	r0, [pc, #556]	; (11e40 <Park::restore(bool)+0x248>)
   11c14:	f7ef fa8a 	bl	112c <Axis::getInstrumentCoordinate()>
   11c18:	2200      	movs	r2, #0
   11c1a:	498a      	ldr	r1, [pc, #552]	; (11e44 <Park::restore(bool)+0x24c>)
   11c1c:	a802      	add	r0, sp, #8
   11c1e:	eeb0 8b40 	vmov.f64	d8, d0
   11c22:	f7fd fbc1 	bl	f3a8 <Home::getPosition(CoordReturn)>
   11c26:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   11c2a:	ed9f 9b81 	vldr	d9, [pc, #516]	; 11e30 <Park::restore(bool)+0x238>
   11c2e:	ee38 8b47 	vsub.f64	d8, d8, d7
   11c32:	eeb0 8bc8 	vabs.f64	d8, d8
   11c36:	eeb4 8bc9 	vcmpe.f64	d8, d9
   11c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c3e:	d905      	bls.n	11c4c <Park::restore(bool)+0x54>
      VLF("MSG: Mount, unpark ignored not parked");
      return CE_NOT_PARKED;
    #else
      if (!mount.isHome()) {
        VLF("MSG: Mount, unpark when not parked allowed at home only");
        return CE_NOT_PARKED;
   11c40:	200b      	movs	r0, #11
  } else {
    VLF("MSG: Mount, recovering unpark position done");
  }

  return CE_NONE;
}
   11c42:	b02e      	add	sp, #184	; 0xb8
   11c44:	ecbd 8b04 	vpop	{d8-d9}
   11c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   11c4c:	487e      	ldr	r0, [pc, #504]	; (11e48 <Park::restore(bool)+0x250>)
   11c4e:	f7ef fa6d 	bl	112c <Axis::getInstrumentCoordinate()>
   11c52:	2200      	movs	r2, #0
   11c54:	497b      	ldr	r1, [pc, #492]	; (11e44 <Park::restore(bool)+0x24c>)
   11c56:	a818      	add	r0, sp, #96	; 0x60
   11c58:	eeb0 8b40 	vmov.f64	d8, d0
   11c5c:	f7fd fba4 	bl	f3a8 <Home::getPosition(CoordReturn)>
   11c60:	ed9d 7b2a 	vldr	d7, [sp, #168]	; 0xa8
   11c64:	ee38 8b47 	vsub.f64	d8, d8, d7
   11c68:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   11c6c:	eeb4 8bc9 	vcmpe.f64	d8, d9
   11c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c74:	d8e4      	bhi.n	11c40 <Park::restore(bool)+0x48>
  if (!site.isDateTimeReady()) {
   11c76:	4875      	ldr	r0, [pc, #468]	; (11e4c <Park::restore(bool)+0x254>)
   11c78:	f001 fc34 	bl	134e4 <Site::isDateTimeReady()>
   11c7c:	b170      	cbz	r0, 11c9c <Park::restore(bool)+0xa4>
   11c7e:	4e70      	ldr	r6, [pc, #448]	; (11e40 <Park::restore(bool)+0x248>)
   11c80:	a818      	add	r0, sp, #96	; 0x60
   11c82:	6831      	ldr	r1, [r6, #0]
   11c84:	680b      	ldr	r3, [r1, #0]
   11c86:	699b      	ldr	r3, [r3, #24]
   11c88:	4798      	blx	r3
   11c8a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    inline bool motorFault() { return axis1.motorFault() || axis2.motorFault(); }
   11c8e:	b16b      	cbz	r3, 11cac <Park::restore(bool)+0xb4>
  if (mount.motorFault()) return CE_SLEW_ERR_HARDWARE_FAULT;
   11c90:	2015      	movs	r0, #21
}
   11c92:	b02e      	add	sp, #184	; 0xb8
   11c94:	ecbd 8b04 	vpop	{d8-d9}
   11c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return CE_PARKED;
   11c9c:	2009      	movs	r0, #9
}
   11c9e:	b02e      	add	sp, #184	; 0xb8
   11ca0:	ecbd 8b04 	vpop	{d8-d9}
   11ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!settings.saved) return CE_NO_PARK_POSITION_SET;
   11ca8:	200c      	movs	r0, #12
}
   11caa:	4770      	bx	lr
   11cac:	f8df 8198 	ldr.w	r8, [pc, #408]	; 11e48 <Park::restore(bool)+0x250>
   11cb0:	a818      	add	r0, sp, #96	; 0x60
   11cb2:	f8d8 1000 	ldr.w	r1, [r8]
   11cb6:	680b      	ldr	r3, [r1, #0]
   11cb8:	699b      	ldr	r3, [r3, #24]
   11cba:	4798      	blx	r3
   11cbc:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   11cc0:	2b00      	cmp	r3, #0
   11cc2:	d1e5      	bne.n	11c90 <Park::restore(bool)+0x98>
  if (!goTo.absoluteEncodersPresent) {
   11cc4:	4f62      	ldr	r7, [pc, #392]	; (11e50 <Park::restore(bool)+0x258>)
   11cc6:	7a7b      	ldrb	r3, [r7, #9]
   11cc8:	b153      	cbz	r3, 11ce0 <Park::restore(bool)+0xe8>
    inline void enabled(bool state) { limitsEnabled = state; }
   11cca:	4b62      	ldr	r3, [pc, #392]	; (11e54 <Park::restore(bool)+0x25c>)
   11ccc:	2201      	movs	r2, #1
   11cce:	741a      	strb	r2, [r3, #16]
  if (withTrackingOn) {
   11cd0:	2c00      	cmp	r4, #0
   11cd2:	d15a      	bne.n	11d8a <Park::restore(bool)+0x192>
  return CE_NONE;
   11cd4:	4620      	mov	r0, r4
}
   11cd6:	b02e      	add	sp, #184	; 0xb8
   11cd8:	ecbd 8b04 	vpop	{d8-d9}
   11cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    home.reset();
   11ce0:	2101      	movs	r1, #1
   11ce2:	4858      	ldr	r0, [pc, #352]	; (11e44 <Park::restore(bool)+0x24c>)
   11ce4:	f7fd fd66 	bl	f7b4 <Home::reset(bool)>
    inline void setBacklashSteps(long value) { if (autoRate == AR_NONE) motor->setBacklashSteps(value); }
   11ce8:	f896 109c 	ldrb.w	r1, [r6, #156]	; 0x9c
   11cec:	2900      	cmp	r1, #0
   11cee:	d07f      	beq.n	11df0 <Park::restore(bool)+0x1f8>
   11cf0:	f898 109c 	ldrb.w	r1, [r8, #156]	; 0x9c
   11cf4:	2900      	cmp	r1, #0
   11cf6:	d076      	beq.n	11de6 <Park::restore(bool)+0x1ee>
      transform.align.modelRead();
   11cf8:	4e57      	ldr	r6, [pc, #348]	; (11e58 <Park::restore(bool)+0x260>)
   11cfa:	4630      	mov	r0, r6
   11cfc:	f7f7 fc90 	bl	9620 <GeoAlign::modelRead()>
    parkTarget.h = settings.position.h;
   11d00:	f8d5 3001 	ldr.w	r3, [r5, #1]
    parkTarget.pierSide = settings.position.pierSide;
   11d04:	7a6a      	ldrb	r2, [r5, #9]
    parkTarget.h = settings.position.h;
   11d06:	ee05 3a90 	vmov	s11, r3
   11d0a:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
   11d0e:	ed8d 6b1a 	vstr	d6, [sp, #104]	; 0x68
    parkTarget.d = settings.position.d;
   11d12:	f8d5 3005 	ldr.w	r3, [r5, #5]
    parkTarget.pierSide = settings.position.pierSide;
   11d16:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
    parkTarget.d = settings.position.d;
   11d1a:	ee07 3a10 	vmov	s14, r3
    if (transform.mountType == GEM) {
   11d1e:	f996 35c4 	ldrsb.w	r3, [r6, #1476]	; 0x5c4
    parkTarget.d = settings.position.d;
   11d22:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    if (transform.mountType == GEM) {
   11d26:	2b01      	cmp	r3, #1
    parkTarget.d = settings.position.d;
   11d28:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
    if (transform.mountType == GEM) {
   11d2c:	d045      	beq.n	11dba <Park::restore(bool)+0x1c2>
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11d2e:	2b03      	cmp	r3, #3
   11d30:	d062      	beq.n	11df8 <Park::restore(bool)+0x200>
    if (transform.mountType == ALTALT) transform.equToAa(&parkTarget);
   11d32:	2b04      	cmp	r3, #4
   11d34:	d038      	beq.n	11da8 <Park::restore(bool)+0x1b0>
   11d36:	f8df 811c 	ldr.w	r8, [pc, #284]	; 11e54 <Park::restore(bool)+0x25c>
    transform.mountToInstrument(&parkTarget, &a1, &a2);
   11d3a:	466a      	mov	r2, sp
   11d3c:	a918      	add	r1, sp, #96	; 0x60
   11d3e:	ab02      	add	r3, sp, #8
   11d40:	4845      	ldr	r0, [pc, #276]	; (11e58 <Park::restore(bool)+0x260>)
   11d42:	f7f9 fa01 	bl	b148 <Transform::mountToInstrument(Coordinate*, double*, double*)>
    axis1.setBacklash(mount.settings.backlash.axis1);
   11d46:	4e45      	ldr	r6, [pc, #276]	; (11e5c <Park::restore(bool)+0x264>)
    axis1.setInstrumentCoordinatePark(a1);
   11d48:	483d      	ldr	r0, [pc, #244]	; (11e40 <Park::restore(bool)+0x248>)
   11d4a:	ed9d 0b00 	vldr	d0, [sp]
   11d4e:	f7ef fa29 	bl	11a4 <Axis::setInstrumentCoordinatePark(double)>
    axis2.setInstrumentCoordinatePark(a2);
   11d52:	483d      	ldr	r0, [pc, #244]	; (11e48 <Park::restore(bool)+0x250>)
   11d54:	ed9d 0b02 	vldr	d0, [sp, #8]
   11d58:	f7ef fa24 	bl	11a4 <Axis::setInstrumentCoordinatePark(double)>
    axis1.setBacklash(mount.settings.backlash.axis1);
   11d5c:	f8d6 3019 	ldr.w	r3, [r6, #25]
   11d60:	4837      	ldr	r0, [pc, #220]	; (11e40 <Park::restore(bool)+0x248>)
   11d62:	ee00 3a10 	vmov	s0, r3
   11d66:	f7ef f977 	bl	1058 <Axis::setBacklash(float)>
    axis2.setBacklash(mount.settings.backlash.axis2);
   11d6a:	f8d6 301d 	ldr.w	r3, [r6, #29]
   11d6e:	4836      	ldr	r0, [pc, #216]	; (11e48 <Park::restore(bool)+0x250>)
   11d70:	ee00 3a10 	vmov	s0, r3
   11d74:	f7ef f970 	bl	1058 <Axis::setBacklash(float)>
   11d78:	2301      	movs	r3, #1
  if (!goTo.absoluteEncodersPresent) mount.syncFromOnStepToEncoders = true;
   11d7a:	7a7a      	ldrb	r2, [r7, #9]
   11d7c:	f888 3010 	strb.w	r3, [r8, #16]
   11d80:	2a00      	cmp	r2, #0
   11d82:	d1a5      	bne.n	11cd0 <Park::restore(bool)+0xd8>
   11d84:	7033      	strb	r3, [r6, #0]
  if (withTrackingOn) {
   11d86:	2c00      	cmp	r4, #0
   11d88:	d0a4      	beq.n	11cd4 <Park::restore(bool)+0xdc>
    state = PS_UNPARKED;
   11d8a:	2400      	movs	r4, #0
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11d8c:	230f      	movs	r3, #15
   11d8e:	1c6a      	adds	r2, r5, #1
   11d90:	21e3      	movs	r1, #227	; 0xe3
   11d92:	4833      	ldr	r0, [pc, #204]	; (11e60 <Park::restore(bool)+0x268>)
    state = PS_UNPARKED;
   11d94:	702c      	strb	r4, [r5, #0]
    settings.state = state;
   11d96:	72ec      	strb	r4, [r5, #11]
    nv.updateBytes(NV_MOUNT_PARK_BASE, &settings, sizeof(ParkSettings));
   11d98:	f7f3 f968 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
    mount.tracking(true);
   11d9c:	482f      	ldr	r0, [pc, #188]	; (11e5c <Park::restore(bool)+0x264>)
   11d9e:	2101      	movs	r1, #1
   11da0:	f7f6 fe8a 	bl	8ab8 <Mount::tracking(bool)>
  return CE_NONE;
   11da4:	4620      	mov	r0, r4
   11da6:	e774      	b.n	11c92 <Park::restore(bool)+0x9a>
   11da8:	a918      	add	r1, sp, #96	; 0x60
   11daa:	4630      	mov	r0, r6
   11dac:	f7f9 fabc 	bl	b328 <Transform::equToHor(Coordinate*)>
   11db0:	a918      	add	r1, sp, #96	; 0x60
   11db2:	4630      	mov	r0, r6
   11db4:	f7f9 fc44 	bl	b640 <Transform::horToAa(Coordinate*)>
   11db8:	e7bd      	b.n	11d36 <Park::restore(bool)+0x13e>
      if (parkTarget.pierSide == PIER_SIDE_EAST && parkTarget.h < -limits.settings.pastMeridianE) parkTarget.h += PI*2.0;
   11dba:	2a01      	cmp	r2, #1
   11dbc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 11e54 <Park::restore(bool)+0x25c>
   11dc0:	d021      	beq.n	11e06 <Park::restore(bool)+0x20e>
      if (parkTarget.pierSide == PIER_SIDE_WEST && parkTarget.h > limits.settings.pastMeridianW) parkTarget.h -= PI*2.0;
   11dc2:	2a02      	cmp	r2, #2
   11dc4:	d1b9      	bne.n	11d3a <Park::restore(bool)+0x142>
   11dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   11dca:	ee07 3a90 	vmov	s15, r3
   11dce:	eef4 5ae7 	vcmpe.f32	s11, s15
   11dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11dd6:	ddb0      	ble.n	11d3a <Park::restore(bool)+0x142>
   11dd8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 11e38 <Park::restore(bool)+0x240>
   11ddc:	ee36 6b47 	vsub.f64	d6, d6, d7
   11de0:	ed8d 6b1a 	vstr	d6, [sp, #104]	; 0x68
   11de4:	e7a9      	b.n	11d3a <Park::restore(bool)+0x142>
   11de6:	f8d8 0000 	ldr.w	r0, [r8]
   11dea:	f7f0 f8ef 	bl	1fcc <Motor::setBacklashSteps(long)>
   11dee:	e783      	b.n	11cf8 <Park::restore(bool)+0x100>
   11df0:	6830      	ldr	r0, [r6, #0]
   11df2:	f7f0 f8eb 	bl	1fcc <Motor::setBacklashSteps(long)>
   11df6:	e77b      	b.n	11cf0 <Park::restore(bool)+0xf8>
    if (transform.mountType == ALTAZM) transform.equToHor(&parkTarget); else
   11df8:	4630      	mov	r0, r6
   11dfa:	a918      	add	r1, sp, #96	; 0x60
   11dfc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11e54 <Park::restore(bool)+0x25c>
   11e00:	f7f9 fa92 	bl	b328 <Transform::equToHor(Coordinate*)>
   11e04:	e799      	b.n	11d3a <Park::restore(bool)+0x142>
      if (parkTarget.pierSide == PIER_SIDE_EAST && parkTarget.h < -limits.settings.pastMeridianE) parkTarget.h += PI*2.0;
   11e06:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11e0a:	ee07 3a90 	vmov	s15, r3
   11e0e:	eef1 7a67 	vneg.f32	s15, s15
   11e12:	eef4 5ae7 	vcmpe.f32	s11, s15
   11e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11e1a:	d58e      	bpl.n	11d3a <Park::restore(bool)+0x142>
   11e1c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 11e38 <Park::restore(bool)+0x240>
   11e20:	ee36 6b07 	vadd.f64	d6, d6, d7
   11e24:	ed8d 6b1a 	vstr	d6, [sp, #104]	; 0x68
   11e28:	e787      	b.n	11d3a <Park::restore(bool)+0x142>
   11e2a:	bf00      	nop
   11e2c:	f3af 8000 	nop.w
   11e30:	71ef8766 	.word	0x71ef8766
   11e34:	3e9787ad 	.word	0x3e9787ad
   11e38:	54442d18 	.word	0x54442d18
   11e3c:	401921fb 	.word	0x401921fb
   11e40:	200050e8 	.word	0x200050e8
   11e44:	20005478 	.word	0x20005478
   11e48:	200051a8 	.word	0x200051a8
   11e4c:	200055d0 	.word	0x200055d0
   11e50:	20005270 	.word	0x20005270
   11e54:	20005cf4 	.word	0x20005cf4
   11e58:	200064ac 	.word	0x200064ac
   11e5c:	200054e0 	.word	0x200054e0
   11e60:	20005e50 	.word	0x20005e50

00011e64 <_GLOBAL__sub_I__Z17parkSignalWrapperv>:
class Park {
   11e64:	4b05      	ldr	r3, [pc, #20]	; (11e7c <_GLOBAL__sub_I__Z17parkSignalWrapperv+0x18>)
   11e66:	2200      	movs	r2, #0
   11e68:	f8c3 2009 	str.w	r2, [r3, #9]
   11e6c:	f8c3 2001 	str.w	r2, [r3, #1]
   11e70:	f8c3 2005 	str.w	r2, [r3, #5]
   11e74:	60da      	str	r2, [r3, #12]
   11e76:	821a      	strh	r2, [r3, #16]
   11e78:	749a      	strb	r2, [r3, #18]
      request();
    }
  #endif
}

Park park;
   11e7a:	4770      	bx	lr
   11e7c:	20005ea8 	.word	0x20005ea8

00011e80 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)>:

#include "../../../lib/tasks/OnTask.h"

#include "../site/Site.h"

bool Pec::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   11e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e84:	b084      	sub	sp, #16
  *supressFrame = false;
   11e86:	2400      	movs	r4, #0
bool Pec::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   11e88:	461d      	mov	r5, r3
   11e8a:	4606      	mov	r6, r0
  *supressFrame = false;
   11e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
bool Pec::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   11e8e:	460f      	mov	r7, r1
   11e90:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  *supressFrame = false;
   11e94:	701c      	strb	r4, [r3, #0]
  *commandError = CE_NONE;
   11e96:	f888 4000 	strb.w	r4, [r8]

  if (command[0] == 'G' && command[1] == 'X' && parameter[2] == 0) {
   11e9a:	f892 c000 	ldrb.w	ip, [r2]
   11e9e:	f1bc 0f47 	cmp.w	ip, #71	; 0x47
   11ea2:	d079      	beq.n	11f98 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x118>

  #if AXIS1_PEC == ON
    // :SXE7,[n]#
    //            Set PEC steps per worm rotation [n]
    //            Return: 0 on failure or 1 on success
    if (command[0] == 'S' && command[1] == 'X' && parameter[0] == 'E' && parameter[1] == '7' && parameter[2] == ',') {
   11ea4:	f1bc 0f53 	cmp.w	ip, #83	; 0x53
   11ea8:	d019      	beq.n	11ede <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5e>
      } else *commandError = CE_PARAM_RANGE;
    } else
  #endif

  // V - PEC Readout
  if (command[0] == 'V') {
   11eaa:	f1bc 0f56 	cmp.w	ip, #86	; 0x56
   11eae:	d12f      	bne.n	11f10 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x90>
    #if AXIS1_PEC == ON
      //  :VH#      PEC index sense position in sidereal seconds
      //            Returns: n#
      if (command[1] == 'H' && parameter[0] == 0) {
   11eb0:	7853      	ldrb	r3, [r2, #1]
   11eb2:	2b48      	cmp	r3, #72	; 0x48
   11eb4:	f000 8101 	beq.w	120ba <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x23a>

      // :VR[n]#    Read PEC table entry rate adjustment (in steps +/-) for worm segment n (in seconds)
      //            Returns: sn#
      // :VR#       Read PEC table entry rate adjustment (in steps +/-) for currently playing segment and its rate adjustment (in steps +/-)
      //            Returns: sn,n#
      if (command[1] == 'R') {
   11eb8:	2b52      	cmp	r3, #82	; 0x52
   11eba:	f000 80c7 	beq.w	1204c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1cc>
      } else

      // :Vr[n]#    Read out RA PEC ten byte frame in hex format starting at worm segment n (in seconds)
      //            Returns: x0x1x2x3x4x5x6x7x8x9# (hex one byte integers)
      //            Ten rate adjustment factors for 1s worm segments in steps +/- (steps = x0 - 128, etc.)
      if (command[1] == 'r') {
   11ebe:	2b72      	cmp	r3, #114	; 0x72
   11ec0:	f000 81db 	beq.w	1227a <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3fa>
      } else
    #endif

    // :VS#       Get PEC number of steps per sidereal second of worm rotation
    //            Returns: n.n#
    if (command[1] == 'S' && parameter[0] == 0) {
   11ec4:	2b53      	cmp	r3, #83	; 0x53
   11ec6:	f000 8119 	beq.w	120fc <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x27c>
      *numericReply = false;
    } else

    // :VW#       Get pec worm rotation steps
    //            Returns: n#
    if (command[1] == 'W' && parameter[0] == 0) {
   11eca:	2b57      	cmp	r3, #87	; 0x57
   11ecc:	d103      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11ece:	782d      	ldrb	r5, [r5, #0]
   11ed0:	2d00      	cmp	r5, #0
   11ed2:	f000 8130 	beq.w	12136 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2b6>
      reply[0] = pecStateStr[state]; reply[1] = 0; reply[2] = 0;
      #if AXIS1_PEC == ON
        if (wormIndexSenseThisSecond) reply[1] = '.';
      #endif
    } else { *numericReply = true; return false; }
  } else return false;
   11ed6:	4620      	mov	r0, r4

  return true;
}
   11ed8:	b004      	add	sp, #16
   11eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (command[0] == 'S' && command[1] == 'X' && parameter[0] == 'E' && parameter[1] == '7' && parameter[2] == ',') {
   11ede:	7853      	ldrb	r3, [r2, #1]
   11ee0:	2b58      	cmp	r3, #88	; 0x58
   11ee2:	d1f8      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11ee4:	782b      	ldrb	r3, [r5, #0]
   11ee6:	2b45      	cmp	r3, #69	; 0x45
   11ee8:	d1f5      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11eea:	786b      	ldrb	r3, [r5, #1]
   11eec:	2b37      	cmp	r3, #55	; 0x37
   11eee:	d1f2      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11ef0:	78ab      	ldrb	r3, [r5, #2]
   11ef2:	2b2c      	cmp	r3, #44	; 0x2c
   11ef4:	d1ef      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
      long l = atol(&parameter[3]);
   11ef6:	1ce8      	adds	r0, r5, #3
   11ef8:	f00b fb44 	bl	1d584 <atol>
      if (l >= 0 && l < 129600000) {
   11efc:	4bb0      	ldr	r3, [pc, #704]	; (121c0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x340>)
      long l = atol(&parameter[3]);
   11efe:	4604      	mov	r4, r0
      if (l >= 0 && l < 129600000) {
   11f00:	4298      	cmp	r0, r3
   11f02:	f0c0 8253 	bcc.w	123ac <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x52c>
      } else *commandError = CE_PARAM_RANGE;
   11f06:	2304      	movs	r3, #4
  return true;
   11f08:	2001      	movs	r0, #1
      } else *commandError = CE_PARAM_RANGE;
   11f0a:	f888 3000 	strb.w	r3, [r8]
   11f0e:	e7e3      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
  if (command[0] == 'W') {
   11f10:	f1bc 0f57 	cmp.w	ip, #87	; 0x57
   11f14:	d15a      	bne.n	11fcc <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x14c>
      if (command[1] == 'R' && parameter[0] == '+' && parameter[1] == 0) {
   11f16:	7853      	ldrb	r3, [r2, #1]
   11f18:	2b52      	cmp	r3, #82	; 0x52
   11f1a:	d1dc      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11f1c:	782b      	ldrb	r3, [r5, #0]
   11f1e:	2b2b      	cmp	r3, #43	; 0x2b
   11f20:	f000 8113 	beq.w	1214a <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ca>
      if (command[1] == 'R' && parameter[0] == '-' && parameter[1] == 0) {
   11f24:	2b2d      	cmp	r3, #45	; 0x2d
   11f26:	f000 8121 	beq.w	1216c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ec>
        char *parameter2 = strchr(parameter, ',');
   11f2a:	212c      	movs	r1, #44	; 0x2c
   11f2c:	4628      	mov	r0, r5
   11f2e:	f00d f9d1 	bl	1f2d4 <strchr>
        if (parameter2) {
   11f32:	4604      	mov	r4, r0
   11f34:	2800      	cmp	r0, #0
   11f36:	f000 80bc 	beq.w	120b2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x232>
          parameter2[0] = 0;
   11f3a:	2300      	movs	r3, #0
          if (convert.atoi2(parameter, &i)) {
   11f3c:	4629      	mov	r1, r5
   11f3e:	f10d 0206 	add.w	r2, sp, #6
          parameter2[0] = 0;
   11f42:	7003      	strb	r3, [r0, #0]
          if (convert.atoi2(parameter, &i)) {
   11f44:	2301      	movs	r3, #1
   11f46:	489f      	ldr	r0, [pc, #636]	; (121c4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x344>)
   11f48:	f7f2 fa84 	bl	4454 <Convert::atoi2(char*, short*, bool)>
   11f4c:	2800      	cmp	r0, #0
   11f4e:	f000 80b0 	beq.w	120b2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x232>
            if (i >= 0 && i < bufferSize) {
   11f52:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
   11f56:	2b00      	cmp	r3, #0
   11f58:	f2c0 80a1 	blt.w	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
   11f5c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   11f5e:	4293      	cmp	r3, r2
   11f60:	f280 809d 	bge.w	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
              if (convert.atoi2(parameter2, &j)) {
   11f64:	2301      	movs	r3, #1
   11f66:	aa02      	add	r2, sp, #8
   11f68:	4896      	ldr	r0, [pc, #600]	; (121c4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x344>)
   11f6a:	18e1      	adds	r1, r4, r3
   11f6c:	f7f2 fa72 	bl	4454 <Convert::atoi2(char*, short*, bool)>
   11f70:	2800      	cmp	r0, #0
   11f72:	f000 809e 	beq.w	120b2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x232>
                if (j >= -128 && j <= 127) {
   11f76:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   11f7a:	f102 0380 	add.w	r3, r2, #128	; 0x80
   11f7e:	b29b      	uxth	r3, r3
   11f80:	2bff      	cmp	r3, #255	; 0xff
   11f82:	f200 808c 	bhi.w	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
                  buffer[i] = j;
   11f86:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
   11f8a:	6e31      	ldr	r1, [r6, #96]	; 0x60
   11f8c:	54ca      	strb	r2, [r1, r3]
                  settings.recorded = true;
   11f8e:	7933      	ldrb	r3, [r6, #4]
   11f90:	f043 0301 	orr.w	r3, r3, #1
   11f94:	7133      	strb	r3, [r6, #4]
   11f96:	e085      	b.n	120a4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x224>
  if (command[0] == 'G' && command[1] == 'X' && parameter[2] == 0) {
   11f98:	7853      	ldrb	r3, [r2, #1]
   11f9a:	2b58      	cmp	r3, #88	; 0x58
   11f9c:	d19b      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11f9e:	f895 8002 	ldrb.w	r8, [r5, #2]
   11fa2:	f1b8 0f00 	cmp.w	r8, #0
   11fa6:	d196      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
      if (parameter[0] == '9' && parameter[1] == '1') {
   11fa8:	782b      	ldrb	r3, [r5, #0]
   11faa:	2b39      	cmp	r3, #57	; 0x39
   11fac:	f000 80f1 	beq.w	12192 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x312>
    if (parameter[0] == 'E' && parameter[1] == '6') {
   11fb0:	2b45      	cmp	r3, #69	; 0x45
   11fb2:	d109      	bne.n	11fc8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x148>
   11fb4:	786b      	ldrb	r3, [r5, #1]
   11fb6:	2b36      	cmp	r3, #54	; 0x36
   11fb8:	f000 81d9 	beq.w	1236e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ee>
    if (parameter[0] == 'E' && parameter[1] == '7') {
   11fbc:	2b37      	cmp	r3, #55	; 0x37
   11fbe:	f000 81ec 	beq.w	1239a <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x51a>
    if (parameter[0] == 'E' && parameter[1] == '8') {
   11fc2:	2b38      	cmp	r3, #56	; 0x38
   11fc4:	f000 810c 	beq.w	121e0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x360>
  } else return false;
   11fc8:	4640      	mov	r0, r8
   11fca:	e785      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
  if (command[0] == '$' && command[1] == 'Q' && parameter[0] == 'Z' && parameter[2] == 0) {
   11fcc:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
   11fd0:	d181      	bne.n	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11fd2:	7853      	ldrb	r3, [r2, #1]
   11fd4:	2b51      	cmp	r3, #81	; 0x51
   11fd6:	f47f af7e 	bne.w	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11fda:	782b      	ldrb	r3, [r5, #0]
   11fdc:	2b5a      	cmp	r3, #90	; 0x5a
   11fde:	f47f af7a 	bne.w	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
   11fe2:	78ab      	ldrb	r3, [r5, #2]
   11fe4:	2b00      	cmp	r3, #0
   11fe6:	f47f af76 	bne.w	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
    *numericReply = false;
   11fea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11fec:	7013      	strb	r3, [r2, #0]
      if (parameter[1] == '+') {
   11fee:	786b      	ldrb	r3, [r5, #1]
   11ff0:	2b2b      	cmp	r3, #43	; 0x2b
   11ff2:	f000 81a2 	beq.w	1233a <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ba>
      if (parameter[1] == '-') {
   11ff6:	2b3f      	cmp	r3, #63	; 0x3f
   11ff8:	f200 8184 	bhi.w	12304 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x484>
   11ffc:	2b20      	cmp	r3, #32
   11ffe:	f240 80cf 	bls.w	121a0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>
   12002:	3b21      	subs	r3, #33	; 0x21
   12004:	2b1e      	cmp	r3, #30
   12006:	f200 80cb 	bhi.w	121a0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>
   1200a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1200e:	00f3      	.short	0x00f3
   12010:	00c900c9 	.word	0x00c900c9
   12014:	00c900c9 	.word	0x00c900c9
   12018:	00c900c9 	.word	0x00c900c9
   1201c:	00c900c9 	.word	0x00c900c9
   12020:	00c900c9 	.word	0x00c900c9
   12024:	012c00c9 	.word	0x012c00c9
   12028:	011f00c9 	.word	0x011f00c9
   1202c:	00c900c9 	.word	0x00c900c9
   12030:	00c900c9 	.word	0x00c900c9
   12034:	00c900c9 	.word	0x00c900c9
   12038:	00c900c9 	.word	0x00c900c9
   1203c:	00c900c9 	.word	0x00c900c9
   12040:	00c900c9 	.word	0x00c900c9
   12044:	00c900c9 	.word	0x00c900c9
   12048:	011100c9 	.word	0x011100c9
        if (parameter[0] == 0) i = bufferIndex; else conv_result = convert.atoi2(parameter, &i);
   1204c:	782b      	ldrb	r3, [r5, #0]
   1204e:	2b00      	cmp	r3, #0
   12050:	f040 814c 	bne.w	122ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x46c>
   12054:	f9b0 305c 	ldrsh.w	r3, [r0, #92]	; 0x5c
   12058:	f8ad 3008 	strh.w	r3, [sp, #8]
          if (i >= 0 && i < bufferSize) {
   1205c:	2b00      	cmp	r3, #0
   1205e:	db1e      	blt.n	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
   12060:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   12062:	4293      	cmp	r3, r2
   12064:	da1b      	bge.n	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
            if (parameter[0] == 0) {
   12066:	782a      	ldrb	r2, [r5, #0]
   12068:	2a00      	cmp	r2, #0
   1206a:	f040 8179 	bne.w	12360 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e0>
              i -= 1;
   1206e:	3b01      	subs	r3, #1
              if (i < 0) i += wormRotationSeconds;
   12070:	6c72      	ldr	r2, [r6, #68]	; 0x44
              i -= 1;
   12072:	b21b      	sxth	r3, r3
              if (i < 0) i += wormRotationSeconds;
   12074:	1c59      	adds	r1, r3, #1
              i -= 1;
   12076:	f8ad 3008 	strh.w	r3, [sp, #8]
              if (i < 0) i += wormRotationSeconds;
   1207a:	d103      	bne.n	12084 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x204>
   1207c:	1e53      	subs	r3, r2, #1
   1207e:	b21b      	sxth	r3, r3
   12080:	f8ad 3008 	strh.w	r3, [sp, #8]
              if (i >= wormRotationSeconds) i -= wormRotationSeconds;
   12084:	4293      	cmp	r3, r2
   12086:	db03      	blt.n	12090 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x210>
   12088:	1a9b      	subs	r3, r3, r2
   1208a:	b21b      	sxth	r3, r3
   1208c:	f8ad 3008 	strh.w	r3, [sp, #8]
              j = buffer[i];
   12090:	6e32      	ldr	r2, [r6, #96]	; 0x60
              sprintf(reply,"%+04i,%03i", j, i);
   12092:	4638      	mov	r0, r7
   12094:	494c      	ldr	r1, [pc, #304]	; (121c8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x348>)
   12096:	56d2      	ldrsb	r2, [r2, r3]
   12098:	f00c ff2a 	bl	1eef0 <sprintf>
   1209c:	e002      	b.n	120a4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x224>
                } else *commandError = CE_PARAM_RANGE;
   1209e:	2304      	movs	r3, #4
   120a0:	f888 3000 	strb.w	r3, [r8]
        *numericReply = false;
   120a4:	2300      	movs	r3, #0
  return true;
   120a6:	2001      	movs	r0, #1
        *numericReply = false;
   120a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   120aa:	7013      	strb	r3, [r2, #0]
}
   120ac:	b004      	add	sp, #16
   120ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else *commandError = CE_PARAM_FORM;
   120b2:	2305      	movs	r3, #5
   120b4:	f888 3000 	strb.w	r3, [r8]
   120b8:	e7f4      	b.n	120a4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x224>
      if (command[1] == 'H' && parameter[0] == 0) {
   120ba:	782b      	ldrb	r3, [r5, #0]
   120bc:	2b00      	cmp	r3, #0
   120be:	f47f af0a 	bne.w	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
        long s = lroundf(wormSenseSteps/stepsPerSiderealSecond);
   120c2:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
   120c6:	ed90 6b04 	vldr	d6, [r0, #16]
   120ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   120ce:	ee87 0b06 	vdiv.f64	d0, d7, d6
   120d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   120d6:	f009 fc41 	bl	1b95c <lroundf>
        while (s > wormRotationSeconds) s -= wormRotationSeconds;
   120da:	6c73      	ldr	r3, [r6, #68]	; 0x44
        long s = lroundf(wormSenseSteps/stepsPerSiderealSecond);
   120dc:	4602      	mov	r2, r0
        while (s > wormRotationSeconds) s -= wormRotationSeconds;
   120de:	4283      	cmp	r3, r0
   120e0:	f280 80fe 	bge.w	122e0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x460>
   120e4:	1ad2      	subs	r2, r2, r3
   120e6:	4293      	cmp	r3, r2
   120e8:	dbfc      	blt.n	120e4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x264>
        sprintf(reply,"%05ld",s);
   120ea:	4938      	ldr	r1, [pc, #224]	; (121cc <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x34c>)
   120ec:	4638      	mov	r0, r7
   120ee:	f00c feff 	bl	1eef0 <sprintf>
        *numericReply = false;
   120f2:	2300      	movs	r3, #0
   120f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  return true;
   120f6:	2001      	movs	r0, #1
        *numericReply = false;
   120f8:	7013      	strb	r3, [r2, #0]
      } else
   120fa:	e6ed      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
    if (command[1] == 'S' && parameter[0] == 0) {
   120fc:	782d      	ldrb	r5, [r5, #0]
   120fe:	2d00      	cmp	r5, #0
   12100:	f47f aee9 	bne.w	11ed6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56>
    inline double getStepsPerMeasure() { return settings.stepsPerMeasure; }
   12104:	4932      	ldr	r1, [pc, #200]	; (121d0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x350>)
      sprintF(reply, "%0.6f", stepsPerSiderealSecond);
   12106:	4638      	mov	r0, r7
   12108:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
      stepsPerSiderealSecond = (axis1.getStepsPerMeasure()/RAD_DEG_RATIO_F)/240.0F;
   1210c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 121b0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x330>
   12110:	ec43 2b15 	vmov	d5, r2, r3
   12114:	ed9f 6b28 	vldr	d6, [pc, #160]	; 121b8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x338>
   12118:	ee85 5b07 	vdiv.f64	d5, d5, d7
      sprintF(reply, "%0.6f", stepsPerSiderealSecond);
   1211c:	492d      	ldr	r1, [pc, #180]	; (121d4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x354>)
      stepsPerSiderealSecond = (axis1.getStepsPerMeasure()/RAD_DEG_RATIO_F)/240.0F;
   1211e:	ee85 7b06 	vdiv.f64	d7, d5, d6
      sprintF(reply, "%0.6f", stepsPerSiderealSecond);
   12122:	eeb0 0b47 	vmov.f64	d0, d7
      stepsPerSiderealSecond = (axis1.getStepsPerMeasure()/RAD_DEG_RATIO_F)/240.0F;
   12126:	ed86 7b04 	vstr	d7, [r6, #16]
      sprintF(reply, "%0.6f", stepsPerSiderealSecond);
   1212a:	f7f1 ff85 	bl	4038 <sprintF(char*, char const*, double)>
      *numericReply = false;
   1212e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return true;
   12130:	2001      	movs	r0, #1
      *numericReply = false;
   12132:	701d      	strb	r5, [r3, #0]
   12134:	e6d0      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      sprintf(reply, "%06ld", steps);
   12136:	f8d0 2006 	ldr.w	r2, [r0, #6]
   1213a:	4638      	mov	r0, r7
   1213c:	4926      	ldr	r1, [pc, #152]	; (121d8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x358>)
   1213e:	f00c fed7 	bl	1eef0 <sprintf>
      *numericReply = false;
   12142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return true;
   12144:	2001      	movs	r0, #1
      *numericReply = false;
   12146:	701d      	strb	r5, [r3, #0]
    } else return false;
   12148:	e6c6      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      if (command[1] == 'R' && parameter[0] == '+' && parameter[1] == 0) {
   1214a:	786b      	ldrb	r3, [r5, #1]
   1214c:	2b00      	cmp	r3, #0
   1214e:	f47f aeec 	bne.w	11f2a <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0xaa>
        int8_t i = buffer[wormRotationSeconds - 1];
   12152:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12154:	6e01      	ldr	r1, [r0, #96]	; 0x60
   12156:	188b      	adds	r3, r1, r2
        memmove(&buffer[1], &buffer[0], wormRotationSeconds - 1);
   12158:	1c48      	adds	r0, r1, #1
   1215a:	3a01      	subs	r2, #1
        int8_t i = buffer[wormRotationSeconds - 1];
   1215c:	f913 4c01 	ldrsb.w	r4, [r3, #-1]
        memmove(&buffer[1], &buffer[0], wormRotationSeconds - 1);
   12160:	f00c ffca 	bl	1f0f8 <memmove>
        buffer[0] = i;
   12164:	6e33      	ldr	r3, [r6, #96]	; 0x60
  return true;
   12166:	2001      	movs	r0, #1
        buffer[0] = i;
   12168:	701c      	strb	r4, [r3, #0]
      } else
   1216a:	e6b5      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      if (command[1] == 'R' && parameter[0] == '-' && parameter[1] == 0) {
   1216c:	786b      	ldrb	r3, [r5, #1]
   1216e:	2b00      	cmp	r3, #0
   12170:	f47f aedb 	bne.w	11f2a <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0xaa>
        int8_t i = buffer[0];
   12174:	6e01      	ldr	r1, [r0, #96]	; 0x60
        memmove(&buffer[0], &buffer[1], wormRotationSeconds - 1);
   12176:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12178:	4608      	mov	r0, r1
        int8_t i = buffer[0];
   1217a:	f911 4b01 	ldrsb.w	r4, [r1], #1
        memmove(&buffer[0], &buffer[1], wormRotationSeconds - 1);
   1217e:	3a01      	subs	r2, #1
   12180:	f00c ffba 	bl	1f0f8 <memmove>
        buffer[wormRotationSeconds - 1] = i;
   12184:	6e33      	ldr	r3, [r6, #96]	; 0x60
   12186:	6c72      	ldr	r2, [r6, #68]	; 0x44
  return true;
   12188:	2001      	movs	r0, #1
        buffer[wormRotationSeconds - 1] = i;
   1218a:	4413      	add	r3, r2
   1218c:	f803 4c01 	strb.w	r4, [r3, #-1]
      } else
   12190:	e6a2      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      if (parameter[0] == '9' && parameter[1] == '1') {
   12192:	786b      	ldrb	r3, [r5, #1]
   12194:	2b31      	cmp	r3, #49	; 0x31
   12196:	f47f af17 	bne.w	11fc8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x148>
        sprintf(reply, "%d", 0);
   1219a:	4642      	mov	r2, r8
   1219c:	490f      	ldr	r1, [pc, #60]	; (121dc <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x35c>)
   1219e:	e021      	b.n	121e4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x364>
    } else { *numericReply = true; return false; }
   121a0:	2301      	movs	r3, #1
   121a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   121a4:	2000      	movs	r0, #0
   121a6:	7013      	strb	r3, [r2, #0]
   121a8:	e696      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
   121aa:	bf00      	nop
   121ac:	f3af 8000 	nop.w
   121b0:	20000000 	.word	0x20000000
   121b4:	404ca5dc 	.word	0x404ca5dc
   121b8:	00000000 	.word	0x00000000
   121bc:	406e0000 	.word	0x406e0000
   121c0:	07b98a00 	.word	0x07b98a00
   121c4:	200043d0 	.word	0x200043d0
   121c8:	20002114 	.word	0x20002114
   121cc:	2000210c 	.word	0x2000210c
   121d0:	200050e8 	.word	0x200050e8
   121d4:	20002240 	.word	0x20002240
   121d8:	20002128 	.word	0x20002128
   121dc:	2000224c 	.word	0x2000224c
      sprintf(reply, "%ld", bufferSize);
   121e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   121e2:	4981      	ldr	r1, [pc, #516]	; (123e8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x568>)
   121e4:	4638      	mov	r0, r7
   121e6:	f00c fe83 	bl	1eef0 <sprintf>
      *numericReply = false;
   121ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return true;
   121ec:	2001      	movs	r0, #1
      *numericReply = false;
   121ee:	f883 8000 	strb.w	r8, [r3]
   121f2:	e671      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
        settings.recorded = true;
   121f4:	7901      	ldrb	r1, [r0, #4]
   121f6:	4602      	mov	r2, r0
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   121f8:	2306      	movs	r3, #6
   121fa:	487c      	ldr	r0, [pc, #496]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
        settings.recorded = true;
   121fc:	f041 0101 	orr.w	r1, r1, #1
   12200:	f802 1f04 	strb.w	r1, [r2, #4]!
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12204:	21f2      	movs	r1, #242	; 0xf2
   12206:	f7f2 ff31 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
        for (int i = 0; i < bufferSize; i++) nv.update(NV_PEC_BUFFER_BASE + i, buffer[i]);
   1220a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1220c:	2b00      	cmp	r3, #0
   1220e:	dd0d      	ble.n	1222c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ac>
   12210:	2400      	movs	r4, #0
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
   12212:	4d76      	ldr	r5, [pc, #472]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
   12214:	6e33      	ldr	r3, [r6, #96]	; 0x60
   12216:	f204 3176 	addw	r1, r4, #886	; 0x376
   1221a:	4628      	mov	r0, r5
   1221c:	5d1a      	ldrb	r2, [r3, r4]
   1221e:	b289      	uxth	r1, r1
   12220:	f7f2 fdee 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
   12224:	3401      	adds	r4, #1
   12226:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12228:	42a3      	cmp	r3, r4
   1222a:	dcf3      	bgt.n	12214 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x394>
  return true;
   1222c:	2001      	movs	r0, #1
   1222e:	e653      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      reply[0] = pecStateStr[state]; reply[1] = 0; reply[2] = 0;
   12230:	7942      	ldrb	r2, [r0, #5]
   12232:	2300      	movs	r3, #0
   12234:	496e      	ldr	r1, [pc, #440]	; (123f0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x570>)
   12236:	707b      	strb	r3, [r7, #1]
   12238:	5c8a      	ldrb	r2, [r1, r2]
   1223a:	70bb      	strb	r3, [r7, #2]
   1223c:	703a      	strb	r2, [r7, #0]
        if (wormIndexSenseThisSecond) reply[1] = '.';
   1223e:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
   12242:	2800      	cmp	r0, #0
   12244:	d0f2      	beq.n	1222c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ac>
   12246:	232e      	movs	r3, #46	; 0x2e
   12248:	707b      	strb	r3, [r7, #1]
   1224a:	e645      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
        if (settings.state == PEC_NONE && mount.isTracking()) {
   1224c:	7943      	ldrb	r3, [r0, #5]
   1224e:	b92b      	cbnz	r3, 1225c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3dc>
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   12250:	4b68      	ldr	r3, [pc, #416]	; (123f4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x574>)
   12252:	f893 4080 	ldrb.w	r4, [r3, #128]	; 0x80
   12256:	2c01      	cmp	r4, #1
   12258:	f000 80b4 	beq.w	123c4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x544>
        } else *commandError = CE_0;
   1225c:	2301      	movs	r3, #1
  return true;
   1225e:	4618      	mov	r0, r3
        } else *commandError = CE_0;
   12260:	f888 3000 	strb.w	r3, [r8]
   12264:	e638      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
        settings.state = PEC_NONE;
   12266:	2000      	movs	r0, #0
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12268:	2306      	movs	r3, #6
   1226a:	1d32      	adds	r2, r6, #4
   1226c:	21f2      	movs	r1, #242	; 0xf2
        settings.state = PEC_NONE;
   1226e:	7170      	strb	r0, [r6, #5]
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12270:	485e      	ldr	r0, [pc, #376]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
   12272:	f7f2 fefb 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   12276:	2001      	movs	r0, #1
   12278:	e62e      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
        if (convert.atoi2(parameter, &i)) {
   1227a:	4629      	mov	r1, r5
   1227c:	2301      	movs	r3, #1
   1227e:	f10d 0206 	add.w	r2, sp, #6
   12282:	485d      	ldr	r0, [pc, #372]	; (123f8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x578>)
   12284:	f7f2 f8e6 	bl	4454 <Convert::atoi2(char*, short*, bool)>
   12288:	2800      	cmp	r0, #0
   1228a:	f43f af12 	beq.w	120b2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x232>
          if (i >= 0 && i < bufferSize) {
   1228e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
   12292:	2b00      	cmp	r3, #0
   12294:	f6ff af03 	blt.w	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
   12298:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1229a:	428b      	cmp	r3, r1
   1229c:	f6bf aeff 	bge.w	1209e <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x21e>
            char s[3] = "  ";
   122a0:	4a56      	ldr	r2, [pc, #344]	; (123fc <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x57c>)
              sprintf(s, "%02X", b);
   122a2:	4d57      	ldr	r5, [pc, #348]	; (12400 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x580>)
            char s[3] = "  ";
   122a4:	6812      	ldr	r2, [r2, #0]
   122a6:	f8ad 2008 	strh.w	r2, [sp, #8]
   122aa:	0c12      	lsrs	r2, r2, #16
   122ac:	f88d 200a 	strb.w	r2, [sp, #10]
            for (j = 0; j < 10; j++) {
   122b0:	e002      	b.n	122b8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x438>
              if (i + j < bufferSize) b = (int)buffer[i + j] + 128; else b = 128;
   122b2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
   122b6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   122b8:	4423      	add	r3, r4
   122ba:	2280      	movs	r2, #128	; 0x80
   122bc:	428b      	cmp	r3, r1
   122be:	da03      	bge.n	122c8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x448>
   122c0:	6e32      	ldr	r2, [r6, #96]	; 0x60
   122c2:	5cd2      	ldrb	r2, [r2, r3]
              sprintf(s, "%02X", b);
   122c4:	f082 0280 	eor.w	r2, r2, #128	; 0x80
   122c8:	4629      	mov	r1, r5
            for (j = 0; j < 10; j++) {
   122ca:	3401      	adds	r4, #1
              sprintf(s, "%02X", b);
   122cc:	a802      	add	r0, sp, #8
   122ce:	f00c fe0f 	bl	1eef0 <sprintf>
              strcat(reply, s);
   122d2:	a902      	add	r1, sp, #8
   122d4:	4638      	mov	r0, r7
   122d6:	f00c ffdd 	bl	1f294 <strcat>
            for (j = 0; j < 10; j++) {
   122da:	2c0a      	cmp	r4, #10
   122dc:	d1e9      	bne.n	122b2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x432>
   122de:	e6e1      	b.n	120a4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x224>
        while (s < 0) s += wormRotationSeconds;
   122e0:	2800      	cmp	r0, #0
   122e2:	f6bf af02 	bge.w	120ea <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
   122e6:	18d2      	adds	r2, r2, r3
   122e8:	d4fd      	bmi.n	122e6 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x466>
   122ea:	e6fe      	b.n	120ea <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x26a>
        if (parameter[0] == 0) i = bufferIndex; else conv_result = convert.atoi2(parameter, &i);
   122ec:	2301      	movs	r3, #1
   122ee:	aa02      	add	r2, sp, #8
   122f0:	4629      	mov	r1, r5
   122f2:	4841      	ldr	r0, [pc, #260]	; (123f8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x578>)
   122f4:	f7f2 f8ae 	bl	4454 <Convert::atoi2(char*, short*, bool)>
        if (conv_result) {
   122f8:	2800      	cmp	r0, #0
   122fa:	f43f aeda 	beq.w	120b2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x232>
          if (i >= 0 && i < bufferSize) {
   122fe:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
   12302:	e6ab      	b.n	1205c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1dc>
   12304:	2b5a      	cmp	r3, #90	; 0x5a
   12306:	f47f af4b 	bne.w	121a0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x320>
        for (int i = 0; i < bufferSize; i++) buffer[i] = 0;
   1230a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1230c:	2b00      	cmp	r3, #0
   1230e:	dd07      	ble.n	12320 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4a0>
   12310:	2300      	movs	r3, #0
   12312:	4619      	mov	r1, r3
   12314:	6e32      	ldr	r2, [r6, #96]	; 0x60
   12316:	54d1      	strb	r1, [r2, r3]
   12318:	3301      	adds	r3, #1
   1231a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1231c:	429a      	cmp	r2, r3
   1231e:	dcf9      	bgt.n	12314 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x494>
        settings.recorded = false;
   12320:	88b4      	ldrh	r4, [r6, #4]
   12322:	4632      	mov	r2, r6
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12324:	4831      	ldr	r0, [pc, #196]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
   12326:	2306      	movs	r3, #6
        settings.recorded = false;
   12328:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   1232c:	21f2      	movs	r1, #242	; 0xf2
        settings.recorded = false;
   1232e:	f822 4f04 	strh.w	r4, [r2, #4]!
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12332:	f7f2 fe9b 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   12336:	2001      	movs	r0, #1
   12338:	e5ce      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
        if (settings.state == PEC_NONE && settings.recorded) settings.state = PEC_READY_PLAY; else *commandError = CE_0;
   1233a:	7943      	ldrb	r3, [r0, #5]
   1233c:	b963      	cbnz	r3, 12358 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4d8>
   1233e:	7903      	ldrb	r3, [r0, #4]
   12340:	07db      	lsls	r3, r3, #31
   12342:	d509      	bpl.n	12358 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4d8>
   12344:	2301      	movs	r3, #1
   12346:	7143      	strb	r3, [r0, #5]
        nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12348:	4828      	ldr	r0, [pc, #160]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
   1234a:	2306      	movs	r3, #6
   1234c:	1d32      	adds	r2, r6, #4
   1234e:	21f2      	movs	r1, #242	; 0xf2
   12350:	f7f2 fe8c 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   12354:	2001      	movs	r0, #1
   12356:	e5bf      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
        if (settings.state == PEC_NONE && settings.recorded) settings.state = PEC_READY_PLAY; else *commandError = CE_0;
   12358:	2301      	movs	r3, #1
   1235a:	f888 3000 	strb.w	r3, [r8]
   1235e:	e7f3      	b.n	12348 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c8>
              j = buffer[i];
   12360:	6e32      	ldr	r2, [r6, #96]	; 0x60
              sprintf(reply,"%+04i", j);
   12362:	4638      	mov	r0, r7
   12364:	4927      	ldr	r1, [pc, #156]	; (12404 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x584>)
   12366:	56d2      	ldrsb	r2, [r2, r3]
   12368:	f00c fdc2 	bl	1eef0 <sprintf>
   1236c:	e69a      	b.n	120a4 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x224>
   1236e:	4926      	ldr	r1, [pc, #152]	; (12408 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x588>)
      sprintF(reply, "%0.6f", (axis1.getStepsPerMeasure()/RAD_DEG_RATIO_F)/240.0F);
   12370:	4638      	mov	r0, r7
   12372:	688b      	ldr	r3, [r1, #8]
   12374:	684a      	ldr	r2, [r1, #4]
   12376:	4925      	ldr	r1, [pc, #148]	; (1240c <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58c>)
   12378:	ed9f 6b17 	vldr	d6, [pc, #92]	; 123d8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x558>
   1237c:	ec43 2b15 	vmov	d5, r2, r3
   12380:	ed9f 7b17 	vldr	d7, [pc, #92]	; 123e0 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x560>
   12384:	ee85 0b06 	vdiv.f64	d0, d5, d6
   12388:	ee80 0b07 	vdiv.f64	d0, d0, d7
   1238c:	f7f1 fe54 	bl	4038 <sprintF(char*, char const*, double)>
      *numericReply = false;
   12390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return true;
   12392:	2001      	movs	r0, #1
      *numericReply = false;
   12394:	f883 8000 	strb.w	r8, [r3]
   12398:	e59e      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      nv.readBytes(NV_MOUNT_PEC_BASE, &temp, sizeof(PecSettings));
   1239a:	aa02      	add	r2, sp, #8
   1239c:	2306      	movs	r3, #6
   1239e:	21f2      	movs	r1, #242	; 0xf2
   123a0:	4812      	ldr	r0, [pc, #72]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
   123a2:	f7f2 fe39 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
      sprintf(reply, "%ld", temp.wormRotationSteps);
   123a6:	f8dd 200a 	ldr.w	r2, [sp, #10]
   123aa:	e71a      	b.n	121e2 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x362>
        PecSettings temp = settings;
   123ac:	6870      	ldr	r0, [r6, #4]
        nv.updateBytes(NV_MOUNT_PEC_BASE, &temp, sizeof(PecSettings));
   123ae:	2306      	movs	r3, #6
   123b0:	aa02      	add	r2, sp, #8
   123b2:	21f2      	movs	r1, #242	; 0xf2
        PecSettings temp = settings;
   123b4:	9002      	str	r0, [sp, #8]
        nv.updateBytes(NV_MOUNT_PEC_BASE, &temp, sizeof(PecSettings));
   123b6:	480d      	ldr	r0, [pc, #52]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
        temp.wormRotationSteps = l;
   123b8:	f8cd 400a 	str.w	r4, [sp, #10]
        nv.updateBytes(NV_MOUNT_PEC_BASE, &temp, sizeof(PecSettings));
   123bc:	f7f2 fe56 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   123c0:	2001      	movs	r0, #1
   123c2:	e589      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
          settings.state = PEC_READY_RECORD;
   123c4:	2103      	movs	r1, #3
          nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   123c6:	1d02      	adds	r2, r0, #4
   123c8:	2306      	movs	r3, #6
          settings.state = PEC_READY_RECORD;
   123ca:	7141      	strb	r1, [r0, #5]
          nv.updateBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   123cc:	21f2      	movs	r1, #242	; 0xf2
   123ce:	4807      	ldr	r0, [pc, #28]	; (123ec <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x56c>)
   123d0:	f7f2 fe4c 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   123d4:	4620      	mov	r0, r4
   123d6:	e57f      	b.n	11ed8 <Pec::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
   123d8:	20000000 	.word	0x20000000
   123dc:	404ca5dc 	.word	0x404ca5dc
   123e0:	00000000 	.word	0x00000000
   123e4:	406e0000 	.word	0x406e0000
   123e8:	20002248 	.word	0x20002248
   123ec:	20005e50 	.word	0x20005e50
   123f0:	20002130 	.word	0x20002130
   123f4:	200054e0 	.word	0x200054e0
   123f8:	200043d0 	.word	0x200043d0
   123fc:	20002138 	.word	0x20002138
   12400:	20002270 	.word	0x20002270
   12404:	20002120 	.word	0x20002120
   12408:	200050e8 	.word	0x200050e8
   1240c:	20002240 	.word	0x20002240

00012410 <Pec::init()>:
  void Pec::init() {
   12410:	b5f0      	push	{r4, r5, r6, r7, lr}
    inline bool hasValidKey() { return keyMatches; }
   12412:	4e65      	ldr	r6, [pc, #404]	; (125a8 <Pec::init()+0x198>)
   12414:	4604      	mov	r4, r0
    if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_PEC_BASE, sizeof(PecSettings))) {
   12416:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
  void Pec::init() {
   1241a:	ed2d 8b02 	vpush	{d8}
   1241e:	b087      	sub	sp, #28
    if (!nv.hasValidKey() || nv.isNull(NV_MOUNT_PEC_BASE, sizeof(PecSettings))) {
   12420:	b13b      	cbz	r3, 12432 <Pec::init()+0x22>
   12422:	2206      	movs	r2, #6
   12424:	21f2      	movs	r1, #242	; 0xf2
   12426:	4630      	mov	r0, r6
   12428:	f7f2 fddc 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
   1242c:	2800      	cmp	r0, #0
   1242e:	f000 8097 	beq.w	12560 <Pec::init()+0x150>
      nv.writeBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12432:	1d22      	adds	r2, r4, #4
    inline void writeBytes(uint16_t i, void *j, int16_t count) { updateBytes(i, j, count); }
   12434:	2306      	movs	r3, #6
   12436:	21f2      	movs	r1, #242	; 0xf2
   12438:	485b      	ldr	r0, [pc, #364]	; (125a8 <Pec::init()+0x198>)
   1243a:	9205      	str	r2, [sp, #20]
   1243c:	f7f2 fe16 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   12440:	9a05      	ldr	r2, [sp, #20]
    nv.readBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12442:	2306      	movs	r3, #6
   12444:	21f2      	movs	r1, #242	; 0xf2
   12446:	4858      	ldr	r0, [pc, #352]	; (125a8 <Pec::init()+0x198>)
   12448:	f7f2 fde6 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
   1244c:	4957      	ldr	r1, [pc, #348]	; (125ac <Pec::init()+0x19c>)
    stepsPerSiderealSecond = (axis1.getStepsPerMeasure()/RAD_DEG_RATIO)/240.0L;
   1244e:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 12588 <Pec::init()+0x178>
   12452:	688b      	ldr	r3, [r1, #8]
   12454:	684a      	ldr	r2, [r1, #4]
   12456:	ec43 2b16 	vmov	d6, r2, r3
   1245a:	ee86 6b05 	vdiv.f64	d6, d6, d5
   1245e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 12590 <Pec::init()+0x180>
   12462:	ee86 8b07 	vdiv.f64	d8, d6, d7
    stepsPerSiderealSecondI = lroundf(stepsPerSiderealSecond);
   12466:	eeb7 0bc8 	vcvt.f32.f64	s0, d8
    stepsPerSiderealSecond = (axis1.getStepsPerMeasure()/RAD_DEG_RATIO)/240.0L;
   1246a:	ed84 8b04 	vstr	d8, [r4, #16]
    stepsPerSiderealSecondI = lroundf(stepsPerSiderealSecond);
   1246e:	f009 fa75 	bl	1b95c <lroundf>
    wormRotationSeconds = round(settings.wormRotationSteps/stepsPerSiderealSecond);
   12472:	f8d4 3006 	ldr.w	r3, [r4, #6]
    stepsPerSiderealSecondI = lroundf(stepsPerSiderealSecond);
   12476:	61a0      	str	r0, [r4, #24]
    wormRotationSeconds = round(settings.wormRotationSteps/stepsPerSiderealSecond);
   12478:	ee05 3a10 	vmov	s10, r3
   1247c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    stepsPerMicroSecond = (stepsPerSiderealSecond*SIDEREAL_RATIO)/1000000.0L;
   12480:	ed9f 6b45 	vldr	d6, [pc, #276]	; 12598 <Pec::init()+0x188>
    wormRotationSeconds = round(settings.wormRotationSteps/stepsPerSiderealSecond);
   12484:	ee85 7b08 	vdiv.f64	d7, d5, d8
    stepsPerMicroSecond = (stepsPerSiderealSecond*SIDEREAL_RATIO)/1000000.0L;
   12488:	ee28 6b06 	vmul.f64	d6, d8, d6
   1248c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 125a0 <Pec::init()+0x190>
   12490:	ee86 5b04 	vdiv.f64	d5, d6, d4
    wormRotationSeconds = round(settings.wormRotationSteps/stepsPerSiderealSecond);
   12494:	feb8 7b47 	vrinta.f64	d7, d7
   12498:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   1249c:	ee17 5a90 	vmov	r5, s15
   124a0:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
    bufferSize = wormRotationSeconds;
   124a4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if (bufferSize > 0) {
   124a8:	2d00      	cmp	r5, #0
    stepsPerMicroSecond = (stepsPerSiderealSecond*SIDEREAL_RATIO)/1000000.0L;
   124aa:	ed84 5b08 	vstr	d5, [r4, #32]
    if (bufferSize > 0) {
   124ae:	dd06      	ble.n	124be <Pec::init()+0xae>
      if (bufferSize < 61) {
   124b0:	2d3c      	cmp	r5, #60	; 0x3c
   124b2:	dc12      	bgt.n	124da <Pec::init()+0xca>
        initError.value = true;
   124b4:	4a3e      	ldr	r2, [pc, #248]	; (125b0 <Pec::init()+0x1a0>)
   124b6:	7813      	ldrb	r3, [r2, #0]
   124b8:	f043 0302 	orr.w	r3, r3, #2
   124bc:	7013      	strb	r3, [r2, #0]
    if (bufferSize <= 0) { bufferSize = 0; settings.state = PEC_NONE; settings.recorded = false; }
   124be:	2100      	movs	r1, #0
   124c0:	88a2      	ldrh	r2, [r4, #4]
   124c2:	460b      	mov	r3, r1
   124c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   124c8:	62a1      	str	r1, [r4, #40]	; 0x28
   124ca:	80a2      	strh	r2, [r4, #4]
    if (wormRotationSeconds > bufferSize) wormRotationSeconds = bufferSize;
   124cc:	429d      	cmp	r5, r3
   124ce:	bfc8      	it	gt
   124d0:	6463      	strgt	r3, [r4, #68]	; 0x44
  }
   124d2:	b007      	add	sp, #28
   124d4:	ecbd 8b02 	vpop	{d8}
   124d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (bufferSize + NV_PEC_BUFFER_BASE >= nv.size - 1) {
   124da:	88b3      	ldrh	r3, [r6, #4]
   124dc:	f205 3276 	addw	r2, r5, #886	; 0x376
   124e0:	3b01      	subs	r3, #1
   124e2:	429a      	cmp	r2, r3
   124e4:	dae6      	bge.n	124b4 <Pec::init()+0xa4>
        buffer = (int8_t*)malloc(bufferSize * sizeof(*buffer));
   124e6:	ee17 0a90 	vmov	r0, s15
   124ea:	f00b f84f 	bl	1d58c <malloc>
   124ee:	6620      	str	r0, [r4, #96]	; 0x60
        if (buffer == NULL) {
   124f0:	2800      	cmp	r0, #0
   124f2:	d0df      	beq.n	124b4 <Pec::init()+0xa4>
          for (int i = 0; i < bufferSize; i++) {
   124f4:	2500      	movs	r5, #0
          bool bufferNeedsInit = true;
   124f6:	2601      	movs	r6, #1
            buffer[i] = nv.read(NV_PEC_BUFFER_BASE + i);
   124f8:	4f2b      	ldr	r7, [pc, #172]	; (125a8 <Pec::init()+0x198>)
   124fa:	f205 3176 	addw	r1, r5, #886	; 0x376
   124fe:	4638      	mov	r0, r7
   12500:	b289      	uxth	r1, r1
   12502:	f7f2 fd3f 	bl	4f84 <NonVolatileStorage::read(unsigned short)>
   12506:	6e23      	ldr	r3, [r4, #96]	; 0x60
   12508:	5558      	strb	r0, [r3, r5]
            if (buffer[i] != 0) bufferNeedsInit = false;
   1250a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1250c:	575b      	ldrsb	r3, [r3, r5]
          for (int i = 0; i < bufferSize; i++) {
   1250e:	3501      	adds	r5, #1
            if (buffer[i] != 0) bufferNeedsInit = false;
   12510:	2b00      	cmp	r3, #0
          for (int i = 0; i < bufferSize; i++) {
   12512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (buffer[i] != 0) bufferNeedsInit = false;
   12514:	bf18      	it	ne
   12516:	2600      	movne	r6, #0
          for (int i = 0; i < bufferSize; i++) {
   12518:	42ab      	cmp	r3, r5
   1251a:	dcee      	bgt.n	124fa <Pec::init()+0xea>
          if (bufferNeedsInit) for (int i = 0; i < bufferSize; i++) nv.write(NV_PEC_BUFFER_BASE + i, (int8_t)0);
   1251c:	bb16      	cbnz	r6, 12564 <Pec::init()+0x154>
          if (settings.state > PEC_RECORD) {
   1251e:	7963      	ldrb	r3, [r4, #5]
   12520:	2b04      	cmp	r3, #4
   12522:	d904      	bls.n	1252e <Pec::init()+0x11e>
            initError.value = true;
   12524:	4a22      	ldr	r2, [pc, #136]	; (125b0 <Pec::init()+0x1a0>)
   12526:	7813      	ldrb	r3, [r2, #0]
   12528:	f043 0302 	orr.w	r3, r3, #2
   1252c:	7013      	strb	r3, [r2, #0]
              park.settings.wormSensePositionSteps = 0;
   1252e:	2200      	movs	r2, #0
   12530:	4b20      	ldr	r3, [pc, #128]	; (125b4 <Pec::init()+0x1a4>)
          monitorHandle = tasks.add(10, 0, true, 3, pecWrapper, "MntPec");
   12532:	4921      	ldr	r1, [pc, #132]	; (125b8 <Pec::init()+0x1a8>)
              park.settings.wormSensePositionSteps = 0;
   12534:	731a      	strb	r2, [r3, #12]
   12536:	735a      	strb	r2, [r3, #13]
   12538:	739a      	strb	r2, [r3, #14]
   1253a:	73da      	strb	r2, [r3, #15]
          monitorHandle = tasks.add(10, 0, true, 3, pecWrapper, "MntPec");
   1253c:	2301      	movs	r3, #1
   1253e:	9102      	str	r1, [sp, #8]
   12540:	2103      	movs	r1, #3
   12542:	481e      	ldr	r0, [pc, #120]	; (125bc <Pec::init()+0x1ac>)
            settings.state = PEC_NONE;
   12544:	7162      	strb	r2, [r4, #5]
          monitorHandle = tasks.add(10, 0, true, 3, pecWrapper, "MntPec");
   12546:	e9cd 1000 	strd	r1, r0, [sp]
   1254a:	210a      	movs	r1, #10
   1254c:	481c      	ldr	r0, [pc, #112]	; (125c0 <Pec::init()+0x1b0>)
   1254e:	f7f3 fe45 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
    if (bufferSize <= 0) { bufferSize = 0; settings.state = PEC_NONE; settings.recorded = false; }
   12552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (wormRotationSeconds > bufferSize) wormRotationSeconds = bufferSize;
   12554:	6c65      	ldr	r5, [r4, #68]	; 0x44
    if (bufferSize <= 0) { bufferSize = 0; settings.state = PEC_NONE; settings.recorded = false; }
   12556:	2b00      	cmp	r3, #0
          monitorHandle = tasks.add(10, 0, true, 3, pecWrapper, "MntPec");
   12558:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    if (bufferSize <= 0) { bufferSize = 0; settings.state = PEC_NONE; settings.recorded = false; }
   1255c:	dcb6      	bgt.n	124cc <Pec::init()+0xbc>
   1255e:	e7ae      	b.n	124be <Pec::init()+0xae>
      nv.writeBytes(NV_MOUNT_PEC_BASE, &settings, sizeof(PecSettings));
   12560:	1d22      	adds	r2, r4, #4
   12562:	e76e      	b.n	12442 <Pec::init()+0x32>
          if (bufferNeedsInit) for (int i = 0; i < bufferSize; i++) nv.write(NV_PEC_BUFFER_BASE + i, (int8_t)0);
   12564:	2b00      	cmp	r3, #0
   12566:	ddda      	ble.n	1251e <Pec::init()+0x10e>
   12568:	2500      	movs	r5, #0
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
   1256a:	4e0f      	ldr	r6, [pc, #60]	; (125a8 <Pec::init()+0x198>)
   1256c:	f205 3176 	addw	r1, r5, #886	; 0x376
   12570:	2200      	movs	r2, #0
   12572:	4630      	mov	r0, r6
   12574:	3501      	adds	r5, #1
   12576:	b289      	uxth	r1, r1
   12578:	f7f2 fc42 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
   1257c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1257e:	42ab      	cmp	r3, r5
   12580:	dcf4      	bgt.n	1256c <Pec::init()+0x15c>
   12582:	e7cc      	b.n	1251e <Pec::init()+0x10e>
   12584:	f3af 8000 	nop.w
   12588:	1a63c1f8 	.word	0x1a63c1f8
   1258c:	404ca5dc 	.word	0x404ca5dc
   12590:	00000000 	.word	0x00000000
   12594:	406e0000 	.word	0x406e0000
   12598:	e7f1efef 	.word	0xe7f1efef
   1259c:	3ff00b36 	.word	0x3ff00b36
   125a0:	00000000 	.word	0x00000000
   125a4:	412e8480 	.word	0x412e8480
   125a8:	20005e50 	.word	0x20005e50
   125ac:	200050e8 	.word	0x200050e8
   125b0:	20005ccc 	.word	0x20005ccc
   125b4:	20005ea8 	.word	0x20005ea8
   125b8:	20002104 	.word	0x20002104
   125bc:	00012ad9 	.word	0x00012ad9
   125c0:	2000634c 	.word	0x2000634c

000125c4 <Pec::cleanup()>:
      rate = 0.0F;
    } 
  }

  // applies low pass filter to smooth noise in PEC data and linear regression
  void Pec::cleanup() {
   125c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    VLF("MSG: Mount, applying low pass filter to PEC data");
    int i,J1,J4,J9,J17;
    for (int scc = 3; scc < wormRotationSeconds + 3; scc++) {
   125c8:	6c46      	ldr	r6, [r0, #68]	; 0x44
   125ca:	2e00      	cmp	r6, #0
  void Pec::cleanup() {
   125cc:	ed2d 8b06 	vpush	{d8-d10}
    for (int scc = 3; scc < wormRotationSeconds + 3; scc++) {
   125d0:	f340 80e3 	ble.w	1279a <Pec::cleanup()+0x1d6>
   125d4:	4604      	mov	r4, r0
   125d6:	2503      	movs	r5, #3
      i = buffer[scc % wormRotationSeconds];

      J1 = lroundf(i*0.01F);
   125d8:	ed9f aa72 	vldr	s20, [pc, #456]	; 127a4 <Pec::cleanup()+0x1e0>
      J4 = lroundf(i*0.04F);
   125dc:	eddf 9a72 	vldr	s19, [pc, #456]	; 127a8 <Pec::cleanup()+0x1e4>
      J9 = lroundf(i*0.09F);
   125e0:	ed9f 9a72 	vldr	s18, [pc, #456]	; 127ac <Pec::cleanup()+0x1e8>
      J17 = lroundf(i*0.17F);
   125e4:	eddf 8a72 	vldr	s17, [pc, #456]	; 127b0 <Pec::cleanup()+0x1ec>
      i = buffer[scc % wormRotationSeconds];
   125e8:	f8d4 8060 	ldr.w	r8, [r4, #96]	; 0x60
      buffer[(scc - 4) % wormRotationSeconds] = (buffer[(scc - 4) % wormRotationSeconds]) + J1;
   125ec:	f1a5 0904 	sub.w	r9, r5, #4
      i = buffer[scc % wormRotationSeconds];
   125f0:	fb95 f3f6 	sdiv	r3, r5, r6
   125f4:	fb06 5313 	mls	r3, r6, r3, r5
      J1 = lroundf(i*0.01F);
   125f8:	f918 3003 	ldrsb.w	r3, [r8, r3]
   125fc:	ee08 3a10 	vmov	s16, r3
   12600:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   12604:	ee28 0a0a 	vmul.f32	s0, s16, s20
   12608:	f009 f9a8 	bl	1b95c <lroundf>
      J4 = lroundf(i*0.04F);
   1260c:	ee28 0a29 	vmul.f32	s0, s16, s19
      J1 = lroundf(i*0.01F);
   12610:	4683      	mov	fp, r0
      J4 = lroundf(i*0.04F);
   12612:	f009 f9a3 	bl	1b95c <lroundf>
      J9 = lroundf(i*0.09F);
   12616:	ee28 0a09 	vmul.f32	s0, s16, s18
      J4 = lroundf(i*0.04F);
   1261a:	4682      	mov	sl, r0
      J9 = lroundf(i*0.09F);
   1261c:	f009 f99e 	bl	1b95c <lroundf>
      J17 = lroundf(i*0.17F);
   12620:	ee28 0a28 	vmul.f32	s0, s16, s17
      J9 = lroundf(i*0.09F);
   12624:	4607      	mov	r7, r0
      J17 = lroundf(i*0.17F);
   12626:	f009 f999 	bl	1b95c <lroundf>
      buffer[(scc - 4) % wormRotationSeconds] = (buffer[(scc - 4) % wormRotationSeconds]) + J1;
   1262a:	fa5f f38b 	uxtb.w	r3, fp
      buffer[(scc - 3) % wormRotationSeconds] = (buffer[(scc - 3) % wormRotationSeconds]) + J4;
   1262e:	f1a5 0c03 	sub.w	ip, r5, #3
      buffer[(scc - 2) % wormRotationSeconds] = (buffer[(scc - 2) % wormRotationSeconds]) + J9;
      buffer[(scc - 1) % wormRotationSeconds] = (buffer[(scc - 1) % wormRotationSeconds]) + J17;
   12632:	b2c1      	uxtb	r1, r0
   12634:	462a      	mov	r2, r5
      buffer[(scc - 3) % wormRotationSeconds] = (buffer[(scc - 3) % wormRotationSeconds]) + J4;
   12636:	fa5f fe8a 	uxtb.w	lr, sl
      buffer[(scc - 2) % wormRotationSeconds] = (buffer[(scc - 2) % wormRotationSeconds]) + J9;
   1263a:	b2ff      	uxtb	r7, r7
      buffer[(scc - 4) % wormRotationSeconds] = (buffer[(scc - 4) % wormRotationSeconds]) + J1;
   1263c:	fb99 fbf6 	sdiv	fp, r9, r6
   12640:	fb06 901b 	mls	r0, r6, fp, r9
   12644:	f818 6000 	ldrb.w	r6, [r8, r0]
   12648:	441e      	add	r6, r3
   1264a:	f808 6000 	strb.w	r6, [r8, r0]
      buffer[(scc - 2) % wormRotationSeconds] = (buffer[(scc - 2) % wormRotationSeconds]) + J9;
   1264e:	1eae      	subs	r6, r5, #2
      buffer[(scc - 3) % wormRotationSeconds] = (buffer[(scc - 3) % wormRotationSeconds]) + J4;
   12650:	6c60      	ldr	r0, [r4, #68]	; 0x44
   12652:	f8d4 8060 	ldr.w	r8, [r4, #96]	; 0x60
   12656:	fb9c f9f0 	sdiv	r9, ip, r0
   1265a:	fb00 c019 	mls	r0, r0, r9, ip
   1265e:	f818 c000 	ldrb.w	ip, [r8, r0]
   12662:	44f4      	add	ip, lr
   12664:	f808 c000 	strb.w	ip, [r8, r0]
      buffer[(scc - 1) % wormRotationSeconds] = (buffer[(scc - 1) % wormRotationSeconds]) + J17;
   12668:	1e68      	subs	r0, r5, #1
      buffer[(scc - 2) % wormRotationSeconds] = (buffer[(scc - 2) % wormRotationSeconds]) + J9;
   1266a:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
   1266e:	f8d4 8060 	ldr.w	r8, [r4, #96]	; 0x60
   12672:	fb96 f9fc 	sdiv	r9, r6, ip
   12676:	fb0c 6619 	mls	r6, ip, r9, r6
   1267a:	f818 c006 	ldrb.w	ip, [r8, r6]
   1267e:	44bc      	add	ip, r7
   12680:	f808 c006 	strb.w	ip, [r8, r6]
      buffer[(scc - 1) % wormRotationSeconds] = (buffer[(scc - 1) % wormRotationSeconds]) + J17;
   12684:	6c66      	ldr	r6, [r4, #68]	; 0x44
   12686:	f8d4 8060 	ldr.w	r8, [r4, #96]	; 0x60
   1268a:	fb90 fcf6 	sdiv	ip, r0, r6
   1268e:	fb06 001c 	mls	r0, r6, ip, r0
      buffer[(scc    ) % wormRotationSeconds] = (buffer[(scc    ) % wormRotationSeconds]) - (J17+J17+J9+J9+J4+J4+J1+J1);
   12692:	eb03 0c4e 	add.w	ip, r3, lr, lsl #1
      buffer[(scc - 1) % wormRotationSeconds] = (buffer[(scc - 1) % wormRotationSeconds]) + J17;
   12696:	f818 6000 	ldrb.w	r6, [r8, r0]
      buffer[(scc    ) % wormRotationSeconds] = (buffer[(scc    ) % wormRotationSeconds]) - (J17+J17+J9+J9+J4+J4+J1+J1);
   1269a:	449c      	add	ip, r3
      buffer[(scc - 1) % wormRotationSeconds] = (buffer[(scc - 1) % wormRotationSeconds]) + J17;
   1269c:	440e      	add	r6, r1
      buffer[(scc    ) % wormRotationSeconds] = (buffer[(scc    ) % wormRotationSeconds]) - (J17+J17+J9+J9+J4+J4+J1+J1);
   1269e:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
      buffer[(scc - 1) % wormRotationSeconds] = (buffer[(scc - 1) % wormRotationSeconds]) + J17;
   126a2:	f808 6000 	strb.w	r6, [r8, r0]
      buffer[(scc    ) % wormRotationSeconds] = (buffer[(scc    ) % wormRotationSeconds]) - (J17+J17+J9+J9+J4+J4+J1+J1);
   126a6:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
   126aa:	6c60      	ldr	r0, [r4, #68]	; 0x44
   126ac:	f8d4 8060 	ldr.w	r8, [r4, #96]	; 0x60
   126b0:	fb95 f6f0 	sdiv	r6, r5, r0
   126b4:	fb00 5616 	mls	r6, r0, r6, r5
      buffer[(scc + 1) % wormRotationSeconds] = (buffer[(scc + 1) % wormRotationSeconds]) + J17;
   126b8:	3501      	adds	r5, #1
      buffer[(scc    ) % wormRotationSeconds] = (buffer[(scc    ) % wormRotationSeconds]) - (J17+J17+J9+J9+J4+J4+J1+J1);
   126ba:	f818 0006 	ldrb.w	r0, [r8, r6]
   126be:	eba0 0c0c 	sub.w	ip, r0, ip
      buffer[(scc + 2) % wormRotationSeconds] = (buffer[(scc + 2) % wormRotationSeconds]) + J9;
   126c2:	1c90      	adds	r0, r2, #2
      buffer[(scc    ) % wormRotationSeconds] = (buffer[(scc    ) % wormRotationSeconds]) - (J17+J17+J9+J9+J4+J4+J1+J1);
   126c4:	f808 c006 	strb.w	ip, [r8, r6]
      buffer[(scc + 1) % wormRotationSeconds] = (buffer[(scc + 1) % wormRotationSeconds]) + J17;
   126c8:	6c66      	ldr	r6, [r4, #68]	; 0x44
   126ca:	f8d4 8060 	ldr.w	r8, [r4, #96]	; 0x60
   126ce:	fb95 fcf6 	sdiv	ip, r5, r6
   126d2:	fb06 5c1c 	mls	ip, r6, ip, r5
   126d6:	f818 600c 	ldrb.w	r6, [r8, ip]
   126da:	440e      	add	r6, r1
      buffer[(scc + 3) % wormRotationSeconds] = (buffer[(scc + 3) % wormRotationSeconds]) + J4;
   126dc:	1cd1      	adds	r1, r2, #3
      buffer[(scc + 4) % wormRotationSeconds] = (buffer[(scc + 4) % wormRotationSeconds]) + J1;
   126de:	3204      	adds	r2, #4
      buffer[(scc + 1) % wormRotationSeconds] = (buffer[(scc + 1) % wormRotationSeconds]) + J17;
   126e0:	f808 600c 	strb.w	r6, [r8, ip]
      buffer[(scc + 2) % wormRotationSeconds] = (buffer[(scc + 2) % wormRotationSeconds]) + J9;
   126e4:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
   126e8:	6e26      	ldr	r6, [r4, #96]	; 0x60
   126ea:	fb90 f8fc 	sdiv	r8, r0, ip
   126ee:	fb0c 0018 	mls	r0, ip, r8, r0
   126f2:	f816 c000 	ldrb.w	ip, [r6, r0]
   126f6:	4467      	add	r7, ip
   126f8:	5437      	strb	r7, [r6, r0]
      buffer[(scc + 3) % wormRotationSeconds] = (buffer[(scc + 3) % wormRotationSeconds]) + J4;
   126fa:	6c66      	ldr	r6, [r4, #68]	; 0x44
   126fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   126fe:	fb91 f7f6 	sdiv	r7, r1, r6
   12702:	fb06 1117 	mls	r1, r6, r7, r1
   12706:	5c46      	ldrb	r6, [r0, r1]
   12708:	44b6      	add	lr, r6
   1270a:	f800 e001 	strb.w	lr, [r0, r1]
      buffer[(scc + 4) % wormRotationSeconds] = (buffer[(scc + 4) % wormRotationSeconds]) + J1;
   1270e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   12710:	6e21      	ldr	r1, [r4, #96]	; 0x60
   12712:	fb92 f6f0 	sdiv	r6, r2, r0
   12716:	fb00 2216 	mls	r2, r0, r6, r2
   1271a:	5c88      	ldrb	r0, [r1, r2]
   1271c:	4403      	add	r3, r0
   1271e:	548b      	strb	r3, [r1, r2]
    for (int scc = 3; scc < wormRotationSeconds + 3; scc++) {
   12720:	6c66      	ldr	r6, [r4, #68]	; 0x44
   12722:	1cb3      	adds	r3, r6, #2
   12724:	429d      	cmp	r5, r3
   12726:	f77f af5f 	ble.w	125e8 <Pec::cleanup()+0x24>

    // linear regression
    VLF("MSG: Mount, applying linear regression to PEC data");
    // the number of steps added should equal the number of steps subtracted (from the cycle)
    // first, determine how far we've moved ahead or backward in steps
    long stepsSum = 0; for (int scc = 0; scc < wormRotationSeconds; scc++) stepsSum += buffer[scc];
   1272a:	2e00      	cmp	r6, #0
   1272c:	dd35      	ble.n	1279a <Pec::cleanup()+0x1d6>
   1272e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   12730:	2200      	movs	r2, #0
   12732:	3b01      	subs	r3, #1
   12734:	1998      	adds	r0, r3, r6
   12736:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
   1273a:	4298      	cmp	r0, r3
   1273c:	440a      	add	r2, r1
   1273e:	d1fa      	bne.n	12736 <Pec::cleanup()+0x172>

    // this is the correction coefficient for a given location in the sequence
    float Ccf = (float)stepsSum/wormRotationSeconds;
   12740:	ee07 2a90 	vmov	s15, r2
   12744:	2500      	movs	r5, #0
   12746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1274a:	ee07 6a90 	vmov	s15, r6
   1274e:	4628      	mov	r0, r5
   12750:	462f      	mov	r7, r5
   12752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12756:	ee87 8a27 	vdiv.f32	s16, s14, s15
    // now, apply the correction to the sequence to make the PEC adjustments null out
    // this process was simulated in a spreadsheet and the roundoff error might leave us at +/- a step which is tacked on at the beginning
    long lp2 = 0; stepsSum = 0; 
    for (int scc = 0; scc < wormRotationSeconds; scc++) {
      // the correction, "now"
      long lp1 = lroundf(-scc*Ccf);
   1275a:	426b      	negs	r3, r5
   1275c:	4606      	mov	r6, r0
   1275e:	ee00 3a10 	vmov	s0, r3
   12762:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   12766:	ee20 0a08 	vmul.f32	s0, s0, s16
   1276a:	f009 f8f7 	bl	1b95c <lroundf>
      
      // if the correction increases or decreases then add or subtract that many steps
      buffer[scc] = buffer[scc] + (lp1 - lp2);
   1276e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   12770:	1b86      	subs	r6, r0, r6
   12772:	5d53      	ldrb	r3, [r2, r5]
   12774:	4433      	add	r3, r6
   12776:	5553      	strb	r3, [r2, r5]

      // sum the values for a final adjustment, if necessary
      stepsSum += buffer[scc];
   12778:	6e23      	ldr	r3, [r4, #96]	; 0x60
    for (int scc = 0; scc < wormRotationSeconds; scc++) {
   1277a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      stepsSum += buffer[scc];
   1277c:	5759      	ldrsb	r1, [r3, r5]
    for (int scc = 0; scc < wormRotationSeconds; scc++) {
   1277e:	3501      	adds	r5, #1
   12780:	42aa      	cmp	r2, r5
      stepsSum += buffer[scc];
   12782:	440f      	add	r7, r1
    for (int scc = 0; scc < wormRotationSeconds; scc++) {
   12784:	dce9      	bgt.n	1275a <Pec::cleanup()+0x196>
      lp2 = lp1;
    }
    buffer[0] -= stepsSum;
   12786:	781a      	ldrb	r2, [r3, #0]

    // a reality check, make sure the buffer data looks good, if not forget it
    if (stepsSum < -2 || stepsSum > 2) {
   12788:	1cb9      	adds	r1, r7, #2
    buffer[0] -= stepsSum;
   1278a:	1bd2      	subs	r2, r2, r7
    if (stepsSum < -2 || stepsSum > 2) {
   1278c:	2904      	cmp	r1, #4
    buffer[0] -= stepsSum;
   1278e:	701a      	strb	r2, [r3, #0]
    if (stepsSum < -2 || stepsSum > 2) {
   12790:	d903      	bls.n	1279a <Pec::cleanup()+0x1d6>
      DF("ERR: Pec::cleanup(), linear regression residual "); D(stepsSum);
      if (stepsSum > 2) { DLF(" > threshold of 2"); } else { DLF(" < threshold of -2"); }
      settings.recorded = false;
   12792:	88a3      	ldrh	r3, [r4, #4]
   12794:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   12798:	80a3      	strh	r3, [r4, #4]
      settings.state = PEC_NONE;
    }
  }
   1279a:	ecbd 8b06 	vpop	{d8-d10}
   1279e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a2:	bf00      	nop
   127a4:	3c23d70a 	.word	0x3c23d70a
   127a8:	3d23d70a 	.word	0x3d23d70a
   127ac:	3db851ec 	.word	0x3db851ec
   127b0:	3e2e147b 	.word	0x3e2e147b
   127b4:	00000000 	.word	0x00000000

000127b8 <Pec::poll() [clone .part.0]>:
   127b8:	4bb7      	ldr	r3, [pc, #732]	; (12a98 <Pec::poll() [clone .part.0]+0x2e0>)
  void Pec::poll() {
   127ba:	b570      	push	{r4, r5, r6, lr}
    if (!mount.isTracking() || guide.state > GU_PULSE_GUIDE) { disable(); return; }
   127bc:	f893 5080 	ldrb.w	r5, [r3, #128]	; 0x80
  void Pec::poll() {
   127c0:	4604      	mov	r4, r0
    if (!mount.isTracking() || guide.state > GU_PULSE_GUIDE) { disable(); return; }
   127c2:	2d01      	cmp	r5, #1
  void Pec::poll() {
   127c4:	ed2d 8b04 	vpush	{d8-d9}
    if (!mount.isTracking() || guide.state > GU_PULSE_GUIDE) { disable(); return; }
   127c8:	d103      	bne.n	127d2 <Pec::poll() [clone .part.0]+0x1a>
   127ca:	4eb4      	ldr	r6, [pc, #720]	; (12a9c <Pec::poll() [clone .part.0]+0x2e4>)
   127cc:	7833      	ldrb	r3, [r6, #0]
   127ce:	2b01      	cmp	r3, #1
   127d0:	d913      	bls.n	127fa <Pec::poll() [clone .part.0]+0x42>
    if (settings.state == PEC_RECORD || settings.state == PEC_READY_RECORD) {
   127d2:	7963      	ldrb	r3, [r4, #5]
   127d4:	1eda      	subs	r2, r3, #3
   127d6:	2a01      	cmp	r2, #1
   127d8:	d908      	bls.n	127ec <Pec::poll() [clone .part.0]+0x34>
    if (settings.state == PEC_PLAY) {
   127da:	2b02      	cmp	r3, #2
   127dc:	d103      	bne.n	127e6 <Pec::poll() [clone .part.0]+0x2e>
      settings.state = PEC_READY_PLAY;
   127de:	2201      	movs	r2, #1
      rate = 0.0F;
   127e0:	2300      	movs	r3, #0
      settings.state = PEC_READY_PLAY;
   127e2:	7162      	strb	r2, [r4, #5]
      rate = 0.0F;
   127e4:	6023      	str	r3, [r4, #0]
  }
   127e6:	ecbd 8b04 	vpop	{d8-d9}
   127ea:	bd70      	pop	{r4, r5, r6, pc}
      settings.state = PEC_NONE;
   127ec:	2200      	movs	r2, #0
      rate = 0.0F;
   127ee:	2300      	movs	r3, #0
  }
   127f0:	ecbd 8b04 	vpop	{d8-d9}
      settings.state = PEC_NONE;
   127f4:	7162      	strb	r2, [r4, #5]
      rate = 0.0F;
   127f6:	6023      	str	r3, [r4, #0]
  }
   127f8:	bd70      	pop	{r4, r5, r6, pc}
    inline long getMotorPositionSteps() { return motor->getMotorPositionSteps(); }
   127fa:	4ba9      	ldr	r3, [pc, #676]	; (12aa0 <Pec::poll() [clone .part.0]+0x2e8>)
   127fc:	6818      	ldr	r0, [r3, #0]
   127fe:	f7ef fb6d 	bl	1edc <Motor::getMotorPositionSteps()>
      wormSenseFirst = true;
   12802:	4aa8      	ldr	r2, [pc, #672]	; (12aa4 <Pec::poll() [clone .part.0]+0x2ec>)
   12804:	4603      	mov	r3, r0
   12806:	7015      	strb	r5, [r2, #0]
    if (settings.state == PEC_NONE) { rate = 0.0F; return; }
   12808:	7962      	ldrb	r2, [r4, #5]
   1280a:	2a00      	cmp	r2, #0
   1280c:	d05e      	beq.n	128cc <Pec::poll() [clone .part.0]+0x114>
      static long lastWormRotationSteps = wormRotationSteps;
   1280e:	4aa6      	ldr	r2, [pc, #664]	; (12aa8 <Pec::poll() [clone .part.0]+0x2f0>)
   12810:	6811      	ldr	r1, [r2, #0]
   12812:	07c9      	lsls	r1, r1, #31
   12814:	f140 8088 	bpl.w	12928 <Pec::poll() [clone .part.0]+0x170>
      if (wormRotationSteps - lastWormRotationSteps < 0) {
   12818:	4aa4      	ldr	r2, [pc, #656]	; (12aac <Pec::poll() [clone .part.0]+0x2f4>)
   1281a:	6811      	ldr	r1, [r2, #0]
    wormRotationSteps = axis1Steps - wormSenseSteps;
   1281c:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1281e:	1a9b      	subs	r3, r3, r2
    while (wormRotationSteps >= settings.wormRotationSteps) wormRotationSteps -= settings.wormRotationSteps;
   12820:	f8d4 2006 	ldr.w	r2, [r4, #6]
   12824:	4293      	cmp	r3, r2
    wormRotationSteps = axis1Steps - wormSenseSteps;
   12826:	6323      	str	r3, [r4, #48]	; 0x30
    while (wormRotationSteps >= settings.wormRotationSteps) wormRotationSteps -= settings.wormRotationSteps;
   12828:	db4b      	blt.n	128c2 <Pec::poll() [clone .part.0]+0x10a>
   1282a:	1a9b      	subs	r3, r3, r2
   1282c:	4293      	cmp	r3, r2
   1282e:	dafc      	bge.n	1282a <Pec::poll() [clone .part.0]+0x72>
   12830:	6323      	str	r3, [r4, #48]	; 0x30
      if (wormRotationSteps - lastWormRotationSteps < 0) {
   12832:	428b      	cmp	r3, r1
   12834:	bfac      	ite	ge
   12836:	2300      	movge	r3, #0
   12838:	2301      	movlt	r3, #1
   1283a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    noInterrupts();
   1283e:	b672      	cpsid	i
    unsigned long lastFs = fracLAST;
   12840:	4b9b      	ldr	r3, [pc, #620]	; (12ab0 <Pec::poll() [clone .part.0]+0x2f8>)
   12842:	681d      	ldr	r5, [r3, #0]
    interrupts();
   12844:	b662      	cpsie	i
    if (settings.state == PEC_READY_PLAY) {
   12846:	7963      	ldrb	r3, [r4, #5]
   12848:	2b01      	cmp	r3, #1
   1284a:	f000 80d1 	beq.w	129f0 <Pec::poll() [clone .part.0]+0x238>
    if (settings.state == PEC_READY_RECORD) {
   1284e:	2b03      	cmp	r3, #3
   12850:	f000 80ec 	beq.w	12a2c <Pec::poll() [clone .part.0]+0x274>
    if (settings.state == PEC_RECORD && (long)(lastFs - recordStopTimeFs) > 0) {
   12854:	2b04      	cmp	r3, #4
   12856:	f000 8085 	beq.w	12964 <Pec::poll() [clone .part.0]+0x1ac>
    if (bufferStart && settings.state != PEC_RECORD) {
   1285a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   1285e:	2b00      	cmp	r3, #0
   12860:	f040 8098 	bne.w	12994 <Pec::poll() [clone .part.0]+0x1dc>
    if (lastFs - wormRotationStartTimeFs >= FRACTIONAL_SEC) { wormRotationStartTimeFs = lastFs; bufferIndex++; }
   12864:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12866:	ed9f 7a93 	vldr	s14, [pc, #588]	; 12ab4 <Pec::poll() [clone .part.0]+0x2fc>
   1286a:	1aeb      	subs	r3, r5, r3
   1286c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1286e:	ee07 3a90 	vmov	s15, r3
   12872:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12876:	eef4 7ac7 	vcmpe.f32	s15, s14
   1287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1287e:	f2c0 8103 	blt.w	12a88 <Pec::poll() [clone .part.0]+0x2d0>
   12882:	3001      	adds	r0, #1
   12884:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12886:	6425      	str	r5, [r4, #64]	; 0x40
    if (guide.rateAxis1 != 0.0F) {
   12888:	edd6 7a01 	vldr	s15, [r6, #4]
    bufferIndex = ((bufferIndex % wormRotationSeconds) + wormRotationSeconds) % wormRotationSeconds;
   1288c:	fb90 f3f2 	sdiv	r3, r0, r2
   12890:	fb02 0313 	mls	r3, r2, r3, r0
    if (guide.rateAxis1 != 0.0F) {
   12894:	eef5 7a40 	vcmp.f32	s15, #0.0
    bufferIndex = ((bufferIndex % wormRotationSeconds) + wormRotationSeconds) % wormRotationSeconds;
   12898:	4413      	add	r3, r2
    if (guide.rateAxis1 != 0.0F) {
   1289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bufferIndex = ((bufferIndex % wormRotationSeconds) + wormRotationSeconds) % wormRotationSeconds;
   1289e:	fb93 f1f2 	sdiv	r1, r3, r2
   128a2:	fb02 3311 	mls	r3, r2, r1, r3
   128a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (guide.rateAxis1 != 0.0F) {
   128a8:	d013      	beq.n	128d2 <Pec::poll() [clone .part.0]+0x11a>
      if (accGuideStartTime != 0) accGuideAxis1 += stepsPerMicroSecond*(micros() - accGuideStartTime)*guide.rateAxis1;
   128aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   128ac:	2b00      	cmp	r3, #0
   128ae:	d142      	bne.n	12936 <Pec::poll() [clone .part.0]+0x17e>
      accGuideStartTime = micros();
   128b0:	f005 fcbe 	bl	18230 <micros>
   128b4:	64a0      	str	r0, [r4, #72]	; 0x48
      if (accGuideStartTime == 0) accGuideStartTime = 1;
   128b6:	2800      	cmp	r0, #0
   128b8:	d13b      	bne.n	12932 <Pec::poll() [clone .part.0]+0x17a>
   128ba:	2201      	movs	r2, #1
    if (bufferIndex != lastBufferIndex) {
   128bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if (accGuideStartTime == 0) accGuideStartTime = 1;
   128be:	64a2      	str	r2, [r4, #72]	; 0x48
   128c0:	e009      	b.n	128d6 <Pec::poll() [clone .part.0]+0x11e>
    while (wormRotationSteps < 0) wormRotationSteps += settings.wormRotationSteps;
   128c2:	2b00      	cmp	r3, #0
   128c4:	dab5      	bge.n	12832 <Pec::poll() [clone .part.0]+0x7a>
   128c6:	189b      	adds	r3, r3, r2
   128c8:	d4fd      	bmi.n	128c6 <Pec::poll() [clone .part.0]+0x10e>
   128ca:	e7b1      	b.n	12830 <Pec::poll() [clone .part.0]+0x78>
    if (settings.state == PEC_NONE) { rate = 0.0F; return; }
   128cc:	2300      	movs	r3, #0
   128ce:	6023      	str	r3, [r4, #0]
   128d0:	e789      	b.n	127e6 <Pec::poll() [clone .part.0]+0x2e>
    } else accGuideStartTime = 0;
   128d2:	2200      	movs	r2, #0
   128d4:	64a2      	str	r2, [r4, #72]	; 0x48
    if (bufferIndex != lastBufferIndex) {
   128d6:	4a78      	ldr	r2, [pc, #480]	; (12ab8 <Pec::poll() [clone .part.0]+0x300>)
   128d8:	6811      	ldr	r1, [r2, #0]
   128da:	4299      	cmp	r1, r3
   128dc:	d083      	beq.n	127e6 <Pec::poll() [clone .part.0]+0x2e>
      if (settings.state == PEC_RECORD) {
   128de:	7961      	ldrb	r1, [r4, #5]
      rate = 0.0F;
   128e0:	2000      	movs	r0, #0
      lastBufferIndex = bufferIndex;
   128e2:	6013      	str	r3, [r2, #0]
      if (settings.state == PEC_RECORD) {
   128e4:	2904      	cmp	r1, #4
      rate = 0.0F;
   128e6:	6020      	str	r0, [r4, #0]
      if (settings.state == PEC_RECORD) {
   128e8:	d058      	beq.n	1299c <Pec::poll() [clone .part.0]+0x1e4>
      if (settings.state == PEC_PLAY) {
   128ea:	2902      	cmp	r1, #2
   128ec:	f47f af7b 	bne.w	127e6 <Pec::poll() [clone .part.0]+0x2e>
        int j = bufferIndex - 1; if (j == -1) j += wormRotationSeconds;
   128f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   128f2:	1e53      	subs	r3, r2, #1
   128f4:	b90a      	cbnz	r2, 128fa <Pec::poll() [clone .part.0]+0x142>
   128f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   128f8:	3b01      	subs	r3, #1
        int i = buffer[j];
   128fa:	6e21      	ldr	r1, [r4, #96]	; 0x60
        if (i >  stepsPerSiderealSecondI) i =  stepsPerSiderealSecondI;
   128fc:	69a2      	ldr	r2, [r4, #24]
        int i = buffer[j];
   128fe:	56cb      	ldrsb	r3, [r1, r3]
        if (i < -stepsPerSiderealSecondI) i = -stepsPerSiderealSecondI;
   12900:	4251      	negs	r1, r2
        rate = i/stepsPerSiderealSecond;
   12902:	4293      	cmp	r3, r2
   12904:	bfa8      	it	ge
   12906:	4613      	movge	r3, r2
   12908:	428b      	cmp	r3, r1
   1290a:	bfb8      	it	lt
   1290c:	460b      	movlt	r3, r1
   1290e:	ee07 3a90 	vmov	s15, r3
   12912:	ed94 5b04 	vldr	d5, [r4, #16]
   12916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1291a:	ee87 6b05 	vdiv.f64	d6, d7, d5
   1291e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   12922:	ed84 6a00 	vstr	s12, [r4]
   12926:	e75e      	b.n	127e6 <Pec::poll() [clone .part.0]+0x2e>
      static long lastWormRotationSteps = wormRotationSteps;
   12928:	6015      	str	r5, [r2, #0]
   1292a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1292c:	4a5f      	ldr	r2, [pc, #380]	; (12aac <Pec::poll() [clone .part.0]+0x2f4>)
   1292e:	6011      	str	r1, [r2, #0]
   12930:	e774      	b.n	1281c <Pec::poll() [clone .part.0]+0x64>
    if (bufferIndex != lastBufferIndex) {
   12932:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   12934:	e7cf      	b.n	128d6 <Pec::poll() [clone .part.0]+0x11e>
      if (accGuideStartTime != 0) accGuideAxis1 += stepsPerMicroSecond*(micros() - accGuideStartTime)*guide.rateAxis1;
   12936:	ed94 8b08 	vldr	d8, [r4, #32]
   1293a:	f005 fc79 	bl	18230 <micros>
   1293e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   12940:	ed96 5a01 	vldr	s10, [r6, #4]
   12944:	1ac3      	subs	r3, r0, r3
   12946:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
   1294a:	ee07 3a10 	vmov	s14, r3
   1294e:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   12952:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
   12956:	ee27 7b08 	vmul.f64	d7, d7, d8
   1295a:	eea7 6b05 	vfma.f64	d6, d7, d5
   1295e:	ed84 6b14 	vstr	d6, [r4, #80]	; 0x50
   12962:	e7a5      	b.n	128b0 <Pec::poll() [clone .part.0]+0xf8>
    if (settings.state == PEC_RECORD && (long)(lastFs - recordStopTimeFs) > 0) {
   12964:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12966:	1aeb      	subs	r3, r5, r3
   12968:	2b00      	cmp	r3, #0
   1296a:	f77f af7b 	ble.w	12864 <Pec::poll() [clone .part.0]+0xac>
      settings.recorded = true;
   1296e:	88a2      	ldrh	r2, [r4, #4]
   12970:	f240 2301 	movw	r3, #513	; 0x201
      cleanup();
   12974:	4620      	mov	r0, r4
      settings.recorded = true;
   12976:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1297a:	4313      	orrs	r3, r2
   1297c:	80a3      	strh	r3, [r4, #4]
      cleanup();
   1297e:	f7ff fe21 	bl	125c4 <Pec::cleanup()>
    if (bufferStart && settings.state != PEC_RECORD) {
   12982:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   12986:	2b00      	cmp	r3, #0
   12988:	f43f af6c 	beq.w	12864 <Pec::poll() [clone .part.0]+0xac>
   1298c:	7963      	ldrb	r3, [r4, #5]
   1298e:	2b04      	cmp	r3, #4
   12990:	f43f af68 	beq.w	12864 <Pec::poll() [clone .part.0]+0xac>
      wormRotationStartTimeFs = lastFs;
   12994:	2000      	movs	r0, #0
   12996:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12998:	6425      	str	r5, [r4, #64]	; 0x40
    if (lastFs - wormRotationStartTimeFs >= FRACTIONAL_SEC) { wormRotationStartTimeFs = lastFs; bufferIndex++; }
   1299a:	e775      	b.n	12888 <Pec::poll() [clone .part.0]+0xd0>
        int i = round(accGuideAxis1);
   1299c:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
        if (i < -stepsPerSiderealSecondI) i = -stepsPerSiderealSecondI;
   129a0:	69a1      	ldr	r1, [r4, #24]
        if (!firstRecording) i = (i + (int)buffer[bufferIndex]*2)/3;
   129a2:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
        int i = round(accGuideAxis1);
   129a6:	feb8 7b46 	vrinta.f64	d7, d6
   129aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
        if (i < -stepsPerSiderealSecondI) i = -stepsPerSiderealSecondI;
   129ae:	424d      	negs	r5, r1
        int i = round(accGuideAxis1);
   129b0:	ee17 2a90 	vmov	r2, s15
   129b4:	42aa      	cmp	r2, r5
   129b6:	bfb8      	it	lt
   129b8:	462a      	movlt	r2, r5
   129ba:	428a      	cmp	r2, r1
   129bc:	bfa8      	it	ge
   129be:	460a      	movge	r2, r1
        if (!firstRecording) i = (i + (int)buffer[bufferIndex]*2)/3;
   129c0:	2800      	cmp	r0, #0
   129c2:	d07b      	beq.n	12abc <Pec::poll() [clone .part.0]+0x304>
   129c4:	6e21      	ldr	r1, [r4, #96]	; 0x60
   129c6:	4419      	add	r1, r3
        if (i < -127) i = -127; else if (i >  127) i = 127;
   129c8:	2a7f      	cmp	r2, #127	; 0x7f
   129ca:	4613      	mov	r3, r2
   129cc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   129d0:	bfa8      	it	ge
   129d2:	237f      	movge	r3, #127	; 0x7f
   129d4:	4293      	cmp	r3, r2
   129d6:	bfb8      	it	lt
   129d8:	4613      	movlt	r3, r2
        accGuideAxis1 -= i;
   129da:	ee07 3a90 	vmov	s15, r3
   129de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   129e2:	ee36 6b47 	vsub.f64	d6, d6, d7
   129e6:	ed84 6b14 	vstr	d6, [r4, #80]	; 0x50
        buffer[bufferIndex] = i;
   129ea:	700b      	strb	r3, [r1, #0]
      if (settings.state == PEC_PLAY) {
   129ec:	7961      	ldrb	r1, [r4, #5]
   129ee:	e77c      	b.n	128ea <Pec::poll() [clone .part.0]+0x132>
      return fmod(__type(__x), __type(__y));
   129f0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
      if ((long)fmod(wormRotationSteps, stepsPerSiderealSecond) == 0) {
   129f4:	ed94 9b04 	vldr	d9, [r4, #16]
   129f8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
   129fc:	eeb0 1b49 	vmov.f64	d1, d9
   12a00:	eeb0 0b48 	vmov.f64	d0, d8
   12a04:	f007 fb44 	bl	1a090 <fmod>
   12a08:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   12a0c:	ee10 3a10 	vmov	r3, s0
   12a10:	2b00      	cmp	r3, #0
   12a12:	f47f af22 	bne.w	1285a <Pec::poll() [clone .part.0]+0xa2>
        bufferIndex = lroundf(wormRotationSteps/stepsPerSiderealSecond);
   12a16:	ee88 0b09 	vdiv.f64	d0, d8, d9
        settings.state = PEC_PLAY;
   12a1a:	2302      	movs	r3, #2
   12a1c:	7163      	strb	r3, [r4, #5]
        bufferIndex = lroundf(wormRotationSteps/stepsPerSiderealSecond);
   12a1e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   12a22:	f008 ff9b 	bl	1b95c <lroundf>
        wormRotationStartTimeFs = lastFs;
   12a26:	6425      	str	r5, [r4, #64]	; 0x40
        bufferIndex = lroundf(wormRotationSteps/stepsPerSiderealSecond);
   12a28:	65e0      	str	r0, [r4, #92]	; 0x5c
        wormRotationStartTimeFs = lastFs;
   12a2a:	e716      	b.n	1285a <Pec::poll() [clone .part.0]+0xa2>
   12a2c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
      if ((long)fmod(wormRotationSteps, stepsPerSiderealSecond) == 0) {
   12a30:	ed94 9b04 	vldr	d9, [r4, #16]
   12a34:	eeb8 8be7 	vcvt.f64.s32	d8, s15
   12a38:	eeb0 1b49 	vmov.f64	d1, d9
   12a3c:	eeb0 0b48 	vmov.f64	d0, d8
   12a40:	f007 fb26 	bl	1a090 <fmod>
   12a44:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   12a48:	ee10 3a10 	vmov	r3, s0
   12a4c:	2b00      	cmp	r3, #0
   12a4e:	f47f af04 	bne.w	1285a <Pec::poll() [clone .part.0]+0xa2>
        bufferIndex = lroundf(wormRotationSteps/stepsPerSiderealSecond);
   12a52:	ee88 0b09 	vdiv.f64	d0, d8, d9
        settings.state = PEC_RECORD;
   12a56:	2304      	movs	r3, #4
   12a58:	7163      	strb	r3, [r4, #5]
        bufferIndex = lroundf(wormRotationSteps/stepsPerSiderealSecond);
   12a5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   12a5e:	f008 ff7d 	bl	1b95c <lroundf>
        firstRecording = !settings.recorded;
   12a62:	7923      	ldrb	r3, [r4, #4]
        recordStopTimeFs = wormRotationStartTimeFs + (uint32_t)(wormRotationSeconds*(long)FRACTIONAL_SEC);
   12a64:	6c62      	ldr	r2, [r4, #68]	; 0x44
        firstRecording = !settings.recorded;
   12a66:	f3c3 0300 	ubfx	r3, r3, #0, #1
        wormRotationStartTimeFs = lastFs;
   12a6a:	6425      	str	r5, [r4, #64]	; 0x40
        firstRecording = !settings.recorded;
   12a6c:	f083 0301 	eor.w	r3, r3, #1
   12a70:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        recordStopTimeFs = wormRotationStartTimeFs + (uint32_t)(wormRotationSeconds*(long)FRACTIONAL_SEC);
   12a74:	f240 230e 	movw	r3, #526	; 0x20e
        accGuideAxis1 = 0.0L;
   12a78:	ed9f 7b05 	vldr	d7, [pc, #20]	; 12a90 <Pec::poll() [clone .part.0]+0x2d8>
        recordStopTimeFs = wormRotationStartTimeFs + (uint32_t)(wormRotationSeconds*(long)FRACTIONAL_SEC);
   12a7c:	fb03 5302 	mla	r3, r3, r2, r5
        accGuideAxis1 = 0.0L;
   12a80:	ed84 7b14 	vstr	d7, [r4, #80]	; 0x50
        recordStopTimeFs = wormRotationStartTimeFs + (uint32_t)(wormRotationSeconds*(long)FRACTIONAL_SEC);
   12a84:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (lastFs - wormRotationStartTimeFs >= FRACTIONAL_SEC) { wormRotationStartTimeFs = lastFs; bufferIndex++; }
   12a86:	e6ff      	b.n	12888 <Pec::poll() [clone .part.0]+0xd0>
   12a88:	6c62      	ldr	r2, [r4, #68]	; 0x44
   12a8a:	e6fd      	b.n	12888 <Pec::poll() [clone .part.0]+0xd0>
   12a8c:	f3af 8000 	nop.w
	...
   12a98:	200054e0 	.word	0x200054e0
   12a9c:	200043e8 	.word	0x200043e8
   12aa0:	200050e8 	.word	0x200050e8
   12aa4:	200048b9 	.word	0x200048b9
   12aa8:	20005668 	.word	0x20005668
   12aac:	20005800 	.word	0x20005800
   12ab0:	20005be8 	.word	0x20005be8
   12ab4:	44039436 	.word	0x44039436
   12ab8:	200057fc 	.word	0x200057fc
        if (!firstRecording) i = (i + (int)buffer[bufferIndex]*2)/3;
   12abc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   12abe:	18c1      	adds	r1, r0, r3
   12ac0:	56c3      	ldrsb	r3, [r0, r3]
   12ac2:	4804      	ldr	r0, [pc, #16]	; (12ad4 <Pec::poll() [clone .part.0]+0x31c>)
   12ac4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   12ac8:	fb80 0203 	smull	r0, r2, r0, r3
   12acc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
   12ad0:	e77a      	b.n	129c8 <Pec::poll() [clone .part.0]+0x210>
   12ad2:	bf00      	nop
   12ad4:	55555556 	.word	0x55555556

00012ad8 <pecWrapper()>:
      if (park.state > PS_UNPARKED) { disable(); return; }
   12ad8:	4b0b      	ldr	r3, [pc, #44]	; (12b08 <pecWrapper()+0x30>)
   12ada:	781b      	ldrb	r3, [r3, #0]
   12adc:	b913      	cbnz	r3, 12ae4 <pecWrapper()+0xc>
   12ade:	480b      	ldr	r0, [pc, #44]	; (12b0c <pecWrapper()+0x34>)
   12ae0:	f7ff be6a 	b.w	127b8 <Pec::poll() [clone .part.0]>
    if (settings.state == PEC_RECORD || settings.state == PEC_READY_RECORD) {
   12ae4:	4b09      	ldr	r3, [pc, #36]	; (12b0c <pecWrapper()+0x34>)
   12ae6:	795a      	ldrb	r2, [r3, #5]
   12ae8:	1ed1      	subs	r1, r2, #3
   12aea:	2901      	cmp	r1, #1
   12aec:	d907      	bls.n	12afe <pecWrapper()+0x26>
    if (settings.state == PEC_PLAY) {
   12aee:	2a02      	cmp	r2, #2
   12af0:	d104      	bne.n	12afc <pecWrapper()+0x24>
      settings.state = PEC_READY_PLAY;
   12af2:	2101      	movs	r1, #1
      rate = 0.0F;
   12af4:	2200      	movs	r2, #0
      settings.state = PEC_READY_PLAY;
   12af6:	7159      	strb	r1, [r3, #5]
      rate = 0.0F;
   12af8:	601a      	str	r2, [r3, #0]
   12afa:	4770      	bx	lr
  inline void pecWrapper() { pec.poll(); }
   12afc:	4770      	bx	lr
      settings.state = PEC_NONE;
   12afe:	2100      	movs	r1, #0
      rate = 0.0F;
   12b00:	2200      	movs	r2, #0
      settings.state = PEC_NONE;
   12b02:	7159      	strb	r1, [r3, #5]
      rate = 0.0F;
   12b04:	601a      	str	r2, [r3, #0]
    if (settings.state == PEC_PLAY) {
   12b06:	4770      	bx	lr
   12b08:	20005ea8 	.word	0x20005ea8
   12b0c:	20005568 	.word	0x20005568

00012b10 <_GLOBAL__sub_I_wormSenseFirst>:
  PecState state;
  long wormRotationSteps;
} PecSettings;
#pragma pack()

class Pec {
   12b10:	4b13      	ldr	r3, [pc, #76]	; (12b60 <_GLOBAL__sub_I_wormSenseFirst+0x50>)
   12b12:	2100      	movs	r1, #0
   12b14:	2200      	movs	r2, #0
   12b16:	6019      	str	r1, [r3, #0]
   12b18:	6859      	ldr	r1, [r3, #4]
   12b1a:	619a      	str	r2, [r3, #24]
   12b1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   12b20:	629a      	str	r2, [r3, #40]	; 0x28
   12b22:	635a      	str	r2, [r3, #52]	; 0x34
   12b24:	f041 5130 	orr.w	r1, r1, #738197504	; 0x2c000000
   12b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   12b2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   12b30:	6059      	str	r1, [r3, #4]
   12b32:	2101      	movs	r1, #1
   12b34:	65da      	str	r2, [r3, #92]	; 0x5c
   12b36:	8119      	strh	r1, [r3, #8]
   12b38:	ed9f 7b07 	vldr	d7, [pc, #28]	; 12b58 <_GLOBAL__sub_I_wormSenseFirst+0x48>
   12b3c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   12b40:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
   12b44:	ed83 7b04 	vstr	d7, [r3, #16]
   12b48:	ed83 7b08 	vstr	d7, [r3, #32]
   12b4c:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
   12b50:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

#endif

  Pec pec;
   12b54:	4770      	bx	lr
   12b56:	bf00      	nop
	...
   12b60:	20005568 	.word	0x20005568
   12b64:	00000000 	.word	0x00000000

00012b68 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "../../../libApp/commands/ProcessCmds.h"
#include "../../Telescope.h"
#include "../home/Home.h"
#include "../Mount.h"

bool Site::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   12b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b6c:	ed2d 8b04 	vpush	{d8-d9}
   12b70:	b0d5      	sub	sp, #340	; 0x154
   12b72:	461d      	mov	r5, r3
  *supressFrame = false;
   12b74:	2400      	movs	r4, #0
  PrecisionMode precisionMode = convert.precision;
   12b76:	f8df 8398 	ldr.w	r8, [pc, #920]	; 12f10 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a8>
bool Site::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   12b7a:	9b60      	ldr	r3, [sp, #384]	; 0x180
   12b7c:	4606      	mov	r6, r0
   12b7e:	460f      	mov	r7, r1
  PrecisionMode precisionMode = convert.precision;
   12b80:	f898 9000 	ldrb.w	r9, [r8]
  *supressFrame = false;
   12b84:	701c      	strb	r4, [r3, #0]

  if (command[0] == 'G') {
   12b86:	f892 c000 	ldrb.w	ip, [r2]
   12b8a:	f1bc 0f47 	cmp.w	ip, #71	; 0x47
   12b8e:	d051      	beq.n	12c34 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0xcc>
      } else return false;

    } else return false;
  } else

  if (command[0] == 'S') {
   12b90:	f1bc 0f53 	cmp.w	ip, #83	; 0x53
   12b94:	d014      	beq.n	12bc0 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58>
      if (!setElevation(f)) *commandError = CE_PARAM_RANGE;
      nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
    } else return false;
  } else

  if (command[0] == 'W') {
   12b96:	f1bc 0f57 	cmp.w	ip, #87	; 0x57
   12b9a:	d10b      	bne.n	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
    // :W[n]#     Sets current site to n, where n = 0..3
    //            Returns: Nothing
    if ((command[1] >= '0' && command[1] <= '3') && parameter[0] == 0) {
   12b9c:	7853      	ldrb	r3, [r2, #1]
   12b9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   12ba2:	b2d2      	uxtb	r2, r2
   12ba4:	2a03      	cmp	r2, #3
   12ba6:	d975      	bls.n	12c94 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x12c>
      *numericReply = false;
    } else

    // :W?#       Queries current site
    //            Returns: n#
    if (command[1] == '?' && parameter[0] == 0) {
   12ba8:	2b3f      	cmp	r3, #63	; 0x3f
   12baa:	d103      	bne.n	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
   12bac:	782d      	ldrb	r5, [r5, #0]
   12bae:	2d00      	cmp	r5, #0
   12bb0:	f000 81c0 	beq.w	12f34 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3cc>
    } else return false;
   12bb4:	2000      	movs	r0, #0
      *numericReply = false;
    } else return false;
  } else return false;

  return true;
}
   12bb6:	b055      	add	sp, #340	; 0x154
   12bb8:	ecbd 8b04 	vpop	{d8-d9}
   12bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (command[1] == 'C') {
   12bc0:	7853      	ldrb	r3, [r2, #1]
   12bc2:	2b43      	cmp	r3, #67	; 0x43
   12bc4:	f000 817d 	beq.w	12ec2 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x35a>
    if (command[1] == 'G') {
   12bc8:	2b47      	cmp	r3, #71	; 0x47
   12bca:	f000 822f 	beq.w	1302c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c4>
    if (command[1] == 'g') {
   12bce:	2b67      	cmp	r3, #103	; 0x67
   12bd0:	f000 81e1 	beq.w	12f96 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42e>
    if (command[1] == 'L') {
   12bd4:	2b4c      	cmp	r3, #76	; 0x4c
   12bd6:	f000 8255 	beq.w	13084 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x51c>
    if ((command[1] == 'M' || command[1] == 'N' || command[1] == 'O' || command[1] == 'P')) {
   12bda:	f1a3 074d 	sub.w	r7, r3, #77	; 0x4d
   12bde:	b2ff      	uxtb	r7, r7
   12be0:	2f03      	cmp	r7, #3
   12be2:	f240 81b4 	bls.w	12f4e <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3e6>
    if (command[1] == 't') {
   12be6:	2b74      	cmp	r3, #116	; 0x74
   12be8:	f000 82c8 	beq.w	1317c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x614>
    if (command[1] == 'U') {
   12bec:	2b55      	cmp	r3, #85	; 0x55
   12bee:	f000 8343 	beq.w	13278 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x710>
    if (command[1] == 'v') {
   12bf2:	2b76      	cmp	r3, #118	; 0x76
   12bf4:	d1de      	bne.n	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      float f = strtod(&parameter[0], &conv_end);
   12bf6:	4628      	mov	r0, r5
   12bf8:	a93e      	add	r1, sp, #248	; 0xf8
   12bfa:	f00c f8b9 	bl	1ed70 <strtod>
      if (&parameter[0] == conv_end) f = NAN;
   12bfe:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
      if (!setElevation(f)) *commandError = CE_PARAM_RANGE;
   12c00:	4630      	mov	r0, r6
      if (&parameter[0] == conv_end) f = NAN;
   12c02:	42ab      	cmp	r3, r5
      float f = strtod(&parameter[0], &conv_end);
   12c04:	bf14      	ite	ne
   12c06:	eeb7 0bc0 	vcvtne.f32.f64	s0, d0
      if (&parameter[0] == conv_end) f = NAN;
   12c0a:	ed9f 0abf 	vldreq	s0, [pc, #764]	; 12f08 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a0>
      if (!setElevation(f)) *commandError = CE_PARAM_RANGE;
   12c0e:	f001 f8d7 	bl	13dc0 <Site::setElevation(float)>
   12c12:	b910      	cbnz	r0, 12c1a <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0xb2>
   12c14:	2304      	movs	r3, #4
   12c16:	9a62      	ldr	r2, [sp, #392]	; 0x188
   12c18:	7013      	strb	r3, [r2, #0]
      nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   12c1a:	f896 1085 	ldrb.w	r1, [r6, #133]	; 0x85
   12c1e:	2328      	movs	r3, #40	; 0x28
   12c20:	48ba      	ldr	r0, [pc, #744]	; (12f0c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a4>)
   12c22:	4632      	mov	r2, r6
   12c24:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   12c28:	00c9      	lsls	r1, r1, #3
   12c2a:	3105      	adds	r1, #5
   12c2c:	f7f2 fa1e 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
  return true;
   12c30:	2001      	movs	r0, #1
   12c32:	e7c0      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
    if (command[1] == 'a' && parameter[0] == 0) {
   12c34:	7852      	ldrb	r2, [r2, #1]
   12c36:	2a61      	cmp	r2, #97	; 0x61
   12c38:	f000 8093 	beq.w	12d62 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1fa>
    if (command[1] == 'C' && parameter[0] == 0) {
   12c3c:	2a43      	cmp	r2, #67	; 0x43
   12c3e:	d06a      	beq.n	12d16 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ae>
    if (command[1] == 'c' && parameter[0] == 0) {
   12c40:	2a63      	cmp	r2, #99	; 0x63
   12c42:	f000 80a7 	beq.w	12d94 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22c>
    if (command[1] == 'G' && parameter[0] == 0) {
   12c46:	2a47      	cmp	r2, #71	; 0x47
   12c48:	f000 80b1 	beq.w	12dae <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x246>
    if (command[1] == 'g' && (parameter[0] == 0 || parameter[1] == 0)) {
   12c4c:	2a67      	cmp	r2, #103	; 0x67
   12c4e:	f040 80bf 	bne.w	12dd0 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x268>
   12c52:	782b      	ldrb	r3, [r5, #0]
   12c54:	2b00      	cmp	r3, #0
   12c56:	f000 8185 	beq.w	12f64 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3fc>
   12c5a:	786a      	ldrb	r2, [r5, #1]
   12c5c:	2a00      	cmp	r2, #0
   12c5e:	d1a9      	bne.n	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
   12c60:	2b48      	cmp	r3, #72	; 0x48
   12c62:	f040 81de 	bne.w	13022 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ba>
   12c66:	2203      	movs	r2, #3
      convert.doubleToDms(reply, radToDeg(location.longitude), true, true, precisionMode);
   12c68:	2301      	movs	r3, #1
   12c6a:	4639      	mov	r1, r7
   12c6c:	48a8      	ldr	r0, [pc, #672]	; (12f10 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a8>)
   12c6e:	ed96 0b02 	vldr	d0, [r6, #8]
   12c72:	ed9f 7ba1 	vldr	d7, [pc, #644]	; 12ef8 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x390>
   12c76:	9200      	str	r2, [sp, #0]
   12c78:	461a      	mov	r2, r3
   12c7a:	ee20 0b07 	vmul.f64	d0, d0, d7
      convert.doubleToDms(reply, radToDeg(location.latitude), false, true, precisionMode);
   12c7e:	f7f1 fb1b 	bl	42b8 <Convert::doubleToDms(char*, double, bool, bool, PrecisionMode)>
      *numericReply = false;
   12c82:	2300      	movs	r3, #0
  return true;
   12c84:	2001      	movs	r0, #1
      *numericReply = false;
   12c86:	9a61      	ldr	r2, [sp, #388]	; 0x184
   12c88:	7013      	strb	r3, [r2, #0]
}
   12c8a:	b055      	add	sp, #340	; 0x154
   12c8c:	ecbd 8b04 	vpop	{d8-d9}
   12c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((command[1] >= '0' && command[1] <= '3') && parameter[0] == 0) {
   12c94:	782d      	ldrb	r5, [r5, #0]
   12c96:	2d00      	cmp	r5, #0
   12c98:	d18c      	bne.n	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      locationNumber = command[1] - '0';
   12c9a:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
   12c9e:	2104      	movs	r1, #4
   12ca0:	489a      	ldr	r0, [pc, #616]	; (12f0c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a4>)
   12ca2:	f7f2 f8ad 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
      readLocation(locationNumber);
   12ca6:	f896 1085 	ldrb.w	r1, [r6, #133]	; 0x85
   12caa:	4630      	mov	r0, r6
   12cac:	f000 ff4c 	bl	13b48 <Site::readLocation(unsigned char)>
      updateLocation();
   12cb0:	4630      	mov	r0, r6
   12cb2:	f000 fd89 	bl	137c8 <Site::updateLocation()>
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   12cb6:	4897      	ldr	r0, [pc, #604]	; (12f14 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ac>)
   12cb8:	f7ee fa38 	bl	112c <Axis::getInstrumentCoordinate()>
   12cbc:	462a      	mov	r2, r5
   12cbe:	4996      	ldr	r1, [pc, #600]	; (12f18 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3b0>)
   12cc0:	a828      	add	r0, sp, #160	; 0xa0
   12cc2:	eeb0 8b40 	vmov.f64	d8, d0
   12cc6:	f7fc fb6f 	bl	f3a8 <Home::getPosition(CoordReturn)>
   12cca:	ed9d 7b36 	vldr	d7, [sp, #216]	; 0xd8
   12cce:	ed9f 9b8c 	vldr	d9, [pc, #560]	; 12f00 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x398>
   12cd2:	ee38 8b47 	vsub.f64	d8, d8, d7
   12cd6:	eeb0 8bc8 	vabs.f64	d8, d8
   12cda:	eeb4 8bc9 	vcmpe.f64	d8, d9
   12cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12ce2:	d8ce      	bhi.n	12c82 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   12ce4:	488d      	ldr	r0, [pc, #564]	; (12f1c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3b4>)
   12ce6:	f7ee fa21 	bl	112c <Axis::getInstrumentCoordinate()>
   12cea:	462a      	mov	r2, r5
   12cec:	498a      	ldr	r1, [pc, #552]	; (12f18 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3b0>)
   12cee:	a83e      	add	r0, sp, #248	; 0xf8
   12cf0:	eeb0 8b40 	vmov.f64	d8, d0
   12cf4:	f7fc fb58 	bl	f3a8 <Home::getPosition(CoordReturn)>
   12cf8:	ed9d 7b50 	vldr	d7, [sp, #320]	; 0x140
   12cfc:	ee38 7b47 	vsub.f64	d7, d8, d7
   12d00:	eeb0 7bc7 	vabs.f64	d7, d7
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   12d04:	eeb4 7bc9 	vcmpe.f64	d7, d9
   12d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12d0c:	d8b9      	bhi.n	12c82 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
      if (mount.isHome()) home.init();
   12d0e:	4882      	ldr	r0, [pc, #520]	; (12f18 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3b0>)
   12d10:	f7fc fc5e 	bl	f5d0 <Home::init()>
      *numericReply = false;
   12d14:	e7b5      	b.n	12c82 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
    if (command[1] == 'C' && parameter[0] == 0) {
   12d16:	782d      	ldrb	r5, [r5, #0]
   12d18:	2d00      	cmp	r5, #0
   12d1a:	f47f af4b 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      GregorianDate local = calendars.julianToGregorian(UT1ToLocal(getDateTime()));
   12d1e:	f000 fb67 	bl	133f0 <Site::getDateTime()>
   12d22:	4630      	mov	r0, r6
   12d24:	f001 f866 	bl	13df4 <Site::UT1ToLocal(JulianDate)>
   12d28:	497d      	ldr	r1, [pc, #500]	; (12f20 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3b8>)
   12d2a:	a83e      	add	r0, sp, #248	; 0xf8
   12d2c:	f7f0 fe54 	bl	39d8 <Calendars::julianToGregorian(JulianDate)>
      sprintf(reply,"%02d/%02d/%02d", (int)local.month, (int)local.day, (int)local.year % 100);
   12d30:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	; 0xf8
   12d34:	497b      	ldr	r1, [pc, #492]	; (12f24 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3bc>)
   12d36:	4638      	mov	r0, r7
   12d38:	17da      	asrs	r2, r3, #31
   12d3a:	fb81 4103 	smull	r4, r1, r1, r3
   12d3e:	ebc2 1261 	rsb	r2, r2, r1, asr #5
   12d42:	2164      	movs	r1, #100	; 0x64
   12d44:	fb01 3112 	mls	r1, r1, r2, r3
   12d48:	f89d 30fb 	ldrb.w	r3, [sp, #251]	; 0xfb
   12d4c:	f89d 20fa 	ldrb.w	r2, [sp, #250]	; 0xfa
   12d50:	b209      	sxth	r1, r1
   12d52:	9100      	str	r1, [sp, #0]
   12d54:	4974      	ldr	r1, [pc, #464]	; (12f28 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3c0>)
   12d56:	f00c f8cb 	bl	1eef0 <sprintf>
      *numericReply = false;
   12d5a:	9b61      	ldr	r3, [sp, #388]	; 0x184
  return true;
   12d5c:	2001      	movs	r0, #1
      *numericReply = false;
   12d5e:	701d      	strb	r5, [r3, #0]
    } else
   12d60:	e729      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
    if (command[1] == 'a' && parameter[0] == 0) {
   12d62:	782d      	ldrb	r5, [r5, #0]
   12d64:	2d00      	cmp	r5, #0
   12d66:	f47f af25 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      double time = rangeAmPm(getTime() - location.timezone);
   12d6a:	f000 fbe5 	bl	13538 <Site::getTime()>
   12d6e:	ed96 7a05 	vldr	s14, [r6, #20]
   12d72:	4630      	mov	r0, r6
   12d74:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   12d78:	ee30 0b47 	vsub.f64	d0, d0, d7
   12d7c:	f001 f8b4 	bl	13ee8 <Site::rangeAmPm(double)>
      convert.doubleToHms(reply, time, false, PM_HIGH);
   12d80:	2302      	movs	r3, #2
   12d82:	4640      	mov	r0, r8
   12d84:	462a      	mov	r2, r5
   12d86:	4639      	mov	r1, r7
   12d88:	f7f1 f9d2 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
      *numericReply = false;
   12d8c:	9b61      	ldr	r3, [sp, #388]	; 0x184
  return true;
   12d8e:	2001      	movs	r0, #1
      *numericReply = false;
   12d90:	701d      	strb	r5, [r3, #0]
    } else
   12d92:	e710      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
    if (command[1] == 'c' && parameter[0] == 0) {
   12d94:	782b      	ldrb	r3, [r5, #0]
   12d96:	2b00      	cmp	r3, #0
   12d98:	f47f af0c 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      strcpy(reply, "24");
   12d9c:	4a63      	ldr	r2, [pc, #396]	; (12f2c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3c4>)
  return true;
   12d9e:	2001      	movs	r0, #1
      strcpy(reply, "24");
   12da0:	8811      	ldrh	r1, [r2, #0]
   12da2:	7892      	ldrb	r2, [r2, #2]
   12da4:	8039      	strh	r1, [r7, #0]
   12da6:	70ba      	strb	r2, [r7, #2]
      *numericReply = false;
   12da8:	9a61      	ldr	r2, [sp, #388]	; 0x184
   12daa:	7013      	strb	r3, [r2, #0]
   12dac:	e703      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
    if (command[1] == 'G' && parameter[0] == 0) {
   12dae:	782d      	ldrb	r5, [r5, #0]
   12db0:	2d00      	cmp	r5, #0
   12db2:	f47f aeff 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      convert.doubleToHms(reply, location.timezone, true, PM_LOWEST);
   12db6:	ed90 0a05 	vldr	s0, [r0, #20]
   12dba:	462b      	mov	r3, r5
   12dbc:	4640      	mov	r0, r8
   12dbe:	2201      	movs	r2, #1
   12dc0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   12dc4:	f7f1 f9b4 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
      *numericReply = false;
   12dc8:	9b61      	ldr	r3, [sp, #388]	; 0x184
  return true;
   12dca:	2001      	movs	r0, #1
      *numericReply = false;
   12dcc:	701d      	strb	r5, [r3, #0]
   12dce:	e6f2      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
    if (command[1] == 'L' && (parameter[0] == 0 || parameter[1] == 0)) {
   12dd0:	2a4c      	cmp	r2, #76	; 0x4c
   12dd2:	d117      	bne.n	12e04 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x29c>
   12dd4:	782b      	ldrb	r3, [r5, #0]
   12dd6:	b143      	cbz	r3, 12dea <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x282>
   12dd8:	786a      	ldrb	r2, [r5, #1]
   12dda:	2a00      	cmp	r2, #0
   12ddc:	f47f aeea 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
   12de0:	2b48      	cmp	r3, #72	; 0x48
   12de2:	f040 811e 	bne.w	13022 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ba>
   12de6:	f04f 0903 	mov.w	r9, #3
      convert.doubleToHms(reply, rangeHours(getTime() - location.timezone), false, precisionMode);
   12dea:	4630      	mov	r0, r6
   12dec:	f000 fba4 	bl	13538 <Site::getTime()>
   12df0:	ed96 7a05 	vldr	s14, [r6, #20]
   12df4:	4630      	mov	r0, r6
   12df6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   12dfa:	ee30 0b47 	vsub.f64	d0, d0, d7
   12dfe:	f001 f855 	bl	13eac <Site::rangeHours(double)>
   12e02:	e030      	b.n	12e66 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2fe>
    if ((command[1] == 'M' || command[1] == 'N' || command[1] == 'O' || command[1] == 'P') && parameter[0] == 0)  {
   12e04:	f1a2 034d 	sub.w	r3, r2, #77	; 0x4d
   12e08:	b2db      	uxtb	r3, r3
   12e0a:	2b03      	cmp	r3, #3
   12e0c:	d81b      	bhi.n	12e46 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2de>
   12e0e:	782a      	ldrb	r2, [r5, #0]
   12e10:	2a00      	cmp	r2, #0
   12e12:	f47f aecf 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      nv.readBytes(NV_SITE_BASE + locationNumber*LocationSize, &tempLocation, LocationSize);
   12e16:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   12e1a:	aa3e      	add	r2, sp, #248	; 0xf8
   12e1c:	2328      	movs	r3, #40	; 0x28
   12e1e:	483b      	ldr	r0, [pc, #236]	; (12f0c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a4>)
   12e20:	00c9      	lsls	r1, r1, #3
   12e22:	3105      	adds	r1, #5
   12e24:	f7f2 f8f8 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
      strcpy(reply, tempLocation.name);
   12e28:	a944      	add	r1, sp, #272	; 0x110
   12e2a:	4638      	mov	r0, r7
   12e2c:	f00c fd44 	bl	1f8b8 <stpcpy>
      if (reply[0] == 0) { strcat(reply,"None"); }
   12e30:	783a      	ldrb	r2, [r7, #0]
      strcpy(reply, tempLocation.name);
   12e32:	4603      	mov	r3, r0
      if (reply[0] == 0) { strcat(reply,"None"); }
   12e34:	2a00      	cmp	r2, #0
   12e36:	f47f af24 	bne.w	12c82 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
   12e3a:	4a3d      	ldr	r2, [pc, #244]	; (12f30 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3c8>)
   12e3c:	6810      	ldr	r0, [r2, #0]
   12e3e:	7912      	ldrb	r2, [r2, #4]
   12e40:	6018      	str	r0, [r3, #0]
   12e42:	711a      	strb	r2, [r3, #4]
      *numericReply = false; 
   12e44:	e71d      	b.n	12c82 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
    if (command[1] == 'S' && (parameter[0] == 0 || parameter[1] == 0)) {
   12e46:	2a53      	cmp	r2, #83	; 0x53
   12e48:	d114      	bne.n	12e74 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x30c>
   12e4a:	782b      	ldrb	r3, [r5, #0]
   12e4c:	b143      	cbz	r3, 12e60 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2f8>
   12e4e:	786a      	ldrb	r2, [r5, #1]
   12e50:	2a00      	cmp	r2, #0
   12e52:	f47f aeaf 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
   12e56:	2b48      	cmp	r3, #72	; 0x48
   12e58:	f040 80e3 	bne.w	13022 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ba>
   12e5c:	f04f 0903 	mov.w	r9, #3
      convert.doubleToHms(reply, getSiderealTime(), false, precisionMode);
   12e60:	4630      	mov	r0, r6
   12e62:	f000 fb11 	bl	13488 <Site::getSiderealTime()>
   12e66:	464b      	mov	r3, r9
   12e68:	2200      	movs	r2, #0
   12e6a:	4639      	mov	r1, r7
   12e6c:	4828      	ldr	r0, [pc, #160]	; (12f10 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3a8>)
   12e6e:	f7f1 f95f 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
   12e72:	e706      	b.n	12c82 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11a>
    if (command[1] == 't' && (parameter[0] == 0 || parameter[1] == 0)) {
   12e74:	2a74      	cmp	r2, #116	; 0x74
   12e76:	d077      	beq.n	12f68 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x400>
    if (command[1] == 'v' && parameter[0] == 0) {
   12e78:	2a76      	cmp	r2, #118	; 0x76
   12e7a:	f000 813c 	beq.w	130f6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x58e>
    if (command[1] == 'X' && parameter[0] == '8' && parameter[2] == 0) {
   12e7e:	2a58      	cmp	r2, #88	; 0x58
   12e80:	f47f ae98 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
   12e84:	782b      	ldrb	r3, [r5, #0]
   12e86:	2b38      	cmp	r3, #56	; 0x38
   12e88:	f47f ae94 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
   12e8c:	78ac      	ldrb	r4, [r5, #2]
   12e8e:	2c00      	cmp	r4, #0
   12e90:	f47f ae90 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      if (parameter[1] == '0') {
   12e94:	786b      	ldrb	r3, [r5, #1]
   12e96:	2b30      	cmp	r3, #48	; 0x30
   12e98:	f000 8209 	beq.w	132ae <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x746>
      if (parameter[1] == '1') {
   12e9c:	2b31      	cmp	r3, #49	; 0x31
   12e9e:	f000 8215 	beq.w	132cc <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x764>
      if (parameter[1] == '9') {
   12ea2:	2b39      	cmp	r3, #57	; 0x39
   12ea4:	f47f ae86 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
        if (dateIsReady && timeIsReady) *commandError = CE_0;
   12ea8:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
   12eac:	b1f0      	cbz	r0, 12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
   12eae:	f896 3055 	ldrb.w	r3, [r6, #85]	; 0x55
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	f43f ae7f 	beq.w	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
   12eb8:	2201      	movs	r2, #1
  return true;
   12eba:	4618      	mov	r0, r3
        if (dateIsReady && timeIsReady) *commandError = CE_0;
   12ebc:	9b62      	ldr	r3, [sp, #392]	; 0x188
   12ebe:	701a      	strb	r2, [r3, #0]
   12ec0:	e679      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
      GregorianDate local = calendars.julianToGregorian(UT1ToLocal(getDateTime()));
   12ec2:	ac3e      	add	r4, sp, #248	; 0xf8
   12ec4:	f000 fa94 	bl	133f0 <Site::getDateTime()>
   12ec8:	4630      	mov	r0, r6
   12eca:	f000 ff93 	bl	13df4 <Site::UT1ToLocal(JulianDate)>
   12ece:	4914      	ldr	r1, [pc, #80]	; (12f20 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3b8>)
   12ed0:	4620      	mov	r0, r4
   12ed2:	f7f0 fd81 	bl	39d8 <Calendars::julianToGregorian(JulianDate)>
      if (strToDate(parameter, &local)) {
   12ed6:	4622      	mov	r2, r4
   12ed8:	4629      	mov	r1, r5
   12eda:	4630      	mov	r0, r6
   12edc:	f001 f822 	bl	13f24 <Site::strToDate(char*, GregorianDate*)>
   12ee0:	2800      	cmp	r0, #0
   12ee2:	f040 8118 	bne.w	13116 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5ae>
      } else *commandError = CE_PARAM_FORM;
   12ee6:	2305      	movs	r3, #5
   12ee8:	9a62      	ldr	r2, [sp, #392]	; 0x188
   12eea:	7013      	strb	r3, [r2, #0]
  return true;
   12eec:	2001      	movs	r0, #1
}
   12eee:	b055      	add	sp, #340	; 0x154
   12ef0:	ecbd 8b04 	vpop	{d8-d9}
   12ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12ef8:	1a63c1f8 	.word	0x1a63c1f8
   12efc:	404ca5dc 	.word	0x404ca5dc
   12f00:	71ef8766 	.word	0x71ef8766
   12f04:	3e9787ad 	.word	0x3e9787ad
   12f08:	7fc00000 	.word	0x7fc00000
   12f0c:	20005e50 	.word	0x20005e50
   12f10:	200043d0 	.word	0x200043d0
   12f14:	200050e8 	.word	0x200050e8
   12f18:	20005478 	.word	0x20005478
   12f1c:	200051a8 	.word	0x200051a8
   12f20:	20005b50 	.word	0x20005b50
   12f24:	51eb851f 	.word	0x51eb851f
   12f28:	200021f0 	.word	0x200021f0
   12f2c:	20002200 	.word	0x20002200
   12f30:	20002204 	.word	0x20002204
      sprintf(reply, "%d", (int)nv.read(NV_SITE_NUMBER));
   12f34:	2104      	movs	r1, #4
   12f36:	48c8      	ldr	r0, [pc, #800]	; (13258 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f0>)
   12f38:	f7f2 f824 	bl	4f84 <NonVolatileStorage::read(unsigned short)>
   12f3c:	49c7      	ldr	r1, [pc, #796]	; (1325c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f4>)
   12f3e:	4602      	mov	r2, r0
   12f40:	4638      	mov	r0, r7
   12f42:	f00b ffd5 	bl	1eef0 <sprintf>
      *numericReply = false;
   12f46:	9b61      	ldr	r3, [sp, #388]	; 0x184
  return true;
   12f48:	2001      	movs	r0, #1
      *numericReply = false;
   12f4a:	701d      	strb	r5, [r3, #0]
   12f4c:	e633      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
      if (strlen(parameter) <= 15) {
   12f4e:	4628      	mov	r0, r5
   12f50:	f00c ff16 	bl	1fd80 <strlen>
   12f54:	280f      	cmp	r0, #15
   12f56:	f240 80f6 	bls.w	13146 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5de>
      } else *commandError = CE_PARAM_RANGE;
   12f5a:	2304      	movs	r3, #4
   12f5c:	9a62      	ldr	r2, [sp, #392]	; 0x188
  return true;
   12f5e:	2001      	movs	r0, #1
      } else *commandError = CE_PARAM_RANGE;
   12f60:	7013      	strb	r3, [r2, #0]
   12f62:	e628      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
      precisionMode = PM_LOW;
   12f64:	2201      	movs	r2, #1
   12f66:	e67f      	b.n	12c68 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x100>
    if (command[1] == 't' && (parameter[0] == 0 || parameter[1] == 0)) {
   12f68:	782b      	ldrb	r3, [r5, #0]
   12f6a:	2b00      	cmp	r3, #0
   12f6c:	f000 80e9 	beq.w	13142 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5da>
   12f70:	786a      	ldrb	r2, [r5, #1]
   12f72:	2a00      	cmp	r2, #0
   12f74:	f47f ae1e 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
   12f78:	2b48      	cmp	r3, #72	; 0x48
   12f7a:	d152      	bne.n	13022 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4ba>
   12f7c:	2403      	movs	r4, #3
      convert.doubleToDms(reply, radToDeg(location.latitude), false, true, precisionMode);
   12f7e:	2301      	movs	r3, #1
   12f80:	2200      	movs	r2, #0
   12f82:	4639      	mov	r1, r7
   12f84:	48b6      	ldr	r0, [pc, #728]	; (13260 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f8>)
   12f86:	ed96 0b00 	vldr	d0, [r6]
   12f8a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 13228 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c0>
   12f8e:	9400      	str	r4, [sp, #0]
   12f90:	ee20 0b07 	vmul.f64	d0, d0, d7
   12f94:	e673      	b.n	12c7e <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x116>
      if (parameter[0] == '-' || parameter[0] == '+') i = 1; else i = 0;
   12f96:	782a      	ldrb	r2, [r5, #0]
      if (convert.dmsToDouble(&degs, (char *)&parameter[i], false)) {
   12f98:	4623      	mov	r3, r4
   12f9a:	4640      	mov	r0, r8
   12f9c:	a93e      	add	r1, sp, #248	; 0xf8
   12f9e:	2a2b      	cmp	r2, #43	; 0x2b
   12fa0:	bf18      	it	ne
   12fa2:	2a2d      	cmpne	r2, #45	; 0x2d
   12fa4:	bf0c      	ite	eq
   12fa6:	2201      	moveq	r2, #1
   12fa8:	2200      	movne	r2, #0
   12faa:	442a      	add	r2, r5
   12fac:	f7f1 fd0c 	bl	49c8 <Convert::dmsToDouble(double*, char*, bool)>
   12fb0:	2800      	cmp	r0, #0
   12fb2:	d098      	beq.n	12ee6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37e>
        if (degs >= -180.0 && degs <= 360.0) {
   12fb4:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 13230 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c8>
   12fb8:	ed9d 7b3e 	vldr	d7, [sp, #248]	; 0xf8
   12fbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
   12fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fc4:	db5a      	blt.n	1307c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x514>
   12fc6:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 13238 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6d0>
   12fca:	eeb4 7bc6 	vcmpe.f64	d7, d6
   12fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fd2:	d853      	bhi.n	1307c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x514>
          if (degs >= 180.0) degs -= 360.0;
   12fd4:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 13240 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6d8>
   12fd8:	eeb4 7bc5 	vcmpe.f64	d7, d5
   12fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12fe0:	db03      	blt.n	12fea <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x482>
   12fe2:	ee37 7b46 	vsub.f64	d7, d7, d6
   12fe6:	ed8d 7b3e 	vstr	d7, [sp, #248]	; 0xf8
          location.longitude = degToRad(degs);
   12fea:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 13228 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c0>
   12fee:	ee87 6b05 	vdiv.f64	d6, d7, d5
   12ff2:	ed86 6b02 	vstr	d6, [r6, #8]
          if (parameter[0] == '-') location.longitude = -location.longitude;
   12ff6:	782b      	ldrb	r3, [r5, #0]
   12ff8:	2b2d      	cmp	r3, #45	; 0x2d
   12ffa:	d103      	bne.n	13004 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x49c>
   12ffc:	eeb1 6b46 	vneg.f64	d6, d6
   13000:	ed86 6b02 	vstr	d6, [r6, #8]
          updateLocation();
   13004:	4630      	mov	r0, r6
   13006:	f000 fbdf 	bl	137c8 <Site::updateLocation()>
          nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   1300a:	f896 1085 	ldrb.w	r1, [r6, #133]	; 0x85
   1300e:	2328      	movs	r3, #40	; 0x28
   13010:	4632      	mov	r2, r6
   13012:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13016:	4890      	ldr	r0, [pc, #576]	; (13258 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f0>)
   13018:	00c9      	lsls	r1, r1, #3
   1301a:	3105      	adds	r1, #5
   1301c:	f7f2 f826 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   13020:	e764      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
      if (parameter[0] == 'H') precisionMode = PM_HIGHEST; else if (parameter[0] != 0) { *commandError = CE_PARAM_FORM; return true; }
   13022:	2305      	movs	r3, #5
   13024:	9a62      	ldr	r2, [sp, #392]	; 0x188
   13026:	2001      	movs	r0, #1
   13028:	7013      	strb	r3, [r2, #0]
   1302a:	e5c4      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
      if (convert.tzToDouble(&hour, parameter)) {
   1302c:	462a      	mov	r2, r5
   1302e:	a93e      	add	r1, sp, #248	; 0xf8
   13030:	4640      	mov	r0, r8
   13032:	f7f1 fa81 	bl	4538 <Convert::tzToDouble(double*, char*)>
   13036:	2800      	cmp	r0, #0
   13038:	f43f af55 	beq.w	12ee6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37e>
        if (hour >= -13.75 || hour <= 12.0) {
   1303c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 13248 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6e0>
   13040:	ed9d 7b3e 	vldr	d7, [sp, #248]	; 0xf8
   13044:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1304c:	da06      	bge.n	1305c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4f4>
   1304e:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
   13052:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1305a:	d80f      	bhi.n	1307c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x514>
          nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   1305c:	f896 1085 	ldrb.w	r1, [r6, #133]	; 0x85
          location.timezone = hour;
   13060:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
          nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   13064:	2328      	movs	r3, #40	; 0x28
   13066:	4632      	mov	r2, r6
   13068:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1306c:	487a      	ldr	r0, [pc, #488]	; (13258 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f0>)
          location.timezone = hour;
   1306e:	ed86 7a05 	vstr	s14, [r6, #20]
          nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   13072:	00c9      	lsls	r1, r1, #3
   13074:	3105      	adds	r1, #5
   13076:	f7f1 fff9 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   1307a:	e737      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
        } else *commandError = CE_PARAM_RANGE;
   1307c:	2304      	movs	r3, #4
   1307e:	9a62      	ldr	r2, [sp, #392]	; 0x188
   13080:	7013      	strb	r3, [r2, #0]
   13082:	e733      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
      GregorianDate local = calendars.julianToGregorian(UT1ToLocal(getDateTime()));
   13084:	af3e      	add	r7, sp, #248	; 0xf8
   13086:	f000 f9b3 	bl	133f0 <Site::getDateTime()>
      if (convert.hmsToDouble(&local.hour, parameter, PM_HIGH) || convert.hmsToDouble(&local.hour, parameter, PM_HIGHEST)) {
   1308a:	ac40      	add	r4, sp, #256	; 0x100
      GregorianDate local = calendars.julianToGregorian(UT1ToLocal(getDateTime()));
   1308c:	4630      	mov	r0, r6
   1308e:	f000 feb1 	bl	13df4 <Site::UT1ToLocal(JulianDate)>
   13092:	4974      	ldr	r1, [pc, #464]	; (13264 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6fc>)
   13094:	4638      	mov	r0, r7
   13096:	f7f0 fc9f 	bl	39d8 <Calendars::julianToGregorian(JulianDate)>
      if (convert.hmsToDouble(&local.hour, parameter, PM_HIGH) || convert.hmsToDouble(&local.hour, parameter, PM_HIGHEST)) {
   1309a:	2302      	movs	r3, #2
   1309c:	462a      	mov	r2, r5
   1309e:	4621      	mov	r1, r4
   130a0:	4640      	mov	r0, r8
   130a2:	f7f1 fabd 	bl	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
   130a6:	b940      	cbnz	r0, 130ba <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x552>
   130a8:	462a      	mov	r2, r5
   130aa:	4640      	mov	r0, r8
   130ac:	2303      	movs	r3, #3
   130ae:	4621      	mov	r1, r4
   130b0:	f7f1 fab6 	bl	4620 <Convert::hmsToDouble(double*, char*, PrecisionMode)>
   130b4:	2800      	cmp	r0, #0
   130b6:	f43f af16 	beq.w	12ee6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37e>
        timeIsReady = true;
   130ba:	2301      	movs	r3, #1
   130bc:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
        setDateTime(localToUT1(calendars.gregorianToJulian(local)));
   130c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   130c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   130c8:	4866      	ldr	r0, [pc, #408]	; (13264 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6fc>)
   130ca:	e897 000c 	ldmia.w	r7, {r2, r3}
   130ce:	f7f0 fb8f 	bl	37f0 <Calendars::gregorianToJulian(GregorianDate)>
   130d2:	4630      	mov	r0, r6
   130d4:	ed8d 0b24 	vstr	d0, [sp, #144]	; 0x90
   130d8:	ed8d 1b26 	vstr	d1, [sp, #152]	; 0x98
   130dc:	f000 feb8 	bl	13e50 <Site::localToUT1(JulianDate)>
   130e0:	4630      	mov	r0, r6
   130e2:	ed8d 0b28 	vstr	d0, [sp, #160]	; 0xa0
   130e6:	ed8d 1b2a 	vstr	d1, [sp, #168]	; 0xa8
   130ea:	f000 fbbf 	bl	1386c <Site::setDateTime(JulianDate)>
        updateTLS();
   130ee:	4630      	mov	r0, r6
   130f0:	f000 f94e 	bl	13390 <Site::updateTLS()>
   130f4:	e6fa      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
    if (command[1] == 'v' && parameter[0] == 0) {
   130f6:	782c      	ldrb	r4, [r5, #0]
   130f8:	2c00      	cmp	r4, #0
   130fa:	f47f ad5b 	bne.w	12bb4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c>
      sprintF(reply, "%3.1f", location.elevation);
   130fe:	ed90 0a04 	vldr	s0, [r0, #16]
   13102:	4638      	mov	r0, r7
   13104:	4958      	ldr	r1, [pc, #352]	; (13268 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x700>)
   13106:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   1310a:	f7f0 ff95 	bl	4038 <sprintF(char*, char const*, double)>
      *numericReply = false;
   1310e:	9b61      	ldr	r3, [sp, #388]	; 0x184
  return true;
   13110:	2001      	movs	r0, #1
      *numericReply = false;
   13112:	701c      	strb	r4, [r3, #0]
   13114:	e54f      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
        setDateTime(localToUT1(calendars.gregorianToJulian(local)));        
   13116:	ab40      	add	r3, sp, #256	; 0x100
        dateIsReady = true;
   13118:	2201      	movs	r2, #1
   1311a:	f886 2054 	strb.w	r2, [r6, #84]	; 0x54
        setDateTime(localToUT1(calendars.gregorianToJulian(local)));        
   1311e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13120:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   13124:	484f      	ldr	r0, [pc, #316]	; (13264 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6fc>)
   13126:	e894 000c 	ldmia.w	r4, {r2, r3}
   1312a:	f7f0 fb61 	bl	37f0 <Calendars::gregorianToJulian(GregorianDate)>
   1312e:	4630      	mov	r0, r6
   13130:	f000 fe8e 	bl	13e50 <Site::localToUT1(JulianDate)>
   13134:	4630      	mov	r0, r6
   13136:	f000 fb99 	bl	1386c <Site::setDateTime(JulianDate)>
        updateTLS();
   1313a:	4630      	mov	r0, r6
   1313c:	f000 f928 	bl	13390 <Site::updateTLS()>
   13140:	e6d4      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
      precisionMode = PM_LOW;
   13142:	2401      	movs	r4, #1
   13144:	e71b      	b.n	12f7e <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x416>
        nv.readBytes(NV_SITE_BASE + locationNumber*LocationSize, &tempLocation, LocationSize);
   13146:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   1314a:	2328      	movs	r3, #40	; 0x28
   1314c:	aa3e      	add	r2, sp, #248	; 0xf8
   1314e:	4842      	ldr	r0, [pc, #264]	; (13258 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f0>)
   13150:	00e4      	lsls	r4, r4, #3
   13152:	3405      	adds	r4, #5
   13154:	4621      	mov	r1, r4
   13156:	f7f1 ff5f 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
        strcpy(tempLocation.name, parameter);
   1315a:	4629      	mov	r1, r5
   1315c:	a844      	add	r0, sp, #272	; 0x110
   1315e:	f00c fd7d 	bl	1fc5c <strcpy>
        nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &tempLocation, LocationSize);
   13162:	2328      	movs	r3, #40	; 0x28
   13164:	aa3e      	add	r2, sp, #248	; 0xf8
   13166:	4621      	mov	r1, r4
   13168:	483b      	ldr	r0, [pc, #236]	; (13258 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f0>)
   1316a:	f7f1 ff7f 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
        strcpy(location.name, parameter);
   1316e:	4629      	mov	r1, r5
   13170:	f106 0018 	add.w	r0, r6, #24
   13174:	f00c fd72 	bl	1fc5c <strcpy>
  return true;
   13178:	2001      	movs	r0, #1
   1317a:	e51c      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
      if (convert.dmsToDouble(&degs, parameter, true)) {
   1317c:	2301      	movs	r3, #1
   1317e:	462a      	mov	r2, r5
   13180:	4640      	mov	r0, r8
   13182:	a924      	add	r1, sp, #144	; 0x90
   13184:	f7f1 fc20 	bl	49c8 <Convert::dmsToDouble(double*, char*, bool)>
   13188:	2800      	cmp	r0, #0
   1318a:	f43f aeac 	beq.w	12ee6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37e>
        updateLocation();
   1318e:	4630      	mov	r0, r6
        location.latitude = degToRad(degs);
   13190:	ed9f 6b25 	vldr	d6, [pc, #148]	; 13228 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c0>
   13194:	ed9d 5b24 	vldr	d5, [sp, #144]	; 0x90
   13198:	ee85 7b06 	vdiv.f64	d7, d5, d6
   1319c:	ed86 7b00 	vstr	d7, [r6]
        updateLocation();
   131a0:	f000 fb12 	bl	137c8 <Site::updateLocation()>
        nv.updateBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   131a4:	f896 1085 	ldrb.w	r1, [r6, #133]	; 0x85
   131a8:	2328      	movs	r3, #40	; 0x28
   131aa:	4632      	mov	r2, r6
   131ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   131b0:	4829      	ldr	r0, [pc, #164]	; (13258 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f0>)
   131b2:	00c9      	lsls	r1, r1, #3
   131b4:	3105      	adds	r1, #5
   131b6:	f7f1 ff59 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   131ba:	482c      	ldr	r0, [pc, #176]	; (1326c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x704>)
   131bc:	f7ed ffb6 	bl	112c <Axis::getInstrumentCoordinate()>
   131c0:	4622      	mov	r2, r4
   131c2:	492b      	ldr	r1, [pc, #172]	; (13270 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x708>)
   131c4:	a828      	add	r0, sp, #160	; 0xa0
   131c6:	eeb0 8b40 	vmov.f64	d8, d0
   131ca:	f7fc f8ed 	bl	f3a8 <Home::getPosition(CoordReturn)>
   131ce:	ed9d 7b36 	vldr	d7, [sp, #216]	; 0xd8
   131d2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 13250 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6e8>
   131d6:	ee38 7b47 	vsub.f64	d7, d8, d7
   131da:	eeb0 7bc7 	vabs.f64	d7, d7
   131de:	eeb4 7bc6 	vcmpe.f64	d7, d6
   131e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   131e6:	f63f ae81 	bhi.w	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   131ea:	4822      	ldr	r0, [pc, #136]	; (13274 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x70c>)
   131ec:	f7ed ff9e 	bl	112c <Axis::getInstrumentCoordinate()>
   131f0:	2200      	movs	r2, #0
   131f2:	491f      	ldr	r1, [pc, #124]	; (13270 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x708>)
   131f4:	a83e      	add	r0, sp, #248	; 0xf8
   131f6:	eeb0 8b40 	vmov.f64	d8, d0
   131fa:	f7fc f8d5 	bl	f3a8 <Home::getPosition(CoordReturn)>
   131fe:	ed9d 7b50 	vldr	d7, [sp, #320]	; 0x140
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   13202:	ed9f 6b13 	vldr	d6, [pc, #76]	; 13250 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6e8>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   13206:	ee38 7b47 	vsub.f64	d7, d8, d7
   1320a:	eeb0 7bc7 	vabs.f64	d7, d7
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   1320e:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13216:	f63f ae69 	bhi.w	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
        if (mount.isHome()) home.init();
   1321a:	4815      	ldr	r0, [pc, #84]	; (13270 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x708>)
   1321c:	f7fc f9d8 	bl	f5d0 <Home::init()>
   13220:	e664      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
   13222:	bf00      	nop
   13224:	f3af 8000 	nop.w
   13228:	1a63c1f8 	.word	0x1a63c1f8
   1322c:	404ca5dc 	.word	0x404ca5dc
   13230:	00000000 	.word	0x00000000
   13234:	c0668000 	.word	0xc0668000
   13238:	00000000 	.word	0x00000000
   1323c:	40768000 	.word	0x40768000
   13240:	00000000 	.word	0x00000000
   13244:	40668000 	.word	0x40668000
   13248:	00000000 	.word	0x00000000
   1324c:	c02b8000 	.word	0xc02b8000
   13250:	71ef8766 	.word	0x71ef8766
   13254:	3e9787ad 	.word	0x3e9787ad
   13258:	20005e50 	.word	0x20005e50
   1325c:	2000224c 	.word	0x2000224c
   13260:	200043d0 	.word	0x200043d0
   13264:	20005b50 	.word	0x20005b50
   13268:	200023c8 	.word	0x200023c8
   1326c:	200050e8 	.word	0x200050e8
   13270:	20005478 	.word	0x20005478
   13274:	200051a8 	.word	0x200051a8
      double dut1 = strtod(parameter, &conv_end);
   13278:	a93e      	add	r1, sp, #248	; 0xf8
   1327a:	4628      	mov	r0, r5
   1327c:	f00b fd78 	bl	1ed70 <strtod>
      if (dut1 >= -0.9 && dut1 <= 0.9) {
   13280:	ed9f 7b37 	vldr	d7, [pc, #220]	; 13360 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7f8>
   13284:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1328c:	f6ff ae2b 	blt.w	12ee6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37e>
   13290:	ed9f 7b35 	vldr	d7, [pc, #212]	; 13368 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x800>
   13294:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1329c:	f63f ae23 	bhi.w	12ee6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37e>
          tlsFallback->DUT1 = dut1;
   132a0:	e9d6 2316 	ldrd	r2, r3, [r6, #88]	; 0x58
          tls->DUT1 = dut1;
   132a4:	ed82 0b02 	vstr	d0, [r2, #8]
          tlsFallback->DUT1 = dut1;
   132a8:	ed83 0b02 	vstr	d0, [r3, #8]
   132ac:	e61e      	b.n	12eec <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
        convert.doubleToHms(reply, rangeHours(getTime()), false, PM_HIGH);
   132ae:	f000 f943 	bl	13538 <Site::getTime()>
   132b2:	4630      	mov	r0, r6
   132b4:	f000 fdfa 	bl	13eac <Site::rangeHours(double)>
   132b8:	2302      	movs	r3, #2
   132ba:	482d      	ldr	r0, [pc, #180]	; (13370 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x808>)
   132bc:	4622      	mov	r2, r4
   132be:	4639      	mov	r1, r7
   132c0:	f7f0 ff36 	bl	4130 <Convert::doubleToHms(char*, double, bool, PrecisionMode)>
        *numericReply = false;
   132c4:	9b61      	ldr	r3, [sp, #388]	; 0x184
  return true;
   132c6:	2001      	movs	r0, #1
        *numericReply = false;
   132c8:	701c      	strb	r4, [r3, #0]
   132ca:	e474      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
        JulianDate julianDay = ut1;
   132cc:	f100 0360 	add.w	r3, r0, #96	; 0x60
   132d0:	ac28      	add	r4, sp, #160	; 0xa0
   132d2:	ed90 8b18 	vldr	d8, [r0, #96]	; 0x60
   132d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   132d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        double hour = getTime();
   132dc:	4630      	mov	r0, r6
   132de:	f000 f92b 	bl	13538 <Site::getTime()>
        while (hour >= 24.0) { hour -= 24.0; julianDay.day += 1.0; }
   132e2:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
   132e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
   132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   132ee:	db0a      	blt.n	13306 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x79e>
   132f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   132f4:	ee30 0b47 	vsub.f64	d0, d0, d7
   132f8:	ee38 8b06 	vadd.f64	d8, d8, d6
   132fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13304:	daf6      	bge.n	132f4 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x78c>
        if    (hour < 0.0)   { hour += 24.0; julianDay.day -= 1.0; }
   13306:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   1330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1330e:	d503      	bpl.n	13318 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7b0>
   13310:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   13314:	ee38 8b47 	vsub.f64	d8, d8, d7
        GregorianDate date = calendars.julianDayToGregorian(julianDay);
   13318:	4916      	ldr	r1, [pc, #88]	; (13374 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x80c>)
   1331a:	eeb0 0b48 	vmov.f64	d0, d8
   1331e:	a83e      	add	r0, sp, #248	; 0xf8
        sprintf(reply,"%02d/%02d/%02d", (int)date.month, (int)date.day, (int)date.year % 100);
   13320:	2464      	movs	r4, #100	; 0x64
        GregorianDate date = calendars.julianDayToGregorian(julianDay);
   13322:	ed9d 1b2a 	vldr	d1, [sp, #168]	; 0xa8
   13326:	ed8d 8b28 	vstr	d8, [sp, #160]	; 0xa0
   1332a:	f7f0 fa9d 	bl	3868 <Calendars::julianDayToGregorian(JulianDate)>
        sprintf(reply,"%02d/%02d/%02d", (int)date.month, (int)date.day, (int)date.year % 100);
   1332e:	f9bd 20f8 	ldrsh.w	r2, [sp, #248]	; 0xf8
   13332:	4811      	ldr	r0, [pc, #68]	; (13378 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x810>)
   13334:	f89d 30fb 	ldrb.w	r3, [sp, #251]	; 0xfb
   13338:	fb80 1002 	smull	r1, r0, r0, r2
   1333c:	17d1      	asrs	r1, r2, #31
   1333e:	ebc1 1160 	rsb	r1, r1, r0, asr #5
   13342:	4638      	mov	r0, r7
   13344:	fb04 2411 	mls	r4, r4, r1, r2
   13348:	f89d 20fa 	ldrb.w	r2, [sp, #250]	; 0xfa
   1334c:	490b      	ldr	r1, [pc, #44]	; (1337c <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x814>)
   1334e:	b224      	sxth	r4, r4
   13350:	9400      	str	r4, [sp, #0]
   13352:	f00b fdcd 	bl	1eef0 <sprintf>
        *numericReply = false;
   13356:	2300      	movs	r3, #0
   13358:	9a61      	ldr	r2, [sp, #388]	; 0x184
  return true;
   1335a:	2001      	movs	r0, #1
        *numericReply = false;
   1335c:	7013      	strb	r3, [r2, #0]
   1335e:	e42a      	b.n	12bb6 <Site::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4e>
   13360:	cccccccd 	.word	0xcccccccd
   13364:	bfeccccc 	.word	0xbfeccccc
   13368:	cccccccd 	.word	0xcccccccd
   1336c:	3feccccc 	.word	0x3feccccc
   13370:	200043d0 	.word	0x200043d0
   13374:	20005b50 	.word	0x20005b50
   13378:	51eb851f 	.word	0x51eb851f
   1337c:	200021f0 	.word	0x200021f0

00013380 <clockTickWrapper()>:
#include "../limits/Limits.h"
#include "../Mount.h"

// fractional second sidereal clock (fracsec or millisecond)
volatile unsigned long fracLAST;
IRAM_ATTR void clockTickWrapper() { fracLAST++; }
   13380:	4a02      	ldr	r2, [pc, #8]	; (1338c <clockTickWrapper()+0xc>)
   13382:	6813      	ldr	r3, [r2, #0]
   13384:	3301      	adds	r3, #1
   13386:	6013      	str	r3, [r2, #0]
   13388:	4770      	bx	lr
   1338a:	bf00      	nop
   1338c:	20005be8 	.word	0x20005be8

00013390 <Site::updateTLS()>:
  ut1.hour = getTime();
  setSiderealTime(ut1);
}

// update the initError status and restore the park position if necessary
void Site::updateTLS() {
   13390:	b510      	push	{r4, lr}
   13392:	4604      	mov	r4, r0
  #if TIME_LOCATION_SOURCE != OFF
    tls->set(ut1);
   13394:	6d80      	ldr	r0, [r0, #88]	; 0x58
   13396:	6803      	ldr	r3, [r0, #0]
   13398:	ed94 0b18 	vldr	d0, [r4, #96]	; 0x60
   1339c:	ed94 1b1a 	vldr	d1, [r4, #104]	; 0x68
   133a0:	689b      	ldr	r3, [r3, #8]
   133a2:	4798      	blx	r3
  #endif
  #if TIME_LOCATION_SOURCE_FALLBACK != OFF
    tlsFallback->set(ut1);
   133a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   133a6:	6803      	ldr	r3, [r0, #0]
   133a8:	ed94 0b18 	vldr	d0, [r4, #96]	; 0x60
   133ac:	689b      	ldr	r3, [r3, #8]
   133ae:	ed94 1b1a 	vldr	d1, [r4, #104]	; 0x68
   133b2:	4798      	blx	r3
  setLAST(julianDate, julianDateToLAST(julianDate));
}

// checks if the date and time were set
bool Site::isDateTimeReady() {
  return dateIsReady && timeIsReady;
   133b4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
   133b8:	b16b      	cbz	r3, 133d6 <Site::updateTLS()+0x46>
   133ba:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
   133be:	b153      	cbz	r3, 133d6 <Site::updateTLS()+0x46>
    if (initError.tls) initError.tls = false;
   133c0:	4a08      	ldr	r2, [pc, #32]	; (133e4 <Site::updateTLS()+0x54>)
   133c2:	7813      	ldrb	r3, [r2, #0]
   133c4:	06d9      	lsls	r1, r3, #27
   133c6:	d502      	bpl.n	133ce <Site::updateTLS()+0x3e>
   133c8:	f36f 1304 	bfc	r3, #4, #1
   133cc:	7013      	strb	r3, [r2, #0]
      if (park.state == PS_PARKED) park.restore(false);
   133ce:	4806      	ldr	r0, [pc, #24]	; (133e8 <Site::updateTLS()+0x58>)
   133d0:	7803      	ldrb	r3, [r0, #0]
   133d2:	2b02      	cmp	r3, #2
   133d4:	d000      	beq.n	133d8 <Site::updateTLS()+0x48>
}
   133d6:	bd10      	pop	{r4, pc}
      if (park.state == PS_PARKED) park.restore(false);
   133d8:	2100      	movs	r1, #0
}
   133da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      if (park.state == PS_PARKED) park.restore(false);
   133de:	f7fe bc0b 	b.w	11bf8 <Park::restore(bool)>
   133e2:	bf00      	nop
   133e4:	20005ccc 	.word	0x20005ccc
   133e8:	20005ea8 	.word	0x20005ea8
   133ec:	00000000 	.word	0x00000000

000133f0 <Site::getDateTime()>:
  JulianDate now = ut1;
   133f0:	ed90 0b18 	vldr	d0, [r0, #96]	; 0x60
JulianDate Site::getDateTime() {
   133f4:	b088      	sub	sp, #32
}

// gets the time in hours that have passed since Julian Day was set (UT1)
double Site::getTime() {
  unsigned long cs;
  noInterrupts();
   133f6:	b672      	cpsid	i
  cs = fracLAST;
   133f8:	4b21      	ldr	r3, [pc, #132]	; (13480 <Site::getDateTime()+0x90>)
   133fa:	681b      	ldr	r3, [r3, #0]
  interrupts();
   133fc:	b662      	cpsie	i
  return fracHOUR + fsToHours((cs - fracSTART)/SIDEREAL_RATIO);
   133fe:	6f82      	ldr	r2, [r0, #120]	; 0x78
  while (now.hour >= 24.0) { now.hour -= 24.0; now.day += 1.0; }
   13400:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  return fracHOUR + fsToHours((cs - fracSTART)/SIDEREAL_RATIO);
   13404:	1a9b      	subs	r3, r3, r2
   13406:	ee06 3a90 	vmov	s13, r3
   1340a:	ed9f 2b19 	vldr	d2, [pc, #100]	; 13470 <Site::getDateTime()+0x80>
   1340e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   13412:	ed9f 4b19 	vldr	d4, [pc, #100]	; 13478 <Site::getDateTime()+0x88>
   13416:	ee86 3b02 	vdiv.f64	d3, d6, d2
   1341a:	ed90 5b1c 	vldr	d5, [r0, #112]	; 0x70
   1341e:	ee83 1b04 	vdiv.f64	d1, d3, d4
   13422:	ee31 1b05 	vadd.f64	d1, d1, d5
  while (now.hour >= 24.0) { now.hour -= 24.0; now.day += 1.0; }
   13426:	eeb4 1bc7 	vcmpe.f64	d1, d7
   1342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1342e:	db0a      	blt.n	13446 <Site::getDateTime()+0x56>
   13430:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   13434:	ee31 1b47 	vsub.f64	d1, d1, d7
   13438:	ee30 0b06 	vadd.f64	d0, d0, d6
   1343c:	eeb4 1bc7 	vcmpe.f64	d1, d7
   13440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13444:	daf6      	bge.n	13434 <Site::getDateTime()+0x44>
  while (now.hour <  0.0)  { now.hour += 24.0; now.day -= 1.0; }
   13446:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
   1344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1344e:	d50c      	bpl.n	1346a <Site::getDateTime()+0x7a>
   13450:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
   13454:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   13458:	ee31 1b06 	vadd.f64	d1, d1, d6
   1345c:	ee30 0b47 	vsub.f64	d0, d0, d7
   13460:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
   13464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13468:	d4f6      	bmi.n	13458 <Site::getDateTime()+0x68>
}
   1346a:	b008      	add	sp, #32
   1346c:	4770      	bx	lr
   1346e:	bf00      	nop
   13470:	e7f1efef 	.word	0xe7f1efef
   13474:	3ff00b36 	.word	0x3ff00b36
   13478:	dd800000 	.word	0xdd800000
   1347c:	413ce950 	.word	0x413ce950
   13480:	20005be8 	.word	0x20005be8
   13484:	00000000 	.word	0x00000000

00013488 <Site::getSiderealTime()>:
  noInterrupts();
   13488:	b672      	cpsid	i
  fs = fracLAST;
   1348a:	4b15      	ldr	r3, [pc, #84]	; (134e0 <Site::getSiderealTime()+0x58>)
   1348c:	ed93 6a00 	vldr	s12, [r3]
  interrupts();
   13490:	b662      	cpsie	i
  return rangeHours(fsToHours(fs));
   13492:	ed9f 5b11 	vldr	d5, [pc, #68]	; 134d8 <Site::getSiderealTime()+0x50>
   13496:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
  return local;
}

// adjust into the 0 to 24 range
double Site::rangeHours(double time) {
  while (time >= 24.0) time -= 24.0;
   1349a:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  return rangeHours(fsToHours(fs));
   1349e:	ee86 0b05 	vdiv.f64	d0, d6, d5
  while (time >= 24.0) time -= 24.0;
   134a2:	eeb4 0bc7 	vcmpe.f64	d0, d7
   134a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134aa:	db06      	blt.n	134ba <Site::getSiderealTime()+0x32>
   134ac:	ee30 0b47 	vsub.f64	d0, d0, d7
   134b0:	eeb4 0bc7 	vcmpe.f64	d0, d7
   134b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134b8:	daf8      	bge.n	134ac <Site::getSiderealTime()+0x24>
  while (time < 0.0)   time += 24.0;
   134ba:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   134be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134c2:	d508      	bpl.n	134d6 <Site::getSiderealTime()+0x4e>
   134c4:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
   134c8:	ee30 0b07 	vadd.f64	d0, d0, d7
   134cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   134d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   134d4:	d4f8      	bmi.n	134c8 <Site::getSiderealTime()+0x40>
}
   134d6:	4770      	bx	lr
   134d8:	dd800000 	.word	0xdd800000
   134dc:	413ce950 	.word	0x413ce950
   134e0:	20005be8 	.word	0x20005be8

000134e4 <Site::isDateTimeReady()>:
  return dateIsReady && timeIsReady;
   134e4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   134e8:	b10b      	cbz	r3, 134ee <Site::isDateTimeReady()+0xa>
   134ea:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
}
   134ee:	4618      	mov	r0, r3
   134f0:	4770      	bx	lr
   134f2:	bf00      	nop

000134f4 <Site::getSiderealPeriod()>:
}
   134f4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   134f8:	4770      	bx	lr
   134fa:	bf00      	nop

000134fc <Site::setSiderealPeriod(unsigned long)>:
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   134fc:	ee07 1a10 	vmov	s14, r1
   13500:	eddf 7a0b 	vldr	s15, [pc, #44]	; 13530 <Site::setSiderealPeriod(unsigned long)+0x34>
void Site::setSiderealPeriod(unsigned long period) {
   13504:	460b      	mov	r3, r1
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   13506:	eeb8 0a47 	vcvt.f32.u32	s0, s14
void Site::setSiderealPeriod(unsigned long period) {
   1350a:	b500      	push	{lr}
  { return __builtin_lroundf(__x); }
   1350c:	ee80 0a27 	vdiv.f32	s0, s0, s15
   13510:	b083      	sub	sp, #12
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   13512:	f890 1084 	ldrb.w	r1, [r0, #132]	; 0x84
  siderealPeriod = period;
   13516:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   1351a:	9101      	str	r1, [sp, #4]
   1351c:	f008 fa1e 	bl	1b95c <lroundf>
   13520:	9901      	ldr	r1, [sp, #4]
   13522:	4602      	mov	r2, r0
   13524:	4803      	ldr	r0, [pc, #12]	; (13534 <Site::setSiderealPeriod(unsigned long)+0x38>)
}
   13526:	b003      	add	sp, #12
   13528:	f85d eb04 	ldr.w	lr, [sp], #4
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   1352c:	f7f2 bf1c 	b.w	6368 <Tasks::setPeriodSubMicros(unsigned char, unsigned long)>
   13530:	44039436 	.word	0x44039436
   13534:	2000634c 	.word	0x2000634c

00013538 <Site::getTime()>:
  noInterrupts();
   13538:	b672      	cpsid	i
  cs = fracLAST;
   1353a:	4b0f      	ldr	r3, [pc, #60]	; (13578 <Site::getTime()+0x40>)
   1353c:	681b      	ldr	r3, [r3, #0]
  interrupts();
   1353e:	b662      	cpsie	i
  return fracHOUR + fsToHours((cs - fracSTART)/SIDEREAL_RATIO);
   13540:	6f82      	ldr	r2, [r0, #120]	; 0x78
   13542:	1a9b      	subs	r3, r3, r2
   13544:	ee07 3a90 	vmov	s15, r3
   13548:	ed9f 3b07 	vldr	d3, [pc, #28]	; 13568 <Site::getTime()+0x30>
   1354c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   13550:	ed9f 5b07 	vldr	d5, [pc, #28]	; 13570 <Site::getTime()+0x38>
   13554:	ee87 4b03 	vdiv.f64	d4, d7, d3
   13558:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
   1355c:	ee84 0b05 	vdiv.f64	d0, d4, d5
}
   13560:	ee30 0b06 	vadd.f64	d0, d0, d6
   13564:	4770      	bx	lr
   13566:	bf00      	nop
   13568:	e7f1efef 	.word	0xe7f1efef
   1356c:	3ff00b36 	.word	0x3ff00b36
   13570:	dd800000 	.word	0xdd800000
   13574:	413ce950 	.word	0x413ce950
   13578:	20005be8 	.word	0x20005be8
   1357c:	00000000 	.word	0x00000000

00013580 <Site::julianDateToGAST(JulianDate)>:
double Site::julianDateToGAST(JulianDate julianDate) {
   13580:	b510      	push	{r4, lr}
   13582:	ed2d 8b0c 	vpush	{d8-d13}
   13586:	b092      	sub	sp, #72	; 0x48
  date = calendars.julianDayToGregorian(julianDate);
   13588:	4961      	ldr	r1, [pc, #388]	; (13710 <Site::julianDateToGAST(JulianDate)+0x190>)
double Site::julianDateToGAST(JulianDate julianDate) {
   1358a:	eeb0 9b41 	vmov.f64	d9, d1
  date = calendars.julianDayToGregorian(julianDate);
   1358e:	ac0c      	add	r4, sp, #48	; 0x30
  double D= (julianDate.day - 2451545.0) + julianDate.hour/24.0;
   13590:	eeb3 ab08 	vmov.f64	d10, #56	; 0x41c00000  24.0
  date = calendars.julianDayToGregorian(julianDate);
   13594:	4620      	mov	r0, r4
double Site::julianDateToGAST(JulianDate julianDate) {
   13596:	ed8d 0b04 	vstr	d0, [sp, #16]
  date = calendars.julianDayToGregorian(julianDate);
   1359a:	f7f0 f965 	bl	3868 <Calendars::julianDayToGregorian(JulianDate)>
  JulianDate julianDay0 = calendars.gregorianToJulianDay(date);
   1359e:	ab12      	add	r3, sp, #72	; 0x48
   135a0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   135a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   135a8:	4859      	ldr	r0, [pc, #356]	; (13710 <Site::julianDateToGAST(JulianDate)+0x190>)
   135aa:	e894 000c 	ldmia.w	r4, {r2, r3}
   135ae:	f7f0 f8b3 	bl	3718 <Calendars::gregorianToJulianDay(GregorianDate)>
  double D= (julianDate.day - 2451545.0) + julianDate.hour/24.0;
   135b2:	ee89 2b0a 	vdiv.f64	d2, d9, d10
   135b6:	ed9f 4b38 	vldr	d4, [pc, #224]	; 13698 <Site::julianDateToGAST(JulianDate)+0x118>
   135ba:	ed9d 6b04 	vldr	d6, [sp, #16]
  double T = D/36525.0;
   135be:	ed9f 3b38 	vldr	d3, [pc, #224]	; 136a0 <Site::julianDateToGAST(JulianDate)+0x120>
  double D0=(julianDay0.day - 2451545.0);
   135c2:	ee30 0b44 	vsub.f64	d0, d0, d4
  double D= (julianDate.day - 2451545.0) + julianDate.hour/24.0;
   135c6:	ee36 6b44 	vsub.f64	d6, d6, d4
  double gmst = 6.697374558 + 0.06570982441908*D0;
   135ca:	ed9f 5b37 	vldr	d5, [pc, #220]	; 136a8 <Site::julianDateToGAST(JulianDate)+0x128>
   135ce:	ed9f 7b38 	vldr	d7, [pc, #224]	; 136b0 <Site::julianDateToGAST(JulianDate)+0x130>
  gmst = gmst + SIDEREAL_RATIO*H + 0.000026*T*T;
   135d2:	ed9f 4b39 	vldr	d4, [pc, #228]	; 136b8 <Site::julianDateToGAST(JulianDate)+0x138>
  double O = 125.04  - 0.052954 *D;
   135d6:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 136c0 <Site::julianDateToGAST(JulianDate)+0x140>
  double gmst = 6.697374558 + 0.06570982441908*D0;
   135da:	eea0 7b05 	vfma.f64	d7, d0, d5
  double O = 125.04  - 0.052954 *D;
   135de:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 136c8 <Site::julianDateToGAST(JulianDate)+0x148>
  double W = -0.000319*sin(degToRad(O)) - 0.000024*sin(degToRad(2*L));
   135e2:	ed9f bb3b 	vldr	d11, [pc, #236]	; 136d0 <Site::julianDateToGAST(JulianDate)+0x150>
  double E = 23.4393 - 0.0000004*D;
   135e6:	ed9f cb3c 	vldr	d12, [pc, #240]	; 136d8 <Site::julianDateToGAST(JulianDate)+0x158>
  gmst = gmst + SIDEREAL_RATIO*H + 0.000026*T*T;
   135ea:	eea9 7b04 	vfma.f64	d7, d9, d4
   135ee:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 136e0 <Site::julianDateToGAST(JulianDate)+0x160>
  double D= (julianDate.day - 2451545.0) + julianDate.hour/24.0;
   135f2:	ee36 6b02 	vadd.f64	d6, d6, d2
  double L = 280.47  + 0.98565  *D;
   135f6:	ed9f 9b3c 	vldr	d9, [pc, #240]	; 136e8 <Site::julianDateToGAST(JulianDate)+0x168>
  double T = D/36525.0;
   135fa:	ee86 2b03 	vdiv.f64	d2, d6, d3
  double O = 125.04  - 0.052954 *D;
   135fe:	eea6 5b41 	vfms.f64	d5, d6, d1
  double L = 280.47  + 0.98565  *D;
   13602:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 136f0 <Site::julianDateToGAST(JulianDate)+0x170>
   13606:	eea6 9b03 	vfma.f64	d9, d6, d3
  double W = -0.000319*sin(degToRad(O)) - 0.000024*sin(degToRad(2*L));
   1360a:	ee85 0b0b 	vdiv.f64	d0, d5, d11
  double E = 23.4393 - 0.0000004*D;
   1360e:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 136f8 <Site::julianDateToGAST(JulianDate)+0x178>
  double W = -0.000319*sin(degToRad(O)) - 0.000024*sin(degToRad(2*L));
   13612:	ee39 9b09 	vadd.f64	d9, d9, d9
  double E = 23.4393 - 0.0000004*D;
   13616:	eea6 cb43 	vfms.f64	d12, d6, d3
  gmst = gmst + SIDEREAL_RATIO*H + 0.000026*T*T;
   1361a:	ee22 4b04 	vmul.f64	d4, d2, d4
   1361e:	eea4 7b02 	vfma.f64	d7, d4, d2
   13622:	eeb0 8b47 	vmov.f64	d8, d7
  double W = -0.000319*sin(degToRad(O)) - 0.000024*sin(degToRad(2*L));
   13626:	f007 fdb7 	bl	1b198 <sin>
   1362a:	eeb0 db40 	vmov.f64	d13, d0
   1362e:	ee89 0b0b 	vdiv.f64	d0, d9, d11
   13632:	f007 fdb1 	bl	1b198 <sin>
   13636:	ed9f 9b32 	vldr	d9, [pc, #200]	; 13700 <Site::julianDateToGAST(JulianDate)+0x180>
   1363a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 13708 <Site::julianDateToGAST(JulianDate)+0x188>
   1363e:	ee29 9b40 	vnmul.f64	d9, d9, d0
  double eqeq = W*cos(degToRad(E));
   13642:	ee8c 0b0b 	vdiv.f64	d0, d12, d11
  double W = -0.000319*sin(degToRad(O)) - 0.000024*sin(degToRad(2*L));
   13646:	eead 9b07 	vfma.f64	d9, d13, d7
  double eqeq = W*cos(degToRad(E));
   1364a:	f007 fd31 	bl	1b0b0 <cos>
  double gast = gmst + eqeq;
   1364e:	eea0 8b09 	vfma.f64	d8, d0, d9
  while (time >= 24.0) time -= 24.0;
   13652:	eeb4 8bca 	vcmpe.f64	d8, d10
   13656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1365a:	db06      	blt.n	1366a <Site::julianDateToGAST(JulianDate)+0xea>
   1365c:	ee38 8b4a 	vsub.f64	d8, d8, d10
   13660:	eeb4 8bca 	vcmpe.f64	d8, d10
   13664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13668:	daf8      	bge.n	1365c <Site::julianDateToGAST(JulianDate)+0xdc>
  while (time < 0.0)   time += 24.0;
   1366a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   1366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13672:	d508      	bpl.n	13686 <Site::julianDateToGAST(JulianDate)+0x106>
   13674:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
   13678:	ee38 8b06 	vadd.f64	d8, d8, d6
   1367c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   13680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13684:	d4f8      	bmi.n	13678 <Site::julianDateToGAST(JulianDate)+0xf8>
}
   13686:	eeb0 0b48 	vmov.f64	d0, d8
   1368a:	b012      	add	sp, #72	; 0x48
   1368c:	ecbd 8b0c 	vpop	{d8-d13}
   13690:	bd10      	pop	{r4, pc}
   13692:	bf00      	nop
   13694:	f3af 8000 	nop.w
   13698:	80000000 	.word	0x80000000
   1369c:	4142b42c 	.word	0x4142b42c
   136a0:	00000000 	.word	0x00000000
   136a4:	40e1d5a0 	.word	0x40e1d5a0
   136a8:	eae7e5d7 	.word	0xeae7e5d7
   136ac:	3fb0d25b 	.word	0x3fb0d25b
   136b0:	8e5eb098 	.word	0x8e5eb098
   136b4:	401aca1c 	.word	0x401aca1c
   136b8:	e7f1efef 	.word	0xe7f1efef
   136bc:	3ff00b36 	.word	0x3ff00b36
   136c0:	64628028 	.word	0x64628028
   136c4:	3fab1cc9 	.word	0x3fab1cc9
   136c8:	5c28f5c3 	.word	0x5c28f5c3
   136cc:	405f428f 	.word	0x405f428f
   136d0:	1a63c1f8 	.word	0x1a63c1f8
   136d4:	404ca5dc 	.word	0x404ca5dc
   136d8:	f6fd21ff 	.word	0xf6fd21ff
   136dc:	40377075 	.word	0x40377075
   136e0:	6527a205 	.word	0x6527a205
   136e4:	3efb4352 	.word	0x3efb4352
   136e8:	1eb851ec 	.word	0x1eb851ec
   136ec:	40718785 	.word	0x40718785
   136f0:	de69ad43 	.word	0xde69ad43
   136f4:	3fef8a71 	.word	0x3fef8a71
   136f8:	9abcaf48 	.word	0x9abcaf48
   136fc:	3e9ad7f2 	.word	0x3e9ad7f2
   13700:	7110e454 	.word	0x7110e454
   13704:	3ef92a73 	.word	0x3ef92a73
   13708:	9142b303 	.word	0x9142b303
   1370c:	bf34e7ee 	.word	0xbf34e7ee
   13710:	20005b50 	.word	0x20005b50
   13714:	00000000 	.word	0x00000000

00013718 <Site::setSiderealTime(JulianDate)>:
void Site::setSiderealTime(JulianDate julianDate) {
   13718:	b510      	push	{r4, lr}
   1371a:	ed2d 8b02 	vpush	{d8}
   1371e:	b088      	sub	sp, #32
   13720:	4604      	mov	r4, r0
   13722:	eeb0 8b41 	vmov.f64	d8, d1
  setLAST(julianDate, julianDateToLAST(julianDate));
   13726:	466b      	mov	r3, sp
   13728:	f10d 0c20 	add.w	ip, sp, #32
void Site::setSiderealTime(JulianDate julianDate) {
   1372c:	ed8d 0b00 	vstr	d0, [sp]
   13730:	ed8d 1b02 	vstr	d1, [sp, #8]
   13734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13736:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  double gast = julianDateToGAST(julianDate);
   1373a:	4620      	mov	r0, r4
   1373c:	ed9d 0b04 	vldr	d0, [sp, #16]
   13740:	ed9d 1b06 	vldr	d1, [sp, #24]
   13744:	f7ff ff1c 	bl	13580 <Site::julianDateToGAST(JulianDate)>
  while (time >= 24.0) time -= 24.0;
   13748:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
  return rangeHours(gast - radToHrs(location.longitude));
   1374c:	ed94 6b02 	vldr	d6, [r4, #8]
   13750:	ed9f 5b17 	vldr	d5, [pc, #92]	; 137b0 <Site::setSiderealTime(JulianDate)+0x98>
   13754:	eea6 0b45 	vfms.f64	d0, d6, d5
  while (time >= 24.0) time -= 24.0;
   13758:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13760:	db06      	blt.n	13770 <Site::setSiderealTime(JulianDate)+0x58>
   13762:	ee30 0b47 	vsub.f64	d0, d0, d7
   13766:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1376e:	daf8      	bge.n	13762 <Site::setSiderealTime(JulianDate)+0x4a>
  while (time < 0.0)   time += 24.0;
   13770:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   13774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13778:	d508      	bpl.n	1378c <Site::setSiderealTime(JulianDate)+0x74>
   1377a:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
   1377e:	ee30 0b07 	vadd.f64	d0, d0, d7
   13782:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   13786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1378a:	d4f8      	bmi.n	1377e <Site::setSiderealTime(JulianDate)+0x66>
  long fs = lround(hoursToFs(time));
   1378c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 137b8 <Site::setSiderealTime(JulianDate)+0xa0>
   13790:	ee20 0b07 	vmul.f64	d0, d0, d7
   13794:	f006 fbfc 	bl	19f90 <lround>
  fracSTART = fs;
   13798:	67a0      	str	r0, [r4, #120]	; 0x78
  fracHOUR = julianDate.hour;
   1379a:	ed84 8b1c 	vstr	d8, [r4, #112]	; 0x70
  noInterrupts();
   1379e:	b672      	cpsid	i
  fracLAST = fs;
   137a0:	4b07      	ldr	r3, [pc, #28]	; (137c0 <Site::setSiderealTime(JulianDate)+0xa8>)
   137a2:	6018      	str	r0, [r3, #0]
  interrupts();
   137a4:	b662      	cpsie	i
}
   137a6:	b008      	add	sp, #32
   137a8:	ecbd 8b02 	vpop	{d8}
   137ac:	bd10      	pop	{r4, pc}
   137ae:	bf00      	nop
   137b0:	a4aeacc4 	.word	0xa4aeacc4
   137b4:	400e8ec8 	.word	0x400e8ec8
   137b8:	dd800000 	.word	0xdd800000
   137bc:	413ce950 	.word	0x413ce950
   137c0:	20005be8 	.word	0x20005be8
   137c4:	00000000 	.word	0x00000000

000137c8 <Site::updateLocation()>:
void Site::updateLocation() {
   137c8:	b510      	push	{r4, lr}
   137ca:	ed2d 8b02 	vpush	{d8}
  locationEx.latitude.cosine = cos(location.latitude);
   137ce:	ed90 8b00 	vldr	d8, [r0]
void Site::updateLocation() {
   137d2:	4604      	mov	r4, r0
  locationEx.latitude.cosine = cos(location.latitude);
   137d4:	eeb0 0b48 	vmov.f64	d0, d8
   137d8:	f007 fc6a 	bl	1b0b0 <cos>
   137dc:	ed84 0b0c 	vstr	d0, [r4, #48]	; 0x30
  locationEx.latitude.sine   = sin(location.latitude);
   137e0:	eeb0 0b48 	vmov.f64	d0, d8
   137e4:	f007 fcd8 	bl	1b198 <sin>
  if (location.latitude >= 0.0) locationEx.latitude.sign = 1.0; else locationEx.latitude.sign = -1.0;
   137e8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   137ec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
  locationEx.latitude.absval = fabs(location.latitude);
   137f0:	eeb0 8bc8 	vabs.f64	d8, d8
  if (location.latitude >= 0.0) locationEx.latitude.sign = 1.0; else locationEx.latitude.sign = -1.0;
   137f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   137f8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  locationEx.latitude.sine   = sin(location.latitude);
   137fc:	ed84 0b0a 	vstr	d0, [r4, #40]	; 0x28
  if (location.latitude >= 0.0) locationEx.latitude.sign = 1.0; else locationEx.latitude.sign = -1.0;
   13800:	fe27 7b06 	vselge.f64	d7, d7, d6
  locationEx.latitude.absval = fabs(location.latitude);
   13804:	ed84 8b0e 	vstr	d8, [r4, #56]	; 0x38
  if (location.latitude >= 0.0) locationEx.latitude.sign = 1.0; else locationEx.latitude.sign = -1.0;
   13808:	ed84 7b10 	vstr	d7, [r4, #64]	; 0x40
  noInterrupts();
   1380c:	b672      	cpsid	i
  cs = fracLAST;
   1380e:	4b16      	ldr	r3, [pc, #88]	; (13868 <Site::updateLocation()+0xa0>)
   13810:	681b      	ldr	r3, [r3, #0]
  interrupts();
   13812:	b662      	cpsie	i
  return fracHOUR + fsToHours((cs - fracSTART)/SIDEREAL_RATIO);
   13814:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  setSiderealTime(ut1);
   13816:	4620      	mov	r0, r4
  return fracHOUR + fsToHours((cs - fracSTART)/SIDEREAL_RATIO);
   13818:	1a9b      	subs	r3, r3, r2
   1381a:	ee07 3a90 	vmov	s15, r3
   1381e:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 13858 <Site::updateLocation()+0x90>
   13822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   13826:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 13860 <Site::updateLocation()+0x98>
   1382a:	ee87 4b03 	vdiv.f64	d4, d7, d3
   1382e:	ed94 6b1c 	vldr	d6, [r4, #112]	; 0x70
}
   13832:	ecbd 8b02 	vpop	{d8}
  setSiderealTime(ut1);
   13836:	ed94 0b18 	vldr	d0, [r4, #96]	; 0x60
  return fracHOUR + fsToHours((cs - fracSTART)/SIDEREAL_RATIO);
   1383a:	ee84 7b05 	vdiv.f64	d7, d4, d5
   1383e:	ee37 7b06 	vadd.f64	d7, d7, d6
  ut1.hour = getTime();
   13842:	ed84 7b1a 	vstr	d7, [r4, #104]	; 0x68
  setSiderealTime(ut1);
   13846:	eeb0 1b47 	vmov.f64	d1, d7
}
   1384a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setSiderealTime(ut1);
   1384e:	f7ff bf63 	b.w	13718 <Site::setSiderealTime(JulianDate)>
   13852:	bf00      	nop
   13854:	f3af 8000 	nop.w
   13858:	e7f1efef 	.word	0xe7f1efef
   1385c:	3ff00b36 	.word	0x3ff00b36
   13860:	dd800000 	.word	0xdd800000
   13864:	413ce950 	.word	0x413ce950
   13868:	20005be8 	.word	0x20005be8

0001386c <Site::setDateTime(JulianDate)>:
void Site::setDateTime(JulianDate julianDate) {
   1386c:	b530      	push	{r4, r5, lr}
   1386e:	b085      	sub	sp, #20
   13870:	4604      	mov	r4, r0
  ut1 = julianDate;
   13872:	f100 0560 	add.w	r5, r0, #96	; 0x60
   13876:	ab04      	add	r3, sp, #16
void Site::setDateTime(JulianDate julianDate) {
   13878:	ed8d 0b00 	vstr	d0, [sp]
   1387c:	ed8d 1b02 	vstr	d1, [sp, #8]
  ut1 = julianDate;
   13880:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   13884:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  setSiderealTime(julianDate);
   13888:	4620      	mov	r0, r4
   1388a:	f7ff ff45 	bl	13718 <Site::setSiderealTime(JulianDate)>
  if (writeTime) nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   1388e:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
   13892:	b90b      	cbnz	r3, 13898 <Site::setDateTime(JulianDate)+0x2c>
}
   13894:	b005      	add	sp, #20
   13896:	bd30      	pop	{r4, r5, pc}
  if (writeTime) nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13898:	2310      	movs	r3, #16
   1389a:	462a      	mov	r2, r5
   1389c:	21a5      	movs	r1, #165	; 0xa5
   1389e:	4803      	ldr	r0, [pc, #12]	; (138ac <Site::setDateTime(JulianDate)+0x40>)
}
   138a0:	b005      	add	sp, #20
   138a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (writeTime) nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   138a6:	f7f1 bbe1 	b.w	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   138aa:	bf00      	nop
   138ac:	20005e50 	.word	0x20005e50

000138b0 <gpsCheck()>:
  void gpsCheck() {
   138b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (site.tls->isReady()) {
   138b2:	4c65      	ldr	r4, [pc, #404]	; (13a48 <gpsCheck()+0x198>)
   138b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   138b6:	7c03      	ldrb	r3, [r0, #16]
  void gpsCheck() {
   138b8:	ed2d 8b04 	vpush	{d8-d9}
   138bc:	b0b3      	sub	sp, #204	; 0xcc
    if (site.tls->isReady()) {
   138be:	2b00      	cmp	r3, #0
   138c0:	d05f      	beq.n	13982 <gpsCheck()+0xd2>
      site.tls->getSite(latitude, longitude, elevation);
   138c2:	6801      	ldr	r1, [r0, #0]
   138c4:	aa04      	add	r2, sp, #16
   138c6:	ab01      	add	r3, sp, #4
   138c8:	ae06      	add	r6, sp, #24
   138ca:	694d      	ldr	r5, [r1, #20]
   138cc:	a902      	add	r1, sp, #8
   138ce:	47a8      	blx	r5
      site.location.elevation = degToRad(elevation);
   138d0:	ed9d 5a01 	vldr	s10, [sp, #4]
      strcpy(site.location.name, "GPS");
   138d4:	4b5d      	ldr	r3, [pc, #372]	; (13a4c <gpsCheck()+0x19c>)
      site.updateLocation();
   138d6:	4620      	mov	r0, r4
      site.location.elevation = degToRad(elevation);
   138d8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
      strcpy(site.location.name, "GPS");
   138dc:	61a3      	str	r3, [r4, #24]
      site.location.latitude = degToRad(latitude);
   138de:	ed9f 6b56 	vldr	d6, [pc, #344]	; 13a38 <gpsCheck()+0x188>
   138e2:	ed9d 4b02 	vldr	d4, [sp, #8]
      site.location.longitude = degToRad(longitude);
   138e6:	ed9d 7b04 	vldr	d7, [sp, #16]
   138ea:	ed9f 9b55 	vldr	d9, [pc, #340]	; 13a40 <gpsCheck()+0x190>
      site.location.latitude = degToRad(latitude);
   138ee:	ee84 3b06 	vdiv.f64	d3, d4, d6
      site.location.longitude = degToRad(longitude);
   138f2:	ee87 4b06 	vdiv.f64	d4, d7, d6
      site.location.elevation = degToRad(elevation);
   138f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
      site.location.latitude = degToRad(latitude);
   138fa:	ed84 3b00 	vstr	d3, [r4]
      site.location.longitude = degToRad(longitude);
   138fe:	ed84 4b02 	vstr	d4, [r4, #8]
      site.location.elevation = degToRad(elevation);
   13902:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
   13906:	ed84 7a04 	vstr	s14, [r4, #16]
      site.updateLocation();
   1390a:	f7ff ff5d 	bl	137c8 <Site::updateLocation()>
   1390e:	4850      	ldr	r0, [pc, #320]	; (13a50 <gpsCheck()+0x1a0>)
   13910:	f7ed fc0c 	bl	112c <Axis::getInstrumentCoordinate()>
   13914:	2200      	movs	r2, #0
   13916:	494f      	ldr	r1, [pc, #316]	; (13a54 <gpsCheck()+0x1a4>)
   13918:	4630      	mov	r0, r6
   1391a:	eeb0 8b40 	vmov.f64	d8, d0
   1391e:	f7fb fd43 	bl	f3a8 <Home::getPosition(CoordReturn)>
   13922:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
   13926:	ee38 8b47 	vsub.f64	d8, d8, d7
   1392a:	eeb0 8bc8 	vabs.f64	d8, d8
   1392e:	eeb4 8bc9 	vcmpe.f64	d8, d9
   13932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13936:	d943      	bls.n	139c0 <gpsCheck()+0x110>
   13938:	4f47      	ldr	r7, [pc, #284]	; (13a58 <gpsCheck()+0x1a8>)
   1393a:	683d      	ldr	r5, [r7, #0]
      unsigned long syncTimeout = millis() + 1000;
   1393c:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
      while (!site.tls->get(jd) && (long)(millis() - syncTimeout) < 0) { };
   13940:	e003      	b.n	1394a <gpsCheck()+0x9a>
   13942:	683b      	ldr	r3, [r7, #0]
   13944:	1b5b      	subs	r3, r3, r5
   13946:	2b00      	cmp	r3, #0
   13948:	da06      	bge.n	13958 <gpsCheck()+0xa8>
   1394a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1394c:	4631      	mov	r1, r6
   1394e:	6803      	ldr	r3, [r0, #0]
   13950:	691b      	ldr	r3, [r3, #16]
   13952:	4798      	blx	r3
   13954:	2800      	cmp	r0, #0
   13956:	d0f4      	beq.n	13942 <gpsCheck()+0x92>
   13958:	683b      	ldr	r3, [r7, #0]
      if ((long)(millis() - syncTimeout) < 0) {
   1395a:	1b5b      	subs	r3, r3, r5
   1395c:	2b00      	cmp	r3, #0
   1395e:	db48      	blt.n	139f2 <gpsCheck()+0x142>
        initError.tls = true; 
   13960:	4a3e      	ldr	r2, [pc, #248]	; (13a5c <gpsCheck()+0x1ac>)
   13962:	7813      	ldrb	r3, [r2, #0]
   13964:	f043 0310 	orr.w	r3, r3, #16
   13968:	7013      	strb	r3, [r2, #0]
      tasks.setDurationComplete(tasks.getHandleByName("gpsChk"));
   1396a:	493d      	ldr	r1, [pc, #244]	; (13a60 <gpsCheck()+0x1b0>)
   1396c:	483d      	ldr	r0, [pc, #244]	; (13a64 <gpsCheck()+0x1b4>)
   1396e:	f7f2 fd21 	bl	63b4 <Tasks::getHandleByName(char const*)>
   13972:	4601      	mov	r1, r0
   13974:	483b      	ldr	r0, [pc, #236]	; (13a64 <gpsCheck()+0x1b4>)
   13976:	f7f2 fd0b 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
  }
   1397a:	b033      	add	sp, #204	; 0xcc
   1397c:	ecbd 8b04 	vpop	{d8-d9}
   13980:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13982:	4b35      	ldr	r3, [pc, #212]	; (13a58 <gpsCheck()+0x1a8>)
    if ((long)(millis() - site.updateTimeoutTime) > 0) {
   13984:	6d22      	ldr	r2, [r4, #80]	; 0x50
   13986:	681b      	ldr	r3, [r3, #0]
   13988:	1a9b      	subs	r3, r3, r2
   1398a:	2b00      	cmp	r3, #0
   1398c:	ddf5      	ble.n	1397a <gpsCheck()+0xca>
      tasks.setDurationComplete(tasks.getHandleByName("gpsChk"));
   1398e:	4934      	ldr	r1, [pc, #208]	; (13a60 <gpsCheck()+0x1b0>)
   13990:	4834      	ldr	r0, [pc, #208]	; (13a64 <gpsCheck()+0x1b4>)
   13992:	f7f2 fd0f 	bl	63b4 <Tasks::getHandleByName(char const*)>
   13996:	4601      	mov	r1, r0
   13998:	4832      	ldr	r0, [pc, #200]	; (13a64 <gpsCheck()+0x1b4>)
   1399a:	f7f2 fcf9 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
      tasks.setDurationComplete(tasks.getHandleByName("gpsPoll"));
   1399e:	4932      	ldr	r1, [pc, #200]	; (13a68 <gpsCheck()+0x1b8>)
   139a0:	4830      	ldr	r0, [pc, #192]	; (13a64 <gpsCheck()+0x1b4>)
   139a2:	f7f2 fd07 	bl	63b4 <Tasks::getHandleByName(char const*)>
   139a6:	4601      	mov	r1, r0
   139a8:	482e      	ldr	r0, [pc, #184]	; (13a64 <gpsCheck()+0x1b4>)
   139aa:	f7f2 fcf1 	bl	6390 <Tasks::setDurationComplete(unsigned char)>
      initError.tls = true; 
   139ae:	4a2b      	ldr	r2, [pc, #172]	; (13a5c <gpsCheck()+0x1ac>)
   139b0:	7813      	ldrb	r3, [r2, #0]
   139b2:	f043 0310 	orr.w	r3, r3, #16
   139b6:	7013      	strb	r3, [r2, #0]
  }
   139b8:	b033      	add	sp, #204	; 0xcc
   139ba:	ecbd 8b04 	vpop	{d8-d9}
   139be:	bdf0      	pop	{r4, r5, r6, r7, pc}
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   139c0:	482a      	ldr	r0, [pc, #168]	; (13a6c <gpsCheck()+0x1bc>)
   139c2:	f7ed fbb3 	bl	112c <Axis::getInstrumentCoordinate()>
   139c6:	2200      	movs	r2, #0
   139c8:	4922      	ldr	r1, [pc, #136]	; (13a54 <gpsCheck()+0x1a4>)
   139ca:	a81c      	add	r0, sp, #112	; 0x70
   139cc:	eeb0 8b40 	vmov.f64	d8, d0
   139d0:	f7fb fcea 	bl	f3a8 <Home::getPosition(CoordReturn)>
   139d4:	ed9d 7b2e 	vldr	d7, [sp, #184]	; 0xb8
   139d8:	ee38 8b47 	vsub.f64	d8, d8, d7
   139dc:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   139e0:	eeb4 8bc9 	vcmpe.f64	d8, d9
   139e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   139e8:	d8a6      	bhi.n	13938 <gpsCheck()+0x88>
      if (mount.isHome()) home.init();
   139ea:	481a      	ldr	r0, [pc, #104]	; (13a54 <gpsCheck()+0x1a4>)
   139ec:	f7fb fdf0 	bl	f5d0 <Home::init()>
   139f0:	e7a2      	b.n	13938 <gpsCheck()+0x88>
        site.dateIsReady = true;
   139f2:	f240 1301 	movw	r3, #257	; 0x101
   139f6:	ad1c      	add	r5, sp, #112	; 0x70
   139f8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        site.setDateTime(jd);
   139fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  ut1 = julianDate;
   13a00:	4e1b      	ldr	r6, [pc, #108]	; (13a70 <gpsCheck()+0x1c0>)
   13a02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   13a06:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  setSiderealTime(julianDate);
   13a0a:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
   13a0e:	ed9d 1b1e 	vldr	d1, [sp, #120]	; 0x78
   13a12:	f1a6 0060 	sub.w	r0, r6, #96	; 0x60
   13a16:	f7ff fe7f 	bl	13718 <Site::setSiderealTime(JulianDate)>
  if (writeTime) nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13a1a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
   13a1e:	b91b      	cbnz	r3, 13a28 <gpsCheck()+0x178>
        site.updateTLS();
   13a20:	4809      	ldr	r0, [pc, #36]	; (13a48 <gpsCheck()+0x198>)
   13a22:	f7ff fcb5 	bl	13390 <Site::updateTLS()>
   13a26:	e7a0      	b.n	1396a <gpsCheck()+0xba>
  if (writeTime) nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13a28:	2310      	movs	r3, #16
   13a2a:	4632      	mov	r2, r6
   13a2c:	21a5      	movs	r1, #165	; 0xa5
   13a2e:	4811      	ldr	r0, [pc, #68]	; (13a74 <gpsCheck()+0x1c4>)
   13a30:	f7f1 fb1c 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
}
   13a34:	e7f4      	b.n	13a20 <gpsCheck()+0x170>
   13a36:	bf00      	nop
   13a38:	1a63c1f8 	.word	0x1a63c1f8
   13a3c:	404ca5dc 	.word	0x404ca5dc
   13a40:	71ef8766 	.word	0x71ef8766
   13a44:	3e9787ad 	.word	0x3e9787ad
   13a48:	200055d0 	.word	0x200055d0
   13a4c:	00535047 	.word	0x00535047
   13a50:	200050e8 	.word	0x200050e8
   13a54:	20005478 	.word	0x20005478
   13a58:	20006344 	.word	0x20006344
   13a5c:	20005ccc 	.word	0x20005ccc
   13a60:	20001eb0 	.word	0x20001eb0
   13a64:	2000634c 	.word	0x2000634c
   13a68:	200022a8 	.word	0x200022a8
   13a6c:	200051a8 	.word	0x200051a8
   13a70:	20005630 	.word	0x20005630
   13a74:	20005e50 	.word	0x20005e50

00013a78 <Site::readJD()>:
    inline bool hasValidKey() { return keyMatches; }
   13a78:	4b31      	ldr	r3, [pc, #196]	; (13b40 <Site::readJD()+0xc8>)
  if (!nv.hasValidKey() || nv.isNull(NV_SITE_JD_BASE, JulianDateSize)) {
   13a7a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
void Site::readJD() {
   13a7e:	b510      	push	{r4, lr}
   13a80:	4604      	mov	r4, r0
   13a82:	b082      	sub	sp, #8
  if (!nv.hasValidKey() || nv.isNull(NV_SITE_JD_BASE, JulianDateSize)) {
   13a84:	b132      	cbz	r2, 13a94 <Site::readJD()+0x1c>
   13a86:	2210      	movs	r2, #16
   13a88:	21a5      	movs	r1, #165	; 0xa5
   13a8a:	4618      	mov	r0, r3
   13a8c:	f7f1 faaa 	bl	4fe4 <NonVolatileStorage::isNull(unsigned short, short)>
   13a90:	2800      	cmp	r0, #0
   13a92:	d04a      	beq.n	13b2a <Site::readJD()+0xb2>
    ut1.hour = 0.0;
   13a94:	2200      	movs	r2, #0
   13a96:	2300      	movs	r3, #0
    ut1.day = 2451544.5;
   13a98:	a125      	add	r1, pc, #148	; (adr r1, 13b30 <Site::readJD()+0xb8>)
   13a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
    ut1.hour = 0.0;
   13a9e:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
    nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13aa2:	f104 0260 	add.w	r2, r4, #96	; 0x60
   13aa6:	2310      	movs	r3, #16
    ut1.day = 2451544.5;
   13aa8:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13aac:	21a5      	movs	r1, #165	; 0xa5
   13aae:	4824      	ldr	r0, [pc, #144]	; (13b40 <Site::readJD()+0xc8>)
   13ab0:	9201      	str	r2, [sp, #4]
   13ab2:	f7f1 fadb 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   13ab6:	9a01      	ldr	r2, [sp, #4]
  nv.readBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13ab8:	2310      	movs	r3, #16
   13aba:	21a5      	movs	r1, #165	; 0xa5
   13abc:	4820      	ldr	r0, [pc, #128]	; (13b40 <Site::readJD()+0xc8>)
   13abe:	f7f1 faab 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  if (ut1.day < 2451544.5 || ut1.day > 2816787.5) { ut1.day = 2451544.5; initError.value = true; DLF("ERR: Site::readJD(), bad NV julian date (day)"); }
   13ac2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
   13ac6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 13b30 <Site::readJD()+0xb8>
   13aca:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ad2:	d41f      	bmi.n	13b14 <Site::readJD()+0x9c>
   13ad4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 13b38 <Site::readJD()+0xc0>
   13ad8:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ae0:	dc18      	bgt.n	13b14 <Site::readJD()+0x9c>
  if (ut1.hour < 0.0 || ut1.hour > 24.0)  { ut1.hour = 0.0; initError.value = true; DLF("ERR: Site::readJD(), bad NV julian date (hour)"); }
   13ae2:	ed94 7b1a 	vldr	d7, [r4, #104]	; 0x68
   13ae6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   13aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13aee:	d406      	bmi.n	13afe <Site::readJD()+0x86>
   13af0:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
   13af4:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13afc:	dd08      	ble.n	13b10 <Site::readJD()+0x98>
   13afe:	4a11      	ldr	r2, [pc, #68]	; (13b44 <Site::readJD()+0xcc>)
   13b00:	2000      	movs	r0, #0
   13b02:	2100      	movs	r1, #0
   13b04:	7813      	ldrb	r3, [r2, #0]
   13b06:	f043 0302 	orr.w	r3, r3, #2
   13b0a:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
   13b0e:	7013      	strb	r3, [r2, #0]
}
   13b10:	b002      	add	sp, #8
   13b12:	bd10      	pop	{r4, pc}
  if (ut1.day < 2451544.5 || ut1.day > 2816787.5) { ut1.day = 2451544.5; initError.value = true; DLF("ERR: Site::readJD(), bad NV julian date (day)"); }
   13b14:	4a0b      	ldr	r2, [pc, #44]	; (13b44 <Site::readJD()+0xcc>)
   13b16:	7813      	ldrb	r3, [r2, #0]
   13b18:	a105      	add	r1, pc, #20	; (adr r1, 13b30 <Site::readJD()+0xb8>)
   13b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
   13b1e:	f043 0302 	orr.w	r3, r3, #2
   13b22:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   13b26:	7013      	strb	r3, [r2, #0]
   13b28:	e7db      	b.n	13ae2 <Site::readJD()+0x6a>
    nv.updateBytes(NV_SITE_JD_BASE, &ut1, JulianDateSize);
   13b2a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   13b2e:	e7c3      	b.n	13ab8 <Site::readJD()+0x40>
   13b30:	40000000 	.word	0x40000000
   13b34:	4142b42c 	.word	0x4142b42c
   13b38:	c0000000 	.word	0xc0000000
   13b3c:	41457d89 	.word	0x41457d89
   13b40:	20005e50 	.word	0x20005e50
   13b44:	20005ccc 	.word	0x20005ccc

00013b48 <Site::readLocation(unsigned char)>:
void Site::readLocation(uint8_t number) {
   13b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b4a:	4f41      	ldr	r7, [pc, #260]	; (13c50 <Site::readLocation(unsigned char)+0x108>)
   13b4c:	4604      	mov	r4, r0
   13b4e:	460e      	mov	r6, r1
  if (!nv.hasValidKey()) {
   13b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   13b54:	2b00      	cmp	r3, #0
   13b56:	d056      	beq.n	13c06 <Site::readLocation(unsigned char)+0xbe>
  nv.readBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   13b58:	eb06 0186 	add.w	r1, r6, r6, lsl #2
   13b5c:	2328      	movs	r3, #40	; 0x28
   13b5e:	4622      	mov	r2, r4
   13b60:	483b      	ldr	r0, [pc, #236]	; (13c50 <Site::readLocation(unsigned char)+0x108>)
   13b62:	00c9      	lsls	r1, r1, #3
  locationNumber = number;
   13b64:	f884 6085 	strb.w	r6, [r4, #133]	; 0x85
  nv.readBytes(NV_SITE_BASE + locationNumber*LocationSize, &location, LocationSize);
   13b68:	3105      	adds	r1, #5
   13b6a:	f7f1 fa55 	bl	5018 <NonVolatileStorage::readBytes(unsigned short, void*, short)>
  if (location.latitude < -Deg90 || location.latitude > Deg90) { location.latitude = 0.0; initError.value = true; DLF("ERR: Site::readSite, bad NV latitude"); }
   13b6e:	ed94 7b00 	vldr	d7, [r4]
   13b72:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 13c30 <Site::readLocation(unsigned char)+0xe8>
   13b76:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13b7e:	d438      	bmi.n	13bf2 <Site::readLocation(unsigned char)+0xaa>
   13b80:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 13c38 <Site::readLocation(unsigned char)+0xf0>
   13b84:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13b8c:	dc31      	bgt.n	13bf2 <Site::readLocation(unsigned char)+0xaa>
  if (location.longitude < -Deg360 || location.longitude > Deg360) { location.longitude = 0.0; initError.value = true; DLF("ERR: Site::readSite, bad NV longitude"); }
   13b8e:	ed94 7b02 	vldr	d7, [r4, #8]
   13b92:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 13c40 <Site::readLocation(unsigned char)+0xf8>
   13b96:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13b9e:	d41e      	bmi.n	13bde <Site::readLocation(unsigned char)+0x96>
   13ba0:	ed9f 6b29 	vldr	d6, [pc, #164]	; 13c48 <Site::readLocation(unsigned char)+0x100>
   13ba4:	eeb4 7bc6 	vcmpe.f64	d7, d6
   13ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13bac:	dc17      	bgt.n	13bde <Site::readLocation(unsigned char)+0x96>
  if (location.timezone < -14 || location.timezone > 12) { location.timezone = 0.0; initError.value = true; DLF("ERR: Site::readSite,  bad NV timeZone"); }
   13bae:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
   13bb2:	edd4 7a05 	vldr	s15, [r4, #20]
   13bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
   13bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13bbe:	d406      	bmi.n	13bce <Site::readLocation(unsigned char)+0x86>
   13bc0:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   13bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
   13bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13bcc:	dd06      	ble.n	13bdc <Site::readLocation(unsigned char)+0x94>
   13bce:	4a21      	ldr	r2, [pc, #132]	; (13c54 <Site::readLocation(unsigned char)+0x10c>)
   13bd0:	2100      	movs	r1, #0
   13bd2:	7813      	ldrb	r3, [r2, #0]
   13bd4:	6161      	str	r1, [r4, #20]
   13bd6:	f043 0302 	orr.w	r3, r3, #2
   13bda:	7013      	strb	r3, [r2, #0]
}
   13bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (location.longitude < -Deg360 || location.longitude > Deg360) { location.longitude = 0.0; initError.value = true; DLF("ERR: Site::readSite, bad NV longitude"); }
   13bde:	4a1d      	ldr	r2, [pc, #116]	; (13c54 <Site::readLocation(unsigned char)+0x10c>)
   13be0:	2000      	movs	r0, #0
   13be2:	2100      	movs	r1, #0
   13be4:	7813      	ldrb	r3, [r2, #0]
   13be6:	f043 0302 	orr.w	r3, r3, #2
   13bea:	e9c4 0102 	strd	r0, r1, [r4, #8]
   13bee:	7013      	strb	r3, [r2, #0]
   13bf0:	e7dd      	b.n	13bae <Site::readLocation(unsigned char)+0x66>
  if (location.latitude < -Deg90 || location.latitude > Deg90) { location.latitude = 0.0; initError.value = true; DLF("ERR: Site::readSite, bad NV latitude"); }
   13bf2:	4a18      	ldr	r2, [pc, #96]	; (13c54 <Site::readLocation(unsigned char)+0x10c>)
   13bf4:	2000      	movs	r0, #0
   13bf6:	2100      	movs	r1, #0
   13bf8:	7813      	ldrb	r3, [r2, #0]
   13bfa:	f043 0302 	orr.w	r3, r3, #2
   13bfe:	e9c4 0100 	strd	r0, r1, [r4]
   13c02:	7013      	strb	r3, [r2, #0]
   13c04:	e7c3      	b.n	13b8e <Site::readLocation(unsigned char)+0x46>
    location.latitude = 0.0;
   13c06:	2200      	movs	r2, #0
    strcpy(location.name, "");
   13c08:	7603      	strb	r3, [r0, #24]
    location.latitude = 0.0;
   13c0a:	2300      	movs	r3, #0
    for (uint8_t l = 0; l < 4; l++) nv.updateBytes(NV_SITE_BASE + l*LocationSize, &location, LocationSize);
   13c0c:	2505      	movs	r5, #5
    location.latitude = 0.0;
   13c0e:	e9c0 2300 	strd	r2, r3, [r0]
    location.longitude = 0.0;
   13c12:	e9c0 2302 	strd	r2, r3, [r0, #8]
    location.timezone = 0.0;
   13c16:	2300      	movs	r3, #0
   13c18:	6143      	str	r3, [r0, #20]
    for (uint8_t l = 0; l < 4; l++) nv.updateBytes(NV_SITE_BASE + l*LocationSize, &location, LocationSize);
   13c1a:	4629      	mov	r1, r5
   13c1c:	3528      	adds	r5, #40	; 0x28
   13c1e:	2328      	movs	r3, #40	; 0x28
   13c20:	4622      	mov	r2, r4
   13c22:	b2ad      	uxth	r5, r5
   13c24:	4638      	mov	r0, r7
   13c26:	f7f1 fa21 	bl	506c <NonVolatileStorage::updateBytes(unsigned short, void*, short)>
   13c2a:	2da5      	cmp	r5, #165	; 0xa5
   13c2c:	d1f5      	bne.n	13c1a <Site::readLocation(unsigned char)+0xd2>
   13c2e:	e793      	b.n	13b58 <Site::readLocation(unsigned char)+0x10>
   13c30:	54442d15 	.word	0x54442d15
   13c34:	bff921fb 	.word	0xbff921fb
   13c38:	54442d15 	.word	0x54442d15
   13c3c:	3ff921fb 	.word	0x3ff921fb
   13c40:	54442d18 	.word	0x54442d18
   13c44:	c01921fb 	.word	0xc01921fb
   13c48:	54442d18 	.word	0x54442d18
   13c4c:	401921fb 	.word	0x401921fb
   13c50:	20005e50 	.word	0x20005e50
   13c54:	20005ccc 	.word	0x20005ccc

00013c58 <Site::init()>:
void Site::init() {
   13c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c5a:	4604      	mov	r4, r0
  readLocation(locationNumber);
   13c5c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
void Site::init() {
   13c60:	b085      	sub	sp, #20
class TimeLocationSource {
   13c62:	2600      	movs	r6, #0
  readLocation(locationNumber);
   13c64:	f7ff ff70 	bl	13b48 <Site::readLocation(unsigned char)>
  updateLocation();
   13c68:	4620      	mov	r0, r4
   13c6a:	f7ff fdad 	bl	137c8 <Site::updateLocation()>
      tlsFallback = new TlsTeensy;
   13c6e:	2020      	movs	r0, #32
   13c70:	f004 fcc6 	bl	18600 <operator new(unsigned int)>
   13c74:	2700      	movs	r7, #0
   13c76:	2500      	movs	r5, #0

#ifndef TLS_CLOCK_SKEW
#define TLS_CLOCK_SKEW 0.000139 // +5 seconds ahead when setting time
#endif

class TlsTeensy : public TimeLocationSource {
   13c78:	4b45      	ldr	r3, [pc, #276]	; (13d90 <Site::init()+0x138>)
   13c7a:	65e0      	str	r0, [r4, #92]	; 0x5c
   13c7c:	6003      	str	r3, [r0, #0]
   13c7e:	7405      	strb	r5, [r0, #16]
   13c80:	e9c0 6702 	strd	r6, r7, [r0, #8]
   13c84:	e9c0 6706 	strd	r6, r7, [r0, #24]
      tls = new TlsGPS;
   13c88:	2028      	movs	r0, #40	; 0x28
   13c8a:	f004 fcb9 	bl	18600 <operator new(unsigned int)>
#endif
#ifndef GPS_MIN_WAIT_MINUTES
  #define GPS_MIN_WAIT_MINUTES 2 // minimum wait for stabilization in minutes, use 0 to disable
#endif

class TlsGPS : public TimeLocationSource {
   13c8e:	4a41      	ldr	r2, [pc, #260]	; (13d94 <Site::init()+0x13c>)
   13c90:	65a0      	str	r0, [r4, #88]	; 0x58
   13c92:	6002      	str	r2, [r0, #0]
   13c94:	7405      	strb	r5, [r0, #16]
   13c96:	6205      	str	r5, [r0, #32]
   13c98:	8485      	strh	r5, [r0, #36]	; 0x24
   13c9a:	e9c0 6702 	strd	r6, r7, [r0, #8]
   13c9e:	e9c0 6706 	strd	r6, r7, [r0, #24]
    initError.tls = !tls->init();
   13ca2:	4e3d      	ldr	r6, [pc, #244]	; (13d98 <Site::init()+0x140>)
   13ca4:	f7f2 fd7c 	bl	67a0 <TlsGPS::init()>
   13ca8:	f080 0001 	eor.w	r0, r0, #1
   13cac:	7833      	ldrb	r3, [r6, #0]
   13cae:	f360 1304 	bfi	r3, r0, #4, #1
    if (!initError.tls) {
   13cb2:	06da      	lsls	r2, r3, #27
    initError.tls = !tls->init();
   13cb4:	7033      	strb	r3, [r6, #0]
    if (!initError.tls) {
   13cb6:	d40c      	bmi.n	13cd2 <Site::init()+0x7a>
      if (tls->isReady()) {
   13cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13cba:	7c02      	ldrb	r2, [r0, #16]
   13cbc:	2a00      	cmp	r2, #0
   13cbe:	d055      	beq.n	13d6c <Site::init()+0x114>
        tls->get(ut1);
   13cc0:	6803      	ldr	r3, [r0, #0]
   13cc2:	f104 0160 	add.w	r1, r4, #96	; 0x60
   13cc6:	691b      	ldr	r3, [r3, #16]
   13cc8:	4798      	blx	r3
        dateIsReady = true;
   13cca:	f240 1301 	movw	r3, #257	; 0x101
   13cce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
      if (tlsFallback->init() && tlsFallback->isReady()) {
   13cd2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   13cd4:	6803      	ldr	r3, [r0, #0]
   13cd6:	681b      	ldr	r3, [r3, #0]
   13cd8:	4798      	blx	r3
   13cda:	b110      	cbz	r0, 13ce2 <Site::init()+0x8a>
   13cdc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   13cde:	7c03      	ldrb	r3, [r0, #16]
   13ce0:	bb4b      	cbnz	r3, 13d36 <Site::init()+0xde>
    if (initError.tls) {
   13ce2:	7833      	ldrb	r3, [r6, #0]
   13ce4:	06db      	lsls	r3, r3, #27
   13ce6:	d436      	bmi.n	13d56 <Site::init()+0xfe>
  setSiderealTime(ut1);
   13ce8:	4620      	mov	r0, r4
   13cea:	ed94 0b18 	vldr	d0, [r4, #96]	; 0x60
   13cee:	ed94 1b1a 	vldr	d1, [r4, #104]	; 0x68
   13cf2:	f7ff fd11 	bl	13718 <Site::setSiderealTime(JulianDate)>
  delay(100);
   13cf6:	2064      	movs	r0, #100	; 0x64
   13cf8:	f004 fa46 	bl	18188 <delay>
  taskHandle = tasks.add(0, 0, true, 0, clockTickWrapper, "ClkTick");
   13cfc:	2200      	movs	r2, #0
   13cfe:	4827      	ldr	r0, [pc, #156]	; (13d9c <Site::init()+0x144>)
   13d00:	2301      	movs	r3, #1
   13d02:	4927      	ldr	r1, [pc, #156]	; (13da0 <Site::init()+0x148>)
   13d04:	9200      	str	r2, [sp, #0]
   13d06:	e9cd 1001 	strd	r1, r0, [sp, #4]
   13d0a:	4611      	mov	r1, r2
   13d0c:	4825      	ldr	r0, [pc, #148]	; (13da4 <Site::init()+0x14c>)
   13d0e:	f7f2 fa65 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
   13d12:	4601      	mov	r1, r0
   13d14:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  if (taskHandle) {
   13d18:	bb08      	cbnz	r0, 13d5e <Site::init()+0x106>
  siderealPeriod = period;
   13d1a:	4b23      	ldr	r3, [pc, #140]	; (13da8 <Site::init()+0x150>)
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   13d1c:	f247 626d 	movw	r2, #30317	; 0x766d
   13d20:	4820      	ldr	r0, [pc, #128]	; (13da4 <Site::init()+0x14c>)
  siderealPeriod = period;
   13d22:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   13d26:	f7f2 fb1f 	bl	6368 <Tasks::setPeriodSubMicros(unsigned char, unsigned long)>
    pps.init();
   13d2a:	4820      	ldr	r0, [pc, #128]	; (13dac <Site::init()+0x154>)
}
   13d2c:	b005      	add	sp, #20
   13d2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    pps.init();
   13d32:	f7f2 bc5f 	b.w	65f4 <Pps::init()>
        tlsFallback->get(ut1);
   13d36:	6803      	ldr	r3, [r0, #0]
   13d38:	f104 0160 	add.w	r1, r4, #96	; 0x60
   13d3c:	691b      	ldr	r3, [r3, #16]
   13d3e:	4798      	blx	r3
        initError.tls = false;
   13d40:	7833      	ldrb	r3, [r6, #0]
        dateIsReady = true;
   13d42:	f240 1201 	movw	r2, #257	; 0x101
        initError.tls = false;
   13d46:	f36f 1304 	bfc	r3, #4, #1
        dateIsReady = true;
   13d4a:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
        initError.tls = false;
   13d4e:	7033      	strb	r3, [r6, #0]
    if (initError.tls) {
   13d50:	7833      	ldrb	r3, [r6, #0]
   13d52:	06db      	lsls	r3, r3, #27
   13d54:	d5c8      	bpl.n	13ce8 <Site::init()+0x90>
      readJD();
   13d56:	4620      	mov	r0, r4
   13d58:	f7ff fe8e 	bl	13a78 <Site::readJD()>
   13d5c:	e7c4      	b.n	13ce8 <Site::init()+0x90>
    if (!tasks.requestHardwareTimer(taskHandle, 1)) { DLF("WRN: Site::init(), didn't get h/w timer for Clock (using s/w timer)"); }
   13d5e:	2201      	movs	r2, #1
   13d60:	4810      	ldr	r0, [pc, #64]	; (13da4 <Site::init()+0x14c>)
   13d62:	f7f2 fa5f 	bl	6224 <Tasks::requestHardwareTimer(unsigned char, unsigned char)>
  tasks.setPeriodSubMicros(taskHandle, lround(siderealPeriod/FRACTIONAL_SEC));
   13d66:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
   13d6a:	e7d6      	b.n	13d1a <Site::init()+0xc2>
   13d6c:	4910      	ldr	r1, [pc, #64]	; (13db0 <Site::init()+0x158>)
          updateTimeoutTime = millis() + GPS_TIMEOUT_MINUTES*60000UL;
   13d6e:	4b11      	ldr	r3, [pc, #68]	; (13db4 <Site::init()+0x15c>)
   13d70:	6809      	ldr	r1, [r1, #0]
          if (tasks.add(5000, 0, true, 7, gpsCheck, "gpsChk")) { VLF("success"); } else { VLF("FAILED!"); }
   13d72:	480c      	ldr	r0, [pc, #48]	; (13da4 <Site::init()+0x14c>)
          updateTimeoutTime = millis() + GPS_TIMEOUT_MINUTES*60000UL;
   13d74:	440b      	add	r3, r1
          if (tasks.add(5000, 0, true, 7, gpsCheck, "gpsChk")) { VLF("success"); } else { VLF("FAILED!"); }
   13d76:	4910      	ldr	r1, [pc, #64]	; (13db8 <Site::init()+0x160>)
          updateTimeoutTime = millis() + GPS_TIMEOUT_MINUTES*60000UL;
   13d78:	6523      	str	r3, [r4, #80]	; 0x50
          if (tasks.add(5000, 0, true, 7, gpsCheck, "gpsChk")) { VLF("success"); } else { VLF("FAILED!"); }
   13d7a:	2307      	movs	r3, #7
   13d7c:	9102      	str	r1, [sp, #8]
   13d7e:	490f      	ldr	r1, [pc, #60]	; (13dbc <Site::init()+0x164>)
   13d80:	e9cd 3100 	strd	r3, r1, [sp]
   13d84:	2301      	movs	r3, #1
   13d86:	f241 3188 	movw	r1, #5000	; 0x1388
   13d8a:	f7f2 fa27 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
   13d8e:	e7a0      	b.n	13cd2 <Site::init()+0x7a>
   13d90:	200026b0 	.word	0x200026b0
   13d94:	20002664 	.word	0x20002664
   13d98:	20005ccc 	.word	0x20005ccc
   13d9c:	200021e8 	.word	0x200021e8
   13da0:	00013381 	.word	0x00013381
   13da4:	2000634c 	.word	0x2000634c
   13da8:	00f37959 	.word	0x00f37959
   13dac:	20004668 	.word	0x20004668
   13db0:	20006344 	.word	0x20006344
   13db4:	000927c0 	.word	0x000927c0
   13db8:	20001eb0 	.word	0x20001eb0
   13dbc:	000138b1 	.word	0x000138b1

00013dc0 <Site::setElevation(float)>:
 if (e >= -100.0 && e < 20000.0) location.elevation = e; else return false;
   13dc0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 13dec <Site::setElevation(float)+0x2c>
bool Site::setElevation(float e) {
   13dc4:	4603      	mov	r3, r0
 if (e >= -100.0 && e < 20000.0) location.elevation = e; else return false;
   13dc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   13dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13dce:	db0a      	blt.n	13de6 <Site::setElevation(float)+0x26>
   13dd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 13df0 <Site::setElevation(float)+0x30>
   13dd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   13dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ddc:	d503      	bpl.n	13de6 <Site::setElevation(float)+0x26>
 return true;
   13dde:	2001      	movs	r0, #1
 if (e >= -100.0 && e < 20000.0) location.elevation = e; else return false;
   13de0:	ed83 0a04 	vstr	s0, [r3, #16]
 return true;
   13de4:	4770      	bx	lr
 if (e >= -100.0 && e < 20000.0) location.elevation = e; else return false;
   13de6:	2000      	movs	r0, #0
}
   13de8:	4770      	bx	lr
   13dea:	bf00      	nop
   13dec:	c2c80000 	.word	0xc2c80000
   13df0:	469c4000 	.word	0x469c4000

00013df4 <Site::UT1ToLocal(JulianDate)>:
  ut1.hour -= location.timezone;
   13df4:	ed90 6a05 	vldr	s12, [r0, #20]
  while (ut1.hour >= 24.0) { ut1.hour -= 24.0; ut1.day += 1.0; }
   13df8:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
JulianDate Site::UT1ToLocal(JulianDate ut1) {
   13dfc:	b08c      	sub	sp, #48	; 0x30
  ut1.hour -= location.timezone;
   13dfe:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
   13e02:	ee31 1b46 	vsub.f64	d1, d1, d6
  while (ut1.hour >= 24.0) { ut1.hour -= 24.0; ut1.day += 1.0; }
   13e06:	eeb4 1bc7 	vcmpe.f64	d1, d7
   13e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e0e:	db0a      	blt.n	13e26 <Site::UT1ToLocal(JulianDate)+0x32>
   13e10:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   13e14:	ee31 1b47 	vsub.f64	d1, d1, d7
   13e18:	ee30 0b06 	vadd.f64	d0, d0, d6
   13e1c:	eeb4 1bc7 	vcmpe.f64	d1, d7
   13e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e24:	daf6      	bge.n	13e14 <Site::UT1ToLocal(JulianDate)+0x20>
  while (ut1.hour < 0.0) { ut1.hour += 24.0; ut1.day -= 1.0; }
   13e26:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
   13e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e2e:	d50c      	bpl.n	13e4a <Site::UT1ToLocal(JulianDate)+0x56>
   13e30:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
   13e34:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   13e38:	ee31 1b06 	vadd.f64	d1, d1, d6
   13e3c:	ee30 0b47 	vsub.f64	d0, d0, d7
   13e40:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
   13e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e48:	d4f6      	bmi.n	13e38 <Site::UT1ToLocal(JulianDate)+0x44>
}
   13e4a:	b00c      	add	sp, #48	; 0x30
   13e4c:	4770      	bx	lr
   13e4e:	bf00      	nop

00013e50 <Site::localToUT1(JulianDate)>:
  local.hour += location.timezone;
   13e50:	ed90 7a05 	vldr	s14, [r0, #20]
  while (local.hour >= 24.0) { local.hour -= 24.0; local.day += 1.0; }
   13e54:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
JulianDate Site::localToUT1(JulianDate local) {
   13e58:	b08c      	sub	sp, #48	; 0x30
  local.hour += location.timezone;
   13e5a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   13e5e:	ee37 1b01 	vadd.f64	d1, d7, d1
  while (local.hour >= 24.0) { local.hour -= 24.0; local.day += 1.0; }
   13e62:	eeb4 1bc6 	vcmpe.f64	d1, d6
   13e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e6a:	db0a      	blt.n	13e82 <Site::localToUT1(JulianDate)+0x32>
   13e6c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   13e70:	ee31 1b46 	vsub.f64	d1, d1, d6
   13e74:	ee30 0b07 	vadd.f64	d0, d0, d7
   13e78:	eeb4 1bc6 	vcmpe.f64	d1, d6
   13e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e80:	daf6      	bge.n	13e70 <Site::localToUT1(JulianDate)+0x20>
  while (local.hour < 0.0) { local.hour += 24.0; local.day -= 1.0; }
   13e82:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
   13e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e8a:	d50c      	bpl.n	13ea6 <Site::localToUT1(JulianDate)+0x56>
   13e8c:	eeb3 6b08 	vmov.f64	d6, #56	; 0x41c00000  24.0
   13e90:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   13e94:	ee31 1b06 	vadd.f64	d1, d1, d6
   13e98:	ee30 0b47 	vsub.f64	d0, d0, d7
   13e9c:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
   13ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ea4:	d4f6      	bmi.n	13e94 <Site::localToUT1(JulianDate)+0x44>
}
   13ea6:	b00c      	add	sp, #48	; 0x30
   13ea8:	4770      	bx	lr
   13eaa:	bf00      	nop

00013eac <Site::rangeHours(double)>:
  while (time >= 24.0) time -= 24.0;
   13eac:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
   13eb0:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13eb8:	db06      	blt.n	13ec8 <Site::rangeHours(double)+0x1c>
   13eba:	ee30 0b47 	vsub.f64	d0, d0, d7
   13ebe:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ec6:	daf8      	bge.n	13eba <Site::rangeHours(double)+0xe>
  while (time < 0.0)   time += 24.0;
   13ec8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   13ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ed0:	d508      	bpl.n	13ee4 <Site::rangeHours(double)+0x38>
   13ed2:	eeb3 7b08 	vmov.f64	d7, #56	; 0x41c00000  24.0
   13ed6:	ee30 0b07 	vadd.f64	d0, d0, d7
   13eda:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   13ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ee2:	d4f8      	bmi.n	13ed6 <Site::rangeHours(double)+0x2a>
  return time;
}
   13ee4:	4770      	bx	lr
   13ee6:	bf00      	nop

00013ee8 <Site::rangeAmPm(double)>:

// adjust into the 0 to 12 range
double Site::rangeAmPm(double time) {
  while (time >= 12.0) time -= 12.0;
   13ee8:	eeb2 7b08 	vmov.f64	d7, #40	; 0x41400000  12.0
   13eec:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ef4:	db06      	blt.n	13f04 <Site::rangeAmPm(double)+0x1c>
   13ef6:	ee30 0b47 	vsub.f64	d0, d0, d7
   13efa:	eeb4 0bc7 	vcmpe.f64	d0, d7
   13efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f02:	daf8      	bge.n	13ef6 <Site::rangeAmPm(double)+0xe>
  while (time < 0.0) time += 12.0;
   13f04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   13f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f0c:	d508      	bpl.n	13f20 <Site::rangeAmPm(double)+0x38>
   13f0e:	eeb2 7b08 	vmov.f64	d7, #40	; 0x41400000  12.0
   13f12:	ee30 0b07 	vadd.f64	d0, d0, d7
   13f16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   13f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f1e:	d4f8      	bmi.n	13f12 <Site::rangeAmPm(double)+0x2a>
  return time;
}
   13f20:	4770      	bx	lr
   13f22:	bf00      	nop

00013f24 <Site::strToDate(char*, GregorianDate*)>:

// convert string in format MM/DD/YY or MM/DD/YYYY to Date (changes only date)
bool Site::strToDate(char *ymd, GregorianDate *date) {
   13f24:	b570      	push	{r4, r5, r6, lr}
  GregorianDate temp;
  char m[3], d[3], y[5];

  if (strlen(ymd) != 8 && strlen(ymd) != 10) return false;
   13f26:	4608      	mov	r0, r1
bool Site::strToDate(char *ymd, GregorianDate *date) {
   13f28:	b08a      	sub	sp, #40	; 0x28
   13f2a:	460c      	mov	r4, r1
   13f2c:	4616      	mov	r6, r2
  if (strlen(ymd) != 8 && strlen(ymd) != 10) return false;
   13f2e:	f00b ff27 	bl	1fd80 <strlen>
   13f32:	f020 0002 	bic.w	r0, r0, #2
   13f36:	2808      	cmp	r0, #8
   13f38:	d113      	bne.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>

  m[0] = *ymd++; m[1] = *ymd++; m[2] = 0;
   13f3a:	2500      	movs	r5, #0
   13f3c:	7822      	ldrb	r2, [r4, #0]
   13f3e:	7863      	ldrb	r3, [r4, #1]
  if (!convert.atoi2(m, &temp.month, false)) return false;
   13f40:	4669      	mov	r1, sp
  m[0] = *ymd++; m[1] = *ymd++; m[2] = 0;
   13f42:	f88d 2000 	strb.w	r2, [sp]
  if (!convert.atoi2(m, &temp.month, false)) return false;
   13f46:	f10d 0212 	add.w	r2, sp, #18
  m[0] = *ymd++; m[1] = *ymd++; m[2] = 0;
   13f4a:	f88d 3001 	strb.w	r3, [sp, #1]
  if (!convert.atoi2(m, &temp.month, false)) return false;
   13f4e:	462b      	mov	r3, r5
   13f50:	482f      	ldr	r0, [pc, #188]	; (14010 <Site::strToDate(char*, GregorianDate*)+0xec>)
  m[0] = *ymd++; m[1] = *ymd++; m[2] = 0;
   13f52:	f88d 5002 	strb.w	r5, [sp, #2]
  if (!convert.atoi2(m, &temp.month, false)) return false;
   13f56:	f7f0 faad 	bl	44b4 <Convert::atoi2(char*, unsigned char*, bool)>
   13f5a:	b110      	cbz	r0, 13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
  if (*ymd++ != '/') return false;
   13f5c:	78a3      	ldrb	r3, [r4, #2]
   13f5e:	2b2f      	cmp	r3, #47	; 0x2f
   13f60:	d002      	beq.n	13f68 <Site::strToDate(char*, GregorianDate*)+0x44>
  if (strlen(ymd) != 8 && strlen(ymd) != 10) return false;
   13f62:	2000      	movs	r0, #0

  date->year = temp.year;
  date->month = temp.month;
  date->day = temp.day;
  return true;
}
   13f64:	b00a      	add	sp, #40	; 0x28
   13f66:	bd70      	pop	{r4, r5, r6, pc}
  d[0] = *ymd++; d[1] = *ymd++; d[2] = 0;
   13f68:	78e2      	ldrb	r2, [r4, #3]
  if (!convert.atoi2(d, &temp.day, false)) return false;
   13f6a:	a901      	add	r1, sp, #4
  d[0] = *ymd++; d[1] = *ymd++; d[2] = 0;
   13f6c:	7923      	ldrb	r3, [r4, #4]
   13f6e:	f88d 2004 	strb.w	r2, [sp, #4]
  if (!convert.atoi2(d, &temp.day, false)) return false;
   13f72:	f10d 0213 	add.w	r2, sp, #19
  d[0] = *ymd++; d[1] = *ymd++; d[2] = 0;
   13f76:	f88d 3005 	strb.w	r3, [sp, #5]
  if (!convert.atoi2(d, &temp.day, false)) return false;
   13f7a:	462b      	mov	r3, r5
   13f7c:	4824      	ldr	r0, [pc, #144]	; (14010 <Site::strToDate(char*, GregorianDate*)+0xec>)
  d[0] = *ymd++; d[1] = *ymd++; d[2] = 0;
   13f7e:	f88d 5006 	strb.w	r5, [sp, #6]
  if (!convert.atoi2(d, &temp.day, false)) return false;
   13f82:	f7f0 fa97 	bl	44b4 <Convert::atoi2(char*, unsigned char*, bool)>
   13f86:	2800      	cmp	r0, #0
   13f88:	d0eb      	beq.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
  if (*ymd++ != '/') return false;
   13f8a:	7963      	ldrb	r3, [r4, #5]
   13f8c:	2b2f      	cmp	r3, #47	; 0x2f
   13f8e:	d1e8      	bne.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
  y[0] = *ymd++; y[1] = *ymd++; y[2] = 0;
   13f90:	79a2      	ldrb	r2, [r4, #6]
  if (strlen(ymd) == 10) { y[2] = *ymd++; y[3] = *ymd++;  y[4] = 0; }
   13f92:	f104 0008 	add.w	r0, r4, #8
  y[0] = *ymd++; y[1] = *ymd++; y[2] = 0;
   13f96:	79e3      	ldrb	r3, [r4, #7]
   13f98:	f88d 500a 	strb.w	r5, [sp, #10]
   13f9c:	f88d 2008 	strb.w	r2, [sp, #8]
   13fa0:	f88d 3009 	strb.w	r3, [sp, #9]
  if (strlen(ymd) == 10) { y[2] = *ymd++; y[3] = *ymd++;  y[4] = 0; }
   13fa4:	f00b feec 	bl	1fd80 <strlen>
   13fa8:	280a      	cmp	r0, #10
   13faa:	d107      	bne.n	13fbc <Site::strToDate(char*, GregorianDate*)+0x98>
   13fac:	7a22      	ldrb	r2, [r4, #8]
   13fae:	7a63      	ldrb	r3, [r4, #9]
   13fb0:	f88d 500c 	strb.w	r5, [sp, #12]
   13fb4:	f88d 200a 	strb.w	r2, [sp, #10]
   13fb8:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!convert.atoi2(y, &temp.year, false)) return false;
   13fbc:	2300      	movs	r3, #0
   13fbe:	aa04      	add	r2, sp, #16
   13fc0:	a902      	add	r1, sp, #8
   13fc2:	4813      	ldr	r0, [pc, #76]	; (14010 <Site::strToDate(char*, GregorianDate*)+0xec>)
   13fc4:	f7f0 fa46 	bl	4454 <Convert::atoi2(char*, short*, bool)>
   13fc8:	2800      	cmp	r0, #0
   13fca:	d0ca      	beq.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
  if (temp.year < 100) { if (temp.year > 20) temp.year += 2000; else temp.year += 2100; }
   13fcc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   13fd0:	2b63      	cmp	r3, #99	; 0x63
   13fd2:	dc07      	bgt.n	13fe4 <Site::strToDate(char*, GregorianDate*)+0xc0>
   13fd4:	2b14      	cmp	r3, #20
   13fd6:	bfcc      	ite	gt
   13fd8:	f503 63fa 	addgt.w	r3, r3, #2000	; 0x7d0
   13fdc:	f603 0334 	addwle	r3, r3, #2100	; 0x834
   13fe0:	f8ad 3010 	strh.w	r3, [sp, #16]
  if (temp.month < 1 || temp.month > 12 || temp.day < 1 || temp.day > 31 || temp.year < 2000 || temp.year > 2300) return false;
   13fe4:	f89d 3012 	ldrb.w	r3, [sp, #18]
   13fe8:	3b01      	subs	r3, #1
   13fea:	2b0b      	cmp	r3, #11
   13fec:	d8b9      	bhi.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
   13fee:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13ff2:	3b01      	subs	r3, #1
   13ff4:	2b1e      	cmp	r3, #30
   13ff6:	d8b4      	bhi.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
   13ff8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13ffc:	9a04      	ldr	r2, [sp, #16]
   13ffe:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   14002:	b29b      	uxth	r3, r3
   14004:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14008:	d8ab      	bhi.n	13f62 <Site::strToDate(char*, GregorianDate*)+0x3e>
  date->year = temp.year;
   1400a:	6032      	str	r2, [r6, #0]
  return true;
   1400c:	e7aa      	b.n	13f64 <Site::strToDate(char*, GregorianDate*)+0x40>
   1400e:	bf00      	nop
   14010:	200043d0 	.word	0x200043d0
   14014:	00000000 	.word	0x00000000

00014018 <_GLOBAL__sub_I_fracLAST>:
class Site {
   14018:	ed9f 7b09 	vldr	d7, [pc, #36]	; 14040 <_GLOBAL__sub_I_fracLAST+0x28>
   1401c:	4b0a      	ldr	r3, [pc, #40]	; (14048 <_GLOBAL__sub_I_fracLAST+0x30>)
   1401e:	2200      	movs	r2, #0
   14020:	f240 1101 	movw	r1, #257	; 0x101
   14024:	651a      	str	r2, [r3, #80]	; 0x50
   14026:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   1402a:	679a      	str	r2, [r3, #120]	; 0x78
   1402c:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
   14030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14034:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   14038:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70

Site site;
   1403c:	4770      	bx	lr
   1403e:	bf00      	nop
	...
   14048:	200055d0 	.word	0x200055d0
   1404c:	00000000 	.word	0x00000000

00014050 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)>:
#include "../park/Park.h"
#include "../pec/Pec.h"
#include "../limits/Limits.h"
#include "../status/Status.h"

bool Status::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   14050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14054:	460c      	mov	r4, r1
   14056:	4605      	mov	r5, r0
   14058:	ed2d 8b04 	vpush	{d8-d9}
  UNUSED(supressFrame);

  if (command[0] == 'G') {
   1405c:	7811      	ldrb	r1, [r2, #0]
bool Status::command(char *reply, char *command, char *parameter, bool *supressFrame, bool *numericReply, CommandError *commandError) {
   1405e:	b0b1      	sub	sp, #196	; 0xc4
  if (command[0] == 'G') {
   14060:	2947      	cmp	r1, #71	; 0x47
   14062:	d023      	beq.n	140ac <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5c>

  } else

  // :SX97,[n]#     Set buzzer state
  //                Return: see below
  if (command[0] == 'S' && command[1] == 'X' && parameter[0] == '9' && parameter[1] == '7'  && parameter[2] == ','  && parameter[4] == 0) {
   14064:	2953      	cmp	r1, #83	; 0x53
   14066:	d005      	beq.n	14074 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x24>
    } else return false;
   14068:	2000      	movs	r0, #0
      break;
    }
  } else return false;

  return true;
}
   1406a:	b031      	add	sp, #196	; 0xc4
   1406c:	ecbd 8b04 	vpop	{d8-d9}
   14070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (command[0] == 'S' && command[1] == 'X' && parameter[0] == '9' && parameter[1] == '7'  && parameter[2] == ','  && parameter[4] == 0) {
   14074:	7852      	ldrb	r2, [r2, #1]
   14076:	2a58      	cmp	r2, #88	; 0x58
   14078:	d1f6      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
   1407a:	781a      	ldrb	r2, [r3, #0]
   1407c:	2a39      	cmp	r2, #57	; 0x39
   1407e:	d1f3      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
   14080:	785a      	ldrb	r2, [r3, #1]
   14082:	2a37      	cmp	r2, #55	; 0x37
   14084:	d1f0      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
   14086:	789a      	ldrb	r2, [r3, #2]
   14088:	2a2c      	cmp	r2, #44	; 0x2c
   1408a:	d1ed      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
   1408c:	791a      	ldrb	r2, [r3, #4]
   1408e:	2a00      	cmp	r2, #0
   14090:	d1ea      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
    switch (parameter[3]) {
   14092:	78da      	ldrb	r2, [r3, #3]
   14094:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   14098:	2b04      	cmp	r3, #4
   1409a:	f200 84f8 	bhi.w	14a8e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa3e>
   1409e:	e8df f013 	tbh	[pc, r3, lsl #1]
   140a2:	02f2      	.short	0x02f2
   140a4:	030202f2 	.word	0x030202f2
   140a8:	030b02f9 	.word	0x030b02f9
    if (command[1] == 'm' && parameter[0] == 0)  {
   140ac:	7852      	ldrb	r2, [r2, #1]
   140ae:	2a6d      	cmp	r2, #109	; 0x6d
   140b0:	f000 819a 	beq.w	143e8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x398>
    if (command[1] == 'U' && parameter[0] == 0)  {
   140b4:	2a55      	cmp	r2, #85	; 0x55
   140b6:	d02e      	beq.n	14116 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xc6>
    if (command[1] == 'u' && parameter[0] == 0)  {
   140b8:	2a75      	cmp	r2, #117	; 0x75
   140ba:	f000 81b5 	beq.w	14428 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3d8>
    if (command[1] == 'W' && parameter[0] == 0)  {
   140be:	2a57      	cmp	r2, #87	; 0x57
   140c0:	d1d2      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
   140c2:	781b      	ldrb	r3, [r3, #0]
   140c4:	2b00      	cmp	r3, #0
   140c6:	d1cf      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
      if (transform.mountType == GEM)          reply[i++] = 'G'; else
   140c8:	4bbb      	ldr	r3, [pc, #748]	; (143b8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x368>)
   140ca:	f993 35c4 	ldrsb.w	r3, [r3, #1476]	; 0x5c4
   140ce:	2b01      	cmp	r3, #1
   140d0:	f000 82be 	beq.w	14650 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x600>
      if (transform.mountType == FORK)         reply[i++] = 'P'; else
   140d4:	2b02      	cmp	r3, #2
   140d6:	f000 83e5 	beq.w	148a4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x854>
      if (transform.mountType == ALTAZM)       reply[i++] = 'A'; else
   140da:	2b03      	cmp	r3, #3
   140dc:	f000 8418 	beq.w	14910 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8c0>
      if (transform.mountType == ALTALT)       reply[i++] = 'L';
   140e0:	2b04      	cmp	r3, #4
   140e2:	f000 8451 	beq.w	14988 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x938>
   140e6:	4622      	mov	r2, r4
   140e8:	2602      	movs	r6, #2
   140ea:	2501      	movs	r5, #1
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   140ec:	4bb3      	ldr	r3, [pc, #716]	; (143bc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36c>)
      if (mount.isTracking())                  reply[i++] = 'T'; else reply[i++] = 'N';
   140ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   140f2:	2b01      	cmp	r3, #1
   140f4:	bf14      	ite	ne
   140f6:	234e      	movne	r3, #78	; 0x4e
   140f8:	2354      	moveq	r3, #84	; 0x54
   140fa:	7013      	strb	r3, [r2, #0]
      if (park.state == PS_PARKED)             reply[i++] = 'P'; else
   140fc:	4bb0      	ldr	r3, [pc, #704]	; (143c0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x370>)
   140fe:	781b      	ldrb	r3, [r3, #0]
   14100:	2b02      	cmp	r3, #2
   14102:	f040 8307 	bne.w	14714 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c4>
   14106:	2350      	movs	r3, #80	; 0x50
   14108:	5563      	strb	r3, [r4, r5]
      reply[i++] = 0;
   1410a:	2300      	movs	r3, #0
      *numericReply = false;
   1410c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
  return true;
   1410e:	2001      	movs	r0, #1
      reply[i++] = 0;
   14110:	55a3      	strb	r3, [r4, r6]
      *numericReply = false;
   14112:	7013      	strb	r3, [r2, #0]
    } else return false;
   14114:	e7a9      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
    if (command[1] == 'U' && parameter[0] == 0)  {
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	2b00      	cmp	r3, #0
   1411a:	d1a5      	bne.n	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
   1411c:	f8df b29c 	ldr.w	fp, [pc, #668]	; 143bc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36c>
      if (!mount.isTracking())                 reply[i++]='n';                     // [n]ot tracking
   14120:	f89b 6080 	ldrb.w	r6, [fp, #128]	; 0x80
   14124:	2e01      	cmp	r6, #1
   14126:	f000 82a4 	beq.w	14672 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x622>
   1412a:	236e      	movs	r3, #110	; 0x6e
   1412c:	46a0      	mov	r8, r4
   1412e:	2602      	movs	r6, #2
   14130:	f808 3b01 	strb.w	r3, [r8], #1
   14134:	2301      	movs	r3, #1
   14136:	46b1      	mov	r9, r6
      if (goTo.state == GS_NONE)               reply[i++]='N';                     // [N]o goto
   14138:	4aa2      	ldr	r2, [pc, #648]	; (143c4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x374>)
   1413a:	9201      	str	r2, [sp, #4]
   1413c:	7812      	ldrb	r2, [r2, #0]
   1413e:	b942      	cbnz	r2, 14152 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x102>
   14140:	234e      	movs	r3, #78	; 0x4e
   14142:	f888 3000 	strb.w	r3, [r8]
      if (park.state == PS_UNPARKED)           reply[i++]='p'; else                // Not [p]arked
   14146:	eb04 0806 	add.w	r8, r4, r6
   1414a:	f109 0601 	add.w	r6, r9, #1
      if (goTo.state == GS_NONE)               reply[i++]='N';                     // [N]o goto
   1414e:	464b      	mov	r3, r9
   14150:	46b1      	mov	r9, r6
      if (park.state == PS_UNPARKED)           reply[i++]='p'; else                // Not [p]arked
   14152:	4a9b      	ldr	r2, [pc, #620]	; (143c0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x370>)
   14154:	7812      	ldrb	r2, [r2, #0]
   14156:	2a00      	cmp	r2, #0
   14158:	f040 832f 	bne.w	147ba <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x76a>
   1415c:	2370      	movs	r3, #112	; 0x70
   1415e:	f888 3000 	strb.w	r3, [r8]
      if (mount.syncFromOnStepToEncoders)      reply[i++]='e';                     // Sync to [e]ncoders only
   14162:	eb04 0806 	add.w	r8, r4, r6
   14166:	f109 0601 	add.w	r6, r9, #1
      if (mount.isHome())                      reply[i++]='H';                     // At [H]ome
   1416a:	4637      	mov	r7, r6
      if (mount.syncFromOnStepToEncoders)      reply[i++]='e';                     // Sync to [e]ncoders only
   1416c:	f89b 3000 	ldrb.w	r3, [fp]
   14170:	b13b      	cbz	r3, 14182 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x132>
   14172:	2365      	movs	r3, #101	; 0x65
   14174:	46b9      	mov	r9, r7
   14176:	f888 3000 	strb.w	r3, [r8]
      if (mount.isHome())                      reply[i++]='H';                     // At [H]ome
   1417a:	eb04 0806 	add.w	r8, r4, r6
   1417e:	1c7e      	adds	r6, r7, #1
   14180:	4637      	mov	r7, r6
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   14182:	4991      	ldr	r1, [pc, #580]	; (143c8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x378>)
   14184:	4891      	ldr	r0, [pc, #580]	; (143cc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x37c>)
   14186:	9102      	str	r1, [sp, #8]
   14188:	f7ec ffd0 	bl	112c <Axis::getInstrumentCoordinate()>
   1418c:	9902      	ldr	r1, [sp, #8]
   1418e:	2200      	movs	r2, #0
   14190:	a804      	add	r0, sp, #16
   14192:	eeb0 8b40 	vmov.f64	d8, d0
   14196:	f7fb f907 	bl	f3a8 <Home::getPosition(CoordReturn)>
   1419a:	9902      	ldr	r1, [sp, #8]
   1419c:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   141a0:	ed9f 9b81 	vldr	d9, [pc, #516]	; 143a8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x358>
   141a4:	ee38 8b47 	vsub.f64	d8, d8, d7
   141a8:	eeb0 8bc8 	vabs.f64	d8, d8
   141ac:	eeb4 8bc9 	vcmpe.f64	d8, d9
   141b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141b4:	f240 8351 	bls.w	1485a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x80a>
   141b8:	ab1a      	add	r3, sp, #104	; 0x68
      if (home.state == HS_HOMING)             reply[i++]='h';                     // Slewing [h]ome
   141ba:	7b4a      	ldrb	r2, [r1, #13]
   141bc:	2a01      	cmp	r2, #1
   141be:	d107      	bne.n	141d0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x180>
   141c0:	2268      	movs	r2, #104	; 0x68
   141c2:	46b9      	mov	r9, r7
   141c4:	f888 2000 	strb.w	r2, [r8]
      if (home.settings.automaticAtBoot)       reply[i++]='B';                     // Auto home at [B]oot
   141c8:	eb04 0806 	add.w	r8, r4, r6
   141cc:	1c7e      	adds	r6, r7, #1
   141ce:	4637      	mov	r7, r6
   141d0:	784a      	ldrb	r2, [r1, #1]
   141d2:	b13a      	cbz	r2, 141e4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x194>
   141d4:	2242      	movs	r2, #66	; 0x42
   141d6:	46b9      	mov	r9, r7
   141d8:	f888 2000 	strb.w	r2, [r8]
        if (pps.synced)                        reply[i++]='S';                     // PPS [S]ync
   141dc:	eb04 0806 	add.w	r8, r4, r6
   141e0:	1c7e      	adds	r6, r7, #1
   141e2:	4637      	mov	r7, r6
   141e4:	4a7a      	ldr	r2, [pc, #488]	; (143d0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x380>)
   141e6:	7812      	ldrb	r2, [r2, #0]
   141e8:	b13a      	cbz	r2, 141fa <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1aa>
   141ea:	2253      	movs	r2, #83	; 0x53
   141ec:	46b9      	mov	r9, r7
   141ee:	f888 2000 	strb.w	r2, [r8]
      if (guide.activePulseGuide())            reply[i++]='G';                     // Pulse [G]uide active
   141f2:	eb04 0806 	add.w	r8, r4, r6
   141f6:	1c7e      	adds	r6, r7, #1
   141f8:	4637      	mov	r7, r6

    // abort both axes of guide
    void abort();

    // returns true if a pulse guide is happening
    inline bool activePulseGuide() { return state == GU_PULSE_GUIDE; }
   141fa:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 143e4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x394>
   141fe:	f89a 2000 	ldrb.w	r2, [sl]
   14202:	2a01      	cmp	r2, #1
   14204:	f000 8317 	beq.w	14836 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7e6>

    // returns true if a guide is happening
    inline bool active() {
      return (guideActionAxis1 != GA_NONE || guideActionAxis2 != GA_NONE) && !activePulseGuide(); 
   14208:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   1420c:	b13a      	cbz	r2, 1421e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1ce>
      if (guide.active())                      reply[i++]='g';                     // [g]uide active
   1420e:	2267      	movs	r2, #103	; 0x67
   14210:	f888 2000 	strb.w	r2, [r8]
      if (mount.settings.rc == RC_REFRACTION) { reply[i++]='r'; reply[i++]='s'; }  // [r]efr enabled [s]ingle axis
   14214:	eb04 0806 	add.w	r8, r4, r6
   14218:	1c7e      	adds	r6, r7, #1
      if (guide.active())                      reply[i++]='g';                     // [g]uide active
   1421a:	46b9      	mov	r9, r7
   1421c:	4637      	mov	r7, r6
      if (mount.settings.rc == RC_REFRACTION) { reply[i++]='r'; reply[i++]='s'; }  // [r]efr enabled [s]ingle axis
   1421e:	f89b 2018 	ldrb.w	r2, [fp, #24]
   14222:	2a01      	cmp	r2, #1
   14224:	d10e      	bne.n	14244 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1f4>
   14226:	2272      	movs	r2, #114	; 0x72
   14228:	f109 0102 	add.w	r1, r9, #2
   1422c:	f888 2000 	strb.w	r2, [r8]
   14230:	2273      	movs	r2, #115	; 0x73
      if (mount.settings.rc == RC_REFRACTION_DUAL) { reply[i++]='r'; }             // [r]efr enabled
   14232:	eb04 0801 	add.w	r8, r4, r1
      if (mount.settings.rc == RC_REFRACTION) { reply[i++]='r'; reply[i++]='s'; }  // [r]efr enabled [s]ingle axis
   14236:	55a2      	strb	r2, [r4, r6]
      if (mount.settings.rc == RC_REFRACTION_DUAL) { reply[i++]='r'; }             // [r]efr enabled
   14238:	f109 0603 	add.w	r6, r9, #3
   1423c:	f89b 2018 	ldrb.w	r2, [fp, #24]
      if (mount.settings.rc == RC_REFRACTION) { reply[i++]='r'; reply[i++]='s'; }  // [r]efr enabled [s]ingle axis
   14240:	4689      	mov	r9, r1
      if (mount.settings.rc == RC_MODEL)      { reply[i++]='t'; reply[i++]='s'; }  // On[t]rack enabled [s]ingle axis
   14242:	4637      	mov	r7, r6
      if (mount.settings.rc == RC_REFRACTION_DUAL) { reply[i++]='r'; }             // [r]efr enabled
   14244:	2a02      	cmp	r2, #2
   14246:	d109      	bne.n	1425c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x20c>
   14248:	2272      	movs	r2, #114	; 0x72
   1424a:	46b9      	mov	r9, r7
   1424c:	f888 2000 	strb.w	r2, [r8]
      if (mount.settings.rc == RC_MODEL)      { reply[i++]='t'; reply[i++]='s'; }  // On[t]rack enabled [s]ingle axis
   14250:	eb04 0806 	add.w	r8, r4, r6
   14254:	1c7e      	adds	r6, r7, #1
   14256:	f89b 2018 	ldrb.w	r2, [fp, #24]
   1425a:	4637      	mov	r7, r6
   1425c:	2a03      	cmp	r2, #3
   1425e:	d10e      	bne.n	1427e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x22e>
   14260:	2274      	movs	r2, #116	; 0x74
   14262:	f109 0102 	add.w	r1, r9, #2
   14266:	f888 2000 	strb.w	r2, [r8]
   1426a:	2273      	movs	r2, #115	; 0x73
      if (mount.settings.rc == RC_MODEL_DUAL) { reply[i++]='t'; }                  // On[t]rack enabled
   1426c:	eb04 0801 	add.w	r8, r4, r1
      if (mount.settings.rc == RC_MODEL)      { reply[i++]='t'; reply[i++]='s'; }  // On[t]rack enabled [s]ingle axis
   14270:	55a2      	strb	r2, [r4, r6]
      if (mount.settings.rc == RC_MODEL_DUAL) { reply[i++]='t'; }                  // On[t]rack enabled
   14272:	f109 0603 	add.w	r6, r9, #3
   14276:	f89b 2018 	ldrb.w	r2, [fp, #24]
      if (mount.settings.rc == RC_MODEL)      { reply[i++]='t'; reply[i++]='s'; }  // On[t]rack enabled [s]ingle axis
   1427a:	4689      	mov	r9, r1
        if (fequal(r, 57.900F))                reply[i++]='('; else                // Lunar rate selected
   1427c:	4637      	mov	r7, r6
      if (mount.settings.rc == RC_MODEL_DUAL) { reply[i++]='t'; }                  // On[t]rack enabled
   1427e:	2a04      	cmp	r2, #4
   14280:	f000 81ec 	beq.w	1465c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x60c>
      if (mount.settings.rc == RC_NONE) {
   14284:	b9fa      	cbnz	r2, 142c6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x276>
        float r = siderealToHz(mount.trackingRate);
   14286:	ed9b 7a01 	vldr	s14, [fp, #4]
        if (fequal(r, 57.900F))                reply[i++]='('; else                // Lunar rate selected
   1428a:	eddf 6a52 	vldr	s13, [pc, #328]	; 143d4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x384>
        float r = siderealToHz(mount.trackingRate);
   1428e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        if (fequal(r, 57.900F))                reply[i++]='('; else                // Lunar rate selected
   14292:	ed9f 6a51 	vldr	s12, [pc, #324]	; 143d8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x388>
        float r = siderealToHz(mount.trackingRate);
   14296:	ed9f 5b46 	vldr	d5, [pc, #280]	; 143b0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x360>
   1429a:	ee27 7b05 	vmul.f64	d7, d7, d5
   1429e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        if (fequal(r, 57.900F))                reply[i++]='('; else                // Lunar rate selected
   142a2:	ee77 7a66 	vsub.f32	s15, s14, s13
  { return __builtin_fabsf(__x); }
   142a6:	eef0 7ae7 	vabs.f32	s15, s15
   142aa:	eef4 7ac6 	vcmpe.f32	s15, s12
   142ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   142b2:	f140 8306 	bpl.w	148c2 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x872>
   142b6:	2228      	movs	r2, #40	; 0x28
        if (fequal(r, 60.136F))                reply[i++]='k';                     // King rate selected
   142b8:	f888 2000 	strb.w	r2, [r8]
      if (goTo.isHomePauseEnabled())           reply[i++]='u';                     // Pa[u]se at home enabled?
   142bc:	eb04 0806 	add.w	r8, r4, r6
      if (goTo.isHomePaused())                 reply[i++]='w';                     // [w]aiting at home 
   142c0:	1c7e      	adds	r6, r7, #1
        if (fequal(r, 60.136F))                reply[i++]='k';                     // King rate selected
   142c2:	46b9      	mov	r9, r7
   142c4:	4637      	mov	r7, r6
      if (goTo.isHomePaused())                 reply[i++]='w';                     // [w]aiting at home 
   142c6:	9a01      	ldr	r2, [sp, #4]
   142c8:	f892 21e0 	ldrb.w	r2, [r2, #480]	; 0x1e0
   142cc:	b13a      	cbz	r2, 142de <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x28e>
   142ce:	2277      	movs	r2, #119	; 0x77
   142d0:	46b9      	mov	r9, r7
   142d2:	f888 2000 	strb.w	r2, [r8]
      if (goTo.isHomePauseEnabled())           reply[i++]='u';                     // Pa[u]se at home enabled?
   142d6:	eb04 0806 	add.w	r8, r4, r6
   142da:	1c7e      	adds	r6, r7, #1
   142dc:	4637      	mov	r7, r6
    inline bool isHomePauseEnabled() { return settings.meridianFlipPause; }
   142de:	9a01      	ldr	r2, [sp, #4]
   142e0:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
   142e4:	0790      	lsls	r0, r2, #30
   142e6:	d507      	bpl.n	142f8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2a8>
   142e8:	2275      	movs	r2, #117	; 0x75
   142ea:	46b9      	mov	r9, r7
   142ec:	f888 2000 	strb.w	r2, [r8]
      if (sound.enabled)                       reply[i++]='z';                     // Bu[z]zer enabled?
   142f0:	eb04 0806 	add.w	r8, r4, r6
   142f4:	1c7e      	adds	r6, r7, #1
   142f6:	4637      	mov	r7, r6
   142f8:	786a      	ldrb	r2, [r5, #1]
   142fa:	b13a      	cbz	r2, 1430c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2bc>
   142fc:	227a      	movs	r2, #122	; 0x7a
   142fe:	46b9      	mov	r9, r7
   14300:	f888 2000 	strb.w	r2, [r8]
      if (goTo.isAutoFlipEnabled())            reply[i++]='a';                     // [a]uto meridian flip
   14304:	eb04 0806 	add.w	r8, r4, r6
   14308:	1c7e      	adds	r6, r7, #1
   1430a:	4637      	mov	r7, r6
    inline bool isAutoFlipEnabled() { return settings.meridianFlipAuto && transform.isEquatorial() && transform.meridianFlips; }
   1430c:	9a01      	ldr	r2, [sp, #4]
    bool isEquatorial() { return mountType == GEM || mountType == FORK; };
   1430e:	4d2a      	ldr	r5, [pc, #168]	; (143b8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x368>)
   14310:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
   14314:	07d1      	lsls	r1, r2, #31
   14316:	f140 822b 	bpl.w	14770 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x720>
   1431a:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
   1431e:	1e51      	subs	r1, r2, #1
   14320:	b2c9      	uxtb	r1, r1
   14322:	2901      	cmp	r1, #1
   14324:	f240 8255 	bls.w	147d2 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x782>
        if (pec.settings.recorded)             reply[i++]='R';                     // PEC data has been [R]ecorded
   14328:	492c      	ldr	r1, [pc, #176]	; (143dc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x38c>)
   1432a:	7908      	ldrb	r0, [r1, #4]
   1432c:	07c0      	lsls	r0, r0, #31
   1432e:	f100 8223 	bmi.w	14778 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x728>
      if (transform.mountType == ALTAZM)       reply[i++]='A'; else                // ALTAZM
   14332:	2a03      	cmp	r2, #3
   14334:	f000 8326 	beq.w	14984 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x934>
      if (transform.mountType == ALTALT)       reply[i++]='L';                     // ALTALT
   14338:	2a04      	cmp	r2, #4
   1433a:	f000 835e 	beq.w	149fa <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9aa>
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   1433e:	4618      	mov	r0, r3
   14340:	2200      	movs	r2, #0
   14342:	491e      	ldr	r1, [pc, #120]	; (143bc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x36c>)
   14344:	f7f4 fdd2 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) current.pierSide = PIER_SIDE_NONE;
   14348:	f89a 3000 	ldrb.w	r3, [sl]
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   1434c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
      if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) current.pierSide = PIER_SIDE_NONE;
   14350:	3b04      	subs	r3, #4
      if (current.pierSide == PIER_SIDE_NONE)  reply[i++]='o'; else                // Pier side n[o]ne
   14352:	2b01      	cmp	r3, #1
   14354:	f240 822a 	bls.w	147ac <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x75c>
   14358:	2a00      	cmp	r2, #0
   1435a:	f000 8227 	beq.w	147ac <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x75c>
      if (current.pierSide == PIER_SIDE_EAST)  reply[i++]='T'; else                // Pier side eas[T]
   1435e:	2a01      	cmp	r2, #1
   14360:	f000 8309 	beq.w	14976 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x926>
      if (current.pierSide == PIER_SIDE_WEST)  reply[i++]='W';                     // Pier side [W]est
   14364:	2a02      	cmp	r2, #2
   14366:	f040 8387 	bne.w	14a78 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa28>
   1436a:	2357      	movs	r3, #87	; 0x57
   1436c:	f888 3000 	strb.w	r3, [r8]
      reply[i++]='0' + guide.settings.pulseRateSelect;                             // Provide pulse-guide rate
   14370:	eb04 0806 	add.w	r8, r4, r6
   14374:	1c7e      	adds	r6, r7, #1
   14376:	f89a 300c 	ldrb.w	r3, [sl, #12]
      reply[i++]='0' + limits.errorCode();                                         // Provide general error code
   1437a:	4819      	ldr	r0, [pc, #100]	; (143e0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x390>)
      reply[i++]='0' + guide.settings.pulseRateSelect;                             // Provide pulse-guide rate
   1437c:	3330      	adds	r3, #48	; 0x30
   1437e:	f888 3000 	strb.w	r3, [r8]
      reply[i++]='0' + guide.settings.axis1RateSelect;                             // Provide guide rate
   14382:	f89a 300d 	ldrb.w	r3, [sl, #13]
   14386:	3330      	adds	r3, #48	; 0x30
   14388:	55a3      	strb	r3, [r4, r6]
      reply[i++]='0' + limits.errorCode();                                         // Provide general error code
   1438a:	443c      	add	r4, r7
   1438c:	f7fc fdee 	bl	10f6c <Limits::errorCode()>
   14390:	f100 0330 	add.w	r3, r0, #48	; 0x30
      reply[i++]=0;
   14394:	2200      	movs	r2, #0
  return true;
   14396:	2001      	movs	r0, #1
      reply[i++]='0' + limits.errorCode();                                         // Provide general error code
   14398:	70a3      	strb	r3, [r4, #2]
      *numericReply = false;
   1439a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
      reply[i++]=0;
   1439c:	70e2      	strb	r2, [r4, #3]
      *numericReply = false;
   1439e:	701a      	strb	r2, [r3, #0]
    } else
   143a0:	e663      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
   143a2:	bf00      	nop
   143a4:	f3af 8000 	nop.w
   143a8:	71ef8766 	.word	0x71ef8766
   143ac:	3e9787ad 	.word	0x3e9787ad
   143b0:	f2e5a1df 	.word	0xf2e5a1df
   143b4:	404e1506 	.word	0x404e1506
   143b8:	200064ac 	.word	0x200064ac
   143bc:	200054e0 	.word	0x200054e0
   143c0:	20005ea8 	.word	0x20005ea8
   143c4:	20005270 	.word	0x20005270
   143c8:	20005478 	.word	0x20005478
   143cc:	200050e8 	.word	0x200050e8
   143d0:	20004668 	.word	0x20004668
   143d4:	4267999a 	.word	0x4267999a
   143d8:	350637bd 	.word	0x350637bd
   143dc:	20005568 	.word	0x20005568
   143e0:	20005cf4 	.word	0x20005cf4
   143e4:	200043e8 	.word	0x200043e8
    if (command[1] == 'm' && parameter[0] == 0)  {
   143e8:	781a      	ldrb	r2, [r3, #0]
   143ea:	2a00      	cmp	r2, #0
   143ec:	f47f ae3c 	bne.w	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
      strcpy(reply, "?");
   143f0:	4bbb      	ldr	r3, [pc, #748]	; (146e0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x690>)
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   143f2:	a81a      	add	r0, sp, #104	; 0x68
   143f4:	49bb      	ldr	r1, [pc, #748]	; (146e4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x694>)
      strcpy(reply, "?");
   143f6:	881b      	ldrh	r3, [r3, #0]
   143f8:	8023      	strh	r3, [r4, #0]
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   143fa:	f7f4 fd77 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) current.pierSide = PIER_SIDE_NONE;
   143fe:	4bba      	ldr	r3, [pc, #744]	; (146e8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x698>)
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   14400:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
      if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) current.pierSide = PIER_SIDE_NONE;
   14404:	781b      	ldrb	r3, [r3, #0]
   14406:	3b04      	subs	r3, #4
      if (current.pierSide == PIER_SIDE_NONE) reply[0]='N';
   14408:	2b01      	cmp	r3, #1
   1440a:	f240 8211 	bls.w	14830 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7e0>
   1440e:	2a00      	cmp	r2, #0
   14410:	f000 820e 	beq.w	14830 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7e0>
      if (current.pierSide == PIER_SIDE_EAST) reply[0]='E';
   14414:	2a01      	cmp	r2, #1
   14416:	f040 82e0 	bne.w	149da <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x98a>
   1441a:	2345      	movs	r3, #69	; 0x45
   1441c:	7023      	strb	r3, [r4, #0]
      *numericReply = false;
   1441e:	2300      	movs	r3, #0
   14420:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
  return true;
   14422:	2001      	movs	r0, #1
      *numericReply = false;
   14424:	7013      	strb	r3, [r2, #0]
    } else
   14426:	e620      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
    if (command[1] == 'u' && parameter[0] == 0)  {
   14428:	781b      	ldrb	r3, [r3, #0]
   1442a:	2b00      	cmp	r3, #0
   1442c:	f47f ae1c 	bne.w	14068 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x18>
      memset(reply, (char)0b10000000, 9);
   14430:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
    inline bool isTracking() { return trackingState == TS_SIDEREAL; }
   14434:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 146e4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x694>
   14438:	6023      	str	r3, [r4, #0]
   1443a:	6063      	str	r3, [r4, #4]
   1443c:	7223      	strb	r3, [r4, #8]
      if (!mount.isTracking())                     reply[0]|=0b10000001;           // Not tracking
   1443e:	f89b 3080 	ldrb.w	r3, [fp, #128]	; 0x80
   14442:	2b01      	cmp	r3, #1
   14444:	d001      	beq.n	1444a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3fa>
   14446:	2381      	movs	r3, #129	; 0x81
   14448:	7023      	strb	r3, [r4, #0]
      if (goTo.state == GS_NONE)                   reply[0]|=0b10000010;           // No goto
   1444a:	4ba8      	ldr	r3, [pc, #672]	; (146ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x69c>)
   1444c:	9301      	str	r3, [sp, #4]
   1444e:	781b      	ldrb	r3, [r3, #0]
   14450:	b91b      	cbnz	r3, 1445a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x40a>
   14452:	7823      	ldrb	r3, [r4, #0]
   14454:	f063 037d 	orn	r3, r3, #125	; 0x7d
   14458:	7023      	strb	r3, [r4, #0]
        if (pps.synced)                            reply[0]|=0b10000100;           // PPS sync
   1445a:	4ba5      	ldr	r3, [pc, #660]	; (146f0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a0>)
   1445c:	781b      	ldrb	r3, [r3, #0]
   1445e:	b11b      	cbz	r3, 14468 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x418>
   14460:	7823      	ldrb	r3, [r4, #0]
   14462:	f063 037b 	orn	r3, r3, #123	; 0x7b
   14466:	7023      	strb	r3, [r4, #0]
    inline bool activePulseGuide() { return state == GU_PULSE_GUIDE; }
   14468:	f8df a27c 	ldr.w	sl, [pc, #636]	; 146e8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x698>
      if (guide.activePulseGuide())                reply[0]|=0b10001000;           // Pulse guide active
   1446c:	f89a 3000 	ldrb.w	r3, [sl]
   14470:	2b01      	cmp	r3, #1
   14472:	d103      	bne.n	1447c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x42c>
   14474:	7823      	ldrb	r3, [r4, #0]
   14476:	f063 0377 	orn	r3, r3, #119	; 0x77
   1447a:	7023      	strb	r3, [r4, #0]
      if (mount.settings.rc == RC_REFRACTION)      reply[0]|=0b11010000;           // Refr enabled Single axis
   1447c:	f89b 3018 	ldrb.w	r3, [fp, #24]
   14480:	2b01      	cmp	r3, #1
   14482:	d105      	bne.n	14490 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x440>
   14484:	7823      	ldrb	r3, [r4, #0]
   14486:	f063 032f 	orn	r3, r3, #47	; 0x2f
   1448a:	7023      	strb	r3, [r4, #0]
      if (mount.settings.rc == RC_REFRACTION_DUAL) reply[0]|=0b10010000;           // Refr enabled
   1448c:	f89b 3018 	ldrb.w	r3, [fp, #24]
   14490:	2b02      	cmp	r3, #2
   14492:	d105      	bne.n	144a0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x450>
   14494:	7823      	ldrb	r3, [r4, #0]
   14496:	f063 036f 	orn	r3, r3, #111	; 0x6f
   1449a:	7023      	strb	r3, [r4, #0]
      if (mount.settings.rc == RC_MODEL)           reply[0]|=0b11100000;           // OnTrack enabled Single axis
   1449c:	f89b 3018 	ldrb.w	r3, [fp, #24]
   144a0:	2b03      	cmp	r3, #3
   144a2:	d105      	bne.n	144b0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x460>
   144a4:	7823      	ldrb	r3, [r4, #0]
   144a6:	f063 031f 	orn	r3, r3, #31
   144aa:	7023      	strb	r3, [r4, #0]
      if (mount.settings.rc == RC_MODEL_DUAL)      reply[0]|=0b10100000;           // OnTrack enabled
   144ac:	f89b 3018 	ldrb.w	r3, [fp, #24]
   144b0:	2b04      	cmp	r3, #4
   144b2:	f000 80e1 	beq.w	14678 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x628>
      if (mount.settings.rc == RC_NONE) {
   144b6:	b9cb      	cbnz	r3, 144ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x49c>
        float r = siderealToHz(mount.trackingRate);
   144b8:	ed9b 7a01 	vldr	s14, [fp, #4]
        if (fequal(r, 57.900F))                    reply[1]|=0b10000001; else      // Lunar rate selected
   144bc:	eddf 6a8d 	vldr	s13, [pc, #564]	; 146f4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a4>
        float r = siderealToHz(mount.trackingRate);
   144c0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        if (fequal(r, 57.900F))                    reply[1]|=0b10000001; else      // Lunar rate selected
   144c4:	ed9f 6a8c 	vldr	s12, [pc, #560]	; 146f8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6a8>
        float r = siderealToHz(mount.trackingRate);
   144c8:	ed9f 5b81 	vldr	d5, [pc, #516]	; 146d0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x680>
   144cc:	ee27 7b05 	vmul.f64	d7, d7, d5
   144d0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        if (fequal(r, 57.900F))                    reply[1]|=0b10000001; else      // Lunar rate selected
   144d4:	ee77 7a66 	vsub.f32	s15, s14, s13
   144d8:	eef0 7ae7 	vabs.f32	s15, s15
   144dc:	eef4 7ac6 	vcmpe.f32	s15, s12
   144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   144e4:	f140 8258 	bpl.w	14998 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x948>
   144e8:	2381      	movs	r3, #129	; 0x81
   144ea:	7063      	strb	r3, [r4, #1]
      if (mount.syncFromOnStepToEncoders)          reply[1]|=0b10000100;           // Sync to encoders only
   144ec:	f89b 3000 	ldrb.w	r3, [fp]
   144f0:	b11b      	cbz	r3, 144fa <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4aa>
   144f2:	7863      	ldrb	r3, [r4, #1]
   144f4:	f063 037b 	orn	r3, r3, #123	; 0x7b
   144f8:	7063      	strb	r3, [r4, #1]
      return (guideActionAxis1 != GA_NONE || guideActionAxis2 != GA_NONE) && !activePulseGuide(); 
   144fa:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   144fe:	b13b      	cbz	r3, 14510 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c0>
   14500:	f89a 3000 	ldrb.w	r3, [sl]
   14504:	2b01      	cmp	r3, #1
   14506:	d003      	beq.n	14510 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4c0>
      if (guide.active())                          reply[1]|=0b10001000;           // Guide active
   14508:	7863      	ldrb	r3, [r4, #1]
   1450a:	f063 0377 	orn	r3, r3, #119	; 0x77
   1450e:	7063      	strb	r3, [r4, #1]
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   14510:	487a      	ldr	r0, [pc, #488]	; (146fc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6ac>)
   14512:	f7ec fe0b 	bl	112c <Axis::getInstrumentCoordinate()>
   14516:	497a      	ldr	r1, [pc, #488]	; (14700 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b0>)
   14518:	2200      	movs	r2, #0
   1451a:	a804      	add	r0, sp, #16
   1451c:	eeb0 8b40 	vmov.f64	d8, d0
   14520:	9102      	str	r1, [sp, #8]
   14522:	f7fa ff41 	bl	f3a8 <Home::getPosition(CoordReturn)>
   14526:	9902      	ldr	r1, [sp, #8]
   14528:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1452c:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 146d8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x688>
   14530:	ee38 8b47 	vsub.f64	d8, d8, d7
   14534:	eeb0 8bc8 	vabs.f64	d8, d8
   14538:	eeb4 8bc9 	vcmpe.f64	d8, d9
   1453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14540:	f240 81ee 	bls.w	14920 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x8d0>
   14544:	ab1a      	add	r3, sp, #104	; 0x68
      if (home.state == HS_HOMING)                 reply[2]|=0b10100000;           // Slewing home
   14546:	7b4a      	ldrb	r2, [r1, #13]
   14548:	2a01      	cmp	r2, #1
   1454a:	d103      	bne.n	14554 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x504>
   1454c:	78a2      	ldrb	r2, [r4, #2]
   1454e:	f062 025f 	orn	r2, r2, #95	; 0x5f
   14552:	70a2      	strb	r2, [r4, #2]
      if (home.settings.automaticAtBoot)           reply[2]|=0b11000000;           // Auto home at boot
   14554:	784a      	ldrb	r2, [r1, #1]
   14556:	b11a      	cbz	r2, 14560 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x510>
   14558:	78a2      	ldrb	r2, [r4, #2]
   1455a:	f062 023f 	orn	r2, r2, #63	; 0x3f
   1455e:	70a2      	strb	r2, [r4, #2]
      if (goTo.isHomePaused())                     reply[2]|=0b10000010;           // Waiting at home
   14560:	9a01      	ldr	r2, [sp, #4]
   14562:	f892 21e0 	ldrb.w	r2, [r2, #480]	; 0x1e0
   14566:	b11a      	cbz	r2, 14570 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x520>
   14568:	78a2      	ldrb	r2, [r4, #2]
   1456a:	f062 027d 	orn	r2, r2, #125	; 0x7d
   1456e:	70a2      	strb	r2, [r4, #2]
    inline bool isHomePauseEnabled() { return settings.meridianFlipPause; }
   14570:	9a01      	ldr	r2, [sp, #4]
   14572:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
      if (goTo.isHomePauseEnabled())               reply[2]|=0b10000100;           // Pause at home enabled?
   14576:	0790      	lsls	r0, r2, #30
   14578:	d503      	bpl.n	14582 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x532>
   1457a:	78a2      	ldrb	r2, [r4, #2]
   1457c:	f062 027b 	orn	r2, r2, #123	; 0x7b
   14580:	70a2      	strb	r2, [r4, #2]
      if (sound.enabled)                           reply[2]|=0b10001000;           // Buzzer enabled?
   14582:	786a      	ldrb	r2, [r5, #1]
   14584:	b11a      	cbz	r2, 1458e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x53e>
   14586:	78a2      	ldrb	r2, [r4, #2]
   14588:	f062 0277 	orn	r2, r2, #119	; 0x77
   1458c:	70a2      	strb	r2, [r4, #2]
    inline bool isAutoFlipEnabled() { return settings.meridianFlipAuto && transform.isEquatorial() && transform.meridianFlips; }
   1458e:	9a01      	ldr	r2, [sp, #4]
   14590:	4d5c      	ldr	r5, [pc, #368]	; (14704 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b4>)
   14592:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
   14596:	f012 0f01 	tst.w	r2, #1
   1459a:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
   1459e:	f000 813f 	beq.w	14820 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7d0>
   145a2:	1e51      	subs	r1, r2, #1
   145a4:	b2c9      	uxtb	r1, r1
   145a6:	2901      	cmp	r1, #1
   145a8:	f240 8131 	bls.w	1480e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7be>
      if (transform.mountType == FORK)             reply[3]|=0b10000010; else      // FORK
   145ac:	2a02      	cmp	r2, #2
   145ae:	f000 820f 	beq.w	149d0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x980>
      if (transform.mountType == ALTAZM)           reply[3]|=0b10001000; else      // ALTAZM
   145b2:	2a03      	cmp	r2, #3
   145b4:	f000 8228 	beq.w	14a08 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9b8>
      if (transform.mountType == ALTALT)           reply[3]|=0b10000100;           // ALTALT
   145b8:	2a04      	cmp	r2, #4
   145ba:	d103      	bne.n	145c4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x574>
   145bc:	78e2      	ldrb	r2, [r4, #3]
   145be:	f062 027b 	orn	r2, r2, #123	; 0x7b
   145c2:	70e2      	strb	r2, [r4, #3]
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   145c4:	2200      	movs	r2, #0
   145c6:	4618      	mov	r0, r3
   145c8:	4946      	ldr	r1, [pc, #280]	; (146e4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x694>)
   145ca:	f7f4 fc8f 	bl	8eec <Mount::getMountPosition(CoordReturn)>
      if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) current.pierSide = PIER_SIDE_NONE;
   145ce:	f89a 3000 	ldrb.w	r3, [sl]
      Coordinate current = mount.getMountPosition(CR_MOUNT);
   145d2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
      if (guide.state == GU_HOME_GUIDE || guide.state == GU_HOME_GUIDE_ABORT) current.pierSide = PIER_SIDE_NONE;
   145d6:	3b04      	subs	r3, #4
      if (current.pierSide == PIER_SIDE_NONE)      reply[3]|=0b10010000; else      // Pier side none
   145d8:	2b01      	cmp	r3, #1
   145da:	f240 816a 	bls.w	148b2 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x862>
   145de:	2a00      	cmp	r2, #0
   145e0:	f000 8167 	beq.w	148b2 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x862>
      if (current.pierSide == PIER_SIDE_EAST)      reply[3]|=0b10100000; else      // Pier side east
   145e4:	2a01      	cmp	r2, #1
   145e6:	f000 820a 	beq.w	149fe <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9ae>
      if (current.pierSide == PIER_SIDE_WEST)      reply[3]|=0b11000000;           // Pier side west
   145ea:	2a02      	cmp	r2, #2
   145ec:	d103      	bne.n	145f6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5a6>
   145ee:	78e3      	ldrb	r3, [r4, #3]
   145f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   145f4:	70e3      	strb	r3, [r4, #3]
   145f6:	f895 35c4 	ldrb.w	r3, [r5, #1476]	; 0x5c4
          reply[4] = (int)pec.settings.state|0b10000000;                           // PEC state: 0 ignore, 1 ready play, 2 playing, 3 ready record, 4 recording
   145fa:	4943      	ldr	r1, [pc, #268]	; (14708 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6b8>)
        if (transform.isEquatorial())
   145fc:	3b01      	subs	r3, #1
   145fe:	2b01      	cmp	r3, #1
   14600:	d803      	bhi.n	1460a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5ba>
          reply[4] = (int)pec.settings.state|0b10000000;                           // PEC state: 0 ignore, 1 ready play, 2 playing, 3 ready record, 4 recording
   14602:	794b      	ldrb	r3, [r1, #5]
   14604:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14608:	7123      	strb	r3, [r4, #4]
        if (pec.settings.recorded)                 reply[4]|=0b11000000;           // PEC state: data has been recorded
   1460a:	790b      	ldrb	r3, [r1, #4]
   1460c:	07d9      	lsls	r1, r3, #31
   1460e:	d503      	bpl.n	14618 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5c8>
   14610:	7923      	ldrb	r3, [r4, #4]
   14612:	f063 033f 	orn	r3, r3, #63	; 0x3f
   14616:	7123      	strb	r3, [r4, #4]
      reply[5] = (int)park.state|0b10000000;                                       // Park state: 0 not parked, 1 parking in-progress, 2 parked, 3 park failed
   14618:	4b3c      	ldr	r3, [pc, #240]	; (1470c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6bc>)
      reply[8] = limits.errorCode()|0b10000000;                                    // General error
   1461a:	483d      	ldr	r0, [pc, #244]	; (14710 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6c0>)
      reply[5] = (int)park.state|0b10000000;                                       // Park state: 0 not parked, 1 parking in-progress, 2 parked, 3 park failed
   1461c:	781b      	ldrb	r3, [r3, #0]
   1461e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14622:	7163      	strb	r3, [r4, #5]
      reply[6] = (int)guide.settings.pulseRateSelect|0b10000000;                   // Pulse-guide selection
   14624:	f89a 300c 	ldrb.w	r3, [sl, #12]
   14628:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1462c:	71a3      	strb	r3, [r4, #6]
      reply[7] = (int)guide.settings.axis1RateSelect|0b10000000;                   // Guide selection
   1462e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   14632:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14636:	71e3      	strb	r3, [r4, #7]
      reply[8] = limits.errorCode()|0b10000000;                                    // General error
   14638:	f7fc fc98 	bl	10f6c <Limits::errorCode()>
   1463c:	4603      	mov	r3, r0
      reply[9] = 0;
   1463e:	2200      	movs	r2, #0
  return true;
   14640:	2001      	movs	r0, #1
      reply[8] = limits.errorCode()|0b10000000;                                    // General error
   14642:	f063 037f 	orn	r3, r3, #127	; 0x7f
      reply[9] = 0;
   14646:	7262      	strb	r2, [r4, #9]
      reply[8] = limits.errorCode()|0b10000000;                                    // General error
   14648:	7223      	strb	r3, [r4, #8]
      *numericReply = false;
   1464a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   1464c:	701a      	strb	r2, [r3, #0]
    } else
   1464e:	e50c      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
      if (transform.mountType == GEM)          reply[i++] = 'G'; else
   14650:	4622      	mov	r2, r4
   14652:	2603      	movs	r6, #3
   14654:	2502      	movs	r5, #2
   14656:	f802 1b01 	strb.w	r1, [r2], #1
   1465a:	e547      	b.n	140ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c>
      if (mount.settings.rc == RC_MODEL_DUAL) { reply[i++]='t'; }                  // On[t]rack enabled
   1465c:	2274      	movs	r2, #116	; 0x74
   1465e:	46b9      	mov	r9, r7
   14660:	f888 2000 	strb.w	r2, [r8]
        if (fequal(r, 57.900F))                reply[i++]='('; else                // Lunar rate selected
   14664:	eb04 0806 	add.w	r8, r4, r6
   14668:	1c7e      	adds	r6, r7, #1
      if (mount.settings.rc == RC_NONE) {
   1466a:	f89b 2018 	ldrb.w	r2, [fp, #24]
   1466e:	4637      	mov	r7, r6
   14670:	e608      	b.n	14284 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x234>
   14672:	46a0      	mov	r8, r4
   14674:	46b1      	mov	r9, r6
   14676:	e55f      	b.n	14138 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xe8>
      if (mount.settings.rc == RC_MODEL_DUAL)      reply[0]|=0b10100000;           // OnTrack enabled
   14678:	7823      	ldrb	r3, [r4, #0]
   1467a:	f063 035f 	orn	r3, r3, #95	; 0x5f
   1467e:	7023      	strb	r3, [r4, #0]
      if (mount.settings.rc == RC_NONE) {
   14680:	f89b 3018 	ldrb.w	r3, [fp, #24]
   14684:	e717      	b.n	144b6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x466>
        sound.enabled = parameter[3] - '0';
   14686:	3a30      	subs	r2, #48	; 0x30
  return true;
   14688:	f04f 0001 	mov.w	r0, #1
        sound.enabled = parameter[3] - '0';
   1468c:	bf18      	it	ne
   1468e:	2201      	movne	r2, #1
   14690:	706a      	strb	r2, [r5, #1]
      break;
   14692:	e4ea      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
   14694:	7843      	ldrb	r3, [r0, #1]
   14696:	2b00      	cmp	r3, #0
   14698:	f040 81f0 	bne.w	14a7c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa2c>
   1469c:	1c68      	adds	r0, r5, #1
   1469e:	f7f0 ffe9 	bl	5674 <Sound::alert()>
  return true;
   146a2:	2001      	movs	r0, #1
   146a4:	e4e1      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
    inline void soundBeep() { if (sound.enabled) wake(); sound.beep(); }
   146a6:	7843      	ldrb	r3, [r0, #1]
   146a8:	2b00      	cmp	r3, #0
   146aa:	f040 81ea 	bne.w	14a82 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa32>
   146ae:	1c68      	adds	r0, r5, #1
   146b0:	f7f0 ffe2 	bl	5678 <Sound::beep()>
   146b4:	2001      	movs	r0, #1
   146b6:	e4d8      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
    inline void soundClick() { if (sound.enabled) wake(); sound.click(); }
   146b8:	7843      	ldrb	r3, [r0, #1]
   146ba:	2b00      	cmp	r3, #0
   146bc:	f040 81e4 	bne.w	14a88 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa38>
   146c0:	1c68      	adds	r0, r5, #1
   146c2:	f7f0 ffdb 	bl	567c <Sound::click()>
   146c6:	2001      	movs	r0, #1
   146c8:	e4cf      	b.n	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
   146ca:	bf00      	nop
   146cc:	f3af 8000 	nop.w
   146d0:	f2e5a1df 	.word	0xf2e5a1df
   146d4:	404e1506 	.word	0x404e1506
   146d8:	71ef8766 	.word	0x71ef8766
   146dc:	3e9787ad 	.word	0x3e9787ad
   146e0:	20002194 	.word	0x20002194
   146e4:	200054e0 	.word	0x200054e0
   146e8:	200043e8 	.word	0x200043e8
   146ec:	20005270 	.word	0x20005270
   146f0:	20004668 	.word	0x20004668
   146f4:	4267999a 	.word	0x4267999a
   146f8:	350637bd 	.word	0x350637bd
   146fc:	200050e8 	.word	0x200050e8
   14700:	20005478 	.word	0x20005478
   14704:	200064ac 	.word	0x200064ac
   14708:	20005568 	.word	0x20005568
   1470c:	20005ea8 	.word	0x20005ea8
   14710:	20005cf4 	.word	0x20005cf4
   14714:	48d0      	ldr	r0, [pc, #832]	; (14a58 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa08>)
   14716:	f7ec fd09 	bl	112c <Axis::getInstrumentCoordinate()>
   1471a:	2200      	movs	r2, #0
   1471c:	49cf      	ldr	r1, [pc, #828]	; (14a5c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0c>)
   1471e:	a804      	add	r0, sp, #16
   14720:	eeb0 8b40 	vmov.f64	d8, d0
   14724:	f7fa fe40 	bl	f3a8 <Home::getPosition(CoordReturn)>
   14728:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
   1472c:	ed9f 9bc8 	vldr	d9, [pc, #800]	; 14a50 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa00>
   14730:	ee38 8b47 	vsub.f64	d8, d8, d7
   14734:	eeb0 8bc8 	vabs.f64	d8, d8
   14738:	eeb4 8bc9 	vcmpe.f64	d8, d9
   1473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14740:	f240 80cc 	bls.w	148dc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x88c>
    inline bool alignDone() { return alignState.lastStar > 0 && alignState.currentStar > alignState.lastStar; }
   14744:	4ac6      	ldr	r2, [pc, #792]	; (14a60 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa10>)
   14746:	f892 31e3 	ldrb.w	r3, [r2, #483]	; 0x1e3
   1474a:	2b00      	cmp	r3, #0
   1474c:	f000 80b6 	beq.w	148bc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x86c>
   14750:	f892 21e2 	ldrb.w	r2, [r2, #482]	; 0x1e2
   14754:	429a      	cmp	r2, r3
   14756:	f240 80b1 	bls.w	148bc <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x86c>
      if (goTo.alignDone())                    reply[i++] = '1'; else reply[i++] = '0';
   1475a:	2331      	movs	r3, #49	; 0x31
   1475c:	5563      	strb	r3, [r4, r5]
   1475e:	e4d4      	b.n	1410a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xba>
      if (goTo.isAutoFlipEnabled())            reply[i++]='a';                     // [a]uto meridian flip
   14760:	2261      	movs	r2, #97	; 0x61
   14762:	46b9      	mov	r9, r7
   14764:	f888 2000 	strb.w	r2, [r8]
      if (current.pierSide == PIER_SIDE_NONE)  reply[i++]='o'; else                // Pier side n[o]ne
   14768:	eb04 0806 	add.w	r8, r4, r6
   1476c:	1c7e      	adds	r6, r7, #1
   1476e:	4637      	mov	r7, r6
        if (pec.settings.recorded)             reply[i++]='R';                     // PEC data has been [R]ecorded
   14770:	49bc      	ldr	r1, [pc, #752]	; (14a64 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa14>)
   14772:	790a      	ldrb	r2, [r1, #4]
   14774:	07d2      	lsls	r2, r2, #31
   14776:	d507      	bpl.n	14788 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x738>
   14778:	2252      	movs	r2, #82	; 0x52
   1477a:	46b9      	mov	r9, r7
   1477c:	f888 2000 	strb.w	r2, [r8]
          reply[i++]="/,~;^"[(int)pec.settings.state];                             // PEC State (/)gnore, ready (,)lay, (~)laying, ready (;)ecord, (^)ecording
   14780:	eb04 0806 	add.w	r8, r4, r6
      if (transform.mountType == GEM)          reply[i++]='E'; else                // GEM
   14784:	1c7e      	adds	r6, r7, #1
   14786:	4637      	mov	r7, r6
   14788:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
   1478c:	1e50      	subs	r0, r2, #1
        if (transform.isEquatorial())
   1478e:	b2c0      	uxtb	r0, r0
   14790:	2801      	cmp	r0, #1
   14792:	d926      	bls.n	147e2 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x792>
      if (transform.mountType == FORK)         reply[i++]='K'; else                // FORK
   14794:	2a02      	cmp	r2, #2
   14796:	f47f adcc 	bne.w	14332 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2e2>
   1479a:	224b      	movs	r2, #75	; 0x4b
      if (transform.mountType == ALTALT)       reply[i++]='L';                     // ALTALT
   1479c:	f888 2000 	strb.w	r2, [r8]
      if (current.pierSide == PIER_SIDE_NONE)  reply[i++]='o'; else                // Pier side n[o]ne
   147a0:	eb04 0806 	add.w	r8, r4, r6
   147a4:	1c7e      	adds	r6, r7, #1
   147a6:	46b9      	mov	r9, r7
   147a8:	4637      	mov	r7, r6
   147aa:	e5c8      	b.n	1433e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ee>
   147ac:	236f      	movs	r3, #111	; 0x6f
   147ae:	f888 3000 	strb.w	r3, [r8]
      reply[i++]='0' + guide.settings.pulseRateSelect;                             // Provide pulse-guide rate
   147b2:	eb04 0806 	add.w	r8, r4, r6
   147b6:	1c7e      	adds	r6, r7, #1
   147b8:	e5dd      	b.n	14376 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x326>
      if (park.state == PS_PARKING)            reply[i++]='I'; else                // Parking [I]n-progress
   147ba:	2a01      	cmp	r2, #1
   147bc:	f000 80d1 	beq.w	14962 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x912>
      if (park.state == PS_PARKED)             reply[i++]='P'; else                // [P]arked
   147c0:	2a02      	cmp	r2, #2
   147c2:	f000 8110 	beq.w	149e6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x996>
      if (park.state == PS_PARK_FAILED)        reply[i++]='F';                     // Park [F]ailed
   147c6:	2a03      	cmp	r2, #3
   147c8:	f000 8123 	beq.w	14a12 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c2>
   147cc:	464f      	mov	r7, r9
   147ce:	4699      	mov	r9, r3
   147d0:	e4cc      	b.n	1416c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11c>
    inline bool isAutoFlipEnabled() { return settings.meridianFlipAuto && transform.isEquatorial() && transform.meridianFlips; }
   147d2:	f895 25c5 	ldrb.w	r2, [r5, #1477]	; 0x5c5
   147d6:	2a00      	cmp	r2, #0
   147d8:	d1c2      	bne.n	14760 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x710>
        if (pec.settings.recorded)             reply[i++]='R';                     // PEC data has been [R]ecorded
   147da:	49a2      	ldr	r1, [pc, #648]	; (14a64 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa14>)
   147dc:	790a      	ldrb	r2, [r1, #4]
   147de:	07d2      	lsls	r2, r2, #31
   147e0:	d4ca      	bmi.n	14778 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x728>
          reply[i++]="/,~;^"[(int)pec.settings.state];                             // PEC State (/)gnore, ready (,)lay, (~)laying, ready (;)ecord, (^)ecording
   147e2:	794a      	ldrb	r2, [r1, #5]
   147e4:	49a0      	ldr	r1, [pc, #640]	; (14a68 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa18>)
   147e6:	5c8a      	ldrb	r2, [r1, r2]
   147e8:	f888 2000 	strb.w	r2, [r8]
      if (transform.mountType == GEM)          reply[i++]='E'; else                // GEM
   147ec:	eb04 0806 	add.w	r8, r4, r6
   147f0:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
   147f4:	1c7e      	adds	r6, r7, #1
   147f6:	2a01      	cmp	r2, #1
      if (current.pierSide == PIER_SIDE_NONE)  reply[i++]='o'; else                // Pier side n[o]ne
   147f8:	46b1      	mov	r9, r6
      if (transform.mountType == GEM)          reply[i++]='E'; else                // GEM
   147fa:	f040 8114 	bne.w	14a26 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9d6>
      if (current.pierSide == PIER_SIDE_NONE)  reply[i++]='o'; else                // Pier side n[o]ne
   147fe:	3702      	adds	r7, #2
      if (transform.mountType == GEM)          reply[i++]='E'; else                // GEM
   14800:	2245      	movs	r2, #69	; 0x45
   14802:	f888 2000 	strb.w	r2, [r8]
      if (current.pierSide == PIER_SIDE_NONE)  reply[i++]='o'; else                // Pier side n[o]ne
   14806:	eb04 0806 	add.w	r8, r4, r6
      reply[i++]='0' + guide.settings.pulseRateSelect;                             // Provide pulse-guide rate
   1480a:	463e      	mov	r6, r7
   1480c:	e597      	b.n	1433e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x2ee>
   1480e:	f895 15c5 	ldrb.w	r1, [r5, #1477]	; 0x5c5
   14812:	b129      	cbz	r1, 14820 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x7d0>
      if (goTo.isAutoFlipEnabled())                reply[2]|=0b10010000;           // Auto meridian flip
   14814:	78a2      	ldrb	r2, [r4, #2]
   14816:	f062 026f 	orn	r2, r2, #111	; 0x6f
   1481a:	70a2      	strb	r2, [r4, #2]
      if (transform.mountType == GEM)              reply[3]|=0b10000001; else      // GEM
   1481c:	f995 25c4 	ldrsb.w	r2, [r5, #1476]	; 0x5c4
   14820:	2a01      	cmp	r2, #1
   14822:	f47f aec3 	bne.w	145ac <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x55c>
   14826:	78e2      	ldrb	r2, [r4, #3]
   14828:	f062 027e 	orn	r2, r2, #126	; 0x7e
   1482c:	70e2      	strb	r2, [r4, #3]
   1482e:	e6c9      	b.n	145c4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x574>
      if (current.pierSide == PIER_SIDE_NONE) reply[0]='N';
   14830:	234e      	movs	r3, #78	; 0x4e
   14832:	7023      	strb	r3, [r4, #0]
      if (current.pierSide == PIER_SIDE_WEST) reply[0]='W';
   14834:	e5f3      	b.n	1441e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ce>
      if (guide.activePulseGuide())            reply[i++]='G';                     // Pulse [G]uide active
   14836:	2247      	movs	r2, #71	; 0x47
   14838:	f888 2000 	strb.w	r2, [r8]
   1483c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   14840:	2a00      	cmp	r2, #0
   14842:	f43f ace7 	beq.w	14214 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c4>
   14846:	f89a 2000 	ldrb.w	r2, [sl]
   1484a:	2a01      	cmp	r2, #1
   1484c:	f43f ace2 	beq.w	14214 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1c4>
      if (mount.settings.rc == RC_REFRACTION) { reply[i++]='r'; reply[i++]='s'; }  // [r]efr enabled [s]ingle axis
   14850:	3701      	adds	r7, #1
   14852:	eb04 0806 	add.w	r8, r4, r6
   14856:	463e      	mov	r6, r7
   14858:	e4d9      	b.n	1420e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1be>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   1485a:	ab1a      	add	r3, sp, #104	; 0x68
   1485c:	4883      	ldr	r0, [pc, #524]	; (14a6c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa1c>)
   1485e:	9103      	str	r1, [sp, #12]
   14860:	9302      	str	r3, [sp, #8]
   14862:	f7ec fc63 	bl	112c <Axis::getInstrumentCoordinate()>
   14866:	2200      	movs	r2, #0
   14868:	eeb0 8b40 	vmov.f64	d8, d0
   1486c:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   14870:	4618      	mov	r0, r3
   14872:	f7fa fd99 	bl	f3a8 <Home::getPosition(CoordReturn)>
   14876:	ed9d 7b2c 	vldr	d7, [sp, #176]	; 0xb0
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   1487a:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   1487e:	ee38 8b47 	vsub.f64	d8, d8, d7
   14882:	eeb0 8bc8 	vabs.f64	d8, d8
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   14886:	eeb4 8bc9 	vcmpe.f64	d8, d9
   1488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1488e:	f63f ac94 	bhi.w	141ba <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x16a>
      if (mount.isHome())                      reply[i++]='H';                     // At [H]ome
   14892:	2248      	movs	r2, #72	; 0x48
   14894:	46b9      	mov	r9, r7
   14896:	f888 2000 	strb.w	r2, [r8]
      if (home.settings.automaticAtBoot)       reply[i++]='B';                     // Auto home at [B]oot
   1489a:	eb04 0806 	add.w	r8, r4, r6
      if (home.state == HS_HOMING)             reply[i++]='h';                     // Slewing [h]ome
   1489e:	1c7e      	adds	r6, r7, #1
   148a0:	4637      	mov	r7, r6
   148a2:	e48a      	b.n	141ba <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x16a>
      if (transform.mountType == FORK)         reply[i++] = 'P'; else
   148a4:	2150      	movs	r1, #80	; 0x50
   148a6:	4622      	mov	r2, r4
   148a8:	2603      	movs	r6, #3
   148aa:	461d      	mov	r5, r3
   148ac:	f802 1b01 	strb.w	r1, [r2], #1
   148b0:	e41c      	b.n	140ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c>
      if (current.pierSide == PIER_SIDE_NONE)      reply[3]|=0b10010000; else      // Pier side none
   148b2:	78e3      	ldrb	r3, [r4, #3]
   148b4:	f063 036f 	orn	r3, r3, #111	; 0x6f
   148b8:	70e3      	strb	r3, [r4, #3]
   148ba:	e69c      	b.n	145f6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5a6>
      if (goTo.alignDone())                    reply[i++] = '1'; else reply[i++] = '0';
   148bc:	2330      	movs	r3, #48	; 0x30
   148be:	5563      	strb	r3, [r4, r5]
   148c0:	e423      	b.n	1410a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xba>
        if (fequal(r, 60.000F))                reply[i++]='O'; else                // SOlar rate selected
   148c2:	eddf 7a6b 	vldr	s15, [pc, #428]	; 14a70 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa20>
   148c6:	ee77 7a67 	vsub.f32	s15, s14, s15
   148ca:	eef0 7ae7 	vabs.f32	s15, s15
   148ce:	eef4 7ac6 	vcmpe.f32	s15, s12
   148d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   148d6:	d56d      	bpl.n	149b4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x964>
   148d8:	224f      	movs	r2, #79	; 0x4f
   148da:	e4ed      	b.n	142b8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x268>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   148dc:	4863      	ldr	r0, [pc, #396]	; (14a6c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa1c>)
   148de:	f7ec fc25 	bl	112c <Axis::getInstrumentCoordinate()>
   148e2:	2200      	movs	r2, #0
   148e4:	495d      	ldr	r1, [pc, #372]	; (14a5c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa0c>)
   148e6:	a81a      	add	r0, sp, #104	; 0x68
   148e8:	eeb0 8b40 	vmov.f64	d8, d0
   148ec:	f7fa fd5c 	bl	f3a8 <Home::getPosition(CoordReturn)>
   148f0:	ed9d 7b2c 	vldr	d7, [sp, #176]	; 0xb0
   148f4:	ee38 7b47 	vsub.f64	d7, d8, d7
   148f8:	eeb0 7bc7 	vabs.f64	d7, d7
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   148fc:	eeb4 7bc9 	vcmpe.f64	d7, d9
   14900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14904:	f63f af1e 	bhi.w	14744 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x6f4>
      if (mount.isHome())                      reply[i++] = 'H'; else
   14908:	2348      	movs	r3, #72	; 0x48
   1490a:	5563      	strb	r3, [r4, r5]
   1490c:	f7ff bbfd 	b.w	1410a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xba>
      if (transform.mountType == ALTAZM)       reply[i++] = 'A'; else
   14910:	2141      	movs	r1, #65	; 0x41
   14912:	4622      	mov	r2, r4
   14914:	461e      	mov	r6, r3
   14916:	2502      	movs	r5, #2
   14918:	f802 1b01 	strb.w	r1, [r2], #1
   1491c:	f7ff bbe6 	b.w	140ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c>
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   14920:	ab1a      	add	r3, sp, #104	; 0x68
   14922:	4852      	ldr	r0, [pc, #328]	; (14a6c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa1c>)
   14924:	9103      	str	r1, [sp, #12]
   14926:	9302      	str	r3, [sp, #8]
   14928:	f7ec fc00 	bl	112c <Axis::getInstrumentCoordinate()>
   1492c:	2200      	movs	r2, #0
   1492e:	eeb0 8b40 	vmov.f64	d8, d0
   14932:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
   14936:	4618      	mov	r0, r3
   14938:	f7fa fd36 	bl	f3a8 <Home::getPosition(CoordReturn)>
   1493c:	ed9d 7b2c 	vldr	d7, [sp, #176]	; 0xb0
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   14940:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
             abs(axis2.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a2) <= arcsecToRad(AXIS2_HOME_TOLERANCE);
   14944:	ee38 7b47 	vsub.f64	d7, d8, d7
   14948:	eeb0 7bc7 	vabs.f64	d7, d7
      return abs(axis1.getInstrumentCoordinate() - home.getPosition(CR_MOUNT).a1) <= arcsecToRad(AXIS1_HOME_TOLERANCE) &&
   1494c:	eeb4 7bc9 	vcmpe.f64	d7, d9
   14950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14954:	f63f adf7 	bhi.w	14546 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4f6>
      if (mount.isHome())                          reply[2]|=0b10000001;           // At home
   14958:	78a2      	ldrb	r2, [r4, #2]
   1495a:	f062 027e 	orn	r2, r2, #126	; 0x7e
   1495e:	70a2      	strb	r2, [r4, #2]
   14960:	e5f1      	b.n	14546 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x4f6>
      if (park.state == PS_PARKING)            reply[i++]='I'; else                // Parking [I]n-progress
   14962:	2349      	movs	r3, #73	; 0x49
   14964:	f888 3000 	strb.w	r3, [r8]
      if (mount.syncFromOnStepToEncoders)      reply[i++]='e';                     // Sync to [e]ncoders only
   14968:	eb04 0806 	add.w	r8, r4, r6
   1496c:	f109 0601 	add.w	r6, r9, #1
      if (mount.isHome())                      reply[i++]='H';                     // At [H]ome
   14970:	4637      	mov	r7, r6
   14972:	f7ff bbfb 	b.w	1416c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11c>
      if (current.pierSide == PIER_SIDE_EAST)  reply[i++]='T'; else                // Pier side eas[T]
   14976:	2354      	movs	r3, #84	; 0x54
   14978:	f888 3000 	strb.w	r3, [r8]
      reply[i++]='0' + guide.settings.pulseRateSelect;                             // Provide pulse-guide rate
   1497c:	eb04 0806 	add.w	r8, r4, r6
   14980:	1c7e      	adds	r6, r7, #1
   14982:	e4f8      	b.n	14376 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x326>
      if (transform.mountType == ALTAZM)       reply[i++]='A'; else                // ALTAZM
   14984:	2241      	movs	r2, #65	; 0x41
   14986:	e709      	b.n	1479c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x74c>
      if (transform.mountType == ALTALT)       reply[i++] = 'L';
   14988:	234c      	movs	r3, #76	; 0x4c
   1498a:	4622      	mov	r2, r4
   1498c:	2603      	movs	r6, #3
   1498e:	2502      	movs	r5, #2
   14990:	f802 3b01 	strb.w	r3, [r2], #1
   14994:	f7ff bbaa 	b.w	140ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9c>
        if (fequal(r, 60.000F))                    reply[1]|=0b10000010; else      // Solar rate selected
   14998:	eddf 7a35 	vldr	s15, [pc, #212]	; 14a70 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa20>
   1499c:	ee77 7a67 	vsub.f32	s15, s14, s15
   149a0:	eef0 7ae7 	vabs.f32	s15, s15
   149a4:	eef4 7ac6 	vcmpe.f32	s15, s12
   149a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149ac:	d53e      	bpl.n	14a2c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x9dc>
   149ae:	2382      	movs	r3, #130	; 0x82
   149b0:	7063      	strb	r3, [r4, #1]
   149b2:	e59b      	b.n	144ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x49c>
        if (fequal(r, 60.136F))                reply[i++]='k';                     // King rate selected
   149b4:	eddf 7a2f 	vldr	s15, [pc, #188]	; 14a74 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa24>
   149b8:	ee37 7a67 	vsub.f32	s14, s14, s15
   149bc:	eef0 7ac7 	vabs.f32	s15, s14
   149c0:	eef4 7ac6 	vcmpe.f32	s15, s12
   149c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149c8:	f57f ac7d 	bpl.w	142c6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x276>
   149cc:	226b      	movs	r2, #107	; 0x6b
   149ce:	e473      	b.n	142b8 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x268>
      if (transform.mountType == FORK)             reply[3]|=0b10000010; else      // FORK
   149d0:	78e2      	ldrb	r2, [r4, #3]
   149d2:	f062 027d 	orn	r2, r2, #125	; 0x7d
   149d6:	70e2      	strb	r2, [r4, #3]
   149d8:	e5f4      	b.n	145c4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x574>
      if (current.pierSide == PIER_SIDE_WEST) reply[0]='W';
   149da:	2a02      	cmp	r2, #2
   149dc:	f47f ad1f 	bne.w	1441e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ce>
   149e0:	2357      	movs	r3, #87	; 0x57
   149e2:	7023      	strb	r3, [r4, #0]
   149e4:	e51b      	b.n	1441e <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x3ce>
      if (park.state == PS_PARKED)             reply[i++]='P'; else                // [P]arked
   149e6:	2350      	movs	r3, #80	; 0x50
   149e8:	f888 3000 	strb.w	r3, [r8]
      if (mount.syncFromOnStepToEncoders)      reply[i++]='e';                     // Sync to [e]ncoders only
   149ec:	eb04 0806 	add.w	r8, r4, r6
   149f0:	f109 0601 	add.w	r6, r9, #1
      if (mount.isHome())                      reply[i++]='H';                     // At [H]ome
   149f4:	4637      	mov	r7, r6
   149f6:	f7ff bbb9 	b.w	1416c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11c>
      if (transform.mountType == ALTALT)       reply[i++]='L';                     // ALTALT
   149fa:	224c      	movs	r2, #76	; 0x4c
   149fc:	e6ce      	b.n	1479c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x74c>
      if (current.pierSide == PIER_SIDE_EAST)      reply[3]|=0b10100000; else      // Pier side east
   149fe:	78e3      	ldrb	r3, [r4, #3]
   14a00:	f063 035f 	orn	r3, r3, #95	; 0x5f
   14a04:	70e3      	strb	r3, [r4, #3]
   14a06:	e5f6      	b.n	145f6 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x5a6>
      if (transform.mountType == ALTAZM)           reply[3]|=0b10001000; else      // ALTAZM
   14a08:	78e2      	ldrb	r2, [r4, #3]
   14a0a:	f062 0277 	orn	r2, r2, #119	; 0x77
   14a0e:	70e2      	strb	r2, [r4, #3]
   14a10:	e5d8      	b.n	145c4 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x574>
      if (park.state == PS_PARK_FAILED)        reply[i++]='F';                     // Park [F]ailed
   14a12:	2346      	movs	r3, #70	; 0x46
   14a14:	f888 3000 	strb.w	r3, [r8]
      if (mount.syncFromOnStepToEncoders)      reply[i++]='e';                     // Sync to [e]ncoders only
   14a18:	eb04 0806 	add.w	r8, r4, r6
   14a1c:	f109 0601 	add.w	r6, r9, #1
      if (mount.isHome())                      reply[i++]='H';                     // At [H]ome
   14a20:	4637      	mov	r7, r6
   14a22:	f7ff bba3 	b.w	1416c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x11c>
          reply[i++]="/,~;^"[(int)pec.settings.state];                             // PEC State (/)gnore, ready (,)lay, (~)laying, ready (;)ecord, (^)ecording
   14a26:	46b9      	mov	r9, r7
   14a28:	4637      	mov	r7, r6
   14a2a:	e6b3      	b.n	14794 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x744>
        if (fequal(r, 60.136F))                    reply[1]|=0b10000011;           // King rate selected
   14a2c:	eddf 7a11 	vldr	s15, [pc, #68]	; 14a74 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0xa24>
   14a30:	ee37 7a67 	vsub.f32	s14, s14, s15
   14a34:	eef0 7ac7 	vabs.f32	s15, s14
   14a38:	eef4 7ac6 	vcmpe.f32	s15, s12
   14a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a40:	f57f ad54 	bpl.w	144ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x49c>
   14a44:	2383      	movs	r3, #131	; 0x83
   14a46:	7063      	strb	r3, [r4, #1]
   14a48:	e550      	b.n	144ec <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x49c>
   14a4a:	bf00      	nop
   14a4c:	f3af 8000 	nop.w
   14a50:	71ef8766 	.word	0x71ef8766
   14a54:	3e9787ad 	.word	0x3e9787ad
   14a58:	200050e8 	.word	0x200050e8
   14a5c:	20005478 	.word	0x20005478
   14a60:	20005270 	.word	0x20005270
   14a64:	20005568 	.word	0x20005568
   14a68:	200022a0 	.word	0x200022a0
   14a6c:	200051a8 	.word	0x200051a8
   14a70:	42700000 	.word	0x42700000
   14a74:	42708b44 	.word	0x42708b44
   14a78:	464f      	mov	r7, r9
   14a7a:	e47c      	b.n	14376 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x326>
    inline void soundAlert() { if (sound.enabled) wake(); sound.alert(); }
   14a7c:	f000 f85e 	bl	14b3c <Status::wake()>
   14a80:	e60c      	b.n	1469c <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x64c>
    inline void soundBeep() { if (sound.enabled) wake(); sound.beep(); }
   14a82:	f000 f85b 	bl	14b3c <Status::wake()>
   14a86:	e612      	b.n	146ae <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x65e>
    inline void soundClick() { if (sound.enabled) wake(); sound.click(); }
   14a88:	f000 f858 	bl	14b3c <Status::wake()>
   14a8c:	e618      	b.n	146c0 <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x670>
        *commandError = CE_PARAM_RANGE;
   14a8e:	2304      	movs	r3, #4
   14a90:	9a40      	ldr	r2, [sp, #256]	; 0x100
  return true;
   14a92:	2001      	movs	r0, #1
        *commandError = CE_PARAM_RANGE;
   14a94:	7013      	strb	r3, [r2, #0]
      break;
   14a96:	f7ff bae8 	b.w	1406a <Status::command(char*, char*, char*, bool*, bool*, CommandError*)+0x1a>
   14a9a:	bf00      	nop

00014a9c <generalWrapper()>:
      digitalWriteEx(MOUNT_LED_PIN, MOUNT_LED_ON_STATE);
    }
  }
#endif

void generalWrapper() { mountStatus.general(); }
   14a9c:	4770      	bx	lr
   14a9e:	bf00      	nop

00014aa0 <flash()>:
    if (ledOff) { digitalWriteEx(MOUNT_LED_PIN, !MOUNT_LED_ON_STATE); return; }
   14aa0:	4b10      	ldr	r3, [pc, #64]	; (14ae4 <flash()+0x44>)
   14aa2:	781b      	ldrb	r3, [r3, #0]
   14aa4:	b9ab      	cbnz	r3, 14ad2 <flash()+0x32>
    if (ledOn) { digitalWriteEx(MOUNT_LED_PIN, MOUNT_LED_ON_STATE); return; }
   14aa6:	4b10      	ldr	r3, [pc, #64]	; (14ae8 <flash()+0x48>)
   14aa8:	781b      	ldrb	r3, [r3, #0]
   14aaa:	b963      	cbnz	r3, 14ac6 <flash()+0x26>
    if ((cycle++)%2 == 0) {
   14aac:	4a0f      	ldr	r2, [pc, #60]	; (14aec <flash()+0x4c>)
   14aae:	7813      	ldrb	r3, [r2, #0]
   14ab0:	1c59      	adds	r1, r3, #1
   14ab2:	f013 0f01 	tst.w	r3, #1
				CORE_PIN37_PORTSET = CORE_PIN37_BITMASK;
   14ab6:	4b0e      	ldr	r3, [pc, #56]	; (14af0 <flash()+0x50>)
   14ab8:	7011      	strb	r1, [r2, #0]
   14aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14abe:	d10e      	bne.n	14ade <flash()+0x3e>
   14ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   14ac4:	4770      	bx	lr
				CORE_PIN37_PORTCLEAR = CORE_PIN37_BITMASK;
   14ac6:	4b0a      	ldr	r3, [pc, #40]	; (14af0 <flash()+0x50>)
   14ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if (ledOn) { digitalWriteEx(MOUNT_LED_PIN, MOUNT_LED_ON_STATE); return; }
   14ad0:	4770      	bx	lr
				CORE_PIN37_PORTSET = CORE_PIN37_BITMASK;
   14ad2:	4b07      	ldr	r3, [pc, #28]	; (14af0 <flash()+0x50>)
   14ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (ledOff) { digitalWriteEx(MOUNT_LED_PIN, !MOUNT_LED_ON_STATE); return; }
   14adc:	4770      	bx	lr
				CORE_PIN37_PORTCLEAR = CORE_PIN37_BITMASK;
   14ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
   14ae2:	4770      	bx	lr
   14ae4:	20006aad 	.word	0x20006aad
   14ae8:	20006aae 	.word	0x20006aae
   14aec:	20006aa2 	.word	0x20006aa2
   14af0:	42008000 	.word	0x42008000

00014af4 <Status::init()>:
   14af4:	4b0d      	ldr	r3, [pc, #52]	; (14b2c <Status::init()+0x38>)

// get mount status ready
void Status::init() {
  if (!nv.hasValidKey()) {
   14af6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
void Status::init() {
   14afa:	b510      	push	{r4, lr}
   14afc:	b084      	sub	sp, #16
  if (!nv.hasValidKey()) {
   14afe:	b172      	cbz	r2, 14b1e <Status::init()+0x2a>
  #if PARK_STATUS != OFF && PARK_STATUS_PIN != OFF
    pinModeEx(PARK_STATUS_PIN, OUTPUT);
  #endif

  VF("MSG: Mount, status start general status task (1s rate priority 4)... ");
  if (tasks.add(1000, 0, true, 4, generalWrapper, "genSta")) { VLF("success"); } else { VLF("FAILED!"); }
   14b00:	480b      	ldr	r0, [pc, #44]	; (14b30 <Status::init()+0x3c>)
   14b02:	2404      	movs	r4, #4
   14b04:	490b      	ldr	r1, [pc, #44]	; (14b34 <Status::init()+0x40>)
   14b06:	2301      	movs	r3, #1
   14b08:	2200      	movs	r2, #0
   14b0a:	9400      	str	r4, [sp, #0]
   14b0c:	e9cd 1001 	strd	r1, r0, [sp, #4]
   14b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14b14:	4808      	ldr	r0, [pc, #32]	; (14b38 <Status::init()+0x44>)
   14b16:	f7f1 fb61 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
}
   14b1a:	b004      	add	sp, #16
   14b1c:	bd10      	pop	{r4, pc}
    inline void update(uint16_t i,  uint8_t j) { writeToCache(i, j); }
   14b1e:	7842      	ldrb	r2, [r0, #1]
   14b20:	21f8      	movs	r1, #248	; 0xf8
   14b22:	4618      	mov	r0, r3
   14b24:	f7f0 f96c 	bl	4e00 <NonVolatileStorage::writeToCache(unsigned short, unsigned char)>
    inline void write(uint16_t i,  uint8_t j) { update (i,j); }
   14b28:	e7ea      	b.n	14b00 <Status::init()+0xc>
   14b2a:	bf00      	nop
   14b2c:	20005e50 	.word	0x20005e50
   14b30:	20002290 	.word	0x20002290
   14b34:	00014a9d 	.word	0x00014a9d
   14b38:	2000634c 	.word	0x2000634c

00014b3c <Status::wake()>:

// mount status wake on demand
void Status::wake() {
   14b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  static bool ready = false;

  if (!ready) {
   14b3e:	4d15      	ldr	r5, [pc, #84]	; (14b94 <Status::wake()+0x58>)
void Status::wake() {
   14b40:	b085      	sub	sp, #20
  if (!ready) {
   14b42:	782b      	ldrb	r3, [r5, #0]
   14b44:	b10b      	cbz	r3, 14b4a <Status::wake()+0xe>
      sound.init();
    #endif

    ready = true;
  }
}
   14b46:	b005      	add	sp, #20
   14b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (STATUS_MOUNT_LED != OFF && MOUNT_LED_PIN == STATUS_LED_PIN) tasks.remove(tasks.getHandleByName("StaLed"));
   14b4a:	4913      	ldr	r1, [pc, #76]	; (14b98 <Status::wake()+0x5c>)
   14b4c:	4604      	mov	r4, r0
      if (!tasks.getHandleByName("mntLed")) {
   14b4e:	4f13      	ldr	r7, [pc, #76]	; (14b9c <Status::wake()+0x60>)
      if (STATUS_MOUNT_LED != OFF && MOUNT_LED_PIN == STATUS_LED_PIN) tasks.remove(tasks.getHandleByName("StaLed"));
   14b50:	4813      	ldr	r0, [pc, #76]	; (14ba0 <Status::wake()+0x64>)
   14b52:	f7f1 fc2f 	bl	63b4 <Tasks::getHandleByName(char const*)>
   14b56:	4601      	mov	r1, r0
   14b58:	4811      	ldr	r0, [pc, #68]	; (14ba0 <Status::wake()+0x64>)
   14b5a:	f7f1 fbb1 	bl	62c0 <Tasks::remove(unsigned char)>
      if (!tasks.getHandleByName("mntLed")) {
   14b5e:	4639      	mov	r1, r7
   14b60:	480f      	ldr	r0, [pc, #60]	; (14ba0 <Status::wake()+0x64>)
   14b62:	f7f1 fc27 	bl	63b4 <Tasks::getHandleByName(char const*)>
   14b66:	4606      	mov	r6, r0
   14b68:	b118      	cbz	r0, 14b72 <Status::wake()+0x36>
    ready = true;
   14b6a:	2301      	movs	r3, #1
   14b6c:	702b      	strb	r3, [r5, #0]
}
   14b6e:	b005      	add	sp, #20
   14b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pinModeEx(MOUNT_LED_PIN, OUTPUT);
   14b72:	2101      	movs	r1, #1
   14b74:	2025      	movs	r0, #37	; 0x25
   14b76:	f003 fbc1 	bl	182fc <pinMode>
        statusTaskHandle = tasks.add(0, 0, true, 4, flash, "mntLed");
   14b7a:	4b0a      	ldr	r3, [pc, #40]	; (14ba4 <Status::wake()+0x68>)
   14b7c:	2204      	movs	r2, #4
   14b7e:	4631      	mov	r1, r6
   14b80:	4807      	ldr	r0, [pc, #28]	; (14ba0 <Status::wake()+0x64>)
   14b82:	9200      	str	r2, [sp, #0]
   14b84:	4632      	mov	r2, r6
   14b86:	e9cd 3701 	strd	r3, r7, [sp, #4]
   14b8a:	2301      	movs	r3, #1
   14b8c:	f7f1 fb26 	bl	61dc <Tasks::add(unsigned long, unsigned long, bool, unsigned char, void (*)(), char const*)>
   14b90:	7020      	strb	r0, [r4, #0]
        if (statusTaskHandle) { VLF("success"); } else { VLF("FAILED!"); }
   14b92:	e7ea      	b.n	14b6a <Status::wake()+0x2e>
   14b94:	20006aa9 	.word	0x20006aa9
   14b98:	20002370 	.word	0x20002370
   14b9c:	20002298 	.word	0x20002298
   14ba0:	2000634c 	.word	0x2000634c
   14ba4:	00014aa1 	.word	0x00014aa1

00014ba8 <Status::flashRate(int)>:

// mount status LED flash rate (in ms)
void Status::flashRate(int period) {
   14ba8:	4603      	mov	r3, r0
   14baa:	b410      	push	{r4}
  #if STATUS_MOUNT_LED != OFF && MOUNT_LED_PIN != OFF
    if (period == 0) { period = 500; ledOff = true; } else ledOff = false;
   14bac:	b131      	cbz	r1, 14bbc <Status::flashRate(int)+0x14>
    if (period == 1) { period = 500; ledOn = true; } else ledOn = false;
   14bae:	2901      	cmp	r1, #1
   14bb0:	f04f 0000 	mov.w	r0, #0
   14bb4:	d00e      	beq.n	14bd4 <Status::flashRate(int)+0x2c>
    tasks.setPeriod(statusTaskHandle, period/2UL);
   14bb6:	084a      	lsrs	r2, r1, #1
    if (period == 1) { period = 500; ledOn = true; } else ledOn = false;
   14bb8:	4601      	mov	r1, r0
   14bba:	e001      	b.n	14bc0 <Status::flashRate(int)+0x18>
   14bbc:	2001      	movs	r0, #1
   14bbe:	22fa      	movs	r2, #250	; 0xfa
    if (period == 0) { period = 500; ledOff = true; } else ledOff = false;
   14bc0:	4c05      	ldr	r4, [pc, #20]	; (14bd8 <Status::flashRate(int)+0x30>)
   14bc2:	7020      	strb	r0, [r4, #0]
   14bc4:	4c05      	ldr	r4, [pc, #20]	; (14bdc <Status::flashRate(int)+0x34>)
    tasks.setPeriod(statusTaskHandle, period/2UL);
   14bc6:	4806      	ldr	r0, [pc, #24]	; (14be0 <Status::flashRate(int)+0x38>)
   14bc8:	7021      	strb	r1, [r4, #0]
  #else
    period = period;
  #endif
}
   14bca:	f85d 4b04 	ldr.w	r4, [sp], #4
    tasks.setPeriod(statusTaskHandle, period/2UL);
   14bce:	7819      	ldrb	r1, [r3, #0]
   14bd0:	f7f1 bbae 	b.w	6330 <Tasks::setPeriod(unsigned char, unsigned long)>
   14bd4:	22fa      	movs	r2, #250	; 0xfa
   14bd6:	e7f3      	b.n	14bc0 <Status::flashRate(int)+0x18>
   14bd8:	20006aad 	.word	0x20006aad
   14bdc:	20006aae 	.word	0x20006aae
   14be0:	2000634c 	.word	0x2000634c

00014be4 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
   14be4:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
   14be8:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
   14bea:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
   14bee:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
   14bf0:	d101      	bne.n	14bf6 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
   14bf2:	6883      	ldr	r3, [r0, #8]
   14bf4:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
   14bf6:	f002 bb6b 	b.w	172d0 <EventResponder::triggerEventNotImmediate()>
   14bfa:	bf00      	nop

00014bfc <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
   14bfc:	4b32      	ldr	r3, [pc, #200]	; (14cc8 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
   14bfe:	4933      	ldr	r1, [pc, #204]	; (14ccc <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   14c00:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
   14c02:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
   14c06:	7920      	ldrb	r0, [r4, #4]
   14c08:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
   14c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
   14c0c:	f895 c004 	ldrb.w	ip, [r5, #4]
   14c10:	f881 c01c 	strb.w	ip, [r1, #28]
   14c14:	7708      	strb	r0, [r1, #28]
   14c16:	b152      	cbz	r2, 14c2e <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
   14c18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   14c1c:	d323      	bcc.n	14c66 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
   14c1e:	492c      	ldr	r1, [pc, #176]	; (14cd0 <_spi_dma_rxISR0()+0xd4>)
   14c20:	4411      	add	r1, r2
		DMA_SERQ = channel;
   14c22:	4a2a      	ldr	r2, [pc, #168]	; (14ccc <_spi_dma_rxISR0()+0xd0>)
   14c24:	6419      	str	r1, [r3, #64]	; 0x40
   14c26:	76d0      	strb	r0, [r2, #27]
   14c28:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   14c2c:	bd30      	pop	{r4, r5, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14c2e:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
   14c30:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
   14c32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
   14c34:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
   14c36:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
   14c3a:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
   14c3c:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
   14c3e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
   14c42:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
   14c44:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
   14c46:	6804      	ldr	r4, [r0, #0]
   14c48:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
   14c4a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
   14c4e:	4b21      	ldr	r3, [pc, #132]	; (14cd4 <_spi_dma_rxISR0()+0xd8>)
   14c50:	429c      	cmp	r4, r3
   14c52:	d126      	bne.n	14ca2 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
   14c54:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
   14c56:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
   14c58:	2b02      	cmp	r3, #2
		_data = data;
   14c5a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
   14c5c:	d126      	bne.n	14cac <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
   14c5e:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   14c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   14c64:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
   14c66:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
   14c68:	8be9      	ldrh	r1, [r5, #30]
   14c6a:	0409      	lsls	r1, r1, #16
   14c6c:	d422      	bmi.n	14cb4 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
   14c6e:	b292      	uxth	r2, r2
   14c70:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
   14c72:	6821      	ldr	r1, [r4, #0]
   14c74:	8bec      	ldrh	r4, [r5, #30]
   14c76:	b2a4      	uxth	r4, r4
   14c78:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
   14c7a:	8bcc      	ldrh	r4, [r1, #30]
   14c7c:	0424      	lsls	r4, r4, #16
   14c7e:	d505      	bpl.n	14c8c <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
   14c80:	8bcc      	ldrh	r4, [r1, #30]
   14c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
   14c86:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
   14c8a:	4322      	orrs	r2, r4
   14c8c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
   14c8e:	8bca      	ldrh	r2, [r1, #30]
   14c90:	b292      	uxth	r2, r2
   14c92:	82ca      	strh	r2, [r1, #22]
   14c94:	2100      	movs	r1, #0
   14c96:	4a0d      	ldr	r2, [pc, #52]	; (14ccc <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
   14c98:	6419      	str	r1, [r3, #64]	; 0x40
   14c9a:	76d0      	strb	r0, [r2, #27]
   14c9c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   14ca0:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
   14ca2:	4623      	mov	r3, r4
   14ca4:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   14ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
   14caa:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
   14cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
   14cb0:	f002 bb0e 	b.w	172d0 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
   14cb4:	8be9      	ldrh	r1, [r5, #30]
   14cb6:	f3c2 0e08 	ubfx	lr, r2, #0, #9
   14cba:	b292      	uxth	r2, r2
   14cbc:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
   14cc0:	ea41 010e 	orr.w	r1, r1, lr
   14cc4:	83e9      	strh	r1, [r5, #30]
   14cc6:	e7d4      	b.n	14c72 <_spi_dma_rxISR0()+0x76>
   14cc8:	200036d8 	.word	0x200036d8
   14ccc:	400e8000 	.word	0x400e8000
   14cd0:	ffff8001 	.word	0xffff8001
   14cd4:	00014be5 	.word	0x00014be5

00014cd8 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
   14cd8:	6843      	ldr	r3, [r0, #4]
{
   14cda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
   14cde:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
   14ce2:	4d81      	ldr	r5, [pc, #516]	; (14ee8 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
   14ce4:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
   14ce8:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
   14cea:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
   14cee:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
   14cf2:	497e      	ldr	r1, [pc, #504]	; (14eec <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
   14cf4:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
   14cf6:	69aa      	ldr	r2, [r5, #24]
   14cf8:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
   14cfa:	4a7d      	ldr	r2, [pc, #500]	; (14ef0 <SPIClass::begin()+0x218>)
   14cfc:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
   14cfe:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
   14d00:	f890 e010 	ldrb.w	lr, [r0, #16]
   14d04:	4a7b      	ldr	r2, [pc, #492]	; (14ef4 <SPIClass::begin()+0x21c>)
   14d06:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
   14d0a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
   14d0e:	7c31      	ldrb	r1, [r6, #16]
   14d10:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   14d14:	6889      	ldr	r1, [r1, #8]
   14d16:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
   14d1a:	f890 c011 	ldrb.w	ip, [r0, #17]
   14d1e:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
   14d22:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
   14d26:	f895 1020 	ldrb.w	r1, [r5, #32]
   14d2a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   14d2e:	6889      	ldr	r1, [r1, #8]
   14d30:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
   14d34:	7c81      	ldrb	r1, [r0, #18]
   14d36:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
   14d3a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
   14d3e:	f899 b030 	ldrb.w	fp, [r9, #48]	; 0x30
   14d42:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
   14d46:	f8db b008 	ldr.w	fp, [fp, #8]
   14d4a:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
   14d4e:	f8d4 a000 	ldr.w	sl, [r4]
   14d52:	685f      	ldr	r7, [r3, #4]
   14d54:	ea4a 0a07 	orr.w	sl, sl, r7
   14d58:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
   14d5c:	7c34      	ldrb	r4, [r6, #16]
   14d5e:	f8de e014 	ldr.w	lr, [lr, #20]
   14d62:	eb02 1404 	add.w	r4, r2, r4, lsl #4
   14d66:	6864      	ldr	r4, [r4, #4]
   14d68:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
   14d6c:	f895 4020 	ldrb.w	r4, [r5, #32]
   14d70:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
   14d74:	eb02 1404 	add.w	r4, r2, r4, lsl #4
   14d78:	6864      	ldr	r4, [r4, #4]
   14d7a:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
   14d7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
   14d80:	f899 4030 	ldrb.w	r4, [r9, #48]	; 0x30
   14d84:	eb02 1204 	add.w	r2, r2, r4, lsl #4
   14d88:	6852      	ldr	r2, [r2, #4]
   14d8a:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
   14d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   14d8e:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
   14d92:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
   14d94:	69da      	ldr	r2, [r3, #28]
   14d96:	7e31      	ldrb	r1, [r6, #24]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
   14d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
   14d9a:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
   14d9c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   14da0:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
   14da2:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14da4:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
   14da6:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
   14daa:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
   14dac:	7cc2      	ldrb	r2, [r0, #19]
   14dae:	2a00      	cmp	r2, #0
   14db0:	d031      	beq.n	14e16 <SPIClass::begin()+0x13e>
			__disable_irq();
   14db2:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
   14db4:	7cc3      	ldrb	r3, [r0, #19]
   14db6:	07dc      	lsls	r4, r3, #31
   14db8:	d508      	bpl.n	14dcc <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
   14dba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   14dbe:	6944      	ldr	r4, [r0, #20]
   14dc0:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
   14dc4:	4022      	ands	r2, r4
   14dc6:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
   14dc8:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
   14dcc:	0799      	lsls	r1, r3, #30
   14dce:	d508      	bpl.n	14de2 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
   14dd0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   14dd4:	6984      	ldr	r4, [r0, #24]
   14dd6:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
   14dda:	4022      	ands	r2, r4
   14ddc:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
   14dde:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
   14de2:	075a      	lsls	r2, r3, #29
   14de4:	d508      	bpl.n	14df8 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
   14de6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   14dea:	69c4      	ldr	r4, [r0, #28]
   14dec:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
   14df0:	4022      	ands	r2, r4
   14df2:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
   14df4:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
   14df8:	071f      	lsls	r7, r3, #28
   14dfa:	d508      	bpl.n	14e0e <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
   14dfc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   14e00:	6a04      	ldr	r4, [r0, #32]
   14e02:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
   14e06:	4022      	ands	r2, r4
   14e08:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
   14e0a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
   14e0e:	06de      	lsls	r6, r3, #27
   14e10:	d455      	bmi.n	14ebe <SPIClass::begin()+0x1e6>
			__enable_irq();
   14e12:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14e14:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
   14e16:	4c38      	ldr	r4, [pc, #224]	; (14ef8 <SPIClass::begin()+0x220>)
   14e18:	6882      	ldr	r2, [r0, #8]
   14e1a:	42a2      	cmp	r2, r4
   14e1c:	d059      	beq.n	14ed2 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
   14e1e:	4a32      	ldr	r2, [pc, #200]	; (14ee8 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
   14e20:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
   14e22:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   14e24:	4935      	ldr	r1, [pc, #212]	; (14efc <SPIClass::begin()+0x224>)
   14e26:	f3c2 1601 	ubfx	r6, r2, #4, #2
   14e2a:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
   14e2e:	4d34      	ldr	r5, [pc, #208]	; (14f00 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   14e30:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
   14e34:	3201      	adds	r2, #1
   14e36:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
   14e3a:	42aa      	cmp	r2, r5
   14e3c:	d831      	bhi.n	14ea2 <SPIClass::begin()+0x1ca>
   14e3e:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   14e40:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
   14e42:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   14e44:	2103      	movs	r1, #3
		port().CR = 0;
   14e46:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
   14e48:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   14e4a:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
   14e4c:	2101      	movs	r1, #1
		port().CCR = _ccr;
   14e4e:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
   14e50:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
   14e52:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
   14e54:	7cc3      	ldrb	r3, [r0, #19]
   14e56:	b313      	cbz	r3, 14e9e <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   14e58:	07dd      	lsls	r5, r3, #31
   14e5a:	d504      	bpl.n	14e66 <SPIClass::begin()+0x18e>
   14e5c:	6a81      	ldr	r1, [r0, #40]	; 0x28
   14e5e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14e62:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   14e66:	079c      	lsls	r4, r3, #30
   14e68:	d504      	bpl.n	14e74 <SPIClass::begin()+0x19c>
   14e6a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   14e6c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14e70:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   14e74:	0759      	lsls	r1, r3, #29
   14e76:	d504      	bpl.n	14e82 <SPIClass::begin()+0x1aa>
   14e78:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14e7a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14e7e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   14e82:	071a      	lsls	r2, r3, #28
   14e84:	d504      	bpl.n	14e90 <SPIClass::begin()+0x1b8>
   14e86:	6b41      	ldr	r1, [r0, #52]	; 0x34
   14e88:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14e8c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   14e90:	06db      	lsls	r3, r3, #27
   14e92:	d504      	bpl.n	14e9e <SPIClass::begin()+0x1c6>
   14e94:	6b82      	ldr	r2, [r0, #56]	; 0x38
   14e96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   14e9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   14e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
   14ea2:	4918      	ldr	r1, [pc, #96]	; (14f04 <SPIClass::begin()+0x22c>)
   14ea4:	fba1 5102 	umull	r5, r1, r1, r2
   14ea8:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
   14eaa:	fbb2 f2f1 	udiv	r2, r2, r1
   14eae:	42a2      	cmp	r2, r4
   14eb0:	bf88      	it	hi
   14eb2:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
   14eb4:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   14eb8:	d30d      	bcc.n	14ed6 <SPIClass::begin()+0x1fe>
   14eba:	4a13      	ldr	r2, [pc, #76]	; (14f08 <SPIClass::begin()+0x230>)
				div = d-2;
   14ebc:	e7c0      	b.n	14e40 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
   14ebe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14ec2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   14ec4:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
   14ec8:	400b      	ands	r3, r1
   14eca:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
   14ecc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
   14ed0:	e79f      	b.n	14e12 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
   14ed2:	68c2      	ldr	r2, [r0, #12]
   14ed4:	e7b5      	b.n	14e42 <SPIClass::begin()+0x16a>
			if (d > 2) {
   14ed6:	2902      	cmp	r1, #2
   14ed8:	d9b1      	bls.n	14e3e <SPIClass::begin()+0x166>
				div = d-2;
   14eda:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   14edc:	084c      	lsrs	r4, r1, #1
   14ede:	0222      	lsls	r2, r4, #8
   14ee0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   14ee4:	430a      	orrs	r2, r1
   14ee6:	e7ab      	b.n	14e40 <SPIClass::begin()+0x168>
   14ee8:	400fc000 	.word	0x400fc000
   14eec:	e3ffffcf 	.word	0xe3ffffcf
   14ef0:	08000010 	.word	0x08000010
   14ef4:	20002b88 	.word	0x20002b88
   14ef8:	003d0900 	.word	0x003d0900
   14efc:	20002708 	.word	0x20002708
   14f00:	003d08ff 	.word	0x003d08ff
   14f04:	431bde83 	.word	0x431bde83
   14f08:	007f7fff 	.word	0x007f7fff

00014f0c <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   14f0c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   14f10:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   14f14:	429a      	cmp	r2, r3
   14f16:	d902      	bls.n	14f1e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
   14f18:	4418      	add	r0, r3
   14f1a:	7e80      	ldrb	r0, [r0, #26]
   14f1c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   14f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   14f22:	4770      	bx	lr

00014f24 <TwoWire::flush()>:
	}
   14f24:	4770      	bx	lr
   14f26:	bf00      	nop

00014f28 <TwoWire::write(unsigned char)>:
{
   14f28:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
   14f2a:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
   14f2e:	b178      	cbz	r0, 14f50 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
   14f30:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
   14f34:	2a88      	cmp	r2, #136	; 0x88
   14f36:	d903      	bls.n	14f40 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
   14f38:	2201      	movs	r2, #1
			return 0;
   14f3a:	2000      	movs	r0, #0
   14f3c:	605a      	str	r2, [r3, #4]
   14f3e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
   14f40:	f102 0c01 	add.w	ip, r2, #1
		return 1;
   14f44:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
   14f46:	441a      	add	r2, r3
   14f48:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
   14f4c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
   14f50:	4770      	bx	lr
   14f52:	bf00      	nop

00014f54 <TwoWire::write(unsigned char const*, unsigned int)>:
{
   14f54:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
   14f56:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
   14f5a:	b90c      	cbnz	r4, 14f60 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
   14f5c:	4620      	mov	r0, r4
   14f5e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
   14f60:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
   14f64:	4605      	mov	r5, r0
   14f66:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
   14f6a:	42a2      	cmp	r2, r4
   14f6c:	d80d      	bhi.n	14f8a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
   14f6e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
   14f70:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
   14f74:	4622      	mov	r2, r4
   14f76:	4418      	add	r0, r3
   14f78:	f003 faa8 	bl	184cc <memcpy>
		txBufferLength += quantity;
   14f7c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
   14f80:	4620      	mov	r0, r4
		txBufferLength += quantity;
   14f82:	4423      	add	r3, r4
   14f84:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
   14f88:	bd38      	pop	{r3, r4, r5, pc}
   14f8a:	2201      	movs	r2, #1
   14f8c:	6042      	str	r2, [r0, #4]
   14f8e:	e7ef      	b.n	14f70 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00014f90 <TwoWire::force_clock()>:
{
   14f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14f94:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   14f98:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14f9a:	7e01      	ldrb	r1, [r0, #24]
{
   14f9c:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   14f9e:	7e43      	ldrb	r3, [r0, #25]
{
   14fa0:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14fa2:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   14fa6:	4a38      	ldr	r2, [pc, #224]	; (15088 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   14fa8:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14fac:	4f37      	ldr	r7, [pc, #220]	; (1508c <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14fae:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   14fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   14fb4:	eb02 1501 	add.w	r5, r2, r1, lsl #4
   14fb8:	0109      	lsls	r1, r1, #4
   14fba:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
   14fbc:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   14fc0:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
   14fc4:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   14fc8:	011b      	lsls	r3, r3, #4
   14fca:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
   14fcc:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   14fce:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
   14fd2:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
   14fd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   14fda:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
   14fdc:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
   14fde:	492c      	ldr	r1, [pc, #176]	; (15090 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
   14fe0:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
   14fe2:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   14fe6:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
   14fe8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
   14fec:	686b      	ldr	r3, [r5, #4]
   14fee:	4333      	orrs	r3, r6
   14ff0:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14ff2:	4b28      	ldr	r3, [pc, #160]	; (15094 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
   14ff4:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14ff6:	683a      	ldr	r2, [r7, #0]
   14ff8:	fba3 3202 	umull	r3, r2, r3, r2
   14ffc:	0c92      	lsrs	r2, r2, #18
   14ffe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   15002:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   15004:	684b      	ldr	r3, [r1, #4]
   15006:	1b1b      	subs	r3, r3, r4
   15008:	429a      	cmp	r2, r3
   1500a:	d8fb      	bhi.n	15004 <TwoWire::force_clock()+0x74>
   1500c:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
   15010:	4a1f      	ldr	r2, [pc, #124]	; (15090 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   15012:	f8df e080 	ldr.w	lr, [pc, #128]	; 15094 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
   15016:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
   1501a:	4203      	tst	r3, r0
   1501c:	d002      	beq.n	15024 <TwoWire::force_clock()+0x94>
   1501e:	68ab      	ldr	r3, [r5, #8]
   15020:	4233      	tst	r3, r6
   15022:	d12f      	bne.n	15084 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
   15024:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
   15028:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   1502a:	6839      	ldr	r1, [r7, #0]
   1502c:	fbae 3101 	umull	r3, r1, lr, r1
   15030:	0c89      	lsrs	r1, r1, #18
   15032:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   15036:	6853      	ldr	r3, [r2, #4]
   15038:	1b1b      	subs	r3, r3, r4
   1503a:	4299      	cmp	r1, r3
   1503c:	d8fb      	bhi.n	15036 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
   1503e:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
   15042:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   15044:	6839      	ldr	r1, [r7, #0]
   15046:	fbae 3101 	umull	r3, r1, lr, r1
   1504a:	0c89      	lsrs	r1, r1, #18
   1504c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   15050:	6853      	ldr	r3, [r2, #4]
   15052:	1b1b      	subs	r3, r3, r4
   15054:	4299      	cmp	r1, r3
   15056:	d8fb      	bhi.n	15050 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
   15058:	f1bc 0c01 	subs.w	ip, ip, #1
   1505c:	d1db      	bne.n	15016 <TwoWire::force_clock()+0x86>
	bool ret = false;
   1505e:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   15060:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   15064:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   15066:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
   1506a:	68db      	ldr	r3, [r3, #12]
   1506c:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   15070:	f899 3019 	ldrb.w	r3, [r9, #25]
   15074:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
   15078:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   1507c:	6013      	str	r3, [r2, #0]
}
   1507e:	b003      	add	sp, #12
   15080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
   15084:	2001      	movs	r0, #1
   15086:	e7eb      	b.n	15060 <TwoWire::force_clock()+0xd0>
   15088:	20002b88 	.word	0x20002b88
   1508c:	20003694 	.word	0x20003694
   15090:	e0001000 	.word	0xe0001000
   15094:	431bde83 	.word	0x431bde83

00015098 <TwoWire::wait_idle()>:
	return systick_millis_count;
   15098:	4a0e      	ldr	r2, [pc, #56]	; (150d4 <TwoWire::wait_idle()+0x3c>)
{
   1509a:	b510      	push	{r4, lr}
   1509c:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   1509e:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   150a0:	e005      	b.n	150ae <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
   150a2:	01db      	lsls	r3, r3, #7
   150a4:	d407      	bmi.n	150b6 <TwoWire::wait_idle()+0x1e>
   150a6:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   150a8:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
   150aa:	2b10      	cmp	r3, #16
   150ac:	d808      	bhi.n	150c0 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
   150ae:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
   150b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   150b4:	d1f5      	bne.n	150a2 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
   150b6:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
   150ba:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
   150bc:	6163      	str	r3, [r4, #20]
}
   150be:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
   150c0:	f7ff ff66 	bl	14f90 <TwoWire::force_clock()>
   150c4:	2800      	cmp	r0, #0
   150c6:	d0fa      	beq.n	150be <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
   150c8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
   150cc:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
   150ce:	6163      	str	r3, [r4, #20]
	return true;
   150d0:	e7f5      	b.n	150be <TwoWire::wait_idle()+0x26>
   150d2:	bf00      	nop
   150d4:	20006344 	.word	0x20006344

000150d8 <TwoWire::endTransmission(unsigned char)>:
{
   150d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
   150dc:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   150e0:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
   150e2:	f1ba 0f00 	cmp.w	sl, #0
   150e6:	d04f      	beq.n	15188 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
   150e8:	4681      	mov	r9, r0
   150ea:	4688      	mov	r8, r1
   150ec:	f7ff ffd4 	bl	15098 <TwoWire::wait_idle()>
   150f0:	2800      	cmp	r0, #0
   150f2:	d049      	beq.n	15188 <TwoWire::endTransmission(unsigned char)+0xb0>
   150f4:	4e37      	ldr	r6, [pc, #220]	; (151d4 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
   150f6:	2400      	movs	r4, #0
   150f8:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   150fa:	e018      	b.n	1512e <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
   150fc:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
   150fe:	0519      	lsls	r1, r3, #20
   15100:	d451      	bmi.n	151a6 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
   15102:	04da      	lsls	r2, r3, #19
   15104:	d455      	bmi.n	151b2 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
   15106:	0558      	lsls	r0, r3, #21
   15108:	d459      	bmi.n	151be <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
   1510a:	0499      	lsls	r1, r3, #18
   1510c:	d441      	bmi.n	15192 <TwoWire::endTransmission(unsigned char)+0xba>
   1510e:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
   15110:	1bd2      	subs	r2, r2, r7
   15112:	2a32      	cmp	r2, #50	; 0x32
   15114:	d83d      	bhi.n	15192 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
   15116:	4554      	cmp	r4, sl
   15118:	d907      	bls.n	1512a <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
   1511a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   1511c:	0752      	lsls	r2, r2, #29
   1511e:	d104      	bne.n	1512a <TwoWire::endTransmission(unsigned char)+0x52>
   15120:	059b      	lsls	r3, r3, #22
   15122:	d455      	bmi.n	151d0 <TwoWire::endTransmission(unsigned char)+0xf8>
   15124:	f1b8 0f00 	cmp.w	r8, #0
   15128:	d052      	beq.n	151d0 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
   1512a:	f004 fec5 	bl	19eb8 <yield>
		if (tx_index <= tx_len) {
   1512e:	4554      	cmp	r4, sl
   15130:	d8e4      	bhi.n	150fc <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   15132:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
   15134:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   15136:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
   1513a:	d4df      	bmi.n	150fc <TwoWire::endTransmission(unsigned char)+0x24>
   1513c:	e013      	b.n	15166 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   1513e:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
   15142:	3301      	adds	r3, #1
			while (fifo_used < 4) {
   15144:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   15146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
   1514a:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   1514c:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
   1514e:	d01e      	beq.n	1518e <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
   15150:	458a      	cmp	sl, r1
				fifo_used++;
   15152:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   15156:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
   1515a:	d90e      	bls.n	1517a <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   1515c:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
   15160:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   15162:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
   15164:	d0ca      	beq.n	150fc <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
   15166:	2101      	movs	r1, #1
				if (tx_index == 0) {
   15168:	2c00      	cmp	r4, #0
   1516a:	d0e8      	beq.n	1513e <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   1516c:	4621      	mov	r1, r4
				fifo_used++;
   1516e:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   15170:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
   15172:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   15174:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
   15178:	d8f0      	bhi.n	1515c <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   1517a:	f1b8 0f00 	cmp.w	r8, #0
   1517e:	d0bd      	beq.n	150fc <TwoWire::endTransmission(unsigned char)+0x24>
   15180:	f44f 7300 	mov.w	r3, #512	; 0x200
   15184:	662b      	str	r3, [r5, #96]	; 0x60
					break;
   15186:	e7b9      	b.n	150fc <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
   15188:	2004      	movs	r0, #4
}
   1518a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
   1518e:	2401      	movs	r4, #1
   15190:	e7b4      	b.n	150fc <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   15192:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   15194:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
   15198:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   1519a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1519e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   151a0:	662a      	str	r2, [r5, #96]	; 0x60
}
   151a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   151a6:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
   151a8:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   151aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   151ae:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
   151b0:	e7eb      	b.n	1518a <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   151b2:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
   151b4:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   151b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   151ba:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
   151bc:	e7e5      	b.n	1518a <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   151be:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   151c0:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
   151c4:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   151c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   151ca:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   151cc:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
   151ce:	e7dc      	b.n	1518a <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
   151d0:	2000      	movs	r0, #0
   151d2:	e7da      	b.n	1518a <TwoWire::endTransmission(unsigned char)+0xb2>
   151d4:	20006344 	.word	0x20006344

000151d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
   151d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151dc:	4683      	mov	fp, r0
   151de:	460c      	mov	r4, r1
   151e0:	4615      	mov	r5, r2
   151e2:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   151e4:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
   151e8:	f7ff ff56 	bl	15098 <TwoWire::wait_idle()>
   151ec:	2800      	cmp	r0, #0
   151ee:	f000 809e 	beq.w	1532e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
   151f2:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
   151f4:	2d01      	cmp	r5, #1
   151f6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 15334 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   151fa:	f240 4601 	movw	r6, #1025	; 0x401
   151fe:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
   15200:	f04f 0100 	mov.w	r1, #0
   15204:	bf38      	it	cc
   15206:	2501      	movcc	r5, #1
   15208:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
   1520c:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   1520e:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
   15210:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   15214:	e020      	b.n	15258 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
   15216:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
   1521a:	2b87      	cmp	r3, #135	; 0x87
   1521c:	d93f      	bls.n	1529e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
   1521e:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
   15222:	0510      	lsls	r0, r2, #20
   15224:	d45a      	bmi.n	152dc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
   15226:	f412 5f10 	tst.w	r2, #9216	; 0x2400
   1522a:	d170      	bne.n	1530e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
   1522c:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
   15230:	eba3 0309 	sub.w	r3, r3, r9
   15234:	2b32      	cmp	r3, #50	; 0x32
   15236:	d86a      	bhi.n	1530e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
   15238:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
   1523c:	42ab      	cmp	r3, r5
   1523e:	d309      	bcc.n	15254 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
   15240:	2c02      	cmp	r4, #2
   15242:	d907      	bls.n	15254 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
   15244:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   15248:	0759      	lsls	r1, r3, #29
   1524a:	d103      	bne.n	15254 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
   1524c:	0593      	lsls	r3, r2, #22
   1524e:	d44b      	bmi.n	152e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
   15250:	2f00      	cmp	r7, #0
   15252:	d049      	beq.n	152e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
   15254:	f004 fe30 	bl	19eb8 <yield>
		if (tx_state < 3) {
   15258:	2c02      	cmp	r4, #2
   1525a:	d8dc      	bhi.n	15216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
   1525c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   15260:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
   15264:	075b      	lsls	r3, r3, #29
   15266:	d4d6      	bmi.n	15216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   15268:	1e68      	subs	r0, r5, #1
   1526a:	4422      	add	r2, r4
   1526c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
   15270:	b94c      	cbnz	r4, 15286 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   15272:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
   15276:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
   15278:	1b13      	subs	r3, r2, r4
   1527a:	2b03      	cmp	r3, #3
   1527c:	d8cb      	bhi.n	15216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
   1527e:	2c02      	cmp	r4, #2
   15280:	d8c9      	bhi.n	15216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
   15282:	2c00      	cmp	r4, #0
   15284:	d0f5      	beq.n	15272 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
   15286:	2c01      	cmp	r4, #1
   15288:	d037      	beq.n	152fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   1528a:	b11f      	cbz	r7, 15294 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
   1528c:	f44f 7300 	mov.w	r3, #512	; 0x200
   15290:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
   15294:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
   15298:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
   1529a:	2b87      	cmp	r3, #135	; 0x87
   1529c:	d8bf      	bhi.n	1521e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   1529e:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   152a2:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   152a6:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   152aa:	d0b8      	beq.n	1521e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
   152ac:	1c59      	adds	r1, r3, #1
   152ae:	449c      	add	ip, r3
   152b0:	3319      	adds	r3, #25
   152b2:	b2c9      	uxtb	r1, r1
   152b4:	fa5f fc8c 	uxtb.w	ip, ip
   152b8:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
   152bc:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   152c0:	1c4a      	adds	r2, r1, #1
   152c2:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
   152c4:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   152c8:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
   152ca:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   152ce:	d0a6      	beq.n	1521e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
   152d0:	2989      	cmp	r1, #137	; 0x89
   152d2:	d1f3      	bne.n	152bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
   152d4:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
   152d8:	0510      	lsls	r0, r2, #20
   152da:	d5a4      	bpl.n	15226 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   152dc:	f8da 3010 	ldr.w	r3, [sl, #16]
   152e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   152e4:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   152e8:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   152ec:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   152f0:	d106      	bne.n	15300 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
   152f2:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
   152f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   152fa:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
   152fe:	e7ba      	b.n	15276 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   15300:	f8da 3010 	ldr.w	r3, [sl, #16]
   15304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15308:	f8ca 3010 	str.w	r3, [sl, #16]
   1530c:	e7f1      	b.n	152f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   1530e:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   15312:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   15316:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1531a:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   1531e:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   15322:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   15326:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   1532a:	d0e2      	beq.n	152f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
   1532c:	e7e8      	b.n	15300 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
   1532e:	2004      	movs	r0, #4
}
   15330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15334:	20006344 	.word	0x20006344

00015338 <TwoWire::isr()>:
{
   15338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   1533a:	6906      	ldr	r6, [r0, #16]
{
   1533c:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
   1533e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
   15342:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
   15346:	d001      	beq.n	1534c <TwoWire::isr()+0x14>
   15348:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
   1534c:	07a8      	lsls	r0, r5, #30
   1534e:	d50b      	bpl.n	15368 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
   15350:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
   15354:	0411      	lsls	r1, r2, #16
   15356:	d53d      	bpl.n	153d4 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
   15358:	2300      	movs	r3, #0
   1535a:	2101      	movs	r1, #1
   1535c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
   15360:	4423      	add	r3, r4
   15362:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
   15366:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
   15368:	07ea      	lsls	r2, r5, #31
   1536a:	d510      	bpl.n	1538e <TwoWire::isr()+0x56>
		if (!transmitting) {
   1536c:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
   15370:	b1f7      	cbz	r7, 153b0 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
   15372:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
   15376:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   1537a:	42bb      	cmp	r3, r7
   1537c:	d926      	bls.n	153cc <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
   1537e:	1c7b      	adds	r3, r7, #1
   15380:	4427      	add	r7, r4
   15382:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
   15386:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
   1538a:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
   1538e:	05ab      	lsls	r3, r5, #22
   15390:	d50d      	bpl.n	153ae <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
   15392:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
   15396:	b118      	cbz	r0, 153a0 <TwoWire::isr()+0x68>
   15398:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1539c:	b103      	cbz	r3, 153a0 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
   1539e:	4798      	blx	r3
		rxBufferIndex = 0;
   153a0:	2300      	movs	r3, #0
   153a2:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
   153a6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
   153aa:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
   153ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
   153b0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   153b4:	b103      	cbz	r3, 153b8 <TwoWire::isr()+0x80>
				(*user_onRequest)();
   153b6:	4798      	blx	r3
			txBufferIndex = 0;
   153b8:	2300      	movs	r3, #0
   153ba:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
   153be:	2301      	movs	r3, #1
   153c0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
   153c4:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   153c8:	42bb      	cmp	r3, r7
   153ca:	d8d8      	bhi.n	1537e <TwoWire::isr()+0x46>
			port->STDR = 0;
   153cc:	2300      	movs	r3, #0
   153ce:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
   153d2:	e7dc      	b.n	1538e <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
   153d4:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
   153d8:	2b87      	cmp	r3, #135	; 0x87
   153da:	d8c5      	bhi.n	15368 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
   153dc:	1c59      	adds	r1, r3, #1
   153de:	b2c9      	uxtb	r1, r1
   153e0:	e7be      	b.n	15360 <TwoWire::isr()+0x28>
   153e2:	bf00      	nop

000153e4 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
   153e4:	4801      	ldr	r0, [pc, #4]	; (153ec <lpi2c1_isr()+0x8>)
   153e6:	f7ff bfa7 	b.w	15338 <TwoWire::isr()>
   153ea:	bf00      	nop
   153ec:	20003858 	.word	0x20003858

000153f0 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire2.isr(); }
   153f0:	4801      	ldr	r0, [pc, #4]	; (153f8 <lpi2c3_isr()+0x8>)
   153f2:	f7ff bfa1 	b.w	15338 <TwoWire::isr()>
   153f6:	bf00      	nop
   153f8:	20003ad8 	.word	0x20003ad8

000153fc <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire1.isr(); }
   153fc:	4801      	ldr	r0, [pc, #4]	; (15404 <lpi2c4_isr()+0x8>)
   153fe:	f7ff bf9b 	b.w	15338 <TwoWire::isr()>
   15402:	bf00      	nop
   15404:	20003998 	.word	0x20003998

00015408 <lpi2c2_isr()>:
void lpi2c2_isr(void) { Wire3.isr(); }
   15408:	4801      	ldr	r0, [pc, #4]	; (15410 <lpi2c2_isr()+0x8>)
   1540a:	f7ff bf95 	b.w	15338 <TwoWire::isr()>
   1540e:	bf00      	nop
   15410:	20003c18 	.word	0x20003c18

00015414 <TMC2130Stepper::hstrt(unsigned char)>:
void TMC2130Stepper::hstrt(		uint8_t B )	{ SET_REG(hstrt);	}
   15414:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   15418:	b410      	push	{r4}
   1541a:	460c      	mov	r4, r1
   1541c:	216c      	movs	r1, #108	; 0x6c
   1541e:	f364 1206 	bfi	r2, r4, #4, #3
   15422:	6804      	ldr	r4, [r0, #0]
   15424:	6824      	ldr	r4, [r4, #0]
   15426:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
   1542a:	4623      	mov	r3, r4
   1542c:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   15430:	f85d 4b04 	ldr.w	r4, [sp], #4
   15434:	4718      	bx	r3
   15436:	bf00      	nop

00015438 <TMC2130Stepper::hend(unsigned char)>:
void TMC2130Stepper::hend(		uint8_t B )	{ SET_REG(hend);	}
   15438:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
   1543c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
   15440:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   15444:	f022 0207 	bic.w	r2, r2, #7
   15448:	b410      	push	{r4}
   1544a:	f001 0401 	and.w	r4, r1, #1
   1544e:	f3c1 0142 	ubfx	r1, r1, #1, #3
   15452:	ea4c 1cc4 	orr.w	ip, ip, r4, lsl #7
   15456:	430a      	orrs	r2, r1
   15458:	6804      	ldr	r4, [r0, #0]
   1545a:	216c      	movs	r1, #108	; 0x6c
   1545c:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
   15460:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
   15464:	6824      	ldr	r4, [r4, #0]
   15466:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   1546a:	4623      	mov	r3, r4
   1546c:	f85d 4b04 	ldr.w	r4, [sp], #4
   15470:	4718      	bx	r3
   15472:	bf00      	nop

00015474 <TMC2130Stepper::tbl(unsigned char)>:
void TMC2130Stepper::tbl(		uint8_t B )	{ SET_REG(tbl);		}
   15474:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
   15478:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
   1547c:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   15480:	f022 0201 	bic.w	r2, r2, #1
   15484:	b410      	push	{r4}
   15486:	f001 0401 	and.w	r4, r1, #1
   1548a:	f3c1 0140 	ubfx	r1, r1, #1, #1
   1548e:	ea4c 1cc4 	orr.w	ip, ip, r4, lsl #7
   15492:	430a      	orrs	r2, r1
   15494:	6804      	ldr	r4, [r0, #0]
   15496:	216c      	movs	r1, #108	; 0x6c
   15498:	f880 c026 	strb.w	ip, [r0, #38]	; 0x26
   1549c:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
   154a0:	6824      	ldr	r4, [r4, #0]
   154a2:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   154a6:	4623      	mov	r3, r4
   154a8:	f85d 4b04 	ldr.w	r4, [sp], #4
   154ac:	4718      	bx	r3
   154ae:	bf00      	nop

000154b0 <TMC2130Stepper::vsense(bool)>:
void TMC2130Stepper::vsense(	bool 	B )	{ SET_REG(vsense);	}
   154b0:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
   154b4:	b410      	push	{r4}
   154b6:	460c      	mov	r4, r1
   154b8:	216c      	movs	r1, #108	; 0x6c
   154ba:	f364 0241 	bfi	r2, r4, #1, #1
   154be:	6804      	ldr	r4, [r0, #0]
   154c0:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
   154c4:	6824      	ldr	r4, [r4, #0]
   154c6:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   154ca:	4623      	mov	r3, r4
   154cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   154d0:	4718      	bx	r3
   154d2:	bf00      	nop

000154d4 <TMC2130Stepper::mres(unsigned char)>:
void TMC2130Stepper::mres(		uint8_t B )	{ SET_REG(mres);	}
   154d4:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   154d8:	b410      	push	{r4}
   154da:	460c      	mov	r4, r1
   154dc:	216c      	movs	r1, #108	; 0x6c
   154de:	f364 0203 	bfi	r2, r4, #0, #4
   154e2:	6804      	ldr	r4, [r0, #0]
   154e4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   154e8:	6824      	ldr	r4, [r4, #0]
   154ea:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   154ee:	4623      	mov	r3, r4
   154f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   154f4:	4718      	bx	r3
   154f6:	bf00      	nop

000154f8 <TMC2130Stepper::hstrt()>:
	return read(CHOPCONF_register.address);
   154f8:	6803      	ldr	r3, [r0, #0]
   154fa:	216c      	movs	r1, #108	; 0x6c
uint8_t TMC2130Stepper::hstrt()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;	}
   154fc:	b500      	push	{lr}
	return read(CHOPCONF_register.address);
   154fe:	685b      	ldr	r3, [r3, #4]
uint8_t TMC2130Stepper::hstrt()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;	}
   15500:	b083      	sub	sp, #12
	return read(CHOPCONF_register.address);
   15502:	4798      	blx	r3
uint8_t TMC2130Stepper::hstrt()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;	}
   15504:	f3c0 1002 	ubfx	r0, r0, #4, #3
   15508:	b003      	add	sp, #12
   1550a:	f85d fb04 	ldr.w	pc, [sp], #4
   1550e:	bf00      	nop

00015510 <TMC2130Stepper::hend()>:
	return read(CHOPCONF_register.address);
   15510:	6803      	ldr	r3, [r0, #0]
   15512:	216c      	movs	r1, #108	; 0x6c
uint8_t TMC2130Stepper::hend()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;	}
   15514:	b500      	push	{lr}
	return read(CHOPCONF_register.address);
   15516:	685b      	ldr	r3, [r3, #4]
uint8_t TMC2130Stepper::hend()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;	}
   15518:	b083      	sub	sp, #12
	return read(CHOPCONF_register.address);
   1551a:	4798      	blx	r3
uint8_t TMC2130Stepper::hend()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;	}
   1551c:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   15520:	b003      	add	sp, #12
   15522:	f85d fb04 	ldr.w	pc, [sp], #4
   15526:	bf00      	nop

00015528 <TMC2130Stepper::tbl()>:
	return read(CHOPCONF_register.address);
   15528:	6803      	ldr	r3, [r0, #0]
   1552a:	216c      	movs	r1, #108	; 0x6c
uint8_t TMC2130Stepper::tbl()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;		}
   1552c:	b500      	push	{lr}
	return read(CHOPCONF_register.address);
   1552e:	685b      	ldr	r3, [r3, #4]
uint8_t TMC2130Stepper::tbl()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;		}
   15530:	b083      	sub	sp, #12
	return read(CHOPCONF_register.address);
   15532:	4798      	blx	r3
uint8_t TMC2130Stepper::tbl()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;		}
   15534:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   15538:	b003      	add	sp, #12
   1553a:	f85d fb04 	ldr.w	pc, [sp], #4
   1553e:	bf00      	nop

00015540 <TMC2130Stepper::vsense()>:
	return read(CHOPCONF_register.address);
   15540:	6803      	ldr	r3, [r0, #0]
   15542:	216c      	movs	r1, #108	; 0x6c
bool 	TMC2130Stepper::vsense()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;	}
   15544:	b500      	push	{lr}
	return read(CHOPCONF_register.address);
   15546:	685b      	ldr	r3, [r3, #4]
bool 	TMC2130Stepper::vsense()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;	}
   15548:	b083      	sub	sp, #12
	return read(CHOPCONF_register.address);
   1554a:	4798      	blx	r3
bool 	TMC2130Stepper::vsense()	{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;	}
   1554c:	f3c0 4040 	ubfx	r0, r0, #17, #1
   15550:	b003      	add	sp, #12
   15552:	f85d fb04 	ldr.w	pc, [sp], #4
   15556:	bf00      	nop

00015558 <TMC2130Stepper::mres()>:
	return read(CHOPCONF_register.address);
   15558:	6803      	ldr	r3, [r0, #0]
   1555a:	216c      	movs	r1, #108	; 0x6c
uint8_t TMC2130Stepper::mres()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;	}
   1555c:	b500      	push	{lr}
	return read(CHOPCONF_register.address);
   1555e:	685b      	ldr	r3, [r3, #4]
uint8_t TMC2130Stepper::mres()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;	}
   15560:	b083      	sub	sp, #12
	return read(CHOPCONF_register.address);
   15562:	4798      	blx	r3
uint8_t TMC2130Stepper::mres()		{ CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;	}
   15564:	f3c0 6003 	ubfx	r0, r0, #24, #4
   15568:	b003      	add	sp, #12
   1556a:	f85d fb04 	ldr.w	pc, [sp], #4
   1556e:	bf00      	nop

00015570 <TMC2130Stepper::CHOPCONF(unsigned long)>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
   15570:	b410      	push	{r4}
	write(CHOPCONF_register.address, CHOPCONF_register.sr);
   15572:	6804      	ldr	r4, [r0, #0]
   15574:	460a      	mov	r2, r1
	CHOPCONF_register.sr = input;
   15576:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
	write(CHOPCONF_register.address, CHOPCONF_register.sr);
   1557a:	216c      	movs	r1, #108	; 0x6c
   1557c:	6823      	ldr	r3, [r4, #0]
}
   1557e:	f85d 4b04 	ldr.w	r4, [sp], #4
	write(CHOPCONF_register.address, CHOPCONF_register.sr);
   15582:	4718      	bx	r3

00015584 <TMC2130Stepper::toff(unsigned char)>:
void TMC2130Stepper::toff(		uint8_t B )	{ SET_REG(toff);	}
   15584:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   15588:	b410      	push	{r4}
   1558a:	460c      	mov	r4, r1
   1558c:	216c      	movs	r1, #108	; 0x6c
   1558e:	f364 0203 	bfi	r2, r4, #0, #4
   15592:	6804      	ldr	r4, [r0, #0]
   15594:	6824      	ldr	r4, [r4, #0]
   15596:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
   1559a:	4623      	mov	r3, r4
   1559c:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   155a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   155a4:	4718      	bx	r3
   155a6:	bf00      	nop

000155a8 <TMC2130Stepper::intpol(bool)>:
void TMC2130Stepper::intpol(	bool 	B )	{ SET_REG(intpol);	}
   155a8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   155ac:	b410      	push	{r4}
   155ae:	460c      	mov	r4, r1
   155b0:	216c      	movs	r1, #108	; 0x6c
   155b2:	f364 1204 	bfi	r2, r4, #4, #1
   155b6:	6804      	ldr	r4, [r0, #0]
   155b8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
   155bc:	6824      	ldr	r4, [r4, #0]
   155be:	f8d0 2025 	ldr.w	r2, [r0, #37]	; 0x25
   155c2:	4623      	mov	r3, r4
   155c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   155c8:	4718      	bx	r3
   155ca:	bf00      	nop

000155cc <TMC2660Stepper::toff(unsigned char)>:
void TMC2660Stepper::CHOPCONF(uint32_t data) {
  CHOPCONF_register.sr = data;
  write(CHOPCONF_register.address, CHOPCONF_register.sr);
}

void TMC2660Stepper::toff(uint8_t B) 	{
   155cc:	b538      	push	{r3, r4, r5, lr}
   155ce:	460d      	mov	r5, r1
	SET_REG(toff);
   155d0:	7a43      	ldrb	r3, [r0, #9]
   155d2:	2104      	movs	r1, #4
void TMC2660Stepper::toff(uint8_t B) 	{
   155d4:	4604      	mov	r4, r0
	SET_REG(toff);
   155d6:	f365 0303 	bfi	r3, r5, #0, #4
   155da:	7243      	strb	r3, [r0, #9]
   155dc:	f8d0 2009 	ldr.w	r2, [r0, #9]
   155e0:	f000 fdde 	bl	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
	if (B>0) _savedToff = B;
   155e4:	b10d      	cbz	r5, 155ea <TMC2660Stepper::toff(unsigned char)+0x1e>
   155e6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
   155ea:	bd38      	pop	{r3, r4, r5, pc}

000155ec <TMC2660Stepper::hstrt(unsigned char)>:
void TMC2660Stepper::hstrt(uint8_t B) 	{ SET_REG(hstrt); 	}
   155ec:	468c      	mov	ip, r1
   155ee:	7a42      	ldrb	r2, [r0, #9]
   155f0:	2104      	movs	r1, #4
   155f2:	f36c 1206 	bfi	r2, ip, #4, #3
   155f6:	7242      	strb	r2, [r0, #9]
   155f8:	f8d0 2009 	ldr.w	r2, [r0, #9]
   155fc:	f000 bdd0 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>

00015600 <TMC2660Stepper::hend(unsigned char)>:
void TMC2660Stepper::hend(uint8_t B) 	{ SET_REG(hend);	}
   15600:	f890 c009 	ldrb.w	ip, [r0, #9]
   15604:	7a82      	ldrb	r2, [r0, #10]
   15606:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1560a:	f022 0207 	bic.w	r2, r2, #7
   1560e:	b500      	push	{lr}
   15610:	f001 0e01 	and.w	lr, r1, #1
   15614:	f3c1 0142 	ubfx	r1, r1, #1, #3
   15618:	ea4c 1cce 	orr.w	ip, ip, lr, lsl #7
   1561c:	430a      	orrs	r2, r1
   1561e:	f85d eb04 	ldr.w	lr, [sp], #4
   15622:	2104      	movs	r1, #4
   15624:	f880 c009 	strb.w	ip, [r0, #9]
   15628:	7282      	strb	r2, [r0, #10]
   1562a:	f8d0 2009 	ldr.w	r2, [r0, #9]
   1562e:	f000 bdb7 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
   15632:	bf00      	nop

00015634 <TMC2660Stepper::rndtf(bool)>:
void TMC2660Stepper::hdec(uint8_t B) 	{ SET_REG(hdec);	}
void TMC2660Stepper::rndtf(bool B) 	{ SET_REG(rndtf);	}
   15634:	468c      	mov	ip, r1
   15636:	7a82      	ldrb	r2, [r0, #10]
   15638:	2104      	movs	r1, #4
   1563a:	f36c 1245 	bfi	r2, ip, #5, #1
   1563e:	7282      	strb	r2, [r0, #10]
   15640:	f8d0 2009 	ldr.w	r2, [r0, #9]
   15644:	f000 bdac 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>

00015648 <TMC2660Stepper::chm(bool)>:
void TMC2660Stepper::chm(bool B) 	{ SET_REG(chm);	}
   15648:	468c      	mov	ip, r1
   1564a:	7a82      	ldrb	r2, [r0, #10]
   1564c:	2104      	movs	r1, #4
   1564e:	f36c 1286 	bfi	r2, ip, #6, #1
   15652:	7282      	strb	r2, [r0, #10]
   15654:	f8d0 2009 	ldr.w	r2, [r0, #9]
   15658:	f000 bda2 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>

0001565c <TMC2660Stepper::tbl(unsigned char)>:
void TMC2660Stepper::tbl(uint8_t B) 	{ SET_REG(tbl);	}
   1565c:	f890 c00a 	ldrb.w	ip, [r0, #10]
   15660:	7ac2      	ldrb	r2, [r0, #11]
   15662:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   15666:	f022 0201 	bic.w	r2, r2, #1
   1566a:	b500      	push	{lr}
   1566c:	f001 0e01 	and.w	lr, r1, #1
   15670:	f3c1 0140 	ubfx	r1, r1, #1, #1
   15674:	ea4c 1cce 	orr.w	ip, ip, lr, lsl #7
   15678:	430a      	orrs	r2, r1
   1567a:	f85d eb04 	ldr.w	lr, [sp], #4
   1567e:	2104      	movs	r1, #4
   15680:	f880 c00a 	strb.w	ip, [r0, #10]
   15684:	72c2      	strb	r2, [r0, #11]
   15686:	f8d0 2009 	ldr.w	r2, [r0, #9]
   1568a:	f000 bd89 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
   1568e:	bf00      	nop

00015690 <TMC2130Stepper::COOLCONF(unsigned long)>:
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
	COOLCONF_register.sr = input;
   15690:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
   15694:	f3c1 2c07 	ubfx	ip, r1, #8, #8
   15698:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
   1569c:	f022 0201 	bic.w	r2, r2, #1
   156a0:	f880 c02a 	strb.w	ip, [r0, #42]	; 0x2a
   156a4:	f3c1 4c07 	ubfx	ip, r1, #16, #8
void TMC2130Stepper::COOLCONF(uint32_t input) {
   156a8:	b410      	push	{r4}
	COOLCONF_register.sr = input;
   156aa:	f3c1 6400 	ubfx	r4, r1, #24, #1
   156ae:	4322      	orrs	r2, r4
	write(COOLCONF_register.address, COOLCONF_register.sr);
   156b0:	6804      	ldr	r4, [r0, #0]
   156b2:	6824      	ldr	r4, [r4, #0]
	COOLCONF_register.sr = input;
   156b4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
   156b8:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
   156bc:	4623      	mov	r3, r4
   156be:	216d      	movs	r1, #109	; 0x6d
}
   156c0:	f85d 4b04 	ldr.w	r4, [sp], #4
	COOLCONF_register.sr = input;
   156c4:	f880 c02b 	strb.w	ip, [r0, #43]	; 0x2b
	write(COOLCONF_register.address, COOLCONF_register.sr);
   156c8:	4718      	bx	r3
   156ca:	bf00      	nop

000156cc <TMC2660Stepper::vsense(bool)>:
void TMC2660Stepper::slph(uint8_t B)  { SET_REG(slph);	}
void TMC2660Stepper::slpl(uint8_t B)  { SET_REG(slpl);	}
void TMC2660Stepper::diss2g(bool B)   { SET_REG(diss2g);}
void TMC2660Stepper::ts2g(uint8_t B)  { SET_REG(ts2g);	}
void TMC2660Stepper::sdoff(bool B)    { SET_REG(sdoff);	}
void TMC2660Stepper::vsense(bool B)   { SET_REG(vsense);}
   156cc:	468c      	mov	ip, r1
   156ce:	7d42      	ldrb	r2, [r0, #21]
   156d0:	2107      	movs	r1, #7
   156d2:	f36c 1286 	bfi	r2, ip, #6, #1
   156d6:	7542      	strb	r2, [r0, #21]
   156d8:	f8d0 2015 	ldr.w	r2, [r0, #21]
   156dc:	f000 bd60 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>

000156e0 <TMC2660Stepper::sdoff()>:
bool	 TMC2660Stepper::tst()		{ GET_REG(tst);		}
uint8_t	 TMC2660Stepper::slph()		{ GET_REG(slph);	}
uint8_t	 TMC2660Stepper::slpl()		{ GET_REG(slpl);	}
bool	 TMC2660Stepper::diss2g()	{ GET_REG(diss2g);	}
uint8_t	 TMC2660Stepper::ts2g()		{ GET_REG(ts2g);	}
bool	 TMC2660Stepper::sdoff()	{ GET_REG(sdoff);	}
   156e0:	7d40      	ldrb	r0, [r0, #21]
   156e2:	09c0      	lsrs	r0, r0, #7
   156e4:	4770      	bx	lr
   156e6:	bf00      	nop

000156e8 <TMC2660Stepper::rdsel()>:
bool	 TMC2660Stepper::vsense()	{ GET_REG(vsense);	}
uint8_t	 TMC2660Stepper::rdsel()	{ GET_REG(rdsel);	}
   156e8:	7d40      	ldrb	r0, [r0, #21]
   156ea:	f3c0 1001 	ubfx	r0, r0, #4, #2
   156ee:	4770      	bx	lr

000156f0 <TMC2660Stepper::intpol(bool)>:
uint8_t TMC2660Stepper::ca()  { if(sdoff() == 0) sdoff(1); GET_REG1(ca);  }
bool TMC2660Stepper::phb()    { if(sdoff() == 0) sdoff(1); GET_REG1(phb); }
uint8_t TMC2660Stepper::cb()  { if(sdoff() == 0) sdoff(1); GET_REG1(cb);  }

// DRVCTRL (STEP/DIR)
void TMC2660Stepper::intpol(bool B) { if(sdoff()) return; SET_REG0(intpol); }
   156f0:	b570      	push	{r4, r5, r6, lr}
   156f2:	4604      	mov	r4, r0
   156f4:	460e      	mov	r6, r1
   156f6:	f7ff fff3 	bl	156e0 <TMC2660Stepper::sdoff()>
   156fa:	b100      	cbz	r0, 156fe <TMC2660Stepper::intpol(bool)+0xe>
   156fc:	bd70      	pop	{r4, r5, r6, pc}
   156fe:	79a3      	ldrb	r3, [r4, #6]
   15700:	4605      	mov	r5, r0
	if(sdoff() == 1) {
   15702:	4620      	mov	r0, r4
void TMC2660Stepper::intpol(bool B) { if(sdoff()) return; SET_REG0(intpol); }
   15704:	f366 0341 	bfi	r3, r6, #1, #1
   15708:	71a3      	strb	r3, [r4, #6]
   1570a:	f8d4 6005 	ldr.w	r6, [r4, #5]
	if(sdoff() == 1) {
   1570e:	f7ff ffe7 	bl	156e0 <TMC2660Stepper::sdoff()>
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   15712:	4632      	mov	r2, r6
	if(sdoff() == 1) {
   15714:	b138      	cbz	r0, 15726 <TMC2660Stepper::intpol(bool)+0x36>
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   15716:	4629      	mov	r1, r5
   15718:	4620      	mov	r0, r4
		DRVCTRL_1_register.sr = data;
   1571a:	f8c4 6001 	str.w	r6, [r4, #1]
void TMC2660Stepper::intpol(bool B) { if(sdoff()) return; SET_REG0(intpol); }
   1571e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   15722:	f000 bd3d 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   15726:	4601      	mov	r1, r0
		DRVCTRL_0_register.sr = data;
   15728:	f8c4 6005 	str.w	r6, [r4, #5]
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   1572c:	4620      	mov	r0, r4
void TMC2660Stepper::intpol(bool B) { if(sdoff()) return; SET_REG0(intpol); }
   1572e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   15732:	f000 bd35 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
   15736:	bf00      	nop

00015738 <TMC2660Stepper::dedge(bool)>:
void TMC2660Stepper::dedge(bool B)  { if(sdoff()) return; SET_REG0(dedge);  }
   15738:	b570      	push	{r4, r5, r6, lr}
   1573a:	4604      	mov	r4, r0
   1573c:	460e      	mov	r6, r1
   1573e:	f7ff ffcf 	bl	156e0 <TMC2660Stepper::sdoff()>
   15742:	b100      	cbz	r0, 15746 <TMC2660Stepper::dedge(bool)+0xe>
   15744:	bd70      	pop	{r4, r5, r6, pc}
   15746:	79a3      	ldrb	r3, [r4, #6]
   15748:	4605      	mov	r5, r0
	if(sdoff() == 1) {
   1574a:	4620      	mov	r0, r4
void TMC2660Stepper::dedge(bool B)  { if(sdoff()) return; SET_REG0(dedge);  }
   1574c:	f366 0300 	bfi	r3, r6, #0, #1
   15750:	71a3      	strb	r3, [r4, #6]
   15752:	f8d4 6005 	ldr.w	r6, [r4, #5]
	if(sdoff() == 1) {
   15756:	f7ff ffc3 	bl	156e0 <TMC2660Stepper::sdoff()>
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   1575a:	4632      	mov	r2, r6
	if(sdoff() == 1) {
   1575c:	b138      	cbz	r0, 1576e <TMC2660Stepper::dedge(bool)+0x36>
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   1575e:	4629      	mov	r1, r5
   15760:	4620      	mov	r0, r4
		DRVCTRL_1_register.sr = data;
   15762:	f8c4 6001 	str.w	r6, [r4, #1]
void TMC2660Stepper::dedge(bool B)  { if(sdoff()) return; SET_REG0(dedge);  }
   15766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   1576a:	f000 bd19 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   1576e:	4601      	mov	r1, r0
		DRVCTRL_0_register.sr = data;
   15770:	f8c4 6005 	str.w	r6, [r4, #5]
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   15774:	4620      	mov	r0, r4
void TMC2660Stepper::dedge(bool B)  { if(sdoff()) return; SET_REG0(dedge);  }
   15776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   1577a:	f000 bd11 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
   1577e:	bf00      	nop

00015780 <TMC2660Stepper::mres(unsigned char)>:
void TMC2660Stepper::mres(uint8_t B){ if(sdoff()) return; SET_REG0(mres);   }
   15780:	b570      	push	{r4, r5, r6, lr}
   15782:	4604      	mov	r4, r0
   15784:	460e      	mov	r6, r1
   15786:	f7ff ffab 	bl	156e0 <TMC2660Stepper::sdoff()>
   1578a:	b100      	cbz	r0, 1578e <TMC2660Stepper::mres(unsigned char)+0xe>
   1578c:	bd70      	pop	{r4, r5, r6, pc}
   1578e:	7963      	ldrb	r3, [r4, #5]
   15790:	4605      	mov	r5, r0
	if(sdoff() == 1) {
   15792:	4620      	mov	r0, r4
void TMC2660Stepper::mres(uint8_t B){ if(sdoff()) return; SET_REG0(mres);   }
   15794:	f366 0303 	bfi	r3, r6, #0, #4
   15798:	7163      	strb	r3, [r4, #5]
   1579a:	f8d4 6005 	ldr.w	r6, [r4, #5]
	if(sdoff() == 1) {
   1579e:	f7ff ff9f 	bl	156e0 <TMC2660Stepper::sdoff()>
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   157a2:	4632      	mov	r2, r6
	if(sdoff() == 1) {
   157a4:	b138      	cbz	r0, 157b6 <TMC2660Stepper::mres(unsigned char)+0x36>
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   157a6:	4629      	mov	r1, r5
   157a8:	4620      	mov	r0, r4
		DRVCTRL_1_register.sr = data;
   157aa:	f8c4 6001 	str.w	r6, [r4, #1]
void TMC2660Stepper::mres(uint8_t B){ if(sdoff()) return; SET_REG0(mres);   }
   157ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		write(DRVCTRL_1_register.address, DRVCTRL_1_register.sr);
   157b2:	f000 bcf5 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   157b6:	4601      	mov	r1, r0
		DRVCTRL_0_register.sr = data;
   157b8:	f8c4 6005 	str.w	r6, [r4, #5]
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   157bc:	4620      	mov	r0, r4
void TMC2660Stepper::mres(uint8_t B){ if(sdoff()) return; SET_REG0(mres);   }
   157be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		write(DRVCTRL_0_register.address, DRVCTRL_0_register.sr);
   157c2:	f000 bced 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>
   157c6:	bf00      	nop

000157c8 <TMC2660Stepper::DRVSTATUS()>:

#define GET_REG00(SETTING) DRVSTATUS(); return READ_RDSEL00_register.SETTING
#define GET_REG01(SETTING) DRVSTATUS(); return READ_RDSEL01_register.SETTING
#define GET_REG10(SETTING) DRVSTATUS(); return READ_RDSEL10_register.SETTING

uint32_t TMC2660Stepper::DRVSTATUS() {
   157c8:	b570      	push	{r4, r5, r6, lr}
   157ca:	4604      	mov	r4, r0
	uint32_t response = read()&0xFFCFF;
   157cc:	f000 fc5e 	bl	1608c <TMC2660Stepper::read()>
   157d0:	4605      	mov	r5, r0
   157d2:	4e17      	ldr	r6, [pc, #92]	; (15830 <TMC2660Stepper::DRVSTATUS()+0x68>)
	READ_RDSEL00_register.sr = response & 0xFF;
	READ_RDSEL01_register.sr = response & 0xFF;
	READ_RDSEL10_register.sr = response & 0xFF;
	switch(rdsel()) {
   157d4:	4620      	mov	r0, r4
	READ_RDSEL00_register.sr = response & 0xFF;
   157d6:	b2eb      	uxtb	r3, r5
	uint32_t response = read()&0xFFCFF;
   157d8:	402e      	ands	r6, r5
	READ_RDSEL00_register.sr = response & 0xFF;
   157da:	f8c4 3019 	str.w	r3, [r4, #25]
	READ_RDSEL01_register.sr = response & 0xFF;
   157de:	f8c4 301d 	str.w	r3, [r4, #29]
	READ_RDSEL10_register.sr = response & 0xFF;
   157e2:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
	switch(rdsel()) {
   157e6:	f7ff ff7f 	bl	156e8 <TMC2660Stepper::rdsel()>
   157ea:	2801      	cmp	r0, #1
   157ec:	d005      	beq.n	157fa <TMC2660Stepper::DRVSTATUS()+0x32>
   157ee:	2802      	cmp	r0, #2
   157f0:	d015      	beq.n	1581e <TMC2660Stepper::DRVSTATUS()+0x56>
   157f2:	b158      	cbz	r0, 1580c <TMC2660Stepper::DRVSTATUS()+0x44>
   157f4:	2600      	movs	r6, #0
		case 0b01: READ_RDSEL01_register.sr |= response & 0xFFC00; break;
		case 0b10: READ_RDSEL10_register.sr |= response & 0xFFC00; break;
		default: return 0;
	}
	return response;
}
   157f6:	4630      	mov	r0, r6
   157f8:	bd70      	pop	{r4, r5, r6, pc}
		case 0b01: READ_RDSEL01_register.sr |= response & 0xFFC00; break;
   157fa:	4a0e      	ldr	r2, [pc, #56]	; (15834 <TMC2660Stepper::DRVSTATUS()+0x6c>)
}
   157fc:	4630      	mov	r0, r6
		case 0b01: READ_RDSEL01_register.sr |= response & 0xFFC00; break;
   157fe:	f8d4 301d 	ldr.w	r3, [r4, #29]
   15802:	402a      	ands	r2, r5
   15804:	4313      	orrs	r3, r2
   15806:	f8c4 301d 	str.w	r3, [r4, #29]
}
   1580a:	bd70      	pop	{r4, r5, r6, pc}
		case 0b00: READ_RDSEL00_register.sr |= response & 0xFFC00; break;
   1580c:	4a09      	ldr	r2, [pc, #36]	; (15834 <TMC2660Stepper::DRVSTATUS()+0x6c>)
}
   1580e:	4630      	mov	r0, r6
		case 0b00: READ_RDSEL00_register.sr |= response & 0xFFC00; break;
   15810:	f8d4 3019 	ldr.w	r3, [r4, #25]
   15814:	402a      	ands	r2, r5
   15816:	4313      	orrs	r3, r2
   15818:	f8c4 3019 	str.w	r3, [r4, #25]
}
   1581c:	bd70      	pop	{r4, r5, r6, pc}
		case 0b10: READ_RDSEL10_register.sr |= response & 0xFFC00; break;
   1581e:	4a05      	ldr	r2, [pc, #20]	; (15834 <TMC2660Stepper::DRVSTATUS()+0x6c>)
}
   15820:	4630      	mov	r0, r6
		case 0b10: READ_RDSEL10_register.sr |= response & 0xFFC00; break;
   15822:	f8d4 3021 	ldr.w	r3, [r4, #33]	; 0x21
   15826:	4015      	ands	r5, r2
   15828:	432b      	orrs	r3, r5
   1582a:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
}
   1582e:	bd70      	pop	{r4, r5, r6, pc}
   15830:	000ffcff 	.word	0x000ffcff
   15834:	000ffc00 	.word	0x000ffc00

00015838 <TMC2130Stepper::DRV_STATUS()>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
   15838:	6803      	ldr	r3, [r0, #0]
   1583a:	216f      	movs	r1, #111	; 0x6f
   1583c:	685b      	ldr	r3, [r3, #4]
   1583e:	4718      	bx	r3

00015840 <TMC2130Stepper::GCONF(unsigned long)>:
	GCONF_register.sr = input;
   15840:	f890 c017 	ldrb.w	ip, [r0, #23]
   15844:	f3c1 2207 	ubfx	r2, r1, #8, #8
   15848:	7541      	strb	r1, [r0, #21]
   1584a:	f02c 0c03 	bic.w	ip, ip, #3
   1584e:	7582      	strb	r2, [r0, #22]
	write(GCONF_register.address, GCONF_register.sr);
   15850:	f3c1 0211 	ubfx	r2, r1, #0, #18
void TMC2130Stepper::GCONF(uint32_t input) {
   15854:	b500      	push	{lr}
	GCONF_register.sr = input;
   15856:	f3c1 4e01 	ubfx	lr, r1, #16, #2
	write(GCONF_register.address, GCONF_register.sr);
   1585a:	6801      	ldr	r1, [r0, #0]
	GCONF_register.sr = input;
   1585c:	ea4c 0c0e 	orr.w	ip, ip, lr
	write(GCONF_register.address, GCONF_register.sr);
   15860:	680b      	ldr	r3, [r1, #0]
}
   15862:	f85d eb04 	ldr.w	lr, [sp], #4
	write(GCONF_register.address, GCONF_register.sr);
   15866:	2100      	movs	r1, #0
	GCONF_register.sr = input;
   15868:	f880 c017 	strb.w	ip, [r0, #23]
	write(GCONF_register.address, GCONF_register.sr);
   1586c:	4718      	bx	r3
   1586e:	bf00      	nop

00015870 <TMC2130Stepper::en_pwm_mode(bool)>:
void TMC2130Stepper::en_pwm_mode(bool B)			{ SET_REG(en_pwm_mode);				}
   15870:	7d42      	ldrb	r2, [r0, #21]
   15872:	b410      	push	{r4}
   15874:	460c      	mov	r4, r1
   15876:	2100      	movs	r1, #0
   15878:	f364 0282 	bfi	r2, r4, #2, #1
   1587c:	6804      	ldr	r4, [r0, #0]
   1587e:	7542      	strb	r2, [r0, #21]
   15880:	6942      	ldr	r2, [r0, #20]
   15882:	6823      	ldr	r3, [r4, #0]
   15884:	f3c2 2211 	ubfx	r2, r2, #8, #18
   15888:	f85d 4b04 	ldr.w	r4, [sp], #4
   1588c:	4718      	bx	r3
   1588e:	bf00      	nop

00015890 <TMCStepper::IHOLD_IRUN(unsigned long)>:
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
	IHOLD_IRUN_register.sr = input;
   15890:	f890 c006 	ldrb.w	ip, [r0, #6]
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
   15894:	f3c1 0213 	ubfx	r2, r1, #0, #20
	IHOLD_IRUN_register.sr = input;
   15898:	8081      	strh	r1, [r0, #4]
   1589a:	f02c 0c0f 	bic.w	ip, ip, #15
void TMCStepper::IHOLD_IRUN(uint32_t input) {
   1589e:	b500      	push	{lr}
	IHOLD_IRUN_register.sr = input;
   158a0:	f3c1 4e03 	ubfx	lr, r1, #16, #4
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
   158a4:	6801      	ldr	r1, [r0, #0]
	IHOLD_IRUN_register.sr = input;
   158a6:	ea4c 0c0e 	orr.w	ip, ip, lr
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
   158aa:	680b      	ldr	r3, [r1, #0]
}
   158ac:	f85d eb04 	ldr.w	lr, [sp], #4
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
   158b0:	2110      	movs	r1, #16
	IHOLD_IRUN_register.sr = input;
   158b2:	f880 c006 	strb.w	ip, [r0, #6]
	write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
   158b6:	4718      	bx	r3

000158b8 <TMCStepper::ihold(unsigned char)>:

void 	TMCStepper::ihold(uint8_t B) 		{ SET_REG(ihold);		}
   158b8:	7902      	ldrb	r2, [r0, #4]
   158ba:	b410      	push	{r4}
   158bc:	460c      	mov	r4, r1
   158be:	2110      	movs	r1, #16
   158c0:	f364 0204 	bfi	r2, r4, #0, #5
   158c4:	6804      	ldr	r4, [r0, #0]
   158c6:	7102      	strb	r2, [r0, #4]
   158c8:	6842      	ldr	r2, [r0, #4]
   158ca:	6823      	ldr	r3, [r4, #0]
   158cc:	f3c2 0213 	ubfx	r2, r2, #0, #20
   158d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   158d4:	4718      	bx	r3
   158d6:	bf00      	nop

000158d8 <TMCStepper::irun(unsigned char)>:
void 	TMCStepper::irun(uint8_t B)  		{ SET_REG(irun); 		}
   158d8:	7942      	ldrb	r2, [r0, #5]
   158da:	b410      	push	{r4}
   158dc:	460c      	mov	r4, r1
   158de:	2110      	movs	r1, #16
   158e0:	f364 0204 	bfi	r2, r4, #0, #5
   158e4:	6804      	ldr	r4, [r0, #0]
   158e6:	7142      	strb	r2, [r0, #5]
   158e8:	6842      	ldr	r2, [r0, #4]
   158ea:	6823      	ldr	r3, [r4, #0]
   158ec:	f3c2 0213 	ubfx	r2, r2, #0, #20
   158f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   158f4:	4718      	bx	r3
   158f6:	bf00      	nop

000158f8 <TMC2130Stepper::PWMCONF(unsigned long)>:
	PWMCONF_register.sr = input;
   158f8:	f890 c032 	ldrb.w	ip, [r0, #50]	; 0x32
	write(PWMCONF_register.address, PWMCONF_register.sr);
   158fc:	f3c1 0215 	ubfx	r2, r1, #0, #22
	PWMCONF_register.sr = input;
   15900:	8601      	strh	r1, [r0, #48]	; 0x30
   15902:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
void TMC2130Stepper::PWMCONF(uint32_t input) {
   15906:	b500      	push	{lr}
	PWMCONF_register.sr = input;
   15908:	f3c1 4e05 	ubfx	lr, r1, #16, #6
	write(PWMCONF_register.address, PWMCONF_register.sr);
   1590c:	6801      	ldr	r1, [r0, #0]
	PWMCONF_register.sr = input;
   1590e:	ea4c 0c0e 	orr.w	ip, ip, lr
	write(PWMCONF_register.address, PWMCONF_register.sr);
   15912:	680b      	ldr	r3, [r1, #0]
}
   15914:	f85d eb04 	ldr.w	lr, [sp], #4
	write(PWMCONF_register.address, PWMCONF_register.sr);
   15918:	2170      	movs	r1, #112	; 0x70
	PWMCONF_register.sr = input;
   1591a:	f880 c032 	strb.w	ip, [r0, #50]	; 0x32
	write(PWMCONF_register.address, PWMCONF_register.sr);
   1591e:	4718      	bx	r3

00015920 <TMC2130Stepper::pwm_autoscale(bool)>:
void TMC2130Stepper::pwm_autoscale(	bool 	B )	{ SET_REG(pwm_autoscale);	}
   15920:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
   15924:	b410      	push	{r4}
   15926:	460c      	mov	r4, r1
   15928:	2170      	movs	r1, #112	; 0x70
   1592a:	f364 0282 	bfi	r2, r4, #2, #1
   1592e:	6804      	ldr	r4, [r0, #0]
   15930:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
   15934:	6b02      	ldr	r2, [r0, #48]	; 0x30
   15936:	6823      	ldr	r3, [r4, #0]
   15938:	f3c2 0215 	ubfx	r2, r2, #0, #22
   1593c:	f85d 4b04 	ldr.w	r4, [sp], #4
   15940:	4718      	bx	r3
   15942:	bf00      	nop

00015944 <TMC2160Stepper::PWMCONF(unsigned long)>:
void TMC2160Stepper::PWMCONF(uint32_t input) {
   15944:	b410      	push	{r4}
	write(PWMCONF_register.address, PWMCONF_register.sr);
   15946:	6804      	ldr	r4, [r0, #0]
   15948:	460a      	mov	r2, r1
	PWMCONF_register.sr = input;
   1594a:	6441      	str	r1, [r0, #68]	; 0x44
	write(PWMCONF_register.address, PWMCONF_register.sr);
   1594c:	2170      	movs	r1, #112	; 0x70
   1594e:	6823      	ldr	r3, [r4, #0]
}
   15950:	f85d 4b04 	ldr.w	r4, [sp], #4
	write(PWMCONF_register.address, PWMCONF_register.sr);
   15954:	4718      	bx	r3
   15956:	bf00      	nop

00015958 <TMC2160Stepper::pwm_autoscale(bool)>:
void TMC2160Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
   15958:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
   1595c:	b410      	push	{r4}
   1595e:	460c      	mov	r4, r1
   15960:	2170      	movs	r1, #112	; 0x70
   15962:	f364 0282 	bfi	r2, r4, #2, #1
   15966:	6804      	ldr	r4, [r0, #0]
   15968:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
   1596c:	6824      	ldr	r4, [r4, #0]
   1596e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15970:	4623      	mov	r3, r4
   15972:	f85d 4b04 	ldr.w	r4, [sp], #4
   15976:	4718      	bx	r3

00015978 <TMC2160Stepper::pwm_autograd(bool)>:
void TMC2160Stepper::pwm_autograd	( bool    B ) { PWMCONF_register.pwm_autograd = B; 	write(PWMCONF_register.address, PWMCONF_register.sr); }
   15978:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
   1597c:	b410      	push	{r4}
   1597e:	460c      	mov	r4, r1
   15980:	2170      	movs	r1, #112	; 0x70
   15982:	f364 02c3 	bfi	r2, r4, #3, #1
   15986:	6804      	ldr	r4, [r0, #0]
   15988:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
   1598c:	6824      	ldr	r4, [r4, #0]
   1598e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15990:	4623      	mov	r3, r4
   15992:	f85d 4b04 	ldr.w	r4, [sp], #4
   15996:	4718      	bx	r3

00015998 <TMC2660Stepper::cs(unsigned char)>:
  write(SGCSCONF_register.address, SGCSCONF_register.sr);
}

void TMC2660Stepper::sfilt(bool B) 	{ SET_REG(sfilt); }
void TMC2660Stepper::sgt(uint8_t B) { SET_REG(sgt); }
void TMC2660Stepper::cs(uint8_t B) 	{ SET_REG(cs); }
   15998:	468c      	mov	ip, r1
   1599a:	7c42      	ldrb	r2, [r0, #17]
   1599c:	2106      	movs	r1, #6
   1599e:	f36c 0204 	bfi	r2, ip, #0, #5
   159a2:	7442      	strb	r2, [r0, #17]
   159a4:	f8d0 2011 	ldr.w	r2, [r0, #17]
   159a8:	f000 bbfa 	b.w	161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>

000159ac <SW_SPIClass::init()>:
  mosi_pin(mosi),
  miso_pin(miso),
  sck_pin(sck)
  {}

void SW_SPIClass::init() {
   159ac:	b510      	push	{r4, lr}
   159ae:	4604      	mov	r4, r0
  pinMode(mosi_pin, OUTPUT);
   159b0:	2101      	movs	r1, #1
   159b2:	7800      	ldrb	r0, [r0, #0]
   159b4:	f002 fca2 	bl	182fc <pinMode>
  pinMode(sck_pin, OUTPUT);
   159b8:	7920      	ldrb	r0, [r4, #4]
   159ba:	2101      	movs	r1, #1
   159bc:	f002 fc9e 	bl	182fc <pinMode>
  pinMode(miso_pin, INPUT_PULLUP);
   159c0:	78a0      	ldrb	r0, [r4, #2]
   159c2:	2102      	movs	r1, #2
   159c4:	f002 fc9a 	bl	182fc <pinMode>
    sck_register = portOutputRegister(getPort(sck_pin));
    mosi_bm = digitalPinToBitMask(mosi_pin);
    miso_bm = digitalPinToBitMask(miso_pin);
    sck_bm = digitalPinToBitMask(sck_pin);
  #endif
  writeSCK_H;
   159c8:	7920      	ldrb	r0, [r4, #4]
   159ca:	2101      	movs	r1, #1
}
   159cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeSCK_H;
   159d0:	f002 bc58 	b.w	18284 <digitalWrite>

000159d4 <SW_SPIClass::transfer(unsigned char)>:

uint8_t SW_SPIClass::transfer(uint8_t ulVal) {
   159d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t value = 0;
   159d6:	2700      	movs	r7, #0
uint8_t SW_SPIClass::transfer(uint8_t ulVal) {
   159d8:	460e      	mov	r6, r1
   159da:	4605      	mov	r5, r0
  writeSCK_L;
   159dc:	7900      	ldrb	r0, [r0, #4]
   159de:	4639      	mov	r1, r7

  for (uint8_t i=7 ; i>=1 ; i--) {
    // Write bit
    !!(ulVal & (1 << i)) ? writeMOSI_H : writeMOSI_L;
   159e0:	2407      	movs	r4, #7
  writeSCK_L;
   159e2:	f002 fc4f 	bl	18284 <digitalWrite>
    !!(ulVal & (1 << i)) ? writeMOSI_H : writeMOSI_L;
   159e6:	2101      	movs	r1, #1
   159e8:	fa46 f304 	asr.w	r3, r6, r4
   159ec:	7828      	ldrb	r0, [r5, #0]
   159ee:	400b      	ands	r3, r1
   159f0:	bf08      	it	eq
   159f2:	4619      	moveq	r1, r3
   159f4:	f002 fc46 	bl	18284 <digitalWrite>
    // Start clock pulse
    writeSCK_H;
   159f8:	2101      	movs	r1, #1
   159fa:	7928      	ldrb	r0, [r5, #4]
   159fc:	f002 fc42 	bl	18284 <digitalWrite>
    // Read bit
    value |= ( readMISO ? 1 : 0) << i;
   15a00:	78a8      	ldrb	r0, [r5, #2]
   15a02:	f002 fc69 	bl	182d8 <digitalRead>
    // Stop clock pulse
    writeSCK_L;
   15a06:	2100      	movs	r1, #0
    value |= ( readMISO ? 1 : 0) << i;
   15a08:	4603      	mov	r3, r0
    writeSCK_L;
   15a0a:	7928      	ldrb	r0, [r5, #4]
    value |= ( readMISO ? 1 : 0) << i;
   15a0c:	1a5b      	subs	r3, r3, r1
   15a0e:	bf18      	it	ne
   15a10:	2301      	movne	r3, #1
   15a12:	40a3      	lsls	r3, r4
   15a14:	433b      	orrs	r3, r7
   15a16:	b2df      	uxtb	r7, r3
    writeSCK_L;
   15a18:	f002 fc34 	bl	18284 <digitalWrite>
  for (uint8_t i=7 ; i>=1 ; i--) {
   15a1c:	3c01      	subs	r4, #1
   15a1e:	d1e2      	bne.n	159e6 <SW_SPIClass::transfer(unsigned char)+0x12>
  }

  !!(ulVal & (1 << 0)) ? writeMOSI_H : writeMOSI_L;
   15a20:	07f3      	lsls	r3, r6, #31
   15a22:	7828      	ldrb	r0, [r5, #0]
   15a24:	bf4c      	ite	mi
   15a26:	2101      	movmi	r1, #1
   15a28:	4621      	movpl	r1, r4
   15a2a:	f002 fc2b 	bl	18284 <digitalWrite>
  writeSCK_H;
   15a2e:	2101      	movs	r1, #1
   15a30:	7928      	ldrb	r0, [r5, #4]
   15a32:	f002 fc27 	bl	18284 <digitalWrite>
  value |= ( readMISO ? 1 : 0) << 0;
   15a36:	78a8      	ldrb	r0, [r5, #2]
   15a38:	f002 fc4e 	bl	182d8 <digitalRead>

  return value;
}
   15a3c:	2800      	cmp	r0, #0
   15a3e:	bf0c      	ite	eq
   15a40:	4638      	moveq	r0, r7
   15a42:	f047 0001 	orrne.w	r0, r7, #1
   15a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015a48 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
   15a48:	b430      	push	{r4, r5}
   15a4a:	b082      	sub	sp, #8
   15a4c:	460c      	mov	r4, r1
   15a4e:	ab02      	add	r3, sp, #8
   15a50:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
   15a54:	7cc3      	ldrb	r3, [r0, #19]
   15a56:	2b00      	cmp	r3, #0
   15a58:	d030      	beq.n	15abc <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
   15a5a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
   15a5c:	7cc3      	ldrb	r3, [r0, #19]
   15a5e:	07da      	lsls	r2, r3, #31
   15a60:	d508      	bpl.n	15a74 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
   15a62:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15a66:	6945      	ldr	r5, [r0, #20]
   15a68:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
   15a6c:	402a      	ands	r2, r5
   15a6e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
   15a70:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
   15a74:	079d      	lsls	r5, r3, #30
   15a76:	d508      	bpl.n	15a8a <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
   15a78:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15a7c:	6985      	ldr	r5, [r0, #24]
   15a7e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
   15a82:	402a      	ands	r2, r5
   15a84:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
   15a86:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
   15a8a:	0759      	lsls	r1, r3, #29
   15a8c:	d508      	bpl.n	15aa0 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
   15a8e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15a92:	69c5      	ldr	r5, [r0, #28]
   15a94:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
   15a98:	402a      	ands	r2, r5
   15a9a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
   15a9c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
   15aa0:	071a      	lsls	r2, r3, #28
   15aa2:	d508      	bpl.n	15ab6 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
   15aa4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15aa8:	6a05      	ldr	r5, [r0, #32]
   15aaa:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
   15aae:	402a      	ands	r2, r5
   15ab0:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
   15ab2:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
   15ab6:	06db      	lsls	r3, r3, #27
   15ab8:	d42f      	bmi.n	15b1a <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
   15aba:	b662      	cpsie	i
		if (settings.clock() != _clock) {
   15abc:	6883      	ldr	r3, [r0, #8]
   15abe:	429c      	cmp	r4, r3
   15ac0:	d035      	beq.n	15b2e <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
   15ac2:	4b22      	ldr	r3, [pc, #136]	; (15b4c <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
   15ac4:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
   15ac6:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   15ac8:	4a21      	ldr	r2, [pc, #132]	; (15b50 <SPIClass::beginTransaction(SPISettings)+0x108>)
   15aca:	f3c3 1101 	ubfx	r1, r3, #4, #2
   15ace:	f3c3 6382 	ubfx	r3, r3, #26, #3
   15ad2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   15ad6:	3301      	adds	r3, #1
   15ad8:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
   15adc:	b1cc      	cbz	r4, 15b12 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
   15ade:	4294      	cmp	r4, r2
   15ae0:	d827      	bhi.n	15b32 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
   15ae2:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
   15ae6:	fbb2 f2f3 	udiv	r2, r2, r3
   15aea:	4294      	cmp	r4, r2
   15aec:	d32c      	bcc.n	15b48 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
   15aee:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   15af2:	d320      	bcc.n	15b36 <SPIClass::beginTransaction(SPISettings)+0xee>
   15af4:	4c17      	ldr	r4, [pc, #92]	; (15b54 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   15af6:	60c4      	str	r4, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   15af8:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   15afa:	2203      	movs	r2, #3
		port().CR = 0;
   15afc:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
   15afe:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
   15b00:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   15b02:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
   15b04:	2201      	movs	r2, #1
		port().CCR = _ccr;
   15b06:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
   15b08:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
   15b0a:	611a      	str	r2, [r3, #16]
	}
   15b0c:	b002      	add	sp, #8
   15b0e:	bc30      	pop	{r4, r5}
   15b10:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
   15b12:	4299      	cmp	r1, r3
   15b14:	d3ef      	bcc.n	15af6 <SPIClass::beginTransaction(SPISettings)+0xae>
   15b16:	1c53      	adds	r3, r2, #1
   15b18:	e7e9      	b.n	15aee <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
   15b1a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15b1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   15b20:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
   15b24:	400b      	ands	r3, r1
   15b26:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
   15b28:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
   15b2c:	e7c5      	b.n	15aba <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
   15b2e:	68c4      	ldr	r4, [r0, #12]
   15b30:	e7e2      	b.n	15af8 <SPIClass::beginTransaction(SPISettings)+0xb0>
   15b32:	2400      	movs	r4, #0
   15b34:	e7df      	b.n	15af6 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
   15b36:	2b02      	cmp	r3, #2
   15b38:	d9fb      	bls.n	15b32 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
   15b3a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   15b3c:	085a      	lsrs	r2, r3, #1
   15b3e:	0214      	lsls	r4, r2, #8
   15b40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   15b44:	431c      	orrs	r4, r3
   15b46:	e7d6      	b.n	15af6 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
   15b48:	461a      	mov	r2, r3
   15b4a:	e7e4      	b.n	15b16 <SPIClass::beginTransaction(SPISettings)+0xce>
   15b4c:	400fc000 	.word	0x400fc000
   15b50:	20002708 	.word	0x20002708
   15b54:	007f7fff 	.word	0x007f7fff

00015b58 <TMC2130Stepper::TMC2130Stepper(unsigned short, float, signed char)>:
		TMCStepper(float RS) : Rsense(RS) {};
   15b58:	2300      	movs	r3, #0
int8_t TMC2130Stepper::chain_length = 0;
uint32_t TMC2130Stepper::spi_speed = 16000000/8;

TMC2130Stepper::TMC2130Stepper(uint16_t pinCS, float RS, int8_t link) :
  TMCStepper(RS),
  _pinCS(pinCS),
   15b5a:	8681      	strh	r1, [r0, #52]	; 0x34
  link_index(link)
   15b5c:	491c      	ldr	r1, [pc, #112]	; (15bd0 <TMC2130Stepper::TMC2130Stepper(unsigned short, float, signed char)+0x78>)
   15b5e:	6043      	str	r3, [r0, #4]
   15b60:	8103      	strh	r3, [r0, #8]
   15b62:	6383      	str	r3, [r0, #56]	; 0x38
   15b64:	f8a0 3015 	strh.w	r3, [r0, #21]
   15b68:	75c3      	strb	r3, [r0, #23]
   15b6a:	6283      	str	r3, [r0, #40]	; 0x28
   15b6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   15b6e:	6001      	str	r1, [r0, #0]
   15b70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   15b74:	4917      	ldr	r1, [pc, #92]	; (15bd4 <TMC2130Stepper::TMC2130Stepper(unsigned short, float, signed char)+0x7c>)
   15b76:	ed80 0a03 	vstr	s0, [r0, #12]
   15b7a:	62c3      	str	r3, [r0, #44]	; 0x2c
   15b7c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   15b7e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
   15b82:	f003 4c7c 	and.w	ip, r3, #4227858432	; 0xfc000000
   15b86:	6a03      	ldr	r3, [r0, #32]
TMC2130Stepper::TMC2130Stepper(uint16_t pinCS, float RS, int8_t link) :
   15b88:	b410      	push	{r4}
   15b8a:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
  link_index(link)
   15b8e:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   15b92:	ea4c 0101 	orr.w	r1, ip, r1
   15b96:	6104      	str	r4, [r0, #16]
   15b98:	7a84      	ldrb	r4, [r0, #10]
   15b9a:	6203      	str	r3, [r0, #32]
   15b9c:	f024 040f 	bic.w	r4, r4, #15
   15ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15ba2:	6301      	str	r1, [r0, #48]	; 0x30
   15ba4:	7284      	strb	r4, [r0, #10]
   15ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   15baa:	6984      	ldr	r4, [r0, #24]
   15bac:	6243      	str	r3, [r0, #36]	; 0x24
   15bae:	f404 0470 	and.w	r4, r4, #15728640	; 0xf00000
   15bb2:	6184      	str	r4, [r0, #24]
   15bb4:	69c4      	ldr	r4, [r0, #28]
   15bb6:	f404 4470 	and.w	r4, r4, #61440	; 0xf000
   15bba:	61c4      	str	r4, [r0, #28]
  {
    defaults();

    if (link > chain_length)
   15bbc:	4c06      	ldr	r4, [pc, #24]	; (15bd8 <TMC2130Stepper::TMC2130Stepper(unsigned short, float, signed char)+0x80>)
   15bbe:	f994 3000 	ldrsb.w	r3, [r4]
   15bc2:	4293      	cmp	r3, r2
      chain_length = link;
   15bc4:	bfb8      	it	lt
   15bc6:	7022      	strblt	r2, [r4, #0]
  }
   15bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
   15bcc:	4770      	bx	lr
   15bce:	bf00      	nop
   15bd0:	200024bc 	.word	0x200024bc
   15bd4:	00050480 	.word	0x00050480
   15bd8:	20006a9f 	.word	0x20006a9f

00015bdc <TMC2130Stepper::switchCSpin(bool)>:
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
  digitalWrite(_pinCS, state);
   15bdc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   15be0:	f002 bb50 	b.w	18284 <digitalWrite>

00015be4 <TMC2130Stepper::beginTransaction()>:
}

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
  if (TMC_SW_SPI == nullptr) {
   15be4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15be6:	b103      	cbz	r3, 15bea <TMC2130Stepper::beginTransaction()+0x6>
   15be8:	4770      	bx	lr
    SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
   15bea:	4b08      	ldr	r3, [pc, #32]	; (15c0c <TMC2130Stepper::beginTransaction()+0x28>)
   15bec:	4a08      	ldr	r2, [pc, #32]	; (15c10 <TMC2130Stepper::beginTransaction()+0x2c>)
   15bee:	681b      	ldr	r3, [r3, #0]
   15bf0:	4808      	ldr	r0, [pc, #32]	; (15c14 <TMC2130Stepper::beginTransaction()+0x30>)
void TMC2130Stepper::beginTransaction() {
   15bf2:	b500      	push	{lr}
   15bf4:	b083      	sub	sp, #12
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
   15bf6:	e9cd 3200 	strd	r3, r2, [sp]
    SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
   15bfa:	ab02      	add	r3, sp, #8
   15bfc:	e913 0006 	ldmdb	r3, {r1, r2}
   15c00:	f7ff ff22 	bl	15a48 <SPIClass::beginTransaction(SPISettings)>
  }
}
   15c04:	b003      	add	sp, #12
   15c06:	f85d fb04 	ldr.w	pc, [sp], #4
   15c0a:	bf00      	nop
   15c0c:	20003e20 	.word	0x20003e20
   15c10:	c0000007 	.word	0xc0000007
   15c14:	200036d8 	.word	0x200036d8

00015c18 <TMC2130Stepper::endTransaction()>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
  if (TMC_SW_SPI == nullptr) {
   15c18:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15c1a:	b103      	cbz	r3, 15c1e <TMC2130Stepper::endTransaction()+0x6>
    SPI.endTransaction();
  }
}
   15c1c:	4770      	bx	lr
		if (interruptMasksUsed) {
   15c1e:	4a14      	ldr	r2, [pc, #80]	; (15c70 <TMC2130Stepper::endTransaction()+0x58>)
   15c20:	7cd3      	ldrb	r3, [r2, #19]
   15c22:	2b00      	cmp	r3, #0
   15c24:	d0fa      	beq.n	15c1c <TMC2130Stepper::endTransaction()+0x4>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   15c26:	07d8      	lsls	r0, r3, #31
   15c28:	d504      	bpl.n	15c34 <TMC2130Stepper::endTransaction()+0x1c>
   15c2a:	6a90      	ldr	r0, [r2, #40]	; 0x28
   15c2c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c30:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   15c34:	0799      	lsls	r1, r3, #30
   15c36:	d504      	bpl.n	15c42 <TMC2130Stepper::endTransaction()+0x2a>
   15c38:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   15c3a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c3e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   15c42:	0758      	lsls	r0, r3, #29
   15c44:	d504      	bpl.n	15c50 <TMC2130Stepper::endTransaction()+0x38>
   15c46:	6b10      	ldr	r0, [r2, #48]	; 0x30
   15c48:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c4c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   15c50:	0719      	lsls	r1, r3, #28
   15c52:	d504      	bpl.n	15c5e <TMC2130Stepper::endTransaction()+0x46>
   15c54:	6b50      	ldr	r0, [r2, #52]	; 0x34
   15c56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c5a:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   15c5e:	06db      	lsls	r3, r3, #27
   15c60:	d5dc      	bpl.n	15c1c <TMC2130Stepper::endTransaction()+0x4>
   15c62:	6b92      	ldr	r2, [r2, #56]	; 0x38
   15c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15c68:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   15c6c:	e7d6      	b.n	15c1c <TMC2130Stepper::endTransaction()+0x4>
   15c6e:	bf00      	nop
   15c70:	200036d8 	.word	0x200036d8

00015c74 <TMC2130Stepper::transfer(unsigned char)>:

__attribute__((weak))
uint8_t TMC2130Stepper::transfer(const uint8_t data) {
  uint8_t out = 0;
  if (TMC_SW_SPI != nullptr) {
   15c74:	6b80      	ldr	r0, [r0, #56]	; 0x38
   15c76:	b108      	cbz	r0, 15c7c <TMC2130Stepper::transfer(unsigned char)+0x8>
    out = TMC_SW_SPI->transfer(data);
   15c78:	f7ff beac 	b.w	159d4 <SW_SPIClass::transfer(unsigned char)>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   15c7c:	4a04      	ldr	r2, [pc, #16]	; (15c90 <TMC2130Stepper::transfer(unsigned char)+0x1c>)
   15c7e:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
   15c80:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   15c82:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   15c84:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   15c88:	d0fb      	beq.n	15c82 <TMC2130Stepper::transfer(unsigned char)+0xe>
   15c8a:	6f50      	ldr	r0, [r2, #116]	; 0x74
  }
  else {
    out = SPI.transfer(data);
  }
  return out;
}
   15c8c:	b2c0      	uxtb	r0, r0
   15c8e:	4770      	bx	lr
   15c90:	200036d8 	.word	0x200036d8

00015c94 <TMC2130Stepper::read(unsigned char)>:
    transfer(0x00);
  }
}

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
   15c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c98:	4605      	mov	r5, r0
   15c9a:	460f      	mov	r7, r1
  uint32_t out = 0UL;
  int8_t i = 1;

  beginTransaction();
   15c9c:	f7ff ffa2 	bl	15be4 <TMC2130Stepper::beginTransaction()>
  switchCSpin(LOW);
   15ca0:	2100      	movs	r1, #0
   15ca2:	4628      	mov	r0, r5
  transfer(addressByte);
   15ca4:	2404      	movs	r4, #4
  switchCSpin(LOW);
   15ca6:	f7ff ff99 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
  transfer(addressByte);
   15caa:	4639      	mov	r1, r7
   15cac:	4628      	mov	r0, r5
   15cae:	f7ff ffe1 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
    transfer(0x00);
   15cb2:	2100      	movs	r1, #0
   15cb4:	4628      	mov	r0, r5
   15cb6:	f7ff ffdd 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  for (uint8_t i = 0; i < n; i++) {
   15cba:	1e63      	subs	r3, r4, #1
   15cbc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   15cc0:	d1f7      	bne.n	15cb2 <TMC2130Stepper::read(unsigned char)+0x1e>
  // Clear SPI
  transferEmptyBytes(4);

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
   15cc2:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
  int8_t i = 1;
   15cc6:	2601      	movs	r6, #1
  while(i < link_index) {
   15cc8:	2b01      	cmp	r3, #1
   15cca:	dd0e      	ble.n	15cea <TMC2130Stepper::read(unsigned char)+0x56>
  int8_t i = 1;
   15ccc:	2405      	movs	r4, #5
    transfer(0x00);
   15cce:	2100      	movs	r1, #0
   15cd0:	4628      	mov	r0, r5
   15cd2:	f7ff ffcf 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  for (uint8_t i = 0; i < n; i++) {
   15cd6:	1e63      	subs	r3, r4, #1
   15cd8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   15cdc:	d1f7      	bne.n	15cce <TMC2130Stepper::read(unsigned char)+0x3a>
    transferEmptyBytes(5);
    i++;
   15cde:	3601      	adds	r6, #1
  while(i < link_index) {
   15ce0:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
   15ce4:	b276      	sxtb	r6, r6
   15ce6:	42b3      	cmp	r3, r6
   15ce8:	dcf0      	bgt.n	15ccc <TMC2130Stepper::read(unsigned char)+0x38>
  }

  switchCSpin(HIGH);
   15cea:	2101      	movs	r1, #1
   15cec:	4628      	mov	r0, r5
   15cee:	f7ff ff75 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   15cf2:	4b27      	ldr	r3, [pc, #156]	; (15d90 <TMC2130Stepper::read(unsigned char)+0xfc>)
	uint32_t begin = ARM_DWT_CYCCNT;
   15cf4:	4927      	ldr	r1, [pc, #156]	; (15d94 <TMC2130Stepper::read(unsigned char)+0x100>)
   15cf6:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   15cf8:	681a      	ldr	r2, [r3, #0]
   15cfa:	4b27      	ldr	r3, [pc, #156]	; (15d98 <TMC2130Stepper::read(unsigned char)+0x104>)
   15cfc:	fba3 3202 	umull	r3, r2, r3, r2
   15d00:	0c92      	lsrs	r2, r2, #18
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   15d02:	684b      	ldr	r3, [r1, #4]
   15d04:	1a1b      	subs	r3, r3, r0
   15d06:	429a      	cmp	r2, r3
   15d08:	d8fb      	bhi.n	15d02 <TMC2130Stepper::read(unsigned char)+0x6e>
  delayMicroseconds(1);
  switchCSpin(LOW);

  // Shift data from target link into the last one...
  while(i < chain_length) {
   15d0a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 15d9c <TMC2130Stepper::read(unsigned char)+0x108>
  switchCSpin(LOW);
   15d0e:	2100      	movs	r1, #0
   15d10:	4628      	mov	r0, r5
   15d12:	f7ff ff63 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
  while(i < chain_length) {
   15d16:	f998 3000 	ldrsb.w	r3, [r8]
   15d1a:	42b3      	cmp	r3, r6
   15d1c:	dd0e      	ble.n	15d3c <TMC2130Stepper::read(unsigned char)+0xa8>
  int8_t i = 1;
   15d1e:	2405      	movs	r4, #5
    transfer(0x00);
   15d20:	2100      	movs	r1, #0
   15d22:	4628      	mov	r0, r5
   15d24:	f7ff ffa6 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  for (uint8_t i = 0; i < n; i++) {
   15d28:	1e63      	subs	r3, r4, #1
   15d2a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   15d2e:	d1f7      	bne.n	15d20 <TMC2130Stepper::read(unsigned char)+0x8c>
    transferEmptyBytes(5);
    i++;
   15d30:	3601      	adds	r6, #1
  while(i < chain_length) {
   15d32:	f998 3000 	ldrsb.w	r3, [r8]
   15d36:	b276      	sxtb	r6, r6
   15d38:	42b3      	cmp	r3, r6
   15d3a:	dcf0      	bgt.n	15d1e <TMC2130Stepper::read(unsigned char)+0x8a>
  }

  // ...and once more to MCU
  status_response = transfer(addressByte); // Send the address byte again
   15d3c:	4639      	mov	r1, r7
   15d3e:	4628      	mov	r0, r5
   15d40:	f7ff ff98 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
   15d44:	4603      	mov	r3, r0
  out  = transfer(0x00);
   15d46:	2100      	movs	r1, #0
   15d48:	4628      	mov	r0, r5
  status_response = transfer(addressByte); // Send the address byte again
   15d4a:	752b      	strb	r3, [r5, #20]
  out  = transfer(0x00);
   15d4c:	f7ff ff92 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
   15d50:	4604      	mov	r4, r0
  out <<= 8;
  out |= transfer(0x00);
   15d52:	2100      	movs	r1, #0
   15d54:	4628      	mov	r0, r5
   15d56:	f7ff ff8d 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
   15d5a:	4606      	mov	r6, r0
  out <<= 8;
   15d5c:	0224      	lsls	r4, r4, #8
  out <<= 8;
  out |= transfer(0x00);
   15d5e:	2100      	movs	r1, #0
   15d60:	4628      	mov	r0, r5
  out |= transfer(0x00);
   15d62:	4326      	orrs	r6, r4
  out |= transfer(0x00);
   15d64:	f7ff ff86 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
   15d68:	4604      	mov	r4, r0
  out <<= 8;
  out |= transfer(0x00);
   15d6a:	2100      	movs	r1, #0
  out <<= 8;
   15d6c:	0236      	lsls	r6, r6, #8
  out |= transfer(0x00);
   15d6e:	4628      	mov	r0, r5
   15d70:	f7ff ff80 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
   15d74:	4603      	mov	r3, r0
  out |= transfer(0x00);
   15d76:	4334      	orrs	r4, r6

  endTransaction();
   15d78:	4628      	mov	r0, r5
  out <<= 8;
   15d7a:	0224      	lsls	r4, r4, #8
  out |= transfer(0x00);
   15d7c:	431c      	orrs	r4, r3
  endTransaction();
   15d7e:	f7ff ff4b 	bl	15c18 <TMC2130Stepper::endTransaction()>
  switchCSpin(HIGH);
   15d82:	4628      	mov	r0, r5
   15d84:	2101      	movs	r1, #1
   15d86:	f7ff ff29 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
  return out;
}
   15d8a:	4620      	mov	r0, r4
   15d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d90:	20003694 	.word	0x20003694
   15d94:	e0001000 	.word	0xe0001000
   15d98:	431bde83 	.word	0x431bde83
   15d9c:	20006a9f 	.word	0x20006a9f

00015da0 <TMC2130Stepper::write(unsigned char, unsigned long)>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
   15da0:	b570      	push	{r4, r5, r6, lr}
   15da2:	4605      	mov	r5, r0
   15da4:	460e      	mov	r6, r1
   15da6:	4614      	mov	r4, r2
  addressByte |= TMC_WRITE;
  int8_t i = 1;

  beginTransaction();
   15da8:	f7ff ff1c 	bl	15be4 <TMC2130Stepper::beginTransaction()>
  switchCSpin(LOW);
   15dac:	2100      	movs	r1, #0
   15dae:	4628      	mov	r0, r5
   15db0:	f7ff ff14 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
  status_response = transfer(addressByte);
   15db4:	f046 0180 	orr.w	r1, r6, #128	; 0x80
   15db8:	4628      	mov	r0, r5
   15dba:	f7ff ff5b 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
   15dbe:	4603      	mov	r3, r0
  transfer(config>>24);
   15dc0:	0e21      	lsrs	r1, r4, #24
   15dc2:	4628      	mov	r0, r5
  status_response = transfer(addressByte);
   15dc4:	752b      	strb	r3, [r5, #20]
  transfer(config>>24);
   15dc6:	f7ff ff55 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  transfer(config>>16);
   15dca:	f3c4 4107 	ubfx	r1, r4, #16, #8
   15dce:	4628      	mov	r0, r5
   15dd0:	f7ff ff50 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  transfer(config>>8);
   15dd4:	f3c4 2107 	ubfx	r1, r4, #8, #8
   15dd8:	4628      	mov	r0, r5
   15dda:	f7ff ff4b 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  transfer(config);
   15dde:	4628      	mov	r0, r5
   15de0:	b2e1      	uxtb	r1, r4
   15de2:	f7ff ff47 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
   15de6:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
   15dea:	2b01      	cmp	r3, #1
   15dec:	dd0f      	ble.n	15e0e <TMC2130Stepper::write(unsigned char, unsigned long)+0x6e>
  int8_t i = 1;
   15dee:	2601      	movs	r6, #1
   15df0:	2405      	movs	r4, #5
    transfer(0x00);
   15df2:	2100      	movs	r1, #0
   15df4:	4628      	mov	r0, r5
   15df6:	f7ff ff3d 	bl	15c74 <TMC2130Stepper::transfer(unsigned char)>
  for (uint8_t i = 0; i < n; i++) {
   15dfa:	1e63      	subs	r3, r4, #1
   15dfc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   15e00:	d1f7      	bne.n	15df2 <TMC2130Stepper::write(unsigned char, unsigned long)+0x52>
    transferEmptyBytes(5);
    i++;
   15e02:	3601      	adds	r6, #1
  while(i < link_index) {
   15e04:	f995 303c 	ldrsb.w	r3, [r5, #60]	; 0x3c
   15e08:	b276      	sxtb	r6, r6
   15e0a:	42b3      	cmp	r3, r6
   15e0c:	dcf0      	bgt.n	15df0 <TMC2130Stepper::write(unsigned char, unsigned long)+0x50>
  }

  endTransaction();
   15e0e:	4628      	mov	r0, r5
   15e10:	f7ff ff02 	bl	15c18 <TMC2130Stepper::endTransaction()>
  switchCSpin(HIGH);
   15e14:	2101      	movs	r1, #1
   15e16:	4628      	mov	r0, r5
   15e18:	f7ff fee0 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
}
   15e1c:	bd70      	pop	{r4, r5, r6, pc}
   15e1e:	bf00      	nop

00015e20 <TMC2130Stepper::begin()>:

void TMC2130Stepper::begin() {
   15e20:	b510      	push	{r4, lr}
   15e22:	4604      	mov	r4, r0
  //set pins
  pinMode(_pinCS, OUTPUT);
   15e24:	2101      	movs	r1, #1
   15e26:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   15e2a:	f002 fa67 	bl	182fc <pinMode>
  switchCSpin(HIGH);
   15e2e:	4620      	mov	r0, r4
   15e30:	2101      	movs	r1, #1
   15e32:	f7ff fed3 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
   15e36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15e38:	b108      	cbz	r0, 15e3e <TMC2130Stepper::begin()+0x1e>
   15e3a:	f7ff fdb7 	bl	159ac <SW_SPIClass::init()>

  GCONF(GCONF_register.sr);
   15e3e:	6961      	ldr	r1, [r4, #20]
   15e40:	4620      	mov	r0, r4
   15e42:	f3c1 2111 	ubfx	r1, r1, #8, #18
   15e46:	f7ff fcfb 	bl	15840 <TMC2130Stepper::GCONF(unsigned long)>
  CHOPCONF(CHOPCONF_register.sr);
   15e4a:	f8d4 1025 	ldr.w	r1, [r4, #37]	; 0x25
   15e4e:	4620      	mov	r0, r4
   15e50:	f7ff fb8e 	bl	15570 <TMC2130Stepper::CHOPCONF(unsigned long)>
  COOLCONF(COOLCONF_register.sr);
   15e54:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   15e58:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15e5a:	4620      	mov	r0, r4
   15e5c:	f003 0301 	and.w	r3, r3, #1
   15e60:	061b      	lsls	r3, r3, #24
   15e62:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
   15e66:	f7ff fc13 	bl	15690 <TMC2130Stepper::COOLCONF(unsigned long)>
  PWMCONF(PWMCONF_register.sr);
   15e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15e6c:	4620      	mov	r0, r4
   15e6e:	f3c1 0115 	ubfx	r1, r1, #0, #22
   15e72:	f7ff fd41 	bl	158f8 <TMC2130Stepper::PWMCONF(unsigned long)>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
   15e76:	6861      	ldr	r1, [r4, #4]
   15e78:	4620      	mov	r0, r4
   15e7a:	f3c1 0113 	ubfx	r1, r1, #0, #20
   15e7e:	f7ff fd07 	bl	15890 <TMCStepper::IHOLD_IRUN(unsigned long)>

  toff(8); //off_time(8);
   15e82:	4620      	mov	r0, r4
   15e84:	2108      	movs	r1, #8
   15e86:	f7ff fb7d 	bl	15584 <TMC2130Stepper::toff(unsigned char)>
  tbl(1); //blank_time(24);
   15e8a:	6823      	ldr	r3, [r4, #0]
   15e8c:	4620      	mov	r0, r4
   15e8e:	2101      	movs	r1, #1
   15e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   15e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tbl(1); //blank_time(24);
   15e96:	4718      	bx	r3

00015e98 <TMC2160Stepper::TMC2160Stepper(unsigned short, float, signed char)>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15e98:	b510      	push	{r4, lr}
   15e9a:	4604      	mov	r4, r0
   15e9c:	f7ff fe5c 	bl	15b58 <TMC2130Stepper::TMC2130Stepper(unsigned short, float, signed char)>
   15ea0:	4a0d      	ldr	r2, [pc, #52]	; (15ed8 <TMC2160Stepper::TMC2160Stepper(unsigned short, float, signed char)+0x40>)
  DRV_CONF_register.bbmtime = 0;
  DRV_CONF_register.bbmclks = 4;
  DRV_CONF_register.otselect = 0b00;
  DRV_CONF_register.drvstrength = 0b10;
  DRV_CONF_register.filt_isense = 0b00;
  TPOWERDOWN_register.sr = 10;
   15ea2:	230a      	movs	r3, #10
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
   15ea4:	2050      	movs	r0, #80	; 0x50
   15ea6:	2101      	movs	r1, #1
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15ea8:	6022      	str	r2, [r4, #0]
  CHOPCONF_register.sr = 0x10410150;
   15eaa:	2241      	movs	r2, #65	; 0x41
  TPOWERDOWN_register.sr = 10;
   15eac:	71e3      	strb	r3, [r4, #7]
  CHOPCONF_register.sr = 0x10410150;
   15eae:	2310      	movs	r3, #16
   15eb0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15eb4:	2006      	movs	r0, #6
  CHOPCONF_register.sr = 0x10410150;
   15eb6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15eba:	f44f 7183 	mov.w	r1, #262	; 0x106
  CHOPCONF_register.sr = 0x10410150;
   15ebe:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
   15ec2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15ec6:	4a05      	ldr	r2, [pc, #20]	; (15edc <TMC2160Stepper::TMC2160Stepper(unsigned short, float, signed char)+0x44>)
  PWMCONF_register.sr = 0xC40C001E;
   15ec8:	4b05      	ldr	r3, [pc, #20]	; (15ee0 <TMC2160Stepper::TMC2160Stepper(unsigned short, float, signed char)+0x48>)
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15eca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  { defaults(); }
   15ece:	4620      	mov	r0, r4
TMC2160Stepper::TMC2160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2130Stepper(pinCS, RS, link)
   15ed0:	87e1      	strh	r1, [r4, #62]	; 0x3e
  PWMCONF_register.sr = 0xC40C001E;
   15ed2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
  { defaults(); }
   15ed6:	bd10      	pop	{r4, pc}
   15ed8:	200024f8 	.word	0x200024f8
   15edc:	00080400 	.word	0x00080400
   15ee0:	c40c001e 	.word	0xc40c001e

00015ee4 <TMC2160Stepper::begin()>:
void TMC2160Stepper::begin() {
   15ee4:	b510      	push	{r4, lr}
   15ee6:	4604      	mov	r4, r0
  pinMode(_pinCS, OUTPUT);
   15ee8:	2101      	movs	r1, #1
   15eea:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   15eee:	f002 fa05 	bl	182fc <pinMode>
  switchCSpin(HIGH);
   15ef2:	4620      	mov	r0, r4
   15ef4:	2101      	movs	r1, #1
   15ef6:	f7ff fe71 	bl	15bdc <TMC2130Stepper::switchCSpin(bool)>
  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
   15efa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   15efc:	b108      	cbz	r0, 15f02 <TMC2160Stepper::begin()+0x1e>
   15efe:	f7ff fd55 	bl	159ac <SW_SPIClass::init()>
  GCONF(GCONF_register.sr);
   15f02:	6961      	ldr	r1, [r4, #20]
   15f04:	4620      	mov	r0, r4
   15f06:	f3c1 2111 	ubfx	r1, r1, #8, #18
   15f0a:	f7ff fc99 	bl	15840 <TMC2130Stepper::GCONF(unsigned long)>
  CHOPCONF(CHOPCONF_register.sr);
   15f0e:	f8d4 1025 	ldr.w	r1, [r4, #37]	; 0x25
   15f12:	4620      	mov	r0, r4
   15f14:	f7ff fb2c 	bl	15570 <TMC2130Stepper::CHOPCONF(unsigned long)>
  COOLCONF(COOLCONF_register.sr);
   15f18:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   15f1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15f1e:	4620      	mov	r0, r4
   15f20:	f003 0301 	and.w	r3, r3, #1
   15f24:	061b      	lsls	r3, r3, #24
   15f26:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
   15f2a:	f7ff fbb1 	bl	15690 <TMC2130Stepper::COOLCONF(unsigned long)>
  PWMCONF(PWMCONF_register.sr);
   15f2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   15f30:	4620      	mov	r0, r4
   15f32:	f7ff fd07 	bl	15944 <TMC2160Stepper::PWMCONF(unsigned long)>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
   15f36:	6861      	ldr	r1, [r4, #4]
   15f38:	4620      	mov	r0, r4
   15f3a:	f3c1 0113 	ubfx	r1, r1, #0, #20
   15f3e:	f7ff fca7 	bl	15890 <TMCStepper::IHOLD_IRUN(unsigned long)>
  toff(8); //off_time(8);
   15f42:	4620      	mov	r0, r4
   15f44:	2108      	movs	r1, #8
   15f46:	f7ff fb1d 	bl	15584 <TMC2130Stepper::toff(unsigned char)>
  tbl(1); //blank_time(24);
   15f4a:	6823      	ldr	r3, [r4, #0]
   15f4c:	4620      	mov	r0, r4
   15f4e:	2101      	movs	r1, #1
   15f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   15f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tbl(1); //blank_time(24);
   15f56:	4718      	bx	r3

00015f58 <TMC2160Stepper::rms_current(unsigned short)>:
void TMC2160Stepper::rms_current(uint16_t mA) {
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
  uint8_t CS = 31;
  uint32_t scaler = 0; // = 256

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
   15f58:	ed9f 7a27 	vldr	s14, [pc, #156]	; 15ff8 <TMC2160Stepper::rms_current(unsigned short)+0xa0>
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
  numerator *= RS_scaled;
   15f5c:	f642 5c41 	movw	ip, #11585	; 0x2d41
  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
   15f60:	edd0 7a03 	vldr	s15, [r0, #12]
  uint8_t CS = 31;
   15f64:	231f      	movs	r3, #31
  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
   15f66:	ee67 7a87 	vmul.f32	s15, s15, s14
void TMC2160Stepper::rms_current(uint16_t mA) {
   15f6a:	b530      	push	{r4, r5, lr}
  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
   15f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
void TMC2160Stepper::rms_current(uint16_t mA) {
   15f70:	b083      	sub	sp, #12
   15f72:	4605      	mov	r5, r0
  numerator >>= 8;
  numerator *= mA;

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
    denominator *= CS+1;
   15f74:	4c21      	ldr	r4, [pc, #132]	; (15ffc <TMC2160Stepper::rms_current(unsigned short)+0xa4>)
  numerator *= RS_scaled;
   15f76:	ee17 2a90 	vmov	r2, s15
   15f7a:	b292      	uxth	r2, r2
   15f7c:	fb0c f202 	mul.w	r2, ip, r2
  numerator >>= 8;
   15f80:	0a12      	lsrs	r2, r2, #8
  numerator *= mA;
   15f82:	fb02 f101 	mul.w	r1, r2, r1
    denominator *= CS+1;
   15f86:	fb03 4204 	mla	r2, r3, r4, r4
    scaler = numerator / denominator;
   15f8a:	fbb1 f2f2 	udiv	r2, r1, r2

    if (scaler > 255) scaler = 0; // Maximum
   15f8e:	2aff      	cmp	r2, #255	; 0xff
    else if (scaler < 128) CS--;  // Try again with smaller CS
  } while(0 < scaler && scaler < 128);
   15f90:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    if (scaler > 255) scaler = 0; // Maximum
   15f94:	d809      	bhi.n	15faa <TMC2160Stepper::rms_current(unsigned short)+0x52>
    else if (scaler < 128) CS--;  // Try again with smaller CS
   15f96:	2a7f      	cmp	r2, #127	; 0x7f
   15f98:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   15f9c:	bf98      	it	ls
   15f9e:	b2c3      	uxtbls	r3, r0
  } while(0 < scaler && scaler < 128);
   15fa0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
   15fa4:	d9ef      	bls.n	15f86 <TMC2160Stepper::rms_current(unsigned short)+0x2e>


  if (CS > 31)
    CS = 31;

  GLOBAL_SCALER(scaler);
   15fa6:	b2d1      	uxtb	r1, r2
   15fa8:	e001      	b.n	15fae <TMC2160Stepper::rms_current(unsigned short)+0x56>
   15faa:	2100      	movs	r1, #0
    if (scaler > 255) scaler = 0; // Maximum
   15fac:	460a      	mov	r2, r1
  if (CS > 31)
   15fae:	2b1f      	cmp	r3, #31

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
  GLOBAL_SCALER_register.sr = input;
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
   15fb0:	6828      	ldr	r0, [r5, #0]
  GLOBAL_SCALER_register.sr = input;
   15fb2:	f885 1043 	strb.w	r1, [r5, #67]	; 0x43
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
   15fb6:	f04f 010b 	mov.w	r1, #11
   15fba:	bf28      	it	cs
   15fbc:	231f      	movcs	r3, #31
   15fbe:	461c      	mov	r4, r3
   15fc0:	6803      	ldr	r3, [r0, #0]
   15fc2:	4628      	mov	r0, r5
   15fc4:	4798      	blx	r3
  irun(CS);
   15fc6:	4621      	mov	r1, r4
   15fc8:	4628      	mov	r0, r5
   15fca:	f7ff fc85 	bl	158d8 <TMCStepper::irun(unsigned char)>
  ihold(CS*holdMultiplier);
   15fce:	ee07 4a90 	vmov	s15, r4
   15fd2:	ed95 7a04 	vldr	s14, [r5, #16]
   15fd6:	4628      	mov	r0, r5
   15fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   15fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
   15fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   15fe4:	edcd 7a01 	vstr	s15, [sp, #4]
   15fe8:	f89d 1004 	ldrb.w	r1, [sp, #4]
}
   15fec:	b003      	add	sp, #12
   15fee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  ihold(CS*holdMultiplier);
   15ff2:	f7ff bc61 	b.w	158b8 <TMCStepper::ihold(unsigned char)>
   15ff6:	bf00      	nop
   15ff8:	477fff00 	.word	0x477fff00
   15ffc:	000144fe 	.word	0x000144fe

00016000 <TMC2160Stepper::rms_current(unsigned short, float)>:
  holdMultiplier = mult;
   16000:	ed80 0a04 	vstr	s0, [r0, #16]
  rms_current(mA);
   16004:	f7ff bfa8 	b.w	15f58 <TMC2160Stepper::rms_current(unsigned short)>

00016008 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
   16008:	f003 be6e 	b.w	19ce8 <usb_serial_available>

0001600c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
   1600c:	f003 beb0 	b.w	19d70 <usb_serial_getchar>

00016010 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   16010:	4608      	mov	r0, r1
   16012:	f003 bebd 	b.w	19d90 <usb_serial_putchar>
   16016:	bf00      	nop

00016018 <TMC2660Stepper::TMC2660Stepper(unsigned short, float)>:
#include "TMCStepper.h"
#include "SW_SPI.h"

TMC2660Stepper::TMC2660Stepper(uint16_t pinCS, float RS) :
  _pinCS(pinCS),
  Rsense(RS)
   16018:	2200      	movs	r2, #0
   1601a:	f04f 5c7c 	mov.w	ip, #1056964608	; 0x3f000000
   1601e:	7042      	strb	r2, [r0, #1]
   16020:	7082      	strb	r2, [r0, #2]
   16022:	70c2      	strb	r2, [r0, #3]
   16024:	7102      	strb	r2, [r0, #4]
   16026:	7142      	strb	r2, [r0, #5]
   16028:	7182      	strb	r2, [r0, #6]
   1602a:	71c2      	strb	r2, [r0, #7]
   1602c:	7202      	strb	r2, [r0, #8]
   1602e:	7242      	strb	r2, [r0, #9]
   16030:	7282      	strb	r2, [r0, #10]
   16032:	72c2      	strb	r2, [r0, #11]
   16034:	7302      	strb	r2, [r0, #12]
   16036:	7342      	strb	r2, [r0, #13]
   16038:	7382      	strb	r2, [r0, #14]
   1603a:	73c2      	strb	r2, [r0, #15]
   1603c:	7402      	strb	r2, [r0, #16]
   1603e:	7442      	strb	r2, [r0, #17]
   16040:	7482      	strb	r2, [r0, #18]
   16042:	74c2      	strb	r2, [r0, #19]
   16044:	7502      	strb	r2, [r0, #20]
   16046:	7542      	strb	r2, [r0, #21]
   16048:	7582      	strb	r2, [r0, #22]
   1604a:	75c2      	strb	r2, [r0, #23]
   1604c:	7602      	strb	r2, [r0, #24]
   1604e:	7642      	strb	r2, [r0, #25]
   16050:	7682      	strb	r2, [r0, #26]
   16052:	76c2      	strb	r2, [r0, #27]
   16054:	7702      	strb	r2, [r0, #28]
   16056:	7742      	strb	r2, [r0, #29]
   16058:	7782      	strb	r2, [r0, #30]
   1605a:	77c2      	strb	r2, [r0, #31]
   1605c:	f880 2020 	strb.w	r2, [r0, #32]
   16060:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  _pinCS(pinCS),
   16064:	84c1      	strh	r1, [r0, #38]	; 0x26
  Rsense(RS)
   16066:	4908      	ldr	r1, [pc, #32]	; (16088 <TMC2660Stepper::TMC2660Stepper(unsigned short, float)+0x70>)
   16068:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
   1606c:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
   16070:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   16074:	ed80 0a0a 	vstr	s0, [r0, #40]	; 0x28
   16078:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
   1607c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
   16080:	6382      	str	r2, [r0, #56]	; 0x38
   16082:	6301      	str	r1, [r0, #48]	; 0x30
  {}
   16084:	4770      	bx	lr
   16086:	bf00      	nop
   16088:	001e8480 	.word	0x001e8480

0001608c <TMC2660Stepper::read()>:
void TMC2660Stepper::switchCSpin(bool state) {
  // Allows for overriding in child class to make use of fast io
  digitalWrite(_pinCS, state);
}

uint32_t TMC2660Stepper::read() {
   1608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t response = 0UL;
  uint32_t dummy = ((uint32_t)DRVCONF_register.address<<17) | DRVCONF_register.sr;
  if (TMC_SW_SPI != nullptr) {
   16090:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
uint32_t TMC2660Stepper::read() {
   16094:	b082      	sub	sp, #8
  uint32_t dummy = ((uint32_t)DRVCONF_register.address<<17) | DRVCONF_register.sr;
   16096:	f8d0 7015 	ldr.w	r7, [r0, #21]
uint32_t TMC2660Stepper::read() {
   1609a:	4604      	mov	r4, r0
  uint32_t dummy = ((uint32_t)DRVCONF_register.address<<17) | DRVCONF_register.sr;
   1609c:	f447 2560 	orr.w	r5, r7, #917504	; 0xe0000
  if (TMC_SW_SPI != nullptr) {
   160a0:	f1b8 0f00 	cmp.w	r8, #0
   160a4:	d022      	beq.n	160ec <TMC2660Stepper::read()+0x60>
  digitalWrite(_pinCS, state);
   160a6:	2100      	movs	r1, #0
   160a8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   160ac:	f002 f8ea 	bl	18284 <digitalWrite>
    switchCSpin(LOW);
    response |= TMC_SW_SPI->transfer((dummy >> 16) & 0xFF);
   160b0:	f3c5 4107 	ubfx	r1, r5, #16, #8
   160b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   160b6:	f7ff fc8d 	bl	159d4 <SW_SPIClass::transfer(unsigned char)>
   160ba:	4607      	mov	r7, r0
    response <<= 8;
    response |= TMC_SW_SPI->transfer((dummy >>  8) & 0xFF);
   160bc:	f3c5 2107 	ubfx	r1, r5, #8, #8
   160c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   160c2:	f7ff fc87 	bl	159d4 <SW_SPIClass::transfer(unsigned char)>
   160c6:	4606      	mov	r6, r0
    response <<= 8;
   160c8:	023f      	lsls	r7, r7, #8
    response <<= 8;
    response |= TMC_SW_SPI->transfer(dummy & 0xFF);
   160ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   160cc:	b2e9      	uxtb	r1, r5
    response |= TMC_SW_SPI->transfer((dummy >>  8) & 0xFF);
   160ce:	433e      	orrs	r6, r7
    response |= TMC_SW_SPI->transfer(dummy & 0xFF);
   160d0:	f7ff fc80 	bl	159d4 <SW_SPIClass::transfer(unsigned char)>
    response <<= 8;
   160d4:	0236      	lsls	r6, r6, #8
    response |= TMC_SW_SPI->transfer(dummy & 0xFF);
   160d6:	ea40 0506 	orr.w	r5, r0, r6
  digitalWrite(_pinCS, state);
   160da:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   160de:	2101      	movs	r1, #1
   160e0:	f002 f8d0 	bl	18284 <digitalWrite>
    response |= SPI.transfer(dummy & 0xFF);
    SPI.endTransaction();
  }
  switchCSpin(HIGH);
  return response >> 4;
}
   160e4:	0928      	lsrs	r0, r5, #4
   160e6:	b002      	add	sp, #8
   160e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
   160ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
   160ee:	4e2a      	ldr	r6, [pc, #168]	; (16198 <TMC2660Stepper::read()+0x10c>)
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
   160f0:	9300      	str	r3, [sp, #0]
   160f2:	4b2a      	ldr	r3, [pc, #168]	; (1619c <TMC2660Stepper::read()+0x110>)
   160f4:	4630      	mov	r0, r6
   160f6:	9301      	str	r3, [sp, #4]
   160f8:	ab02      	add	r3, sp, #8
   160fa:	e913 0006 	ldmdb	r3, {r1, r2}
   160fe:	f7ff fca3 	bl	15a48 <SPIClass::beginTransaction(SPISettings)>
  digitalWrite(_pinCS, state);
   16102:	4641      	mov	r1, r8
   16104:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   16108:	f002 f8bc 	bl	18284 <digitalWrite>
		port().TDR = data;
   1610c:	f3c5 4207 	ubfx	r2, r5, #16, #8
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   16110:	6833      	ldr	r3, [r6, #0]
		port().TDR = data;
   16112:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   16114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   16116:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   1611a:	d0fb      	beq.n	16114 <TMC2660Stepper::read()+0x88>
   1611c:	6f58      	ldr	r0, [r3, #116]	; 0x74
    response <<= 8;
   1611e:	f3c5 2507 	ubfx	r5, r5, #8, #8
   16122:	0200      	lsls	r0, r0, #8
		port().TDR = data;
   16124:	665d      	str	r5, [r3, #100]	; 0x64
   16126:	b280      	uxth	r0, r0
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   16128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1612a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   1612e:	d0fb      	beq.n	16128 <TMC2660Stepper::read()+0x9c>
   16130:	6f59      	ldr	r1, [r3, #116]	; 0x74
   16132:	b2ff      	uxtb	r7, r7
    response |= SPI.transfer((dummy >>  8) & 0xFF);
   16134:	b2c9      	uxtb	r1, r1
		port().TDR = data;
   16136:	665f      	str	r7, [r3, #100]	; 0x64
   16138:	4301      	orrs	r1, r0
    response <<= 8;
   1613a:	0209      	lsls	r1, r1, #8
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1613c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1613e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   16142:	d0fb      	beq.n	1613c <TMC2660Stepper::read()+0xb0>
   16144:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		if (interruptMasksUsed) {
   16146:	7cf3      	ldrb	r3, [r6, #19]
    response |= SPI.transfer(dummy & 0xFF);
   16148:	b2ed      	uxtb	r5, r5
   1614a:	430d      	orrs	r5, r1
   1614c:	2b00      	cmp	r3, #0
   1614e:	d0c4      	beq.n	160da <TMC2660Stepper::read()+0x4e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   16150:	07df      	lsls	r7, r3, #31
   16152:	d504      	bpl.n	1615e <TMC2660Stepper::read()+0xd2>
   16154:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   16156:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1615a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   1615e:	0798      	lsls	r0, r3, #30
   16160:	d504      	bpl.n	1616c <TMC2660Stepper::read()+0xe0>
   16162:	6af1      	ldr	r1, [r6, #44]	; 0x2c
   16164:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   16168:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   1616c:	0759      	lsls	r1, r3, #29
   1616e:	d504      	bpl.n	1617a <TMC2660Stepper::read()+0xee>
   16170:	6b31      	ldr	r1, [r6, #48]	; 0x30
   16172:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   16176:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   1617a:	071a      	lsls	r2, r3, #28
   1617c:	d504      	bpl.n	16188 <TMC2660Stepper::read()+0xfc>
   1617e:	6b71      	ldr	r1, [r6, #52]	; 0x34
   16180:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   16184:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   16188:	06db      	lsls	r3, r3, #27
   1618a:	d5a6      	bpl.n	160da <TMC2660Stepper::read()+0x4e>
   1618c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   1618e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16192:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   16196:	e7a0      	b.n	160da <TMC2660Stepper::read()+0x4e>
   16198:	200036d8 	.word	0x200036d8
   1619c:	c0000007 	.word	0xc0000007

000161a0 <TMC2660Stepper::write(unsigned char, unsigned long)>:

void TMC2660Stepper::write(uint8_t addressByte, uint32_t config) {
   161a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t data = (uint32_t)addressByte<<17 | config;
  if (TMC_SW_SPI != nullptr) {
   161a2:	6b86      	ldr	r6, [r0, #56]	; 0x38
void TMC2660Stepper::write(uint8_t addressByte, uint32_t config) {
   161a4:	b083      	sub	sp, #12
   161a6:	4604      	mov	r4, r0
  uint32_t data = (uint32_t)addressByte<<17 | config;
   161a8:	ea42 4541 	orr.w	r5, r2, r1, lsl #17
  if (TMC_SW_SPI != nullptr) {
   161ac:	b1d6      	cbz	r6, 161e4 <TMC2660Stepper::write(unsigned char, unsigned long)+0x44>
  digitalWrite(_pinCS, state);
   161ae:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   161b2:	2100      	movs	r1, #0
   161b4:	f002 f866 	bl	18284 <digitalWrite>
    switchCSpin(LOW);
    TMC_SW_SPI->transfer((data >> 16) & 0xFF);
   161b8:	f3c5 4107 	ubfx	r1, r5, #16, #8
   161bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   161be:	f7ff fc09 	bl	159d4 <SW_SPIClass::transfer(unsigned char)>
    TMC_SW_SPI->transfer((data >>  8) & 0xFF);
   161c2:	f3c5 2107 	ubfx	r1, r5, #8, #8
   161c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   161c8:	f7ff fc04 	bl	159d4 <SW_SPIClass::transfer(unsigned char)>
    TMC_SW_SPI->transfer(data & 0xFF);
   161cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   161ce:	b2e9      	uxtb	r1, r5
   161d0:	f7ff fc00 	bl	159d4 <SW_SPIClass::transfer(unsigned char)>
  digitalWrite(_pinCS, state);
   161d4:	2101      	movs	r1, #1
   161d6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    SPI.transfer((data >>  8) & 0xFF);
    SPI.transfer(data & 0xFF);
    SPI.endTransaction();
  }
  switchCSpin(HIGH);
}
   161da:	b003      	add	sp, #12
   161dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  digitalWrite(_pinCS, state);
   161e0:	f002 b850 	b.w	18284 <digitalWrite>
    SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
   161e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   161e6:	4a27      	ldr	r2, [pc, #156]	; (16284 <TMC2660Stepper::write(unsigned char, unsigned long)+0xe4>)
   161e8:	4f27      	ldr	r7, [pc, #156]	; (16288 <TMC2660Stepper::write(unsigned char, unsigned long)+0xe8>)
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
   161ea:	e9cd 3200 	strd	r3, r2, [sp]
   161ee:	ab02      	add	r3, sp, #8
   161f0:	4638      	mov	r0, r7
   161f2:	e913 0006 	ldmdb	r3, {r1, r2}
   161f6:	f7ff fc27 	bl	15a48 <SPIClass::beginTransaction(SPISettings)>
  digitalWrite(_pinCS, state);
   161fa:	4631      	mov	r1, r6
   161fc:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   16200:	f002 f840 	bl	18284 <digitalWrite>
		port().TDR = data;
   16204:	f3c5 4207 	ubfx	r2, r5, #16, #8
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   16208:	683b      	ldr	r3, [r7, #0]
		port().TDR = data;
   1620a:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1620c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1620e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   16212:	d0fb      	beq.n	1620c <TMC2660Stepper::write(unsigned char, unsigned long)+0x6c>
   16214:	f3c5 2207 	ubfx	r2, r5, #8, #8
   16218:	6f59      	ldr	r1, [r3, #116]	; 0x74
		port().TDR = data;
   1621a:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1621c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1621e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   16222:	d0fb      	beq.n	1621c <TMC2660Stepper::write(unsigned char, unsigned long)+0x7c>
   16224:	b2ed      	uxtb	r5, r5
   16226:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		port().TDR = data;
   16228:	665d      	str	r5, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1622a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1622c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   16230:	d0fb      	beq.n	1622a <TMC2660Stepper::write(unsigned char, unsigned long)+0x8a>
		if (interruptMasksUsed) {
   16232:	7cfa      	ldrb	r2, [r7, #19]
			if (fifo > 0) return port().RDR;
   16234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		if (interruptMasksUsed) {
   16236:	2a00      	cmp	r2, #0
   16238:	d0cc      	beq.n	161d4 <TMC2660Stepper::write(unsigned char, unsigned long)+0x34>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   1623a:	07d6      	lsls	r6, r2, #31
   1623c:	d504      	bpl.n	16248 <TMC2660Stepper::write(unsigned char, unsigned long)+0xa8>
   1623e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16240:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16244:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   16248:	0795      	lsls	r5, r2, #30
   1624a:	d504      	bpl.n	16256 <TMC2660Stepper::write(unsigned char, unsigned long)+0xb6>
   1624c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1624e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16252:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   16256:	0750      	lsls	r0, r2, #29
   16258:	d504      	bpl.n	16264 <TMC2660Stepper::write(unsigned char, unsigned long)+0xc4>
   1625a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1625c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16260:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   16264:	0711      	lsls	r1, r2, #28
   16266:	d504      	bpl.n	16272 <TMC2660Stepper::write(unsigned char, unsigned long)+0xd2>
   16268:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1626a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1626e:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   16272:	06d3      	lsls	r3, r2, #27
   16274:	d5ae      	bpl.n	161d4 <TMC2660Stepper::write(unsigned char, unsigned long)+0x34>
   16276:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16278:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1627c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   16280:	e7a8      	b.n	161d4 <TMC2660Stepper::write(unsigned char, unsigned long)+0x34>
   16282:	bf00      	nop
   16284:	c0000007 	.word	0xc0000007
   16288:	200036d8 	.word	0x200036d8

0001628c <TMC2660Stepper::begin()>:

void TMC2660Stepper::begin() {
   1628c:	b510      	push	{r4, lr}
   1628e:	4604      	mov	r4, r0
  //set pins
  pinMode(_pinCS, OUTPUT);
   16290:	2101      	movs	r1, #1
   16292:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   16296:	f002 f831 	bl	182fc <pinMode>
  digitalWrite(_pinCS, state);
   1629a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   1629e:	2101      	movs	r1, #1
   162a0:	f001 fff0 	bl	18284 <digitalWrite>
  switchCSpin(HIGH);

  //TODO: Push shadow registers

  toff(8); //off_time(8);
   162a4:	4620      	mov	r0, r4
   162a6:	2108      	movs	r1, #8
   162a8:	f7ff f990 	bl	155cc <TMC2660Stepper::toff(unsigned char)>
  tbl(1); //blank_time(24);
   162ac:	4620      	mov	r0, r4
   162ae:	2101      	movs	r1, #1
}
   162b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tbl(1); //blank_time(24);
   162b4:	f7ff b9d2 	b.w	1565c <TMC2660Stepper::tbl(unsigned char)>

000162b8 <TMC2660Stepper::rms_current(unsigned short)>:

uint16_t TMC2660Stepper::rms_current() {
  return cs2rms(cs());
}
void TMC2660Stepper::rms_current(uint16_t mA) {
  uint8_t CS = 32.0*1.41421*mA/1000.0*Rsense/0.310 - 1;
   162b8:	ee06 1a90 	vmov	s13, r1
   162bc:	ed9f 7b24 	vldr	d7, [pc, #144]	; 16350 <TMC2660Stepper::rms_current(unsigned short)+0x98>
   162c0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   162c4:	ed9f 4b24 	vldr	d4, [pc, #144]	; 16358 <TMC2660Stepper::rms_current(unsigned short)+0xa0>
   162c8:	ee26 6b07 	vmul.f64	d6, d6, d7
   162cc:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
   162d0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
void TMC2660Stepper::rms_current(uint16_t mA) {
   162d4:	b530      	push	{r4, r5, lr}
   162d6:	ed2d 8b04 	vpush	{d8-d9}
  uint8_t CS = 32.0*1.41421*mA/1000.0*Rsense/0.310 - 1;
   162da:	ee86 9b04 	vdiv.f64	d9, d6, d4
void TMC2660Stepper::rms_current(uint16_t mA) {
   162de:	b083      	sub	sp, #12
   162e0:	4605      	mov	r5, r0
  uint8_t CS = 32.0*1.41421*mA/1000.0*Rsense/0.310 - 1;
   162e2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
   162e6:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 16360 <TMC2660Stepper::rms_current(unsigned short)+0xa8>
   162ea:	ee27 7b09 	vmul.f64	d7, d7, d9
   162ee:	ee87 6b05 	vdiv.f64	d6, d7, d5
   162f2:	ee36 6b48 	vsub.f64	d6, d6, d8
   162f6:	eefc 7bc6 	vcvt.u32.f64	s15, d6
   162fa:	edcd 7a01 	vstr	s15, [sp, #4]
   162fe:	f89d 4004 	ldrb.w	r4, [sp, #4]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
   16302:	2c0f      	cmp	r4, #15
   16304:	d820      	bhi.n	16348 <TMC2660Stepper::rms_current(unsigned short)+0x90>
    vsense(true);
   16306:	2101      	movs	r1, #1
   16308:	f7ff f9e0 	bl	156cc <TMC2660Stepper::vsense(bool)>
    CS = 32.0*1.41421*mA/1000.0*Rsense/0.165 - 1;
   1630c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
   16310:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   16314:	ed9f 5b14 	vldr	d5, [pc, #80]	; 16368 <TMC2660Stepper::rms_current(unsigned short)+0xb0>
   16318:	ee27 7b09 	vmul.f64	d7, d7, d9
   1631c:	ee87 6b05 	vdiv.f64	d6, d7, d5
   16320:	ee36 6b48 	vsub.f64	d6, d6, d8
   16324:	eefc 7bc6 	vcvt.u32.f64	s15, d6
   16328:	edcd 7a01 	vstr	s15, [sp, #4]
   1632c:	f89d 4004 	ldrb.w	r4, [sp, #4]
  }

  if (CS > 31)
    CS = 31;

  cs(CS);
   16330:	2c1f      	cmp	r4, #31
   16332:	4621      	mov	r1, r4
   16334:	4628      	mov	r0, r5
   16336:	bf28      	it	cs
   16338:	211f      	movcs	r1, #31
  //val_mA = mA;
}
   1633a:	b003      	add	sp, #12
   1633c:	ecbd 8b04 	vpop	{d8-d9}
   16340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  cs(CS);
   16344:	f7ff bb28 	b.w	15998 <TMC2660Stepper::cs(unsigned char)>
    vsense(false);
   16348:	2100      	movs	r1, #0
   1634a:	f7ff f9bf 	bl	156cc <TMC2660Stepper::vsense(bool)>
   1634e:	e7ef      	b.n	16330 <TMC2660Stepper::rms_current(unsigned short)+0x78>
   16350:	aa3ad18d 	.word	0xaa3ad18d
   16354:	4046a09a 	.word	0x4046a09a
   16358:	00000000 	.word	0x00000000
   1635c:	408f4000 	.word	0x408f4000
   16360:	3d70a3d7 	.word	0x3d70a3d7
   16364:	3fd3d70a 	.word	0x3fd3d70a
   16368:	51eb851f 	.word	0x51eb851f
   1636c:	3fc51eb8 	.word	0x3fc51eb8

00016370 <TMC2660Stepper::microsteps(unsigned short)>:

void TMC2660Stepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMC2660Stepper::hysteresis_start() { return hstrt()+1; }

void TMC2660Stepper::microsteps(uint16_t ms) {
  switch(ms) {
   16370:	2920      	cmp	r1, #32
   16372:	d814      	bhi.n	1639e <TMC2660Stepper::microsteps(unsigned short)+0x2e>
   16374:	2920      	cmp	r1, #32
   16376:	d81f      	bhi.n	163b8 <TMC2660Stepper::microsteps(unsigned short)+0x48>
   16378:	e8df f001 	tbb	[pc, r1]
   1637c:	1e221e1f 	.word	0x1e221e1f
   16380:	1e1e1e25 	.word	0x1e1e1e25
   16384:	1e1e1e28 	.word	0x1e1e1e28
   16388:	1e1e1e1e 	.word	0x1e1e1e1e
   1638c:	1e1e1e2b 	.word	0x1e1e1e2b
   16390:	1e1e1e1e 	.word	0x1e1e1e1e
   16394:	1e1e1e1e 	.word	0x1e1e1e1e
   16398:	1e1e1e1e 	.word	0x1e1e1e1e
   1639c:	2e          	.byte	0x2e
   1639d:	00          	.byte	0x00
   1639e:	2980      	cmp	r1, #128	; 0x80
   163a0:	d01d      	beq.n	163de <TMC2660Stepper::microsteps(unsigned short)+0x6e>
   163a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   163a6:	d102      	bne.n	163ae <TMC2660Stepper::microsteps(unsigned short)+0x3e>
    case 256: mres(0); break;
   163a8:	2100      	movs	r1, #0
   163aa:	f7ff b9e9 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
  switch(ms) {
   163ae:	2940      	cmp	r1, #64	; 0x40
   163b0:	d118      	bne.n	163e4 <TMC2660Stepper::microsteps(unsigned short)+0x74>
    case 128: mres(1); break;
    case  64: mres(2); break;
   163b2:	2102      	movs	r1, #2
   163b4:	f7ff b9e4 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   0: mres(8); break;
    default: break;
  }
}
   163b8:	4770      	bx	lr
    case   0: mres(8); break;
   163ba:	2108      	movs	r1, #8
   163bc:	f7ff b9e0 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case   2: mres(7); break;
   163c0:	2107      	movs	r1, #7
   163c2:	f7ff b9dd 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case   4: mres(6); break;
   163c6:	2106      	movs	r1, #6
   163c8:	f7ff b9da 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case   8: mres(5); break;
   163cc:	2105      	movs	r1, #5
   163ce:	f7ff b9d7 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case  16: mres(4); break;
   163d2:	2104      	movs	r1, #4
   163d4:	f7ff b9d4 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case  32: mres(3); break;
   163d8:	2103      	movs	r1, #3
   163da:	f7ff b9d1 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
    case 128: mres(1); break;
   163de:	2101      	movs	r1, #1
   163e0:	f7ff b9ce 	b.w	15780 <TMC2660Stepper::mres(unsigned char)>
   163e4:	4770      	bx	lr
   163e6:	bf00      	nop

000163e8 <TMC5130Stepper::TMC5130Stepper(unsigned short, float, signed char)>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
   163e8:	b538      	push	{r3, r4, r5, lr}
   163ea:	4604      	mov	r4, r0
   163ec:	f7ff fd54 	bl	15e98 <TMC2160Stepper::TMC2160Stepper(unsigned short, float, signed char)>
   163f0:	4b16      	ldr	r3, [pc, #88]	; (1644c <TMC5130Stepper::TMC5130Stepper(unsigned short, float, signed char)+0x64>)
   163f2:	2000      	movs	r0, #0
   163f4:	4916      	ldr	r1, [pc, #88]	; (16450 <TMC5130Stepper::TMC5130Stepper(unsigned short, float, signed char)+0x68>)
   163f6:	6520      	str	r0, [r4, #80]	; 0x50
   163f8:	6021      	str	r1, [r4, #0]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
   163fa:	4916      	ldr	r1, [pc, #88]	; (16454 <TMC5130Stepper::TMC5130Stepper(unsigned short, float, signed char)+0x6c>)
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
   163fc:	65e0      	str	r0, [r4, #92]	; 0x5c
  PWMCONF_register.sr = 0x00050480;
   163fe:	6461      	str	r1, [r4, #68]	; 0x44
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
   16400:	e9d4 5212 	ldrd	r5, r2, [r4, #72]	; 0x48
   16404:	402b      	ands	r3, r5
   16406:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
   1640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1640e:	64e2      	str	r2, [r4, #76]	; 0x4c
   16410:	64a3      	str	r3, [r4, #72]	; 0x48
   16412:	e9d4 2518 	ldrd	r2, r5, [r4, #96]	; 0x60
   16416:	e9d4 3115 	ldrd	r3, r1, [r4, #84]	; 0x54
   1641a:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1641e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
   16422:	f001 4070 	and.w	r0, r1, #4026531840	; 0xf0000000
   16426:	6622      	str	r2, [r4, #96]	; 0x60
   16428:	f005 417c 	and.w	r1, r5, #4227858432	; 0xfc000000
   1642c:	6563      	str	r3, [r4, #84]	; 0x54
   1642e:	65a0      	str	r0, [r4, #88]	; 0x58
  ENC_CONST_register.sr = 65536;
   16430:	2001      	movs	r0, #1
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
   16432:	6661      	str	r1, [r4, #100]	; 0x64
  ENC_CONST_register.sr = 65536;
   16434:	f8a4 0070 	strh.w	r0, [r4, #112]	; 0x70
  { defaults(); }
   16438:	4620      	mov	r0, r4
TMC5130Stepper::TMC5130Stepper(uint16_t pinCS, float RS, int8_t link) : TMC2160Stepper(pinCS, RS, link)
   1643a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1643e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   16442:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
   16446:	66a2      	str	r2, [r4, #104]	; 0x68
   16448:	66e3      	str	r3, [r4, #108]	; 0x6c
  { defaults(); }
   1644a:	bd38      	pop	{r3, r4, r5, pc}
   1644c:	00fef000 	.word	0x00fef000
   16450:	20002534 	.word	0x20002534
   16454:	00050480 	.word	0x00050480

00016458 <TMC5130Stepper::begin()>:
void TMC5130Stepper::begin() {
   16458:	b510      	push	{r4, lr}
   1645a:	4604      	mov	r4, r0
  TMC2160Stepper::begin();
   1645c:	f7ff fd42 	bl	15ee4 <TMC2160Stepper::begin()>
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
  write(XTARGET_t::address, input);
   16460:	2200      	movs	r2, #0
   16462:	212d      	movs	r1, #45	; 0x2d
   16464:	6823      	ldr	r3, [r4, #0]
   16466:	4620      	mov	r0, r4
   16468:	681b      	ldr	r3, [r3, #0]
   1646a:	4798      	blx	r3
  write(XACTUAL_register.address, input);
   1646c:	6823      	ldr	r3, [r4, #0]
   1646e:	4620      	mov	r0, r4
   16470:	2200      	movs	r2, #0
   16472:	2121      	movs	r1, #33	; 0x21
   16474:	681b      	ldr	r3, [r3, #0]
}
   16476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write(XACTUAL_register.address, input);
   1647a:	4718      	bx	r3

0001647c <TMC5160Stepper::TMC5160Stepper(unsigned short, float, signed char)>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   1647c:	b538      	push	{r3, r4, r5, lr}
   1647e:	4604      	mov	r4, r0
   16480:	f7ff ffb2 	bl	163e8 <TMC5130Stepper::TMC5130Stepper(unsigned short, float, signed char)>
   16484:	2000      	movs	r0, #0
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, uint16_t pinMOSI, uint16_t pinMISO, uint16_t pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
  SHORT_CONF_register.s2vs_level = 6;
   16486:	2106      	movs	r1, #6
  SHORT_CONF_register.s2g_level = 6;
  SHORT_CONF_register.shortfilter = 0b01;
  SHORT_CONF_register.shortdelay = 0;
  DRV_CONF_register.bbmtime = 0;
   16488:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
  SHORT_CONF_register.s2g_level = 6;
   1648c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  DRV_CONF_register.bbmtime = 0;
   1648e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   16492:	f894 c074 	ldrb.w	ip, [r4, #116]	; 0x74
  SHORT_CONF_register.s2g_level = 6;
   16496:	f422 62e1 	bic.w	r2, r2, #1800	; 0x708
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   1649a:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
  DRV_CONF_register.bbmtime = 0;
   1649e:	f023 030f 	bic.w	r3, r3, #15
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   164a2:	f02c 0c0f 	bic.w	ip, ip, #15
  SHORT_CONF_register.s2g_level = 6;
   164a6:	f022 0207 	bic.w	r2, r2, #7
  DRV_CONF_register.bbmclks = 4;
  DRV_CONF_register.otselect = 0b00;
  DRV_CONF_register.drvstrength = 0b10;
  DRV_CONF_register.filt_isense = 0b00;
  TPOWERDOWN_register.sr = 10;
  VSTOP_register.sr = 1;
   164aa:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
  DRV_CONF_register.bbmtime = 0;
   164ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  ENC_CONST_register.sr = 65536;
   164b2:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
  SHORT_CONF_register.s2g_level = 6;
   164b6:	f442 7283 	orr.w	r2, r2, #262	; 0x106
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
   164ba:	2050      	movs	r0, #80	; 0x50
  DRV_CONF_register.bbmtime = 0;
   164bc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  DRV_CONF_register.otselect = 0b00;
   164c0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  SHORT_CONF_register.s2g_level = 6;
   164c4:	87e2      	strh	r2, [r4, #62]	; 0x3e
  CHOPCONF_register.sr = 0x10410150;
   164c6:	2241      	movs	r2, #65	; 0x41
  DRV_CONF_register.otselect = 0b00;
   164c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   164cc:	4d14      	ldr	r5, [pc, #80]	; (16520 <TMC5160Stepper::TMC5160Stepper(unsigned short, float, signed char)+0xa4>)
  CHOPCONF_register.sr = 0x10410150;
   164ce:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  DRV_CONF_register.otselect = 0b00;
   164d2:	f043 0308 	orr.w	r3, r3, #8
  PWMCONF_register.sr = 0xC40C001E;
   164d6:	4a13      	ldr	r2, [pc, #76]	; (16524 <TMC5160Stepper::TMC5160Stepper(unsigned short, float, signed char)+0xa8>)
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   164d8:	f884 c074 	strb.w	ip, [r4, #116]	; 0x74
  TPOWERDOWN_register.sr = 10;
   164dc:	f04f 0c0a 	mov.w	ip, #10
  DRV_CONF_register.otselect = 0b00;
   164e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  VSTOP_register.sr = 1;
   164e4:	2301      	movs	r3, #1
  PWMCONF_register.sr = 0xC40C001E;
   164e6:	6462      	str	r2, [r4, #68]	; 0x44
  VSTOP_register.sr = 1;
   164e8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   164ec:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  ENC_CONST_register.sr = 65536;
   164f0:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  CHOPCONF_register.sr = 0x10410150;
   164f4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  VSTOP_register.sr = 1;
   164f8:	f022 0203 	bic.w	r2, r2, #3
  SHORT_CONF_register.s2vs_level = 6;
   164fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  CHOPCONF_register.sr = 0x10410150;
   16500:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
   16504:	2010      	movs	r0, #16
  SHORT_CONF_register.s2vs_level = 6;
   16506:	f361 0303 	bfi	r3, r1, #0, #4
TMC5160Stepper::TMC5160Stepper(uint16_t pinCS, float RS, int8_t link) : TMC5130Stepper(pinCS, RS, link)
   1650a:	6025      	str	r5, [r4, #0]
  CHOPCONF_register.sr = 0x10410150;
   1650c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  { defaults(); }
   16510:	4620      	mov	r0, r4
  TPOWERDOWN_register.sr = 10;
   16512:	f884 c007 	strb.w	ip, [r4, #7]
  VSTOP_register.sr = 1;
   16516:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
  SHORT_CONF_register.s2vs_level = 6;
   1651a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  { defaults(); }
   1651e:	bd38      	pop	{r3, r4, r5, pc}
   16520:	20002570 	.word	0x20002570
   16524:	c40c001e 	.word	0xc40c001e

00016528 <TMCStepper::rms_current(unsigned short)>:
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
   16528:	ee06 1a90 	vmov	s13, r1
    vsense(true);
   1652c:	6803      	ldr	r3, [r0, #0]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
   1652e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 165f0 <TMCStepper::rms_current(unsigned short)+0xc8>
   16532:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   16536:	ed9f 4b30 	vldr	d4, [pc, #192]	; 165f8 <TMCStepper::rms_current(unsigned short)+0xd0>
   1653a:	ee26 6b07 	vmul.f64	d6, d6, d7
   1653e:	ed90 7a03 	vldr	s14, [r0, #12]
   16542:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
void TMCStepper::rms_current(uint16_t mA) {
   16546:	b530      	push	{r4, r5, lr}
   16548:	ed2d 8b06 	vpush	{d8-d10}
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
   1654c:	ee86 ab04 	vdiv.f64	d10, d6, d4
void TMCStepper::rms_current(uint16_t mA) {
   16550:	b083      	sub	sp, #12
   16552:	4605      	mov	r5, r0
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
   16554:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
   16558:	ed9f 9b29 	vldr	d9, [pc, #164]	; 16600 <TMCStepper::rms_current(unsigned short)+0xd8>
   1655c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 16608 <TMCStepper::rms_current(unsigned short)+0xe0>
   16560:	ee37 7b09 	vadd.f64	d7, d7, d9
   16564:	ee27 7b0a 	vmul.f64	d7, d7, d10
   16568:	ee87 6b05 	vdiv.f64	d6, d7, d5
   1656c:	ee36 6b48 	vsub.f64	d6, d6, d8
   16570:	eefc 7bc6 	vcvt.u32.f64	s15, d6
   16574:	edcd 7a01 	vstr	s15, [sp, #4]
   16578:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (CS < 16) {
   1657c:	2c0f      	cmp	r4, #15
   1657e:	d833      	bhi.n	165e8 <TMCStepper::rms_current(unsigned short)+0xc0>
    vsense(true);
   16580:	2101      	movs	r1, #1
   16582:	689b      	ldr	r3, [r3, #8]
   16584:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
   16586:	ed95 7a03 	vldr	s14, [r5, #12]
   1658a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
   1658e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 16610 <TMCStepper::rms_current(unsigned short)+0xe8>
   16592:	ee37 7b09 	vadd.f64	d7, d7, d9
   16596:	ee27 7b0a 	vmul.f64	d7, d7, d10
   1659a:	ee87 6b05 	vdiv.f64	d6, d7, d5
   1659e:	ee36 6b48 	vsub.f64	d6, d6, d8
   165a2:	eefc 7bc6 	vcvt.u32.f64	s15, d6
   165a6:	edcd 7a01 	vstr	s15, [sp, #4]
   165aa:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (CS > 31)
   165ae:	2c1f      	cmp	r4, #31
  irun(CS);
   165b0:	4628      	mov	r0, r5
   165b2:	bf28      	it	cs
   165b4:	241f      	movcs	r4, #31
   165b6:	4621      	mov	r1, r4
   165b8:	f7ff f98e 	bl	158d8 <TMCStepper::irun(unsigned char)>
  ihold(CS*holdMultiplier);
   165bc:	ee07 4a90 	vmov	s15, r4
   165c0:	ed95 7a04 	vldr	s14, [r5, #16]
   165c4:	4628      	mov	r0, r5
   165c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   165ca:	ee67 7a87 	vmul.f32	s15, s15, s14
   165ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   165d2:	edcd 7a01 	vstr	s15, [sp, #4]
   165d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
}
   165da:	b003      	add	sp, #12
   165dc:	ecbd 8b06 	vpop	{d8-d10}
   165e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  ihold(CS*holdMultiplier);
   165e4:	f7ff b968 	b.w	158b8 <TMCStepper::ihold(unsigned char)>
    vsense(false);
   165e8:	2100      	movs	r1, #0
   165ea:	689b      	ldr	r3, [r3, #8]
   165ec:	4798      	blx	r3
   165ee:	e7de      	b.n	165ae <TMCStepper::rms_current(unsigned short)+0x86>
   165f0:	aa3ad18d 	.word	0xaa3ad18d
   165f4:	4046a09a 	.word	0x4046a09a
   165f8:	00000000 	.word	0x00000000
   165fc:	408f4000 	.word	0x408f4000
   16600:	47ae147b 	.word	0x47ae147b
   16604:	3f947ae1 	.word	0x3f947ae1
   16608:	cccccccd 	.word	0xcccccccd
   1660c:	3fd4cccc 	.word	0x3fd4cccc
   16610:	70a3d70a 	.word	0x70a3d70a
   16614:	3fc70a3d 	.word	0x3fc70a3d

00016618 <TMCStepper::rms_current(unsigned short, float)>:
  holdMultiplier = mult;
   16618:	ed80 0a04 	vstr	s0, [r0, #16]
  rms_current(mA);
   1661c:	f7ff bf84 	b.w	16528 <TMCStepper::rms_current(unsigned short)>

00016620 <TMCStepper::microsteps(unsigned short)>:

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
  switch(ms) {
   16620:	2920      	cmp	r1, #32
   16622:	d814      	bhi.n	1664e <TMCStepper::microsteps(unsigned short)+0x2e>
   16624:	2920      	cmp	r1, #32
   16626:	d821      	bhi.n	1666c <TMCStepper::microsteps(unsigned short)+0x4c>
   16628:	e8df f001 	tbb	[pc, r1]
   1662c:	20252021 	.word	0x20252021
   16630:	20202029 	.word	0x20202029
   16634:	2020202d 	.word	0x2020202d
   16638:	20202020 	.word	0x20202020
   1663c:	20202031 	.word	0x20202031
   16640:	20202020 	.word	0x20202020
   16644:	20202020 	.word	0x20202020
   16648:	20202020 	.word	0x20202020
   1664c:	35          	.byte	0x35
   1664d:	00          	.byte	0x00
   1664e:	2980      	cmp	r1, #128	; 0x80
   16650:	d025      	beq.n	1669e <TMCStepper::microsteps(unsigned short)+0x7e>
   16652:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16656:	d103      	bne.n	16660 <TMCStepper::microsteps(unsigned short)+0x40>
    case 256: mres(0); break;
   16658:	6803      	ldr	r3, [r0, #0]
   1665a:	2100      	movs	r1, #0
   1665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1665e:	4718      	bx	r3
  switch(ms) {
   16660:	2940      	cmp	r1, #64	; 0x40
   16662:	d120      	bne.n	166a6 <TMCStepper::microsteps(unsigned short)+0x86>
    case 128: mres(1); break;
    case  64: mres(2); break;
   16664:	6803      	ldr	r3, [r0, #0]
   16666:	2102      	movs	r1, #2
   16668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1666a:	4718      	bx	r3
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   0: mres(8); break;
    default: break;
  }
}
   1666c:	4770      	bx	lr
    case   0: mres(8); break;
   1666e:	6802      	ldr	r2, [r0, #0]
   16670:	2108      	movs	r1, #8
   16672:	6a53      	ldr	r3, [r2, #36]	; 0x24
   16674:	4718      	bx	r3
    case   2: mres(7); break;
   16676:	6802      	ldr	r2, [r0, #0]
   16678:	2107      	movs	r1, #7
   1667a:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1667c:	4718      	bx	r3
    case   4: mres(6); break;
   1667e:	6802      	ldr	r2, [r0, #0]
   16680:	2106      	movs	r1, #6
   16682:	6a53      	ldr	r3, [r2, #36]	; 0x24
   16684:	4718      	bx	r3
    case   8: mres(5); break;
   16686:	6802      	ldr	r2, [r0, #0]
   16688:	2105      	movs	r1, #5
   1668a:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1668c:	4718      	bx	r3
    case  16: mres(4); break;
   1668e:	6802      	ldr	r2, [r0, #0]
   16690:	2104      	movs	r1, #4
   16692:	6a53      	ldr	r3, [r2, #36]	; 0x24
   16694:	4718      	bx	r3
    case  32: mres(3); break;
   16696:	6802      	ldr	r2, [r0, #0]
   16698:	2103      	movs	r1, #3
   1669a:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1669c:	4718      	bx	r3
    case 128: mres(1); break;
   1669e:	6803      	ldr	r3, [r0, #0]
   166a0:	2101      	movs	r1, #1
   166a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   166a4:	4718      	bx	r3
   166a6:	4770      	bx	lr

000166a8 <TinyGPSPlus::TinyGPSPlus()>:
   TinyGPSLocation() : valid(false), updated(false)
   166a8:	2200      	movs	r2, #0
#define _GNGGAterm   "GNGGA"

TinyGPSPlus::TinyGPSPlus()
  :  parity(0)
  ,  isChecksumTerm(false)
  ,  curSentenceType(GPS_SENTENCE_OTHER)
   166aa:	2102      	movs	r1, #2
   166ac:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   166ae:	8082      	strh	r2, [r0, #4]
   166b0:	6082      	str	r2, [r0, #8]
   166b2:	7302      	strb	r2, [r0, #12]
   166b4:	8202      	strh	r2, [r0, #16]
   166b6:	6142      	str	r2, [r0, #20]
   166b8:	7602      	strb	r2, [r0, #24]
   166ba:	8382      	strh	r2, [r0, #28]
   166bc:	6202      	str	r2, [r0, #32]
   166be:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   166c2:	8502      	strh	r2, [r0, #40]	; 0x28
   166c4:	62c2      	str	r2, [r0, #44]	; 0x2c
   166c6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   TinyGPSDate() : valid(false), updated(false), date(0)
   166ca:	8702      	strh	r2, [r0, #56]	; 0x38
   166cc:	63c2      	str	r2, [r0, #60]	; 0x3c
   TinyGPSTime() : valid(false), updated(false), time(0)
   166ce:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   166d2:	64c2      	str	r2, [r0, #76]	; 0x4c
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   166d4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   166d8:	6602      	str	r2, [r0, #96]	; 0x60
   166da:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   166de:	6702      	str	r2, [r0, #112]	; 0x70
   166e0:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   166e4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   TinyGPSInteger() : valid(false), updated(false), val(0)
   166e8:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   166ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   166f0:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   166f4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   166f8:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
  ,  curTermNumber(0)
   166fc:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
  ,  curTermOffset(0)
  ,  sentenceHasFix(false)
   16700:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
  ,  customElts(0)
  ,  customCandidates(0)
   16704:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
   16708:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   1670c:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
  :  parity(0)
   16710:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   16714:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   16718:	4770      	bx	lr
   1671a:	bf00      	nop

0001671c <TinyGPSPlus::parseDecimal(char const*)>:
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   1671c:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   1671e:	7805      	ldrb	r5, [r0, #0]
{
   16720:	4604      	mov	r4, r0
  if (negative) ++term;
   16722:	2d2d      	cmp	r5, #45	; 0x2d
   16724:	bf08      	it	eq
   16726:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   16728:	4620      	mov	r0, r4
   1672a:	f006 ff2b 	bl	1d584 <atol>
   1672e:	2264      	movs	r2, #100	; 0x64
  while (isdigit(*term)) ++term;
   16730:	7823      	ldrb	r3, [r4, #0]
  int32_t ret = 100 * (int32_t)atol(term);
   16732:	fb02 f000 	mul.w	r0, r2, r0
  while (isdigit(*term)) ++term;
   16736:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1673a:	2a09      	cmp	r2, #9
   1673c:	d805      	bhi.n	1674a <TinyGPSPlus::parseDecimal(char const*)+0x2e>
   1673e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   16742:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   16746:	2a09      	cmp	r2, #9
   16748:	d9f9      	bls.n	1673e <TinyGPSPlus::parseDecimal(char const*)+0x22>
  if (*term == '.' && isdigit(term[1]))
   1674a:	2b2e      	cmp	r3, #46	; 0x2e
   1674c:	d003      	beq.n	16756 <TinyGPSPlus::parseDecimal(char const*)+0x3a>
  {
    ret += 10 * (term[1] - '0');
    if (isdigit(term[2]))
      ret += term[2] - '0';
  }
  return negative ? -ret : ret;
   1674e:	2d2d      	cmp	r5, #45	; 0x2d
   16750:	bf08      	it	eq
   16752:	4240      	negeq	r0, r0
}
   16754:	bd38      	pop	{r3, r4, r5, pc}
  if (*term == '.' && isdigit(term[1]))
   16756:	7863      	ldrb	r3, [r4, #1]
   16758:	3b30      	subs	r3, #48	; 0x30
   1675a:	2b09      	cmp	r3, #9
   1675c:	d8f7      	bhi.n	1674e <TinyGPSPlus::parseDecimal(char const*)+0x32>
    if (isdigit(term[2]))
   1675e:	78a2      	ldrb	r2, [r4, #2]
    ret += 10 * (term[1] - '0');
   16760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    if (isdigit(term[2]))
   16764:	3a30      	subs	r2, #48	; 0x30
    ret += 10 * (term[1] - '0');
   16766:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    if (isdigit(term[2]))
   1676a:	2a09      	cmp	r2, #9
      ret += term[2] - '0';
   1676c:	bf98      	it	ls
   1676e:	1880      	addls	r0, r0, r2
  return negative ? -ret : ret;
   16770:	2d2d      	cmp	r5, #45	; 0x2d
   16772:	bf08      	it	eq
   16774:	4240      	negeq	r0, r0
}
   16776:	bd38      	pop	{r3, r4, r5, pc}

00016778 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   16778:	b570      	push	{r4, r5, r6, lr}
   1677a:	460d      	mov	r5, r1
   1677c:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   1677e:	f006 ff01 	bl	1d584 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   16782:	4b1b      	ldr	r3, [pc, #108]	; (167f0 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x78>)
   16784:	2264      	movs	r2, #100	; 0x64
   16786:	fba3 1300 	umull	r1, r3, r3, r0
   1678a:	095b      	lsrs	r3, r3, #5
   1678c:	fb02 0013 	mls	r0, r2, r3, r0
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;

  deg.deg = (int16_t)(leftOfDecimal / 100);
   16790:	802b      	strh	r3, [r5, #0]

  while (isdigit(*term))
   16792:	7822      	ldrb	r2, [r4, #0]
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   16794:	4b17      	ldr	r3, [pc, #92]	; (167f4 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x7c>)
  while (isdigit(*term))
   16796:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   1679a:	fb00 f303 	mul.w	r3, r0, r3
  while (isdigit(*term))
   1679e:	2909      	cmp	r1, #9
   167a0:	d805      	bhi.n	167ae <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x36>
   167a2:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   167a6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   167aa:	2909      	cmp	r1, #9
   167ac:	d9f9      	bls.n	167a2 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x2a>
    ++term;

  if (*term == '.')
   167ae:	2a2e      	cmp	r2, #46	; 0x2e
   167b0:	d00a      	beq.n	167c8 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x50>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   167b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   167b6:	4a10      	ldr	r2, [pc, #64]	; (167f8 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x80>)
  deg.negative = false;
   167b8:	2100      	movs	r1, #0
  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   167ba:	3301      	adds	r3, #1
  deg.negative = false;
   167bc:	7229      	strb	r1, [r5, #8]
  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   167be:	fba2 2303 	umull	r2, r3, r2, r3
   167c2:	085b      	lsrs	r3, r3, #1
   167c4:	606b      	str	r3, [r5, #4]
}
   167c6:	bd70      	pop	{r4, r5, r6, pc}
    while (isdigit(*++term))
   167c8:	7860      	ldrb	r0, [r4, #1]
   167ca:	3401      	adds	r4, #1
   167cc:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
   167d0:	2909      	cmp	r1, #9
   167d2:	d8ee      	bhi.n	167b2 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x3a>
  uint32_t multiplier = 10000000UL;
   167d4:	4a07      	ldr	r2, [pc, #28]	; (167f4 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x7c>)
      multiplier /= 10;
   167d6:	4e09      	ldr	r6, [pc, #36]	; (167fc <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x84>)
   167d8:	fba6 0202 	umull	r0, r2, r6, r2
    while (isdigit(*++term))
   167dc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      multiplier /= 10;
   167e0:	08d2      	lsrs	r2, r2, #3
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   167e2:	fb02 3301 	mla	r3, r2, r1, r3
    while (isdigit(*++term))
   167e6:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
   167ea:	2909      	cmp	r1, #9
   167ec:	d9f4      	bls.n	167d8 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x60>
   167ee:	e7e0      	b.n	167b2 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)+0x3a>
   167f0:	51eb851f 	.word	0x51eb851f
   167f4:	00989680 	.word	0x00989680
   167f8:	aaaaaaab 	.word	0xaaaaaaab
   167fc:	cccccccd 	.word	0xcccccccd

00016800 <TinyGPSPlus::endOfTermHandler()>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   16800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   16804:	f890 60a9 	ldrb.w	r6, [r0, #169]	; 0xa9
{
   16808:	4604      	mov	r4, r0
  if (isChecksumTerm)
   1680a:	b356      	cbz	r6, 16862 <TinyGPSPlus::endOfTermHandler()+0x62>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   1680c:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
  if (a >= 'A' && a <= 'F')
   16810:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   16814:	2a05      	cmp	r2, #5
   16816:	d975      	bls.n	16904 <TinyGPSPlus::endOfTermHandler()+0x104>
  else if (a >= 'a' && a <= 'f')
   16818:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1681c:	2a05      	cmp	r2, #5
    return a - 'a' + 10;
   1681e:	bf94      	ite	ls
   16820:	3b57      	subls	r3, #87	; 0x57
    return a - '0';
   16822:	3b30      	subhi	r3, #48	; 0x30
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   16824:	f894 20ab 	ldrb.w	r2, [r4, #171]	; 0xab
   16828:	011b      	lsls	r3, r3, #4
  if (a >= 'A' && a <= 'F')
   1682a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   1682e:	b2db      	uxtb	r3, r3
  if (a >= 'A' && a <= 'F')
   16830:	2905      	cmp	r1, #5
   16832:	f240 80f9 	bls.w	16a28 <TinyGPSPlus::endOfTermHandler()+0x228>
  else if (a >= 'a' && a <= 'f')
   16836:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1683a:	2905      	cmp	r1, #5
    return a - 'a' + 10;
   1683c:	bf94      	ite	ls
   1683e:	3a57      	subls	r2, #87	; 0x57
    return a - '0';
   16840:	3a30      	subhi	r2, #48	; 0x30
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   16842:	4413      	add	r3, r2
    if (checksum == parity)
   16844:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   16848:	b2db      	uxtb	r3, r3
   1684a:	429a      	cmp	r2, r3
   1684c:	f000 80b6 	beq.w	169bc <TinyGPSPlus::endOfTermHandler()+0x1bc>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   16850:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   16854:	2600      	movs	r6, #0
      ++failedChecksumCount;
   16856:	3301      	adds	r3, #1
   16858:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   1685c:	4630      	mov	r0, r6
   1685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (curTermNumber == 0)
   16862:	f890 70ba 	ldrb.w	r7, [r0, #186]	; 0xba
   16866:	b337      	cbz	r7, 168b6 <TinyGPSPlus::endOfTermHandler()+0xb6>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   16868:	f890 30b9 	ldrb.w	r3, [r0, #185]	; 0xb9
   1686c:	2b02      	cmp	r3, #2
   1686e:	d003      	beq.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   16870:	f890 20aa 	ldrb.w	r2, [r0, #170]	; 0xaa
   16874:	2a00      	cmp	r2, #0
   16876:	d147      	bne.n	16908 <TinyGPSPlus::endOfTermHandler()+0x108>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   16878:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   1687c:	2d00      	cmp	r5, #0
   1687e:	d0ed      	beq.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   16880:	462b      	mov	r3, r5
   valid = updated = true;
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   16882:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
   16886:	e004      	b.n	16892 <TinyGPSPlus::endOfTermHandler()+0x92>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   16888:	6b2d      	ldr	r5, [r5, #48]	; 0x30
   1688a:	2d00      	cmp	r5, #0
   1688c:	d0e6      	beq.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   1688e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   16892:	6a99      	ldr	r1, [r3, #40]	; 0x28
   16894:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   16896:	f009 f877 	bl	1f988 <strcmp>
   1689a:	2800      	cmp	r0, #0
   1689c:	d1de      	bne.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   1689e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   168a0:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   168a4:	429a      	cmp	r2, r3
   168a6:	dcd9      	bgt.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
    if (p->termNumber == curTermNumber)
   168a8:	d1ee      	bne.n	16888 <TinyGPSPlus::endOfTermHandler()+0x88>
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   168aa:	2210      	movs	r2, #16
   168ac:	4639      	mov	r1, r7
   168ae:	4628      	mov	r0, r5
   168b0:	f008 fdbc 	bl	1f42c <strncpy>
}
   168b4:	e7e8      	b.n	16888 <TinyGPSPlus::endOfTermHandler()+0x88>
    if (!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
   168b6:	f100 08aa 	add.w	r8, r0, #170	; 0xaa
   168ba:	49bb      	ldr	r1, [pc, #748]	; (16ba8 <TinyGPSPlus::endOfTermHandler()+0x3a8>)
   168bc:	4640      	mov	r0, r8
   168be:	f009 f863 	bl	1f988 <strcmp>
   168c2:	b130      	cbz	r0, 168d2 <TinyGPSPlus::endOfTermHandler()+0xd2>
   168c4:	49b9      	ldr	r1, [pc, #740]	; (16bac <TinyGPSPlus::endOfTermHandler()+0x3ac>)
   168c6:	4640      	mov	r0, r8
   168c8:	f009 f85e 	bl	1f988 <strcmp>
   168cc:	2800      	cmp	r0, #0
   168ce:	f040 80c2 	bne.w	16a56 <TinyGPSPlus::endOfTermHandler()+0x256>
   168d2:	2701      	movs	r7, #1
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   168d4:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
      curSentenceType = GPS_SENTENCE_GPRMC;
   168d8:	f884 70b9 	strb.w	r7, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   168dc:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
   168e0:	b92d      	cbnz	r5, 168ee <TinyGPSPlus::endOfTermHandler()+0xee>
   168e2:	e7bb      	b.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   168e4:	6b2d      	ldr	r5, [r5, #48]	; 0x30
   168e6:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
   168ea:	2d00      	cmp	r5, #0
   168ec:	d0b6      	beq.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   168ee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   168f0:	4641      	mov	r1, r8
   168f2:	f009 f849 	bl	1f988 <strcmp>
   168f6:	2800      	cmp	r0, #0
   168f8:	dbf4      	blt.n	168e4 <TinyGPSPlus::endOfTermHandler()+0xe4>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   168fa:	d0af      	beq.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
       customCandidates = NULL;
   168fc:	2300      	movs	r3, #0
   168fe:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   16902:	e7ab      	b.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
    return a - 'A' + 10;
   16904:	3b37      	subs	r3, #55	; 0x37
   16906:	e78d      	b.n	16824 <TinyGPSPlus::endOfTermHandler()+0x24>
    switch(COMBINE(curSentenceType, curTermNumber))
   16908:	ea47 1743 	orr.w	r7, r7, r3, lsl #5
   1690c:	3f01      	subs	r7, #1
   1690e:	2f28      	cmp	r7, #40	; 0x28
   16910:	d8b2      	bhi.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   16912:	a301      	add	r3, pc, #4	; (adr r3, 16918 <TinyGPSPlus::endOfTermHandler()+0x118>)
   16914:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
   16918:	00016b3f 	.word	0x00016b3f
   1691c:	00016b33 	.word	0x00016b33
   16920:	00016b23 	.word	0x00016b23
   16924:	00016b17 	.word	0x00016b17
   16928:	00016b07 	.word	0x00016b07
   1692c:	00016b49 	.word	0x00016b49
   16930:	00016b9d 	.word	0x00016b9d
   16934:	00016b91 	.word	0x00016b91
   16938:	00016b7b 	.word	0x00016b7b
   1693c:	00016879 	.word	0x00016879
   16940:	00016879 	.word	0x00016879
   16944:	00016879 	.word	0x00016879
   16948:	00016879 	.word	0x00016879
   1694c:	00016879 	.word	0x00016879
   16950:	00016879 	.word	0x00016879
   16954:	00016879 	.word	0x00016879
   16958:	00016879 	.word	0x00016879
   1695c:	00016879 	.word	0x00016879
   16960:	00016879 	.word	0x00016879
   16964:	00016879 	.word	0x00016879
   16968:	00016879 	.word	0x00016879
   1696c:	00016879 	.word	0x00016879
   16970:	00016879 	.word	0x00016879
   16974:	00016879 	.word	0x00016879
   16978:	00016879 	.word	0x00016879
   1697c:	00016879 	.word	0x00016879
   16980:	00016879 	.word	0x00016879
   16984:	00016879 	.word	0x00016879
   16988:	00016879 	.word	0x00016879
   1698c:	00016879 	.word	0x00016879
   16990:	00016879 	.word	0x00016879
   16994:	00016879 	.word	0x00016879
   16998:	00016b3f 	.word	0x00016b3f
   1699c:	00016b6b 	.word	0x00016b6b
   169a0:	00016b33 	.word	0x00016b33
   169a4:	00016b23 	.word	0x00016b23
   169a8:	00016b17 	.word	0x00016b17
   169ac:	00016b07 	.word	0x00016b07
   169b0:	00016b61 	.word	0x00016b61
   169b4:	00016b57 	.word	0x00016b57
   169b8:	00016b87 	.word	0x00016b87
      passedChecksumCount++;
   169bc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   169c0:	f894 20bc 	ldrb.w	r2, [r4, #188]	; 0xbc
      passedChecksumCount++;
   169c4:	3301      	adds	r3, #1
   169c6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   169ca:	b37a      	cbz	r2, 16a2c <TinyGPSPlus::endOfTermHandler()+0x22c>
        ++sentencesWithFixCount;
   169cc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   169d0:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
        ++sentencesWithFixCount;
   169d4:	3301      	adds	r3, #1
   169d6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   169da:	2a00      	cmp	r2, #0
   169dc:	f000 80ee 	beq.w	16bbc <TinyGPSPlus::endOfTermHandler()+0x3bc>
   169e0:	2a01      	cmp	r2, #1
   169e2:	d048      	beq.n	16a76 <TinyGPSPlus::endOfTermHandler()+0x276>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   169e4:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   169e8:	2d00      	cmp	r5, #0
   169ea:	f43f af37 	beq.w	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   169ee:	462b      	mov	r3, r5
	return systick_millis_count;
   169f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 16bb0 <TinyGPSPlus::endOfTermHandler()+0x3b0>
   valid = updated = true;
   169f4:	f240 1701 	movw	r7, #257	; 0x101
   169f8:	e00b      	b.n	16a12 <TinyGPSPlus::endOfTermHandler()+0x212>
   strcpy(this->buffer, this->stagingBuffer);
   169fa:	f009 f92f 	bl	1fc5c <strcpy>
   169fe:	f8d8 3000 	ldr.w	r3, [r8]
   valid = updated = true;
   16a02:	84af      	strh	r7, [r5, #36]	; 0x24
   lastCommitTime = millis();
   16a04:	622b      	str	r3, [r5, #32]
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   16a06:	6b2d      	ldr	r5, [r5, #48]	; 0x30
   16a08:	2d00      	cmp	r5, #0
   16a0a:	f43f af27 	beq.w	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
   16a0e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   16a12:	6a99      	ldr	r1, [r3, #40]	; 0x28
   16a14:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   16a16:	f008 ffb7 	bl	1f988 <strcmp>
   16a1a:	4603      	mov	r3, r0
   strcpy(this->buffer, this->stagingBuffer);
   16a1c:	4629      	mov	r1, r5
   16a1e:	f105 0010 	add.w	r0, r5, #16
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   16a22:	2b00      	cmp	r3, #0
   16a24:	d0e9      	beq.n	169fa <TinyGPSPlus::endOfTermHandler()+0x1fa>
   16a26:	e719      	b.n	1685c <TinyGPSPlus::endOfTermHandler()+0x5c>
    return a - 'A' + 10;
   16a28:	3a37      	subs	r2, #55	; 0x37
   16a2a:	e70a      	b.n	16842 <TinyGPSPlus::endOfTermHandler()+0x42>
      switch(curSentenceType)
   16a2c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   16a30:	2b00      	cmp	r3, #0
   16a32:	d04c      	beq.n	16ace <TinyGPSPlus::endOfTermHandler()+0x2ce>
   16a34:	2b01      	cmp	r3, #1
   16a36:	d1d5      	bne.n	169e4 <TinyGPSPlus::endOfTermHandler()+0x1e4>
   valid = updated = true;
   16a38:	f240 1201 	movw	r2, #257	; 0x101
   16a3c:	4b5c      	ldr	r3, [pc, #368]	; (16bb0 <TinyGPSPlus::endOfTermHandler()+0x3b0>)
   date = newDate;
   16a3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   valid = updated = true;
   16a40:	8722      	strh	r2, [r4, #56]	; 0x38
   valid = updated = true;
   16a42:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
   date = newDate;
   16a46:	63e1      	str	r1, [r4, #60]	; 0x3c
   time = newTime;
   16a48:	6d22      	ldr	r2, [r4, #80]	; 0x50
   16a4a:	6819      	ldr	r1, [r3, #0]
   16a4c:	681b      	ldr	r3, [r3, #0]
   lastCommitTime = millis();
   16a4e:	6461      	str	r1, [r4, #68]	; 0x44
   time = newTime;
   16a50:	64e2      	str	r2, [r4, #76]	; 0x4c
   lastCommitTime = millis();
   16a52:	6563      	str	r3, [r4, #84]	; 0x54
        if (sentenceHasFix)
   16a54:	e7c6      	b.n	169e4 <TinyGPSPlus::endOfTermHandler()+0x1e4>
    else if (!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
   16a56:	4957      	ldr	r1, [pc, #348]	; (16bb4 <TinyGPSPlus::endOfTermHandler()+0x3b4>)
   16a58:	4640      	mov	r0, r8
   16a5a:	f008 ff95 	bl	1f988 <strcmp>
   16a5e:	2800      	cmp	r0, #0
   16a60:	f43f af38 	beq.w	168d4 <TinyGPSPlus::endOfTermHandler()+0xd4>
   16a64:	4954      	ldr	r1, [pc, #336]	; (16bb8 <TinyGPSPlus::endOfTermHandler()+0x3b8>)
   16a66:	4640      	mov	r0, r8
   16a68:	f008 ff8e 	bl	1f988 <strcmp>
   16a6c:	3800      	subs	r0, #0
   16a6e:	bf18      	it	ne
   16a70:	2001      	movne	r0, #1
   16a72:	0047      	lsls	r7, r0, #1
   16a74:	e72e      	b.n	168d4 <TinyGPSPlus::endOfTermHandler()+0xd4>
   16a76:	4a4e      	ldr	r2, [pc, #312]	; (16bb0 <TinyGPSPlus::endOfTermHandler()+0x3b0>)
   valid = updated = true;
   16a78:	f240 1301 	movw	r3, #257	; 0x101
   date = newDate;
   16a7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
   valid = updated = true;
   16a7e:	8723      	strh	r3, [r4, #56]	; 0x38
   date = newDate;
   16a80:	63e1      	str	r1, [r4, #60]	; 0x3c
   16a82:	6811      	ldr	r1, [r2, #0]
   valid = updated = true;
   16a84:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
   lastCommitTime = millis();
   16a88:	6461      	str	r1, [r4, #68]	; 0x44
   time = newTime;
   16a8a:	6d21      	ldr	r1, [r4, #80]	; 0x50
   valid = updated = true;
   16a8c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
   time = newTime;
   16a90:	64e1      	str	r1, [r4, #76]	; 0x4c
   16a92:	6811      	ldr	r1, [r2, #0]
   lastCommitTime = millis();
   16a94:	6561      	str	r1, [r4, #84]	; 0x54
   rawLatData = rawNewLatData;
   16a96:	69e1      	ldr	r1, [r4, #28]
   16a98:	6061      	str	r1, [r4, #4]
   16a9a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   16a9e:	7321      	strb	r1, [r4, #12]
   rawLngData = rawNewLngData;
   16aa0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   16aa2:	6121      	str	r1, [r4, #16]
   16aa4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   16aa8:	7621      	strb	r1, [r4, #24]
   16aaa:	6811      	ldr	r1, [r2, #0]
   valid = updated = true;
   16aac:	8023      	strh	r3, [r4, #0]
   lastCommitTime = millis();
   16aae:	6361      	str	r1, [r4, #52]	; 0x34
   val = newval;
   16ab0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   16ab2:	6621      	str	r1, [r4, #96]	; 0x60
   16ab4:	6811      	ldr	r1, [r2, #0]
   lastCommitTime = millis();
   16ab6:	65e1      	str	r1, [r4, #92]	; 0x5c
   val = newval;
   16ab8:	6f61      	ldr	r1, [r4, #116]	; 0x74
   16aba:	6721      	str	r1, [r4, #112]	; 0x70
   rawLatData = rawNewLatData;
   16abc:	6a21      	ldr	r1, [r4, #32]
   16abe:	60a1      	str	r1, [r4, #8]
   rawLngData = rawNewLngData;
   16ac0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   16ac2:	6161      	str	r1, [r4, #20]
   16ac4:	6812      	ldr	r2, [r2, #0]
   valid = updated = true;
   16ac6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
   lastCommitTime = millis();
   16aca:	66e2      	str	r2, [r4, #108]	; 0x6c
}
   16acc:	e78a      	b.n	169e4 <TinyGPSPlus::endOfTermHandler()+0x1e4>
   16ace:	4b38      	ldr	r3, [pc, #224]	; (16bb0 <TinyGPSPlus::endOfTermHandler()+0x3b0>)
   valid = updated = true;
   16ad0:	f240 1001 	movw	r0, #257	; 0x101
   time = newTime;
   16ad4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   16ad6:	6819      	ldr	r1, [r3, #0]
   valid = updated = true;
   16ad8:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
   lastCommitTime = millis();
   16adc:	6561      	str	r1, [r4, #84]	; 0x54
   time = newTime;
   16ade:	64e2      	str	r2, [r4, #76]	; 0x4c
   16ae0:	6818      	ldr	r0, [r3, #0]
   valid = updated = true;
   16ae2:	f240 1201 	movw	r2, #257	; 0x101
   16ae6:	681b      	ldr	r3, [r3, #0]
   val = newval;
   16ae8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
   lastCommitTime = millis();
   16aec:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
   val = newval;
   16af0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   valid = updated = true;
   16af4:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
   valid = updated = true;
   16af8:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
   val = newval;
   16afc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   val = newval;
   16b00:	e9c4 0123 	strd	r0, r1, [r4, #140]	; 0x8c
}
   16b04:	e76e      	b.n	169e4 <TinyGPSPlus::endOfTermHandler()+0x1e4>
      location.rawNewLngData.negative = term[0] == 'W';
   16b06:	f1a2 0257 	sub.w	r2, r2, #87	; 0x57
   16b0a:	fab2 f282 	clz	r2, r2
   16b0e:	0952      	lsrs	r2, r2, #5
   16b10:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
      break;
   16b14:	e6b0      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   16b16:	f100 0128 	add.w	r1, r0, #40	; 0x28
   16b1a:	30aa      	adds	r0, #170	; 0xaa
   16b1c:	f7ff fe2c 	bl	16778 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)>
}
   16b20:	e6aa      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
      location.rawNewLatData.negative = term[0] == 'S';
   16b22:	f1a2 0253 	sub.w	r2, r2, #83	; 0x53
   16b26:	fab2 f282 	clz	r2, r2
   16b2a:	0952      	lsrs	r2, r2, #5
   16b2c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
      break;
   16b30:	e6a2      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   16b32:	f100 011c 	add.w	r1, r0, #28
   16b36:	30aa      	adds	r0, #170	; 0xaa
   16b38:	f7ff fe1e 	bl	16778 <TinyGPSPlus::parseDegrees(char const*, RawDegrees&)>
}
   16b3c:	e69c      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   16b3e:	30aa      	adds	r0, #170	; 0xaa
   16b40:	f7ff fdec 	bl	1671c <TinyGPSPlus::parseDecimal(char const*)>
   16b44:	6520      	str	r0, [r4, #80]	; 0x50
}
   16b46:	e697      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
      sentenceHasFix = term[0] > '0';
   16b48:	2a30      	cmp	r2, #48	; 0x30
   16b4a:	bf94      	ite	ls
   16b4c:	2200      	movls	r2, #0
   16b4e:	2201      	movhi	r2, #1
   16b50:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
      break;
   16b54:	e690      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newval = TinyGPSPlus::parseDecimal(term);
   16b56:	30aa      	adds	r0, #170	; 0xaa
   16b58:	f7ff fde0 	bl	1671c <TinyGPSPlus::parseDecimal(char const*)>
   16b5c:	6760      	str	r0, [r4, #116]	; 0x74
}
   16b5e:	e68b      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newval = TinyGPSPlus::parseDecimal(term);
   16b60:	30aa      	adds	r0, #170	; 0xaa
   16b62:	f7ff fddb 	bl	1671c <TinyGPSPlus::parseDecimal(char const*)>
   16b66:	6660      	str	r0, [r4, #100]	; 0x64
}
   16b68:	e686      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
      sentenceHasFix = term[0] == 'A';
   16b6a:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
   16b6e:	fab2 f282 	clz	r2, r2
   16b72:	0952      	lsrs	r2, r2, #5
   16b74:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
      break;
   16b78:	e67e      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newval = TinyGPSPlus::parseDecimal(term);
   16b7a:	30aa      	adds	r0, #170	; 0xaa
   16b7c:	f7ff fdce 	bl	1671c <TinyGPSPlus::parseDecimal(char const*)>
   16b80:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
}
   16b84:	e678      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newDate = atol(term);
   16b86:	30aa      	adds	r0, #170	; 0xaa
   16b88:	f006 fcfc 	bl	1d584 <atol>
   16b8c:	6420      	str	r0, [r4, #64]	; 0x40
}
   16b8e:	e673      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newval = TinyGPSPlus::parseDecimal(term);
   16b90:	30aa      	adds	r0, #170	; 0xaa
   16b92:	f7ff fdc3 	bl	1671c <TinyGPSPlus::parseDecimal(char const*)>
   16b96:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
}
   16b9a:	e66d      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   newval = atol(term);
   16b9c:	30aa      	adds	r0, #170	; 0xaa
   16b9e:	f006 fcf1 	bl	1d584 <atol>
   16ba2:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
}
   16ba6:	e667      	b.n	16878 <TinyGPSPlus::endOfTermHandler()+0x78>
   16ba8:	200020b4 	.word	0x200020b4
   16bac:	200020bc 	.word	0x200020bc
   16bb0:	20006344 	.word	0x20006344
   16bb4:	200020c4 	.word	0x200020c4
   16bb8:	200020cc 	.word	0x200020cc
   16bbc:	4b11      	ldr	r3, [pc, #68]	; (16c04 <TinyGPSPlus::endOfTermHandler()+0x404>)
   valid = updated = true;
   16bbe:	f240 1201 	movw	r2, #257	; 0x101
   time = newTime;
   16bc2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   valid = updated = true;
   16bc4:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
   time = newTime;
   16bc8:	64e1      	str	r1, [r4, #76]	; 0x4c
   16bca:	6819      	ldr	r1, [r3, #0]
   valid = updated = true;
   16bcc:	f8a4 2078 	strh.w	r2, [r4, #120]	; 0x78
   lastCommitTime = millis();
   16bd0:	6561      	str	r1, [r4, #84]	; 0x54
   rawLatData = rawNewLatData;
   16bd2:	69e1      	ldr	r1, [r4, #28]
   16bd4:	6061      	str	r1, [r4, #4]
   16bd6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   16bda:	7321      	strb	r1, [r4, #12]
   rawLngData = rawNewLngData;
   16bdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   16bde:	6121      	str	r1, [r4, #16]
   16be0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   16be4:	7621      	strb	r1, [r4, #24]
   16be6:	6819      	ldr	r1, [r3, #0]
   valid = updated = true;
   16be8:	8022      	strh	r2, [r4, #0]
   val = newval;
   16bea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   lastCommitTime = millis();
   16bee:	6361      	str	r1, [r4, #52]	; 0x34
   val = newval;
   16bf0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
   16bf4:	681a      	ldr	r2, [r3, #0]
   lastCommitTime = millis();
   16bf6:	67e2      	str	r2, [r4, #124]	; 0x7c
   rawLatData = rawNewLatData;
   16bf8:	6a22      	ldr	r2, [r4, #32]
   16bfa:	60a2      	str	r2, [r4, #8]
   rawLngData = rawNewLngData;
   16bfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   16bfe:	6162      	str	r2, [r4, #20]
}
   16c00:	e76e      	b.n	16ae0 <TinyGPSPlus::endOfTermHandler()+0x2e0>
   16c02:	bf00      	nop
   16c04:	20006344 	.word	0x20006344

00016c08 <TinyGPSPlus::encode(char)>:
{
   16c08:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   16c0a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   16c0e:	f1a1 020a 	sub.w	r2, r1, #10
{
   16c12:	4604      	mov	r4, r0
   16c14:	460d      	mov	r5, r1
  ++encodedCharCount;
   16c16:	3301      	adds	r3, #1
   16c18:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   16c1c:	2a22      	cmp	r2, #34	; 0x22
   16c1e:	d82e      	bhi.n	16c7e <TinyGPSPlus::encode(char)+0x76>
   16c20:	e8df f002 	tbb	[pc, r2]
   16c24:	182d2d18 	.word	0x182d2d18
   16c28:	2d2d2d2d 	.word	0x2d2d2d2d
   16c2c:	2d2d2d2d 	.word	0x2d2d2d2d
   16c30:	2d2d2d2d 	.word	0x2d2d2d2d
   16c34:	2d2d2d2d 	.word	0x2d2d2d2d
   16c38:	2d2d2d2d 	.word	0x2d2d2d2d
   16c3c:	2d412d2d 	.word	0x2d412d2d
   16c40:	2d2d2d2d 	.word	0x2d2d2d2d
   16c44:	2d18      	.short	0x2d18
   16c46:	12          	.byte	0x12
   16c47:	00          	.byte	0x00
    parity ^= (uint8_t)c;
   16c48:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
   16c4c:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
   16c50:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   16c54:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
   16c58:	2b0e      	cmp	r3, #14
   16c5a:	d930      	bls.n	16cbe <TinyGPSPlus::encode(char)+0xb6>
      bool isValidSentence = false;
   16c5c:	2000      	movs	r0, #0
      isChecksumTerm = c == '*';
   16c5e:	f1a5 012a 	sub.w	r1, r5, #42	; 0x2a
      ++curTermNumber;
   16c62:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   16c66:	2200      	movs	r2, #0
      isChecksumTerm = c == '*';
   16c68:	fab1 f181 	clz	r1, r1
      ++curTermNumber;
   16c6c:	3301      	adds	r3, #1
      curTermOffset = 0;
   16c6e:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   16c72:	0949      	lsrs	r1, r1, #5
      ++curTermNumber;
   16c74:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      isChecksumTerm = c == '*';
   16c78:	f884 10a9 	strb.w	r1, [r4, #169]	; 0xa9
}
   16c7c:	bd38      	pop	{r3, r4, r5, pc}
    if (curTermOffset < sizeof(term) - 1)
   16c7e:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   16c82:	2b0d      	cmp	r3, #13
   16c84:	d805      	bhi.n	16c92 <TinyGPSPlus::encode(char)+0x8a>
      term[curTermOffset++] = c;
   16c86:	1c5a      	adds	r2, r3, #1
   16c88:	4403      	add	r3, r0
   16c8a:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   16c8e:	f883 10aa 	strb.w	r1, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   16c92:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   16c96:	b9d0      	cbnz	r0, 16cce <TinyGPSPlus::encode(char)+0xc6>
      parity ^= c;
   16c98:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   16c9c:	ea85 0103 	eor.w	r1, r5, r3
   16ca0:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
}
   16ca4:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   16ca6:	2300      	movs	r3, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   16ca8:	2202      	movs	r2, #2
    return false;
   16caa:	4618      	mov	r0, r3
    parity = 0;
   16cac:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   16cb0:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   16cb4:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
    sentenceHasFix = false;
   16cb8:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
}
   16cbc:	bd38      	pop	{r3, r4, r5, pc}
        term[curTermOffset] = 0;
   16cbe:	4423      	add	r3, r4
   16cc0:	2200      	movs	r2, #0
        isValidSentence = endOfTermHandler();
   16cc2:	4620      	mov	r0, r4
        term[curTermOffset] = 0;
   16cc4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   16cc8:	f7ff fd9a 	bl	16800 <TinyGPSPlus::endOfTermHandler()>
   16ccc:	e7c7      	b.n	16c5e <TinyGPSPlus::encode(char)+0x56>
    return false;
   16cce:	2000      	movs	r0, #0
}
   16cd0:	bd38      	pop	{r3, r4, r5, pc}
   16cd2:	bf00      	nop
   16cd4:	0000      	movs	r0, r0
	...

00016cd8 <TinyGPSLocation::lat()>:
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   16cd8:	ed90 6a02 	vldr	s12, [r0, #8]
   updated = false;
   16cdc:	2200      	movs	r2, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   16cde:	8883      	ldrh	r3, [r0, #4]
   16ce0:	eeb8 6b46 	vcvt.f64.u32	d6, s12
   updated = false;
   16ce4:	7042      	strb	r2, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   16ce6:	ee07 3a10 	vmov	s14, r3
   return rawLatData.negative ? -ret : ret;
   16cea:	7b03      	ldrb	r3, [r0, #12]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   16cec:	ed9f 5b06 	vldr	d5, [pc, #24]	; 16d08 <TinyGPSLocation::lat()+0x30>
   16cf0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   16cf4:	ee86 0b05 	vdiv.f64	d0, d6, d5
   16cf8:	ee30 0b07 	vadd.f64	d0, d0, d7
   return rawLatData.negative ? -ret : ret;
   16cfc:	b10b      	cbz	r3, 16d02 <TinyGPSLocation::lat()+0x2a>
   16cfe:	eeb1 0b40 	vneg.f64	d0, d0
}
   16d02:	4770      	bx	lr
   16d04:	f3af 8000 	nop.w
   16d08:	00000000 	.word	0x00000000
   16d0c:	41cdcd65 	.word	0x41cdcd65

00016d10 <TinyGPSLocation::lng()>:
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   16d10:	ed90 6a05 	vldr	s12, [r0, #20]
   updated = false;
   16d14:	2200      	movs	r2, #0
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   16d16:	8a03      	ldrh	r3, [r0, #16]
   16d18:	eeb8 6b46 	vcvt.f64.u32	d6, s12
   updated = false;
   16d1c:	7042      	strb	r2, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   16d1e:	ee07 3a10 	vmov	s14, r3
   return rawLngData.negative ? -ret : ret;
   16d22:	7e03      	ldrb	r3, [r0, #24]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   16d24:	ed9f 5b06 	vldr	d5, [pc, #24]	; 16d40 <TinyGPSLocation::lng()+0x30>
   16d28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   16d2c:	ee86 0b05 	vdiv.f64	d0, d6, d5
   16d30:	ee30 0b07 	vadd.f64	d0, d0, d7
   return rawLngData.negative ? -ret : ret;
   16d34:	b10b      	cbz	r3, 16d3a <TinyGPSLocation::lng()+0x2a>
   16d36:	eeb1 0b40 	vneg.f64	d0, d0
}
   16d3a:	4770      	bx	lr
   16d3c:	f3af 8000 	nop.w
   16d40:	00000000 	.word	0x00000000
   16d44:	41cdcd65 	.word	0x41cdcd65

00016d48 <TinyGPSDate::year()>:
   uint16_t year = date % 100;
   16d48:	6843      	ldr	r3, [r0, #4]
   updated = false;
   16d4a:	f04f 0c00 	mov.w	ip, #0
   uint16_t year = date % 100;
   16d4e:	4a06      	ldr	r2, [pc, #24]	; (16d68 <TinyGPSDate::year()+0x20>)
   16d50:	2164      	movs	r1, #100	; 0x64
   updated = false;
   16d52:	f880 c001 	strb.w	ip, [r0, #1]
   uint16_t year = date % 100;
   16d56:	fba2 0203 	umull	r0, r2, r2, r3
   16d5a:	0952      	lsrs	r2, r2, #5
   16d5c:	fb01 3012 	mls	r0, r1, r2, r3
   return year + 2000;
   16d60:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
}
   16d64:	b280      	uxth	r0, r0
   16d66:	4770      	bx	lr
   16d68:	51eb851f 	.word	0x51eb851f

00016d6c <TinyGPSDate::month()>:
   return (date / 100) % 100;
   16d6c:	6843      	ldr	r3, [r0, #4]
   updated = false;
   16d6e:	f04f 0c00 	mov.w	ip, #0
   return (date / 100) % 100;
   16d72:	4a07      	ldr	r2, [pc, #28]	; (16d90 <TinyGPSDate::month()+0x24>)
   16d74:	2164      	movs	r1, #100	; 0x64
   updated = false;
   16d76:	f880 c001 	strb.w	ip, [r0, #1]
   return (date / 100) % 100;
   16d7a:	fba2 3003 	umull	r3, r0, r2, r3
   16d7e:	0940      	lsrs	r0, r0, #5
   16d80:	fba2 3200 	umull	r3, r2, r2, r0
   16d84:	0952      	lsrs	r2, r2, #5
   16d86:	fb01 0012 	mls	r0, r1, r2, r0
}
   16d8a:	b2c0      	uxtb	r0, r0
   16d8c:	4770      	bx	lr
   16d8e:	bf00      	nop
   16d90:	51eb851f 	.word	0x51eb851f

00016d94 <TinyGPSDate::day()>:
   return date / 10000;
   16d94:	4a04      	ldr	r2, [pc, #16]	; (16da8 <TinyGPSDate::day()+0x14>)
   updated = false;
   16d96:	2100      	movs	r1, #0
   return date / 10000;
   16d98:	6843      	ldr	r3, [r0, #4]
   updated = false;
   16d9a:	7041      	strb	r1, [r0, #1]
   return date / 10000;
   16d9c:	fba2 2003 	umull	r2, r0, r2, r3
}
   16da0:	f3c0 3047 	ubfx	r0, r0, #13, #8
   16da4:	4770      	bx	lr
   16da6:	bf00      	nop
   16da8:	d1b71759 	.word	0xd1b71759

00016dac <TinyGPSTime::hour()>:
   return time / 1000000;
   16dac:	4a04      	ldr	r2, [pc, #16]	; (16dc0 <TinyGPSTime::hour()+0x14>)
   updated = false;
   16dae:	2100      	movs	r1, #0
   return time / 1000000;
   16db0:	6843      	ldr	r3, [r0, #4]
   updated = false;
   16db2:	7041      	strb	r1, [r0, #1]
   return time / 1000000;
   16db4:	fba2 2003 	umull	r2, r0, r2, r3
}
   16db8:	f3c0 4087 	ubfx	r0, r0, #18, #8
   16dbc:	4770      	bx	lr
   16dbe:	bf00      	nop
   16dc0:	431bde83 	.word	0x431bde83

00016dc4 <TinyGPSTime::minute()>:
   updated = false;
   16dc4:	f04f 0c00 	mov.w	ip, #0
   return (time / 10000) % 100;
   16dc8:	4a07      	ldr	r2, [pc, #28]	; (16de8 <TinyGPSTime::minute()+0x24>)
   16dca:	4b08      	ldr	r3, [pc, #32]	; (16dec <TinyGPSTime::minute()+0x28>)
   16dcc:	2164      	movs	r1, #100	; 0x64
   updated = false;
   16dce:	f880 c001 	strb.w	ip, [r0, #1]
   return (time / 10000) % 100;
   16dd2:	6840      	ldr	r0, [r0, #4]
   16dd4:	fba2 2000 	umull	r2, r0, r2, r0
   16dd8:	0b40      	lsrs	r0, r0, #13
   16dda:	fba3 2300 	umull	r2, r3, r3, r0
   16dde:	095b      	lsrs	r3, r3, #5
   16de0:	fb01 0013 	mls	r0, r1, r3, r0
}
   16de4:	b2c0      	uxtb	r0, r0
   16de6:	4770      	bx	lr
   16de8:	d1b71759 	.word	0xd1b71759
   16dec:	51eb851f 	.word	0x51eb851f

00016df0 <TinyGPSTime::second()>:
   return (time / 100) % 100;
   16df0:	6843      	ldr	r3, [r0, #4]
   updated = false;
   16df2:	f04f 0c00 	mov.w	ip, #0
   return (time / 100) % 100;
   16df6:	4a07      	ldr	r2, [pc, #28]	; (16e14 <TinyGPSTime::second()+0x24>)
   16df8:	2164      	movs	r1, #100	; 0x64
   updated = false;
   16dfa:	f880 c001 	strb.w	ip, [r0, #1]
   return (time / 100) % 100;
   16dfe:	fba2 3003 	umull	r3, r0, r2, r3
   16e02:	0940      	lsrs	r0, r0, #5
   16e04:	fba2 3200 	umull	r3, r2, r2, r0
   16e08:	0952      	lsrs	r2, r2, #5
   16e0a:	fb01 0012 	mls	r0, r1, r2, r0
}
   16e0e:	b2c0      	uxtb	r0, r0
   16e10:	4770      	bx	lr
   16e12:	bf00      	nop
   16e14:	51eb851f 	.word	0x51eb851f

00016e18 <breakTime(long long, tmElements_t&)>:
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
   16e18:	4953      	ldr	r1, [pc, #332]	; (16f68 <breakTime(long long, tmElements_t&)+0x150>)
void breakTime(time_t timeInput, tmElements_t &tm){
   16e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.Second = time % 60;
   16e1e:	fba1 4300 	umull	r4, r3, r1, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16e22:	f240 1a6d 	movw	sl, #365	; 0x16d
   16e26:	4f51      	ldr	r7, [pc, #324]	; (16f6c <breakTime(long long, tmElements_t&)+0x154>)
  tm.Second = time % 60;
   16e28:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16e2a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 16f7c <breakTime(long long, tmElements_t&)+0x164>
   16e2e:	f8df 9150 	ldr.w	r9, [pc, #336]	; 16f80 <breakTime(long long, tmElements_t&)+0x168>
  tm.Minute = time % 60;
   16e32:	fba1 4103 	umull	r4, r1, r1, r3
  tm.Second = time % 60;
   16e36:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm.Minute = time % 60;
   16e3a:	0949      	lsrs	r1, r1, #5
  tm.Second = time % 60;
   16e3c:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm.Hour = time % 24;
   16e40:	4c4b      	ldr	r4, [pc, #300]	; (16f70 <breakTime(long long, tmElements_t&)+0x158>)
  tm.Minute = time % 60;
   16e42:	ebc1 1501 	rsb	r5, r1, r1, lsl #4
  tm.Hour = time % 24;
   16e46:	fba4 4e01 	umull	r4, lr, r4, r1
  tm.Minute = time % 60;
   16e4a:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm.Second = time % 60;
   16e4e:	7010      	strb	r0, [r2, #0]
  tm.Hour = time % 24;
   16e50:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  tm.Minute = time % 60;
   16e54:	7053      	strb	r3, [r2, #1]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
   16e56:	f10e 0404 	add.w	r4, lr, #4
  tm.Hour = time % 24;
   16e5a:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
   16e5e:	4b45      	ldr	r3, [pc, #276]	; (16f74 <breakTime(long long, tmElements_t&)+0x15c>)
  tm.Hour = time % 24;
   16e60:	eba1 01c0 	sub.w	r1, r1, r0, lsl #3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
   16e64:	fba3 0304 	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16e68:	2000      	movs	r0, #0
  tm.Hour = time % 24;
   16e6a:	7091      	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
   16e6c:	1ae1      	subs	r1, r4, r3
   16e6e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
  days = 0;
   16e72:	4601      	mov	r1, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
   16e74:	089b      	lsrs	r3, r3, #2
   16e76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   16e7a:	1ae4      	subs	r4, r4, r3
   16e7c:	3401      	adds	r4, #1
   16e7e:	70d4      	strb	r4, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16e80:	b2c4      	uxtb	r4, r0
   16e82:	f240 1c6d 	movw	ip, #365	; 0x16d
   16e86:	f204 73b2 	addw	r3, r4, #1970	; 0x7b2
   16e8a:	f013 0503 	ands.w	r5, r3, #3
   16e8e:	fb07 f603 	mul.w	r6, r7, r3
   16e92:	d108      	bne.n	16ea6 <breakTime(long long, tmElements_t&)+0x8e>
   16e94:	ebb8 0fb6 	cmp.w	r8, r6, ror #2
   16e98:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
   16e9c:	d303      	bcc.n	16ea6 <breakTime(long long, tmElements_t&)+0x8e>
   16e9e:	ebb9 1f36 	cmp.w	r9, r6, ror #4
   16ea2:	bf38      	it	cc
   16ea4:	46d4      	movcc	ip, sl
   16ea6:	4461      	add	r1, ip
   16ea8:	3001      	adds	r0, #1
   16eaa:	458e      	cmp	lr, r1
   16eac:	d2e8      	bcs.n	16e80 <breakTime(long long, tmElements_t&)+0x68>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
   16eae:	4e32      	ldr	r6, [pc, #200]	; (16f78 <breakTime(long long, tmElements_t&)+0x160>)
  tm.Year = year; // year is offset from 1970 
   16eb0:	7194      	strb	r4, [r2, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
   16eb2:	fba6 0603 	umull	r0, r6, r6, r3
   16eb6:	b395      	cbz	r5, 16f1e <breakTime(long long, tmElements_t&)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16eb8:	0977      	lsrs	r7, r6, #5
   16eba:	2464      	movs	r4, #100	; 0x64
   16ebc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   16ec0:	09f6      	lsrs	r6, r6, #7
   16ec2:	fb04 3717 	mls	r7, r4, r7, r3
   16ec6:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
   16eca:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
   16ece:	ebae 0e01 	sub.w	lr, lr, r1
   16ed2:	2300      	movs	r3, #0
   16ed4:	2101      	movs	r1, #1
   16ed6:	4470      	add	r0, lr
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
   16ed8:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 16f84 <breakTime(long long, tmElements_t&)+0x16c>
   16edc:	e00a      	b.n	16ef4 <breakTime(long long, tmElements_t&)+0xdc>
    }
    
    if (time >= monthLength) {
   16ede:	f813 400e 	ldrb.w	r4, [r3, lr]
   16ee2:	4284      	cmp	r4, r0
   16ee4:	d832      	bhi.n	16f4c <breakTime(long long, tmElements_t&)+0x134>
  for (month=0; month<12; month++) {
   16ee6:	290c      	cmp	r1, #12
      time -= monthLength;
   16ee8:	eba0 0004 	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
   16eec:	d00f      	beq.n	16f0e <breakTime(long long, tmElements_t&)+0xf6>
   16eee:	3101      	adds	r1, #1
   16ef0:	3301      	adds	r3, #1
   16ef2:	b2c9      	uxtb	r1, r1
    if (month==1) { // february
   16ef4:	2b01      	cmp	r3, #1
   16ef6:	fa5f fc83 	uxtb.w	ip, r3
   16efa:	d1f0      	bne.n	16ede <breakTime(long long, tmElements_t&)+0xc6>
      if (LEAP_YEAR(year)) {
   16efc:	b915      	cbnz	r5, 16f04 <breakTime(long long, tmElements_t&)+0xec>
   16efe:	b1df      	cbz	r7, 16f38 <breakTime(long long, tmElements_t&)+0x120>
   16f00:	241d      	movs	r4, #29
   16f02:	e000      	b.n	16f06 <breakTime(long long, tmElements_t&)+0xee>
   16f04:	241c      	movs	r4, #28
    if (time >= monthLength) {
   16f06:	42a0      	cmp	r0, r4
   16f08:	d32a      	bcc.n	16f60 <breakTime(long long, tmElements_t&)+0x148>
      time -= monthLength;
   16f0a:	1b00      	subs	r0, r0, r4
  for (month=0; month<12; month++) {
   16f0c:	e7ef      	b.n	16eee <breakTime(long long, tmElements_t&)+0xd6>
   16f0e:	f04f 0c0d 	mov.w	ip, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
   16f12:	3001      	adds	r0, #1
  tm.Month = month + 1;  // jan is month 1  
   16f14:	f882 c005 	strb.w	ip, [r2, #5]
  tm.Day = time + 1;     // day of month
   16f18:	7110      	strb	r0, [r2, #4]
}
   16f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
   16f1e:	2064      	movs	r0, #100	; 0x64
   16f20:	0977      	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16f22:	09f6      	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
   16f24:	fb00 3717 	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16f28:	f44f 70c8 	mov.w	r0, #400	; 0x190
   16f2c:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
   16f30:	b13f      	cbz	r7, 16f42 <breakTime(long long, tmElements_t&)+0x12a>
   16f32:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   16f36:	e7ca      	b.n	16ece <breakTime(long long, tmElements_t&)+0xb6>
      if (LEAP_YEAR(year)) {
   16f38:	2e00      	cmp	r6, #0
   16f3a:	bf14      	ite	ne
   16f3c:	241c      	movne	r4, #28
   16f3e:	241d      	moveq	r4, #29
   16f40:	e7e1      	b.n	16f06 <breakTime(long long, tmElements_t&)+0xee>
  days -= LEAP_YEAR(year) ? 366 : 365;
   16f42:	2e00      	cmp	r6, #0
   16f44:	d1c1      	bne.n	16eca <breakTime(long long, tmElements_t&)+0xb2>
   16f46:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   16f4a:	e7c0      	b.n	16ece <breakTime(long long, tmElements_t&)+0xb6>
  for (month=0; month<12; month++) {
   16f4c:	f10c 0c01 	add.w	ip, ip, #1
  tm.Day = time + 1;     // day of month
   16f50:	3001      	adds	r0, #1
  for (month=0; month<12; month++) {
   16f52:	fa5f fc8c 	uxtb.w	ip, ip
  tm.Day = time + 1;     // day of month
   16f56:	7110      	strb	r0, [r2, #4]
  tm.Month = month + 1;  // jan is month 1  
   16f58:	f882 c005 	strb.w	ip, [r2, #5]
}
   16f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
   16f60:	f04f 0c02 	mov.w	ip, #2
   16f64:	e7d5      	b.n	16f12 <breakTime(long long, tmElements_t&)+0xfa>
   16f66:	bf00      	nop
   16f68:	88888889 	.word	0x88888889
   16f6c:	c28f5c29 	.word	0xc28f5c29
   16f70:	aaaaaaab 	.word	0xaaaaaaab
   16f74:	24924925 	.word	0x24924925
   16f78:	51eb851f 	.word	0x51eb851f
   16f7c:	028f5c28 	.word	0x028f5c28
   16f80:	00a3d70a 	.word	0x00a3d70a
   16f84:	200020a8 	.word	0x200020a8

00016f88 <makeTime(tmElements_t const&)>:
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
   16f88:	4a33      	ldr	r2, [pc, #204]	; (17058 <makeTime(tmElements_t const&)+0xd0>)
time_t makeTime(const tmElements_t &tm){   
   16f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  seconds= tm.Year*(SECS_PER_DAY * 365);
   16f8e:	7984      	ldrb	r4, [r0, #6]
   16f90:	fb04 f202 	mul.w	r2, r4, r2
  for (i = 0; i < tm.Year; i++) {
   16f94:	b1e4      	cbz	r4, 16fd0 <makeTime(tmElements_t const&)+0x48>
   16f96:	f204 7cb2 	addw	ip, r4, #1970	; 0x7b2
   16f9a:	f240 73b3 	movw	r3, #1971	; 0x7b3
   16f9e:	4d2f      	ldr	r5, [pc, #188]	; (1705c <makeTime(tmElements_t const&)+0xd4>)
    if (LEAP_YEAR(i)) {
   16fa0:	4e2f      	ldr	r6, [pc, #188]	; (17060 <makeTime(tmElements_t const&)+0xd8>)
      seconds += SECS_PER_DAY;   // add extra days for leap years
   16fa2:	4f30      	ldr	r7, [pc, #192]	; (17064 <makeTime(tmElements_t const&)+0xdc>)
    if (LEAP_YEAR(i)) {
   16fa4:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 17070 <makeTime(tmElements_t const&)+0xe8>
  for (i = 0; i < tm.Year; i++) {
   16fa8:	459c      	cmp	ip, r3
   16faa:	fb05 f103 	mul.w	r1, r5, r3
   16fae:	d00f      	beq.n	16fd0 <makeTime(tmElements_t const&)+0x48>
    if (LEAP_YEAR(i)) {
   16fb0:	f013 0f03 	tst.w	r3, #3
   16fb4:	f103 0301 	add.w	r3, r3, #1
   16fb8:	d1f6      	bne.n	16fa8 <makeTime(tmElements_t const&)+0x20>
   16fba:	ebb6 0fb1 	cmp.w	r6, r1, ror #2
   16fbe:	d302      	bcc.n	16fc6 <makeTime(tmElements_t const&)+0x3e>
   16fc0:	ebbe 1f31 	cmp.w	lr, r1, ror #4
   16fc4:	d3f0      	bcc.n	16fa8 <makeTime(tmElements_t const&)+0x20>
  for (i = 0; i < tm.Year; i++) {
   16fc6:	459c      	cmp	ip, r3
      seconds += SECS_PER_DAY;   // add extra days for leap years
   16fc8:	443a      	add	r2, r7
  for (i = 0; i < tm.Year; i++) {
   16fca:	fb05 f103 	mul.w	r1, r5, r3
   16fce:	d1ef      	bne.n	16fb0 <makeTime(tmElements_t const&)+0x28>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
   16fd0:	f890 e005 	ldrb.w	lr, [r0, #5]
   16fd4:	f1be 0f01 	cmp.w	lr, #1
   16fd8:	dd29      	ble.n	1702e <makeTime(tmElements_t const&)+0xa6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
   16fda:	f204 74b2 	addw	r4, r4, #1970	; 0x7b2
   16fde:	4e22      	ldr	r6, [pc, #136]	; (17068 <makeTime(tmElements_t const&)+0xe0>)
   16fe0:	2564      	movs	r5, #100	; 0x64
   16fe2:	4922      	ldr	r1, [pc, #136]	; (1706c <makeTime(tmElements_t const&)+0xe4>)
   16fe4:	fba6 3604 	umull	r3, r6, r6, r4
   16fe8:	f44f 73c8 	mov.w	r3, #400	; 0x190
      seconds += SECS_PER_DAY * 29;
   16fec:	f8df 8084 	ldr.w	r8, [pc, #132]	; 17074 <makeTime(tmElements_t const&)+0xec>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
   16ff0:	0977      	lsrs	r7, r6, #5
   16ff2:	09f6      	lsrs	r6, r6, #7
   16ff4:	fb05 4717 	mls	r7, r5, r7, r4
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
   16ff8:	4d1a      	ldr	r5, [pc, #104]	; (17064 <makeTime(tmElements_t const&)+0xdc>)
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
   16ffa:	fb03 4616 	mls	r6, r3, r6, r4
   16ffe:	f004 0403 	and.w	r4, r4, #3
  for (i = 1; i < tm.Month; i++) {
   17002:	2301      	movs	r3, #1
   17004:	e007      	b.n	17016 <makeTime(tmElements_t const&)+0x8e>
   17006:	3301      	adds	r3, #1
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
   17008:	f891 c000 	ldrb.w	ip, [r1]
  for (i = 1; i < tm.Month; i++) {
   1700c:	3101      	adds	r1, #1
   1700e:	4573      	cmp	r3, lr
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
   17010:	fb05 220c 	mla	r2, r5, ip, r2
  for (i = 1; i < tm.Month; i++) {
   17014:	d00b      	beq.n	1702e <makeTime(tmElements_t const&)+0xa6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
   17016:	2b02      	cmp	r3, #2
   17018:	d1f5      	bne.n	17006 <makeTime(tmElements_t const&)+0x7e>
   1701a:	2c00      	cmp	r4, #0
   1701c:	d1f3      	bne.n	17006 <makeTime(tmElements_t const&)+0x7e>
   1701e:	b90f      	cbnz	r7, 17024 <makeTime(tmElements_t const&)+0x9c>
   17020:	2e00      	cmp	r6, #0
   17022:	d1f0      	bne.n	17006 <makeTime(tmElements_t const&)+0x7e>
  for (i = 1; i < tm.Month; i++) {
   17024:	3301      	adds	r3, #1
      seconds += SECS_PER_DAY * 29;
   17026:	4442      	add	r2, r8
  for (i = 1; i < tm.Month; i++) {
   17028:	3101      	adds	r1, #1
   1702a:	4573      	cmp	r3, lr
   1702c:	d1f3      	bne.n	17016 <makeTime(tmElements_t const&)+0x8e>
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
   1702e:	7843      	ldrb	r3, [r0, #1]
  seconds+= tm.Hour * SECS_PER_HOUR;
   17030:	f44f 6461 	mov.w	r4, #3600	; 0xe10
   17034:	7881      	ldrb	r1, [r0, #2]
  seconds+= tm.Minute * SECS_PER_MIN;
   17036:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  seconds+= tm.Second;
   1703a:	7805      	ldrb	r5, [r0, #0]
  seconds+= tm.Minute * SECS_PER_MIN;
   1703c:	009b      	lsls	r3, r3, #2
  seconds+= tm.Second;
   1703e:	fb04 3301 	mla	r3, r4, r1, r3
  seconds+= (tm.Day-1) * SECS_PER_DAY;
   17042:	7901      	ldrb	r1, [r0, #4]
   17044:	4c07      	ldr	r4, [pc, #28]	; (17064 <makeTime(tmElements_t const&)+0xdc>)
  seconds+= tm.Second;
   17046:	1958      	adds	r0, r3, r5
  seconds+= (tm.Day-1) * SECS_PER_DAY;
   17048:	1e4b      	subs	r3, r1, #1
  return (time_t)seconds; 
}
   1704a:	2100      	movs	r1, #0
  seconds+= tm.Second;
   1704c:	fb04 0003 	mla	r0, r4, r3, r0
}
   17050:	4410      	add	r0, r2
   17052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17056:	bf00      	nop
   17058:	01e13380 	.word	0x01e13380
   1705c:	c28f5c29 	.word	0xc28f5c29
   17060:	028f5c28 	.word	0x028f5c28
   17064:	00015180 	.word	0x00015180
   17068:	51eb851f 	.word	0x51eb851f
   1706c:	200020a8 	.word	0x200020a8
   17070:	00a3d70a 	.word	0x00a3d70a
   17074:	00263b80 	.word	0x00263b80

00017078 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
   17078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1707a:	4c1d      	ldr	r4, [pc, #116]	; (170f0 <now()+0x78>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
   1707c:	4d1d      	ldr	r5, [pc, #116]	; (170f4 <now()+0x7c>)
   1707e:	6823      	ldr	r3, [r4, #0]
   17080:	682a      	ldr	r2, [r5, #0]
   17082:	4e1d      	ldr	r6, [pc, #116]	; (170f8 <now()+0x80>)
   17084:	1a9b      	subs	r3, r3, r2
   17086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1708a:	d32f      	bcc.n	170ec <now()+0x74>
   1708c:	6831      	ldr	r1, [r6, #0]
   1708e:	3101      	adds	r1, #1
   17090:	6823      	ldr	r3, [r4, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
   17092:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
   17096:	4608      	mov	r0, r1
  while (millis() - prevMillis >= 1000) {
   17098:	3101      	adds	r1, #1
   1709a:	1a9b      	subs	r3, r3, r2
   1709c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   170a0:	d2f6      	bcs.n	17090 <now()+0x18>
   170a2:	6030      	str	r0, [r6, #0]
   170a4:	602a      	str	r2, [r5, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
   170a6:	4f15      	ldr	r7, [pc, #84]	; (170fc <now()+0x84>)
   170a8:	683b      	ldr	r3, [r7, #0]
   170aa:	4283      	cmp	r3, r0
   170ac:	d80f      	bhi.n	170ce <now()+0x56>
    if (getTimePtr != 0) {
   170ae:	4b14      	ldr	r3, [pc, #80]	; (17100 <now()+0x88>)
   170b0:	681b      	ldr	r3, [r3, #0]
   170b2:	b163      	cbz	r3, 170ce <now()+0x56>
      time_t t = getTimePtr();
   170b4:	4798      	blx	r3
      if (t != 0) {
   170b6:	4301      	orrs	r1, r0
   170b8:	d00b      	beq.n	170d2 <now()+0x5a>
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
   170ba:	4b12      	ldr	r3, [pc, #72]	; (17104 <now()+0x8c>)
   170bc:	6822      	ldr	r2, [r4, #0]
   170be:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
   170c0:	602a      	str	r2, [r5, #0]
  Status = timeSet;
   170c2:	2202      	movs	r2, #2
  nextSyncTime = (uint32_t)t + syncInterval;
   170c4:	4403      	add	r3, r0
  sysTime = (uint32_t)t;  
   170c6:	6030      	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
   170c8:	603b      	str	r3, [r7, #0]
  Status = timeSet;
   170ca:	4b0f      	ldr	r3, [pc, #60]	; (17108 <now()+0x90>)
   170cc:	701a      	strb	r2, [r3, #0]
}
   170ce:	2100      	movs	r1, #0
   170d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
   170d2:	490d      	ldr	r1, [pc, #52]	; (17108 <now()+0x90>)
        nextSyncTime = sysTime + syncInterval;
   170d4:	4b0b      	ldr	r3, [pc, #44]	; (17104 <now()+0x8c>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
   170d6:	780a      	ldrb	r2, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
   170d8:	6830      	ldr	r0, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
   170da:	3a00      	subs	r2, #0
        nextSyncTime = sysTime + syncInterval;
   170dc:	681b      	ldr	r3, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
   170de:	bf18      	it	ne
   170e0:	2201      	movne	r2, #1
        nextSyncTime = sysTime + syncInterval;
   170e2:	4403      	add	r3, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
   170e4:	700a      	strb	r2, [r1, #0]
}
   170e6:	2100      	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
   170e8:	603b      	str	r3, [r7, #0]
}
   170ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170ec:	6830      	ldr	r0, [r6, #0]
   170ee:	e7da      	b.n	170a6 <now()+0x2e>
   170f0:	20006344 	.word	0x20006344
   170f4:	2000566c 	.word	0x2000566c
   170f8:	200057cc 	.word	0x200057cc
   170fc:	200057c0 	.word	0x200057c0
   17100:	20005bec 	.word	0x20005bec
   17104:	20003d58 	.word	0x20003d58
   17108:	20006a9d 	.word	0x20006a9d

0001710c <hour()>:
int hour() { // the hour now 
   1710c:	b570      	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
   1710e:	4e09      	ldr	r6, [pc, #36]	; (17134 <hour()+0x28>)
  return hour(now()); 
   17110:	f7ff ffb2 	bl	17078 <now()>
  if (t != cacheTime) {
   17114:	e9d6 2300 	ldrd	r2, r3, [r6]
   17118:	4299      	cmp	r1, r3
   1711a:	bf08      	it	eq
   1711c:	4290      	cmpeq	r0, r2
   1711e:	d006      	beq.n	1712e <hour()+0x22>
   17120:	4605      	mov	r5, r0
   17122:	460c      	mov	r4, r1
    breakTime(t, tm); 
   17124:	4a04      	ldr	r2, [pc, #16]	; (17138 <hour()+0x2c>)
   17126:	f7ff fe77 	bl	16e18 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
   1712a:	e9c6 5400 	strd	r5, r4, [r6]
  return tm.Hour;  
   1712e:	4b02      	ldr	r3, [pc, #8]	; (17138 <hour()+0x2c>)
}
   17130:	7898      	ldrb	r0, [r3, #2]
   17132:	bd70      	pop	{r4, r5, r6, pc}
   17134:	200050e0 	.word	0x200050e0
   17138:	200057c4 	.word	0x200057c4

0001713c <minute()>:
int minute() {
   1713c:	b570      	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
   1713e:	4e09      	ldr	r6, [pc, #36]	; (17164 <minute()+0x28>)
  return minute(now()); 
   17140:	f7ff ff9a 	bl	17078 <now()>
  if (t != cacheTime) {
   17144:	e9d6 2300 	ldrd	r2, r3, [r6]
   17148:	4299      	cmp	r1, r3
   1714a:	bf08      	it	eq
   1714c:	4290      	cmpeq	r0, r2
   1714e:	d006      	beq.n	1715e <minute()+0x22>
   17150:	4605      	mov	r5, r0
   17152:	460c      	mov	r4, r1
    breakTime(t, tm); 
   17154:	4a04      	ldr	r2, [pc, #16]	; (17168 <minute()+0x2c>)
   17156:	f7ff fe5f 	bl	16e18 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
   1715a:	e9c6 5400 	strd	r5, r4, [r6]
  return tm.Minute;  
   1715e:	4b02      	ldr	r3, [pc, #8]	; (17168 <minute()+0x2c>)
}
   17160:	7858      	ldrb	r0, [r3, #1]
   17162:	bd70      	pop	{r4, r5, r6, pc}
   17164:	200050e0 	.word	0x200050e0
   17168:	200057c4 	.word	0x200057c4

0001716c <second()>:
int second() {
   1716c:	b570      	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
   1716e:	4e09      	ldr	r6, [pc, #36]	; (17194 <second()+0x28>)
  return second(now()); 
   17170:	f7ff ff82 	bl	17078 <now()>
  if (t != cacheTime) {
   17174:	e9d6 2300 	ldrd	r2, r3, [r6]
   17178:	4299      	cmp	r1, r3
   1717a:	bf08      	it	eq
   1717c:	4290      	cmpeq	r0, r2
   1717e:	d006      	beq.n	1718e <second()+0x22>
   17180:	4605      	mov	r5, r0
   17182:	460c      	mov	r4, r1
    breakTime(t, tm); 
   17184:	4a04      	ldr	r2, [pc, #16]	; (17198 <second()+0x2c>)
   17186:	f7ff fe47 	bl	16e18 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
   1718a:	e9c6 5400 	strd	r5, r4, [r6]
  return tm.Second;
   1718e:	4b02      	ldr	r3, [pc, #8]	; (17198 <second()+0x2c>)
}
   17190:	7818      	ldrb	r0, [r3, #0]
   17192:	bd70      	pop	{r4, r5, r6, pc}
   17194:	200050e0 	.word	0x200050e0
   17198:	200057c4 	.word	0x200057c4

0001719c <day()>:
int day(){
   1719c:	b570      	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
   1719e:	4e09      	ldr	r6, [pc, #36]	; (171c4 <day()+0x28>)
  return(day(now())); 
   171a0:	f7ff ff6a 	bl	17078 <now()>
  if (t != cacheTime) {
   171a4:	e9d6 2300 	ldrd	r2, r3, [r6]
   171a8:	4299      	cmp	r1, r3
   171aa:	bf08      	it	eq
   171ac:	4290      	cmpeq	r0, r2
   171ae:	d006      	beq.n	171be <day()+0x22>
   171b0:	4605      	mov	r5, r0
   171b2:	460c      	mov	r4, r1
    breakTime(t, tm); 
   171b4:	4a04      	ldr	r2, [pc, #16]	; (171c8 <day()+0x2c>)
   171b6:	f7ff fe2f 	bl	16e18 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
   171ba:	e9c6 5400 	strd	r5, r4, [r6]
  return tm.Day;
   171be:	4b02      	ldr	r3, [pc, #8]	; (171c8 <day()+0x2c>)
}
   171c0:	7918      	ldrb	r0, [r3, #4]
   171c2:	bd70      	pop	{r4, r5, r6, pc}
   171c4:	200050e0 	.word	0x200050e0
   171c8:	200057c4 	.word	0x200057c4

000171cc <month()>:
int month(){
   171cc:	b570      	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
   171ce:	4e09      	ldr	r6, [pc, #36]	; (171f4 <month()+0x28>)
  return month(now()); 
   171d0:	f7ff ff52 	bl	17078 <now()>
  if (t != cacheTime) {
   171d4:	e9d6 2300 	ldrd	r2, r3, [r6]
   171d8:	4299      	cmp	r1, r3
   171da:	bf08      	it	eq
   171dc:	4290      	cmpeq	r0, r2
   171de:	d006      	beq.n	171ee <month()+0x22>
   171e0:	4605      	mov	r5, r0
   171e2:	460c      	mov	r4, r1
    breakTime(t, tm); 
   171e4:	4a04      	ldr	r2, [pc, #16]	; (171f8 <month()+0x2c>)
   171e6:	f7ff fe17 	bl	16e18 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
   171ea:	e9c6 5400 	strd	r5, r4, [r6]
  return tm.Month;
   171ee:	4b02      	ldr	r3, [pc, #8]	; (171f8 <month()+0x2c>)
}
   171f0:	7958      	ldrb	r0, [r3, #5]
   171f2:	bd70      	pop	{r4, r5, r6, pc}
   171f4:	200050e0 	.word	0x200050e0
   171f8:	200057c4 	.word	0x200057c4

000171fc <year()>:
int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
   171fc:	b570      	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
   171fe:	4e0a      	ldr	r6, [pc, #40]	; (17228 <year()+0x2c>)
  return year(now()); 
   17200:	f7ff ff3a 	bl	17078 <now()>
  if (t != cacheTime) {
   17204:	e9d6 2300 	ldrd	r2, r3, [r6]
   17208:	4299      	cmp	r1, r3
   1720a:	bf08      	it	eq
   1720c:	4290      	cmpeq	r0, r2
   1720e:	d006      	beq.n	1721e <year()+0x22>
   17210:	4605      	mov	r5, r0
   17212:	460c      	mov	r4, r1
    breakTime(t, tm); 
   17214:	4a05      	ldr	r2, [pc, #20]	; (1722c <year()+0x30>)
   17216:	f7ff fdff 	bl	16e18 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
   1721a:	e9c6 5400 	strd	r5, r4, [r6]
  return tmYearToCalendar(tm.Year);
   1721e:	4b03      	ldr	r3, [pc, #12]	; (1722c <year()+0x30>)
   17220:	7998      	ldrb	r0, [r3, #6]
}
   17222:	f200 70b2 	addw	r0, r0, #1970	; 0x7b2
   17226:	bd70      	pop	{r4, r5, r6, pc}
   17228:	200050e0 	.word	0x200050e0
   1722c:	200057c4 	.word	0x200057c4

00017230 <setTime(long long)>:
  nextSyncTime = (uint32_t)t + syncInterval;
   17230:	4b08      	ldr	r3, [pc, #32]	; (17254 <setTime(long long)+0x24>)
   17232:	4909      	ldr	r1, [pc, #36]	; (17258 <setTime(long long)+0x28>)
   17234:	681b      	ldr	r3, [r3, #0]
   17236:	4a09      	ldr	r2, [pc, #36]	; (1725c <setTime(long long)+0x2c>)
   17238:	4403      	add	r3, r0
   1723a:	6812      	ldr	r2, [r2, #0]
void setTime(time_t t) { 
   1723c:	b410      	push	{r4}
  nextSyncTime = (uint32_t)t + syncInterval;
   1723e:	600b      	str	r3, [r1, #0]
  Status = timeSet;
   17240:	2102      	movs	r1, #2
   17242:	4b07      	ldr	r3, [pc, #28]	; (17260 <setTime(long long)+0x30>)
  sysTime = (uint32_t)t;  
   17244:	4c07      	ldr	r4, [pc, #28]	; (17264 <setTime(long long)+0x34>)
  Status = timeSet;
   17246:	7019      	strb	r1, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
   17248:	4b07      	ldr	r3, [pc, #28]	; (17268 <setTime(long long)+0x38>)
  sysTime = (uint32_t)t;  
   1724a:	6020      	str	r0, [r4, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
   1724c:	601a      	str	r2, [r3, #0]
} 
   1724e:	f85d 4b04 	ldr.w	r4, [sp], #4
   17252:	4770      	bx	lr
   17254:	20003d58 	.word	0x20003d58
   17258:	200057c0 	.word	0x200057c0
   1725c:	20006344 	.word	0x20006344
   17260:	20006a9d 	.word	0x20006a9d
   17264:	200057cc 	.word	0x200057cc
   17268:	2000566c 	.word	0x2000566c

0001726c <setTime(int, int, int, int, int, int)>:

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
   1726c:	b510      	push	{r4, lr}
   1726e:	9c03      	ldr	r4, [sp, #12]
   17270:	4686      	mov	lr, r0
 //it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
   17272:	4810      	ldr	r0, [pc, #64]	; (172b4 <setTime(int, int, int, int, int, int)+0x48>)
  if( yr > 99)
   17274:	2c63      	cmp	r4, #99	; 0x63
  tm.Month = mnth;
  tm.Day = dy;
   17276:	7103      	strb	r3, [r0, #4]
      yr = yr - 1970;
   17278:	bfcc      	ite	gt
   1727a:	f2a4 7cb2 	subwgt	ip, r4, #1970	; 0x7b2
      yr += 30;  
   1727e:	f104 0c1e 	addle.w	ip, r4, #30
  tm.Month = mnth;
   17282:	9c02      	ldr	r4, [sp, #8]
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
   17284:	7002      	strb	r2, [r0, #0]
  tm.Year = yr;
   17286:	f880 c006 	strb.w	ip, [r0, #6]
  tm.Month = mnth;
   1728a:	7144      	strb	r4, [r0, #5]
  tm.Hour = hr;
   1728c:	f880 e002 	strb.w	lr, [r0, #2]
  tm.Minute = min;
   17290:	7041      	strb	r1, [r0, #1]
  setTime(makeTime(tm));
   17292:	f7ff fe79 	bl	16f88 <makeTime(tmElements_t const&)>
  nextSyncTime = (uint32_t)t + syncInterval;
   17296:	4b08      	ldr	r3, [pc, #32]	; (172b8 <setTime(int, int, int, int, int, int)+0x4c>)
  sysTime = (uint32_t)t;  
   17298:	4908      	ldr	r1, [pc, #32]	; (172bc <setTime(int, int, int, int, int, int)+0x50>)
  nextSyncTime = (uint32_t)t + syncInterval;
   1729a:	681b      	ldr	r3, [r3, #0]
  sysTime = (uint32_t)t;  
   1729c:	6008      	str	r0, [r1, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
   1729e:	4403      	add	r3, r0
   172a0:	4907      	ldr	r1, [pc, #28]	; (172c0 <setTime(int, int, int, int, int, int)+0x54>)
   172a2:	4a08      	ldr	r2, [pc, #32]	; (172c4 <setTime(int, int, int, int, int, int)+0x58>)
  Status = timeSet;
   172a4:	2002      	movs	r0, #2
  nextSyncTime = (uint32_t)t + syncInterval;
   172a6:	600b      	str	r3, [r1, #0]
   172a8:	6812      	ldr	r2, [r2, #0]
  Status = timeSet;
   172aa:	4907      	ldr	r1, [pc, #28]	; (172c8 <setTime(int, int, int, int, int, int)+0x5c>)
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
   172ac:	4b07      	ldr	r3, [pc, #28]	; (172cc <setTime(int, int, int, int, int, int)+0x60>)
  Status = timeSet;
   172ae:	7008      	strb	r0, [r1, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
   172b0:	601a      	str	r2, [r3, #0]
}
   172b2:	bd10      	pop	{r4, pc}
   172b4:	200057c4 	.word	0x200057c4
   172b8:	20003d58 	.word	0x20003d58
   172bc:	200057cc 	.word	0x200057cc
   172c0:	200057c0 	.word	0x200057c0
   172c4:	20006344 	.word	0x20006344
   172c8:	20006a9d 	.word	0x20006a9d
   172cc:	2000566c 	.word	0x2000566c

000172d0 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   172d0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   172d4:	b672      	cpsid	i
	if (_triggered == false) {
   172d6:	7f43      	ldrb	r3, [r0, #29]
   172d8:	b95b      	cbnz	r3, 172f2 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
   172da:	7f01      	ldrb	r1, [r0, #28]
   172dc:	2901      	cmp	r1, #1
{
   172de:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
   172e0:	d00b      	beq.n	172fa <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
   172e2:	2903      	cmp	r1, #3
   172e4:	d013      	beq.n	1730e <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
   172e6:	2301      	movs	r3, #1
   172e8:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   172ea:	b902      	cbnz	r2, 172ee <EventResponder::triggerEventNotImmediate()+0x1e>
   172ec:	b662      	cpsie	i
}
   172ee:	bc30      	pop	{r4, r5}
   172f0:	4770      	bx	lr
   172f2:	b90a      	cbnz	r2, 172f8 <EventResponder::triggerEventNotImmediate()+0x28>
   172f4:	b662      	cpsie	i
   172f6:	4770      	bx	lr
   172f8:	4770      	bx	lr
			if (firstYield == nullptr) {
   172fa:	4c12      	ldr	r4, [pc, #72]	; (17344 <EventResponder::triggerEventNotImmediate()+0x74>)
   172fc:	6821      	ldr	r1, [r4, #0]
   172fe:	b1b1      	cbz	r1, 1732e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
   17300:	4911      	ldr	r1, [pc, #68]	; (17348 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
   17302:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
   17304:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
   17306:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
   17308:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   1730a:	6158      	str	r0, [r3, #20]
				lastYield = this;
   1730c:	e7eb      	b.n	172e6 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
   1730e:	4d0f      	ldr	r5, [pc, #60]	; (1734c <EventResponder::triggerEventNotImmediate()+0x7c>)
   17310:	490f      	ldr	r1, [pc, #60]	; (17350 <EventResponder::triggerEventNotImmediate()+0x80>)
   17312:	682c      	ldr	r4, [r5, #0]
   17314:	b18c      	cbz	r4, 1733a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
   17316:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
   17318:	680b      	ldr	r3, [r1, #0]
   1731a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   1731c:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1731e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17322:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
   17326:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   17328:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
   1732c:	e7db      	b.n	172e6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
   1732e:	4b06      	ldr	r3, [pc, #24]	; (17348 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
   17330:	6020      	str	r0, [r4, #0]
				lastYield = this;
   17332:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
   17334:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
   17338:	e7d5      	b.n	172e6 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
   1733a:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
   1733e:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
   17340:	e7ed      	b.n	1731e <EventResponder::triggerEventNotImmediate()+0x4e>
   17342:	bf00      	nop
   17344:	200057d0 	.word	0x200057d0
   17348:	200057dc 	.word	0x200057dc
   1734c:	200057d8 	.word	0x200057d8
   17350:	200057d4 	.word	0x200057d4

00017354 <EventResponder::runFromInterrupt()>:
{
   17354:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   17356:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   1735a:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   1735c:	4c0c      	ldr	r4, [pc, #48]	; (17390 <EventResponder::runFromInterrupt()+0x3c>)
   1735e:	6820      	ldr	r0, [r4, #0]
		if (first) {
   17360:	b180      	cbz	r0, 17384 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
   17362:	4e0c      	ldr	r6, [pc, #48]	; (17394 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
   17364:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
   17366:	6943      	ldr	r3, [r0, #20]
   17368:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
   1736a:	b173      	cbz	r3, 1738a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   1736c:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
   1736e:	b902      	cbnz	r2, 17372 <EventResponder::runFromInterrupt()+0x1e>
   17370:	b662      	cpsie	i
			(*(first->_function))(*first);
   17372:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
   17374:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   17376:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   17378:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   1737c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   1737e:	6820      	ldr	r0, [r4, #0]
		if (first) {
   17380:	2800      	cmp	r0, #0
   17382:	d1f0      	bne.n	17366 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
   17384:	b902      	cbnz	r2, 17388 <EventResponder::runFromInterrupt()+0x34>
   17386:	b662      	cpsie	i
}
   17388:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
   1738a:	6033      	str	r3, [r6, #0]
   1738c:	e7ef      	b.n	1736e <EventResponder::runFromInterrupt()+0x1a>
   1738e:	bf00      	nop
   17390:	200057d8 	.word	0x200057d8
   17394:	200057d4 	.word	0x200057d4

00017398 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
   17398:	f7ff bfdc 	b.w	17354 <EventResponder::runFromInterrupt()>

0001739c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   1739c:	4904      	ldr	r1, [pc, #16]	; (173b0 <systick_isr+0x14>)
	systick_millis_count++;
   1739e:	4a05      	ldr	r2, [pc, #20]	; (173b4 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
   173a0:	6849      	ldr	r1, [r1, #4]
   173a2:	4b05      	ldr	r3, [pc, #20]	; (173b8 <systick_isr+0x1c>)
   173a4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
   173a6:	6813      	ldr	r3, [r2, #0]
   173a8:	3301      	adds	r3, #1
   173aa:	6013      	str	r3, [r2, #0]
}
   173ac:	4770      	bx	lr
   173ae:	bf00      	nop
   173b0:	e0001000 	.word	0xe0001000
   173b4:	20006344 	.word	0x20006344
   173b8:	20006340 	.word	0x20006340

000173bc <HardwareSerialIMXRT::operator bool()>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial_begin(BAUD2DIV(baud));
					  serial_format(format); }
	*/

	operator bool()			{ return true; }
   173bc:	2001      	movs	r0, #1
   173be:	4770      	bx	lr

000173c0 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
   173c0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
   173c4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
   173c8:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
   173ca:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
   173cc:	4293      	cmp	r3, r2
   173ce:	d202      	bcs.n	173d6 <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
   173d0:	3a01      	subs	r2, #1
   173d2:	1ad0      	subs	r0, r2, r3
}
   173d4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
   173d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
   173d8:	3901      	subs	r1, #1
   173da:	440a      	add	r2, r1
   173dc:	1ad0      	subs	r0, r2, r3
   173de:	4770      	bx	lr

000173e0 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   173e0:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
   173e2:	b672      	cpsid	i
	head = rx_buffer_head_;
   173e4:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
   173e8:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
   173ec:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
   173ee:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
   173f0:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
   173f2:	bf3c      	itt	cc
   173f4:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
   173f6:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
   173f8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
   173fa:	1ad3      	subs	r3, r2, r3
	__enable_irq();
   173fc:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
   173fe:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
   17402:	4418      	add	r0, r3
   17404:	4770      	bx	lr
   17406:	bf00      	nop

00017408 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
   17408:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
   1740c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
   1740e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
   17412:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
   17414:	b29b      	uxth	r3, r3
	if (head == tail) {
   17416:	4299      	cmp	r1, r3
{
   17418:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   1741a:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
   1741c:	d014      	beq.n	17448 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
   1741e:	3301      	adds	r3, #1
   17420:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
   17422:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
   17424:	4298      	cmp	r0, r3
   17426:	bf98      	it	ls
   17428:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
   1742a:	4299      	cmp	r1, r3
   1742c:	d806      	bhi.n	1743c <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
   1742e:	1a5b      	subs	r3, r3, r1
   17430:	6a52      	ldr	r2, [r2, #36]	; 0x24
   17432:	5cd0      	ldrb	r0, [r2, r3]
   17434:	b2c0      	uxtb	r0, r0
	}
}
   17436:	f85d 4b04 	ldr.w	r4, [sp], #4
   1743a:	4770      	bx	lr
		return rx_buffer_[tail];
   1743c:	6a12      	ldr	r2, [r2, #32]
}
   1743e:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
   17442:	5cd0      	ldrb	r0, [r2, r3]
   17444:	b2c0      	uxtb	r0, r0
}
   17446:	4770      	bx	lr
		__disable_irq();
   17448:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
   1744a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
   1744e:	b280      	uxth	r0, r0
		if (head == tail) {
   17450:	4281      	cmp	r1, r0
   17452:	d001      	beq.n	17458 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
   17454:	b662      	cpsie	i
   17456:	e7e2      	b.n	1741e <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
   17458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1745a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
   1745e:	d103      	bne.n	17468 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
   17460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
   17464:	b662      	cpsie	i
			return c;
   17466:	e7e6      	b.n	17436 <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
   17468:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
   1746a:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
   1746c:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
   1746e:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
   17470:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
   17474:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
   17478:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
   1747a:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
   1747e:	704b      	strb	r3, [r1, #1]
   17480:	e7f0      	b.n	17464 <HardwareSerialIMXRT::peek()+0x5c>
   17482:	bf00      	nop

00017484 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
   17484:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
   17488:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
   1748a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
   1748e:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
   17490:	b29b      	uxth	r3, r3
	if (head == tail) {
   17492:	4299      	cmp	r1, r3
{
   17494:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   17496:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
   17498:	d025      	beq.n	174e6 <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
   1749a:	3301      	adds	r3, #1
   1749c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   1749e:	429c      	cmp	r4, r3
   174a0:	d916      	bls.n	174d0 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
   174a2:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
   174a4:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
   174a8:	4298      	cmp	r0, r3
   174aa:	d917      	bls.n	174dc <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
   174ac:	6a10      	ldr	r0, [r2, #32]
   174ae:	5cc0      	ldrb	r0, [r0, r3]
   174b0:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
   174b2:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
   174b4:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
   174b8:	b145      	cbz	r5, 174cc <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
   174ba:	4299      	cmp	r1, r3
   174bc:	d31c      	bcc.n	174f8 <HardwareSerialIMXRT::read()+0x74>
   174be:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
   174c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   174c2:	4299      	cmp	r1, r3
   174c4:	d302      	bcc.n	174cc <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
   174c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   174c8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
   174cc:	bc30      	pop	{r4, r5}
   174ce:	4770      	bx	lr
   174d0:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
   174d4:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
   174d6:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
   174d8:	4298      	cmp	r0, r3
   174da:	d8e7      	bhi.n	174ac <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
   174dc:	1a18      	subs	r0, r3, r0
   174de:	6a55      	ldr	r5, [r2, #36]	; 0x24
   174e0:	5c28      	ldrb	r0, [r5, r0]
   174e2:	b2c0      	uxtb	r0, r0
   174e4:	e7e5      	b.n	174b2 <HardwareSerialIMXRT::read()+0x2e>
   174e6:	4608      	mov	r0, r1
		__disable_irq();
   174e8:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
   174ea:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
   174ee:	b289      	uxth	r1, r1
		if (head == tail) {
   174f0:	4288      	cmp	r0, r1
   174f2:	d004      	beq.n	174fe <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
   174f4:	b662      	cpsie	i
   174f6:	e7d0      	b.n	1749a <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
   174f8:	440c      	add	r4, r1
   174fa:	1ae3      	subs	r3, r4, r3
   174fc:	e7e0      	b.n	174c0 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
   174fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17500:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
   17504:	d103      	bne.n	1750e <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
   17506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
   1750a:	b662      	cpsie	i
			return c;
   1750c:	e7de      	b.n	174cc <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
   1750e:	69e0      	ldr	r0, [r4, #28]
   17510:	f3c0 0009 	ubfx	r0, r0, #0, #10
   17514:	e7f9      	b.n	1750a <HardwareSerialIMXRT::read()+0x86>
   17516:	bf00      	nop

00017518 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
   17518:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   1751c:	b143      	cbz	r3, 17530 <HardwareSerialIMXRT::flush()+0x18>
{
   1751e:	b510      	push	{r4, lr}
   17520:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
   17522:	f002 fcc9 	bl	19eb8 <yield>
   17526:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1752a:	2b00      	cmp	r3, #0
   1752c:	d1f9      	bne.n	17522 <HardwareSerialIMXRT::flush()+0xa>
}
   1752e:	bd10      	pop	{r4, pc}
   17530:	4770      	bx	lr
   17532:	bf00      	nop

00017534 <HardwareSerialIMXRT::end()>:
{
   17534:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   17536:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
   1753a:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
   1753e:	6809      	ldr	r1, [r1, #0]
   17540:	4211      	tst	r1, r2
   17542:	d028      	beq.n	17596 <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
   17544:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   17548:	4604      	mov	r4, r0
   1754a:	b132      	cbz	r2, 1755a <HardwareSerialIMXRT::end()+0x26>
   1754c:	f002 fcb4 	bl	19eb8 <yield>
   17550:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   17554:	2b00      	cmp	r3, #0
   17556:	d1f9      	bne.n	1754c <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
   17558:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
   1755a:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
   1755c:	4a0e      	ldr	r2, [pc, #56]	; (17598 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
   1755e:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
   17560:	7e20      	ldrb	r0, [r4, #24]
   17562:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   17566:	7d00      	ldrb	r0, [r0, #20]
   17568:	eb02 1000 	add.w	r0, r2, r0, lsl #4
   1756c:	6845      	ldr	r5, [r0, #4]
   1756e:	2005      	movs	r0, #5
   17570:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
   17572:	7e65      	ldrb	r5, [r4, #25]
   17574:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17578:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   1757c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
   17580:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
   17582:	6852      	ldr	r2, [r2, #4]
   17584:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
   17586:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
   1758a:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
   1758e:	b113      	cbz	r3, 17596 <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
   17590:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   17592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   17596:	bd38      	pop	{r3, r4, r5, pc}
   17598:	20002b88 	.word	0x20002b88

0001759c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
   1759c:	ee07 1a90 	vmov	s15, r1
   175a0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 1780c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
   175a4:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
   175a6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
   175aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
   175ae:	ed9f 6a98 	vldr	s12, [pc, #608]	; 17810 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
   175b2:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
   175b6:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
   175ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
   175be:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   175c0:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
   175c2:	2401      	movs	r4, #1
		float div = base / (float)osr;
   175c4:	ee07 1a90 	vmov	s15, r1
   175c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   175cc:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
   175d0:	ee77 7a05 	vadd.f32	s15, s14, s10
   175d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   175d8:	ee17 3a90 	vmov	r3, s15
   175dc:	4563      	cmp	r3, ip
   175de:	bfa8      	it	ge
   175e0:	4663      	movge	r3, ip
   175e2:	2b01      	cmp	r3, #1
   175e4:	bfb8      	it	lt
   175e6:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
   175e8:	ee07 3a90 	vmov	s15, r3
   175ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   175f0:	ee76 6ac7 	vsub.f32	s13, s13, s14
   175f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
   175f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   175fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17600:	bf48      	it	mi
   17602:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
   17606:	eef4 7ac6 	vcmpe.f32	s15, s12
   1760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1760e:	d803      	bhi.n	17618 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
   17610:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
   17614:	468e      	mov	lr, r1
			bestdiv = divint;
   17616:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
   17618:	3101      	adds	r1, #1
   1761a:	2921      	cmp	r1, #33	; 0x21
   1761c:	d1d2      	bne.n	175c4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
   1761e:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
   17620:	6943      	ldr	r3, [r0, #20]
   17622:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
   17626:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
   1762a:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
   1762e:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
   17630:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
   17634:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
   17638:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
   1763c:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
   17640:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
   17644:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
   17646:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
   17648:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
   1764c:	eba1 010c 	sub.w	r1, r1, ip
   17650:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
   17654:	6839      	ldr	r1, [r7, #0]
   17656:	691e      	ldr	r6, [r3, #16]
   17658:	ea41 0106 	orr.w	r1, r1, r6
   1765c:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
   1765e:	bf14      	ite	ne
   17660:	2101      	movne	r1, #1
   17662:	2100      	moveq	r1, #0
   17664:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
   17666:	f040 80ac 	bne.w	177c2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1766a:	7e01      	ldrb	r1, [r0, #24]
   1766c:	4e69      	ldr	r6, [pc, #420]	; (17814 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
   1766e:	eb03 1801 	add.w	r8, r3, r1, lsl #4
   17672:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 17834 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
   17676:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
   1767a:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1767e:	eb06 1707 	add.w	r7, r6, r7, lsl #4
   17682:	68b9      	ldr	r1, [r7, #8]
   17684:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
   17688:	6879      	ldr	r1, [r7, #4]
   1768a:	f8d8 7018 	ldr.w	r7, [r8, #24]
   1768e:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
   17690:	f1ba 0f00 	cmp.w	sl, #0
   17694:	d003      	beq.n	1769e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
   17696:	f8d8 1020 	ldr.w	r1, [r8, #32]
   1769a:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
   1769e:	7e47      	ldrb	r7, [r0, #25]
   176a0:	21d9      	movs	r1, #217	; 0xd9
   176a2:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
   176a6:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
   176aa:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
   176ae:	f8dc 7008 	ldr.w	r7, [ip, #8]
   176b2:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
   176b4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   176b8:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
   176bc:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
   176be:	7e41      	ldrb	r1, [r0, #25]
   176c0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
   176c4:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
   176c6:	b10f      	cbz	r7, 176cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
   176c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
   176ca:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
   176cc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
   176d0:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
   176d4:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
   176d8:	bfcc      	ite	gt
   176da:	f04f 0e00 	movgt.w	lr, #0
   176de:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
   176e2:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
   176e6:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
   176ea:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
   176ec:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
   176ee:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   176f0:	7859      	ldrb	r1, [r3, #1]
   176f2:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
   176f6:	2100      	movs	r1, #0
   176f8:	60e9      	str	r1, [r5, #12]
   176fa:	4947      	ldr	r1, [pc, #284]	; (17818 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
   176fc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
   17700:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
   17702:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
   17706:	4c45      	ldr	r4, [pc, #276]	; (1781c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
   17708:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
   1770c:	784f      	ldrb	r7, [r1, #1]
   1770e:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
   17712:	4b43      	ldr	r3, [pc, #268]	; (17820 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
   17714:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
   17716:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
   1771a:	6944      	ldr	r4, [r0, #20]
   1771c:	7861      	ldrb	r1, [r4, #1]
   1771e:	eb03 1351 	add.w	r3, r3, r1, lsr #5
   17722:	f001 011f 	and.w	r1, r1, #31
   17726:	009b      	lsls	r3, r3, #2
   17728:	fa0e f101 	lsl.w	r1, lr, r1
   1772c:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
   1772e:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
   17730:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17732:	f043 0388 	orr.w	r3, r3, #136	; 0x88
   17736:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
   17738:	0753      	lsls	r3, r2, #29
   1773a:	d43e      	bmi.n	177ba <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
   1773c:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
   17740:	f002 010f 	and.w	r1, r2, #15
   17744:	2904      	cmp	r1, #4
   17746:	bf08      	it	eq
   17748:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
   1774c:	0697      	lsls	r7, r2, #26
   1774e:	d52e      	bpl.n	177ae <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
   17750:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
   17752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
   17756:	2900      	cmp	r1, #0
   17758:	d13a      	bne.n	177d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
   1775a:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
   1775c:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
   1775e:	d503      	bpl.n	17768 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
   17760:	692b      	ldr	r3, [r5, #16]
   17762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17766:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
   17768:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
   1776a:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
   1776c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
   17770:	bf48      	it	mi
   17772:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
   17776:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
   17778:	05d3      	lsls	r3, r2, #23
   1777a:	d503      	bpl.n	17784 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
   1777c:	692b      	ldr	r3, [r5, #16]
   1777e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17782:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
   17784:	68a3      	ldr	r3, [r4, #8]
   17786:	b183      	cbz	r3, 177aa <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   17788:	4e26      	ldr	r6, [pc, #152]	; (17824 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
   1778a:	7834      	ldrb	r4, [r6, #0]
   1778c:	2c00      	cmp	r4, #0
   1778e:	d03a      	beq.n	17806 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
   17790:	1e61      	subs	r1, r4, #1
   17792:	4d25      	ldr	r5, [pc, #148]	; (17828 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
   17794:	b2c9      	uxtb	r1, r1
   17796:	1f2b      	subs	r3, r5, #4
   17798:	eb05 0181 	add.w	r1, r5, r1, lsl #2
   1779c:	e001      	b.n	177a2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
   1779e:	4299      	cmp	r1, r3
   177a0:	d025      	beq.n	177ee <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
   177a2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   177a6:	4290      	cmp	r0, r2
   177a8:	d1f9      	bne.n	1779e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
   177aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
   177ae:	7e81      	ldrb	r1, [r0, #26]
   177b0:	2900      	cmp	r1, #0
   177b2:	d0d2      	beq.n	1775a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
   177b4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
   177b8:	e7cf      	b.n	1775a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
   177ba:	4b1c      	ldr	r3, [pc, #112]	; (1782c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
   177bc:	ea4c 0303 	orr.w	r3, ip, r3
   177c0:	e7be      	b.n	17740 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
   177c2:	7e47      	ldrb	r7, [r0, #25]
   177c4:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
   177c8:	4e12      	ldr	r6, [pc, #72]	; (17814 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
   177ca:	eb03 1807 	add.w	r8, r3, r7, lsl #4
   177ce:	e76a      	b.n	176a6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
   177d0:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
   177d2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
   177d6:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   177da:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
   177de:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   177e2:	68b6      	ldr	r6, [r6, #8]
   177e4:	6831      	ldr	r1, [r6, #0]
   177e6:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
   177ea:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
   177ec:	e7b5      	b.n	1775a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
   177ee:	1c63      	adds	r3, r4, #1
   177f0:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
   177f2:	4a0f      	ldr	r2, [pc, #60]	; (17830 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
   177f4:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
   177f6:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
   177f8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
   177fc:	f043 0302 	orr.w	r3, r3, #2
   17800:	7013      	strb	r3, [r2, #0]
};
   17802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   17806:	2301      	movs	r3, #1
   17808:	4d07      	ldr	r5, [pc, #28]	; (17828 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
   1780a:	e7f2      	b.n	177f2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
   1780c:	4bb71b00 	.word	0x4bb71b00
   17810:	60ad78ec 	.word	0x60ad78ec
   17814:	20002b88 	.word	0x20002b88
   17818:	20004c00 	.word	0x20004c00
   1781c:	e000e400 	.word	0xe000e400
   17820:	38003840 	.word	0x38003840
   17824:	20006aa0 	.word	0x20006aa0
   17828:	200057e0 	.word	0x200057e0
   1782c:	003c0010 	.word	0x003c0010
   17830:	20006abb 	.word	0x20006abb
   17834:	0001f038 	.word	0x0001f038

00017838 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
   17838:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
   1783c:	b9b8      	cbnz	r0, 1786e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1783e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
   17842:	b94b      	cbnz	r3, 17858 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   17844:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
   17848:	b93a      	cbnz	r2, 1785a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
   1784a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
   1784e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
   17852:	b150      	cbz	r0, 1786a <nvic_execution_priority()+0x32>
   17854:	4298      	cmp	r0, r3
   17856:	d208      	bcs.n	1786a <nvic_execution_priority()+0x32>
}
   17858:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
   1785a:	2a0f      	cmp	r2, #15
   1785c:	d9f7      	bls.n	1784e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
   1785e:	4b05      	ldr	r3, [pc, #20]	; (17874 <nvic_execution_priority()+0x3c>)
   17860:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
   17862:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
   17866:	2800      	cmp	r0, #0
   17868:	d1f4      	bne.n	17854 <nvic_execution_priority()+0x1c>
   1786a:	4618      	mov	r0, r3
	return priority;
   1786c:	4770      	bx	lr
	if (faultmask) return -1;
   1786e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17872:	e7f1      	b.n	17858 <nvic_execution_priority()+0x20>
   17874:	e000e3f0 	.word	0xe000e3f0

00017878 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
   17878:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1787e:	4604      	mov	r4, r0
   17880:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   17882:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
   17884:	b113      	cbz	r3, 1788c <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
   17886:	6d42      	ldr	r2, [r0, #84]	; 0x54
   17888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
   1788c:	7ea3      	ldrb	r3, [r4, #26]
   1788e:	b12b      	cbz	r3, 1789c <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
   17890:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
   17892:	69b3      	ldr	r3, [r6, #24]
   17894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   17898:	61b3      	str	r3, [r6, #24]
		__enable_irq();
   1789a:	b662      	cpsie	i
	head = tx_buffer_head_;
   1789c:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
   178a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
   178a2:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
   178a4:	3501      	adds	r5, #1
   178a6:	42ab      	cmp	r3, r5
   178a8:	d84c      	bhi.n	17944 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
   178aa:	f04f 0800 	mov.w	r8, #0
   178ae:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
   178b0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   178b4:	b29b      	uxth	r3, r3
   178b6:	429d      	cmp	r5, r3
   178b8:	d019      	beq.n	178ee <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
   178ba:	e028      	b.n	1790e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
   178bc:	6973      	ldr	r3, [r6, #20]
   178be:	021b      	lsls	r3, r3, #8
   178c0:	d510      	bpl.n	178e4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
   178c2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
   178c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
   178c8:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
   178ca:	3301      	adds	r3, #1
   178cc:	429a      	cmp	r2, r3
   178ce:	d936      	bls.n	1793e <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
   178d0:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
   178d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   178d4:	4299      	cmp	r1, r3
   178d6:	d92d      	bls.n	17934 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
   178d8:	69e1      	ldr	r1, [r4, #28]
   178da:	5ccb      	ldrb	r3, [r1, r3]
   178dc:	b2db      	uxtb	r3, r3
				port->DATA  = n;
   178de:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
   178e0:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
   178e4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   178e8:	b29b      	uxth	r3, r3
   178ea:	42ab      	cmp	r3, r5
   178ec:	d10f      	bne.n	1790e <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
   178ee:	f7ff ffa3 	bl	17838 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
   178f2:	6963      	ldr	r3, [r4, #20]
   178f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
   178f8:	4283      	cmp	r3, r0
   178fa:	dadf      	bge.n	178bc <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
   178fc:	28ff      	cmp	r0, #255	; 0xff
   178fe:	ddf1      	ble.n	178e4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
   17900:	f002 fada 	bl	19eb8 <yield>
	while (tx_buffer_tail_ == head) {
   17904:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   17908:	b29b      	uxth	r3, r3
   1790a:	42ab      	cmp	r3, r5
   1790c:	d0ef      	beq.n	178ee <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
   1790e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17910:	42ab      	cmp	r3, r5
   17912:	d91a      	bls.n	1794a <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
   17914:	b2ff      	uxtb	r7, r7
   17916:	69e3      	ldr	r3, [r4, #28]
   17918:	555f      	strb	r7, [r3, r5]
	__disable_irq();
   1791a:	b672      	cpsid	i
	transmitting_ = 1;
   1791c:	2001      	movs	r0, #1
   1791e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
   17922:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
   17926:	69b3      	ldr	r3, [r6, #24]
   17928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1792c:	61b3      	str	r3, [r6, #24]
	__enable_irq();
   1792e:	b662      	cpsie	i
}
   17930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
   17934:	1a5b      	subs	r3, r3, r1
   17936:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   17938:	5ccb      	ldrb	r3, [r1, r3]
   1793a:	b2db      	uxtb	r3, r3
   1793c:	e7cf      	b.n	178de <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
   1793e:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
   17940:	4613      	mov	r3, r2
   17942:	e7c6      	b.n	178d2 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
   17944:	fa1f f885 	uxth.w	r8, r5
   17948:	e7b2      	b.n	178b0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
   1794a:	1aed      	subs	r5, r5, r3
   1794c:	b2ff      	uxtb	r7, r7
   1794e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17950:	555f      	strb	r7, [r3, r5]
   17952:	e7e2      	b.n	1791a <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00017954 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
   17954:	f7ff bf90 	b.w	17878 <HardwareSerialIMXRT::write9bit(unsigned long)>

00017958 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
   17958:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
   1795a:	6953      	ldr	r3, [r2, #20]
   1795c:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
   17960:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
   17962:	d043      	beq.n	179ec <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
   17964:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
   17966:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
   1796a:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
   1796e:	d03a      	beq.n	179e6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
   17970:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
   17974:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
   17978:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
   1797a:	b2b6      	uxth	r6, r6
   1797c:	e007      	b.n	1798e <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
   1797e:	6a01      	ldr	r1, [r0, #32]
   17980:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
   17984:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
   17988:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
   1798c:	d01d      	beq.n	179ca <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
   1798e:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
   17990:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
   17992:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
   17994:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
   17998:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
   1799c:	429c      	cmp	r4, r3
   1799e:	bf98      	it	ls
   179a0:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
   179a2:	fa1f fc8c 	uxth.w	ip, ip
   179a6:	459c      	cmp	ip, r3
   179a8:	d0ec      	beq.n	17984 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
   179aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
   179ac:	fa5f fc81 	uxtb.w	ip, r1
   179b0:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
   179b2:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
   179b4:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
   179b8:	d8e1      	bhi.n	1797e <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
   179ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
   179bc:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
   179c0:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
   179c4:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
   179c8:	d1e1      	bne.n	1798e <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
   179ca:	b2ab      	uxth	r3, r5
   179cc:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
   179d0:	6d83      	ldr	r3, [r0, #88]	; 0x58
   179d2:	b143      	cbz	r3, 179e6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
   179d4:	42b5      	cmp	r5, r6
   179d6:	d354      	bcc.n	17a82 <HardwareSerialIMXRT::IRQHandler()+0x12a>
   179d8:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
   179da:	6c01      	ldr	r1, [r0, #64]	; 0x40
   179dc:	42a9      	cmp	r1, r5
   179de:	d802      	bhi.n	179e6 <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
   179e0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   179e2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
   179e6:	6953      	ldr	r3, [r2, #20]
   179e8:	02d9      	lsls	r1, r3, #11
   179ea:	d445      	bmi.n	17a78 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
   179ec:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
   179ee:	0233      	lsls	r3, r6, #8
   179f0:	d528      	bpl.n	17a44 <HardwareSerialIMXRT::IRQHandler()+0xec>
   179f2:	6953      	ldr	r3, [r2, #20]
   179f4:	021d      	lsls	r5, r3, #8
   179f6:	d525      	bpl.n	17a44 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
   179f8:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
   179fc:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
   17a00:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
   17a02:	b29b      	uxth	r3, r3
   17a04:	e006      	b.n	17a14 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
   17a06:	69c1      	ldr	r1, [r0, #28]
   17a08:	5cc9      	ldrb	r1, [r1, r3]
   17a0a:	b2c9      	uxtb	r1, r1
			port->DATA = n;
   17a0c:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
   17a0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   17a10:	054c      	lsls	r4, r1, #21
   17a12:	d412      	bmi.n	17a3a <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
   17a14:	42ab      	cmp	r3, r5
   17a16:	d038      	beq.n	17a8a <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
   17a18:	6b44      	ldr	r4, [r0, #52]	; 0x34
   17a1a:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
   17a1c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
   17a1e:	429c      	cmp	r4, r3
   17a20:	bf98      	it	ls
   17a22:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
   17a24:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
   17a26:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
   17a2a:	d8ec      	bhi.n	17a06 <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
   17a2c:	6a81      	ldr	r1, [r0, #40]	; 0x28
   17a2e:	5d09      	ldrb	r1, [r1, r4]
   17a30:	b2c9      	uxtb	r1, r1
			port->DATA = n;
   17a32:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
   17a34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   17a36:	054c      	lsls	r4, r1, #21
   17a38:	d5ec      	bpl.n	17a14 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
   17a3a:	b299      	uxth	r1, r3
		if (head == tail) {
   17a3c:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
   17a3e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
   17a42:	d025      	beq.n	17a90 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
   17a44:	0271      	lsls	r1, r6, #9
   17a46:	d516      	bpl.n	17a76 <HardwareSerialIMXRT::IRQHandler()+0x11e>
   17a48:	6953      	ldr	r3, [r2, #20]
   17a4a:	025b      	lsls	r3, r3, #9
   17a4c:	d513      	bpl.n	17a76 <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
   17a4e:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
   17a50:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
   17a52:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
   17a56:	b113      	cbz	r3, 17a5e <HardwareSerialIMXRT::IRQHandler()+0x106>
   17a58:	6d41      	ldr	r1, [r0, #84]	; 0x54
   17a5a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
   17a5e:	7e83      	ldrb	r3, [r0, #26]
   17a60:	b12b      	cbz	r3, 17a6e <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
   17a62:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
   17a64:	6993      	ldr	r3, [r2, #24]
   17a66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   17a6a:	6193      	str	r3, [r2, #24]
			__enable_irq();
   17a6c:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
   17a6e:	6993      	ldr	r3, [r2, #24]
   17a70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   17a74:	6193      	str	r3, [r2, #24]
}
   17a76:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
   17a78:	6953      	ldr	r3, [r2, #20]
   17a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17a7e:	6153      	str	r3, [r2, #20]
   17a80:	e7b4      	b.n	179ec <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
   17a82:	6b81      	ldr	r1, [r0, #56]	; 0x38
   17a84:	1b89      	subs	r1, r1, r6
   17a86:	440d      	add	r5, r1
   17a88:	e7a7      	b.n	179da <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
   17a8a:	b29b      	uxth	r3, r3
   17a8c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
   17a90:	6993      	ldr	r3, [r2, #24]
   17a92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   17a96:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
   17a98:	6993      	ldr	r3, [r2, #24]
   17a9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   17a9e:	6193      	str	r3, [r2, #24]
   17aa0:	e7d0      	b.n	17a44 <HardwareSerialIMXRT::IRQHandler()+0xec>
   17aa2:	bf00      	nop

00017aa4 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
   17aa4:	4801      	ldr	r0, [pc, #4]	; (17aac <IRQHandler_Serial1+0x8>)
   17aa6:	f7ff bf57 	b.w	17958 <HardwareSerialIMXRT::IRQHandler()>
   17aaa:	bf00      	nop
   17aac:	20003738 	.word	0x20003738

00017ab0 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
   17ab0:	4801      	ldr	r0, [pc, #4]	; (17ab8 <IRQHandler_Serial2+0x8>)
   17ab2:	f7ff bf51 	b.w	17958 <HardwareSerialIMXRT::IRQHandler()>
   17ab6:	bf00      	nop
   17ab8:	20003798 	.word	0x20003798

00017abc <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
   17abc:	4801      	ldr	r0, [pc, #4]	; (17ac4 <IRQHandler_Serial4+0x8>)
   17abe:	f7ff bf4b 	b.w	17958 <HardwareSerialIMXRT::IRQHandler()>
   17ac2:	bf00      	nop
   17ac4:	200037f8 	.word	0x200037f8

00017ac8 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
   17ac8:	4770      	bx	lr
   17aca:	bf00      	nop

00017acc <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   17acc:	4770      	bx	lr
   17ace:	bf00      	nop

00017ad0 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   17ad0:	4770      	bx	lr
   17ad2:	bf00      	nop

00017ad4 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
   17ad4:	4770      	bx	lr
   17ad6:	bf00      	nop

00017ad8 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   17ad8:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   17ada:	4c1a      	ldr	r4, [pc, #104]	; (17b44 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   17adc:	4d1a      	ldr	r5, [pc, #104]	; (17b48 <pit_isr()+0x70>)
   17ade:	6823      	ldr	r3, [r4, #0]
   17ae0:	42ab      	cmp	r3, r5
   17ae2:	d002      	beq.n	17aea <pit_isr()+0x12>
   17ae4:	4a19      	ldr	r2, [pc, #100]	; (17b4c <pit_isr()+0x74>)
   17ae6:	68d1      	ldr	r1, [r2, #12]
   17ae8:	bb29      	cbnz	r1, 17b36 <pit_isr()+0x5e>
   17aea:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   17aec:	42ab      	cmp	r3, r5
   17aee:	d002      	beq.n	17af6 <pit_isr()+0x1e>
   17af0:	4a16      	ldr	r2, [pc, #88]	; (17b4c <pit_isr()+0x74>)
   17af2:	69d1      	ldr	r1, [r2, #28]
   17af4:	b9c9      	cbnz	r1, 17b2a <pit_isr()+0x52>
   17af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   17af8:	42ab      	cmp	r3, r5
   17afa:	d002      	beq.n	17b02 <pit_isr()+0x2a>
   17afc:	4a13      	ldr	r2, [pc, #76]	; (17b4c <pit_isr()+0x74>)
   17afe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   17b00:	b969      	cbnz	r1, 17b1e <pit_isr()+0x46>
   17b02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   17b04:	42ab      	cmp	r3, r5
   17b06:	d009      	beq.n	17b1c <pit_isr()+0x44>
   17b08:	4a10      	ldr	r2, [pc, #64]	; (17b4c <pit_isr()+0x74>)
   17b0a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   17b0c:	b131      	cbz	r1, 17b1c <pit_isr()+0x44>
   17b0e:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   17b10:	681b      	ldr	r3, [r3, #0]
   17b12:	480f      	ldr	r0, [pc, #60]	; (17b50 <pit_isr()+0x78>)
   17b14:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
   17b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17b1a:	4718      	bx	r3
   17b1c:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   17b1e:	2101      	movs	r1, #1
   17b20:	681b      	ldr	r3, [r3, #0]
   17b22:	480c      	ldr	r0, [pc, #48]	; (17b54 <pit_isr()+0x7c>)
   17b24:	62d1      	str	r1, [r2, #44]	; 0x2c
   17b26:	4798      	blx	r3
        );
   17b28:	e7eb      	b.n	17b02 <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   17b2a:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   17b2c:	681b      	ldr	r3, [r3, #0]
   17b2e:	480a      	ldr	r0, [pc, #40]	; (17b58 <pit_isr()+0x80>)
   17b30:	61d1      	str	r1, [r2, #28]
   17b32:	4798      	blx	r3
        );
   17b34:	e7df      	b.n	17af6 <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   17b36:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   17b38:	681b      	ldr	r3, [r3, #0]
   17b3a:	f104 0008 	add.w	r0, r4, #8
   17b3e:	60d1      	str	r1, [r2, #12]
   17b40:	4798      	blx	r3
        );
   17b42:	e7d2      	b.n	17aea <pit_isr()+0x12>
   17b44:	20004ec0 	.word	0x20004ec0
   17b48:	200022b0 	.word	0x200022b0
   17b4c:	40084100 	.word	0x40084100
   17b50:	20004f10 	.word	0x20004f10
   17b54:	20004ef8 	.word	0x20004ef8
   17b58:	20004ee0 	.word	0x20004ee0

00017b5c <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   17b5c:	b538      	push	{r3, r4, r5, lr}
   17b5e:	4c06      	ldr	r4, [pc, #24]	; (17b78 <__tcf_0+0x1c>)
   17b60:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   17b64:	f854 3c08 	ldr.w	r3, [r4, #-8]
   17b68:	4620      	mov	r0, r4
   17b6a:	3c18      	subs	r4, #24
   17b6c:	68db      	ldr	r3, [r3, #12]
   17b6e:	4798      	blx	r3
   17b70:	42ac      	cmp	r4, r5
   17b72:	d1f7      	bne.n	17b64 <__tcf_0+0x8>
   17b74:	bd38      	pop	{r3, r4, r5, pc}
   17b76:	bf00      	nop
   17b78:	20004f10 	.word	0x20004f10

00017b7c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
   17b7c:	6803      	ldr	r3, [r0, #0]
{
   17b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b82:	4604      	mov	r4, r0
   17b84:	b088      	sub	sp, #32
   17b86:	4617      	mov	r7, r2
	if (channel) {
   17b88:	2b00      	cmp	r3, #0
   17b8a:	d04b      	beq.n	17c24 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
   17b8c:	2200      	movs	r2, #0
   17b8e:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
   17b90:	2201      	movs	r2, #1
   17b92:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
   17b94:	4d30      	ldr	r5, [pc, #192]	; (17c58 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
   17b96:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   17b98:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 17c7c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
   17b9c:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
   17b9e:	f851 3b08 	ldr.w	r3, [r1], #8
   17ba2:	112d      	asrs	r5, r5, #4
   17ba4:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
   17ba6:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   17ba8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
   17bac:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   17bae:	00f6      	lsls	r6, r6, #3
   17bb0:	f106 0008 	add.w	r0, r6, #8
   17bb4:	f858 3006 	ldr.w	r3, [r8, r6]
   17bb8:	4440      	add	r0, r8
   17bba:	68db      	ldr	r3, [r3, #12]
   17bbc:	9001      	str	r0, [sp, #4]
   17bbe:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
   17bc0:	4a26      	ldr	r2, [pc, #152]	; (17c5c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
   17bc2:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
   17bc4:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
   17bc8:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
   17bca:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
   17bce:	689b      	ldr	r3, [r3, #8]
   17bd0:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   17bd2:	9b02      	ldr	r3, [sp, #8]
   17bd4:	a804      	add	r0, sp, #16
   17bd6:	68db      	ldr	r3, [r3, #12]
   17bd8:	4798      	blx	r3
	channel->LDVAL = cycles;
   17bda:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
   17bdc:	2203      	movs	r2, #3
   17bde:	4820      	ldr	r0, [pc, #128]	; (17c60 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
   17be0:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
   17be2:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   17be4:	4a1f      	ldr	r2, [pc, #124]	; (17c64 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
   17be6:	7923      	ldrb	r3, [r4, #4]
   17be8:	4c1f      	ldr	r4, [pc, #124]	; (17c68 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
   17bea:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   17bec:	7813      	ldrb	r3, [r2, #0]
   17bee:	7851      	ldrb	r1, [r2, #1]
   17bf0:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
   17bf4:	428b      	cmp	r3, r1
   17bf6:	bf28      	it	cs
   17bf8:	460b      	movcs	r3, r1
   17bfa:	7891      	ldrb	r1, [r2, #2]
   17bfc:	78d2      	ldrb	r2, [r2, #3]
   17bfe:	428b      	cmp	r3, r1
   17c00:	bf28      	it	cs
   17c02:	460b      	movcs	r3, r1
   17c04:	4293      	cmp	r3, r2
   17c06:	bf28      	it	cs
   17c08:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   17c0a:	4c18      	ldr	r4, [pc, #96]	; (17c6c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   17c0c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   17c10:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
   17c14:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   17c16:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
   17c1a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
   17c1e:	b008      	add	sp, #32
   17c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   17c24:	4a12      	ldr	r2, [pc, #72]	; (17c70 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
   17c26:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   17c28:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   17c2c:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
   17c2e:	2201      	movs	r2, #1
   17c30:	4b10      	ldr	r3, [pc, #64]	; (17c74 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
   17c32:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   17c34:	4a10      	ldr	r2, [pc, #64]	; (17c78 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
   17c36:	4613      	mov	r3, r2
   17c38:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   17c3a:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
   17c3c:	6898      	ldr	r0, [r3, #8]
   17c3e:	2800      	cmp	r0, #0
   17c40:	d0a8      	beq.n	17b94 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   17c42:	3310      	adds	r3, #16
   17c44:	4293      	cmp	r3, r2
   17c46:	6023      	str	r3, [r4, #0]
   17c48:	d1f8      	bne.n	17c3c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
   17c4a:	2300      	movs	r3, #0
				return false;
   17c4c:	4618      	mov	r0, r3
				channel = NULL;
   17c4e:	6023      	str	r3, [r4, #0]
}
   17c50:	b008      	add	sp, #32
   17c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c56:	bf00      	nop
   17c58:	bff7bf00 	.word	0xbff7bf00
   17c5c:	200022b0 	.word	0x200022b0
   17c60:	20004c00 	.word	0x20004c00
   17c64:	20003e1c 	.word	0x20003e1c
   17c68:	00017ad9 	.word	0x00017ad9
   17c6c:	e000e400 	.word	0xe000e400
   17c70:	400fc000 	.word	0x400fc000
   17c74:	40084000 	.word	0x40084000
   17c78:	40084100 	.word	0x40084100
   17c7c:	20004ec0 	.word	0x20004ec0

00017c80 <IntervalTimer::end()>:
void IntervalTimer::end() {
   17c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
   17c82:	6803      	ldr	r3, [r0, #0]
   17c84:	b343      	cbz	r3, 17cd8 <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
   17c86:	4c15      	ldr	r4, [pc, #84]	; (17cdc <IntervalTimer::end()+0x5c>)
   17c88:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   17c8a:	4e15      	ldr	r6, [pc, #84]	; (17ce0 <IntervalTimer::end()+0x60>)
   17c8c:	441c      	add	r4, r3
   17c8e:	1124      	asrs	r4, r4, #4
   17c90:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   17c94:	00ed      	lsls	r5, r5, #3
   17c96:	5973      	ldr	r3, [r6, r5]
   17c98:	f105 0008 	add.w	r0, r5, #8
   17c9c:	68db      	ldr	r3, [r3, #12]
   17c9e:	4430      	add	r0, r6
   17ca0:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   17ca2:	4b10      	ldr	r3, [pc, #64]	; (17ce4 <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
   17ca4:	2100      	movs	r1, #0
		channel->TFLG = 1;
   17ca6:	2201      	movs	r2, #1
   17ca8:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
   17caa:	683b      	ldr	r3, [r7, #0]
   17cac:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
   17cae:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
   17cb0:	23ff      	movs	r3, #255	; 0xff
   17cb2:	4a0d      	ldr	r2, [pc, #52]	; (17ce8 <IntervalTimer::end()+0x68>)
   17cb4:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   17cb6:	7813      	ldrb	r3, [r2, #0]
   17cb8:	7850      	ldrb	r0, [r2, #1]
   17cba:	7894      	ldrb	r4, [r2, #2]
   17cbc:	4283      	cmp	r3, r0
   17cbe:	bf28      	it	cs
   17cc0:	4603      	movcs	r3, r0
   17cc2:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   17cc4:	4a09      	ldr	r2, [pc, #36]	; (17cec <IntervalTimer::end()+0x6c>)
   17cc6:	42a3      	cmp	r3, r4
   17cc8:	bf28      	it	cs
   17cca:	4623      	movcs	r3, r4
   17ccc:	4283      	cmp	r3, r0
   17cce:	bf28      	it	cs
   17cd0:	4603      	movcs	r3, r0
   17cd2:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
   17cd6:	6039      	str	r1, [r7, #0]
}
   17cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17cda:	bf00      	nop
   17cdc:	bff7bf00 	.word	0xbff7bf00
   17ce0:	20004ec0 	.word	0x20004ec0
   17ce4:	200022b0 	.word	0x200022b0
   17ce8:	20003e1c 	.word	0x20003e1c
   17cec:	e000e400 	.word	0xe000e400

00017cf0 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
   17cf0:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
   17cf2:	4b06      	ldr	r3, [pc, #24]	; (17d0c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   17cf4:	2000      	movs	r0, #0
   17cf6:	4c06      	ldr	r4, [pc, #24]	; (17d10 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
   17cf8:	4a06      	ldr	r2, [pc, #24]	; (17d14 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
   17cfa:	601c      	str	r4, [r3, #0]
   17cfc:	619c      	str	r4, [r3, #24]
   17cfe:	631c      	str	r4, [r3, #48]	; 0x30
   17d00:	649c      	str	r4, [r3, #72]	; 0x48
   17d02:	4905      	ldr	r1, [pc, #20]	; (17d18 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
   17d04:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   17d08:	f005 ba76 	b.w	1d1f8 <__aeabi_atexit>
   17d0c:	20004ec0 	.word	0x20004ec0
   17d10:	200022b0 	.word	0x200022b0
   17d14:	20003e3c 	.word	0x20003e3c
   17d18:	00017b5d 	.word	0x00017b5d

00017d1c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
   17d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
   17d20:	460c      	mov	r4, r1
   17d22:	b1d1      	cbz	r1, 17d5a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
   17d24:	b1ea      	cbz	r2, 17d62 <Print::write(unsigned char const*, unsigned int)+0x46>
   17d26:	4680      	mov	r8, r0
   17d28:	188e      	adds	r6, r1, r2
	size_t count = 0;
   17d2a:	2500      	movs	r5, #0
   17d2c:	4f0e      	ldr	r7, [pc, #56]	; (17d68 <Print::write(unsigned char const*, unsigned int)+0x4c>)
   17d2e:	e004      	b.n	17d3a <Print::write(unsigned char const*, unsigned int)+0x1e>
   17d30:	f002 f82e 	bl	19d90 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
   17d34:	42b4      	cmp	r4, r6
   17d36:	4405      	add	r5, r0
   17d38:	d00c      	beq.n	17d54 <Print::write(unsigned char const*, unsigned int)+0x38>
   17d3a:	f8d8 3000 	ldr.w	r3, [r8]
   17d3e:	f814 0b01 	ldrb.w	r0, [r4], #1
   17d42:	681b      	ldr	r3, [r3, #0]
   17d44:	42bb      	cmp	r3, r7
   17d46:	d0f3      	beq.n	17d30 <Print::write(unsigned char const*, unsigned int)+0x14>
   17d48:	4601      	mov	r1, r0
   17d4a:	4640      	mov	r0, r8
   17d4c:	4798      	blx	r3
   17d4e:	42b4      	cmp	r4, r6
   17d50:	4405      	add	r5, r0
   17d52:	d1f2      	bne.n	17d3a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
   17d54:	4628      	mov	r0, r5
   17d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   17d5a:	460d      	mov	r5, r1
}
   17d5c:	4628      	mov	r0, r5
   17d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   17d62:	4615      	mov	r5, r2
   17d64:	e7f6      	b.n	17d54 <Print::write(unsigned char const*, unsigned int)+0x38>
   17d66:	bf00      	nop
   17d68:	00016011 	.word	0x00016011

00017d6c <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   17d6c:	4b05      	ldr	r3, [pc, #20]	; (17d84 <_write+0x18>)
   17d6e:	2802      	cmp	r0, #2
   17d70:	bf88      	it	hi
   17d72:	4603      	movhi	r3, r0
{
   17d74:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   17d76:	681c      	ldr	r4, [r3, #0]
   17d78:	4618      	mov	r0, r3
   17d7a:	6863      	ldr	r3, [r4, #4]
}
   17d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   17d80:	4718      	bx	r3
   17d82:	bf00      	nop
   17d84:	20003728 	.word	0x20003728

00017d88 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
   17d88:	281c      	cmp	r0, #28
   17d8a:	d849      	bhi.n	17e20 <analogRead+0x98>
{
   17d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
   17d8e:	4f25      	ldr	r7, [pc, #148]	; (17e24 <analogRead+0x9c>)
   17d90:	4604      	mov	r4, r0
   17d92:	783b      	ldrb	r3, [r7, #0]
   17d94:	b9e3      	cbnz	r3, 17dd0 <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
   17d96:	4b24      	ldr	r3, [pc, #144]	; (17e28 <analogRead+0xa0>)
   17d98:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
   17d9a:	2bff      	cmp	r3, #255	; 0xff
   17d9c:	d029      	beq.n	17df2 <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
   17d9e:	4a23      	ldr	r2, [pc, #140]	; (17e2c <analogRead+0xa4>)
   17da0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
   17da4:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
   17da6:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
   17da8:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
   17dac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   17db0:	d030      	beq.n	17e14 <analogRead+0x8c>
	if(!(ch & 0x80)) {
   17db2:	061c      	lsls	r4, r3, #24
   17db4:	d41f      	bmi.n	17df6 <analogRead+0x6e>
		ADC1_HC0 = ch;
   17db6:	4c1e      	ldr	r4, [pc, #120]	; (17e30 <analogRead+0xa8>)
   17db8:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
   17dba:	6a23      	ldr	r3, [r4, #32]
   17dbc:	07d8      	lsls	r0, r3, #31
   17dbe:	d404      	bmi.n	17dca <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
   17dc0:	f002 f87a 	bl	19eb8 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
   17dc4:	6a23      	ldr	r3, [r4, #32]
   17dc6:	07d9      	lsls	r1, r3, #31
   17dc8:	d5fa      	bpl.n	17dc0 <analogRead+0x38>
		return ADC1_R0;
   17dca:	4b19      	ldr	r3, [pc, #100]	; (17e30 <analogRead+0xa8>)
   17dcc:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   17dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
   17dd0:	4d17      	ldr	r5, [pc, #92]	; (17e30 <analogRead+0xa8>)
   17dd2:	4e18      	ldr	r6, [pc, #96]	; (17e34 <analogRead+0xac>)
   17dd4:	e001      	b.n	17dda <analogRead+0x52>
		yield();
   17dd6:	f002 f86f 	bl	19eb8 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
   17dda:	6cab      	ldr	r3, [r5, #72]	; 0x48
   17ddc:	061b      	lsls	r3, r3, #24
   17dde:	d4fa      	bmi.n	17dd6 <analogRead+0x4e>
   17de0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
   17de2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   17de6:	d1f6      	bne.n	17dd6 <analogRead+0x4e>
	calibrating = 0;
   17de8:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
   17dea:	4b0f      	ldr	r3, [pc, #60]	; (17e28 <analogRead+0xa0>)
   17dec:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
   17dee:	2bff      	cmp	r3, #255	; 0xff
   17df0:	d1d5      	bne.n	17d9e <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
   17df2:	2000      	movs	r0, #0
}
   17df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
   17df6:	4c0f      	ldr	r4, [pc, #60]	; (17e34 <analogRead+0xac>)
   17df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17dfc:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
   17dfe:	6a23      	ldr	r3, [r4, #32]
   17e00:	07da      	lsls	r2, r3, #31
   17e02:	d404      	bmi.n	17e0e <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
   17e04:	f002 f858 	bl	19eb8 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
   17e08:	6a23      	ldr	r3, [r4, #32]
   17e0a:	07db      	lsls	r3, r3, #31
   17e0c:	d5fa      	bpl.n	17e04 <analogRead+0x7c>
		return ADC2_R0;
   17e0e:	4b09      	ldr	r3, [pc, #36]	; (17e34 <analogRead+0xac>)
   17e10:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   17e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
   17e14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
   17e18:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
   17e1a:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
   17e1c:	d4eb      	bmi.n	17df6 <analogRead+0x6e>
   17e1e:	e7ca      	b.n	17db6 <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
   17e20:	2000      	movs	r0, #0
}
   17e22:	4770      	bx	lr
   17e24:	20006aab 	.word	0x20006aab
   17e28:	20002fb8 	.word	0x20002fb8
   17e2c:	20002b88 	.word	0x20002b88
   17e30:	400c4000 	.word	0x400c4000
   17e34:	400c8000 	.word	0x400c8000

00017e38 <analogReadRes>:
   if (bits == 8) {
   17e38:	2808      	cmp	r0, #8
{
   17e3a:	b430      	push	{r4, r5}
   if (bits == 8) {
   17e3c:	d022      	beq.n	17e84 <analogReadRes+0x4c>
    mode = ADC_CFG_MODE(2) | ADC_CFG_ADSTS(3) | ADC_CFG_ADLSMP;
   17e3e:	280a      	cmp	r0, #10
   17e40:	bf0c      	ite	eq
   17e42:	f44f 7105 	moveq.w	r1, #532	; 0x214
   17e46:	f44f 7146 	movne.w	r1, #792	; 0x318
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
   17e4a:	4c10      	ldr	r4, [pc, #64]	; (17e8c <analogReadRes+0x54>)
   17e4c:	4d10      	ldr	r5, [pc, #64]	; (17e90 <analogReadRes+0x58>)
   17e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
   17e50:	6c62      	ldr	r2, [r4, #68]	; 0x44
  tmp32  = (ADC1_CFG & (0xFFFFFC00));
   17e52:	402b      	ands	r3, r5
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
   17e54:	480f      	ldr	r0, [pc, #60]	; (17e94 <analogReadRes+0x5c>)
  tmp32 |= (ADC1_CFG & (0x03));  // ADICLK
   17e56:	f002 0203 	and.w	r2, r2, #3
   17e5a:	431a      	orrs	r2, r3
  tmp32 |= (ADC1_CFG & (0xE0));  // ADIV & ADLPC
   17e5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17e5e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   17e62:	4313      	orrs	r3, r2
  tmp32 |= mode; 
   17e64:	430b      	orrs	r3, r1
  ADC1_CFG = tmp32;
   17e66:	6463      	str	r3, [r4, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
   17e68:	6c43      	ldr	r3, [r0, #68]	; 0x44
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
   17e6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  tmp32  = (ADC2_CFG & (0xFFFFFC00));
   17e6c:	402b      	ands	r3, r5
  tmp32 |= (ADC2_CFG & (0x03));  // ADICLK
   17e6e:	f002 0203 	and.w	r2, r2, #3
   17e72:	431a      	orrs	r2, r3
  tmp32 |= (ADC2_CFG & (0xE0));  // ADIV & ADLPC
   17e74:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17e76:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   17e7a:	4313      	orrs	r3, r2
  tmp32 |= mode; 
   17e7c:	4319      	orrs	r1, r3
}
   17e7e:	bc30      	pop	{r4, r5}
  ADC2_CFG = tmp32;
   17e80:	6441      	str	r1, [r0, #68]	; 0x44
}
   17e82:	4770      	bx	lr
    mode = ADC_CFG_MODE(0) | ADC_CFG_ADSTS(3);
   17e84:	f44f 7140 	mov.w	r1, #768	; 0x300
   17e88:	e7df      	b.n	17e4a <analogReadRes+0x12>
   17e8a:	bf00      	nop
   17e8c:	400c4000 	.word	0x400c4000
   17e90:	fffffc00 	.word	0xfffffc00
   17e94:	400c8000 	.word	0x400c8000

00017e98 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   17e98:	49a2      	ldr	r1, [pc, #648]	; (18124 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   17e9a:	4ba3      	ldr	r3, [pc, #652]	; (18128 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
   17e9c:	4288      	cmp	r0, r1
{
   17e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
   17ea2:	4ca2      	ldr	r4, [pc, #648]	; (1812c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   17ea4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   17ea6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   17ea8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
   17eac:	d91b      	bls.n	17ee6 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   17eae:	4ba0      	ldr	r3, [pc, #640]	; (18130 <set_arm_clock+0x298>)
   17eb0:	4298      	cmp	r0, r3
   17eb2:	f240 8102 	bls.w	180ba <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   17eb6:	1ac3      	subs	r3, r0, r3
   17eb8:	499e      	ldr	r1, [pc, #632]	; (18134 <set_arm_clock+0x29c>)
   17eba:	0a1b      	lsrs	r3, r3, #8
   17ebc:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   17ec0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   17ec4:	09db      	lsrs	r3, r3, #7
   17ec6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17eca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17ece:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   17ed2:	428b      	cmp	r3, r1
   17ed4:	bf28      	it	cs
   17ed6:	460b      	movcs	r3, r1
   17ed8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
   17edc:	4b96      	ldr	r3, [pc, #600]	; (18138 <set_arm_clock+0x2a0>)
   17ede:	fba3 3707 	umull	r3, r7, r3, r7
   17ee2:	08ff      	lsrs	r7, r7, #3
   17ee4:	e004      	b.n	17ef0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
   17ee6:	4f95      	ldr	r7, [pc, #596]	; (1813c <set_arm_clock+0x2a4>)
   17ee8:	42b8      	cmp	r0, r7
   17eea:	bf8c      	ite	hi
   17eec:	270e      	movhi	r7, #14
   17eee:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   17ef0:	498d      	ldr	r1, [pc, #564]	; (18128 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   17ef2:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   17ef6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   17efa:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   17efc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   17f00:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   17f04:	d20c      	bcs.n	17f20 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   17f06:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   17f0a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   17f0e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
   17f12:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   17f16:	680b      	ldr	r3, [r1, #0]
   17f18:	2b00      	cmp	r3, #0
   17f1a:	dafc      	bge.n	17f16 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   17f1c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   17f20:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
   17f24:	d124      	bne.n	17f70 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   17f26:	4986      	ldr	r1, [pc, #536]	; (18140 <set_arm_clock+0x2a8>)
   17f28:	690c      	ldr	r4, [r1, #16]
   17f2a:	4986      	ldr	r1, [pc, #536]	; (18144 <set_arm_clock+0x2ac>)
   17f2c:	43a1      	bics	r1, r4
   17f2e:	f000 80ea 	beq.w	18106 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   17f32:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
   17f36:	4634      	mov	r4, r6
   17f38:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   17f3c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
   17f40:	d004      	beq.n	17f4c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   17f42:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   17f46:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
   17f48:	4b77      	ldr	r3, [pc, #476]	; (18128 <set_arm_clock+0x290>)
   17f4a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   17f4c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   17f50:	d007      	beq.n	17f62 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   17f52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
   17f56:	4974      	ldr	r1, [pc, #464]	; (18128 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   17f58:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
   17f5a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   17f5c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   17f5e:	071a      	lsls	r2, r3, #28
   17f60:	d4fc      	bmi.n	17f5c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   17f62:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   17f66:	4a70      	ldr	r2, [pc, #448]	; (18128 <set_arm_clock+0x290>)
   17f68:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   17f6a:	6c93      	ldr	r3, [r2, #72]	; 0x48
   17f6c:	069b      	lsls	r3, r3, #26
   17f6e:	d4fc      	bmi.n	17f6a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
   17f70:	4c75      	ldr	r4, [pc, #468]	; (18148 <set_arm_clock+0x2b0>)
   17f72:	42a0      	cmp	r0, r4
   17f74:	f200 80ce 	bhi.w	18114 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
   17f78:	f04f 0c01 	mov.w	ip, #1
   17f7c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
   17f7e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
   17f80:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
   17f84:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
   17f88:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   17f8c:	42a2      	cmp	r2, r4
   17f8e:	d818      	bhi.n	17fc2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
   17f90:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
   17f94:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
   17f98:	f040 808d 	bne.w	180b6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
   17f9c:	f1bc 0f04 	cmp.w	ip, #4
   17fa0:	f200 8091 	bhi.w	180c6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
   17fa4:	180a      	adds	r2, r1, r0
   17fa6:	42a2      	cmp	r2, r4
   17fa8:	f200 80a4 	bhi.w	180f4 <set_arm_clock+0x25c>
   17fac:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
   17fb0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
   17fb2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   17fb6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
   17fba:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   17fbe:	42a2      	cmp	r2, r4
   17fc0:	d9e6      	bls.n	17f90 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   17fc2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   17fc6:	028c      	lsls	r4, r1, #10
   17fc8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   17fcc:	485f      	ldr	r0, [pc, #380]	; (1814c <set_arm_clock+0x2b4>)
   17fce:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
   17fd0:	4a5f      	ldr	r2, [pc, #380]	; (18150 <set_arm_clock+0x2b8>)
   17fd2:	4290      	cmp	r0, r2
   17fd4:	d97f      	bls.n	180d6 <set_arm_clock+0x23e>
   17fd6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1817c <set_arm_clock+0x2e4>
   17fda:	226c      	movs	r2, #108	; 0x6c
   17fdc:	485d      	ldr	r0, [pc, #372]	; (18154 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   17fde:	4d58      	ldr	r5, [pc, #352]	; (18140 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
   17fe0:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   17fe4:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
   17fe8:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   17fec:	f8df c190 	ldr.w	ip, [pc, #400]	; 18180 <set_arm_clock+0x2e8>
   17ff0:	ea0e 0c0c 	and.w	ip, lr, ip
   17ff4:	45d4      	cmp	ip, sl
   17ff6:	d009      	beq.n	1800c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   17ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   17ffc:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   18000:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   18004:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   18006:	682a      	ldr	r2, [r5, #0]
   18008:	2a00      	cmp	r2, #0
   1800a:	dafc      	bge.n	18006 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   1800c:	4a46      	ldr	r2, [pc, #280]	; (18128 <set_arm_clock+0x290>)
   1800e:	6915      	ldr	r5, [r2, #16]
   18010:	f005 0507 	and.w	r5, r5, #7
   18014:	429d      	cmp	r5, r3
   18016:	d003      	beq.n	18020 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   18018:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   1801a:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1801c:	03dd      	lsls	r5, r3, #15
   1801e:	d4fc      	bmi.n	1801a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   18020:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   18024:	d009      	beq.n	1803a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   18026:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   1802a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
   1802e:	4a3e      	ldr	r2, [pc, #248]	; (18128 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   18030:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
   18032:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   18034:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18036:	0799      	lsls	r1, r3, #30
   18038:	d4fc      	bmi.n	18034 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1803a:	4947      	ldr	r1, [pc, #284]	; (18158 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
   1803c:	4a47      	ldr	r2, [pc, #284]	; (1815c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1803e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   18040:	4291      	cmp	r1, r2
   18042:	d83c      	bhi.n	180be <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   18044:	4b46      	ldr	r3, [pc, #280]	; (18160 <set_arm_clock+0x2c8>)
   18046:	09c9      	lsrs	r1, r1, #7
   18048:	fba3 3101 	umull	r3, r1, r3, r1
   1804c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   1804e:	1e4b      	subs	r3, r1, #1
   18050:	021b      	lsls	r3, r3, #8
   18052:	ea86 0203 	eor.w	r2, r6, r3
   18056:	f412 7f40 	tst.w	r2, #768	; 0x300
   1805a:	d006      	beq.n	1806a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   1805c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   18060:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
   18064:	4a30      	ldr	r2, [pc, #192]	; (18128 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   18066:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
   18068:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   1806a:	4a2f      	ldr	r2, [pc, #188]	; (18128 <set_arm_clock+0x290>)
   1806c:	6953      	ldr	r3, [r2, #20]
   1806e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   18072:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   18074:	6c93      	ldr	r3, [r2, #72]	; 0x48
   18076:	069b      	lsls	r3, r3, #26
   18078:	d4fc      	bmi.n	18074 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1807a:	4b3a      	ldr	r3, [pc, #232]	; (18164 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   1807c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1807e:	fba3 2300 	umull	r2, r3, r3, r0
   18082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18086:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
   1808a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1808e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
   18092:	4a35      	ldr	r2, [pc, #212]	; (18168 <set_arm_clock+0x2d0>)
   18094:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   18096:	4a35      	ldr	r2, [pc, #212]	; (1816c <set_arm_clock+0x2d4>)
   18098:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1809a:	4a35      	ldr	r2, [pc, #212]	; (18170 <set_arm_clock+0x2d8>)
   1809c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   1809e:	d208      	bcs.n	180b2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   180a0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   180a4:	4a21      	ldr	r2, [pc, #132]	; (1812c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   180a6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
   180aa:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   180ac:	6813      	ldr	r3, [r2, #0]
   180ae:	2b00      	cmp	r3, #0
   180b0:	dafc      	bge.n	180ac <set_arm_clock+0x214>
	}

	return frequency;
}
   180b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   180b6:	4673      	mov	r3, lr
   180b8:	e762      	b.n	17f80 <set_arm_clock+0xe8>
   180ba:	2712      	movs	r7, #18
   180bc:	e718      	b.n	17ef0 <set_arm_clock+0x58>
   180be:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
   180c2:	2104      	movs	r1, #4
   180c4:	e7c5      	b.n	18052 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   180c6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   180ca:	4820      	ldr	r0, [pc, #128]	; (1814c <set_arm_clock+0x2b4>)
   180cc:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   180ce:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   180d0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   180d2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   180d6:	4a27      	ldr	r2, [pc, #156]	; (18174 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   180d8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 18184 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   180dc:	fba2 2000 	umull	r2, r0, r2, r0
   180e0:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
   180e2:	4825      	ldr	r0, [pc, #148]	; (18178 <set_arm_clock+0x2e0>)
   180e4:	2a36      	cmp	r2, #54	; 0x36
   180e6:	bf38      	it	cc
   180e8:	2236      	movcc	r2, #54	; 0x36
   180ea:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   180ee:	ea42 0a0a 	orr.w	sl, r2, sl
   180f2:	e774      	b.n	17fde <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   180f4:	ea4f 248c 	mov.w	r4, ip, lsl #10
   180f8:	2300      	movs	r3, #0
   180fa:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
   180fe:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
   18102:	46ac      	mov	ip, r5
   18104:	e762      	b.n	17fcc <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   18106:	461d      	mov	r5, r3
   18108:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
   1810c:	4611      	mov	r1, r2
   1810e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   18112:	e713      	b.n	17f3c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
   18114:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
   18116:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   1811a:	4602      	mov	r2, r0
   1811c:	4631      	mov	r1, r6
   1811e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
   18120:	46e6      	mov	lr, ip
   18122:	e753      	b.n	17fcc <set_arm_clock+0x134>
   18124:	1f78a400 	.word	0x1f78a400
   18128:	400fc000 	.word	0x400fc000
   1812c:	40080000 	.word	0x40080000
   18130:	23c34600 	.word	0x23c34600
   18134:	004cb223 	.word	0x004cb223
   18138:	51eb851f 	.word	0x51eb851f
   1813c:	016e3600 	.word	0x016e3600
   18140:	400d8000 	.word	0x400d8000
   18144:	80003040 	.word	0x80003040
   18148:	269fb1ff 	.word	0x269fb1ff
   1814c:	005b8d80 	.word	0x005b8d80
   18150:	4df67eff 	.word	0x4df67eff
   18154:	4d3f6400 	.word	0x4d3f6400
   18158:	08f0d17f 	.word	0x08f0d17f
   1815c:	2cb4177f 	.word	0x2cb4177f
   18160:	00e5109f 	.word	0x00e5109f
   18164:	431bde83 	.word	0x431bde83
   18168:	20003694 	.word	0x20003694
   1816c:	20003690 	.word	0x20003690
   18170:	20006274 	.word	0x20006274
   18174:	165e9f81 	.word	0x165e9f81
   18178:	00b71b00 	.word	0x00b71b00
   1817c:	8000206c 	.word	0x8000206c
   18180:	8001307f 	.word	0x8001307f
   18184:	80002000 	.word	0x80002000

00018188 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   18188:	b900      	cbnz	r0, 1818c <delay+0x4>
   1818a:	4770      	bx	lr
{
   1818c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   18190:	2101      	movs	r1, #1
   18192:	4681      	mov	r9, r0
   18194:	4c21      	ldr	r4, [pc, #132]	; (1821c <delay+0x94>)
   18196:	4d22      	ldr	r5, [pc, #136]	; (18220 <delay+0x98>)
   18198:	4e22      	ldr	r6, [pc, #136]	; (18224 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   1819a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   1819e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   181a0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   181a2:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   181a6:	2b00      	cmp	r3, #0
   181a8:	d1f7      	bne.n	1819a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   181aa:	491f      	ldr	r1, [pc, #124]	; (18228 <delay+0xa0>)
   181ac:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   181ae:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   181b2:	f8df a078 	ldr.w	sl, [pc, #120]	; 1822c <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
   181b6:	1a1b      	subs	r3, r3, r0
   181b8:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
   181ba:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   181be:	f8da 2000 	ldr.w	r2, [sl]
   181c2:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
   181c6:	455a      	cmp	r2, fp
   181c8:	bf94      	ite	ls
   181ca:	4490      	addls	r8, r2
   181cc:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   181ce:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
   181d2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   181d4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   181d6:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   181da:	2b00      	cmp	r3, #0
   181dc:	d1f7      	bne.n	181ce <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   181de:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   181e0:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
   181e4:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
   181e6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   181ea:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
   181ee:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
   181f2:	bf94      	ite	ls
   181f4:	4462      	addls	r2, ip
   181f6:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
   181fa:	eba2 0208 	sub.w	r2, r2, r8
   181fe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   18202:	d306      	bcc.n	18212 <delay+0x8a>
			if (--msec == 0) return;
   18204:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
   18208:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
   1820c:	d1df      	bne.n	181ce <delay+0x46>
}
   1820e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
   18212:	f001 fe51 	bl	19eb8 <yield>
		while ((micros() - start) >= 1000) {
   18216:	4904      	ldr	r1, [pc, #16]	; (18228 <delay+0xa0>)
   18218:	e7d9      	b.n	181ce <delay+0x46>
   1821a:	bf00      	nop
   1821c:	20006348 	.word	0x20006348
   18220:	20006344 	.word	0x20006344
   18224:	20006340 	.word	0x20006340
   18228:	e0001000 	.word	0xe0001000
   1822c:	20006274 	.word	0x20006274

00018230 <micros>:
{
   18230:	b430      	push	{r4, r5}
   18232:	4b0f      	ldr	r3, [pc, #60]	; (18270 <micros+0x40>)
   18234:	f04f 0c01 	mov.w	ip, #1
   18238:	4d0e      	ldr	r5, [pc, #56]	; (18274 <micros+0x44>)
   1823a:	4c0f      	ldr	r4, [pc, #60]	; (18278 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   1823c:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   18240:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   18242:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   18244:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   18248:	2a00      	cmp	r2, #0
   1824a:	d1f7      	bne.n	1823c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   1824c:	4b0b      	ldr	r3, [pc, #44]	; (1827c <micros+0x4c>)
   1824e:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   18250:	4a0b      	ldr	r2, [pc, #44]	; (18280 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
   18252:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
   18254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   18258:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
   1825a:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1825e:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
   18262:	bc30      	pop	{r4, r5}
   18264:	428a      	cmp	r2, r1
   18266:	bf94      	ite	ls
   18268:	1880      	addls	r0, r0, r2
   1826a:	1840      	addhi	r0, r0, r1
   1826c:	4770      	bx	lr
   1826e:	bf00      	nop
   18270:	20006348 	.word	0x20006348
   18274:	20006344 	.word	0x20006344
   18278:	20006340 	.word	0x20006340
   1827c:	e0001000 	.word	0xe0001000
   18280:	20006274 	.word	0x20006274

00018284 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   18284:	282d      	cmp	r0, #45	; 0x2d
   18286:	d816      	bhi.n	182b6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
   18288:	0102      	lsls	r2, r0, #4
   1828a:	4b10      	ldr	r3, [pc, #64]	; (182cc <digitalWrite+0x48>)
   1828c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   18290:	589b      	ldr	r3, [r3, r2]
{
   18292:	b410      	push	{r4}
	mask = p->mask;
   18294:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
   18296:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
   18298:	4214      	tst	r4, r2
   1829a:	d005      	beq.n	182a8 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
   1829c:	b961      	cbnz	r1, 182b8 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   1829e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
   182a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   182a6:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   182a8:	6883      	ldr	r3, [r0, #8]
		if (val) {
   182aa:	b151      	cbz	r1, 182c2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   182ac:	4a08      	ldr	r2, [pc, #32]	; (182d0 <digitalWrite+0x4c>)
}
   182ae:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   182b2:	601a      	str	r2, [r3, #0]
}
   182b4:	4770      	bx	lr
   182b6:	4770      	bx	lr
   182b8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
   182bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   182c0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   182c2:	4a04      	ldr	r2, [pc, #16]	; (182d4 <digitalWrite+0x50>)
}
   182c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   182c8:	601a      	str	r2, [r3, #0]
}
   182ca:	4770      	bx	lr
   182cc:	20002b88 	.word	0x20002b88
   182d0:	0001f038 	.word	0x0001f038
   182d4:	00013038 	.word	0x00013038

000182d8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
   182d8:	282d      	cmp	r0, #45	; 0x2d
   182da:	d80b      	bhi.n	182f4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   182dc:	4b06      	ldr	r3, [pc, #24]	; (182f8 <digitalRead+0x20>)
   182de:	0102      	lsls	r2, r0, #4
   182e0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   182e4:	589a      	ldr	r2, [r3, r2]
   182e6:	68c3      	ldr	r3, [r0, #12]
   182e8:	6892      	ldr	r2, [r2, #8]
   182ea:	421a      	tst	r2, r3
   182ec:	bf14      	ite	ne
   182ee:	2001      	movne	r0, #1
   182f0:	2000      	moveq	r0, #0
   182f2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   182f4:	2000      	movs	r0, #0
}
   182f6:	4770      	bx	lr
   182f8:	20002b88 	.word	0x20002b88

000182fc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
   182fc:	282d      	cmp	r0, #45	; 0x2d
   182fe:	d829      	bhi.n	18354 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
   18300:	4b16      	ldr	r3, [pc, #88]	; (1835c <pinMode+0x60>)
   18302:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   18304:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
   18306:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   1830a:	589a      	ldr	r2, [r3, r2]
{
   1830c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   1830e:	6853      	ldr	r3, [r2, #4]
   18310:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   18312:	d00e      	beq.n	18332 <pinMode+0x36>
   18314:	2904      	cmp	r1, #4
   18316:	d00c      	beq.n	18332 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   18318:	ea23 0304 	bic.w	r3, r3, r4
   1831c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1831e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
   18320:	b1a9      	cbz	r1, 1834e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
   18322:	2902      	cmp	r1, #2
   18324:	d017      	beq.n	18356 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
   18326:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   18328:	bf0c      	ite	eq
   1832a:	4a0d      	ldreq	r2, [pc, #52]	; (18360 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   1832c:	4a0d      	ldrne	r2, [pc, #52]	; (18364 <pinMode+0x68>)
   1832e:	601a      	str	r2, [r3, #0]
   18330:	e007      	b.n	18342 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   18332:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
   18334:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
   18336:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   18338:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
   1833a:	d008      	beq.n	1834e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   1833c:	f640 0238 	movw	r2, #2104	; 0x838
   18340:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
   18342:	6843      	ldr	r3, [r0, #4]
   18344:	2215      	movs	r2, #21
}
   18346:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
   1834a:	601a      	str	r2, [r3, #0]
}
   1834c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1834e:	2238      	movs	r2, #56	; 0x38
   18350:	601a      	str	r2, [r3, #0]
   18352:	e7f6      	b.n	18342 <pinMode+0x46>
   18354:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   18356:	4a04      	ldr	r2, [pc, #16]	; (18368 <pinMode+0x6c>)
   18358:	601a      	str	r2, [r3, #0]
   1835a:	e7f2      	b.n	18342 <pinMode+0x46>
   1835c:	20002b88 	.word	0x20002b88
   18360:	00013038 	.word	0x00013038
   18364:	00010038 	.word	0x00010038
   18368:	0001f038 	.word	0x0001f038

0001836c <eeprom_initialize>:
{
   1836c:	b570      	push	{r4, r5, r6, lr}
   1836e:	4c0e      	ldr	r4, [pc, #56]	; (183a8 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
   18370:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
   18374:	4e0d      	ldr	r6, [pc, #52]	; (183ac <eeprom_initialize+0x40>)
   18376:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1837a:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
   1837e:	2100      	movs	r1, #0
   18380:	e002      	b.n	18388 <eeprom_initialize+0x1c>
		} while (p < end);
   18382:	42b3      	cmp	r3, r6
			index++;
   18384:	b281      	uxth	r1, r0
		} while (p < end);
   18386:	d204      	bcs.n	18392 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
   18388:	881a      	ldrh	r2, [r3, #0]
			index++;
   1838a:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
   1838c:	3302      	adds	r3, #2
   1838e:	4572      	cmp	r2, lr
   18390:	d1f7      	bne.n	18382 <eeprom_initialize+0x16>
		sector_index[sector] = index;
   18392:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   18396:	42ac      	cmp	r4, r5
   18398:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   1839c:	d1ed      	bne.n	1837a <eeprom_initialize+0xe>
	initialized = 1;
   1839e:	4b04      	ldr	r3, [pc, #16]	; (183b0 <eeprom_initialize+0x44>)
   183a0:	2201      	movs	r2, #1
   183a2:	701a      	strb	r2, [r3, #0]
}
   183a4:	bd70      	pop	{r4, r5, r6, pc}
   183a6:	bf00      	nop
   183a8:	20006276 	.word	0x20006276
   183ac:	60fc1000 	.word	0x60fc1000
   183b0:	20006aac 	.word	0x20006aac

000183b4 <dummy_isr>:
static void dummy_isr() {};
   183b4:	4770      	bx	lr
   183b6:	bf00      	nop

000183b8 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   183b8:	282d      	cmp	r0, #45	; 0x2d
   183ba:	d858      	bhi.n	1846e <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
   183bc:	0100      	lsls	r0, r0, #4
{
   183be:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
   183c0:	4c34      	ldr	r4, [pc, #208]	; (18494 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
   183c2:	4d35      	ldr	r5, [pc, #212]	; (18498 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
   183c4:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
   183c6:	42ab      	cmp	r3, r5
   183c8:	d056      	beq.n	18478 <attachInterrupt+0xc0>
   183ca:	d849      	bhi.n	18460 <attachInterrupt+0xa8>
   183cc:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
   183d0:	d04b      	beq.n	1846a <attachInterrupt+0xb2>
   183d2:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   183d6:	42ab      	cmp	r3, r5
   183d8:	d140      	bne.n	1845c <attachInterrupt+0xa4>
   183da:	4d30      	ldr	r5, [pc, #192]	; (1849c <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
   183dc:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   183de:	4e30      	ldr	r6, [pc, #192]	; (184a0 <attachInterrupt+0xe8>)
   183e0:	4c30      	ldr	r4, [pc, #192]	; (184a4 <attachInterrupt+0xec>)
   183e2:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
   183e6:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
   183ea:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
   183ec:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   183f0:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   183f4:	2a04      	cmp	r2, #4
   183f6:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
   183fa:	d82f      	bhi.n	1845c <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   183fc:	695e      	ldr	r6, [r3, #20]
   183fe:	ea26 0600 	bic.w	r6, r6, r0
   18402:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
   18404:	f04f 0605 	mov.w	r6, #5
   18408:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
   1840c:	6826      	ldr	r6, [r4, #0]
   1840e:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
   18412:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
   18414:	685c      	ldr	r4, [r3, #4]
   18416:	ea24 0400 	bic.w	r4, r4, r0
   1841a:	605c      	str	r4, [r3, #4]
   1841c:	4c22      	ldr	r4, [pc, #136]	; (184a8 <attachInterrupt+0xf0>)
   1841e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
   18422:	fa90 f2a0 	rbit	r2, r0
   18426:	fab2 f282 	clz	r2, r2
	table[index] = function;
   1842a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   1842e:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
   18432:	d01d      	beq.n	18470 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
   18434:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
   18436:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
   18438:	ea01 0105 	and.w	r1, r1, r5
   1843c:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
   1843e:	dc1d      	bgt.n	1847c <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
   18440:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
   18442:	2503      	movs	r5, #3
   18444:	68d9      	ldr	r1, [r3, #12]
   18446:	4094      	lsls	r4, r2
   18448:	fa05 f202 	lsl.w	r2, r5, r2
   1844c:	ea21 0202 	bic.w	r2, r1, r2
   18450:	4322      	orrs	r2, r4
   18452:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
   18454:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
   18456:	695a      	ldr	r2, [r3, #20]
   18458:	4302      	orrs	r2, r0
   1845a:	615a      	str	r2, [r3, #20]
}
   1845c:	bcf0      	pop	{r4, r5, r6, r7}
   1845e:	4770      	bx	lr
	switch((uint32_t)gpio) {
   18460:	4d12      	ldr	r5, [pc, #72]	; (184ac <attachInterrupt+0xf4>)
   18462:	42ab      	cmp	r3, r5
   18464:	d1fa      	bne.n	1845c <attachInterrupt+0xa4>
			table = isr_table_gpio4;
   18466:	4d12      	ldr	r5, [pc, #72]	; (184b0 <attachInterrupt+0xf8>)
   18468:	e7b8      	b.n	183dc <attachInterrupt+0x24>
			table = isr_table_gpio1;
   1846a:	4d12      	ldr	r5, [pc, #72]	; (184b4 <attachInterrupt+0xfc>)
   1846c:	e7b6      	b.n	183dc <attachInterrupt+0x24>
   1846e:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
   18470:	69da      	ldr	r2, [r3, #28]
   18472:	4302      	orrs	r2, r0
   18474:	61da      	str	r2, [r3, #28]
   18476:	e7ed      	b.n	18454 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
   18478:	4d0f      	ldr	r5, [pc, #60]	; (184b8 <attachInterrupt+0x100>)
   1847a:	e7af      	b.n	183dc <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
   1847c:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   1847e:	2503      	movs	r5, #3
   18480:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
   18482:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   18484:	4094      	lsls	r4, r2
   18486:	fa05 f202 	lsl.w	r2, r5, r2
   1848a:	ea21 0202 	bic.w	r2, r1, r2
   1848e:	4322      	orrs	r2, r4
   18490:	611a      	str	r2, [r3, #16]
   18492:	e7df      	b.n	18454 <attachInterrupt+0x9c>
   18494:	20002b88 	.word	0x20002b88
   18498:	42008000 	.word	0x42008000
   1849c:	20004494 	.word	0x20004494
   184a0:	00000021 	.word	0x00000021
   184a4:	20004c00 	.word	0x20004c00
   184a8:	20001e50 	.word	0x20001e50
   184ac:	4200c000 	.word	0x4200c000
   184b0:	20004594 	.word	0x20004594
   184b4:	20004414 	.word	0x20004414
   184b8:	20004514 	.word	0x20004514

000184bc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   184bc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   184be:	f7e7 fe45 	bl	14c <setup>
	while (1) {
		loop();
   184c2:	f7e7 fea5 	bl	210 <loop>
		yield();
   184c6:	f001 fcf7 	bl	19eb8 <yield>
	while (1) {
   184ca:	e7fa      	b.n	184c2 <main+0x6>

000184cc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   184cc:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   184ce:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   184d2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   184d6:	d16d      	bne.n	185b4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   184d8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   184da:	d341      	bcc.n	18560 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   184dc:	f851 3b04 	ldr.w	r3, [r1], #4
   184e0:	f840 3b04 	str.w	r3, [r0], #4
   184e4:	f851 3b04 	ldr.w	r3, [r1], #4
   184e8:	f840 3b04 	str.w	r3, [r0], #4
   184ec:	f851 3b04 	ldr.w	r3, [r1], #4
   184f0:	f840 3b04 	str.w	r3, [r0], #4
   184f4:	f851 3b04 	ldr.w	r3, [r1], #4
   184f8:	f840 3b04 	str.w	r3, [r0], #4
   184fc:	f851 3b04 	ldr.w	r3, [r1], #4
   18500:	f840 3b04 	str.w	r3, [r0], #4
   18504:	f851 3b04 	ldr.w	r3, [r1], #4
   18508:	f840 3b04 	str.w	r3, [r0], #4
   1850c:	f851 3b04 	ldr.w	r3, [r1], #4
   18510:	f840 3b04 	str.w	r3, [r0], #4
   18514:	f851 3b04 	ldr.w	r3, [r1], #4
   18518:	f840 3b04 	str.w	r3, [r0], #4
   1851c:	f851 3b04 	ldr.w	r3, [r1], #4
   18520:	f840 3b04 	str.w	r3, [r0], #4
   18524:	f851 3b04 	ldr.w	r3, [r1], #4
   18528:	f840 3b04 	str.w	r3, [r0], #4
   1852c:	f851 3b04 	ldr.w	r3, [r1], #4
   18530:	f840 3b04 	str.w	r3, [r0], #4
   18534:	f851 3b04 	ldr.w	r3, [r1], #4
   18538:	f840 3b04 	str.w	r3, [r0], #4
   1853c:	f851 3b04 	ldr.w	r3, [r1], #4
   18540:	f840 3b04 	str.w	r3, [r0], #4
   18544:	f851 3b04 	ldr.w	r3, [r1], #4
   18548:	f840 3b04 	str.w	r3, [r0], #4
   1854c:	f851 3b04 	ldr.w	r3, [r1], #4
   18550:	f840 3b04 	str.w	r3, [r0], #4
   18554:	f851 3b04 	ldr.w	r3, [r1], #4
   18558:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   1855c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   1855e:	d2bd      	bcs.n	184dc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   18560:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   18562:	d311      	bcc.n	18588 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   18564:	f851 3b04 	ldr.w	r3, [r1], #4
   18568:	f840 3b04 	str.w	r3, [r0], #4
   1856c:	f851 3b04 	ldr.w	r3, [r1], #4
   18570:	f840 3b04 	str.w	r3, [r0], #4
   18574:	f851 3b04 	ldr.w	r3, [r1], #4
   18578:	f840 3b04 	str.w	r3, [r0], #4
   1857c:	f851 3b04 	ldr.w	r3, [r1], #4
   18580:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   18584:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   18586:	d2ed      	bcs.n	18564 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   18588:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   1858a:	d305      	bcc.n	18598 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   1858c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   18590:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   18594:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   18596:	d2f9      	bcs.n	1858c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   18598:	3204      	adds	r2, #4
	beq	.Ldone
   1859a:	d008      	beq.n	185ae <memcpy+0xe2>

	lsls	r2, r2, #31
   1859c:	07d2      	lsls	r2, r2, #31
	itt ne
   1859e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   185a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   185a4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   185a8:	d301      	bcc.n	185ae <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   185aa:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   185ac:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   185ae:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   185b0:	4770      	bx	lr
   185b2:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   185b4:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   185b6:	d313      	bcc.n	185e0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   185b8:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   185ba:	d08d      	beq.n	184d8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   185bc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   185c0:	d08a      	beq.n	184d8 <memcpy+0xc>

	rsb	r3, #4
   185c2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   185c6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   185c8:	07db      	lsls	r3, r3, #31
	itt ne
   185ca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   185cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   185d0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   185d4:	d380      	bcc.n	184d8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   185d6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   185da:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   185de:	e77b      	b.n	184d8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   185e0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   185e2:	d3d9      	bcc.n	18598 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   185e4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   185e6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   185ea:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   185ee:	d2f9      	bcs.n	185e4 <memcpy+0x118>

	ldrb	r3, [r1]
   185f0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   185f2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   185f4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   185f6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   185f8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   185fa:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   185fc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   185fe:	4770      	bx	lr

00018600 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
   18600:	f004 bfc4 	b.w	1d58c <malloc>

00018604 <operator new[](unsigned int)>:
   18604:	f004 bfc2 	b.w	1d58c <malloc>

00018608 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
   18608:	f004 bfc8 	b.w	1d59c <free>

0001860c <ultoa>:
	int i=0, j;
   1860c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
   18610:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
   18612:	4666      	mov	r6, ip
	int i=0, j;
   18614:	2400      	movs	r4, #0
   18616:	e000      	b.n	1861a <ultoa+0xe>
		i++;
   18618:	3401      	adds	r4, #1
		digit = val % radix;
   1861a:	fbb0 f5f2 	udiv	r5, r0, r2
   1861e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   18622:	2b09      	cmp	r3, #9
   18624:	f103 0e37 	add.w	lr, r3, #55	; 0x37
   18628:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1862c:	fa5f fe8e 	uxtb.w	lr, lr
   18630:	bf98      	it	ls
   18632:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
   18636:	4290      	cmp	r0, r2
		val /= radix;
   18638:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1863a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
   1863e:	d2eb      	bcs.n	18618 <ultoa+0xc>
	buf[i + 1] = 0;
   18640:	1c63      	adds	r3, r4, #1
   18642:	2200      	movs	r2, #0
   18644:	18c8      	adds	r0, r1, r3
   18646:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
   18648:	b17c      	cbz	r4, 1866a <ultoa+0x5e>
		t = buf[j];
   1864a:	4662      	mov	r2, ip
   1864c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
   18650:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
   18654:	eba1 030c 	sub.w	r3, r1, ip
   18658:	3202      	adds	r2, #2
		buf[j] = buf[i];
   1865a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
   1865e:	3b01      	subs	r3, #1
   18660:	1a52      	subs	r2, r2, r1
		buf[i] = t;
   18662:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
   18664:	4423      	add	r3, r4
   18666:	429a      	cmp	r2, r3
   18668:	dbef      	blt.n	1864a <ultoa+0x3e>
}
   1866a:	4608      	mov	r0, r1
   1866c:	bd70      	pop	{r4, r5, r6, pc}
   1866e:	bf00      	nop

00018670 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
   18670:	eeb4 0a40 	vcmp.f32	s0, s0
{
   18674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
   18678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   1867c:	4616      	mov	r6, r2
	int awidth = abs(width);
   1867e:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
   18682:	4607      	mov	r7, r0
   18684:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
   18688:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
   1868c:	eeb0 8a40 	vmov.f32	s16, s0
   18690:	b085      	sub	sp, #20
	if (isnanf(val)) {
   18692:	f180 8148 	bvs.w	18926 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
   18696:	eef0 7ac0 	vabs.f32	s15, s0
   1869a:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 189b0 <dtostrf+0x340>
   1869e:	eef4 7a47 	vcmp.f32	s15, s14
   186a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   186a6:	dd29      	ble.n	186fc <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
   186a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   186ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   186b0:	f100 80ed 	bmi.w	1888e <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   186b4:	2a03      	cmp	r2, #3
   186b6:	f340 8091 	ble.w	187dc <dtostrf+0x16c>
   186ba:	2303      	movs	r3, #3
		if (width<0) {
   186bc:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   186be:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
   186c2:	f2c0 8085 	blt.w	187d0 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   186c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   186ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   186ce:	f100 816a 	bmi.w	189a6 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   186d2:	2149      	movs	r1, #73	; 0x49
   186d4:	234e      	movs	r3, #78	; 0x4e
   186d6:	2046      	movs	r0, #70	; 0x46
   186d8:	1cf4      	adds	r4, r6, #3
   186da:	7031      	strb	r1, [r6, #0]
   186dc:	70b0      	strb	r0, [r6, #2]
   186de:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   186e0:	b122      	cbz	r2, 186ec <dtostrf+0x7c>
			*buf++ = ' ';
   186e2:	4620      	mov	r0, r4
   186e4:	2120      	movs	r1, #32
   186e6:	4414      	add	r4, r2
   186e8:	f006 fd82 	bl	1f1f0 <memset>
			awidth--;
		}
		*buf = 0;
   186ec:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   186ee:	4620      	mov	r0, r4
		*buf = 0;
   186f0:	7023      	strb	r3, [r4, #0]
}
   186f2:	b005      	add	sp, #20
   186f4:	ecbd 8b02 	vpop	{d8}
   186f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
   186fc:	4689      	mov	r9, r1
   186fe:	460d      	mov	r5, r1
   18700:	aa02      	add	r2, sp, #8
   18702:	a901      	add	r1, sp, #4
   18704:	4648      	mov	r0, r9
   18706:	f007 f907 	bl	1f918 <fcvtf>
	if (precision == 0 && decpt == 0) {
   1870a:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
   1870e:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
   18710:	ea59 030a 	orrs.w	r3, r9, sl
   18714:	d172      	bne.n	187fc <dtostrf+0x18c>
		decpt++;
   18716:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
   18718:	7802      	ldrb	r2, [r0, #0]
   1871a:	4ca6      	ldr	r4, [pc, #664]	; (189b4 <dtostrf+0x344>)
		decpt++;
   1871c:	469a      	mov	sl, r3
   1871e:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
   18720:	4ba5      	ldr	r3, [pc, #660]	; (189b8 <dtostrf+0x348>)
		decpt++;
   18722:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
   18724:	2a34      	cmp	r2, #52	; 0x34
   18726:	bf88      	it	hi
   18728:	461c      	movhi	r4, r3
	if (sign) reqd++;
   1872a:	9b02      	ldr	r3, [sp, #8]
   1872c:	2b00      	cmp	r3, #0
   1872e:	d07d      	beq.n	1882c <dtostrf+0x1bc>
   18730:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
   18734:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
   18738:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
   1873c:	f1bb 0f00 	cmp.w	fp, #0
   18740:	f340 80a1 	ble.w	18886 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
   18744:	465a      	mov	r2, fp
   18746:	2120      	movs	r1, #32
   18748:	4630      	mov	r0, r6
		e += pad;
   1874a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
   1874c:	f006 fd50 	bl	1f1f0 <memset>
   18750:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
   18754:	222d      	movs	r2, #45	; 0x2d
   18756:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
   1875a:	f1ba 0f00 	cmp.w	sl, #0
   1875e:	d177      	bne.n	18850 <dtostrf+0x1e0>
   18760:	f1b9 0f00 	cmp.w	r9, #0
   18764:	d006      	beq.n	18774 <dtostrf+0x104>
		*p++ = '0';
   18766:	461a      	mov	r2, r3
   18768:	2130      	movs	r1, #48	; 0x30
   1876a:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
   1876e:	212e      	movs	r1, #46	; 0x2e
   18770:	7059      	strb	r1, [r3, #1]
   18772:	4613      	mov	r3, r2
	while (p < e) {
   18774:	42ab      	cmp	r3, r5
   18776:	d21f      	bcs.n	187b8 <dtostrf+0x148>
		*p++ = *s++;
   18778:	46a4      	mov	ip, r4
   1877a:	4619      	mov	r1, r3
   1877c:	f81c 2b01 	ldrb.w	r2, [ip], #1
   18780:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
   18784:	42a9      	cmp	r1, r5
   18786:	d018      	beq.n	187ba <dtostrf+0x14a>
   18788:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
   1878a:	202e      	movs	r0, #46	; 0x2e
   1878c:	3c01      	subs	r4, #1
   1878e:	e00b      	b.n	187a8 <dtostrf+0x138>
   18790:	7058      	strb	r0, [r3, #1]
   18792:	3302      	adds	r3, #2
		if (p == e) break;
   18794:	3c01      	subs	r4, #1
	while (p < e) {
   18796:	42ab      	cmp	r3, r5
		*p++ = *s++;
   18798:	4619      	mov	r1, r3
	while (p < e) {
   1879a:	d20d      	bcs.n	187b8 <dtostrf+0x148>
		*p++ = *s++;
   1879c:	f81c 2b01 	ldrb.w	r2, [ip], #1
   187a0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
   187a4:	42a9      	cmp	r1, r5
   187a6:	d008      	beq.n	187ba <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
   187a8:	9401      	str	r4, [sp, #4]
   187aa:	2c00      	cmp	r4, #0
   187ac:	d0f0      	beq.n	18790 <dtostrf+0x120>
   187ae:	460b      	mov	r3, r1
		if (p == e) break;
   187b0:	3c01      	subs	r4, #1
	while (p < e) {
   187b2:	42ab      	cmp	r3, r5
		*p++ = *s++;
   187b4:	4619      	mov	r1, r3
	while (p < e) {
   187b6:	d3f1      	bcc.n	1879c <dtostrf+0x12c>
   187b8:	461d      	mov	r5, r3
	if (width < 0) {
   187ba:	2f00      	cmp	r7, #0
   187bc:	db6b      	blt.n	18896 <dtostrf+0x226>
	return buf;
   187be:	4634      	mov	r4, r6
	*p = 0;
   187c0:	2300      	movs	r3, #0
}
   187c2:	4620      	mov	r0, r4
	*p = 0;
   187c4:	702b      	strb	r3, [r5, #0]
}
   187c6:	b005      	add	sp, #20
   187c8:	ecbd 8b02 	vpop	{d8}
   187cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
   187d0:	b122      	cbz	r2, 187dc <dtostrf+0x16c>
				*buf++ = ' ';
   187d2:	4630      	mov	r0, r6
   187d4:	2120      	movs	r1, #32
   187d6:	4416      	add	r6, r2
   187d8:	f006 fd0a 	bl	1f1f0 <memset>
		if (val<0) *buf++ = '-';
   187dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   187e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   187e4:	f140 80bd 	bpl.w	18962 <dtostrf+0x2f2>
   187e8:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   187ea:	2249      	movs	r2, #73	; 0x49
   187ec:	234e      	movs	r3, #78	; 0x4e
   187ee:	2046      	movs	r0, #70	; 0x46
   187f0:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
   187f2:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   187f4:	70f0      	strb	r0, [r6, #3]
   187f6:	7072      	strb	r2, [r6, #1]
   187f8:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   187fa:	e777      	b.n	186ec <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
   187fc:	f1ca 0300 	rsb	r3, sl, #0
   18800:	4599      	cmp	r9, r3
   18802:	da57      	bge.n	188b4 <dtostrf+0x244>
		decpt = -precision;
   18804:	f04f 0801 	mov.w	r8, #1
   18808:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
   1880c:	4c69      	ldr	r4, [pc, #420]	; (189b4 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
   1880e:	45c2      	cmp	sl, r8
		decpt = -precision;
   18810:	4640      	mov	r0, r8
   18812:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
   18816:	bfb8      	it	lt
   18818:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
   1881c:	f1ba 0f00 	cmp.w	sl, #0
   18820:	d152      	bne.n	188c8 <dtostrf+0x258>
	if (sign) reqd++;
   18822:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
   18824:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
   18828:	2b00      	cmp	r3, #0
   1882a:	d181      	bne.n	18730 <dtostrf+0xc0>
	pad = width - reqd;
   1882c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
   18830:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
   18834:	f1bb 0f00 	cmp.w	fp, #0
   18838:	dd27      	ble.n	1888a <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
   1883a:	465a      	mov	r2, fp
   1883c:	2120      	movs	r1, #32
   1883e:	4630      	mov	r0, r6
		e += pad;
   18840:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
   18842:	f006 fcd5 	bl	1f1f0 <memset>
   18846:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
   1884a:	f1ba 0f00 	cmp.w	sl, #0
   1884e:	d087      	beq.n	18760 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
   18850:	f1ba 0f00 	cmp.w	sl, #0
   18854:	da8e      	bge.n	18774 <dtostrf+0x104>
   18856:	f1b9 0f00 	cmp.w	r9, #0
   1885a:	d08b      	beq.n	18774 <dtostrf+0x104>
		*p++ = '0';
   1885c:	4618      	mov	r0, r3
		*p++ = '.';
   1885e:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
   18860:	2130      	movs	r1, #48	; 0x30
   18862:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
   18866:	705a      	strb	r2, [r3, #1]
   18868:	4602      	mov	r2, r0
   1886a:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
   1886c:	3301      	adds	r3, #1
			*p++ = '0';
   1886e:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
   18872:	d1fb      	bne.n	1886c <dtostrf+0x1fc>
			*p++ = '0';
   18874:	f1ba 0f00 	cmp.w	sl, #0
   18878:	9301      	str	r3, [sp, #4]
   1887a:	f1ca 0300 	rsb	r3, sl, #0
   1887e:	bfa8      	it	ge
   18880:	2301      	movge	r3, #1
   18882:	4403      	add	r3, r0
   18884:	e776      	b.n	18774 <dtostrf+0x104>
	if (pad > 0) {
   18886:	4633      	mov	r3, r6
   18888:	e764      	b.n	18754 <dtostrf+0xe4>
   1888a:	4633      	mov	r3, r6
   1888c:	e765      	b.n	1875a <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1888e:	2a04      	cmp	r2, #4
   18890:	ddaa      	ble.n	187e8 <dtostrf+0x178>
   18892:	2304      	movs	r3, #4
   18894:	e712      	b.n	186bc <dtostrf+0x4c>
		pad = (reqd + width) * -1;
   18896:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
   18898:	f1b8 0f00 	cmp.w	r8, #0
   1889c:	ea6f 0208 	mvn.w	r2, r8
   188a0:	da8d      	bge.n	187be <dtostrf+0x14e>
   188a2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   188a6:	2120      	movs	r1, #32
   188a8:	4628      	mov	r0, r5
   188aa:	3201      	adds	r2, #1
   188ac:	4415      	add	r5, r2
   188ae:	f006 fc9f 	bl	1f1f0 <memset>
   188b2:	e784      	b.n	187be <dtostrf+0x14e>
	reqd = strlen(s);
   188b4:	f007 fa64 	bl	1fd80 <strlen>
   188b8:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
   188ba:	45c2      	cmp	sl, r8
   188bc:	bfb8      	it	lt
   188be:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
   188c2:	f1ba 0f00 	cmp.w	sl, #0
   188c6:	d0ac      	beq.n	18822 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
   188c8:	f1ba 0f00 	cmp.w	sl, #0
   188cc:	f6bf af2d 	bge.w	1872a <dtostrf+0xba>
   188d0:	f1b9 0f00 	cmp.w	r9, #0
   188d4:	f43f af29 	beq.w	1872a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
   188d8:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
   188dc:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
   188e0:	4283      	cmp	r3, r0
   188e2:	f4bf af22 	bcs.w	1872a <dtostrf+0xba>
			while (newPrecision > 0) {
   188e6:	f1b9 0f00 	cmp.w	r9, #0
   188ea:	dd05      	ble.n	188f8 <dtostrf+0x288>
				val *= 10.0f;
   188ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
   188f0:	3d01      	subs	r5, #1
				val *= 10.0f;
   188f2:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
   188f6:	d1fb      	bne.n	188f0 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   188f8:	aa02      	add	r2, sp, #8
   188fa:	eeb0 0a48 	vmov.f32	s0, s16
   188fe:	4628      	mov	r0, r5
   18900:	a903      	add	r1, sp, #12
   18902:	f007 f809 	bl	1f918 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   18906:	f8dd a004 	ldr.w	sl, [sp, #4]
   1890a:	9b03      	ldr	r3, [sp, #12]
   1890c:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   18910:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   18912:	eba3 030a 	sub.w	r3, r3, sl
   18916:	4293      	cmp	r3, r2
   18918:	f47f af07 	bne.w	1872a <dtostrf+0xba>
   1891c:	f10a 0a01 	add.w	sl, sl, #1
   18920:	f8cd a004 	str.w	sl, [sp, #4]
   18924:	e701      	b.n	1872a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
   18926:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   1892a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1892e:	bf4c      	ite	mi
   18930:	2304      	movmi	r3, #4
   18932:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   18934:	4293      	cmp	r3, r2
   18936:	da22      	bge.n	1897e <dtostrf+0x30e>
		if (width<0) {
   18938:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1893a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
   1893e:	db18      	blt.n	18972 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   18940:	ee10 3a10 	vmov	r3, s0
   18944:	2b00      	cmp	r3, #0
   18946:	da02      	bge.n	1894e <dtostrf+0x2de>
   18948:	232d      	movs	r3, #45	; 0x2d
   1894a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1894e:	234e      	movs	r3, #78	; 0x4e
   18950:	2141      	movs	r1, #65	; 0x41
   18952:	1cf4      	adds	r4, r6, #3
   18954:	7033      	strb	r3, [r6, #0]
   18956:	7071      	strb	r1, [r6, #1]
   18958:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   1895a:	2a00      	cmp	r2, #0
   1895c:	f47f aec1 	bne.w	186e2 <dtostrf+0x72>
   18960:	e6c4      	b.n	186ec <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   18962:	2149      	movs	r1, #73	; 0x49
   18964:	224e      	movs	r2, #78	; 0x4e
   18966:	2346      	movs	r3, #70	; 0x46
   18968:	1cf4      	adds	r4, r6, #3
   1896a:	7031      	strb	r1, [r6, #0]
   1896c:	7072      	strb	r2, [r6, #1]
   1896e:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   18970:	e6bc      	b.n	186ec <dtostrf+0x7c>
			while (awidth) {
   18972:	b122      	cbz	r2, 1897e <dtostrf+0x30e>
				*buf++ = ' ';
   18974:	4630      	mov	r0, r6
   18976:	2120      	movs	r1, #32
   18978:	4416      	add	r6, r2
   1897a:	f006 fc39 	bl	1f1f0 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1897e:	ee18 3a10 	vmov	r3, s16
   18982:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   18984:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   18988:	db05      	blt.n	18996 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1898a:	2241      	movs	r2, #65	; 0x41
   1898c:	1cf4      	adds	r4, r6, #3
   1898e:	7033      	strb	r3, [r6, #0]
   18990:	7072      	strb	r2, [r6, #1]
   18992:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   18994:	e6aa      	b.n	186ec <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   18996:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   18998:	2241      	movs	r2, #65	; 0x41
   1899a:	1d34      	adds	r4, r6, #4
   1899c:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1899e:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   189a0:	70b2      	strb	r2, [r6, #2]
   189a2:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
   189a4:	e6a2      	b.n	186ec <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
   189a6:	232d      	movs	r3, #45	; 0x2d
   189a8:	f806 3b01 	strb.w	r3, [r6], #1
   189ac:	e691      	b.n	186d2 <dtostrf+0x62>
   189ae:	bf00      	nop
   189b0:	7f7fffff 	.word	0x7f7fffff
   189b4:	20002234 	.word	0x20002234
   189b8:	200020f8 	.word	0x200020f8

000189bc <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   189bc:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   189be:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   189c0:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   189c4:	4619      	mov	r1, r3
{
   189c6:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   189c8:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   189cc:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   189d0:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   189d4:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   189d8:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   189dc:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   189de:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   189e2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   189e6:	b29b      	uxth	r3, r3
   189e8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   189ec:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   189f0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   189f4:	3101      	adds	r1, #1
   189f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   189fa:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   189fc:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   189fe:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   18a02:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   18a04:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   18a06:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   18a08:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   18a0a:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   18a0e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   18a10:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   18a12:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   18a14:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   18a16:	d1eb      	bne.n	189f0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   18a18:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   18a1c:	b29b      	uxth	r3, r3
   18a1e:	f043 030f 	orr.w	r3, r3, #15
   18a22:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   18a26:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   18a2a:	b29b      	uxth	r3, r3
   18a2c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   18a30:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   18a34:	bd10      	pop	{r4, pc}
   18a36:	bf00      	nop

00018a38 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   18a38:	4b37      	ldr	r3, [pc, #220]	; (18b18 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   18a3a:	4a38      	ldr	r2, [pc, #224]	; (18b1c <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   18a3c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   18a3e:	4838      	ldr	r0, [pc, #224]	; (18b20 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   18a40:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   18a44:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   18a46:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   18a48:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   18a4c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   18a50:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   18a54:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   18a58:	430a      	orrs	r2, r1
   18a5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   18a5e:	f7ff ffad 	bl	189bc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   18a62:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   18a66:	f7ff ffa9 	bl	189bc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   18a6a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   18a6e:	f7ff ffa5 	bl	189bc <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   18a72:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   18a76:	f7ff ffa1 	bl	189bc <flexpwm_init>
	for (i=0; i < 4; i++) {
   18a7a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   18a7c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   18a80:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   18a84:	4611      	mov	r1, r2
   18a86:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   18a8a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   18a8e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   18a90:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   18a92:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   18a94:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   18a96:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   18a9a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   18a9c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   18a9e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   18aa2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   18aa4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   18aa6:	d1ee      	bne.n	18a86 <pwm_init+0x4e>
   18aa8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   18aaa:	481e      	ldr	r0, [pc, #120]	; (18b24 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   18aac:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   18ab0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   18ab4:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   18ab6:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   18aba:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   18abe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   18ac2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   18ac6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   18ac8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   18aca:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   18acc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   18ace:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   18ad2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   18ad4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   18ad6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   18ada:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   18adc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   18ade:	d1ee      	bne.n	18abe <pwm_init+0x86>
   18ae0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   18ae2:	4811      	ldr	r0, [pc, #68]	; (18b28 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   18ae4:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   18ae6:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   18aea:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   18aec:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   18af0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   18af4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   18af8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   18afc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   18afe:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   18b00:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   18b02:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   18b04:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   18b06:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   18b08:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   18b0a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   18b0e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   18b10:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   18b14:	d1ee      	bne.n	18af4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   18b16:	bd70      	pop	{r4, r5, r6, pc}
   18b18:	400fc000 	.word	0x400fc000
   18b1c:	fc030000 	.word	0xfc030000
   18b20:	403dc000 	.word	0x403dc000
   18b24:	401e0000 	.word	0x401e0000
   18b28:	401e4000 	.word	0x401e4000

00018b2c <analogWriteRes>:
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
	analog_write_res = bits;
   18b2c:	2810      	cmp	r0, #16
   18b2e:	4603      	mov	r3, r0
	prior = analog_write_res;
   18b30:	4a04      	ldr	r2, [pc, #16]	; (18b44 <analogWriteRes+0x18>)
	analog_write_res = bits;
   18b32:	bf28      	it	cs
   18b34:	2310      	movcs	r3, #16
	prior = analog_write_res;
   18b36:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
   18b38:	2b01      	cmp	r3, #1
   18b3a:	bf38      	it	cc
   18b3c:	2301      	movcc	r3, #1
   18b3e:	7013      	strb	r3, [r2, #0]
	return prior;
}
   18b40:	4770      	bx	lr
   18b42:	bf00      	nop
   18b44:	200048b8 	.word	0x200048b8

00018b48 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
   18b48:	4a07      	ldr	r2, [pc, #28]	; (18b68 <rtc_get+0x20>)
   18b4a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   18b4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
   18b4e:	4619      	mov	r1, r3
   18b50:	4684      	mov	ip, r0
   18b52:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   18b54:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   18b56:	4299      	cmp	r1, r3
   18b58:	d1f9      	bne.n	18b4e <rtc_get+0x6>
   18b5a:	4584      	cmp	ip, r0
   18b5c:	d1f7      	bne.n	18b4e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
   18b5e:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
   18b60:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   18b64:	4770      	bx	lr
   18b66:	bf00      	nop
   18b68:	400d4000 	.word	0x400d4000

00018b6c <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
   18b6c:	4910      	ldr	r1, [pc, #64]	; (18bb0 <rtc_set+0x44>)
   18b6e:	688b      	ldr	r3, [r1, #8]
   18b70:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
   18b74:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
   18b76:	688b      	ldr	r3, [r1, #8]
   18b78:	07db      	lsls	r3, r3, #31
   18b7a:	d4fc      	bmi.n	18b76 <rtc_set+0xa>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
   18b7c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
   18b7e:	4a0c      	ldr	r2, [pc, #48]	; (18bb0 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
   18b80:	f023 0301 	bic.w	r3, r3, #1
   18b84:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
   18b86:	6b93      	ldr	r3, [r2, #56]	; 0x38
   18b88:	07d9      	lsls	r1, r3, #31
   18b8a:	d4fc      	bmi.n	18b86 <rtc_set+0x1a>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
   18b8c:	03c3      	lsls	r3, r0, #15
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
   18b8e:	4908      	ldr	r1, [pc, #32]	; (18bb0 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
   18b90:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
   18b92:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
   18b94:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
   18b96:	6b93      	ldr	r3, [r2, #56]	; 0x38
   18b98:	f043 0301 	orr.w	r3, r3, #1
   18b9c:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
   18b9e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   18ba0:	07db      	lsls	r3, r3, #31
   18ba2:	d5fc      	bpl.n	18b9e <rtc_set+0x32>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
   18ba4:	688b      	ldr	r3, [r1, #8]
   18ba6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
   18baa:	608b      	str	r3, [r1, #8]
}
   18bac:	4770      	bx	lr
   18bae:	bf00      	nop
   18bb0:	400d4000 	.word	0x400d4000

00018bb4 <unused_interrupt_vector>:
	__disable_irq();
   18bb4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   18bb6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   18bba:	4c52      	ldr	r4, [pc, #328]	; (18d04 <unused_interrupt_vector+0x150>)
   18bbc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
   18bc0:	f01e 0f04 	tst.w	lr, #4
   18bc4:	bf0c      	ite	eq
   18bc6:	f3ef 8208 	mrseq	r2, MSP
   18bca:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
   18bce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
   18bd2:	4e4d      	ldr	r6, [pc, #308]	; (18d08 <unused_interrupt_vector+0x154>)
	while (p < end) {
   18bd4:	4d4d      	ldr	r5, [pc, #308]	; (18d0c <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
   18bd6:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
   18bda:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   18bde:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
   18be2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
   18be6:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   18bea:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
   18bee:	6993      	ldr	r3, [r2, #24]
   18bf0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   18bf4:	69d3      	ldr	r3, [r2, #28]
   18bf6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   18bfa:	f000 f8d1 	bl	18da0 <tempmonGetTemp>
   18bfe:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   18c02:	f7ff ffa1 	bl	18b48 <rtc_get>
	info->len = sizeof(*info) / 4;
   18c06:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
   18c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
   18c0c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   18c10:	460b      	mov	r3, r1
   18c12:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   18c16:	493e      	ldr	r1, [pc, #248]	; (18d10 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
   18c18:	1d30      	adds	r0, r6, #4
   18c1a:	405a      	eors	r2, r3
   18c1c:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   18c1e:	f002 0301 	and.w	r3, r2, #1
   18c22:	3c01      	subs	r4, #1
   18c24:	fb01 f303 	mul.w	r3, r1, r3
   18c28:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   18c2c:	d1f7      	bne.n	18c1e <unused_interrupt_vector+0x6a>
	while (p < end) {
   18c2e:	42a8      	cmp	r0, r5
   18c30:	d002      	beq.n	18c38 <unused_interrupt_vector+0x84>
		crc ^= *p++;
   18c32:	6873      	ldr	r3, [r6, #4]
   18c34:	4606      	mov	r6, r0
   18c36:	e7ef      	b.n	18c18 <unused_interrupt_vector+0x64>
	info->crc = crc;
   18c38:	4b32      	ldr	r3, [pc, #200]	; (18d04 <unused_interrupt_vector+0x150>)
   18c3a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
   18c3e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
   18c42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18c46:	4930      	ldr	r1, [pc, #192]	; (18d08 <unused_interrupt_vector+0x154>)
   18c48:	4a32      	ldr	r2, [pc, #200]	; (18d14 <unused_interrupt_vector+0x160>)
   18c4a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
   18c4e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
   18c52:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18c56:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   18c5a:	4a2f      	ldr	r2, [pc, #188]	; (18d18 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
   18c5c:	2502      	movs	r5, #2
   18c5e:	482f      	ldr	r0, [pc, #188]	; (18d1c <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   18c60:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18c62:	492f      	ldr	r1, [pc, #188]	; (18d20 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   18c64:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   18c68:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   18c6a:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   18c6c:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18c6e:	482d      	ldr	r0, [pc, #180]	; (18d24 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   18c70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   18c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18c78:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18c7a:	680b      	ldr	r3, [r1, #0]
   18c7c:	4283      	cmp	r3, r0
   18c7e:	d83d      	bhi.n	18cfc <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
   18c80:	4d26      	ldr	r5, [pc, #152]	; (18d1c <unused_interrupt_vector+0x168>)
   18c82:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
   18c84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
   18c8c:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   18c8e:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
   18c90:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   18c94:	4924      	ldr	r1, [pc, #144]	; (18d28 <unused_interrupt_vector+0x174>)
   18c96:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   18c9a:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   18c9e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   18ca2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   18ca6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   18caa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   18cae:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
   18cb2:	e001      	b.n	18cb8 <unused_interrupt_vector+0x104>
		usb_isr();
   18cb4:	f000 f966 	bl	18f84 <usb_isr>
		if (PIT_TFLG0) {
   18cb8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   18cbc:	2b00      	cmp	r3, #0
   18cbe:	d0f9      	beq.n	18cb4 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
   18cc0:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
   18cc2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   18cc6:	2c4f      	cmp	r4, #79	; 0x4f
   18cc8:	d9f4      	bls.n	18cb4 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   18cca:	4b18      	ldr	r3, [pc, #96]	; (18d2c <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
   18ccc:	2002      	movs	r0, #2
   18cce:	4918      	ldr	r1, [pc, #96]	; (18d30 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   18cd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
   18cd4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   18cd8:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   18cda:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   18cde:	b93b      	cbnz	r3, 18cf0 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
   18ce0:	4814      	ldr	r0, [pc, #80]	; (18d34 <unused_interrupt_vector+0x180>)
   18ce2:	4915      	ldr	r1, [pc, #84]	; (18d38 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   18ce4:	4a0d      	ldr	r2, [pc, #52]	; (18d1c <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
   18ce6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   18ce8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   18cec:	2b00      	cmp	r3, #0
   18cee:	d0fa      	beq.n	18ce6 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
   18cf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18cf4:	4a11      	ldr	r2, [pc, #68]	; (18d3c <unused_interrupt_vector+0x188>)
   18cf6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   18cfa:	e7fe      	b.n	18cfa <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   18cfc:	f7ff f8cc 	bl	17e98 <set_arm_clock>
   18d00:	e7be      	b.n	18c80 <unused_interrupt_vector+0xcc>
   18d02:	bf00      	nop
   18d04:	2027ff00 	.word	0x2027ff00
   18d08:	2027ff80 	.word	0x2027ff80
   18d0c:	2027ffa8 	.word	0x2027ffa8
   18d10:	edb88320 	.word	0xedb88320
   18d14:	2027ffa0 	.word	0x2027ffa0
   18d18:	400fc000 	.word	0x400fc000
   18d1c:	40084000 	.word	0x40084000
   18d20:	20003694 	.word	0x20003694
   18d24:	0bcd3d80 	.word	0x0bcd3d80
   18d28:	00249f00 	.word	0x00249f00
   18d2c:	400d9000 	.word	0x400d9000
   18d30:	402e0000 	.word	0x402e0000
   18d34:	400f8000 	.word	0x400f8000
   18d38:	0bad00f1 	.word	0x0bad00f1
   18d3c:	05fa0004 	.word	0x05fa0004

00018d40 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
   18d40:	490a      	ldr	r1, [pc, #40]	; (18d6c <_sbrk+0x2c>)
   18d42:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
   18d44:	b138      	cbz	r0, 18d56 <_sbrk+0x16>
{
   18d46:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
   18d48:	1813      	adds	r3, r2, r0
   18d4a:	4809      	ldr	r0, [pc, #36]	; (18d70 <_sbrk+0x30>)
   18d4c:	4283      	cmp	r3, r0
   18d4e:	d804      	bhi.n	18d5a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   18d50:	4610      	mov	r0, r2
                __brkval = prev + incr;
   18d52:	600b      	str	r3, [r1, #0]
}
   18d54:	bd08      	pop	{r3, pc}
   18d56:	4610      	mov	r0, r2
   18d58:	4770      	bx	lr
                        errno = ENOMEM;
   18d5a:	f006 fe0b 	bl	1f974 <__errno>
   18d5e:	230c      	movs	r3, #12
                        return (void *)-1;
   18d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
   18d64:	6003      	str	r3, [r0, #0]
}
   18d66:	4610      	mov	r0, r2
   18d68:	bd08      	pop	{r3, pc}
   18d6a:	bf00      	nop
   18d6c:	20003e38 	.word	0x20003e38
   18d70:	20280000 	.word	0x20280000

00018d74 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   18d74:	2000      	movs	r0, #0
   18d76:	4770      	bx	lr

00018d78 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   18d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d7c:	4770      	bx	lr
   18d7e:	bf00      	nop

00018d80 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   18d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
   18d84:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   18d86:	604b      	str	r3, [r1, #4]
}
   18d88:	4770      	bx	lr
   18d8a:	bf00      	nop

00018d8c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   18d8c:	2001      	movs	r0, #1
   18d8e:	4770      	bx	lr

00018d90 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   18d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d94:	4770      	bx	lr
   18d96:	bf00      	nop

00018d98 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   18d98:	bf30      	wfi
   18d9a:	e7fd      	b.n	18d98 <abort>

00018d9c <Panic_Temp_isr>:
  unused_interrupt_vector();
   18d9c:	f7ff bf0a 	b.w	18bb4 <unused_interrupt_vector>

00018da0 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   18da0:	4a12      	ldr	r2, [pc, #72]	; (18dec <tempmonGetTemp+0x4c>)
   18da2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   18da6:	075b      	lsls	r3, r3, #29
   18da8:	d5fb      	bpl.n	18da2 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   18daa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   18dae:	4810      	ldr	r0, [pc, #64]	; (18df0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   18db0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   18db4:	490f      	ldr	r1, [pc, #60]	; (18df4 <tempmonGetTemp+0x54>)
   18db6:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   18dba:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   18dbe:	ed91 6a00 	vldr	s12, [r1]
   18dc2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   18dc6:	4a0c      	ldr	r2, [pc, #48]	; (18df8 <tempmonGetTemp+0x58>)
   18dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   18dcc:	4b0b      	ldr	r3, [pc, #44]	; (18dfc <tempmonGetTemp+0x5c>)
   18dce:	edd2 6a00 	vldr	s13, [r2]
   18dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   18dd6:	ed93 7a00 	vldr	s14, [r3]
   18dda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   18dde:	ee67 7a86 	vmul.f32	s15, s15, s12
   18de2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   18de6:	ee37 0a40 	vsub.f32	s0, s14, s0
   18dea:	4770      	bx	lr
   18dec:	400d8100 	.word	0x400d8100
   18df0:	20006264 	.word	0x20006264
   18df4:	2000626c 	.word	0x2000626c
   18df8:	20006270 	.word	0x20006270
   18dfc:	20006268 	.word	0x20006268

00018e00 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   18e00:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   18e02:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
   18e04:	b11b      	cbz	r3, 18e0e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   18e06:	6853      	ldr	r3, [r2, #4]
   18e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   18e0c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   18e0e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   18e10:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   18e12:	b33c      	cbz	r4, 18e64 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   18e14:	4b1a      	ldr	r3, [pc, #104]	; (18e80 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
   18e16:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   18e18:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   18e1c:	420c      	tst	r4, r1
   18e1e:	d11d      	bne.n	18e5c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   18e20:	4e18      	ldr	r6, [pc, #96]	; (18e84 <schedule_transfer+0x84>)
   18e22:	6877      	ldr	r7, [r6, #4]
   18e24:	e004      	b.n	18e30 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   18e26:	6874      	ldr	r4, [r6, #4]
   18e28:	1be4      	subs	r4, r4, r7
   18e2a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   18e2e:	d20b      	bcs.n	18e48 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   18e30:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   18e34:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   18e38:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   18e3c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   18e40:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   18e44:	0464      	lsls	r4, r4, #17
   18e46:	d5ee      	bpl.n	18e26 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   18e48:	400d      	ands	r5, r1
   18e4a:	d107      	bne.n	18e5c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
   18e4c:	4c0c      	ldr	r4, [pc, #48]	; (18e80 <schedule_transfer+0x80>)
		endpoint->status = 0;
   18e4e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
   18e52:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   18e56:	430b      	orrs	r3, r1
   18e58:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
   18e5c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   18e5e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   18e60:	bcf0      	pop	{r4, r5, r6, r7}
   18e62:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
   18e64:	4d06      	ldr	r5, [pc, #24]	; (18e80 <schedule_transfer+0x80>)
	endpoint->status = 0;
   18e66:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
   18e6a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   18e6e:	430b      	orrs	r3, r1
   18e70:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   18e74:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
   18e76:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   18e78:	b662      	cpsie	i
}
   18e7a:	bcf0      	pop	{r4, r5, r6, r7}
   18e7c:	4770      	bx	lr
   18e7e:	bf00      	nop
   18e80:	402e0000 	.word	0x402e0000
   18e84:	e0001000 	.word	0xe0001000

00018e88 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   18e88:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   18e8a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   18e8c:	b19d      	cbz	r5, 18eb6 <run_callbacks+0x2e>
   18e8e:	4606      	mov	r6, r0
   18e90:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
   18e92:	2400      	movs	r4, #0
   18e94:	e003      	b.n	18e9e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   18e96:	6812      	ldr	r2, [r2, #0]
		count++;
   18e98:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
   18e9a:	2a01      	cmp	r2, #1
   18e9c:	d00c      	beq.n	18eb8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
   18e9e:	6853      	ldr	r3, [r2, #4]
   18ea0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   18ea4:	d0f7      	beq.n	18e96 <run_callbacks+0xe>
			ep->first_transfer = t;
   18ea6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   18ea8:	b12c      	cbz	r4, 18eb6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
   18eaa:	4628      	mov	r0, r5
		ep->callback_function(first);
   18eac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
   18eae:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   18eb0:	4798      	blx	r3
	while (count) {
   18eb2:	3c01      	subs	r4, #1
   18eb4:	d1f9      	bne.n	18eaa <run_callbacks+0x22>
		first = next;
		count--;
	}
}
   18eb6:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
   18eb8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
   18ebc:	e7f4      	b.n	18ea8 <run_callbacks+0x20>
   18ebe:	bf00      	nop

00018ec0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   18ec0:	b430      	push	{r4, r5}
	if (len > 0) {
   18ec2:	b9d9      	cbnz	r1, 18efc <endpoint0_transmit.constprop.0+0x3c>
   18ec4:	4c1f      	ldr	r4, [pc, #124]	; (18f44 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
   18ec6:	4b20      	ldr	r3, [pc, #128]	; (18f48 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
   18ec8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   18eca:	4a20      	ldr	r2, [pc, #128]	; (18f4c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
   18ecc:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   18ece:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
   18ed2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   18ed4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
   18ed6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   18eda:	2480      	movs	r4, #128	; 0x80
   18edc:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   18ede:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   18ee2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   18ee6:	481a      	ldr	r0, [pc, #104]	; (18f50 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
   18ee8:	432b      	orrs	r3, r5
   18eea:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   18eee:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
   18ef0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   18ef4:	2b00      	cmp	r3, #0
   18ef6:	d1fb      	bne.n	18ef0 <endpoint0_transmit.constprop.0+0x30>
}
   18ef8:	bc30      	pop	{r4, r5}
   18efa:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   18efc:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
   18efe:	4b15      	ldr	r3, [pc, #84]	; (18f54 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   18f00:	4c10      	ldr	r4, [pc, #64]	; (18f44 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
   18f02:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   18f04:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   18f08:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
   18f0a:	4a10      	ldr	r2, [pc, #64]	; (18f4c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   18f0c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   18f0e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   18f12:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   18f14:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   18f16:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   18f1a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
   18f1c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   18f1e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   18f22:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   18f26:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
   18f28:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
   18f2a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
   18f2c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   18f2e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   18f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18f36:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   18f3a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   18f3e:	2b00      	cmp	r3, #0
   18f40:	d1fb      	bne.n	18f3a <endpoint0_transmit.constprop.0+0x7a>
   18f42:	e7c0      	b.n	18ec6 <endpoint0_transmit.constprop.0+0x6>
   18f44:	20000000 	.word	0x20000000
   18f48:	20004f20 	.word	0x20004f20
   18f4c:	402e0000 	.word	0x402e0000
   18f50:	20005bdc 	.word	0x20005bdc
   18f54:	20004f40 	.word	0x20004f40

00018f58 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   18f58:	4908      	ldr	r1, [pc, #32]	; (18f7c <usb_stop_sof_interrupts+0x24>)
   18f5a:	2201      	movs	r2, #1
   18f5c:	780b      	ldrb	r3, [r1, #0]
   18f5e:	fa02 f000 	lsl.w	r0, r2, r0
   18f62:	ea23 0000 	bic.w	r0, r3, r0
   18f66:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
   18f68:	b930      	cbnz	r0, 18f78 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   18f6a:	4a05      	ldr	r2, [pc, #20]	; (18f80 <usb_stop_sof_interrupts+0x28>)
   18f6c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   18f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   18f74:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   18f78:	4770      	bx	lr
   18f7a:	bf00      	nop
   18f7c:	20006ab2 	.word	0x20006ab2
   18f80:	402e0000 	.word	0x402e0000

00018f84 <usb_isr>:
{
   18f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
   18f88:	4c97      	ldr	r4, [pc, #604]	; (191e8 <usb_isr+0x264>)
{
   18f8a:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
   18f8c:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   18f90:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
   18f92:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   18f96:	d553      	bpl.n	19040 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   18f98:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   18f9c:	2a00      	cmp	r2, #0
   18f9e:	d04a      	beq.n	19036 <usb_isr+0xb2>
   18fa0:	4e92      	ldr	r6, [pc, #584]	; (191ec <usb_isr+0x268>)
   18fa2:	f8df a260 	ldr.w	sl, [pc, #608]	; 19204 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
   18fa6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1921c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   18faa:	f8df b274 	ldr.w	fp, [pc, #628]	; 19220 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   18fae:	f8df 8274 	ldr.w	r8, [pc, #628]	; 19224 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
   18fb2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
   18fb6:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
   18fba:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   18fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   18fc2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   18fc6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   18fca:	049d      	lsls	r5, r3, #18
   18fcc:	d5f5      	bpl.n	18fba <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   18fce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   18fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18fd6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   18fda:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   18fde:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   18fe2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
   18fe6:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
   18fea:	d1fa      	bne.n	18fe2 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
   18fec:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
   18fee:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
   18ff0:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
   18ff4:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   18ff8:	f000 81cf 	beq.w	1939a <usb_isr+0x416>
   18ffc:	f200 80db 	bhi.w	191b6 <usb_isr+0x232>
   19000:	f240 3102 	movw	r1, #770	; 0x302
   19004:	428b      	cmp	r3, r1
   19006:	f000 81e7 	beq.w	193d8 <usb_isr+0x454>
   1900a:	f200 809a 	bhi.w	19142 <usb_isr+0x1be>
   1900e:	2b82      	cmp	r3, #130	; 0x82
   19010:	f000 81cb 	beq.w	193aa <usb_isr+0x426>
   19014:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   19018:	f040 808a 	bne.w	19130 <usb_isr+0x1ac>
		if (endpoint > 7) break;
   1901c:	f010 0f78 	tst.w	r0, #120	; 0x78
   19020:	b283      	uxth	r3, r0
   19022:	f000 8203 	beq.w	1942c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   19026:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1902a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   1902e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   19032:	2a00      	cmp	r2, #0
   19034:	d1bd      	bne.n	18fb2 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   19036:	4a6c      	ldr	r2, [pc, #432]	; (191e8 <usb_isr+0x264>)
   19038:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   1903c:	2b00      	cmp	r3, #0
   1903e:	d142      	bne.n	190c6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
   19040:	067e      	lsls	r6, r7, #25
   19042:	d516      	bpl.n	19072 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   19044:	4b68      	ldr	r3, [pc, #416]	; (191e8 <usb_isr+0x264>)
   19046:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   1904a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   1904e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   19052:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   19056:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   1905a:	2c00      	cmp	r4, #0
   1905c:	d1fb      	bne.n	19056 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   1905e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19062:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   19066:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   1906a:	f000 fd29 	bl	19ac0 <usb_serial_reset>
		endpointN_notify_mask = 0;
   1906e:	4b60      	ldr	r3, [pc, #384]	; (191f0 <usb_isr+0x26c>)
   19070:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   19072:	01fc      	lsls	r4, r7, #7
   19074:	d503      	bpl.n	1907e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   19076:	4b5f      	ldr	r3, [pc, #380]	; (191f4 <usb_isr+0x270>)
   19078:	681b      	ldr	r3, [r3, #0]
   1907a:	b103      	cbz	r3, 1907e <usb_isr+0xfa>
   1907c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   1907e:	01b8      	lsls	r0, r7, #6
   19080:	d503      	bpl.n	1908a <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   19082:	4b5d      	ldr	r3, [pc, #372]	; (191f8 <usb_isr+0x274>)
   19084:	681b      	ldr	r3, [r3, #0]
   19086:	b103      	cbz	r3, 1908a <usb_isr+0x106>
   19088:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   1908a:	0779      	lsls	r1, r7, #29
   1908c:	d508      	bpl.n	190a0 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   1908e:	4b56      	ldr	r3, [pc, #344]	; (191e8 <usb_isr+0x264>)
   19090:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   19094:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   19098:	d047      	beq.n	1912a <usb_isr+0x1a6>
			usb_high_speed = 1;
   1909a:	4b58      	ldr	r3, [pc, #352]	; (191fc <usb_isr+0x278>)
   1909c:	2201      	movs	r2, #1
   1909e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   190a0:	4b51      	ldr	r3, [pc, #324]	; (191e8 <usb_isr+0x264>)
   190a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   190a6:	061a      	lsls	r2, r3, #24
   190a8:	d50a      	bpl.n	190c0 <usb_isr+0x13c>
   190aa:	063b      	lsls	r3, r7, #24
   190ac:	d508      	bpl.n	190c0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
   190ae:	4a54      	ldr	r2, [pc, #336]	; (19200 <usb_isr+0x27c>)
   190b0:	7813      	ldrb	r3, [r2, #0]
   190b2:	b12b      	cbz	r3, 190c0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
   190b4:	3b01      	subs	r3, #1
   190b6:	b2db      	uxtb	r3, r3
   190b8:	7013      	strb	r3, [r2, #0]
   190ba:	2b00      	cmp	r3, #0
   190bc:	f000 8272 	beq.w	195a4 <usb_isr+0x620>
}
   190c0:	b003      	add	sp, #12
   190c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
   190c6:	494f      	ldr	r1, [pc, #316]	; (19204 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
   190c8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   190cc:	6808      	ldr	r0, [r1, #0]
   190ce:	4203      	tst	r3, r0
   190d0:	f040 81d1 	bne.w	19476 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
   190d4:	4a46      	ldr	r2, [pc, #280]	; (191f0 <usb_isr+0x26c>)
   190d6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
   190d8:	401c      	ands	r4, r3
   190da:	d0b1      	beq.n	19040 <usb_isr+0xbc>
				while (tx) {
   190dc:	ea5f 4814 	movs.w	r8, r4, lsr #16
   190e0:	d010      	beq.n	19104 <usb_isr+0x180>
   190e2:	4e42      	ldr	r6, [pc, #264]	; (191ec <usb_isr+0x268>)
					tx &= ~(1<<p);
   190e4:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
   190e8:	fa98 f5a8 	rbit	r5, r8
   190ec:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   190f0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
   190f4:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   190f8:	3040      	adds	r0, #64	; 0x40
   190fa:	f7ff fec5 	bl	18e88 <run_callbacks>
				while (tx) {
   190fe:	ea38 0805 	bics.w	r8, r8, r5
   19102:	d1f1      	bne.n	190e8 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
   19104:	b2a4      	uxth	r4, r4
				while(rx) {
   19106:	2c00      	cmp	r4, #0
   19108:	d09a      	beq.n	19040 <usb_isr+0xbc>
   1910a:	4e38      	ldr	r6, [pc, #224]	; (191ec <usb_isr+0x268>)
					rx &= ~(1<<p);
   1910c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
   19110:	fa94 f5a4 	rbit	r5, r4
   19114:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
   19118:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
   1911c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
   19120:	f7ff feb2 	bl	18e88 <run_callbacks>
				while(rx) {
   19124:	43ac      	bics	r4, r5
   19126:	d1f3      	bne.n	19110 <usb_isr+0x18c>
   19128:	e78a      	b.n	19040 <usb_isr+0xbc>
			usb_high_speed = 0;
   1912a:	4a34      	ldr	r2, [pc, #208]	; (191fc <usb_isr+0x278>)
   1912c:	7013      	strb	r3, [r2, #0]
   1912e:	e7b7      	b.n	190a0 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
   19130:	2b80      	cmp	r3, #128	; 0x80
   19132:	f47f af78 	bne.w	19026 <usb_isr+0xa2>
		reply_buffer[0] = 0;
   19136:	4834      	ldr	r0, [pc, #208]	; (19208 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
   19138:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
   1913a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   1913c:	f7ff fec0 	bl	18ec0 <endpoint0_transmit.constprop.0>
		return;
   19140:	e775      	b.n	1902e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
   19142:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   19146:	f000 810b 	beq.w	19360 <usb_isr+0x3dc>
   1914a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
   1914e:	2b01      	cmp	r3, #1
   19150:	f63f af69 	bhi.w	19026 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   19154:	4b2d      	ldr	r3, [pc, #180]	; (1920c <usb_isr+0x288>)
   19156:	685d      	ldr	r5, [r3, #4]
   19158:	2d00      	cmp	r5, #0
   1915a:	f43f af64 	beq.w	19026 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1915e:	fa1f fc8c 	uxth.w	ip, ip
   19162:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   19166:	e004      	b.n	19172 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   19168:	691d      	ldr	r5, [r3, #16]
   1916a:	330c      	adds	r3, #12
   1916c:	2d00      	cmp	r5, #0
   1916e:	f43f af5a 	beq.w	19026 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   19172:	881a      	ldrh	r2, [r3, #0]
   19174:	4572      	cmp	r2, lr
   19176:	d1f7      	bne.n	19168 <usb_isr+0x1e4>
   19178:	885a      	ldrh	r2, [r3, #2]
   1917a:	4562      	cmp	r2, ip
   1917c:	d1f4      	bne.n	19168 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
   1917e:	ea4f 221e 	mov.w	r2, lr, lsr #8
   19182:	2a03      	cmp	r2, #3
   19184:	f000 81a5 	beq.w	194d2 <usb_isr+0x54e>
					datalen = list->length;
   19188:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   1918a:	0c00      	lsrs	r0, r0, #16
   1918c:	4282      	cmp	r2, r0
   1918e:	bf28      	it	cs
   19190:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
   19192:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   19196:	f040 81a1 	bne.w	194dc <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
   1919a:	4b18      	ldr	r3, [pc, #96]	; (191fc <usb_isr+0x278>)
   1919c:	491c      	ldr	r1, [pc, #112]	; (19210 <usb_isr+0x28c>)
   1919e:	7818      	ldrb	r0, [r3, #0]
   191a0:	4b1c      	ldr	r3, [pc, #112]	; (19214 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
   191a2:	9201      	str	r2, [sp, #4]
   191a4:	2800      	cmp	r0, #0
   191a6:	bf18      	it	ne
   191a8:	4619      	movne	r1, r3
   191aa:	481b      	ldr	r0, [pc, #108]	; (19218 <usb_isr+0x294>)
   191ac:	f7ff f98e 	bl	184cc <memcpy>
   191b0:	4d19      	ldr	r5, [pc, #100]	; (19218 <usb_isr+0x294>)
   191b2:	9a01      	ldr	r2, [sp, #4]
   191b4:	e1e1      	b.n	1957a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
   191b6:	f242 2121 	movw	r1, #8737	; 0x2221
   191ba:	428b      	cmp	r3, r1
   191bc:	d07c      	beq.n	192b8 <usb_isr+0x334>
   191be:	d933      	bls.n	19228 <usb_isr+0x2a4>
   191c0:	f242 3121 	movw	r1, #8993	; 0x2321
   191c4:	428b      	cmp	r3, r1
   191c6:	f000 8081 	beq.w	192cc <usb_isr+0x348>
   191ca:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
   191ce:	428b      	cmp	r3, r1
   191d0:	f47f af29 	bne.w	19026 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
   191d4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
   191d8:	b283      	uxth	r3, r0
   191da:	f47f af24 	bne.w	19026 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
   191de:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
   191e2:	f363 0c0f 	bfi	ip, r3, #0, #16
   191e6:	e7b5      	b.n	19154 <usb_isr+0x1d0>
   191e8:	402e0000 	.word	0x402e0000
   191ec:	20000000 	.word	0x20000000
   191f0:	20005be0 	.word	0x20005be0
   191f4:	20006a80 	.word	0x20006a80
   191f8:	20006a84 	.word	0x20006a84
   191fc:	20006ab8 	.word	0x20006ab8
   19200:	20006ab9 	.word	0x20006ab9
   19204:	20005bdc 	.word	0x20005bdc
   19208:	2000622c 	.word	0x2000622c
   1920c:	20003490 	.word	0x20003490
   19210:	60001e2c 	.word	0x60001e2c
   19214:	60001e90 	.word	0x60001e90
   19218:	20200000 	.word	0x20200000
   1921c:	20005bd4 	.word	0x20005bd4
   19220:	b8c6cf5d 	.word	0xb8c6cf5d
   19224:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
   19228:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   1922c:	d066      	beq.n	192fc <usb_isr+0x378>
   1922e:	f242 0121 	movw	r1, #8225	; 0x2021
   19232:	428b      	cmp	r3, r1
   19234:	f47f aef7 	bne.w	19026 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
   19238:	0c03      	lsrs	r3, r0, #16
   1923a:	2b07      	cmp	r3, #7
   1923c:	f47f aef3 	bne.w	19026 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
   19240:	4bb2      	ldr	r3, [pc, #712]	; (1950c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
   19242:	49b3      	ldr	r1, [pc, #716]	; (19510 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
   19244:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   19246:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
   19248:	49b2      	ldr	r1, [pc, #712]	; (19514 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   1924a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   1924c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
   19250:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
   19254:	2201      	movs	r2, #1
   19256:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   19258:	4aaf      	ldr	r2, [pc, #700]	; (19518 <usb_isr+0x594>)
   1925a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1925c:	4aaf      	ldr	r2, [pc, #700]	; (1951c <usb_isr+0x598>)
   1925e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
   19260:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   19264:	f041 0101 	orr.w	r1, r1, #1
   19268:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1926c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   19270:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   19274:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   19276:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
   19278:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1927c:	2b00      	cmp	r3, #0
   1927e:	d1fb      	bne.n	19278 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
   19280:	4aa7      	ldr	r2, [pc, #668]	; (19520 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   19282:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   19284:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
   19286:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19288:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1928a:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1928c:	f248 0380 	movw	r3, #32896	; 0x8080
   19290:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   19292:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19296:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1929a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1929e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   192a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   192a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   192aa:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
   192ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   192b2:	2b00      	cmp	r3, #0
   192b4:	d1fb      	bne.n	192ae <usb_isr+0x32a>
   192b6:	e6ba      	b.n	1902e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   192b8:	b280      	uxth	r0, r0
   192ba:	b938      	cbnz	r0, 192cc <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   192bc:	4b99      	ldr	r3, [pc, #612]	; (19524 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
   192be:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   192c2:	6819      	ldr	r1, [r3, #0]
   192c4:	4b98      	ldr	r3, [pc, #608]	; (19528 <usb_isr+0x5a4>)
   192c6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   192c8:	4b98      	ldr	r3, [pc, #608]	; (1952c <usb_isr+0x5a8>)
   192ca:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
   192cc:	4b94      	ldr	r3, [pc, #592]	; (19520 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
   192ce:	2200      	movs	r2, #0
   192d0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
   192d2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   192d4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   192d6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   192d8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   192da:	2280      	movs	r2, #128	; 0x80
   192dc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   192de:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   192e2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   192e6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   192ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   192ee:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   192f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   192f6:	2b00      	cmp	r3, #0
   192f8:	d1fb      	bne.n	192f2 <usb_isr+0x36e>
   192fa:	e698      	b.n	1902e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
   192fc:	f3c2 4207 	ubfx	r2, r2, #16, #8
   19300:	4b8b      	ldr	r3, [pc, #556]	; (19530 <usb_isr+0x5ac>)
   19302:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   19304:	4b8b      	ldr	r3, [pc, #556]	; (19534 <usb_isr+0x5b0>)
   19306:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   1930a:	4b8b      	ldr	r3, [pc, #556]	; (19538 <usb_isr+0x5b4>)
   1930c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   19310:	4b8a      	ldr	r3, [pc, #552]	; (1953c <usb_isr+0x5b8>)
   19312:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
   19316:	f000 fbd5 	bl	19ac4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
   1931a:	2280      	movs	r2, #128	; 0x80
   1931c:	4629      	mov	r1, r5
   1931e:	4888      	ldr	r0, [pc, #544]	; (19540 <usb_isr+0x5bc>)
   19320:	f005 ff66 	bl	1f1f0 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   19324:	4b87      	ldr	r3, [pc, #540]	; (19544 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19326:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   19328:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   1932c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
   19330:	4b7b      	ldr	r3, [pc, #492]	; (19520 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   19332:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19334:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
   19336:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19338:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
   1933a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1933c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1933e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19342:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19346:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1934a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1934e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   19352:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
   19356:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1935a:	2b00      	cmp	r3, #0
   1935c:	d1fb      	bne.n	19356 <usb_isr+0x3d2>
   1935e:	e666      	b.n	1902e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
   19360:	4b6f      	ldr	r3, [pc, #444]	; (19520 <usb_isr+0x59c>)
   19362:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
   19364:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   19366:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19368:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
   1936a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1936c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1936e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   19370:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19374:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19378:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1937c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19380:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   19384:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19388:	2b00      	cmp	r3, #0
   1938a:	d1fb      	bne.n	19384 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   1938c:	0c13      	lsrs	r3, r2, #16
   1938e:	065b      	lsls	r3, r3, #25
   19390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19394:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
   19398:	e649      	b.n	1902e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
   1939a:	4b65      	ldr	r3, [pc, #404]	; (19530 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
   1939c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
   1939e:	486a      	ldr	r0, [pc, #424]	; (19548 <usb_isr+0x5c4>)
   193a0:	781b      	ldrb	r3, [r3, #0]
   193a2:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   193a4:	f7ff fd8c 	bl	18ec0 <endpoint0_transmit.constprop.0>
		return;
   193a8:	e641      	b.n	1902e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   193aa:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
   193ac:	f010 0078 	ands.w	r0, r0, #120	; 0x78
   193b0:	f47f ae39 	bne.w	19026 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   193b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   193b8:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
   193bc:	4a62      	ldr	r2, [pc, #392]	; (19548 <usb_isr+0x5c4>)
   193be:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   193c0:	0618      	lsls	r0, r3, #24
   193c2:	f100 809e 	bmi.w	19502 <usb_isr+0x57e>
   193c6:	07cb      	lsls	r3, r1, #31
   193c8:	d501      	bpl.n	193ce <usb_isr+0x44a>
			reply_buffer[0] = 1;
   193ca:	2301      	movs	r3, #1
   193cc:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   193ce:	2102      	movs	r1, #2
   193d0:	485d      	ldr	r0, [pc, #372]	; (19548 <usb_isr+0x5c4>)
   193d2:	f7ff fd75 	bl	18ec0 <endpoint0_transmit.constprop.0>
		return;
   193d6:	e62a      	b.n	1902e <usb_isr+0xaa>
		if (endpoint > 7) break;
   193d8:	f010 0f78 	tst.w	r0, #120	; 0x78
   193dc:	b283      	uxth	r3, r0
   193de:	f47f ae22 	bne.w	19026 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   193e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   193e6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   193ea:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   193ee:	bf14      	ite	ne
   193f0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   193f4:	f043 0301 	orreq.w	r3, r3, #1
   193f8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   193fc:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   193fe:	4b48      	ldr	r3, [pc, #288]	; (19520 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   19400:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   19402:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   19404:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19406:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   19408:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1940a:	2280      	movs	r2, #128	; 0x80
   1940c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1940e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   19412:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19416:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1941a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1941e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   19422:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19426:	2b00      	cmp	r3, #0
   19428:	d1fb      	bne.n	19422 <usb_isr+0x49e>
   1942a:	e600      	b.n	1902e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   1942c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   19430:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   19434:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   19438:	bf14      	ite	ne
   1943a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   1943e:	f023 0301 	biceq.w	r3, r3, #1
   19442:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   19446:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   19448:	4b35      	ldr	r3, [pc, #212]	; (19520 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1944a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1944c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1944e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   19450:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   19452:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   19454:	2280      	movs	r2, #128	; 0x80
   19456:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   19458:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1945c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   19460:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19468:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1946c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   19470:	2b00      	cmp	r3, #0
   19472:	d1fb      	bne.n	1946c <usb_isr+0x4e8>
   19474:	e5db      	b.n	1902e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
   19476:	2000      	movs	r0, #0
   19478:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   1947a:	4926      	ldr	r1, [pc, #152]	; (19514 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   1947c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   1947e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   19480:	f242 0121 	movw	r1, #8225	; 0x2021
   19484:	428c      	cmp	r4, r1
   19486:	f47f ae25 	bne.w	190d4 <usb_isr+0x150>
   1948a:	b280      	uxth	r0, r0
   1948c:	2800      	cmp	r0, #0
   1948e:	f47f ae21 	bne.w	190d4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   19492:	492e      	ldr	r1, [pc, #184]	; (1954c <usb_isr+0x5c8>)
   19494:	4c2e      	ldr	r4, [pc, #184]	; (19550 <usb_isr+0x5cc>)
   19496:	c903      	ldmia	r1, {r0, r1}
   19498:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
   1949a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   1949c:	ea4f 4111 	mov.w	r1, r1, lsr #16
   194a0:	6020      	str	r0, [r4, #0]
   194a2:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
   194a4:	f47f ae16 	bne.w	190d4 <usb_isr+0x150>
	__disable_irq();
   194a8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   194aa:	482a      	ldr	r0, [pc, #168]	; (19554 <usb_isr+0x5d0>)
   194ac:	7801      	ldrb	r1, [r0, #0]
   194ae:	f041 0108 	orr.w	r1, r1, #8
   194b2:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   194b4:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   194b8:	060d      	lsls	r5, r1, #24
   194ba:	d405      	bmi.n	194c8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   194bc:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   194be:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   194c0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   194c4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
   194c8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   194ca:	4a23      	ldr	r2, [pc, #140]	; (19558 <usb_isr+0x5d4>)
   194cc:	2150      	movs	r1, #80	; 0x50
   194ce:	7011      	strb	r1, [r2, #0]
   194d0:	e600      	b.n	190d4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
   194d2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
   194d4:	782a      	ldrb	r2, [r5, #0]
   194d6:	4282      	cmp	r2, r0
   194d8:	bf28      	it	cs
   194da:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
   194dc:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   194e0:	d144      	bne.n	1956c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
   194e2:	4b1e      	ldr	r3, [pc, #120]	; (1955c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   194e4:	4d1e      	ldr	r5, [pc, #120]	; (19560 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
   194e6:	7818      	ldrb	r0, [r3, #0]
   194e8:	491e      	ldr	r1, [pc, #120]	; (19564 <usb_isr+0x5e0>)
   194ea:	4b1f      	ldr	r3, [pc, #124]	; (19568 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
   194ec:	9201      	str	r2, [sp, #4]
   194ee:	2800      	cmp	r0, #0
   194f0:	bf18      	it	ne
   194f2:	4619      	movne	r1, r3
   194f4:	4628      	mov	r0, r5
   194f6:	f7fe ffe9 	bl	184cc <memcpy>
					usb_descriptor_buffer[1] = 7;
   194fa:	2307      	movs	r3, #7
   194fc:	706b      	strb	r3, [r5, #1]
   194fe:	9a01      	ldr	r2, [sp, #4]
   19500:	e03b      	b.n	1957a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   19502:	03c9      	lsls	r1, r1, #15
   19504:	f53f af61 	bmi.w	193ca <usb_isr+0x446>
   19508:	e761      	b.n	193ce <usb_isr+0x44a>
   1950a:	bf00      	nop
   1950c:	20004f40 	.word	0x20004f40
   19510:	20006bd4 	.word	0x20006bd4
   19514:	20005268 	.word	0x20005268
   19518:	00070080 	.word	0x00070080
   1951c:	20007bd4 	.word	0x20007bd4
   19520:	20004f20 	.word	0x20004f20
   19524:	20006344 	.word	0x20006344
   19528:	20006a7c 	.word	0x20006a7c
   1952c:	20006ab6 	.word	0x20006ab6
   19530:	20006ab7 	.word	0x20006ab7
   19534:	00cc0002 	.word	0x00cc0002
   19538:	000200c8 	.word	0x000200c8
   1953c:	00c80002 	.word	0x00c80002
   19540:	20000080 	.word	0x20000080
   19544:	74d59319 	.word	0x74d59319
   19548:	2000622c 	.word	0x2000622c
   1954c:	20005bd4 	.word	0x20005bd4
   19550:	20006a74 	.word	0x20006a74
   19554:	20006ab2 	.word	0x20006ab2
   19558:	20006ab9 	.word	0x20006ab9
   1955c:	20006ab8 	.word	0x20006ab8
   19560:	20200000 	.word	0x20200000
   19564:	60001e90 	.word	0x60001e90
   19568:	60001e2c 	.word	0x60001e2c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   1956c:	4629      	mov	r1, r5
   1956e:	4d10      	ldr	r5, [pc, #64]	; (195b0 <usb_isr+0x62c>)
   19570:	9201      	str	r2, [sp, #4]
   19572:	4628      	mov	r0, r5
   19574:	f7fe ffaa 	bl	184cc <memcpy>
   19578:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1957a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1957e:	4415      	add	r5, r2
	asm("dsb");
   19580:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   19584:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19588:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
   1958c:	3320      	adds	r3, #32
	} while (location < end_addr);
   1958e:	429d      	cmp	r5, r3
   19590:	d8fa      	bhi.n	19588 <usb_isr+0x604>
	asm("dsb");
   19592:	f3bf 8f4f 	dsb	sy
	asm("isb");
   19596:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   1959a:	4805      	ldr	r0, [pc, #20]	; (195b0 <usb_isr+0x62c>)
   1959c:	4611      	mov	r1, r2
   1959e:	f7ff fc8f 	bl	18ec0 <endpoint0_transmit.constprop.0>
				return;
   195a2:	e544      	b.n	1902e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   195a4:	2003      	movs	r0, #3
   195a6:	f7ff fcd7 	bl	18f58 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   195aa:	f00c fc69 	bl	25e80 <___reboot_Teensyduino__veneer>
   195ae:	bf00      	nop
   195b0:	20200000 	.word	0x20200000

000195b4 <usb_config_rx>:
{
   195b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   195b8:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   195ba:	1e83      	subs	r3, r0, #2
   195bc:	2b02      	cmp	r3, #2
   195be:	d901      	bls.n	195c4 <usb_config_rx+0x10>
}
   195c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   195c4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 19614 <usb_config_rx+0x60>
   195c8:	4615      	mov	r5, r2
   195ca:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
   195cc:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   195ce:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   195d2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   195d4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   195d8:	2100      	movs	r1, #0
   195da:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   195de:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
   195e0:	f005 fe06 	bl	1f1f0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   195e4:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
   195e8:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   195ea:	0952      	lsrs	r2, r2, #5
   195ec:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
   195f0:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
   195f4:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   195f8:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
   195fc:	2f00      	cmp	r7, #0
   195fe:	d0df      	beq.n	195c0 <usb_config_rx+0xc>
   19600:	4a03      	ldr	r2, [pc, #12]	; (19610 <usb_config_rx+0x5c>)
   19602:	40b3      	lsls	r3, r6
   19604:	6811      	ldr	r1, [r2, #0]
   19606:	430b      	orrs	r3, r1
   19608:	6013      	str	r3, [r2, #0]
}
   1960a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1960e:	bf00      	nop
   19610:	20005be0 	.word	0x20005be0
   19614:	20000000 	.word	0x20000000

00019618 <usb_config_tx>:
{
   19618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1961c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   1961e:	1e81      	subs	r1, r0, #2
   19620:	2902      	cmp	r1, #2
   19622:	d901      	bls.n	19628 <usb_config_tx+0x10>
}
   19624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   19628:	01c7      	lsls	r7, r0, #7
   1962a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 19678 <usb_config_tx+0x60>
   1962e:	4692      	mov	sl, r2
   19630:	4604      	mov	r4, r0
   19632:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
   19634:	223c      	movs	r2, #60	; 0x3c
   19636:	2100      	movs	r1, #0
   19638:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1963a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1963e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
   19640:	f108 0004 	add.w	r0, r8, #4
   19644:	f005 fdd4 	bl	1f1f0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   19648:	faba f28a 	clz	r2, sl
   1964c:	0952      	lsrs	r2, r2, #5
   1964e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
   19652:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
   19656:	2201      	movs	r2, #1
	qh->callback_function = callback;
   19658:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   1965c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   19660:	2e00      	cmp	r6, #0
   19662:	d0df      	beq.n	19624 <usb_config_tx+0xc>
   19664:	4b03      	ldr	r3, [pc, #12]	; (19674 <usb_config_tx+0x5c>)
   19666:	3410      	adds	r4, #16
   19668:	6819      	ldr	r1, [r3, #0]
   1966a:	40a2      	lsls	r2, r4
   1966c:	430a      	orrs	r2, r1
   1966e:	601a      	str	r2, [r3, #0]
}
   19670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19674:	20005be0 	.word	0x20005be0
   19678:	20000000 	.word	0x20000000

0001967c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
   1967c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
   1967e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
   19680:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
   19682:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
   19686:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
   1968a:	b410      	push	{r4}
	transfer->next = 1;
   1968c:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
   1968e:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
   19690:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
   19694:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
   19696:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
   1969a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
   1969e:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
   196a0:	6181      	str	r1, [r0, #24]
}
   196a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
   196a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
   196aa:	4770      	bx	lr

000196ac <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   196ac:	1e83      	subs	r3, r0, #2
{
   196ae:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   196b0:	2b02      	cmp	r3, #2
   196b2:	d900      	bls.n	196b6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   196b4:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   196b6:	4b06      	ldr	r3, [pc, #24]	; (196d0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
   196b8:	f100 0110 	add.w	r1, r0, #16
   196bc:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   196c0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   196c4:	fa0c f101 	lsl.w	r1, ip, r1
   196c8:	3040      	adds	r0, #64	; 0x40
   196ca:	f7ff bb99 	b.w	18e00 <schedule_transfer>
   196ce:	bf00      	nop
   196d0:	20000000 	.word	0x20000000

000196d4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   196d4:	1e83      	subs	r3, r0, #2
{
   196d6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   196d8:	2b02      	cmp	r3, #2
   196da:	d900      	bls.n	196de <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   196dc:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
   196de:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
   196e0:	4b02      	ldr	r3, [pc, #8]	; (196ec <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
   196e2:	4081      	lsls	r1, r0
   196e4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   196e8:	f7ff bb8a 	b.w	18e00 <schedule_transfer>
   196ec:	20000000 	.word	0x20000000

000196f0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   196f0:	6840      	ldr	r0, [r0, #4]
#endif
}
   196f2:	4770      	bx	lr

000196f4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   196f4:	4a12      	ldr	r2, [pc, #72]	; (19740 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   196f6:	4b13      	ldr	r3, [pc, #76]	; (19744 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   196f8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
   196fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
   19700:	4298      	cmp	r0, r3
{
   19702:	b510      	push	{r4, lr}
   19704:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
   19706:	d202      	bcs.n	1970e <usb_init_serialnumber+0x1a>
   19708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1970c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   1970e:	4c0e      	ldr	r4, [pc, #56]	; (19748 <usb_init_serialnumber+0x54>)
   19710:	a901      	add	r1, sp, #4
   19712:	220a      	movs	r2, #10
   19714:	f7fe ff7a 	bl	1860c <ultoa>
	for (i=0; i<10; i++) {
   19718:	a901      	add	r1, sp, #4
   1971a:	2300      	movs	r3, #0
   1971c:	4620      	mov	r0, r4
		char c = buf[i];
   1971e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   19722:	3301      	adds	r3, #1
		if (!c) break;
   19724:	b13a      	cbz	r2, 19736 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
   19726:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   19728:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   1972c:	d1f7      	bne.n	1971e <usb_init_serialnumber+0x2a>
   1972e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   19730:	7023      	strb	r3, [r4, #0]
}
   19732:	b004      	add	sp, #16
   19734:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   19736:	005b      	lsls	r3, r3, #1
   19738:	b2db      	uxtb	r3, r3
   1973a:	7023      	strb	r3, [r4, #0]
}
   1973c:	b004      	add	sp, #16
   1973e:	bd10      	pop	{r4, pc}
   19740:	401f4400 	.word	0x401f4400
   19744:	00989680 	.word	0x00989680
   19748:	2000488c 	.word	0x2000488c

0001974c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   1974c:	f000 bad8 	b.w	19d00 <usb_serial_flush_input>

00019750 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   19750:	f000 baa8 	b.w	19ca4 <usb_serial_peekchar>

00019754 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   19754:	f000 bb66 	b.w	19e24 <usb_serial_flush_output>

00019758 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   19758:	f000 bb3c 	b.w	19dd4 <usb_serial_write_buffer_free>

0001975c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   1975c:	4608      	mov	r0, r1
   1975e:	4611      	mov	r1, r2
   19760:	f000 bb2c 	b.w	19dbc <usb_serial_write>

00019764 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   19764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   19766:	4c14      	ldr	r4, [pc, #80]	; (197b8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19768:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   1976c:	4e13      	ldr	r6, [pc, #76]	; (197bc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1976e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   19772:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   19776:	4f12      	ldr	r7, [pc, #72]	; (197c0 <rx_queue_transfer+0x5c>)
   19778:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   1977c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1977e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   19782:	4621      	mov	r1, r4
   19784:	883a      	ldrh	r2, [r7, #0]
   19786:	4630      	mov	r0, r6
   19788:	f7ff ff78 	bl	1967c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   1978c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   1978e:	4423      	add	r3, r4
	asm("dsb");
   19790:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   19794:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   19798:	3420      	adds	r4, #32
	} while (location < end_addr);
   1979a:	42a3      	cmp	r3, r4
   1979c:	d8fa      	bhi.n	19794 <rx_queue_transfer+0x30>
	asm("dsb");
   1979e:	f3bf 8f4f 	dsb	sy
	asm("isb");
   197a2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   197a6:	2003      	movs	r0, #3
   197a8:	4631      	mov	r1, r6
   197aa:	f7ff ff93 	bl	196d4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   197ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   197b2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   197b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197b8:	20200080 	.word	0x20200080
   197bc:	20004f60 	.word	0x20004f60
   197c0:	20006a96 	.word	0x20006a96

000197c4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   197c4:	4b24      	ldr	r3, [pc, #144]	; (19858 <rx_event+0x94>)
{
   197c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   197ca:	881c      	ldrh	r4, [r3, #0]
   197cc:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
   197ce:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   197d0:	f3c3 430e 	ubfx	r3, r3, #16, #15
   197d4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   197d6:	2c00      	cmp	r4, #0
   197d8:	dd24      	ble.n	19824 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
   197da:	4920      	ldr	r1, [pc, #128]	; (1985c <rx_event+0x98>)
		if (head != rx_tail) {
   197dc:	4820      	ldr	r0, [pc, #128]	; (19860 <rx_event+0x9c>)
		uint32_t head = rx_head;
   197de:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
   197e0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
   197e2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
   197e4:	4e1f      	ldr	r6, [pc, #124]	; (19864 <rx_event+0xa0>)
		if (head != rx_tail) {
   197e6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
   197e8:	481f      	ldr	r0, [pc, #124]	; (19868 <rx_event+0xa4>)
		if (head != rx_tail) {
   197ea:	d007      	beq.n	197fc <rx_event+0x38>
			uint32_t ii = rx_list[head];
   197ec:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
   197f0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   197f4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
   197f8:	4294      	cmp	r4, r2
   197fa:	d918      	bls.n	1982e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   197fc:	3301      	adds	r3, #1
		rx_index[i] = 0;
   197fe:	2200      	movs	r2, #0
		rx_count[i] = len;
   19800:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   19804:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
   19806:	4e19      	ldr	r6, [pc, #100]	; (1986c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
   19808:	bf88      	it	hi
   1980a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
   1980c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
   19810:	bf98      	it	ls
   19812:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
   19814:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
   19816:	4b16      	ldr	r3, [pc, #88]	; (19870 <rx_event+0xac>)
		rx_head = head;
   19818:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   1981a:	681a      	ldr	r2, [r3, #0]
   1981c:	4414      	add	r4, r2
   1981e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   19820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
   19824:	4628      	mov	r0, r5
}
   19826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
   1982a:	f7ff bf9b 	b.w	19764 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   1982e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
   19832:	4910      	ldr	r1, [pc, #64]	; (19874 <rx_event+0xb0>)
   19834:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
   19836:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   19838:	4408      	add	r0, r1
   1983a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
   1983e:	f7fe fe45 	bl	184cc <memcpy>
				rx_available += len;
   19842:	4a0b      	ldr	r2, [pc, #44]	; (19870 <rx_event+0xac>)
				rx_queue_transfer(i);
   19844:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
   19846:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
   1984a:	6813      	ldr	r3, [r2, #0]
   1984c:	4423      	add	r3, r4
}
   1984e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
   19852:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   19854:	f7ff bf86 	b.w	19764 <rx_queue_transfer>
   19858:	20006a96 	.word	0x20006a96
   1985c:	20006ab0 	.word	0x20006ab0
   19860:	20006ab1 	.word	0x20006ab1
   19864:	20006238 	.word	0x20006238
   19868:	20006258 	.word	0x20006258
   1986c:	20006248 	.word	0x20006248
   19870:	20006234 	.word	0x20006234
   19874:	20200080 	.word	0x20200080

00019878 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   19878:	4b1d      	ldr	r3, [pc, #116]	; (198f0 <usb_serial_flush_callback+0x78>)
   1987a:	781a      	ldrb	r2, [r3, #0]
   1987c:	2a00      	cmp	r2, #0
   1987e:	d136      	bne.n	198ee <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
   19880:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   19884:	4a1b      	ldr	r2, [pc, #108]	; (198f4 <usb_serial_flush_callback+0x7c>)
   19886:	7812      	ldrb	r2, [r2, #0]
   19888:	b38a      	cbz	r2, 198ee <usb_serial_flush_callback+0x76>
{
   1988a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
   1988e:	4d1a      	ldr	r5, [pc, #104]	; (198f8 <usb_serial_flush_callback+0x80>)
   19890:	882a      	ldrh	r2, [r5, #0]
   19892:	b352      	cbz	r2, 198ea <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
   19894:	4e19      	ldr	r6, [pc, #100]	; (198fc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
   19896:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   1989a:	4f19      	ldr	r7, [pc, #100]	; (19900 <usb_serial_flush_callback+0x88>)
   1989c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1989e:	4c19      	ldr	r4, [pc, #100]	; (19904 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   198a0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   198a4:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   198a8:	4642      	mov	r2, r8
   198aa:	4638      	mov	r0, r7
   198ac:	4621      	mov	r1, r4
   198ae:	f7ff fee5 	bl	1967c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   198b2:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
   198b6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   198ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   198be:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   198c2:	3420      	adds	r4, #32
	} while (location < end_addr);
   198c4:	42a2      	cmp	r2, r4
   198c6:	d8fa      	bhi.n	198be <usb_serial_flush_callback+0x46>
	asm("dsb");
   198c8:	f3bf 8f4f 	dsb	sy
	asm("isb");
   198cc:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   198d0:	2004      	movs	r0, #4
   198d2:	4639      	mov	r1, r7
   198d4:	f7ff feea 	bl	196ac <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   198d8:	7833      	ldrb	r3, [r6, #0]
   198da:	3301      	adds	r3, #1
   198dc:	b2db      	uxtb	r3, r3
   198de:	2b03      	cmp	r3, #3
   198e0:	bf88      	it	hi
   198e2:	2300      	movhi	r3, #0
   198e4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   198e6:	2300      	movs	r3, #0
   198e8:	802b      	strh	r3, [r5, #0]
}
   198ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198ee:	4770      	bx	lr
   198f0:	20006ab5 	.word	0x20006ab5
   198f4:	20006ab7 	.word	0x20006ab7
   198f8:	20006a98 	.word	0x20006a98
   198fc:	20006ab4 	.word	0x20006ab4
   19900:	20005060 	.word	0x20005060
   19904:	20201080 	.word	0x20201080

00019908 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
   19908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1990c:	b085      	sub	sp, #20
	while (size > 0) {
   1990e:	e9cd 1001 	strd	r1, r0, [sp, #4]
   19912:	2900      	cmp	r1, #0
   19914:	f000 80bf 	beq.w	19a96 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
   19918:	2300      	movs	r3, #0
   1991a:	4c60      	ldr	r4, [pc, #384]	; (19a9c <usb_serial_write.part.0+0x194>)
   1991c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 19ab8 <usb_serial_write.part.0+0x1b0>
   19920:	f8df a198 	ldr.w	sl, [pc, #408]	; 19abc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
   19924:	4f5e      	ldr	r7, [pc, #376]	; (19aa0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
   19926:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
   19928:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
   1992a:	4a5e      	ldr	r2, [pc, #376]	; (19aa4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
   1992c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   1992e:	4b5e      	ldr	r3, [pc, #376]	; (19aa8 <usb_serial_write.part.0+0x1a0>)
   19930:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
   19932:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
   19936:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
   1993a:	2b00      	cmp	r3, #0
   1993c:	f040 80a7 	bne.w	19a8e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
   19940:	461e      	mov	r6, r3
		int waiting=0;
   19942:	461d      	mov	r5, r3
			tx_noautoflush = 0;
   19944:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
   19946:	4648      	mov	r0, r9
   19948:	f7ff fed2 	bl	196f0 <usb_transfer_status>
			if (!(status & 0x80)) {
   1994c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   19950:	f000 808c 	beq.w	19a6c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
   19954:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
   19958:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
   1995c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
   19960:	b905      	cbnz	r5, 19964 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
   19962:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
   19964:	2b00      	cmp	r3, #0
   19966:	d17d      	bne.n	19a64 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   19968:	683b      	ldr	r3, [r7, #0]
   1996a:	1b9b      	subs	r3, r3, r6
   1996c:	2b78      	cmp	r3, #120	; 0x78
   1996e:	f200 8087 	bhi.w	19a80 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
   19972:	4b4e      	ldr	r3, [pc, #312]	; (19aac <usb_serial_write.part.0+0x1a4>)
   19974:	781b      	ldrb	r3, [r3, #0]
   19976:	2b00      	cmp	r3, #0
   19978:	d074      	beq.n	19a64 <usb_serial_write.part.0+0x15c>
			yield();
   1997a:	f000 fa9d 	bl	19eb8 <yield>
			tx_noautoflush = 1;
   1997e:	2201      	movs	r2, #1
		while (!tx_available) {
   19980:	f8b8 3000 	ldrh.w	r3, [r8]
   19984:	4615      	mov	r5, r2
			tx_noautoflush = 1;
   19986:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
   19988:	2b00      	cmp	r3, #0
   1998a:	d0dc      	beq.n	19946 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1998c:	4a46      	ldr	r2, [pc, #280]	; (19aa8 <usb_serial_write.part.0+0x1a0>)
   1998e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   19992:	7811      	ldrb	r1, [r2, #0]
   19994:	461a      	mov	r2, r3
   19996:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
   1999a:	4d45      	ldr	r5, [pc, #276]	; (19ab0 <usb_serial_write.part.0+0x1a8>)
   1999c:	02c9      	lsls	r1, r1, #11
   1999e:	4428      	add	r0, r5
		if (size >= tx_available) {
   199a0:	9d01      	ldr	r5, [sp, #4]
   199a2:	4295      	cmp	r5, r2
   199a4:	d217      	bcs.n	199d6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
   199a6:	9303      	str	r3, [sp, #12]
   199a8:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   199ac:	462a      	mov	r2, r5
   199ae:	f7fe fd8d 	bl	184cc <memcpy>
			tx_available -= size;
   199b2:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   199b4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
   199b8:	1b5b      	subs	r3, r3, r5
   199ba:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   199be:	4b3d      	ldr	r3, [pc, #244]	; (19ab4 <usb_serial_write.part.0+0x1ac>)
   199c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
   199c4:	f3bf 8f4f 	dsb	sy
			sent += size;
   199c8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
   199ca:	2300      	movs	r3, #0
			sent += size;
   199cc:	4428      	add	r0, r5
		tx_noautoflush = 0;
   199ce:	7023      	strb	r3, [r4, #0]
}
   199d0:	b005      	add	sp, #20
   199d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   199d6:	4b36      	ldr	r3, [pc, #216]	; (19ab0 <usb_serial_write.part.0+0x1a8>)
   199d8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
   199da:	9902      	ldr	r1, [sp, #8]
   199dc:	f7fe fd76 	bl	184cc <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   199e0:	2300      	movs	r3, #0
   199e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   199e6:	4629      	mov	r1, r5
   199e8:	4648      	mov	r0, r9
   199ea:	f7ff fe47 	bl	1967c <usb_prepare_transfer>
	asm("dsb");
   199ee:	f3bf 8f4f 	dsb	sy
   199f2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   199f6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
   199fa:	4293      	cmp	r3, r2
   199fc:	bf34      	ite	cc
   199fe:	2301      	movcc	r3, #1
   19a00:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
   19a02:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   19a06:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   19a0a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
   19a0e:	3520      	adds	r5, #32
	} while (location < end_addr);
   19a10:	42ab      	cmp	r3, r5
   19a12:	d1fa      	bne.n	19a0a <usb_serial_write.part.0+0x102>
	asm("dsb");
   19a14:	f3bf 8f4f 	dsb	sy
	asm("isb");
   19a18:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   19a1c:	2004      	movs	r0, #4
   19a1e:	4649      	mov	r1, r9
   19a20:	f7ff fe44 	bl	196ac <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   19a24:	4a20      	ldr	r2, [pc, #128]	; (19aa8 <usb_serial_write.part.0+0x1a0>)
   19a26:	7813      	ldrb	r3, [r2, #0]
   19a28:	3301      	adds	r3, #1
   19a2a:	b2db      	uxtb	r3, r3
   19a2c:	2b03      	cmp	r3, #3
   19a2e:	bf84      	itt	hi
   19a30:	2300      	movhi	r3, #0
   19a32:	4a1d      	ldrhi	r2, [pc, #116]	; (19aa8 <usb_serial_write.part.0+0x1a0>)
   19a34:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   19a36:	f8b8 3000 	ldrh.w	r3, [r8]
   19a3a:	9a01      	ldr	r2, [sp, #4]
   19a3c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
   19a3e:	9a00      	ldr	r2, [sp, #0]
   19a40:	441a      	add	r2, r3
			size -= tx_available;
   19a42:	9101      	str	r1, [sp, #4]
			sent += tx_available;
   19a44:	9200      	str	r2, [sp, #0]
			data += tx_available;
   19a46:	9a02      	ldr	r2, [sp, #8]
   19a48:	441a      	add	r2, r3
			tx_available = 0;
   19a4a:	2300      	movs	r3, #0
			data += tx_available;
   19a4c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
   19a4e:	4a19      	ldr	r2, [pc, #100]	; (19ab4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
   19a50:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
   19a54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
   19a58:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   19a5c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   19a5e:	2900      	cmp	r1, #0
   19a60:	f47f af62 	bne.w	19928 <usb_serial_write.part.0+0x20>
	return sent;
   19a64:	9800      	ldr	r0, [sp, #0]
}
   19a66:	b005      	add	sp, #20
   19a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
   19a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19a70:	4b0d      	ldr	r3, [pc, #52]	; (19aa8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
   19a72:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19a76:	7819      	ldrb	r1, [r3, #0]
				break;
   19a78:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
   19a7a:	f8a8 2000 	strh.w	r2, [r8]
				break;
   19a7e:	e78a      	b.n	19996 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
   19a80:	2301      	movs	r3, #1
				return sent;
   19a82:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
   19a84:	f88a 3000 	strb.w	r3, [sl]
}
   19a88:	b005      	add	sp, #20
   19a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   19a8e:	461a      	mov	r2, r3
   19a90:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   19a94:	e77f      	b.n	19996 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
   19a96:	9801      	ldr	r0, [sp, #4]
	return sent;
   19a98:	e7e5      	b.n	19a66 <usb_serial_write.part.0+0x15e>
   19a9a:	bf00      	nop
   19a9c:	20006ab5 	.word	0x20006ab5
   19aa0:	20006344 	.word	0x20006344
   19aa4:	20005060 	.word	0x20005060
   19aa8:	20006ab4 	.word	0x20006ab4
   19aac:	20006ab7 	.word	0x20006ab7
   19ab0:	20201080 	.word	0x20201080
   19ab4:	402e0000 	.word	0x402e0000
   19ab8:	20006a98 	.word	0x20006a98
   19abc:	20006ab3 	.word	0x20006ab3

00019ac0 <usb_serial_reset>:
}
   19ac0:	4770      	bx	lr
   19ac2:	bf00      	nop

00019ac4 <usb_serial_configure>:
	if (usb_high_speed) {
   19ac4:	4b2d      	ldr	r3, [pc, #180]	; (19b7c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   19ac6:	2100      	movs	r1, #0
   19ac8:	2280      	movs	r2, #128	; 0x80
   19aca:	482d      	ldr	r0, [pc, #180]	; (19b80 <usb_serial_configure+0xbc>)
{
   19acc:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   19ace:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
   19ad0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
   19ad2:	4d2c      	ldr	r5, [pc, #176]	; (19b84 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
   19ad4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
   19ad6:	4e2c      	ldr	r6, [pc, #176]	; (19b88 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
   19ad8:	bf0c      	ite	eq
   19ada:	2340      	moveq	r3, #64	; 0x40
   19adc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   19ae0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   19ae2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   19ae4:	f005 fb84 	bl	1f1f0 <memset>
	tx_head = 0;
   19ae8:	4a28      	ldr	r2, [pc, #160]	; (19b8c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   19aea:	4621      	mov	r1, r4
	tx_available = 0;
   19aec:	4b28      	ldr	r3, [pc, #160]	; (19b90 <usb_serial_configure+0xcc>)
	tx_head = 0;
   19aee:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   19af0:	f44f 7280 	mov.w	r2, #256	; 0x100
   19af4:	4827      	ldr	r0, [pc, #156]	; (19b94 <usb_serial_configure+0xd0>)
	tx_available = 0;
   19af6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   19af8:	f005 fb7a 	bl	1f1f0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   19afc:	4a26      	ldr	r2, [pc, #152]	; (19b98 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19afe:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
   19b00:	4b26      	ldr	r3, [pc, #152]	; (19b9c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19b02:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
   19b04:	e9c2 4400 	strd	r4, r4, [r2]
   19b08:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
   19b0c:	4a24      	ldr	r2, [pc, #144]	; (19ba0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
   19b0e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   19b12:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
   19b14:	4a23      	ldr	r2, [pc, #140]	; (19ba4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
   19b16:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
   19b1a:	4b23      	ldr	r3, [pc, #140]	; (19ba8 <usb_serial_configure+0xe4>)
   19b1c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19b1e:	4623      	mov	r3, r4
	rx_available = 0;
   19b20:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   19b22:	4622      	mov	r2, r4
   19b24:	f7ff fd78 	bl	19618 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   19b28:	4622      	mov	r2, r4
   19b2a:	8831      	ldrh	r1, [r6, #0]
   19b2c:	2003      	movs	r0, #3
   19b2e:	4b1f      	ldr	r3, [pc, #124]	; (19bac <usb_serial_configure+0xe8>)
   19b30:	f7ff fd40 	bl	195b4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   19b34:	4623      	mov	r3, r4
   19b36:	2201      	movs	r2, #1
   19b38:	8829      	ldrh	r1, [r5, #0]
   19b3a:	2004      	movs	r0, #4
   19b3c:	f7ff fd6c 	bl	19618 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   19b40:	4620      	mov	r0, r4
   19b42:	3401      	adds	r4, #1
   19b44:	f7ff fe0e 	bl	19764 <rx_queue_transfer>
   19b48:	2c08      	cmp	r4, #8
   19b4a:	d1f9      	bne.n	19b40 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
   19b4c:	4b18      	ldr	r3, [pc, #96]	; (19bb0 <usb_serial_configure+0xec>)
   19b4e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
   19b50:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
   19b52:	4818      	ldr	r0, [pc, #96]	; (19bb4 <usb_serial_configure+0xf0>)
   19b54:	4c18      	ldr	r4, [pc, #96]	; (19bb8 <usb_serial_configure+0xf4>)
   19b56:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   19b58:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   19b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   19b60:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   19b64:	4915      	ldr	r1, [pc, #84]	; (19bbc <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
   19b66:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   19b6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   19b6e:	b121      	cbz	r1, 19b7a <usb_serial_configure+0xb6>
   19b70:	4a13      	ldr	r2, [pc, #76]	; (19bc0 <usb_serial_configure+0xfc>)
   19b72:	7813      	ldrb	r3, [r2, #0]
   19b74:	f043 0301 	orr.w	r3, r3, #1
   19b78:	7013      	strb	r3, [r2, #0]
}
   19b7a:	bd70      	pop	{r4, r5, r6, pc}
   19b7c:	20006ab8 	.word	0x20006ab8
   19b80:	20005060 	.word	0x20005060
   19b84:	20006a9a 	.word	0x20006a9a
   19b88:	20006a96 	.word	0x20006a96
   19b8c:	20006ab4 	.word	0x20006ab4
   19b90:	20006a98 	.word	0x20006a98
   19b94:	20004f60 	.word	0x20004f60
   19b98:	20006238 	.word	0x20006238
   19b9c:	20006248 	.word	0x20006248
   19ba0:	20006ab0 	.word	0x20006ab0
   19ba4:	20006234 	.word	0x20006234
   19ba8:	20006ab1 	.word	0x20006ab1
   19bac:	000197c5 	.word	0x000197c5
   19bb0:	402e0000 	.word	0x402e0000
   19bb4:	20006a80 	.word	0x20006a80
   19bb8:	00019879 	.word	0x00019879
   19bbc:	00000000 	.word	0x00000000
   19bc0:	20006abb 	.word	0x20006abb

00019bc4 <usb_serial_read>:
{
   19bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19bc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
   19bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 19c9c <usb_serial_read+0xd8>
{
   19bd4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
   19bd6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
   19bda:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
   19bdc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
   19be0:	2900      	cmp	r1, #0
   19be2:	d04f      	beq.n	19c84 <usb_serial_read+0xc0>
   19be4:	4680      	mov	r8, r0
   19be6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   19be8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
   19bea:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19ca0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
   19bee:	4b26      	ldr	r3, [pc, #152]	; (19c88 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
   19bf0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19bf4:	4925      	ldr	r1, [pc, #148]	; (19c8c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
   19bf6:	781b      	ldrb	r3, [r3, #0]
   19bf8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
   19bfa:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
   19bfe:	d03f      	beq.n	19c80 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
   19c00:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
   19c02:	4b23      	ldr	r3, [pc, #140]	; (19c90 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19c04:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
   19c06:	bf28      	it	cs
   19c08:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   19c0a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
   19c0c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19c10:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
   19c14:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
   19c16:	4b1f      	ldr	r3, [pc, #124]	; (19c94 <usb_serial_read+0xd0>)
   19c18:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   19c1c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
   19c20:	42aa      	cmp	r2, r5
   19c22:	d21c      	bcs.n	19c5e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   19c24:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
   19c28:	4918      	ldr	r1, [pc, #96]	; (19c8c <usb_serial_read+0xc8>)
			rx_available -= len;
   19c2a:	4c1b      	ldr	r4, [pc, #108]	; (19c98 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   19c2c:	4461      	add	r1, ip
   19c2e:	9201      	str	r2, [sp, #4]
   19c30:	f7fe fc4c 	bl	184cc <memcpy>
			rx_available -= len;
   19c34:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
   19c36:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
   19c3a:	4658      	mov	r0, fp
			rx_index[i] += len;
   19c3c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
   19c3e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
   19c42:	442a      	add	r2, r5
			rx_available -= len;
   19c44:	4439      	add	r1, r7
			rx_index[i] += len;
   19c46:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
   19c4a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   19c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19c54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   19c58:	b003      	add	sp, #12
   19c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19c5e:	462a      	mov	r2, r5
			count += avail;
   19c60:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   19c62:	f7fe fc33 	bl	184cc <memcpy>
			rx_available -= avail;
   19c66:	490c      	ldr	r1, [pc, #48]	; (19c98 <usb_serial_read+0xd4>)
			rx_tail = tail;
   19c68:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
   19c6a:	4630      	mov	r0, r6
			rx_available -= avail;
   19c6c:	680a      	ldr	r2, [r1, #0]
			p += avail;
   19c6e:	44a8      	add	r8, r5
			rx_available -= avail;
   19c70:	1b52      	subs	r2, r2, r5
   19c72:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
   19c74:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
   19c78:	f7ff fd74 	bl	19764 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   19c7c:	45bb      	cmp	fp, r7
   19c7e:	d8b6      	bhi.n	19bee <usb_serial_read+0x2a>
	return count;
   19c80:	4638      	mov	r0, r7
   19c82:	e7e3      	b.n	19c4c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
   19c84:	4608      	mov	r0, r1
   19c86:	e7e1      	b.n	19c4c <usb_serial_read+0x88>
   19c88:	20006ab0 	.word	0x20006ab0
   19c8c:	20200080 	.word	0x20200080
   19c90:	20006258 	.word	0x20006258
   19c94:	20006238 	.word	0x20006238
   19c98:	20006234 	.word	0x20006234
   19c9c:	20006ab1 	.word	0x20006ab1
   19ca0:	20006248 	.word	0x20006248

00019ca4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
   19ca4:	4b0b      	ldr	r3, [pc, #44]	; (19cd4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
   19ca6:	4a0c      	ldr	r2, [pc, #48]	; (19cd8 <usb_serial_peekchar+0x34>)
   19ca8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   19caa:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   19cac:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   19cae:	428a      	cmp	r2, r1
   19cb0:	d00d      	beq.n	19cce <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   19cb2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   19cb4:	4809      	ldr	r0, [pc, #36]	; (19cdc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   19cb6:	4a0a      	ldr	r2, [pc, #40]	; (19ce0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   19cb8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   19cba:	490a      	ldr	r1, [pc, #40]	; (19ce4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   19cbc:	bf28      	it	cs
   19cbe:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   19cc0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   19cc2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   19cc6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   19cca:	5c58      	ldrb	r0, [r3, r1]
   19ccc:	4770      	bx	lr
	if (tail == rx_head) return -1;
   19cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19cd2:	4770      	bx	lr
   19cd4:	20006ab0 	.word	0x20006ab0
   19cd8:	20006ab1 	.word	0x20006ab1
   19cdc:	20006258 	.word	0x20006258
   19ce0:	20200080 	.word	0x20200080
   19ce4:	20006248 	.word	0x20006248

00019ce8 <usb_serial_available>:
	uint32_t n = rx_available;
   19ce8:	4b04      	ldr	r3, [pc, #16]	; (19cfc <usb_serial_available+0x14>)
{
   19cea:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   19cec:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   19cee:	b10c      	cbz	r4, 19cf4 <usb_serial_available+0xc>
}
   19cf0:	4620      	mov	r0, r4
   19cf2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   19cf4:	f000 f8e0 	bl	19eb8 <yield>
}
   19cf8:	4620      	mov	r0, r4
   19cfa:	bd10      	pop	{r4, pc}
   19cfc:	20006234 	.word	0x20006234

00019d00 <usb_serial_flush_input>:
{
   19d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   19d04:	4e14      	ldr	r6, [pc, #80]	; (19d58 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   19d06:	4d15      	ldr	r5, [pc, #84]	; (19d5c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   19d08:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   19d0a:	782a      	ldrb	r2, [r5, #0]
   19d0c:	4293      	cmp	r3, r2
   19d0e:	d021      	beq.n	19d54 <usb_serial_flush_input+0x54>
   19d10:	b2dc      	uxtb	r4, r3
   19d12:	f8df 9050 	ldr.w	r9, [pc, #80]	; 19d64 <usb_serial_flush_input+0x64>
   19d16:	f8df b050 	ldr.w	fp, [pc, #80]	; 19d68 <usb_serial_flush_input+0x68>
   19d1a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 19d6c <usb_serial_flush_input+0x6c>
   19d1e:	4f10      	ldr	r7, [pc, #64]	; (19d60 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   19d20:	3401      	adds	r4, #1
   19d22:	2c08      	cmp	r4, #8
		rx_tail = tail;
   19d24:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   19d28:	d901      	bls.n	19d2e <usb_serial_flush_input+0x2e>
   19d2a:	2400      	movs	r4, #0
   19d2c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   19d2e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   19d32:	f8db 3000 	ldr.w	r3, [fp]
   19d36:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   19d3a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   19d3e:	1a52      	subs	r2, r2, r1
   19d40:	1a9b      	subs	r3, r3, r2
   19d42:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   19d46:	f7ff fd0d 	bl	19764 <rx_queue_transfer>
		rx_tail = tail;
   19d4a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   19d4e:	782b      	ldrb	r3, [r5, #0]
   19d50:	42a3      	cmp	r3, r4
   19d52:	d1e5      	bne.n	19d20 <usb_serial_flush_input+0x20>
}
   19d54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d58:	20006ab1 	.word	0x20006ab1
   19d5c:	20006ab0 	.word	0x20006ab0
   19d60:	20006248 	.word	0x20006248
   19d64:	20006258 	.word	0x20006258
   19d68:	20006234 	.word	0x20006234
   19d6c:	20006238 	.word	0x20006238

00019d70 <usb_serial_getchar>:
{
   19d70:	b500      	push	{lr}
   19d72:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   19d74:	2101      	movs	r1, #1
   19d76:	f10d 0007 	add.w	r0, sp, #7
   19d7a:	f7ff ff23 	bl	19bc4 <usb_serial_read>
   19d7e:	b120      	cbz	r0, 19d8a <usb_serial_getchar+0x1a>
   19d80:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   19d84:	b003      	add	sp, #12
   19d86:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   19d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d8e:	e7f9      	b.n	19d84 <usb_serial_getchar+0x14>

00019d90 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   19d90:	4b09      	ldr	r3, [pc, #36]	; (19db8 <usb_serial_putchar+0x28>)
{
   19d92:	b500      	push	{lr}
   19d94:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   19d96:	781b      	ldrb	r3, [r3, #0]
{
   19d98:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   19d9c:	b13b      	cbz	r3, 19dae <usb_serial_putchar+0x1e>
   19d9e:	2101      	movs	r1, #1
   19da0:	f10d 0007 	add.w	r0, sp, #7
   19da4:	f7ff fdb0 	bl	19908 <usb_serial_write.part.0>
}
   19da8:	b003      	add	sp, #12
   19daa:	f85d fb04 	ldr.w	pc, [sp], #4
   19dae:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   19db2:	b003      	add	sp, #12
   19db4:	f85d fb04 	ldr.w	pc, [sp], #4
   19db8:	20006ab7 	.word	0x20006ab7

00019dbc <usb_serial_write>:
	if (!usb_configuration) return 0;
   19dbc:	4b04      	ldr	r3, [pc, #16]	; (19dd0 <usb_serial_write+0x14>)
   19dbe:	781b      	ldrb	r3, [r3, #0]
   19dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   19dc4:	b10b      	cbz	r3, 19dca <usb_serial_write+0xe>
   19dc6:	f7ff bd9f 	b.w	19908 <usb_serial_write.part.0>
}
   19dca:	4610      	mov	r0, r2
   19dcc:	4770      	bx	lr
   19dce:	bf00      	nop
   19dd0:	20006ab7 	.word	0x20006ab7

00019dd4 <usb_serial_write_buffer_free>:
{
   19dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   19dd8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   19dda:	f8df 8044 	ldr.w	r8, [pc, #68]	; 19e20 <usb_serial_write_buffer_free+0x4c>
   19dde:	2301      	movs	r3, #1
   19de0:	4d0d      	ldr	r5, [pc, #52]	; (19e18 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   19de2:	4627      	mov	r7, r4
   19de4:	4e0d      	ldr	r6, [pc, #52]	; (19e1c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   19de6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   19dea:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   19dec:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   19dee:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   19df0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   19df2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   19df6:	d005      	beq.n	19e04 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   19df8:	f7ff fc7a 	bl	196f0 <usb_transfer_status>
   19dfc:	0603      	lsls	r3, r0, #24
   19dfe:	bf58      	it	pl
   19e00:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   19e04:	2c04      	cmp	r4, #4
   19e06:	d1f0      	bne.n	19dea <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   19e08:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   19e0c:	2300      	movs	r3, #0
}
   19e0e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   19e10:	f888 3000 	strb.w	r3, [r8]
}
   19e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e18:	20005060 	.word	0x20005060
   19e1c:	20006ab4 	.word	0x20006ab4
   19e20:	20006ab5 	.word	0x20006ab5

00019e24 <usb_serial_flush_output>:
{
   19e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   19e28:	4b1d      	ldr	r3, [pc, #116]	; (19ea0 <usb_serial_flush_output+0x7c>)
   19e2a:	781b      	ldrb	r3, [r3, #0]
   19e2c:	b113      	cbz	r3, 19e34 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   19e2e:	4d1d      	ldr	r5, [pc, #116]	; (19ea4 <usb_serial_flush_output+0x80>)
   19e30:	882a      	ldrh	r2, [r5, #0]
   19e32:	b90a      	cbnz	r2, 19e38 <usb_serial_flush_output+0x14>
}
   19e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   19e38:	4e1b      	ldr	r6, [pc, #108]	; (19ea8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   19e3a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   19e3e:	491b      	ldr	r1, [pc, #108]	; (19eac <usb_serial_flush_output+0x88>)
   19e40:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   19e42:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   19e44:	4c1a      	ldr	r4, [pc, #104]	; (19eb0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   19e46:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   19e4a:	4f1a      	ldr	r7, [pc, #104]	; (19eb4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   19e4c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   19e50:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   19e52:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   19e54:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   19e56:	4621      	mov	r1, r4
   19e58:	2300      	movs	r3, #0
   19e5a:	f7ff fc0f 	bl	1967c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   19e5e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   19e62:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   19e66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19e6a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   19e6e:	3420      	adds	r4, #32
	} while (location < end_addr);
   19e70:	42a2      	cmp	r2, r4
   19e72:	d8fa      	bhi.n	19e6a <usb_serial_flush_output+0x46>
	asm("dsb");
   19e74:	f3bf 8f4f 	dsb	sy
	asm("isb");
   19e78:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   19e7c:	2004      	movs	r0, #4
   19e7e:	4641      	mov	r1, r8
   19e80:	f7ff fc14 	bl	196ac <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   19e84:	7833      	ldrb	r3, [r6, #0]
   19e86:	3301      	adds	r3, #1
   19e88:	b2db      	uxtb	r3, r3
   19e8a:	2b03      	cmp	r3, #3
   19e8c:	bf88      	it	hi
   19e8e:	2300      	movhi	r3, #0
   19e90:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   19e92:	2300      	movs	r3, #0
   19e94:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   19e96:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   19e9a:	703b      	strb	r3, [r7, #0]
}
   19e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19ea0:	20006ab7 	.word	0x20006ab7
   19ea4:	20006a98 	.word	0x20006a98
   19ea8:	20006ab4 	.word	0x20006ab4
   19eac:	20005060 	.word	0x20005060
   19eb0:	20201080 	.word	0x20201080
   19eb4:	20006ab5 	.word	0x20006ab5

00019eb8 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   19eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   19ebc:	4b2d      	ldr	r3, [pc, #180]	; (19f74 <yield+0xbc>)
   19ebe:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   19ec0:	b166      	cbz	r6, 19edc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   19ec2:	4f2d      	ldr	r7, [pc, #180]	; (19f78 <yield+0xc0>)
   19ec4:	783b      	ldrb	r3, [r7, #0]
   19ec6:	b94b      	cbnz	r3, 19edc <yield+0x24>
	running = 1;
   19ec8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   19eca:	07f1      	lsls	r1, r6, #31
	running = 1;
   19ecc:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   19ece:	d443      	bmi.n	19f58 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   19ed0:	07b2      	lsls	r2, r6, #30
   19ed2:	d426      	bmi.n	19f22 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   19ed4:	2300      	movs	r3, #0
   19ed6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   19ed8:	0773      	lsls	r3, r6, #29
   19eda:	d401      	bmi.n	19ee0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   19edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   19ee0:	4b26      	ldr	r3, [pc, #152]	; (19f7c <yield+0xc4>)
   19ee2:	681a      	ldr	r2, [r3, #0]
   19ee4:	2a00      	cmp	r2, #0
   19ee6:	d0f9      	beq.n	19edc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   19ee8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   19eec:	2a00      	cmp	r2, #0
   19eee:	d1f5      	bne.n	19edc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   19ef0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   19ef4:	b672      	cpsid	i
		EventResponder *first = firstYield;
   19ef6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   19ef8:	2800      	cmp	r0, #0
   19efa:	d034      	beq.n	19f66 <yield+0xae>
		if (runningFromYield) {
   19efc:	4c20      	ldr	r4, [pc, #128]	; (19f80 <yield+0xc8>)
   19efe:	7821      	ldrb	r1, [r4, #0]
   19f00:	2900      	cmp	r1, #0
   19f02:	d130      	bne.n	19f66 <yield+0xae>
		runningFromYield = true;
   19f04:	2201      	movs	r2, #1
   19f06:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   19f08:	6942      	ldr	r2, [r0, #20]
   19f0a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   19f0c:	2a00      	cmp	r2, #0
   19f0e:	d02e      	beq.n	19f6e <yield+0xb6>
			firstYield->_prev = nullptr;
   19f10:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   19f12:	b905      	cbnz	r5, 19f16 <yield+0x5e>
   19f14:	b662      	cpsie	i
		first->_triggered = false;
   19f16:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   19f18:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   19f1a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   19f1c:	4798      	blx	r3
		runningFromYield = false;
   19f1e:	7025      	strb	r5, [r4, #0]
   19f20:	e7dc      	b.n	19edc <yield+0x24>

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   19f22:	f8df 8064 	ldr.w	r8, [pc, #100]	; 19f88 <yield+0xd0>
   19f26:	f898 3000 	ldrb.w	r3, [r8]
   19f2a:	2b00      	cmp	r3, #0
   19f2c:	d0d2      	beq.n	19ed4 <yield+0x1c>
   19f2e:	2500      	movs	r5, #0
   19f30:	f8df 9058 	ldr.w	r9, [pc, #88]	; 19f8c <yield+0xd4>
   19f34:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   19f36:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   19f3a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   19f3c:	6823      	ldr	r3, [r4, #0]
   19f3e:	4620      	mov	r0, r4
   19f40:	691b      	ldr	r3, [r3, #16]
   19f42:	4798      	blx	r3
   19f44:	b110      	cbz	r0, 19f4c <yield+0x94>
   19f46:	6963      	ldr	r3, [r4, #20]
   19f48:	689b      	ldr	r3, [r3, #8]
   19f4a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   19f4c:	f898 2000 	ldrb.w	r2, [r8]
   19f50:	b2eb      	uxtb	r3, r5
   19f52:	429a      	cmp	r2, r3
   19f54:	d8ef      	bhi.n	19f36 <yield+0x7e>
   19f56:	e7bd      	b.n	19ed4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   19f58:	f7ff fec6 	bl	19ce8 <usb_serial_available>
		if (Serial.available()) serialEvent();
   19f5c:	2800      	cmp	r0, #0
   19f5e:	d0b7      	beq.n	19ed0 <yield+0x18>
   19f60:	f3af 8000 	nop.w
   19f64:	e7b4      	b.n	19ed0 <yield+0x18>
		if (doit) __enable_irq();
   19f66:	2d00      	cmp	r5, #0
   19f68:	d1b8      	bne.n	19edc <yield+0x24>
   19f6a:	b662      	cpsie	i
   19f6c:	e7b6      	b.n	19edc <yield+0x24>
			lastYield = nullptr;
   19f6e:	4b05      	ldr	r3, [pc, #20]	; (19f84 <yield+0xcc>)
   19f70:	601a      	str	r2, [r3, #0]
   19f72:	e7ce      	b.n	19f12 <yield+0x5a>
   19f74:	20006abb 	.word	0x20006abb
   19f78:	20006aa3 	.word	0x20006aa3
   19f7c:	200057d0 	.word	0x200057d0
   19f80:	20006a9e 	.word	0x20006a9e
   19f84:	200057dc 	.word	0x200057dc
   19f88:	20006aa0 	.word	0x20006aa0
   19f8c:	200057e0 	.word	0x200057e0

00019f90 <lround>:
   19f90:	ec53 2b10 	vmov	r2, r3, d0
   19f94:	1e18      	subs	r0, r3, #0
   19f96:	f3c0 510a 	ubfx	r1, r0, #20, #11
   19f9a:	b500      	push	{lr}
   19f9c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   19fa0:	f3c0 0c13 	ubfx	ip, r0, #0, #20
   19fa4:	bfb4      	ite	lt
   19fa6:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
   19faa:	2001      	movge	r0, #1
   19fac:	f1be 0f13 	cmp.w	lr, #19
   19fb0:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   19fb4:	dc0f      	bgt.n	19fd6 <lround+0x46>
   19fb6:	f1be 0f00 	cmp.w	lr, #0
   19fba:	db25      	blt.n	1a008 <lround+0x78>
   19fbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   19fc0:	fa41 f10e 	asr.w	r1, r1, lr
   19fc4:	4461      	add	r1, ip
   19fc6:	f1ce 0e14 	rsb	lr, lr, #20
   19fca:	fa21 f10e 	lsr.w	r1, r1, lr
   19fce:	fb01 f000 	mul.w	r0, r1, r0
   19fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   19fd6:	f1be 0f1e 	cmp.w	lr, #30
   19fda:	d81b      	bhi.n	1a014 <lround+0x84>
   19fdc:	f1be 0f33 	cmp.w	lr, #51	; 0x33
   19fe0:	dc1e      	bgt.n	1a020 <lround+0x90>
   19fe2:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   19fe6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   19fea:	40cb      	lsrs	r3, r1
   19fec:	189b      	adds	r3, r3, r2
   19fee:	bf28      	it	cs
   19ff0:	f10c 0c01 	addcs.w	ip, ip, #1
   19ff4:	f1be 0f14 	cmp.w	lr, #20
   19ff8:	fa0c f101 	lsl.w	r1, ip, r1
   19ffc:	f1ce 0234 	rsb	r2, lr, #52	; 0x34
   1a000:	d0e5      	beq.n	19fce <lround+0x3e>
   1a002:	40d3      	lsrs	r3, r2
   1a004:	4319      	orrs	r1, r3
   1a006:	e7e2      	b.n	19fce <lround+0x3e>
   1a008:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   1a00c:	bf18      	it	ne
   1a00e:	2000      	movne	r0, #0
   1a010:	f85d fb04 	ldr.w	pc, [sp], #4
   1a014:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   1a018:	ee17 0a90 	vmov	r0, s15
   1a01c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a020:	f2a1 4313 	subw	r3, r1, #1043	; 0x413
   1a024:	f2a1 4133 	subw	r1, r1, #1075	; 0x433
   1a028:	fa0c f303 	lsl.w	r3, ip, r3
   1a02c:	408a      	lsls	r2, r1
   1a02e:	ea43 0102 	orr.w	r1, r3, r2
   1a032:	e7cc      	b.n	19fce <lround+0x3e>

0001a034 <asin>:
   1a034:	b508      	push	{r3, lr}
   1a036:	ed2d 8b04 	vpush	{d8-d9}
   1a03a:	eeb0 8b40 	vmov.f64	d8, d0
   1a03e:	f000 fd0f 	bl	1aa60 <__ieee754_asin>
   1a042:	eeb4 8b48 	vcmp.f64	d8, d8
   1a046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a04a:	eeb0 9b40 	vmov.f64	d9, d0
   1a04e:	d60a      	bvs.n	1a066 <asin+0x32>
   1a050:	eeb0 0b48 	vmov.f64	d0, d8
   1a054:	f001 f86c 	bl	1b130 <fabs>
   1a058:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1a05c:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1a060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a064:	dc04      	bgt.n	1a070 <asin+0x3c>
   1a066:	eeb0 0b49 	vmov.f64	d0, d9
   1a06a:	ecbd 8b04 	vpop	{d8-d9}
   1a06e:	bd08      	pop	{r3, pc}
   1a070:	f005 fc80 	bl	1f974 <__errno>
   1a074:	ecbd 8b04 	vpop	{d8-d9}
   1a078:	4603      	mov	r3, r0
   1a07a:	2221      	movs	r2, #33	; 0x21
   1a07c:	601a      	str	r2, [r3, #0]
   1a07e:	4802      	ldr	r0, [pc, #8]	; (1a088 <asin+0x54>)
   1a080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a084:	f001 bb2c 	b.w	1b6e0 <nan>
   1a088:	20002724 	.word	0x20002724

0001a08c <atan2>:
   1a08c:	f000 be18 	b.w	1acc0 <__ieee754_atan2>

0001a090 <fmod>:
   1a090:	b508      	push	{r3, lr}
   1a092:	ed2d 8b04 	vpush	{d8-d9}
   1a096:	eeb0 9b40 	vmov.f64	d9, d0
   1a09a:	eeb0 8b41 	vmov.f64	d8, d1
   1a09e:	f001 f9d3 	bl	1b448 <__ieee754_fmod>
   1a0a2:	eeb4 9b48 	vcmp.f64	d9, d8
   1a0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a0aa:	d606      	bvs.n	1a0ba <fmod+0x2a>
   1a0ac:	ed9f 9b0a 	vldr	d9, [pc, #40]	; 1a0d8 <fmod+0x48>
   1a0b0:	eeb4 8b49 	vcmp.f64	d8, d9
   1a0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a0b8:	d002      	beq.n	1a0c0 <fmod+0x30>
   1a0ba:	ecbd 8b04 	vpop	{d8-d9}
   1a0be:	bd08      	pop	{r3, pc}
   1a0c0:	f005 fc58 	bl	1f974 <__errno>
   1a0c4:	ee89 0b09 	vdiv.f64	d0, d9, d9
   1a0c8:	ecbd 8b04 	vpop	{d8-d9}
   1a0cc:	2321      	movs	r3, #33	; 0x21
   1a0ce:	6003      	str	r3, [r0, #0]
   1a0d0:	bd08      	pop	{r3, pc}
   1a0d2:	bf00      	nop
   1a0d4:	f3af 8000 	nop.w
	...

0001a0e0 <pow>:
   1a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0e4:	ec5b ab10 	vmov	sl, fp, d0
   1a0e8:	ed2d 8b0a 	vpush	{d8-d12}
   1a0ec:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
   1a0f0:	ee11 ea90 	vmov	lr, s3
   1a0f4:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   1a0f8:	f240 70fd 	movw	r0, #2045	; 0x7fd
   1a0fc:	4286      	cmp	r6, r0
   1a0fe:	ee10 1a10 	vmov	r1, s0
   1a102:	ee11 3a10 	vmov	r3, s2
   1a106:	b089      	sub	sp, #36	; 0x24
   1a108:	465a      	mov	r2, fp
   1a10a:	4665      	mov	r5, ip
   1a10c:	ea4f 541e 	mov.w	r4, lr, lsr #20
   1a110:	f200 80c6 	bhi.w	1a2a0 <pow+0x1c0>
   1a114:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1a118:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
   1a11c:	2e7f      	cmp	r6, #127	; 0x7f
   1a11e:	bf98      	it	ls
   1a120:	2000      	movls	r0, #0
   1a122:	f200 80bd 	bhi.w	1a2a0 <pow+0x1c0>
   1a126:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   1a12a:	4ce1      	ldr	r4, [pc, #900]	; (1a4b0 <pow+0x3d0>)
   1a12c:	4be1      	ldr	r3, [pc, #900]	; (1a4b4 <pow+0x3d4>)
   1a12e:	4414      	add	r4, r2
   1a130:	f3c4 3546 	ubfx	r5, r4, #13, #7
   1a134:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   1a138:	ed93 6b00 	vldr	d6, [r3]
   1a13c:	ed93 7b02 	vldr	d7, [r3, #8]
   1a140:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
   1a144:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
   1a148:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
   1a14c:	0d26      	lsrs	r6, r4, #20
   1a14e:	1524      	asrs	r4, r4, #20
   1a150:	ee05 4a90 	vmov	s11, r4
   1a154:	0536      	lsls	r6, r6, #20
   1a156:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
   1a15a:	eeb8 5be5 	vcvt.f64.s32	d5, s11
   1a15e:	1b95      	subs	r5, r2, r6
   1a160:	eea5 2b06 	vfma.f64	d2, d5, d6
   1a164:	eea5 9b07 	vfma.f64	d9, d5, d7
   1a168:	ed93 ab04 	vldr	d10, [r3, #16]
   1a16c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
   1a170:	ed93 bb08 	vldr	d11, [r3, #32]
   1a174:	ed93 7b06 	vldr	d7, [r3, #24]
   1a178:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
   1a17c:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1a180:	1e0c      	subs	r4, r1, #0
   1a182:	ec45 4b1c 	vmov	d12, r4, r5
   1a186:	eeac 0b08 	vfma.f64	d0, d12, d8
   1a18a:	eea0 3b05 	vfma.f64	d3, d0, d5
   1a18e:	eea0 6b04 	vfma.f64	d6, d0, d4
   1a192:	ee20 5b0a 	vmul.f64	d5, d0, d10
   1a196:	ee30 4b02 	vadd.f64	d4, d0, d2
   1a19a:	ee20 8b05 	vmul.f64	d8, d0, d5
   1a19e:	eea0 7b0b 	vfma.f64	d7, d0, d11
   1a1a2:	eea8 6b03 	vfma.f64	d6, d8, d3
   1a1a6:	ee32 2b44 	vsub.f64	d2, d2, d4
   1a1aa:	eea8 7b06 	vfma.f64	d7, d8, d6
   1a1ae:	ee32 2b00 	vadd.f64	d2, d2, d0
   1a1b2:	eeb0 3b48 	vmov.f64	d3, d8
   1a1b6:	ee39 2b02 	vadd.f64	d2, d9, d2
   1a1ba:	ee95 3b00 	vfnms.f64	d3, d5, d0
   1a1be:	ee34 5b08 	vadd.f64	d5, d4, d8
   1a1c2:	ee20 0b08 	vmul.f64	d0, d0, d8
   1a1c6:	ee34 4b45 	vsub.f64	d4, d4, d5
   1a1ca:	ee32 6b03 	vadd.f64	d6, d2, d3
   1a1ce:	ee34 4b08 	vadd.f64	d4, d4, d8
   1a1d2:	ee36 6b04 	vadd.f64	d6, d6, d4
   1a1d6:	eea0 6b07 	vfma.f64	d6, d0, d7
   1a1da:	ee35 4b06 	vadd.f64	d4, d5, d6
   1a1de:	ee21 8b04 	vmul.f64	d8, d1, d4
   1a1e2:	ee18 2a90 	vmov	r2, s17
   1a1e6:	eeb0 7b48 	vmov.f64	d7, d8
   1a1ea:	f3c2 550a 	ubfx	r5, r2, #20, #11
   1a1ee:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
   1a1f2:	18eb      	adds	r3, r5, r3
   1a1f4:	2b3e      	cmp	r3, #62	; 0x3e
   1a1f6:	ee91 7b04 	vfnms.f64	d7, d1, d4
   1a1fa:	ee35 5b44 	vsub.f64	d5, d5, d4
   1a1fe:	ee35 5b06 	vadd.f64	d5, d5, d6
   1a202:	eea1 7b05 	vfma.f64	d7, d1, d5
   1a206:	f200 8093 	bhi.w	1a330 <pow+0x250>
   1a20a:	4bab      	ldr	r3, [pc, #684]	; (1a4b8 <pow+0x3d8>)
   1a20c:	ed93 4b02 	vldr	d4, [r3, #8]
   1a210:	ed93 5b00 	vldr	d5, [r3]
   1a214:	eeb0 1b44 	vmov.f64	d1, d4
   1a218:	ed93 2b04 	vldr	d2, [r3, #16]
   1a21c:	eea8 1b05 	vfma.f64	d1, d8, d5
   1a220:	ed93 6b06 	vldr	d6, [r3, #24]
   1a224:	ee11 1a10 	vmov	r1, s2
   1a228:	ee31 1b44 	vsub.f64	d1, d1, d4
   1a22c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   1a230:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
   1a234:	eea1 8b02 	vfma.f64	d8, d1, d2
   1a238:	eea1 8b06 	vfma.f64	d8, d1, d6
   1a23c:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
   1a240:	ee37 7b08 	vadd.f64	d7, d7, d8
   1a244:	ee27 2b07 	vmul.f64	d2, d7, d7
   1a248:	1892      	adds	r2, r2, r2
   1a24a:	f102 040f 	add.w	r4, r2, #15
   1a24e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1a252:	eea7 6b04 	vfma.f64	d6, d7, d4
   1a256:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
   1a25a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1a25e:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
   1a262:	ed93 5b08 	vldr	d5, [r3, #32]
   1a266:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
   1a26a:	6857      	ldr	r7, [r2, #4]
   1a26c:	eea7 5b03 	vfma.f64	d5, d7, d3
   1a270:	1840      	adds	r0, r0, r1
   1a272:	2400      	movs	r4, #0
   1a274:	ee22 3b02 	vmul.f64	d3, d2, d2
   1a278:	ee37 7b04 	vadd.f64	d7, d7, d4
   1a27c:	19a2      	adds	r2, r4, r6
   1a27e:	eea2 7b05 	vfma.f64	d7, d2, d5
   1a282:	eb07 3340 	add.w	r3, r7, r0, lsl #13
   1a286:	eea3 7b06 	vfma.f64	d7, d3, d6
   1a28a:	2d00      	cmp	r5, #0
   1a28c:	d05f      	beq.n	1a34e <pow+0x26e>
   1a28e:	ec43 2b10 	vmov	d0, r2, r3
   1a292:	eea7 0b00 	vfma.f64	d0, d7, d0
   1a296:	b009      	add	sp, #36	; 0x24
   1a298:	ecbd 8b0a 	vpop	{d8-d12}
   1a29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2a0:	18d8      	adds	r0, r3, r3
   1a2a2:	eb4e 090e 	adc.w	r9, lr, lr
   1a2a6:	1e46      	subs	r6, r0, #1
   1a2a8:	4637      	mov	r7, r6
   1a2aa:	f06f 0801 	mvn.w	r8, #1
   1a2ae:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
   1a2b2:	45b8      	cmp	r8, r7
   1a2b4:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   1a2b8:	eb77 0606 	sbcs.w	r6, r7, r6
   1a2bc:	f0c0 8120 	bcc.w	1a500 <pow+0x420>
   1a2c0:	1848      	adds	r0, r1, r1
   1a2c2:	eb42 0902 	adc.w	r9, r2, r2
   1a2c6:	1e46      	subs	r6, r0, #1
   1a2c8:	4637      	mov	r7, r6
   1a2ca:	f169 0600 	sbc.w	r6, r9, #0
   1a2ce:	45b8      	cmp	r8, r7
   1a2d0:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   1a2d4:	eb77 0606 	sbcs.w	r6, r7, r6
   1a2d8:	f0c0 8139 	bcc.w	1a54e <pow+0x46e>
   1a2dc:	2a00      	cmp	r2, #0
   1a2de:	db6a      	blt.n	1a3b6 <pow+0x2d6>
   1a2e0:	2000      	movs	r0, #0
   1a2e2:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1a2e6:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
   1a2ea:	2b7f      	cmp	r3, #127	; 0x7f
   1a2ec:	f240 77ff 	movw	r7, #2047	; 0x7ff
   1a2f0:	d94f      	bls.n	1a392 <pow+0x2b2>
   1a2f2:	4b72      	ldr	r3, [pc, #456]	; (1a4bc <pow+0x3dc>)
   1a2f4:	2000      	movs	r0, #0
   1a2f6:	429a      	cmp	r2, r3
   1a2f8:	bf08      	it	eq
   1a2fa:	4281      	cmpeq	r1, r0
   1a2fc:	f000 80fd 	beq.w	1a4fa <pow+0x41a>
   1a300:	f240 35bd 	movw	r5, #957	; 0x3bd
   1a304:	42ae      	cmp	r6, r5
   1a306:	f240 8091 	bls.w	1a42c <pow+0x34c>
   1a30a:	2901      	cmp	r1, #1
   1a30c:	eb72 0303 	sbcs.w	r3, r2, r3
   1a310:	bf34      	ite	cc
   1a312:	2301      	movcc	r3, #1
   1a314:	2300      	movcs	r3, #0
   1a316:	42bc      	cmp	r4, r7
   1a318:	bf8c      	ite	hi
   1a31a:	2400      	movhi	r4, #0
   1a31c:	2401      	movls	r4, #1
   1a31e:	42a3      	cmp	r3, r4
   1a320:	d10e      	bne.n	1a340 <pow+0x260>
   1a322:	b009      	add	sp, #36	; 0x24
   1a324:	ecbd 8b0a 	vpop	{d8-d12}
   1a328:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a32c:	f001 bcb4 	b.w	1bc98 <__math_uflow>
   1a330:	2b00      	cmp	r3, #0
   1a332:	f2c0 80ce 	blt.w	1a4d2 <pow+0x3f2>
   1a336:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
   1a33a:	d975      	bls.n	1a428 <pow+0x348>
   1a33c:	2a00      	cmp	r2, #0
   1a33e:	dbf0      	blt.n	1a322 <pow+0x242>
   1a340:	b009      	add	sp, #36	; 0x24
   1a342:	ecbd 8b0a 	vpop	{d8-d12}
   1a346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a34a:	f001 bcad 	b.w	1bca8 <__math_oflow>
   1a34e:	42a1      	cmp	r1, r4
   1a350:	f280 8113 	bge.w	1a57a <pow+0x49a>
   1a354:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
   1a358:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1a35c:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   1a360:	4610      	mov	r0, r2
   1a362:	ec41 0b15 	vmov	d5, r0, r1
   1a366:	ee27 7b05 	vmul.f64	d7, d7, d5
   1a36a:	ee35 6b07 	vadd.f64	d6, d5, d7
   1a36e:	eeb0 4bc6 	vabs.f64	d4, d6
   1a372:	eeb4 4bc3 	vcmpe.f64	d4, d3
   1a376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a37a:	d461      	bmi.n	1a440 <pow+0x360>
   1a37c:	ed9f 0b48 	vldr	d0, [pc, #288]	; 1a4a0 <pow+0x3c0>
   1a380:	ee26 0b00 	vmul.f64	d0, d6, d0
   1a384:	b009      	add	sp, #36	; 0x24
   1a386:	ecbd 8b0a 	vpop	{d8-d12}
   1a38a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a38e:	f001 bcbb 	b.w	1bd08 <__math_check_uflow>
   1a392:	2d00      	cmp	r5, #0
   1a394:	f47f aec7 	bne.w	1a126 <pow+0x46>
   1a398:	ed9f 7b43 	vldr	d7, [pc, #268]	; 1a4a8 <pow+0x3c8>
   1a39c:	ec4b ab16 	vmov	d6, sl, fp
   1a3a0:	ee26 7b07 	vmul.f64	d7, d6, d7
   1a3a4:	ec53 2b17 	vmov	r2, r3, d7
   1a3a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1a3ac:	ee17 1a10 	vmov	r1, s14
   1a3b0:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
   1a3b4:	e6b7      	b.n	1a126 <pow+0x46>
   1a3b6:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1a3ba:	f240 30fe 	movw	r0, #1022	; 0x3fe
   1a3be:	4286      	cmp	r6, r0
   1a3c0:	dd7e      	ble.n	1a4c0 <pow+0x3e0>
   1a3c2:	f240 4033 	movw	r0, #1075	; 0x433
   1a3c6:	4286      	cmp	r6, r0
   1a3c8:	f300 80fa 	bgt.w	1a5c0 <pow+0x4e0>
   1a3cc:	1b80      	subs	r0, r0, r6
   1a3ce:	f1a0 0520 	sub.w	r5, r0, #32
   1a3d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1a3d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1a3da:	4087      	lsls	r7, r0
   1a3dc:	fa09 f905 	lsl.w	r9, r9, r5
   1a3e0:	f1c0 0820 	rsb	r8, r0, #32
   1a3e4:	9501      	str	r5, [sp, #4]
   1a3e6:	ea47 0509 	orr.w	r5, r7, r9
   1a3ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1a3ee:	fa27 f908 	lsr.w	r9, r7, r8
   1a3f2:	ea45 0509 	orr.w	r5, r5, r9
   1a3f6:	4087      	lsls	r7, r0
   1a3f8:	ea23 0707 	bic.w	r7, r3, r7
   1a3fc:	ea2e 0505 	bic.w	r5, lr, r5
   1a400:	433d      	orrs	r5, r7
   1a402:	d15d      	bne.n	1a4c0 <pow+0x3e0>
   1a404:	9d01      	ldr	r5, [sp, #4]
   1a406:	40c3      	lsrs	r3, r0
   1a408:	fa0e f808 	lsl.w	r8, lr, r8
   1a40c:	ea43 0308 	orr.w	r3, r3, r8
   1a410:	fa2e fe05 	lsr.w	lr, lr, r5
   1a414:	ea43 030e 	orr.w	r3, r3, lr
   1a418:	f003 0301 	and.w	r3, r3, #1
   1a41c:	0498      	lsls	r0, r3, #18
   1a41e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   1a422:	f3cc 050a 	ubfx	r5, ip, #0, #11
   1a426:	e75e      	b.n	1a2e6 <pow+0x206>
   1a428:	2500      	movs	r5, #0
   1a42a:	e6ee      	b.n	1a20a <pow+0x12a>
   1a42c:	4288      	cmp	r0, r1
   1a42e:	4193      	sbcs	r3, r2
   1a430:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1a434:	bf34      	ite	cc
   1a436:	ee31 0b00 	vaddcc.f64	d0, d1, d0
   1a43a:	ee30 0b41 	vsubcs.f64	d0, d0, d1
   1a43e:	e72a      	b.n	1a296 <pow+0x1b6>
   1a440:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
   1a444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a448:	ee35 5b46 	vsub.f64	d5, d5, d6
   1a44c:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
   1a450:	ee35 5b07 	vadd.f64	d5, d5, d7
   1a454:	bf58      	it	pl
   1a456:	eeb0 4b43 	vmovpl.f64	d4, d3
   1a45a:	ee36 3b04 	vadd.f64	d3, d6, d4
   1a45e:	ee34 7b43 	vsub.f64	d7, d4, d3
   1a462:	ee37 7b06 	vadd.f64	d7, d7, d6
   1a466:	ee37 7b05 	vadd.f64	d7, d7, d5
   1a46a:	ee37 7b03 	vadd.f64	d7, d7, d3
   1a46e:	ee37 6b44 	vsub.f64	d6, d7, d4
   1a472:	eeb5 6b40 	vcmp.f64	d6, #0.0
   1a476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a47a:	d104      	bne.n	1a486 <pow+0x3a6>
   1a47c:	462a      	mov	r2, r5
   1a47e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   1a482:	ec43 2b16 	vmov	d6, r2, r3
   1a486:	ed9f 5b06 	vldr	d5, [pc, #24]	; 1a4a0 <pow+0x3c0>
   1a48a:	ed8d 5b04 	vstr	d5, [sp, #16]
   1a48e:	ed9d 7b04 	vldr	d7, [sp, #16]
   1a492:	ee27 7b05 	vmul.f64	d7, d7, d5
   1a496:	ed8d 7b06 	vstr	d7, [sp, #24]
   1a49a:	e76f      	b.n	1a37c <pow+0x29c>
   1a49c:	f3af 8000 	nop.w
   1a4a0:	00000000 	.word	0x00000000
   1a4a4:	00100000 	.word	0x00100000
   1a4a8:	00000000 	.word	0x00000000
   1a4ac:	43300000 	.word	0x43300000
   1a4b0:	c0196aab 	.word	0xc0196aab
   1a4b4:	20000c60 	.word	0x20000c60
   1a4b8:	20000300 	.word	0x20000300
   1a4bc:	3ff00000 	.word	0x3ff00000
   1a4c0:	ec4b ab10 	vmov	d0, sl, fp
   1a4c4:	b009      	add	sp, #36	; 0x24
   1a4c6:	ecbd 8b0a 	vpop	{d8-d12}
   1a4ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4ce:	f001 bc0b 	b.w	1bce8 <__math_invalid>
   1a4d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1a4d6:	ee38 0b00 	vadd.f64	d0, d8, d0
   1a4da:	2800      	cmp	r0, #0
   1a4dc:	f43f aedb 	beq.w	1a296 <pow+0x1b6>
   1a4e0:	eeb1 0b40 	vneg.f64	d0, d0
   1a4e4:	e6d7      	b.n	1a296 <pow+0x1b6>
   1a4e6:	1849      	adds	r1, r1, r1
   1a4e8:	4b59      	ldr	r3, [pc, #356]	; (1a650 <pow+0x570>)
   1a4ea:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
   1a4ee:	f04f 0000 	mov.w	r0, #0
   1a4f2:	4152      	adcs	r2, r2
   1a4f4:	4288      	cmp	r0, r1
   1a4f6:	4193      	sbcs	r3, r2
   1a4f8:	d35d      	bcc.n	1a5b6 <pow+0x4d6>
   1a4fa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1a4fe:	e6ca      	b.n	1a296 <pow+0x1b6>
   1a500:	ea50 0409 	orrs.w	r4, r0, r9
   1a504:	d0ef      	beq.n	1a4e6 <pow+0x406>
   1a506:	4c53      	ldr	r4, [pc, #332]	; (1a654 <pow+0x574>)
   1a508:	2500      	movs	r5, #0
   1a50a:	42a2      	cmp	r2, r4
   1a50c:	bf08      	it	eq
   1a50e:	42a9      	cmpeq	r1, r5
   1a510:	d047      	beq.n	1a5a2 <pow+0x4c2>
   1a512:	1849      	adds	r1, r1, r1
   1a514:	4b50      	ldr	r3, [pc, #320]	; (1a658 <pow+0x578>)
   1a516:	4152      	adcs	r2, r2
   1a518:	428d      	cmp	r5, r1
   1a51a:	eb73 0402 	sbcs.w	r4, r3, r2
   1a51e:	d34a      	bcc.n	1a5b6 <pow+0x4d6>
   1a520:	4599      	cmp	r9, r3
   1a522:	bf08      	it	eq
   1a524:	42a8      	cmpeq	r0, r5
   1a526:	d146      	bne.n	1a5b6 <pow+0x4d6>
   1a528:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1a52c:	429a      	cmp	r2, r3
   1a52e:	bf08      	it	eq
   1a530:	42a9      	cmpeq	r1, r5
   1a532:	d0e2      	beq.n	1a4fa <pow+0x41a>
   1a534:	429a      	cmp	r2, r3
   1a536:	ea6f 0e0e 	mvn.w	lr, lr
   1a53a:	bf34      	ite	cc
   1a53c:	2200      	movcc	r2, #0
   1a53e:	2201      	movcs	r2, #1
   1a540:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   1a544:	4572      	cmp	r2, lr
   1a546:	d077      	beq.n	1a638 <pow+0x558>
   1a548:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 1a640 <pow+0x560>
   1a54c:	e6a3      	b.n	1a296 <pow+0x1b6>
   1a54e:	ec4b ab17 	vmov	d7, sl, fp
   1a552:	2a00      	cmp	r2, #0
   1a554:	ee27 0b07 	vmul.f64	d0, d7, d7
   1a558:	db34      	blt.n	1a5c4 <pow+0x4e4>
   1a55a:	2200      	movs	r2, #0
   1a55c:	ea50 0909 	orrs.w	r9, r0, r9
   1a560:	d15d      	bne.n	1a61e <pow+0x53e>
   1a562:	f1be 0f00 	cmp.w	lr, #0
   1a566:	f6bf ae96 	bge.w	1a296 <pow+0x1b6>
   1a56a:	4610      	mov	r0, r2
   1a56c:	b009      	add	sp, #36	; 0x24
   1a56e:	ecbd 8b0a 	vpop	{d8-d12}
   1a572:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a576:	f001 bb9f 	b.w	1bcb8 <__math_divzero>
   1a57a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
   1a57e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 1a648 <pow+0x568>
   1a582:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
   1a586:	4610      	mov	r0, r2
   1a588:	ec41 0b10 	vmov	d0, r0, r1
   1a58c:	eea7 0b00 	vfma.f64	d0, d7, d0
   1a590:	ee20 0b06 	vmul.f64	d0, d0, d6
   1a594:	b009      	add	sp, #36	; 0x24
   1a596:	ecbd 8b0a 	vpop	{d8-d12}
   1a59a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a59e:	f001 bbbf 	b.w	1bd20 <__math_check_oflow>
   1a5a2:	18db      	adds	r3, r3, r3
   1a5a4:	4a2a      	ldr	r2, [pc, #168]	; (1a650 <pow+0x570>)
   1a5a6:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
   1a5aa:	eb4e 0e0e 	adc.w	lr, lr, lr
   1a5ae:	429d      	cmp	r5, r3
   1a5b0:	eb72 020e 	sbcs.w	r2, r2, lr
   1a5b4:	d2a1      	bcs.n	1a4fa <pow+0x41a>
   1a5b6:	ec4b ab17 	vmov	d7, sl, fp
   1a5ba:	ee37 0b01 	vadd.f64	d0, d7, d1
   1a5be:	e66a      	b.n	1a296 <pow+0x1b6>
   1a5c0:	2000      	movs	r0, #0
   1a5c2:	e72c      	b.n	1a41e <pow+0x33e>
   1a5c4:	f3c4 020a 	ubfx	r2, r4, #0, #11
   1a5c8:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
   1a5cc:	2934      	cmp	r1, #52	; 0x34
   1a5ce:	d8c4      	bhi.n	1a55a <pow+0x47a>
   1a5d0:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
   1a5d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a5d8:	f1a2 051d 	sub.w	r5, r2, #29
   1a5dc:	3203      	adds	r2, #3
   1a5de:	fa01 f705 	lsl.w	r7, r1, r5
   1a5e2:	fa01 f402 	lsl.w	r4, r1, r2
   1a5e6:	f1c2 0620 	rsb	r6, r2, #32
   1a5ea:	433c      	orrs	r4, r7
   1a5ec:	fa21 f706 	lsr.w	r7, r1, r6
   1a5f0:	433c      	orrs	r4, r7
   1a5f2:	4091      	lsls	r1, r2
   1a5f4:	ea23 0101 	bic.w	r1, r3, r1
   1a5f8:	ea2e 0404 	bic.w	r4, lr, r4
   1a5fc:	4321      	orrs	r1, r4
   1a5fe:	d1ac      	bne.n	1a55a <pow+0x47a>
   1a600:	fa23 f202 	lsr.w	r2, r3, r2
   1a604:	fa0e f606 	lsl.w	r6, lr, r6
   1a608:	4332      	orrs	r2, r6
   1a60a:	fa2e f505 	lsr.w	r5, lr, r5
   1a60e:	432a      	orrs	r2, r5
   1a610:	f012 0201 	ands.w	r2, r2, #1
   1a614:	d0a2      	beq.n	1a55c <pow+0x47c>
   1a616:	eeb1 0b40 	vneg.f64	d0, d0
   1a61a:	2201      	movs	r2, #1
   1a61c:	e79e      	b.n	1a55c <pow+0x47c>
   1a61e:	f1be 0f00 	cmp.w	lr, #0
   1a622:	f6bf ae38 	bge.w	1a296 <pow+0x1b6>
   1a626:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1a62a:	ee86 7b00 	vdiv.f64	d7, d6, d0
   1a62e:	ed8d 7b02 	vstr	d7, [sp, #8]
   1a632:	ed9d 0b02 	vldr	d0, [sp, #8]
   1a636:	e62e      	b.n	1a296 <pow+0x1b6>
   1a638:	ee21 0b01 	vmul.f64	d0, d1, d1
   1a63c:	e62b      	b.n	1a296 <pow+0x1b6>
   1a63e:	bf00      	nop
	...
   1a64c:	7f000000 	.word	0x7f000000
   1a650:	fff00000 	.word	0xfff00000
   1a654:	3ff00000 	.word	0x3ff00000
   1a658:	ffe00000 	.word	0xffe00000
   1a65c:	00000000 	.word	0x00000000

0001a660 <sinf>:
   1a660:	b530      	push	{r4, r5, lr}
   1a662:	ee10 4a10 	vmov	r4, s0
   1a666:	f3c4 530a 	ubfx	r3, r4, #20, #11
   1a66a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
   1a66e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
   1a672:	b083      	sub	sp, #12
   1a674:	d21b      	bcs.n	1a6ae <sinf+0x4e>
   1a676:	ee26 5b06 	vmul.f64	d5, d6, d6
   1a67a:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
   1a67e:	d36e      	bcc.n	1a75e <sinf+0xfe>
   1a680:	ee26 2b05 	vmul.f64	d2, d6, d5
   1a684:	ee25 1b02 	vmul.f64	d1, d5, d2
   1a688:	4b73      	ldr	r3, [pc, #460]	; (1a858 <sinf+0x1f8>)
   1a68a:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
   1a68e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
   1a692:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
   1a696:	eea5 7b03 	vfma.f64	d7, d5, d3
   1a69a:	eea2 6b04 	vfma.f64	d6, d2, d4
   1a69e:	eeb0 0b46 	vmov.f64	d0, d6
   1a6a2:	eea7 0b01 	vfma.f64	d0, d7, d1
   1a6a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1a6aa:	b003      	add	sp, #12
   1a6ac:	bd30      	pop	{r4, r5, pc}
   1a6ae:	f240 422e 	movw	r2, #1070	; 0x42e
   1a6b2:	4293      	cmp	r3, r2
   1a6b4:	d85e      	bhi.n	1a774 <sinf+0x114>
   1a6b6:	4968      	ldr	r1, [pc, #416]	; (1a858 <sinf+0x1f8>)
   1a6b8:	ed91 7b08 	vldr	d7, [r1, #32]
   1a6bc:	ee26 7b07 	vmul.f64	d7, d6, d7
   1a6c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   1a6c4:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
   1a6c8:	ee17 3a90 	vmov	r3, s15
   1a6cc:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
   1a6d0:	161b      	asrs	r3, r3, #24
   1a6d2:	f013 0f02 	tst.w	r3, #2
   1a6d6:	ee07 3a90 	vmov	s15, r3
   1a6da:	f101 0270 	add.w	r2, r1, #112	; 0x70
   1a6de:	bf08      	it	eq
   1a6e0:	460a      	moveq	r2, r1
   1a6e2:	07d8      	lsls	r0, r3, #31
   1a6e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1a6e8:	eea7 6b45 	vfms.f64	d6, d7, d5
   1a6ec:	ee26 7b06 	vmul.f64	d7, d6, d6
   1a6f0:	d41b      	bmi.n	1a72a <sinf+0xca>
   1a6f2:	f003 0303 	and.w	r3, r3, #3
   1a6f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1a6fa:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
   1a6fe:	ed91 2b00 	vldr	d2, [r1]
   1a702:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
   1a706:	ee26 6b02 	vmul.f64	d6, d6, d2
   1a70a:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
   1a70e:	eea7 5b04 	vfma.f64	d5, d7, d4
   1a712:	ee26 4b07 	vmul.f64	d4, d6, d7
   1a716:	ee27 7b04 	vmul.f64	d7, d7, d4
   1a71a:	eea4 6b03 	vfma.f64	d6, d4, d3
   1a71e:	eea5 6b07 	vfma.f64	d6, d5, d7
   1a722:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
   1a726:	b003      	add	sp, #12
   1a728:	bd30      	pop	{r4, r5, pc}
   1a72a:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
   1a72e:	ee27 5b07 	vmul.f64	d5, d7, d7
   1a732:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
   1a736:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
   1a73a:	eea7 6b02 	vfma.f64	d6, d7, d2
   1a73e:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
   1a742:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
   1a746:	eea7 0b03 	vfma.f64	d0, d7, d3
   1a74a:	ee27 7b05 	vmul.f64	d7, d7, d5
   1a74e:	eea5 0b04 	vfma.f64	d0, d5, d4
   1a752:	eea6 0b07 	vfma.f64	d0, d6, d7
   1a756:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1a75a:	b003      	add	sp, #12
   1a75c:	bd30      	pop	{r4, r5, pc}
   1a75e:	0d22      	lsrs	r2, r4, #20
   1a760:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
   1a764:	d1df      	bne.n	1a726 <sinf+0xc6>
   1a766:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
   1a76a:	ee00 4a10 	vmov	s0, r4
   1a76e:	ed8d 5a01 	vstr	s10, [sp, #4]
   1a772:	e7d8      	b.n	1a726 <sinf+0xc6>
   1a774:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
   1a778:	d24b      	bcs.n	1a812 <sinf+0x1b2>
   1a77a:	4b38      	ldr	r3, [pc, #224]	; (1a85c <sinf+0x1fc>)
   1a77c:	f3c4 6283 	ubfx	r2, r4, #26, #4
   1a780:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   1a784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1a788:	6905      	ldr	r5, [r0, #16]
   1a78a:	f3c4 0316 	ubfx	r3, r4, #0, #23
   1a78e:	f3c4 51c2 	ubfx	r1, r4, #23, #3
   1a792:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1a796:	408b      	lsls	r3, r1
   1a798:	6a01      	ldr	r1, [r0, #32]
   1a79a:	fb03 f202 	mul.w	r2, r3, r2
   1a79e:	fba3 1001 	umull	r1, r0, r3, r1
   1a7a2:	fbe3 0205 	umlal	r0, r2, r3, r5
   1a7a6:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
   1a7aa:	0f8d      	lsrs	r5, r1, #30
   1a7ac:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
   1a7b0:	1a51      	subs	r1, r2, r1
   1a7b2:	f002 feb5 	bl	1d520 <__aeabi_l2d>
   1a7b6:	4b2a      	ldr	r3, [pc, #168]	; (1a860 <sinf+0x200>)
   1a7b8:	ed9f 7b25 	vldr	d7, [pc, #148]	; 1a850 <sinf+0x1f0>
   1a7bc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
   1a7c0:	ec41 0b16 	vmov	d6, r0, r1
   1a7c4:	f014 0f02 	tst.w	r4, #2
   1a7c8:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
   1a7cc:	bf08      	it	eq
   1a7ce:	4613      	moveq	r3, r2
   1a7d0:	07e9      	lsls	r1, r5, #31
   1a7d2:	ee26 7b07 	vmul.f64	d7, d6, d7
   1a7d6:	ee27 6b07 	vmul.f64	d6, d7, d7
   1a7da:	d41f      	bmi.n	1a81c <sinf+0x1bc>
   1a7dc:	f004 0403 	and.w	r4, r4, #3
   1a7e0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1a7e4:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
   1a7e8:	ed92 2b00 	vldr	d2, [r2]
   1a7ec:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
   1a7f0:	ee27 7b02 	vmul.f64	d7, d7, d2
   1a7f4:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
   1a7f8:	eea6 5b04 	vfma.f64	d5, d6, d4
   1a7fc:	ee27 4b06 	vmul.f64	d4, d7, d6
   1a800:	ee26 6b04 	vmul.f64	d6, d6, d4
   1a804:	eea4 7b03 	vfma.f64	d7, d4, d3
   1a808:	eea5 7b06 	vfma.f64	d7, d5, d6
   1a80c:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
   1a810:	e789      	b.n	1a726 <sinf+0xc6>
   1a812:	b003      	add	sp, #12
   1a814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1a818:	f000 b910 	b.w	1aa3c <__math_invalidf>
   1a81c:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   1a820:	ee26 5b06 	vmul.f64	d5, d6, d6
   1a824:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
   1a828:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1a82c:	eea6 7b02 	vfma.f64	d7, d6, d2
   1a830:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   1a834:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   1a838:	eea6 0b03 	vfma.f64	d0, d6, d3
   1a83c:	ee26 6b05 	vmul.f64	d6, d6, d5
   1a840:	eea5 0b04 	vfma.f64	d0, d5, d4
   1a844:	eea7 0b06 	vfma.f64	d0, d7, d6
   1a848:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1a84c:	e76b      	b.n	1a726 <sinf+0xc6>
   1a84e:	bf00      	nop
   1a850:	54442d18 	.word	0x54442d18
   1a854:	3c1921fb 	.word	0x3c1921fb
   1a858:	20001ca8 	.word	0x20001ca8
   1a85c:	200028d8 	.word	0x200028d8
   1a860:	20001d18 	.word	0x20001d18
   1a864:	00000000 	.word	0x00000000

0001a868 <cosf>:
   1a868:	b538      	push	{r3, r4, r5, lr}
   1a86a:	ee10 4a10 	vmov	r4, s0
   1a86e:	f3c4 530a 	ubfx	r3, r4, #20, #11
   1a872:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
   1a876:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
   1a87a:	d21e      	bcs.n	1a8ba <cosf+0x52>
   1a87c:	ee27 7b07 	vmul.f64	d7, d7, d7
   1a880:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
   1a884:	d36f      	bcc.n	1a966 <cosf+0xfe>
   1a886:	ee27 1b07 	vmul.f64	d1, d7, d7
   1a88a:	4b63      	ldr	r3, [pc, #396]	; (1aa18 <cosf+0x1b0>)
   1a88c:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   1a890:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
   1a894:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1a898:	eea7 5b02 	vfma.f64	d5, d7, d2
   1a89c:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   1a8a0:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   1a8a4:	eea7 0b03 	vfma.f64	d0, d7, d3
   1a8a8:	ee27 7b01 	vmul.f64	d7, d7, d1
   1a8ac:	eea1 0b04 	vfma.f64	d0, d1, d4
   1a8b0:	eea5 0b07 	vfma.f64	d0, d5, d7
   1a8b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1a8b8:	bd38      	pop	{r3, r4, r5, pc}
   1a8ba:	f240 422e 	movw	r2, #1070	; 0x42e
   1a8be:	4293      	cmp	r3, r2
   1a8c0:	d854      	bhi.n	1a96c <cosf+0x104>
   1a8c2:	4955      	ldr	r1, [pc, #340]	; (1aa18 <cosf+0x1b0>)
   1a8c4:	ed91 6b08 	vldr	d6, [r1, #32]
   1a8c8:	ee27 6b06 	vmul.f64	d6, d7, d6
   1a8cc:	eefd 6bc6 	vcvt.s32.f64	s13, d6
   1a8d0:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
   1a8d4:	ee16 3a90 	vmov	r3, s13
   1a8d8:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
   1a8dc:	161b      	asrs	r3, r3, #24
   1a8de:	f013 0f02 	tst.w	r3, #2
   1a8e2:	ee06 3a90 	vmov	s13, r3
   1a8e6:	f101 0270 	add.w	r2, r1, #112	; 0x70
   1a8ea:	bf08      	it	eq
   1a8ec:	460a      	moveq	r2, r1
   1a8ee:	07d8      	lsls	r0, r3, #31
   1a8f0:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   1a8f4:	eea6 7b45 	vfms.f64	d7, d6, d5
   1a8f8:	ee27 6b07 	vmul.f64	d6, d7, d7
   1a8fc:	d51a      	bpl.n	1a934 <cosf+0xcc>
   1a8fe:	f003 0303 	and.w	r3, r3, #3
   1a902:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1a906:	ed91 2b00 	vldr	d2, [r1]
   1a90a:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
   1a90e:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
   1a912:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
   1a916:	eea6 5b04 	vfma.f64	d5, d6, d4
   1a91a:	ee27 7b02 	vmul.f64	d7, d7, d2
   1a91e:	ee27 4b06 	vmul.f64	d4, d7, d6
   1a922:	ee26 6b04 	vmul.f64	d6, d6, d4
   1a926:	eea4 7b03 	vfma.f64	d7, d4, d3
   1a92a:	eea5 7b06 	vfma.f64	d7, d5, d6
   1a92e:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
   1a932:	bd38      	pop	{r3, r4, r5, pc}
   1a934:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
   1a938:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
   1a93c:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
   1a940:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
   1a944:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
   1a948:	ee26 5b06 	vmul.f64	d5, d6, d6
   1a94c:	eea6 7b02 	vfma.f64	d7, d6, d2
   1a950:	eea6 0b03 	vfma.f64	d0, d6, d3
   1a954:	ee26 6b05 	vmul.f64	d6, d6, d5
   1a958:	eea5 0b04 	vfma.f64	d0, d5, d4
   1a95c:	eea7 0b06 	vfma.f64	d0, d7, d6
   1a960:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1a964:	bd38      	pop	{r3, r4, r5, pc}
   1a966:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1a96a:	bd38      	pop	{r3, r4, r5, pc}
   1a96c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
   1a970:	d23d      	bcs.n	1a9ee <cosf+0x186>
   1a972:	4b2a      	ldr	r3, [pc, #168]	; (1aa1c <cosf+0x1b4>)
   1a974:	f3c4 6283 	ubfx	r2, r4, #26, #4
   1a978:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   1a97c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1a980:	6905      	ldr	r5, [r0, #16]
   1a982:	f3c4 0316 	ubfx	r3, r4, #0, #23
   1a986:	f3c4 51c2 	ubfx	r1, r4, #23, #3
   1a98a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1a98e:	408b      	lsls	r3, r1
   1a990:	6a01      	ldr	r1, [r0, #32]
   1a992:	fb03 f202 	mul.w	r2, r3, r2
   1a996:	fba3 1001 	umull	r1, r0, r3, r1
   1a99a:	fbe3 0205 	umlal	r0, r2, r3, r5
   1a99e:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
   1a9a2:	0f8d      	lsrs	r5, r1, #30
   1a9a4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
   1a9a8:	1a51      	subs	r1, r2, r1
   1a9aa:	f002 fdb9 	bl	1d520 <__aeabi_l2d>
   1a9ae:	4b1c      	ldr	r3, [pc, #112]	; (1aa20 <cosf+0x1b8>)
   1a9b0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 1aa10 <cosf+0x1a8>
   1a9b4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
   1a9b8:	ec41 0b16 	vmov	d6, r0, r1
   1a9bc:	f014 0f02 	tst.w	r4, #2
   1a9c0:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
   1a9c4:	bf08      	it	eq
   1a9c6:	4613      	moveq	r3, r2
   1a9c8:	07e9      	lsls	r1, r5, #31
   1a9ca:	ee26 7b07 	vmul.f64	d7, d6, d7
   1a9ce:	ee27 6b07 	vmul.f64	d6, d7, d7
   1a9d2:	d510      	bpl.n	1a9f6 <cosf+0x18e>
   1a9d4:	f004 0403 	and.w	r4, r4, #3
   1a9d8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1a9dc:	ed92 2b00 	vldr	d2, [r2]
   1a9e0:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
   1a9e4:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
   1a9e8:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
   1a9ec:	e793      	b.n	1a916 <cosf+0xae>
   1a9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a9f2:	f000 b823 	b.w	1aa3c <__math_invalidf>
   1a9f6:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
   1a9fa:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
   1a9fe:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1aa02:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
   1aa06:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
   1aa0a:	e79d      	b.n	1a948 <cosf+0xe0>
   1aa0c:	f3af 8000 	nop.w
   1aa10:	54442d18 	.word	0x54442d18
   1aa14:	3c1921fb 	.word	0x3c1921fb
   1aa18:	20001ca8 	.word	0x20001ca8
   1aa1c:	200028d8 	.word	0x200028d8
   1aa20:	20001d18 	.word	0x20001d18

0001aa24 <with_errnof>:
   1aa24:	b510      	push	{r4, lr}
   1aa26:	b082      	sub	sp, #8
   1aa28:	ed8d 0a01 	vstr	s0, [sp, #4]
   1aa2c:	4604      	mov	r4, r0
   1aa2e:	f004 ffa1 	bl	1f974 <__errno>
   1aa32:	ed9d 0a01 	vldr	s0, [sp, #4]
   1aa36:	6004      	str	r4, [r0, #0]
   1aa38:	b002      	add	sp, #8
   1aa3a:	bd10      	pop	{r4, pc}

0001aa3c <__math_invalidf>:
   1aa3c:	ee70 7a40 	vsub.f32	s15, s0, s0
   1aa40:	eeb4 0a40 	vcmp.f32	s0, s0
   1aa44:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   1aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aa4c:	eeb0 0a47 	vmov.f32	s0, s14
   1aa50:	d602      	bvs.n	1aa58 <__math_invalidf+0x1c>
   1aa52:	2021      	movs	r0, #33	; 0x21
   1aa54:	f7ff bfe6 	b.w	1aa24 <with_errnof>
   1aa58:	4770      	bx	lr
   1aa5a:	bf00      	nop
   1aa5c:	0000      	movs	r0, r0
	...

0001aa60 <__ieee754_asin>:
   1aa60:	b538      	push	{r3, r4, r5, lr}
   1aa62:	ee10 5a90 	vmov	r5, s1
   1aa66:	4b92      	ldr	r3, [pc, #584]	; (1acb0 <__ieee754_asin+0x250>)
   1aa68:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   1aa6c:	429c      	cmp	r4, r3
   1aa6e:	ed2d 8b0a 	vpush	{d8-d12}
   1aa72:	dd1d      	ble.n	1aab0 <__ieee754_asin+0x50>
   1aa74:	ee10 3a10 	vmov	r3, s0
   1aa78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   1aa7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   1aa80:	431c      	orrs	r4, r3
   1aa82:	d008      	beq.n	1aa96 <__ieee754_asin+0x36>
   1aa84:	ee30 0b40 	vsub.f64	d0, d0, d0
   1aa88:	ee80 7b00 	vdiv.f64	d7, d0, d0
   1aa8c:	ecbd 8b0a 	vpop	{d8-d12}
   1aa90:	eeb0 0b47 	vmov.f64	d0, d7
   1aa94:	bd38      	pop	{r3, r4, r5, pc}
   1aa96:	ecbd 8b0a 	vpop	{d8-d12}
   1aa9a:	ed9f 7b67 	vldr	d7, [pc, #412]	; 1ac38 <__ieee754_asin+0x1d8>
   1aa9e:	ed9f 6b68 	vldr	d6, [pc, #416]	; 1ac40 <__ieee754_asin+0x1e0>
   1aaa2:	ee20 7b07 	vmul.f64	d7, d0, d7
   1aaa6:	eea0 7b06 	vfma.f64	d7, d0, d6
   1aaaa:	eeb0 0b47 	vmov.f64	d0, d7
   1aaae:	bd38      	pop	{r3, r4, r5, pc}
   1aab0:	4b80      	ldr	r3, [pc, #512]	; (1acb4 <__ieee754_asin+0x254>)
   1aab2:	429c      	cmp	r4, r3
   1aab4:	dc0e      	bgt.n	1aad4 <__ieee754_asin+0x74>
   1aab6:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
   1aaba:	f280 8083 	bge.w	1abc4 <__ieee754_asin+0x164>
   1aabe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1aac2:	ed9f 7b61 	vldr	d7, [pc, #388]	; 1ac48 <__ieee754_asin+0x1e8>
   1aac6:	ee30 7b07 	vadd.f64	d7, d0, d7
   1aaca:	eeb4 7bc6 	vcmpe.f64	d7, d6
   1aace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aad2:	dc74      	bgt.n	1abbe <__ieee754_asin+0x15e>
   1aad4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
   1aad8:	f000 fb2a 	bl	1b130 <fabs>
   1aadc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1aae0:	ed9f 9b5b 	vldr	d9, [pc, #364]	; 1ac50 <__ieee754_asin+0x1f0>
   1aae4:	ee37 0b40 	vsub.f64	d0, d7, d0
   1aae8:	ee20 8b08 	vmul.f64	d8, d0, d8
   1aaec:	ed9f ab5a 	vldr	d10, [pc, #360]	; 1ac58 <__ieee754_asin+0x1f8>
   1aaf0:	eeb0 0b48 	vmov.f64	d0, d8
   1aaf4:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 1ac60 <__ieee754_asin+0x200>
   1aaf8:	ed9f 3b5b 	vldr	d3, [pc, #364]	; 1ac68 <__ieee754_asin+0x208>
   1aafc:	eea8 1b0a 	vfma.f64	d1, d8, d10
   1ab00:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 1ac70 <__ieee754_asin+0x210>
   1ab04:	eea1 3b08 	vfma.f64	d3, d1, d8
   1ab08:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 1ac78 <__ieee754_asin+0x218>
   1ab0c:	eea3 4b08 	vfma.f64	d4, d3, d8
   1ab10:	ed9f cb5b 	vldr	d12, [pc, #364]	; 1ac80 <__ieee754_asin+0x220>
   1ab14:	eea4 6b08 	vfma.f64	d6, d4, d8
   1ab18:	ed9f 2b5b 	vldr	d2, [pc, #364]	; 1ac88 <__ieee754_asin+0x228>
   1ab1c:	eea6 cb08 	vfma.f64	d12, d6, d8
   1ab20:	ee2c cb08 	vmul.f64	d12, d12, d8
   1ab24:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 1ac90 <__ieee754_asin+0x230>
   1ab28:	eea8 2b09 	vfma.f64	d2, d8, d9
   1ab2c:	ed9f bb5a 	vldr	d11, [pc, #360]	; 1ac98 <__ieee754_asin+0x238>
   1ab30:	eea2 5b08 	vfma.f64	d5, d2, d8
   1ab34:	eea5 bb08 	vfma.f64	d11, d5, d8
   1ab38:	eeab 7b08 	vfma.f64	d7, d11, d8
   1ab3c:	eeb0 9b47 	vmov.f64	d9, d7
   1ab40:	f000 fc7a 	bl	1b438 <__ieee754_sqrt>
   1ab44:	4b5c      	ldr	r3, [pc, #368]	; (1acb8 <__ieee754_asin+0x258>)
   1ab46:	429c      	cmp	r4, r3
   1ab48:	dc2a      	bgt.n	1aba0 <__ieee754_asin+0x140>
   1ab4a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
   1ab4e:	ee8c 3b09 	vdiv.f64	d3, d12, d9
   1ab52:	ec53 2b10 	vmov	r2, r3, d0
   1ab56:	ed9f 6b52 	vldr	d6, [pc, #328]	; 1aca0 <__ieee754_asin+0x240>
   1ab5a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 1ac38 <__ieee754_asin+0x1d8>
   1ab5e:	2200      	movs	r2, #0
   1ab60:	ec43 2b12 	vmov	d2, r2, r3
   1ab64:	ee30 5b02 	vadd.f64	d5, d0, d2
   1ab68:	eea2 8b42 	vfms.f64	d8, d2, d2
   1ab6c:	ee30 0b00 	vadd.f64	d0, d0, d0
   1ab70:	ee88 1b05 	vdiv.f64	d1, d8, d5
   1ab74:	eeb0 5b46 	vmov.f64	d5, d6
   1ab78:	eea1 7b44 	vfms.f64	d7, d1, d4
   1ab7c:	eea2 5b44 	vfms.f64	d5, d2, d4
   1ab80:	ee90 7b03 	vfnms.f64	d7, d0, d3
   1ab84:	ee37 7b45 	vsub.f64	d7, d7, d5
   1ab88:	ee36 7b47 	vsub.f64	d7, d6, d7
   1ab8c:	2d00      	cmp	r5, #0
   1ab8e:	f73f af7d 	bgt.w	1aa8c <__ieee754_asin+0x2c>
   1ab92:	eeb1 7b47 	vneg.f64	d7, d7
   1ab96:	eeb0 0b47 	vmov.f64	d0, d7
   1ab9a:	ecbd 8b0a 	vpop	{d8-d12}
   1ab9e:	bd38      	pop	{r3, r4, r5, pc}
   1aba0:	ed9f 7b41 	vldr	d7, [pc, #260]	; 1aca8 <__ieee754_asin+0x248>
   1aba4:	ee8c 4b09 	vdiv.f64	d4, d12, d9
   1aba8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
   1abac:	ed9f 6b24 	vldr	d6, [pc, #144]	; 1ac40 <__ieee754_asin+0x1e0>
   1abb0:	eea0 0b04 	vfma.f64	d0, d0, d4
   1abb4:	eea0 7b05 	vfma.f64	d7, d0, d5
   1abb8:	ee36 7b47 	vsub.f64	d7, d6, d7
   1abbc:	e7e6      	b.n	1ab8c <__ieee754_asin+0x12c>
   1abbe:	eeb0 7b40 	vmov.f64	d7, d0
   1abc2:	e763      	b.n	1aa8c <__ieee754_asin+0x2c>
   1abc4:	ed9f 8b24 	vldr	d8, [pc, #144]	; 1ac58 <__ieee754_asin+0x1f8>
   1abc8:	ee20 6b00 	vmul.f64	d6, d0, d0
   1abcc:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1ac60 <__ieee754_asin+0x200>
   1abd0:	ed9f 3b25 	vldr	d3, [pc, #148]	; 1ac68 <__ieee754_asin+0x208>
   1abd4:	eea6 5b08 	vfma.f64	d5, d6, d8
   1abd8:	ed9f 4b25 	vldr	d4, [pc, #148]	; 1ac70 <__ieee754_asin+0x210>
   1abdc:	eea5 3b06 	vfma.f64	d3, d5, d6
   1abe0:	ed9f 2b25 	vldr	d2, [pc, #148]	; 1ac78 <__ieee754_asin+0x218>
   1abe4:	eea3 4b06 	vfma.f64	d4, d3, d6
   1abe8:	ecbd 8b0a 	vpop	{d8-d12}
   1abec:	eea4 2b06 	vfma.f64	d2, d4, d6
   1abf0:	ed9f 7b23 	vldr	d7, [pc, #140]	; 1ac80 <__ieee754_asin+0x220>
   1abf4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 1ac50 <__ieee754_asin+0x1f0>
   1abf8:	eea2 7b06 	vfma.f64	d7, d2, d6
   1abfc:	ee27 7b06 	vmul.f64	d7, d7, d6
   1ac00:	ed9f 5b21 	vldr	d5, [pc, #132]	; 1ac88 <__ieee754_asin+0x228>
   1ac04:	ed9f 3b22 	vldr	d3, [pc, #136]	; 1ac90 <__ieee754_asin+0x230>
   1ac08:	eea6 5b01 	vfma.f64	d5, d6, d1
   1ac0c:	ed9f 4b22 	vldr	d4, [pc, #136]	; 1ac98 <__ieee754_asin+0x238>
   1ac10:	eea5 3b06 	vfma.f64	d3, d5, d6
   1ac14:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
   1ac18:	eea3 4b06 	vfma.f64	d4, d3, d6
   1ac1c:	eea4 5b06 	vfma.f64	d5, d4, d6
   1ac20:	ee87 6b05 	vdiv.f64	d6, d7, d5
   1ac24:	eeb0 7b40 	vmov.f64	d7, d0
   1ac28:	eea0 7b06 	vfma.f64	d7, d0, d6
   1ac2c:	eeb0 0b47 	vmov.f64	d0, d7
   1ac30:	bd38      	pop	{r3, r4, r5, pc}
   1ac32:	bf00      	nop
   1ac34:	f3af 8000 	nop.w
   1ac38:	33145c07 	.word	0x33145c07
   1ac3c:	3c91a626 	.word	0x3c91a626
   1ac40:	54442d18 	.word	0x54442d18
   1ac44:	3ff921fb 	.word	0x3ff921fb
   1ac48:	8800759c 	.word	0x8800759c
   1ac4c:	7e37e43c 	.word	0x7e37e43c
   1ac50:	b12e9282 	.word	0xb12e9282
   1ac54:	3fb3b8c5 	.word	0x3fb3b8c5
   1ac58:	0dfdf709 	.word	0x0dfdf709
   1ac5c:	3f023de1 	.word	0x3f023de1
   1ac60:	7501b288 	.word	0x7501b288
   1ac64:	3f49efe0 	.word	0x3f49efe0
   1ac68:	b5688f3b 	.word	0xb5688f3b
   1ac6c:	bfa48228 	.word	0xbfa48228
   1ac70:	0e884455 	.word	0x0e884455
   1ac74:	3fc9c155 	.word	0x3fc9c155
   1ac78:	03eb6f7d 	.word	0x03eb6f7d
   1ac7c:	bfd4d612 	.word	0xbfd4d612
   1ac80:	55555555 	.word	0x55555555
   1ac84:	3fc55555 	.word	0x3fc55555
   1ac88:	1b8d0159 	.word	0x1b8d0159
   1ac8c:	bfe6066c 	.word	0xbfe6066c
   1ac90:	9c598ac8 	.word	0x9c598ac8
   1ac94:	40002ae5 	.word	0x40002ae5
   1ac98:	1c8a2d4b 	.word	0x1c8a2d4b
   1ac9c:	c0033a27 	.word	0xc0033a27
   1aca0:	54442d18 	.word	0x54442d18
   1aca4:	3fe921fb 	.word	0x3fe921fb
   1aca8:	33145c07 	.word	0x33145c07
   1acac:	bc91a626 	.word	0xbc91a626
   1acb0:	3fefffff 	.word	0x3fefffff
   1acb4:	3fdfffff 	.word	0x3fdfffff
   1acb8:	3fef3332 	.word	0x3fef3332
   1acbc:	00000000 	.word	0x00000000

0001acc0 <__ieee754_atan2>:
   1acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acc4:	ec51 0b11 	vmov	r0, r1, d1
   1acc8:	4243      	negs	r3, r0
   1acca:	4c61      	ldr	r4, [pc, #388]	; (1ae50 <__ieee754_atan2+0x190>)
   1accc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   1acd0:	4303      	orrs	r3, r0
   1acd2:	ea46 73d3 	orr.w	r3, r6, r3, lsr #31
   1acd6:	b082      	sub	sp, #8
   1acd8:	42a3      	cmp	r3, r4
   1acda:	ed8d 0b00 	vstr	d0, [sp]
   1acde:	d83c      	bhi.n	1ad5a <__ieee754_atan2+0x9a>
   1ace0:	e9dd e700 	ldrd	lr, r7, [sp]
   1ace4:	f1ce 0300 	rsb	r3, lr, #0
   1ace8:	ea43 030e 	orr.w	r3, r3, lr
   1acec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
   1acf0:	ea48 73d3 	orr.w	r3, r8, r3, lsr #31
   1acf4:	42a3      	cmp	r3, r4
   1acf6:	d830      	bhi.n	1ad5a <__ieee754_atan2+0x9a>
   1acf8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   1acfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1ad00:	4303      	orrs	r3, r0
   1ad02:	ee11 2a10 	vmov	r2, s2
   1ad06:	d03d      	beq.n	1ad84 <__ieee754_atan2+0xc4>
   1ad08:	178d      	asrs	r5, r1, #30
   1ad0a:	f005 0502 	and.w	r5, r5, #2
   1ad0e:	ea58 0e0e 	orrs.w	lr, r8, lr
   1ad12:	ea45 75d7 	orr.w	r5, r5, r7, lsr #31
   1ad16:	d029      	beq.n	1ad6c <__ieee754_atan2+0xac>
   1ad18:	4332      	orrs	r2, r6
   1ad1a:	d038      	beq.n	1ad8e <__ieee754_atan2+0xce>
   1ad1c:	42a6      	cmp	r6, r4
   1ad1e:	d044      	beq.n	1adaa <__ieee754_atan2+0xea>
   1ad20:	45a0      	cmp	r8, r4
   1ad22:	d034      	beq.n	1ad8e <__ieee754_atan2+0xce>
   1ad24:	eba8 0806 	sub.w	r8, r8, r6
   1ad28:	f1b8 7f74 	cmp.w	r8, #63963136	; 0x3d00000
   1ad2c:	ea4f 5328 	mov.w	r3, r8, asr #20
   1ad30:	da38      	bge.n	1ada4 <__ieee754_atan2+0xe4>
   1ad32:	2900      	cmp	r1, #0
   1ad34:	da45      	bge.n	1adc2 <__ieee754_atan2+0x102>
   1ad36:	333c      	adds	r3, #60	; 0x3c
   1ad38:	da43      	bge.n	1adc2 <__ieee754_atan2+0x102>
   1ad3a:	ed9f 0b37 	vldr	d0, [pc, #220]	; 1ae18 <__ieee754_atan2+0x158>
   1ad3e:	2d01      	cmp	r5, #1
   1ad40:	d053      	beq.n	1adea <__ieee754_atan2+0x12a>
   1ad42:	2d02      	cmp	r5, #2
   1ad44:	d048      	beq.n	1add8 <__ieee754_atan2+0x118>
   1ad46:	b175      	cbz	r5, 1ad66 <__ieee754_atan2+0xa6>
   1ad48:	ed9f 6b35 	vldr	d6, [pc, #212]	; 1ae20 <__ieee754_atan2+0x160>
   1ad4c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 1ae28 <__ieee754_atan2+0x168>
   1ad50:	ee30 0b46 	vsub.f64	d0, d0, d6
   1ad54:	ee30 0b47 	vsub.f64	d0, d0, d7
   1ad58:	e005      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1ad5a:	ed9d 6b00 	vldr	d6, [sp]
   1ad5e:	ec41 0b17 	vmov	d7, r0, r1
   1ad62:	ee37 0b06 	vadd.f64	d0, d7, d6
   1ad66:	b002      	add	sp, #8
   1ad68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad6c:	2d02      	cmp	r5, #2
   1ad6e:	d016      	beq.n	1ad9e <__ieee754_atan2+0xde>
   1ad70:	ed9d 7b00 	vldr	d7, [sp]
   1ad74:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 1ae30 <__ieee754_atan2+0x170>
   1ad78:	2d03      	cmp	r5, #3
   1ad7a:	fe00 0b07 	vseleq.f64	d0, d0, d7
   1ad7e:	b002      	add	sp, #8
   1ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad84:	b002      	add	sp, #8
   1ad86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad8a:	f000 b889 	b.w	1aea0 <atan>
   1ad8e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 1ae38 <__ieee754_atan2+0x178>
   1ad92:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 1ae40 <__ieee754_atan2+0x180>
   1ad96:	2f00      	cmp	r7, #0
   1ad98:	fe20 0b07 	vselge.f64	d0, d0, d7
   1ad9c:	e7e3      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1ad9e:	ed9f 0b22 	vldr	d0, [pc, #136]	; 1ae28 <__ieee754_atan2+0x168>
   1ada2:	e7e0      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1ada4:	ed9f 0b24 	vldr	d0, [pc, #144]	; 1ae38 <__ieee754_atan2+0x178>
   1ada8:	e7c9      	b.n	1ad3e <__ieee754_atan2+0x7e>
   1adaa:	45b0      	cmp	r8, r6
   1adac:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1adb0:	d024      	beq.n	1adfc <__ieee754_atan2+0x13c>
   1adb2:	2d02      	cmp	r5, #2
   1adb4:	d82a      	bhi.n	1ae0c <__ieee754_atan2+0x14c>
   1adb6:	4b27      	ldr	r3, [pc, #156]	; (1ae54 <__ieee754_atan2+0x194>)
   1adb8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1adbc:	ed93 0b00 	vldr	d0, [r3]
   1adc0:	e7d1      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1adc2:	ed9d 7b00 	vldr	d7, [sp]
   1adc6:	ec41 0b16 	vmov	d6, r0, r1
   1adca:	ee87 0b06 	vdiv.f64	d0, d7, d6
   1adce:	f000 f9af 	bl	1b130 <fabs>
   1add2:	f000 f865 	bl	1aea0 <atan>
   1add6:	e7b2      	b.n	1ad3e <__ieee754_atan2+0x7e>
   1add8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 1ae20 <__ieee754_atan2+0x160>
   1addc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 1ae28 <__ieee754_atan2+0x168>
   1ade0:	ee30 0b46 	vsub.f64	d0, d0, d6
   1ade4:	ee37 0b40 	vsub.f64	d0, d7, d0
   1ade8:	e7bd      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1adea:	ee10 1a90 	vmov	r1, s1
   1adee:	ec53 2b10 	vmov	r2, r3, d0
   1adf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1adf6:	ec43 2b10 	vmov	d0, r2, r3
   1adfa:	e7b4      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1adfc:	2d02      	cmp	r5, #2
   1adfe:	d808      	bhi.n	1ae12 <__ieee754_atan2+0x152>
   1ae00:	4b15      	ldr	r3, [pc, #84]	; (1ae58 <__ieee754_atan2+0x198>)
   1ae02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1ae06:	ed93 0b00 	vldr	d0, [r3]
   1ae0a:	e7ac      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1ae0c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 1ae18 <__ieee754_atan2+0x158>
   1ae10:	e7a9      	b.n	1ad66 <__ieee754_atan2+0xa6>
   1ae12:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 1ae48 <__ieee754_atan2+0x188>
   1ae16:	e7a6      	b.n	1ad66 <__ieee754_atan2+0xa6>
	...
   1ae20:	33145c07 	.word	0x33145c07
   1ae24:	3ca1a626 	.word	0x3ca1a626
   1ae28:	54442d18 	.word	0x54442d18
   1ae2c:	400921fb 	.word	0x400921fb
   1ae30:	54442d18 	.word	0x54442d18
   1ae34:	c00921fb 	.word	0xc00921fb
   1ae38:	54442d18 	.word	0x54442d18
   1ae3c:	3ff921fb 	.word	0x3ff921fb
   1ae40:	54442d18 	.word	0x54442d18
   1ae44:	bff921fb 	.word	0xbff921fb
   1ae48:	54442d18 	.word	0x54442d18
   1ae4c:	3fe921fb 	.word	0x3fe921fb
   1ae50:	7ff00000 	.word	0x7ff00000
   1ae54:	20000298 	.word	0x20000298
   1ae58:	20000280 	.word	0x20000280

0001ae5c <sqrtf>:
   1ae5c:	b508      	push	{r3, lr}
   1ae5e:	ed2d 8b02 	vpush	{d8}
   1ae62:	eeb0 8a40 	vmov.f32	s16, s0
   1ae66:	f000 faeb 	bl	1b440 <__ieee754_sqrtf>
   1ae6a:	eeb4 8a48 	vcmp.f32	s16, s16
   1ae6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae72:	d606      	bvs.n	1ae82 <sqrtf+0x26>
   1ae74:	eddf 8a09 	vldr	s17, [pc, #36]	; 1ae9c <sqrtf+0x40>
   1ae78:	eeb4 8ae8 	vcmpe.f32	s16, s17
   1ae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ae80:	d402      	bmi.n	1ae88 <sqrtf+0x2c>
   1ae82:	ecbd 8b02 	vpop	{d8}
   1ae86:	bd08      	pop	{r3, pc}
   1ae88:	f004 fd74 	bl	1f974 <__errno>
   1ae8c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   1ae90:	ecbd 8b02 	vpop	{d8}
   1ae94:	2321      	movs	r3, #33	; 0x21
   1ae96:	6003      	str	r3, [r0, #0]
   1ae98:	bd08      	pop	{r3, pc}
   1ae9a:	bf00      	nop
   1ae9c:	00000000 	.word	0x00000000

0001aea0 <atan>:
   1aea0:	b538      	push	{r3, r4, r5, lr}
   1aea2:	eeb0 7b40 	vmov.f64	d7, d0
   1aea6:	ee17 5a90 	vmov	r5, s15
   1aeaa:	4b79      	ldr	r3, [pc, #484]	; (1b090 <atan+0x1f0>)
   1aeac:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   1aeb0:	429c      	cmp	r4, r3
   1aeb2:	ed2d 8b0c 	vpush	{d8-d13}
   1aeb6:	dd16      	ble.n	1aee6 <atan+0x46>
   1aeb8:	4b76      	ldr	r3, [pc, #472]	; (1b094 <atan+0x1f4>)
   1aeba:	429c      	cmp	r4, r3
   1aebc:	dc0e      	bgt.n	1aedc <atan+0x3c>
   1aebe:	d009      	beq.n	1aed4 <atan+0x34>
   1aec0:	ed9f 7b57 	vldr	d7, [pc, #348]	; 1b020 <atan+0x180>
   1aec4:	ed9f 0b58 	vldr	d0, [pc, #352]	; 1b028 <atan+0x188>
   1aec8:	2d00      	cmp	r5, #0
   1aeca:	fe37 0b00 	vselgt.f64	d0, d7, d0
   1aece:	ecbd 8b0c 	vpop	{d8-d13}
   1aed2:	bd38      	pop	{r3, r4, r5, pc}
   1aed4:	ee10 3a10 	vmov	r3, s0
   1aed8:	2b00      	cmp	r3, #0
   1aeda:	d0f1      	beq.n	1aec0 <atan+0x20>
   1aedc:	ee37 0b07 	vadd.f64	d0, d7, d7
   1aee0:	ecbd 8b0c 	vpop	{d8-d13}
   1aee4:	bd38      	pop	{r3, r4, r5, pc}
   1aee6:	4b6c      	ldr	r3, [pc, #432]	; (1b098 <atan+0x1f8>)
   1aee8:	429c      	cmp	r4, r3
   1aeea:	dc5c      	bgt.n	1afa6 <atan+0x106>
   1aeec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   1aef0:	429c      	cmp	r4, r3
   1aef2:	dd4c      	ble.n	1af8e <atan+0xee>
   1aef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aef8:	ed9f ab4d 	vldr	d10, [pc, #308]	; 1b030 <atan+0x190>
   1aefc:	ee27 5b07 	vmul.f64	d5, d7, d7
   1af00:	ee25 6b05 	vmul.f64	d6, d5, d5
   1af04:	ed9f 8b4c 	vldr	d8, [pc, #304]	; 1b038 <atan+0x198>
   1af08:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 1b040 <atan+0x1a0>
   1af0c:	eea6 8b0a 	vfma.f64	d8, d6, d10
   1af10:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 1b048 <atan+0x1a8>
   1af14:	eea8 1b06 	vfma.f64	d1, d8, d6
   1af18:	ed9f bb4d 	vldr	d11, [pc, #308]	; 1b050 <atan+0x1b0>
   1af1c:	eea1 3b06 	vfma.f64	d3, d1, d6
   1af20:	ed9f db4d 	vldr	d13, [pc, #308]	; 1b058 <atan+0x1b8>
   1af24:	eea3 bb06 	vfma.f64	d11, d3, d6
   1af28:	ed9f 9b4d 	vldr	d9, [pc, #308]	; 1b060 <atan+0x1c0>
   1af2c:	eeab db06 	vfma.f64	d13, d11, d6
   1af30:	ee2d db05 	vmul.f64	d13, d13, d5
   1af34:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 1b068 <atan+0x1c8>
   1af38:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 1b070 <atan+0x1d0>
   1af3c:	eea6 0b09 	vfma.f64	d0, d6, d9
   1af40:	ed9f 4b4d 	vldr	d4, [pc, #308]	; 1b078 <atan+0x1d8>
   1af44:	eea0 2b06 	vfma.f64	d2, d0, d6
   1af48:	ed9f cb4d 	vldr	d12, [pc, #308]	; 1b080 <atan+0x1e0>
   1af4c:	eea2 4b06 	vfma.f64	d4, d2, d6
   1af50:	1c5a      	adds	r2, r3, #1
   1af52:	eea4 cb06 	vfma.f64	d12, d4, d6
   1af56:	ee2c cb06 	vmul.f64	d12, d12, d6
   1af5a:	d039      	beq.n	1afd0 <atan+0x130>
   1af5c:	ee3d db0c 	vadd.f64	d13, d13, d12
   1af60:	494e      	ldr	r1, [pc, #312]	; (1b09c <atan+0x1fc>)
   1af62:	4a4f      	ldr	r2, [pc, #316]	; (1b0a0 <atan+0x200>)
   1af64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1af68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1af6c:	ed91 6b00 	vldr	d6, [r1]
   1af70:	ed93 0b00 	vldr	d0, [r3]
   1af74:	ee9d 6b07 	vfnms.f64	d6, d13, d7
   1af78:	ee36 7b47 	vsub.f64	d7, d6, d7
   1af7c:	2d00      	cmp	r5, #0
   1af7e:	ee30 0b47 	vsub.f64	d0, d0, d7
   1af82:	daa4      	bge.n	1aece <atan+0x2e>
   1af84:	eeb1 0b40 	vneg.f64	d0, d0
   1af88:	ecbd 8b0c 	vpop	{d8-d13}
   1af8c:	bd38      	pop	{r3, r4, r5, pc}
   1af8e:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 1b088 <atan+0x1e8>
   1af92:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
   1af96:	ee30 6b06 	vadd.f64	d6, d0, d6
   1af9a:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1af9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1afa2:	dda7      	ble.n	1aef4 <atan+0x54>
   1afa4:	e793      	b.n	1aece <atan+0x2e>
   1afa6:	f000 f8c3 	bl	1b130 <fabs>
   1afaa:	4b3e      	ldr	r3, [pc, #248]	; (1b0a4 <atan+0x204>)
   1afac:	429c      	cmp	r4, r3
   1afae:	dc18      	bgt.n	1afe2 <atan+0x142>
   1afb0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   1afb4:	429c      	cmp	r4, r3
   1afb6:	dc29      	bgt.n	1b00c <atan+0x16c>
   1afb8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   1afbc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
   1afc0:	ee30 5b07 	vadd.f64	d5, d0, d7
   1afc4:	eea0 6b07 	vfma.f64	d6, d0, d7
   1afc8:	2300      	movs	r3, #0
   1afca:	ee86 7b05 	vdiv.f64	d7, d6, d5
   1afce:	e793      	b.n	1aef8 <atan+0x58>
   1afd0:	ee3d db0c 	vadd.f64	d13, d13, d12
   1afd4:	eead 7b47 	vfms.f64	d7, d13, d7
   1afd8:	ecbd 8b0c 	vpop	{d8-d13}
   1afdc:	eeb0 0b47 	vmov.f64	d0, d7
   1afe0:	bd38      	pop	{r3, r4, r5, pc}
   1afe2:	4b31      	ldr	r3, [pc, #196]	; (1b0a8 <atan+0x208>)
   1afe4:	429c      	cmp	r4, r3
   1afe6:	da0b      	bge.n	1b000 <atan+0x160>
   1afe8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
   1afec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1aff0:	ee30 5b47 	vsub.f64	d5, d0, d7
   1aff4:	eea0 6b07 	vfma.f64	d6, d0, d7
   1aff8:	2302      	movs	r3, #2
   1affa:	ee85 7b06 	vdiv.f64	d7, d5, d6
   1affe:	e77b      	b.n	1aef8 <atan+0x58>
   1b000:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
   1b004:	2303      	movs	r3, #3
   1b006:	ee86 7b00 	vdiv.f64	d7, d6, d0
   1b00a:	e775      	b.n	1aef8 <atan+0x58>
   1b00c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1b010:	2301      	movs	r3, #1
   1b012:	ee30 5b47 	vsub.f64	d5, d0, d7
   1b016:	ee30 0b07 	vadd.f64	d0, d0, d7
   1b01a:	ee85 7b00 	vdiv.f64	d7, d5, d0
   1b01e:	e76b      	b.n	1aef8 <atan+0x58>
   1b020:	54442d18 	.word	0x54442d18
   1b024:	3ff921fb 	.word	0x3ff921fb
   1b028:	54442d18 	.word	0x54442d18
   1b02c:	bff921fb 	.word	0xbff921fb
   1b030:	e322da11 	.word	0xe322da11
   1b034:	3f90ad3a 	.word	0x3f90ad3a
   1b038:	24760deb 	.word	0x24760deb
   1b03c:	3fa97b4b 	.word	0x3fa97b4b
   1b040:	a0d03d51 	.word	0xa0d03d51
   1b044:	3fb10d66 	.word	0x3fb10d66
   1b048:	c54c206e 	.word	0xc54c206e
   1b04c:	3fb745cd 	.word	0x3fb745cd
   1b050:	920083ff 	.word	0x920083ff
   1b054:	3fc24924 	.word	0x3fc24924
   1b058:	5555550d 	.word	0x5555550d
   1b05c:	3fd55555 	.word	0x3fd55555
   1b060:	2c6a6c2f 	.word	0x2c6a6c2f
   1b064:	bfa2b444 	.word	0xbfa2b444
   1b068:	52defd9a 	.word	0x52defd9a
   1b06c:	bfadde2d 	.word	0xbfadde2d
   1b070:	af749a6d 	.word	0xaf749a6d
   1b074:	bfb3b0f2 	.word	0xbfb3b0f2
   1b078:	fe231671 	.word	0xfe231671
   1b07c:	bfbc71c6 	.word	0xbfbc71c6
   1b080:	9998ebc4 	.word	0x9998ebc4
   1b084:	bfc99999 	.word	0xbfc99999
   1b088:	8800759c 	.word	0x8800759c
   1b08c:	7e37e43c 	.word	0x7e37e43c
   1b090:	440fffff 	.word	0x440fffff
   1b094:	7ff00000 	.word	0x7ff00000
   1b098:	3fdbffff 	.word	0x3fdbffff
   1b09c:	20001da8 	.word	0x20001da8
   1b0a0:	20001d88 	.word	0x20001d88
   1b0a4:	3ff2ffff 	.word	0x3ff2ffff
   1b0a8:	40038000 	.word	0x40038000
   1b0ac:	00000000 	.word	0x00000000

0001b0b0 <cos>:
   1b0b0:	eeb0 7b40 	vmov.f64	d7, d0
   1b0b4:	ee17 3a90 	vmov	r3, s15
   1b0b8:	4a1b      	ldr	r2, [pc, #108]	; (1b128 <cos+0x78>)
   1b0ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b0be:	4293      	cmp	r3, r2
   1b0c0:	dd1b      	ble.n	1b0fa <cos+0x4a>
   1b0c2:	4a1a      	ldr	r2, [pc, #104]	; (1b12c <cos+0x7c>)
   1b0c4:	4293      	cmp	r3, r2
   1b0c6:	dd02      	ble.n	1b0ce <cos+0x1e>
   1b0c8:	ee30 0b40 	vsub.f64	d0, d0, d0
   1b0cc:	4770      	bx	lr
   1b0ce:	b500      	push	{lr}
   1b0d0:	b085      	sub	sp, #20
   1b0d2:	4668      	mov	r0, sp
   1b0d4:	f000 fc78 	bl	1b9c8 <__ieee754_rem_pio2>
   1b0d8:	f000 0003 	and.w	r0, r0, #3
   1b0dc:	2801      	cmp	r0, #1
   1b0de:	ed9d 1b02 	vldr	d1, [sp, #8]
   1b0e2:	ed9d 0b00 	vldr	d0, [sp]
   1b0e6:	d00c      	beq.n	1b102 <cos+0x52>
   1b0e8:	2802      	cmp	r0, #2
   1b0ea:	d012      	beq.n	1b112 <cos+0x62>
   1b0ec:	b170      	cbz	r0, 1b10c <cos+0x5c>
   1b0ee:	2001      	movs	r0, #1
   1b0f0:	f001 fa0a 	bl	1c508 <__kernel_sin>
   1b0f4:	b005      	add	sp, #20
   1b0f6:	f85d fb04 	ldr.w	pc, [sp], #4
   1b0fa:	ed9f 1b09 	vldr	d1, [pc, #36]	; 1b120 <cos+0x70>
   1b0fe:	f001 b96b 	b.w	1c3d8 <__kernel_cos>
   1b102:	f001 fa01 	bl	1c508 <__kernel_sin>
   1b106:	eeb1 0b40 	vneg.f64	d0, d0
   1b10a:	e7f3      	b.n	1b0f4 <cos+0x44>
   1b10c:	f001 f964 	bl	1c3d8 <__kernel_cos>
   1b110:	e7f0      	b.n	1b0f4 <cos+0x44>
   1b112:	f001 f961 	bl	1c3d8 <__kernel_cos>
   1b116:	eeb1 0b40 	vneg.f64	d0, d0
   1b11a:	e7eb      	b.n	1b0f4 <cos+0x44>
   1b11c:	f3af 8000 	nop.w
	...
   1b128:	3fe921fb 	.word	0x3fe921fb
   1b12c:	7fefffff 	.word	0x7fefffff

0001b130 <fabs>:
   1b130:	ec51 0b10 	vmov	r0, r1, d0
   1b134:	ee10 2a10 	vmov	r2, s0
   1b138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1b13c:	ec43 2b10 	vmov	d0, r2, r3
   1b140:	4770      	bx	lr
   1b142:	bf00      	nop

0001b144 <tanf>:
   1b144:	ee10 3a10 	vmov	r3, s0
   1b148:	4a11      	ldr	r2, [pc, #68]	; (1b190 <tanf+0x4c>)
   1b14a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b14e:	4293      	cmp	r3, r2
   1b150:	dd18      	ble.n	1b184 <tanf+0x40>
   1b152:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1b156:	db02      	blt.n	1b15e <tanf+0x1a>
   1b158:	ee30 0a40 	vsub.f32	s0, s0, s0
   1b15c:	4770      	bx	lr
   1b15e:	b500      	push	{lr}
   1b160:	b083      	sub	sp, #12
   1b162:	4668      	mov	r0, sp
   1b164:	f000 faca 	bl	1b6fc <__ieee754_rem_pio2f>
   1b168:	0040      	lsls	r0, r0, #1
   1b16a:	f000 0002 	and.w	r0, r0, #2
   1b16e:	eddd 0a01 	vldr	s1, [sp, #4]
   1b172:	ed9d 0a00 	vldr	s0, [sp]
   1b176:	f1c0 0001 	rsb	r0, r0, #1
   1b17a:	f000 f87d 	bl	1b278 <__kernel_tanf>
   1b17e:	b003      	add	sp, #12
   1b180:	f85d fb04 	ldr.w	pc, [sp], #4
   1b184:	eddf 0a03 	vldr	s1, [pc, #12]	; 1b194 <tanf+0x50>
   1b188:	2001      	movs	r0, #1
   1b18a:	f000 b875 	b.w	1b278 <__kernel_tanf>
   1b18e:	bf00      	nop
   1b190:	3f490fda 	.word	0x3f490fda
   1b194:	00000000 	.word	0x00000000

0001b198 <sin>:
   1b198:	eeb0 7b40 	vmov.f64	d7, d0
   1b19c:	ee17 3a90 	vmov	r3, s15
   1b1a0:	4a1b      	ldr	r2, [pc, #108]	; (1b210 <sin+0x78>)
   1b1a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b1a6:	4293      	cmp	r3, r2
   1b1a8:	dd1c      	ble.n	1b1e4 <sin+0x4c>
   1b1aa:	4a1a      	ldr	r2, [pc, #104]	; (1b214 <sin+0x7c>)
   1b1ac:	4293      	cmp	r3, r2
   1b1ae:	dd02      	ble.n	1b1b6 <sin+0x1e>
   1b1b0:	ee30 0b40 	vsub.f64	d0, d0, d0
   1b1b4:	4770      	bx	lr
   1b1b6:	b500      	push	{lr}
   1b1b8:	b085      	sub	sp, #20
   1b1ba:	4668      	mov	r0, sp
   1b1bc:	f000 fc04 	bl	1b9c8 <__ieee754_rem_pio2>
   1b1c0:	f000 0003 	and.w	r0, r0, #3
   1b1c4:	2801      	cmp	r0, #1
   1b1c6:	ed9d 1b02 	vldr	d1, [sp, #8]
   1b1ca:	ed9d 0b00 	vldr	d0, [sp]
   1b1ce:	d00e      	beq.n	1b1ee <sin+0x56>
   1b1d0:	2802      	cmp	r0, #2
   1b1d2:	d013      	beq.n	1b1fc <sin+0x64>
   1b1d4:	b170      	cbz	r0, 1b1f4 <sin+0x5c>
   1b1d6:	f001 f8ff 	bl	1c3d8 <__kernel_cos>
   1b1da:	eeb1 0b40 	vneg.f64	d0, d0
   1b1de:	b005      	add	sp, #20
   1b1e0:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1e4:	ed9f 1b08 	vldr	d1, [pc, #32]	; 1b208 <sin+0x70>
   1b1e8:	2000      	movs	r0, #0
   1b1ea:	f001 b98d 	b.w	1c508 <__kernel_sin>
   1b1ee:	f001 f8f3 	bl	1c3d8 <__kernel_cos>
   1b1f2:	e7f4      	b.n	1b1de <sin+0x46>
   1b1f4:	2001      	movs	r0, #1
   1b1f6:	f001 f987 	bl	1c508 <__kernel_sin>
   1b1fa:	e7f0      	b.n	1b1de <sin+0x46>
   1b1fc:	2001      	movs	r0, #1
   1b1fe:	f001 f983 	bl	1c508 <__kernel_sin>
   1b202:	eeb1 0b40 	vneg.f64	d0, d0
   1b206:	e7ea      	b.n	1b1de <sin+0x46>
	...
   1b210:	3fe921fb 	.word	0x3fe921fb
   1b214:	7fefffff 	.word	0x7fefffff

0001b218 <tan>:
   1b218:	eeb0 7b40 	vmov.f64	d7, d0
   1b21c:	ee17 3a90 	vmov	r3, s15
   1b220:	4a13      	ldr	r2, [pc, #76]	; (1b270 <tan+0x58>)
   1b222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1b226:	4293      	cmp	r3, r2
   1b228:	dd18      	ble.n	1b25c <tan+0x44>
   1b22a:	4a12      	ldr	r2, [pc, #72]	; (1b274 <tan+0x5c>)
   1b22c:	4293      	cmp	r3, r2
   1b22e:	dd02      	ble.n	1b236 <tan+0x1e>
   1b230:	ee30 0b40 	vsub.f64	d0, d0, d0
   1b234:	4770      	bx	lr
   1b236:	b500      	push	{lr}
   1b238:	b085      	sub	sp, #20
   1b23a:	4668      	mov	r0, sp
   1b23c:	f000 fbc4 	bl	1b9c8 <__ieee754_rem_pio2>
   1b240:	0040      	lsls	r0, r0, #1
   1b242:	f000 0002 	and.w	r0, r0, #2
   1b246:	ed9d 1b02 	vldr	d1, [sp, #8]
   1b24a:	ed9d 0b00 	vldr	d0, [sp]
   1b24e:	f1c0 0001 	rsb	r0, r0, #1
   1b252:	f001 f9b1 	bl	1c5b8 <__kernel_tan>
   1b256:	b005      	add	sp, #20
   1b258:	f85d fb04 	ldr.w	pc, [sp], #4
   1b25c:	ed9f 1b02 	vldr	d1, [pc, #8]	; 1b268 <tan+0x50>
   1b260:	2001      	movs	r0, #1
   1b262:	f001 b9a9 	b.w	1c5b8 <__kernel_tan>
   1b266:	bf00      	nop
	...
   1b270:	3fe921fb 	.word	0x3fe921fb
   1b274:	7fefffff 	.word	0x7fefffff

0001b278 <__kernel_tanf>:
   1b278:	b508      	push	{r3, lr}
   1b27a:	ee10 3a10 	vmov	r3, s0
   1b27e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1b282:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   1b286:	eef0 7a40 	vmov.f32	s15, s0
   1b28a:	da0f      	bge.n	1b2ac <__kernel_tanf+0x34>
   1b28c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
   1b290:	ee17 1a10 	vmov	r1, s14
   1b294:	b9f9      	cbnz	r1, 1b2d6 <__kernel_tanf+0x5e>
   1b296:	1c43      	adds	r3, r0, #1
   1b298:	4313      	orrs	r3, r2
   1b29a:	f000 809f 	beq.w	1b3dc <__kernel_tanf+0x164>
   1b29e:	2801      	cmp	r0, #1
   1b2a0:	d003      	beq.n	1b2aa <__kernel_tanf+0x32>
   1b2a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1b2a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
   1b2aa:	bd08      	pop	{r3, pc}
   1b2ac:	4950      	ldr	r1, [pc, #320]	; (1b3f0 <__kernel_tanf+0x178>)
   1b2ae:	428a      	cmp	r2, r1
   1b2b0:	db11      	blt.n	1b2d6 <__kernel_tanf+0x5e>
   1b2b2:	ed9f 7a50 	vldr	s14, [pc, #320]	; 1b3f4 <__kernel_tanf+0x17c>
   1b2b6:	eddf 6a50 	vldr	s13, [pc, #320]	; 1b3f8 <__kernel_tanf+0x180>
   1b2ba:	2b00      	cmp	r3, #0
   1b2bc:	bfbc      	itt	lt
   1b2be:	eef1 0a60 	vneglt.f32	s1, s1
   1b2c2:	eef1 7a40 	vneglt.f32	s15, s0
   1b2c6:	ee77 7a67 	vsub.f32	s15, s14, s15
   1b2ca:	ee36 7ae0 	vsub.f32	s14, s13, s1
   1b2ce:	eddf 0a4b 	vldr	s1, [pc, #300]	; 1b3fc <__kernel_tanf+0x184>
   1b2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
   1b2d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
   1b2da:	eddf 4a49 	vldr	s9, [pc, #292]	; 1b400 <__kernel_tanf+0x188>
   1b2de:	eddf 5a49 	vldr	s11, [pc, #292]	; 1b404 <__kernel_tanf+0x18c>
   1b2e2:	ed9f 5a49 	vldr	s10, [pc, #292]	; 1b408 <__kernel_tanf+0x190>
   1b2e6:	ed9f 6a49 	vldr	s12, [pc, #292]	; 1b40c <__kernel_tanf+0x194>
   1b2ea:	4941      	ldr	r1, [pc, #260]	; (1b3f0 <__kernel_tanf+0x178>)
   1b2ec:	ee26 7aa6 	vmul.f32	s14, s13, s13
   1b2f0:	428a      	cmp	r2, r1
   1b2f2:	eee7 5a24 	vfma.f32	s11, s14, s9
   1b2f6:	eea7 6a05 	vfma.f32	s12, s14, s10
   1b2fa:	eddf 4a45 	vldr	s9, [pc, #276]	; 1b410 <__kernel_tanf+0x198>
   1b2fe:	ed9f 5a45 	vldr	s10, [pc, #276]	; 1b414 <__kernel_tanf+0x19c>
   1b302:	eee5 4a87 	vfma.f32	s9, s11, s14
   1b306:	eea6 5a07 	vfma.f32	s10, s12, s14
   1b30a:	eddf 5a43 	vldr	s11, [pc, #268]	; 1b418 <__kernel_tanf+0x1a0>
   1b30e:	ed9f 6a43 	vldr	s12, [pc, #268]	; 1b41c <__kernel_tanf+0x1a4>
   1b312:	eee4 5a87 	vfma.f32	s11, s9, s14
   1b316:	eea5 6a07 	vfma.f32	s12, s10, s14
   1b31a:	eddf 4a41 	vldr	s9, [pc, #260]	; 1b420 <__kernel_tanf+0x1a8>
   1b31e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 1b424 <__kernel_tanf+0x1ac>
   1b322:	eee5 4a87 	vfma.f32	s9, s11, s14
   1b326:	eea6 5a07 	vfma.f32	s10, s12, s14
   1b32a:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 1b428 <__kernel_tanf+0x1b0>
   1b32e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 1b42c <__kernel_tanf+0x1b4>
   1b332:	eea4 6a87 	vfma.f32	s12, s9, s14
   1b336:	eee5 5a07 	vfma.f32	s11, s10, s14
   1b33a:	eeb0 7a46 	vmov.f32	s14, s12
   1b33e:	eea5 7aa6 	vfma.f32	s14, s11, s13
   1b342:	ee27 5aa6 	vmul.f32	s10, s15, s13
   1b346:	eeb0 6a60 	vmov.f32	s12, s1
   1b34a:	eea7 6a05 	vfma.f32	s12, s14, s10
   1b34e:	eddf 4a38 	vldr	s9, [pc, #224]	; 1b430 <__kernel_tanf+0x1b8>
   1b352:	eee6 0a26 	vfma.f32	s1, s12, s13
   1b356:	eee5 0a24 	vfma.f32	s1, s10, s9
   1b35a:	ee37 0aa0 	vadd.f32	s0, s15, s1
   1b35e:	da1f      	bge.n	1b3a0 <__kernel_tanf+0x128>
   1b360:	2801      	cmp	r0, #1
   1b362:	d0a2      	beq.n	1b2aa <__kernel_tanf+0x32>
   1b364:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1b368:	eec7 6a00 	vdiv.f32	s13, s14, s0
   1b36c:	4b31      	ldr	r3, [pc, #196]	; (1b434 <__kernel_tanf+0x1bc>)
   1b36e:	ee10 2a10 	vmov	r2, s0
   1b372:	401a      	ands	r2, r3
   1b374:	ee06 2a10 	vmov	s12, r2
   1b378:	ee16 2a90 	vmov	r2, s13
   1b37c:	ee76 7a67 	vsub.f32	s15, s12, s15
   1b380:	4013      	ands	r3, r2
   1b382:	ee00 3a10 	vmov	s0, r3
   1b386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b38a:	ee70 0ae7 	vsub.f32	s1, s1, s15
   1b38e:	eef0 7a47 	vmov.f32	s15, s14
   1b392:	eee6 7a00 	vfma.f32	s15, s12, s0
   1b396:	eee0 7a80 	vfma.f32	s15, s1, s0
   1b39a:	eea7 0aa6 	vfma.f32	s0, s15, s13
   1b39e:	bd08      	pop	{r3, pc}
   1b3a0:	ee07 0a10 	vmov	s14, r0
   1b3a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b3a8:	ee60 6a00 	vmul.f32	s13, s0, s0
   1b3ac:	ee30 0a07 	vadd.f32	s0, s0, s14
   1b3b0:	179b      	asrs	r3, r3, #30
   1b3b2:	ee86 6a80 	vdiv.f32	s12, s13, s0
   1b3b6:	f003 0302 	and.w	r3, r3, #2
   1b3ba:	f1c3 0301 	rsb	r3, r3, #1
   1b3be:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
   1b3c2:	ee36 6a60 	vsub.f32	s12, s12, s1
   1b3c6:	ee06 3a90 	vmov	s13, r3
   1b3ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
   1b3ce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   1b3d2:	eea7 7ae5 	vfms.f32	s14, s15, s11
   1b3d6:	ee26 0a87 	vmul.f32	s0, s13, s14
   1b3da:	bd08      	pop	{r3, pc}
   1b3dc:	f001 fa10 	bl	1c800 <fabsf>
   1b3e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1b3e4:	eef0 7a40 	vmov.f32	s15, s0
   1b3e8:	ee87 0a27 	vdiv.f32	s0, s14, s15
   1b3ec:	bd08      	pop	{r3, pc}
   1b3ee:	bf00      	nop
   1b3f0:	3f2ca140 	.word	0x3f2ca140
   1b3f4:	3f490fda 	.word	0x3f490fda
   1b3f8:	33222168 	.word	0x33222168
   1b3fc:	00000000 	.word	0x00000000
   1b400:	b79bae5f 	.word	0xb79bae5f
   1b404:	38a3f445 	.word	0x38a3f445
   1b408:	37d95384 	.word	0x37d95384
   1b40c:	3895c07a 	.word	0x3895c07a
   1b410:	3a1a26c8 	.word	0x3a1a26c8
   1b414:	398137b9 	.word	0x398137b9
   1b418:	3b6b6916 	.word	0x3b6b6916
   1b41c:	3abede48 	.word	0x3abede48
   1b420:	3cb327a4 	.word	0x3cb327a4
   1b424:	3c11371f 	.word	0x3c11371f
   1b428:	3e088889 	.word	0x3e088889
   1b42c:	3d5d0dd1 	.word	0x3d5d0dd1
   1b430:	3eaaaaab 	.word	0x3eaaaaab
   1b434:	fffff000 	.word	0xfffff000

0001b438 <__ieee754_sqrt>:
   1b438:	eeb1 0bc0 	vsqrt.f64	d0, d0
   1b43c:	4770      	bx	lr
   1b43e:	bf00      	nop

0001b440 <__ieee754_sqrtf>:
   1b440:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1b444:	4770      	bx	lr
   1b446:	bf00      	nop

0001b448 <__ieee754_fmod>:
   1b448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b44c:	b085      	sub	sp, #20
   1b44e:	ed8d 1b00 	vstr	d1, [sp]
   1b452:	e9dd 7c00 	ldrd	r7, ip, [sp]
   1b456:	f02c 4000 	bic.w	r0, ip, #2147483648	; 0x80000000
   1b45a:	ea50 0307 	orrs.w	r3, r0, r7
   1b45e:	ed8d 0b02 	vstr	d0, [sp, #8]
   1b462:	d02f      	beq.n	1b4c4 <__ieee754_fmod+0x7c>
   1b464:	9b03      	ldr	r3, [sp, #12]
   1b466:	4a98      	ldr	r2, [pc, #608]	; (1b6c8 <__ieee754_fmod+0x280>)
   1b468:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   1b46c:	4596      	cmp	lr, r2
   1b46e:	dc29      	bgt.n	1b4c4 <__ieee754_fmod+0x7c>
   1b470:	427a      	negs	r2, r7
   1b472:	4996      	ldr	r1, [pc, #600]	; (1b6cc <__ieee754_fmod+0x284>)
   1b474:	433a      	orrs	r2, r7
   1b476:	ea40 72d2 	orr.w	r2, r0, r2, lsr #31
   1b47a:	428a      	cmp	r2, r1
   1b47c:	d822      	bhi.n	1b4c4 <__ieee754_fmod+0x7c>
   1b47e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1b482:	4586      	cmp	lr, r0
   1b484:	463c      	mov	r4, r7
   1b486:	464a      	mov	r2, r9
   1b488:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1b48c:	dc06      	bgt.n	1b49c <__ieee754_fmod+0x54>
   1b48e:	f2c0 80c7 	blt.w	1b620 <__ieee754_fmod+0x1d8>
   1b492:	45b9      	cmp	r9, r7
   1b494:	f0c0 80c4 	bcc.w	1b620 <__ieee754_fmod+0x1d8>
   1b498:	f000 80fd 	beq.w	1b696 <__ieee754_fmod+0x24e>
   1b49c:	498b      	ldr	r1, [pc, #556]	; (1b6cc <__ieee754_fmod+0x284>)
   1b49e:	4019      	ands	r1, r3
   1b4a0:	b9d9      	cbnz	r1, 1b4da <__ieee754_fmod+0x92>
   1b4a2:	f1be 0f00 	cmp.w	lr, #0
   1b4a6:	f040 80df 	bne.w	1b668 <__ieee754_fmod+0x220>
   1b4aa:	f1b9 0f00 	cmp.w	r9, #0
   1b4ae:	464d      	mov	r5, r9
   1b4b0:	f340 8108 	ble.w	1b6c4 <__ieee754_fmod+0x27c>
   1b4b4:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   1b4b8:	006d      	lsls	r5, r5, #1
   1b4ba:	2d00      	cmp	r5, #0
   1b4bc:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   1b4c0:	dcfa      	bgt.n	1b4b8 <__ieee754_fmod+0x70>
   1b4c2:	e00e      	b.n	1b4e2 <__ieee754_fmod+0x9a>
   1b4c4:	ed9d 7b02 	vldr	d7, [sp, #8]
   1b4c8:	ed9d 6b00 	vldr	d6, [sp]
   1b4cc:	ee27 7b06 	vmul.f64	d7, d7, d6
   1b4d0:	ee87 0b07 	vdiv.f64	d0, d7, d7
   1b4d4:	b005      	add	sp, #20
   1b4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b4da:	ea4f 512e 	mov.w	r1, lr, asr #20
   1b4de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   1b4e2:	4d7a      	ldr	r5, [pc, #488]	; (1b6cc <__ieee754_fmod+0x284>)
   1b4e4:	ea0c 0505 	and.w	r5, ip, r5
   1b4e8:	b985      	cbnz	r5, 1b50c <__ieee754_fmod+0xc4>
   1b4ea:	2800      	cmp	r0, #0
   1b4ec:	f040 80ad 	bne.w	1b64a <__ieee754_fmod+0x202>
   1b4f0:	2f00      	cmp	r7, #0
   1b4f2:	46b8      	mov	r8, r7
   1b4f4:	f340 80e4 	ble.w	1b6c0 <__ieee754_fmod+0x278>
   1b4f8:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
   1b4fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1b500:	f1b8 0f00 	cmp.w	r8, #0
   1b504:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1b508:	dcf8      	bgt.n	1b4fc <__ieee754_fmod+0xb4>
   1b50a:	e002      	b.n	1b512 <__ieee754_fmod+0xca>
   1b50c:	1505      	asrs	r5, r0, #20
   1b50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1b512:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1b6d0 <__ieee754_fmod+0x288>
   1b516:	4541      	cmp	r1, r8
   1b518:	db72      	blt.n	1b600 <__ieee754_fmod+0x1b8>
   1b51a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1b51e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b522:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 1b6d0 <__ieee754_fmod+0x288>
   1b526:	4575      	cmp	r5, lr
   1b528:	db59      	blt.n	1b5de <__ieee754_fmod+0x196>
   1b52a:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   1b52e:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   1b532:	1bd0      	subs	r0, r2, r7
   1b534:	1b49      	subs	r1, r1, r5
   1b536:	d10b      	bne.n	1b550 <__ieee754_fmod+0x108>
   1b538:	e01d      	b.n	1b576 <__ieee754_fmod+0x12e>
   1b53a:	ea50 030e 	orrs.w	r3, r0, lr
   1b53e:	d045      	beq.n	1b5cc <__ieee754_fmod+0x184>
   1b540:	ea4f 73de 	mov.w	r3, lr, lsr #31
   1b544:	3901      	subs	r1, #1
   1b546:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1b54a:	ea4f 024e 	mov.w	r2, lr, lsl #1
   1b54e:	d011      	beq.n	1b574 <__ieee754_fmod+0x12c>
   1b550:	eba3 000c 	sub.w	r0, r3, ip
   1b554:	4294      	cmp	r4, r2
   1b556:	bf88      	it	hi
   1b558:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   1b55c:	2800      	cmp	r0, #0
   1b55e:	eba2 0e04 	sub.w	lr, r2, r4
   1b562:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   1b566:	dae8      	bge.n	1b53a <__ieee754_fmod+0xf2>
   1b568:	3901      	subs	r1, #1
   1b56a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   1b56e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1b572:	d1ed      	bne.n	1b550 <__ieee754_fmod+0x108>
   1b574:	1b10      	subs	r0, r2, r4
   1b576:	eba3 0c0c 	sub.w	ip, r3, ip
   1b57a:	4294      	cmp	r4, r2
   1b57c:	bf88      	it	hi
   1b57e:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   1b582:	f1bc 0f00 	cmp.w	ip, #0
   1b586:	bfa4      	itt	ge
   1b588:	4602      	movge	r2, r0
   1b58a:	4663      	movge	r3, ip
   1b58c:	ea53 0102 	orrs.w	r1, r3, r2
   1b590:	d105      	bne.n	1b59e <__ieee754_fmod+0x156>
   1b592:	e01b      	b.n	1b5cc <__ieee754_fmod+0x184>
   1b594:	0fd1      	lsrs	r1, r2, #31
   1b596:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1b59a:	0052      	lsls	r2, r2, #1
   1b59c:	3d01      	subs	r5, #1
   1b59e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1b5a2:	dbf7      	blt.n	1b594 <__ieee754_fmod+0x14c>
   1b5a4:	494a      	ldr	r1, [pc, #296]	; (1b6d0 <__ieee754_fmod+0x288>)
   1b5a6:	428d      	cmp	r5, r1
   1b5a8:	da6a      	bge.n	1b680 <__ieee754_fmod+0x238>
   1b5aa:	1b49      	subs	r1, r1, r5
   1b5ac:	2914      	cmp	r1, #20
   1b5ae:	dc78      	bgt.n	1b6a2 <__ieee754_fmod+0x25a>
   1b5b0:	f205 401e 	addw	r0, r5, #1054	; 0x41e
   1b5b4:	40ca      	lsrs	r2, r1
   1b5b6:	fa03 f000 	lsl.w	r0, r3, r0
   1b5ba:	fa43 f101 	asr.w	r1, r3, r1
   1b5be:	4310      	orrs	r0, r2
   1b5c0:	430e      	orrs	r6, r1
   1b5c2:	4633      	mov	r3, r6
   1b5c4:	4602      	mov	r2, r0
   1b5c6:	ec43 2b10 	vmov	d0, r2, r3
   1b5ca:	e783      	b.n	1b4d4 <__ieee754_fmod+0x8c>
   1b5cc:	4b41      	ldr	r3, [pc, #260]	; (1b6d4 <__ieee754_fmod+0x28c>)
   1b5ce:	0ff6      	lsrs	r6, r6, #31
   1b5d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1b5d4:	ed93 0b00 	vldr	d0, [r3]
   1b5d8:	b005      	add	sp, #20
   1b5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b5de:	ebae 0405 	sub.w	r4, lr, r5
   1b5e2:	2c1f      	cmp	r4, #31
   1b5e4:	dd25      	ble.n	1b632 <__ieee754_fmod+0x1ea>
   1b5e6:	483c      	ldr	r0, [pc, #240]	; (1b6d8 <__ieee754_fmod+0x290>)
   1b5e8:	1b49      	subs	r1, r1, r5
   1b5ea:	eba0 0c05 	sub.w	ip, r0, r5
   1b5ee:	fa07 fc0c 	lsl.w	ip, r7, ip
   1b5f2:	bf18      	it	ne
   1b5f4:	2400      	movne	r4, #0
   1b5f6:	d1ab      	bne.n	1b550 <__ieee754_fmod+0x108>
   1b5f8:	eba3 0c0c 	sub.w	ip, r3, ip
   1b5fc:	4610      	mov	r0, r2
   1b5fe:	e7c0      	b.n	1b582 <__ieee754_fmod+0x13a>
   1b600:	eba8 0801 	sub.w	r8, r8, r1
   1b604:	f1b8 0f1f 	cmp.w	r8, #31
   1b608:	dc0d      	bgt.n	1b626 <__ieee754_fmod+0x1de>
   1b60a:	f201 431e 	addw	r3, r1, #1054	; 0x41e
   1b60e:	fa0e fe08 	lsl.w	lr, lr, r8
   1b612:	fa29 f303 	lsr.w	r3, r9, r3
   1b616:	fa09 f208 	lsl.w	r2, r9, r8
   1b61a:	ea43 030e 	orr.w	r3, r3, lr
   1b61e:	e780      	b.n	1b522 <__ieee754_fmod+0xda>
   1b620:	ed9d 0b02 	vldr	d0, [sp, #8]
   1b624:	e756      	b.n	1b4d4 <__ieee754_fmod+0x8c>
   1b626:	4b2c      	ldr	r3, [pc, #176]	; (1b6d8 <__ieee754_fmod+0x290>)
   1b628:	1a5b      	subs	r3, r3, r1
   1b62a:	fa09 f303 	lsl.w	r3, r9, r3
   1b62e:	2200      	movs	r2, #0
   1b630:	e777      	b.n	1b522 <__ieee754_fmod+0xda>
   1b632:	f205 4c1e 	addw	ip, r5, #1054	; 0x41e
   1b636:	fa00 fe04 	lsl.w	lr, r0, r4
   1b63a:	fa27 fc0c 	lsr.w	ip, r7, ip
   1b63e:	fa07 f404 	lsl.w	r4, r7, r4
   1b642:	ea4c 0c0e 	orr.w	ip, ip, lr
   1b646:	1b10      	subs	r0, r2, r4
   1b648:	e774      	b.n	1b534 <__ieee754_fmod+0xec>
   1b64a:	ea4f 28c0 	mov.w	r8, r0, lsl #11
   1b64e:	f1b8 0f00 	cmp.w	r8, #0
   1b652:	4d1f      	ldr	r5, [pc, #124]	; (1b6d0 <__ieee754_fmod+0x288>)
   1b654:	f77f af5d 	ble.w	1b512 <__ieee754_fmod+0xca>
   1b658:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1b65c:	f1b8 0f00 	cmp.w	r8, #0
   1b660:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1b664:	dcf8      	bgt.n	1b658 <__ieee754_fmod+0x210>
   1b666:	e754      	b.n	1b512 <__ieee754_fmod+0xca>
   1b668:	ea4f 25ce 	mov.w	r5, lr, lsl #11
   1b66c:	2d00      	cmp	r5, #0
   1b66e:	4918      	ldr	r1, [pc, #96]	; (1b6d0 <__ieee754_fmod+0x288>)
   1b670:	f77f af37 	ble.w	1b4e2 <__ieee754_fmod+0x9a>
   1b674:	006d      	lsls	r5, r5, #1
   1b676:	2d00      	cmp	r5, #0
   1b678:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   1b67c:	dcfa      	bgt.n	1b674 <__ieee754_fmod+0x22c>
   1b67e:	e730      	b.n	1b4e2 <__ieee754_fmod+0x9a>
   1b680:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1b684:	4333      	orrs	r3, r6
   1b686:	f205 35ff 	addw	r5, r5, #1023	; 0x3ff
   1b68a:	ea43 5105 	orr.w	r1, r3, r5, lsl #20
   1b68e:	4610      	mov	r0, r2
   1b690:	ec41 0b10 	vmov	d0, r0, r1
   1b694:	e71e      	b.n	1b4d4 <__ieee754_fmod+0x8c>
   1b696:	4b0f      	ldr	r3, [pc, #60]	; (1b6d4 <__ieee754_fmod+0x28c>)
   1b698:	eb03 7316 	add.w	r3, r3, r6, lsr #28
   1b69c:	ed93 0b00 	vldr	d0, [r3]
   1b6a0:	e718      	b.n	1b4d4 <__ieee754_fmod+0x8c>
   1b6a2:	291f      	cmp	r1, #31
   1b6a4:	dc07      	bgt.n	1b6b6 <__ieee754_fmod+0x26e>
   1b6a6:	f205 401e 	addw	r0, r5, #1054	; 0x41e
   1b6aa:	fa22 f101 	lsr.w	r1, r2, r1
   1b6ae:	fa03 f000 	lsl.w	r0, r3, r0
   1b6b2:	4308      	orrs	r0, r1
   1b6b4:	e785      	b.n	1b5c2 <__ieee754_fmod+0x17a>
   1b6b6:	4808      	ldr	r0, [pc, #32]	; (1b6d8 <__ieee754_fmod+0x290>)
   1b6b8:	1b40      	subs	r0, r0, r5
   1b6ba:	fa43 f000 	asr.w	r0, r3, r0
   1b6be:	e780      	b.n	1b5c2 <__ieee754_fmod+0x17a>
   1b6c0:	4d06      	ldr	r5, [pc, #24]	; (1b6dc <__ieee754_fmod+0x294>)
   1b6c2:	e726      	b.n	1b512 <__ieee754_fmod+0xca>
   1b6c4:	4905      	ldr	r1, [pc, #20]	; (1b6dc <__ieee754_fmod+0x294>)
   1b6c6:	e70c      	b.n	1b4e2 <__ieee754_fmod+0x9a>
   1b6c8:	7fefffff 	.word	0x7fefffff
   1b6cc:	7ff00000 	.word	0x7ff00000
   1b6d0:	fffffc02 	.word	0xfffffc02
   1b6d4:	200002f0 	.word	0x200002f0
   1b6d8:	fffffbe2 	.word	0xfffffbe2
   1b6dc:	fffffbed 	.word	0xfffffbed

0001b6e0 <nan>:
   1b6e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1b6e8 <nan+0x8>
   1b6e4:	4770      	bx	lr
   1b6e6:	bf00      	nop
   1b6e8:	00000000 	.word	0x00000000
   1b6ec:	7ff80000 	.word	0x7ff80000

0001b6f0 <lroundl>:
   1b6f0:	fefc 7bc0 	vcvta.s32.f64	s15, d0
   1b6f4:	ee17 0a90 	vmov	r0, s15
   1b6f8:	4770      	bx	lr
   1b6fa:	bf00      	nop

0001b6fc <__ieee754_rem_pio2f>:
   1b6fc:	b570      	push	{r4, r5, r6, lr}
   1b6fe:	ee10 3a10 	vmov	r3, s0
   1b702:	4a88      	ldr	r2, [pc, #544]	; (1b924 <__ieee754_rem_pio2f+0x228>)
   1b704:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1b708:	4294      	cmp	r4, r2
   1b70a:	b086      	sub	sp, #24
   1b70c:	4605      	mov	r5, r0
   1b70e:	dd70      	ble.n	1b7f2 <__ieee754_rem_pio2f+0xf6>
   1b710:	4a85      	ldr	r2, [pc, #532]	; (1b928 <__ieee754_rem_pio2f+0x22c>)
   1b712:	4294      	cmp	r4, r2
   1b714:	ee10 6a10 	vmov	r6, s0
   1b718:	dc22      	bgt.n	1b760 <__ieee754_rem_pio2f+0x64>
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	eddf 7a83 	vldr	s15, [pc, #524]	; 1b92c <__ieee754_rem_pio2f+0x230>
   1b720:	4a83      	ldr	r2, [pc, #524]	; (1b930 <__ieee754_rem_pio2f+0x234>)
   1b722:	f024 040f 	bic.w	r4, r4, #15
   1b726:	eeb0 7a40 	vmov.f32	s14, s0
   1b72a:	f340 80e2 	ble.w	1b8f2 <__ieee754_rem_pio2f+0x1f6>
   1b72e:	4294      	cmp	r4, r2
   1b730:	ee70 7a67 	vsub.f32	s15, s0, s15
   1b734:	bf09      	itett	eq
   1b736:	eddf 6a7f 	vldreq	s13, [pc, #508]	; 1b934 <__ieee754_rem_pio2f+0x238>
   1b73a:	ed9f 7a7f 	vldrne	s14, [pc, #508]	; 1b938 <__ieee754_rem_pio2f+0x23c>
   1b73e:	ed9f 7a7f 	vldreq	s14, [pc, #508]	; 1b93c <__ieee754_rem_pio2f+0x240>
   1b742:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   1b746:	2001      	movs	r0, #1
   1b748:	ee77 6ac7 	vsub.f32	s13, s15, s14
   1b74c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b750:	edc5 6a00 	vstr	s13, [r5]
   1b754:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b758:	edc5 7a01 	vstr	s15, [r5, #4]
   1b75c:	b006      	add	sp, #24
   1b75e:	bd70      	pop	{r4, r5, r6, pc}
   1b760:	4a77      	ldr	r2, [pc, #476]	; (1b940 <__ieee754_rem_pio2f+0x244>)
   1b762:	4294      	cmp	r4, r2
   1b764:	dd54      	ble.n	1b810 <__ieee754_rem_pio2f+0x114>
   1b766:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   1b76a:	da49      	bge.n	1b800 <__ieee754_rem_pio2f+0x104>
   1b76c:	15e2      	asrs	r2, r4, #23
   1b76e:	3a86      	subs	r2, #134	; 0x86
   1b770:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   1b774:	ee07 3a90 	vmov	s15, r3
   1b778:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   1b77c:	eddf 6a71 	vldr	s13, [pc, #452]	; 1b944 <__ieee754_rem_pio2f+0x248>
   1b780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b784:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b788:	ed8d 7a03 	vstr	s14, [sp, #12]
   1b78c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b790:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   1b794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1b798:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1b79c:	ed8d 7a04 	vstr	s14, [sp, #16]
   1b7a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1b7a4:	eef5 7a40 	vcmp.f32	s15, #0.0
   1b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b7ac:	edcd 7a05 	vstr	s15, [sp, #20]
   1b7b0:	f040 808e 	bne.w	1b8d0 <__ieee754_rem_pio2f+0x1d4>
   1b7b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
   1b7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b7bc:	bf14      	ite	ne
   1b7be:	2302      	movne	r3, #2
   1b7c0:	2301      	moveq	r3, #1
   1b7c2:	4961      	ldr	r1, [pc, #388]	; (1b948 <__ieee754_rem_pio2f+0x24c>)
   1b7c4:	9101      	str	r1, [sp, #4]
   1b7c6:	2102      	movs	r1, #2
   1b7c8:	9100      	str	r1, [sp, #0]
   1b7ca:	a803      	add	r0, sp, #12
   1b7cc:	4629      	mov	r1, r5
   1b7ce:	f001 f8a5 	bl	1c91c <__kernel_rem_pio2f>
   1b7d2:	2e00      	cmp	r6, #0
   1b7d4:	dac2      	bge.n	1b75c <__ieee754_rem_pio2f+0x60>
   1b7d6:	ed95 7a00 	vldr	s14, [r5]
   1b7da:	edd5 7a01 	vldr	s15, [r5, #4]
   1b7de:	eeb1 7a47 	vneg.f32	s14, s14
   1b7e2:	eef1 7a67 	vneg.f32	s15, s15
   1b7e6:	ed85 7a00 	vstr	s14, [r5]
   1b7ea:	edc5 7a01 	vstr	s15, [r5, #4]
   1b7ee:	4240      	negs	r0, r0
   1b7f0:	e7b4      	b.n	1b75c <__ieee754_rem_pio2f+0x60>
   1b7f2:	2200      	movs	r2, #0
   1b7f4:	ed85 0a00 	vstr	s0, [r5]
   1b7f8:	6042      	str	r2, [r0, #4]
   1b7fa:	2000      	movs	r0, #0
   1b7fc:	b006      	add	sp, #24
   1b7fe:	bd70      	pop	{r4, r5, r6, pc}
   1b800:	ee70 7a40 	vsub.f32	s15, s0, s0
   1b804:	2000      	movs	r0, #0
   1b806:	edc5 7a01 	vstr	s15, [r5, #4]
   1b80a:	edc5 7a00 	vstr	s15, [r5]
   1b80e:	e7a5      	b.n	1b75c <__ieee754_rem_pio2f+0x60>
   1b810:	f000 fff6 	bl	1c800 <fabsf>
   1b814:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 1b94c <__ieee754_rem_pio2f+0x250>
   1b818:	ed9f 6a44 	vldr	s12, [pc, #272]	; 1b92c <__ieee754_rem_pio2f+0x230>
   1b81c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1b820:	eee0 7a07 	vfma.f32	s15, s0, s14
   1b824:	ed9f 7a44 	vldr	s14, [pc, #272]	; 1b938 <__ieee754_rem_pio2f+0x23c>
   1b828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1b82c:	ee17 0a90 	vmov	r0, s15
   1b830:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   1b834:	281f      	cmp	r0, #31
   1b836:	eea6 0ac6 	vfms.f32	s0, s13, s12
   1b83a:	ee66 7a87 	vmul.f32	s15, s13, s14
   1b83e:	eeb1 6a66 	vneg.f32	s12, s13
   1b842:	dc1e      	bgt.n	1b882 <__ieee754_rem_pio2f+0x186>
   1b844:	4a42      	ldr	r2, [pc, #264]	; (1b950 <__ieee754_rem_pio2f+0x254>)
   1b846:	1e41      	subs	r1, r0, #1
   1b848:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   1b84c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1b850:	4293      	cmp	r3, r2
   1b852:	d016      	beq.n	1b882 <__ieee754_rem_pio2f+0x186>
   1b854:	ee30 7a67 	vsub.f32	s14, s0, s15
   1b858:	ed85 7a00 	vstr	s14, [r5]
   1b85c:	ee30 0a47 	vsub.f32	s0, s0, s14
   1b860:	2e00      	cmp	r6, #0
   1b862:	ee30 0a67 	vsub.f32	s0, s0, s15
   1b866:	ed85 0a01 	vstr	s0, [r5, #4]
   1b86a:	f6bf af77 	bge.w	1b75c <__ieee754_rem_pio2f+0x60>
   1b86e:	eeb1 7a47 	vneg.f32	s14, s14
   1b872:	eeb1 0a40 	vneg.f32	s0, s0
   1b876:	ed85 7a00 	vstr	s14, [r5]
   1b87a:	ed85 0a01 	vstr	s0, [r5, #4]
   1b87e:	4240      	negs	r0, r0
   1b880:	e76c      	b.n	1b75c <__ieee754_rem_pio2f+0x60>
   1b882:	ee30 7a67 	vsub.f32	s14, s0, s15
   1b886:	15e2      	asrs	r2, r4, #23
   1b888:	ee17 3a10 	vmov	r3, s14
   1b88c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   1b890:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
   1b894:	2b08      	cmp	r3, #8
   1b896:	dddf      	ble.n	1b858 <__ieee754_rem_pio2f+0x15c>
   1b898:	ed9f 7a26 	vldr	s14, [pc, #152]	; 1b934 <__ieee754_rem_pio2f+0x238>
   1b89c:	ed9f 5a27 	vldr	s10, [pc, #156]	; 1b93c <__ieee754_rem_pio2f+0x240>
   1b8a0:	eef0 5a40 	vmov.f32	s11, s0
   1b8a4:	eee6 5a07 	vfma.f32	s11, s12, s14
   1b8a8:	ee70 7a65 	vsub.f32	s15, s0, s11
   1b8ac:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b8b0:	eed6 7a85 	vfnms.f32	s15, s13, s10
   1b8b4:	ee35 7ae7 	vsub.f32	s14, s11, s15
   1b8b8:	ee17 3a10 	vmov	r3, s14
   1b8bc:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   1b8c0:	1ad2      	subs	r2, r2, r3
   1b8c2:	2a19      	cmp	r2, #25
   1b8c4:	dc06      	bgt.n	1b8d4 <__ieee754_rem_pio2f+0x1d8>
   1b8c6:	eeb0 0a65 	vmov.f32	s0, s11
   1b8ca:	ed85 7a00 	vstr	s14, [r5]
   1b8ce:	e7c5      	b.n	1b85c <__ieee754_rem_pio2f+0x160>
   1b8d0:	2303      	movs	r3, #3
   1b8d2:	e776      	b.n	1b7c2 <__ieee754_rem_pio2f+0xc6>
   1b8d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 1b954 <__ieee754_rem_pio2f+0x258>
   1b8d8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 1b958 <__ieee754_rem_pio2f+0x25c>
   1b8dc:	eeb0 0a65 	vmov.f32	s0, s11
   1b8e0:	eea6 0a07 	vfma.f32	s0, s12, s14
   1b8e4:	ee75 7ac0 	vsub.f32	s15, s11, s0
   1b8e8:	eee6 7a07 	vfma.f32	s15, s12, s14
   1b8ec:	eed6 7a85 	vfnms.f32	s15, s13, s10
   1b8f0:	e7b0      	b.n	1b854 <__ieee754_rem_pio2f+0x158>
   1b8f2:	4294      	cmp	r4, r2
   1b8f4:	ee70 7a27 	vadd.f32	s15, s0, s15
   1b8f8:	bf09      	itett	eq
   1b8fa:	eddf 6a0e 	vldreq	s13, [pc, #56]	; 1b934 <__ieee754_rem_pio2f+0x238>
   1b8fe:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; 1b938 <__ieee754_rem_pio2f+0x23c>
   1b902:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; 1b93c <__ieee754_rem_pio2f+0x240>
   1b906:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   1b90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b90e:	ee77 6a87 	vadd.f32	s13, s15, s14
   1b912:	ee77 7ae6 	vsub.f32	s15, s15, s13
   1b916:	edc5 6a00 	vstr	s13, [r5]
   1b91a:	ee77 7a87 	vadd.f32	s15, s15, s14
   1b91e:	edc5 7a01 	vstr	s15, [r5, #4]
   1b922:	e71b      	b.n	1b75c <__ieee754_rem_pio2f+0x60>
   1b924:	3f490fd8 	.word	0x3f490fd8
   1b928:	4016cbe3 	.word	0x4016cbe3
   1b92c:	3fc90f80 	.word	0x3fc90f80
   1b930:	3fc90fd0 	.word	0x3fc90fd0
   1b934:	37354400 	.word	0x37354400
   1b938:	37354443 	.word	0x37354443
   1b93c:	2e85a308 	.word	0x2e85a308
   1b940:	43490f80 	.word	0x43490f80
   1b944:	43800000 	.word	0x43800000
   1b948:	20003070 	.word	0x20003070
   1b94c:	3f22f984 	.word	0x3f22f984
   1b950:	20002eac 	.word	0x20002eac
   1b954:	2e85a300 	.word	0x2e85a300
   1b958:	248d3132 	.word	0x248d3132

0001b95c <lroundf>:
   1b95c:	ee10 1a10 	vmov	r1, s0
   1b960:	f3c1 52c7 	ubfx	r2, r1, #23, #8
   1b964:	2900      	cmp	r1, #0
   1b966:	f1a2 0c7f 	sub.w	ip, r2, #127	; 0x7f
   1b96a:	bfb4      	ite	lt
   1b96c:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
   1b970:	2001      	movge	r0, #1
   1b972:	f1bc 0f1e 	cmp.w	ip, #30
   1b976:	dc0f      	bgt.n	1b998 <lroundf+0x3c>
   1b978:	f1bc 0f00 	cmp.w	ip, #0
   1b97c:	db1d      	blt.n	1b9ba <lroundf+0x5e>
   1b97e:	f3c1 0316 	ubfx	r3, r1, #0, #23
   1b982:	f1bc 0f16 	cmp.w	ip, #22
   1b986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b98a:	dd0a      	ble.n	1b9a2 <lroundf+0x46>
   1b98c:	3a96      	subs	r2, #150	; 0x96
   1b98e:	fa03 f202 	lsl.w	r2, r3, r2
   1b992:	fb02 f000 	mul.w	r0, r2, r0
   1b996:	4770      	bx	lr
   1b998:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1b99c:	ee17 0a90 	vmov	r0, s15
   1b9a0:	4770      	bx	lr
   1b9a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1b9a6:	fa42 f20c 	asr.w	r2, r2, ip
   1b9aa:	441a      	add	r2, r3
   1b9ac:	f1cc 0c17 	rsb	ip, ip, #23
   1b9b0:	fa22 f20c 	lsr.w	r2, r2, ip
   1b9b4:	fb02 f000 	mul.w	r0, r2, r0
   1b9b8:	4770      	bx	lr
   1b9ba:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1b9be:	bf18      	it	ne
   1b9c0:	2000      	movne	r0, #0
   1b9c2:	4770      	bx	lr
   1b9c4:	0000      	movs	r0, r0
	...

0001b9c8 <__ieee754_rem_pio2>:
   1b9c8:	b570      	push	{r4, r5, r6, lr}
   1b9ca:	ec53 2b10 	vmov	r2, r3, d0
   1b9ce:	499c      	ldr	r1, [pc, #624]	; (1bc40 <__ieee754_rem_pio2+0x278>)
   1b9d0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1b9d4:	428d      	cmp	r5, r1
   1b9d6:	b088      	sub	sp, #32
   1b9d8:	4604      	mov	r4, r0
   1b9da:	dd6a      	ble.n	1bab2 <__ieee754_rem_pio2+0xea>
   1b9dc:	4999      	ldr	r1, [pc, #612]	; (1bc44 <__ieee754_rem_pio2+0x27c>)
   1b9de:	428d      	cmp	r5, r1
   1b9e0:	461e      	mov	r6, r3
   1b9e2:	dc1b      	bgt.n	1ba1c <__ieee754_rem_pio2+0x54>
   1b9e4:	2b00      	cmp	r3, #0
   1b9e6:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1bc00 <__ieee754_rem_pio2+0x238>
   1b9ea:	f340 80eb 	ble.w	1bbc4 <__ieee754_rem_pio2+0x1fc>
   1b9ee:	ee30 7b47 	vsub.f64	d7, d0, d7
   1b9f2:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
   1b9f6:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
   1b9fa:	428d      	cmp	r5, r1
   1b9fc:	d06a      	beq.n	1bad4 <__ieee754_rem_pio2+0x10c>
   1b9fe:	ed9f 6b82 	vldr	d6, [pc, #520]	; 1bc08 <__ieee754_rem_pio2+0x240>
   1ba02:	2001      	movs	r0, #1
   1ba04:	ee37 5b46 	vsub.f64	d5, d7, d6
   1ba08:	ee37 7b45 	vsub.f64	d7, d7, d5
   1ba0c:	ed84 5b00 	vstr	d5, [r4]
   1ba10:	ee37 7b46 	vsub.f64	d7, d7, d6
   1ba14:	ed84 7b02 	vstr	d7, [r4, #8]
   1ba18:	b008      	add	sp, #32
   1ba1a:	bd70      	pop	{r4, r5, r6, pc}
   1ba1c:	498a      	ldr	r1, [pc, #552]	; (1bc48 <__ieee754_rem_pio2+0x280>)
   1ba1e:	428d      	cmp	r5, r1
   1ba20:	dd60      	ble.n	1bae4 <__ieee754_rem_pio2+0x11c>
   1ba22:	498a      	ldr	r1, [pc, #552]	; (1bc4c <__ieee754_rem_pio2+0x284>)
   1ba24:	428d      	cmp	r5, r1
   1ba26:	dc4d      	bgt.n	1bac4 <__ieee754_rem_pio2+0xfc>
   1ba28:	152a      	asrs	r2, r5, #20
   1ba2a:	ee10 0a10 	vmov	r0, s0
   1ba2e:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
   1ba32:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
   1ba36:	ec41 0b17 	vmov	d7, r0, r1
   1ba3a:	ed9f 5b75 	vldr	d5, [pc, #468]	; 1bc10 <__ieee754_rem_pio2+0x248>
   1ba3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
   1ba42:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
   1ba46:	ee37 7b46 	vsub.f64	d7, d7, d6
   1ba4a:	ee27 7b05 	vmul.f64	d7, d7, d5
   1ba4e:	eefd 4bc7 	vcvt.s32.f64	s9, d7
   1ba52:	ed8d 6b02 	vstr	d6, [sp, #8]
   1ba56:	eeb8 6be4 	vcvt.f64.s32	d6, s9
   1ba5a:	ee37 7b46 	vsub.f64	d7, d7, d6
   1ba5e:	ee27 7b05 	vmul.f64	d7, d7, d5
   1ba62:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ba6a:	ed8d 6b04 	vstr	d6, [sp, #16]
   1ba6e:	ed8d 7b06 	vstr	d7, [sp, #24]
   1ba72:	f040 8096 	bne.w	1bba2 <__ieee754_rem_pio2+0x1da>
   1ba76:	ee14 3a90 	vmov	r3, s9
   1ba7a:	2b00      	cmp	r3, #0
   1ba7c:	bf0c      	ite	eq
   1ba7e:	2301      	moveq	r3, #1
   1ba80:	2302      	movne	r3, #2
   1ba82:	4973      	ldr	r1, [pc, #460]	; (1bc50 <__ieee754_rem_pio2+0x288>)
   1ba84:	9101      	str	r1, [sp, #4]
   1ba86:	2102      	movs	r1, #2
   1ba88:	9100      	str	r1, [sp, #0]
   1ba8a:	a802      	add	r0, sp, #8
   1ba8c:	4621      	mov	r1, r4
   1ba8e:	f000 f95b 	bl	1bd48 <__kernel_rem_pio2>
   1ba92:	2e00      	cmp	r6, #0
   1ba94:	dac0      	bge.n	1ba18 <__ieee754_rem_pio2+0x50>
   1ba96:	ed94 6b00 	vldr	d6, [r4]
   1ba9a:	ed94 7b02 	vldr	d7, [r4, #8]
   1ba9e:	eeb1 6b46 	vneg.f64	d6, d6
   1baa2:	eeb1 7b47 	vneg.f64	d7, d7
   1baa6:	ed84 6b00 	vstr	d6, [r4]
   1baaa:	ed84 7b02 	vstr	d7, [r4, #8]
   1baae:	4240      	negs	r0, r0
   1bab0:	e7b2      	b.n	1ba18 <__ieee754_rem_pio2+0x50>
   1bab2:	2000      	movs	r0, #0
   1bab4:	2100      	movs	r1, #0
   1bab6:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1baba:	2000      	movs	r0, #0
   1babc:	ed84 0b00 	vstr	d0, [r4]
   1bac0:	b008      	add	sp, #32
   1bac2:	bd70      	pop	{r4, r5, r6, pc}
   1bac4:	ee30 7b40 	vsub.f64	d7, d0, d0
   1bac8:	2000      	movs	r0, #0
   1baca:	ed84 7b02 	vstr	d7, [r4, #8]
   1bace:	ed84 7b00 	vstr	d7, [r4]
   1bad2:	e7a1      	b.n	1ba18 <__ieee754_rem_pio2+0x50>
   1bad4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 1bc18 <__ieee754_rem_pio2+0x250>
   1bad8:	ed9f 6b51 	vldr	d6, [pc, #324]	; 1bc20 <__ieee754_rem_pio2+0x258>
   1badc:	ee37 7b45 	vsub.f64	d7, d7, d5
   1bae0:	2001      	movs	r0, #1
   1bae2:	e78f      	b.n	1ba04 <__ieee754_rem_pio2+0x3c>
   1bae4:	f7ff fb24 	bl	1b130 <fabs>
   1bae8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   1baec:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 1bc28 <__ieee754_rem_pio2+0x260>
   1baf0:	eea0 7b05 	vfma.f64	d7, d0, d5
   1baf4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   1baf8:	ed9f 3b41 	vldr	d3, [pc, #260]	; 1bc00 <__ieee754_rem_pio2+0x238>
   1bafc:	ee17 0a90 	vmov	r0, s15
   1bb00:	ed9f 6b41 	vldr	d6, [pc, #260]	; 1bc08 <__ieee754_rem_pio2+0x240>
   1bb04:	281f      	cmp	r0, #31
   1bb06:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1bb0a:	eeb1 4b45 	vneg.f64	d4, d5
   1bb0e:	eea5 0b43 	vfms.f64	d0, d5, d3
   1bb12:	ee25 7b06 	vmul.f64	d7, d5, d6
   1bb16:	dc1c      	bgt.n	1bb52 <__ieee754_rem_pio2+0x18a>
   1bb18:	4b4e      	ldr	r3, [pc, #312]	; (1bc54 <__ieee754_rem_pio2+0x28c>)
   1bb1a:	1e42      	subs	r2, r0, #1
   1bb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bb20:	42ab      	cmp	r3, r5
   1bb22:	d016      	beq.n	1bb52 <__ieee754_rem_pio2+0x18a>
   1bb24:	ee30 6b47 	vsub.f64	d6, d0, d7
   1bb28:	ed84 6b00 	vstr	d6, [r4]
   1bb2c:	ee30 0b46 	vsub.f64	d0, d0, d6
   1bb30:	ee30 0b47 	vsub.f64	d0, d0, d7
   1bb34:	2e00      	cmp	r6, #0
   1bb36:	ed84 0b02 	vstr	d0, [r4, #8]
   1bb3a:	f6bf af6d 	bge.w	1ba18 <__ieee754_rem_pio2+0x50>
   1bb3e:	eeb1 6b46 	vneg.f64	d6, d6
   1bb42:	eeb1 0b40 	vneg.f64	d0, d0
   1bb46:	ed84 6b00 	vstr	d6, [r4]
   1bb4a:	ed84 0b02 	vstr	d0, [r4, #8]
   1bb4e:	4240      	negs	r0, r0
   1bb50:	e762      	b.n	1ba18 <__ieee754_rem_pio2+0x50>
   1bb52:	ee30 6b47 	vsub.f64	d6, d0, d7
   1bb56:	ee16 3a90 	vmov	r3, s13
   1bb5a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1bb5e:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   1bb62:	2b10      	cmp	r3, #16
   1bb64:	ea4f 5225 	mov.w	r2, r5, asr #20
   1bb68:	ddde      	ble.n	1bb28 <__ieee754_rem_pio2+0x160>
   1bb6a:	eeb0 3b40 	vmov.f64	d3, d0
   1bb6e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 1bc18 <__ieee754_rem_pio2+0x250>
   1bb72:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 1bc20 <__ieee754_rem_pio2+0x258>
   1bb76:	eea4 3b06 	vfma.f64	d3, d4, d6
   1bb7a:	ee30 7b43 	vsub.f64	d7, d0, d3
   1bb7e:	eea4 7b06 	vfma.f64	d7, d4, d6
   1bb82:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1bb86:	ee33 6b47 	vsub.f64	d6, d3, d7
   1bb8a:	ee16 3a90 	vmov	r3, s13
   1bb8e:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1bb92:	1ad2      	subs	r2, r2, r3
   1bb94:	2a31      	cmp	r2, #49	; 0x31
   1bb96:	dc06      	bgt.n	1bba6 <__ieee754_rem_pio2+0x1de>
   1bb98:	eeb0 0b43 	vmov.f64	d0, d3
   1bb9c:	ed84 6b00 	vstr	d6, [r4]
   1bba0:	e7c4      	b.n	1bb2c <__ieee754_rem_pio2+0x164>
   1bba2:	2303      	movs	r3, #3
   1bba4:	e76d      	b.n	1ba82 <__ieee754_rem_pio2+0xba>
   1bba6:	ed9f 6b22 	vldr	d6, [pc, #136]	; 1bc30 <__ieee754_rem_pio2+0x268>
   1bbaa:	eeb0 0b43 	vmov.f64	d0, d3
   1bbae:	ed9f 2b22 	vldr	d2, [pc, #136]	; 1bc38 <__ieee754_rem_pio2+0x270>
   1bbb2:	eea4 0b06 	vfma.f64	d0, d4, d6
   1bbb6:	ee33 7b40 	vsub.f64	d7, d3, d0
   1bbba:	eea4 7b06 	vfma.f64	d7, d4, d6
   1bbbe:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1bbc2:	e7af      	b.n	1bb24 <__ieee754_rem_pio2+0x15c>
   1bbc4:	4924      	ldr	r1, [pc, #144]	; (1bc58 <__ieee754_rem_pio2+0x290>)
   1bbc6:	ee30 7b07 	vadd.f64	d7, d0, d7
   1bbca:	428d      	cmp	r5, r1
   1bbcc:	d00e      	beq.n	1bbec <__ieee754_rem_pio2+0x224>
   1bbce:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 1bc08 <__ieee754_rem_pio2+0x240>
   1bbd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bbd6:	ee37 5b06 	vadd.f64	d5, d7, d6
   1bbda:	ee37 7b45 	vsub.f64	d7, d7, d5
   1bbde:	ed84 5b00 	vstr	d5, [r4]
   1bbe2:	ee37 7b06 	vadd.f64	d7, d7, d6
   1bbe6:	ed84 7b02 	vstr	d7, [r4, #8]
   1bbea:	e715      	b.n	1ba18 <__ieee754_rem_pio2+0x50>
   1bbec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 1bc18 <__ieee754_rem_pio2+0x250>
   1bbf0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1bc20 <__ieee754_rem_pio2+0x258>
   1bbf4:	ee37 7b05 	vadd.f64	d7, d7, d5
   1bbf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bbfc:	e7eb      	b.n	1bbd6 <__ieee754_rem_pio2+0x20e>
   1bbfe:	bf00      	nop
   1bc00:	54400000 	.word	0x54400000
   1bc04:	3ff921fb 	.word	0x3ff921fb
   1bc08:	1a626331 	.word	0x1a626331
   1bc0c:	3dd0b461 	.word	0x3dd0b461
   1bc10:	00000000 	.word	0x00000000
   1bc14:	41700000 	.word	0x41700000
   1bc18:	1a600000 	.word	0x1a600000
   1bc1c:	3dd0b461 	.word	0x3dd0b461
   1bc20:	2e037073 	.word	0x2e037073
   1bc24:	3ba3198a 	.word	0x3ba3198a
   1bc28:	6dc9c883 	.word	0x6dc9c883
   1bc2c:	3fe45f30 	.word	0x3fe45f30
   1bc30:	2e000000 	.word	0x2e000000
   1bc34:	3ba3198a 	.word	0x3ba3198a
   1bc38:	252049c1 	.word	0x252049c1
   1bc3c:	397b839a 	.word	0x397b839a
   1bc40:	3fe921fb 	.word	0x3fe921fb
   1bc44:	4002d97b 	.word	0x4002d97b
   1bc48:	413921fb 	.word	0x413921fb
   1bc4c:	7fefffff 	.word	0x7fefffff
   1bc50:	20003388 	.word	0x20003388
   1bc54:	20002f2c 	.word	0x20002f2c
   1bc58:	3ff921fb 	.word	0x3ff921fb

0001bc5c <with_errno>:
   1bc5c:	b510      	push	{r4, lr}
   1bc5e:	b082      	sub	sp, #8
   1bc60:	ed8d 0b00 	vstr	d0, [sp]
   1bc64:	4604      	mov	r4, r0
   1bc66:	f003 fe85 	bl	1f974 <__errno>
   1bc6a:	ed9d 0b00 	vldr	d0, [sp]
   1bc6e:	6004      	str	r4, [r0, #0]
   1bc70:	b002      	add	sp, #8
   1bc72:	bd10      	pop	{r4, pc}

0001bc74 <xflow>:
   1bc74:	b082      	sub	sp, #8
   1bc76:	b158      	cbz	r0, 1bc90 <xflow+0x1c>
   1bc78:	eeb1 7b40 	vneg.f64	d7, d0
   1bc7c:	ed8d 7b00 	vstr	d7, [sp]
   1bc80:	ed9d 7b00 	vldr	d7, [sp]
   1bc84:	2022      	movs	r0, #34	; 0x22
   1bc86:	ee20 0b07 	vmul.f64	d0, d0, d7
   1bc8a:	b002      	add	sp, #8
   1bc8c:	f7ff bfe6 	b.w	1bc5c <with_errno>
   1bc90:	eeb0 7b40 	vmov.f64	d7, d0
   1bc94:	e7f2      	b.n	1bc7c <xflow+0x8>
   1bc96:	bf00      	nop

0001bc98 <__math_uflow>:
   1bc98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1bca0 <__math_uflow+0x8>
   1bc9c:	f7ff bfea 	b.w	1bc74 <xflow>
   1bca0:	00000000 	.word	0x00000000
   1bca4:	10000000 	.word	0x10000000

0001bca8 <__math_oflow>:
   1bca8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1bcb0 <__math_oflow+0x8>
   1bcac:	f7ff bfe2 	b.w	1bc74 <xflow>
   1bcb0:	00000000 	.word	0x00000000
   1bcb4:	70000000 	.word	0x70000000

0001bcb8 <__math_divzero>:
   1bcb8:	b082      	sub	sp, #8
   1bcba:	2800      	cmp	r0, #0
   1bcbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1bcc0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
   1bcc4:	fe06 7b07 	vseleq.f64	d7, d6, d7
   1bcc8:	ed8d 7b00 	vstr	d7, [sp]
   1bccc:	ed9d 0b00 	vldr	d0, [sp]
   1bcd0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 1bce0 <__math_divzero+0x28>
   1bcd4:	2022      	movs	r0, #34	; 0x22
   1bcd6:	ee80 0b07 	vdiv.f64	d0, d0, d7
   1bcda:	b002      	add	sp, #8
   1bcdc:	f7ff bfbe 	b.w	1bc5c <with_errno>
	...

0001bce8 <__math_invalid>:
   1bce8:	eeb4 0b40 	vcmp.f64	d0, d0
   1bcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bcf0:	ee30 7b40 	vsub.f64	d7, d0, d0
   1bcf4:	ee87 6b07 	vdiv.f64	d6, d7, d7
   1bcf8:	eeb0 0b46 	vmov.f64	d0, d6
   1bcfc:	d602      	bvs.n	1bd04 <__math_invalid+0x1c>
   1bcfe:	2021      	movs	r0, #33	; 0x21
   1bd00:	f7ff bfac 	b.w	1bc5c <with_errno>
   1bd04:	4770      	bx	lr
   1bd06:	bf00      	nop

0001bd08 <__math_check_uflow>:
   1bd08:	eeb5 0b40 	vcmp.f64	d0, #0.0
   1bd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bd10:	d000      	beq.n	1bd14 <__math_check_uflow+0xc>
   1bd12:	4770      	bx	lr
   1bd14:	2022      	movs	r0, #34	; 0x22
   1bd16:	f7ff bfa1 	b.w	1bc5c <with_errno>
   1bd1a:	bf00      	nop
   1bd1c:	0000      	movs	r0, r0
	...

0001bd20 <__math_check_oflow>:
   1bd20:	ed9f 6b07 	vldr	d6, [pc, #28]	; 1bd40 <__math_check_oflow+0x20>
   1bd24:	eeb0 7bc0 	vabs.f64	d7, d0
   1bd28:	eeb4 7b46 	vcmp.f64	d7, d6
   1bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bd30:	dc00      	bgt.n	1bd34 <__math_check_oflow+0x14>
   1bd32:	4770      	bx	lr
   1bd34:	2022      	movs	r0, #34	; 0x22
   1bd36:	f7ff bf91 	b.w	1bc5c <with_errno>
   1bd3a:	bf00      	nop
   1bd3c:	f3af 8000 	nop.w
   1bd40:	ffffffff 	.word	0xffffffff
   1bd44:	7fefffff 	.word	0x7fefffff

0001bd48 <__kernel_rem_pio2>:
   1bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd4c:	ed2d 8b08 	vpush	{d8-d11}
   1bd50:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   1bd54:	461c      	mov	r4, r3
   1bd56:	9304      	str	r3, [sp, #16]
   1bd58:	9107      	str	r1, [sp, #28]
   1bd5a:	4bab      	ldr	r3, [pc, #684]	; (1c008 <__kernel_rem_pio2+0x2c0>)
   1bd5c:	99a6      	ldr	r1, [sp, #664]	; 0x298
   1bd5e:	f112 0f14 	cmn.w	r2, #20
   1bd62:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   1bd66:	4682      	mov	sl, r0
   1bd68:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1bd6c:	f2c0 8299 	blt.w	1c2a2 <__kernel_rem_pio2+0x55a>
   1bd70:	49a6      	ldr	r1, [pc, #664]	; (1c00c <__kernel_rem_pio2+0x2c4>)
   1bd72:	1ed3      	subs	r3, r2, #3
   1bd74:	fb81 0103 	smull	r0, r1, r1, r3
   1bd78:	17db      	asrs	r3, r3, #31
   1bd7a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1bd7e:	9303      	str	r3, [sp, #12]
   1bd80:	3301      	adds	r3, #1
   1bd82:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1bd86:	00db      	lsls	r3, r3, #3
   1bd88:	18d3      	adds	r3, r2, r3
   1bd8a:	9306      	str	r3, [sp, #24]
   1bd8c:	9b03      	ldr	r3, [sp, #12]
   1bd8e:	eb15 0108 	adds.w	r1, r5, r8
   1bd92:	eba3 0308 	sub.w	r3, r3, r8
   1bd96:	d41a      	bmi.n	1bdce <__kernel_rem_pio2+0x86>
   1bd98:	3101      	adds	r1, #1
   1bd9a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 1bff0 <__kernel_rem_pio2+0x2a8>
   1bd9e:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   1bda0:	4419      	add	r1, r3
   1bda2:	aa1c      	add	r2, sp, #112	; 0x70
   1bda4:	e00a      	b.n	1bdbc <__kernel_rem_pio2+0x74>
   1bda6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1bdaa:	ee07 4a90 	vmov	s15, r4
   1bdae:	3301      	adds	r3, #1
   1bdb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1bdb4:	428b      	cmp	r3, r1
   1bdb6:	eca2 7b02 	vstmia	r2!, {d7}
   1bdba:	d008      	beq.n	1bdce <__kernel_rem_pio2+0x86>
   1bdbc:	2b00      	cmp	r3, #0
   1bdbe:	daf2      	bge.n	1bda6 <__kernel_rem_pio2+0x5e>
   1bdc0:	eeb0 7b46 	vmov.f64	d7, d6
   1bdc4:	3301      	adds	r3, #1
   1bdc6:	428b      	cmp	r3, r1
   1bdc8:	eca2 7b02 	vstmia	r2!, {d7}
   1bdcc:	d1f6      	bne.n	1bdbc <__kernel_rem_pio2+0x74>
   1bdce:	2d00      	cmp	r5, #0
   1bdd0:	f2c0 82c9 	blt.w	1c366 <__kernel_rem_pio2+0x61e>
   1bdd4:	9b04      	ldr	r3, [sp, #16]
   1bdd6:	aa1c      	add	r2, sp, #112	; 0x70
   1bdd8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1bddc:	ae6c      	add	r6, sp, #432	; 0x1b0
   1bdde:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1bde2:	4640      	mov	r0, r8
   1bde4:	18ef      	adds	r7, r5, r3
   1bde6:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1bdea:	f1b8 0f00 	cmp.w	r8, #0
   1bdee:	ed9f 7b80 	vldr	d7, [pc, #512]	; 1bff0 <__kernel_rem_pio2+0x2a8>
   1bdf2:	db09      	blt.n	1be08 <__kernel_rem_pio2+0xc0>
   1bdf4:	4622      	mov	r2, r4
   1bdf6:	4653      	mov	r3, sl
   1bdf8:	ecb3 5b02 	vldmia	r3!, {d5}
   1bdfc:	ed32 6b02 	vldmdb	r2!, {d6}
   1be00:	428b      	cmp	r3, r1
   1be02:	eea5 7b06 	vfma.f64	d7, d5, d6
   1be06:	d1f7      	bne.n	1bdf8 <__kernel_rem_pio2+0xb0>
   1be08:	3001      	adds	r0, #1
   1be0a:	42b8      	cmp	r0, r7
   1be0c:	eca6 7b02 	vstmia	r6!, {d7}
   1be10:	f104 0408 	add.w	r4, r4, #8
   1be14:	d1e9      	bne.n	1bdea <__kernel_rem_pio2+0xa2>
   1be16:	af08      	add	r7, sp, #32
   1be18:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1be1c:	ed9f 9b76 	vldr	d9, [pc, #472]	; 1bff8 <__kernel_rem_pio2+0x2b0>
   1be20:	ed9f 8b77 	vldr	d8, [pc, #476]	; 1c000 <__kernel_rem_pio2+0x2b8>
   1be24:	3b04      	subs	r3, #4
   1be26:	f8dd b018 	ldr.w	fp, [sp, #24]
   1be2a:	9305      	str	r3, [sp, #20]
   1be2c:	eb0a 040c 	add.w	r4, sl, ip
   1be30:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   1be34:	ae6c      	add	r6, sp, #432	; 0x1b0
   1be36:	4629      	mov	r1, r5
   1be38:	9501      	str	r5, [sp, #4]
   1be3a:	ab94      	add	r3, sp, #592	; 0x250
   1be3c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1be40:	2900      	cmp	r1, #0
   1be42:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   1be46:	dd16      	ble.n	1be76 <__kernel_rem_pio2+0x12e>
   1be48:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   1be4c:	463a      	mov	r2, r7
   1be4e:	ee20 7b09 	vmul.f64	d7, d0, d9
   1be52:	ed33 5b02 	vldmdb	r3!, {d5}
   1be56:	eeb0 6b40 	vmov.f64	d6, d0
   1be5a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1be5e:	42b3      	cmp	r3, r6
   1be60:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1be64:	eea7 6b48 	vfms.f64	d6, d7, d8
   1be68:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   1be6c:	ee37 0b05 	vadd.f64	d0, d7, d5
   1be70:	eca2 6a01 	vstmia	r2!, {s12}
   1be74:	d1eb      	bne.n	1be4e <__kernel_rem_pio2+0x106>
   1be76:	4658      	mov	r0, fp
   1be78:	9102      	str	r1, [sp, #8]
   1be7a:	f000 fcc9 	bl	1c810 <scalbn>
   1be7e:	eeb0 ab40 	vmov.f64	d10, d0
   1be82:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   1be86:	ee2a 0b00 	vmul.f64	d0, d10, d0
   1be8a:	f001 f875 	bl	1cf78 <floor>
   1be8e:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   1be92:	eea0 ab47 	vfms.f64	d10, d0, d7
   1be96:	eebd bbca 	vcvt.s32.f64	s22, d10
   1be9a:	f1bb 0f00 	cmp.w	fp, #0
   1be9e:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   1bea2:	9902      	ldr	r1, [sp, #8]
   1bea4:	ee3a ab47 	vsub.f64	d10, d10, d7
   1bea8:	dd74      	ble.n	1bf94 <__kernel_rem_pio2+0x24c>
   1beaa:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1beae:	f1cb 0318 	rsb	r3, fp, #24
   1beb2:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   1beb6:	fa42 fc03 	asr.w	ip, r2, r3
   1beba:	fa0c f303 	lsl.w	r3, ip, r3
   1bebe:	1ad2      	subs	r2, r2, r3
   1bec0:	f1cb 0017 	rsb	r0, fp, #23
   1bec4:	ee1b 3a10 	vmov	r3, s22
   1bec8:	fa42 f500 	asr.w	r5, r2, r0
   1becc:	4463      	add	r3, ip
   1bece:	2d00      	cmp	r5, #0
   1bed0:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   1bed4:	ee0b 3a10 	vmov	s22, r3
   1bed8:	dc64      	bgt.n	1bfa4 <__kernel_rem_pio2+0x25c>
   1beda:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bee2:	f040 80c4 	bne.w	1c06e <__kernel_rem_pio2+0x326>
   1bee6:	9b01      	ldr	r3, [sp, #4]
   1bee8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1beec:	4573      	cmp	r3, lr
   1beee:	dc0d      	bgt.n	1bf0c <__kernel_rem_pio2+0x1c4>
   1bef0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   1bef4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   1bef8:	2000      	movs	r0, #0
   1befa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1befe:	454b      	cmp	r3, r9
   1bf00:	ea40 0002 	orr.w	r0, r0, r2
   1bf04:	d1f9      	bne.n	1befa <__kernel_rem_pio2+0x1b2>
   1bf06:	2800      	cmp	r0, #0
   1bf08:	f040 80f2 	bne.w	1c0f0 <__kernel_rem_pio2+0x3a8>
   1bf0c:	9b01      	ldr	r3, [sp, #4]
   1bf0e:	3b01      	subs	r3, #1
   1bf10:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   1bf14:	2b00      	cmp	r3, #0
   1bf16:	f040 80e6 	bne.w	1c0e6 <__kernel_rem_pio2+0x39e>
   1bf1a:	9b05      	ldr	r3, [sp, #20]
   1bf1c:	2501      	movs	r5, #1
   1bf1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1bf22:	3501      	adds	r5, #1
   1bf24:	2a00      	cmp	r2, #0
   1bf26:	d0fa      	beq.n	1bf1e <__kernel_rem_pio2+0x1d6>
   1bf28:	f101 0e01 	add.w	lr, r1, #1
   1bf2c:	440d      	add	r5, r1
   1bf2e:	4670      	mov	r0, lr
   1bf30:	9b04      	ldr	r3, [sp, #16]
   1bf32:	4419      	add	r1, r3
   1bf34:	9b03      	ldr	r3, [sp, #12]
   1bf36:	eb03 0c0e 	add.w	ip, r3, lr
   1bf3a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1bf3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   1bf40:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1bf44:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1bf48:	ab1c      	add	r3, sp, #112	; 0x70
   1bf4a:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   1bf4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1bf52:	ed9c 7a01 	vldr	s14, [ip, #4]
   1bf56:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1bf5a:	f1b8 0f00 	cmp.w	r8, #0
   1bf5e:	ed81 7b00 	vstr	d7, [r1]
   1bf62:	f10c 0c04 	add.w	ip, ip, #4
   1bf66:	460a      	mov	r2, r1
   1bf68:	ed9f 6b21 	vldr	d6, [pc, #132]	; 1bff0 <__kernel_rem_pio2+0x2a8>
   1bf6c:	f101 0108 	add.w	r1, r1, #8
   1bf70:	db09      	blt.n	1bf86 <__kernel_rem_pio2+0x23e>
   1bf72:	4653      	mov	r3, sl
   1bf74:	e001      	b.n	1bf7a <__kernel_rem_pio2+0x232>
   1bf76:	ed32 7b02 	vldmdb	r2!, {d7}
   1bf7a:	ecb3 5b02 	vldmia	r3!, {d5}
   1bf7e:	42a3      	cmp	r3, r4
   1bf80:	eea5 6b07 	vfma.f64	d6, d5, d7
   1bf84:	d1f7      	bne.n	1bf76 <__kernel_rem_pio2+0x22e>
   1bf86:	3001      	adds	r0, #1
   1bf88:	42a8      	cmp	r0, r5
   1bf8a:	ecae 6b02 	vstmia	lr!, {d6}
   1bf8e:	dde0      	ble.n	1bf52 <__kernel_rem_pio2+0x20a>
   1bf90:	4629      	mov	r1, r5
   1bf92:	e752      	b.n	1be3a <__kernel_rem_pio2+0xf2>
   1bf94:	f040 809d 	bne.w	1c0d2 <__kernel_rem_pio2+0x38a>
   1bf98:	1e4b      	subs	r3, r1, #1
   1bf9a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   1bf9e:	15ed      	asrs	r5, r5, #23
   1bfa0:	2d00      	cmp	r5, #0
   1bfa2:	dd9a      	ble.n	1beda <__kernel_rem_pio2+0x192>
   1bfa4:	ee1b 3a10 	vmov	r3, s22
   1bfa8:	2900      	cmp	r1, #0
   1bfaa:	f103 0301 	add.w	r3, r3, #1
   1bfae:	ee0b 3a10 	vmov	s22, r3
   1bfb2:	f340 818c 	ble.w	1c2ce <__kernel_rem_pio2+0x586>
   1bfb6:	683a      	ldr	r2, [r7, #0]
   1bfb8:	2a00      	cmp	r2, #0
   1bfba:	f040 8082 	bne.w	1c0c2 <__kernel_rem_pio2+0x37a>
   1bfbe:	2901      	cmp	r1, #1
   1bfc0:	d02d      	beq.n	1c01e <__kernel_rem_pio2+0x2d6>
   1bfc2:	463b      	mov	r3, r7
   1bfc4:	2001      	movs	r0, #1
   1bfc6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1bfca:	2a00      	cmp	r2, #0
   1bfcc:	d07c      	beq.n	1c0c8 <__kernel_rem_pio2+0x380>
   1bfce:	1c43      	adds	r3, r0, #1
   1bfd0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   1bfd4:	4299      	cmp	r1, r3
   1bfd6:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   1bfda:	dd1f      	ble.n	1c01c <__kernel_rem_pio2+0x2d4>
   1bfdc:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   1bfe0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   1bfe4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1bfe8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   1bfec:	e011      	b.n	1c012 <__kernel_rem_pio2+0x2ca>
   1bfee:	bf00      	nop
	...
   1bffc:	3e700000 	.word	0x3e700000
   1c000:	00000000 	.word	0x00000000
   1c004:	41700000 	.word	0x41700000
   1c008:	20002e90 	.word	0x20002e90
   1c00c:	2aaaaaab 	.word	0x2aaaaaab
   1c010:	681a      	ldr	r2, [r3, #0]
   1c012:	1a82      	subs	r2, r0, r2
   1c014:	f843 2b04 	str.w	r2, [r3], #4
   1c018:	4563      	cmp	r3, ip
   1c01a:	d1f9      	bne.n	1c010 <__kernel_rem_pio2+0x2c8>
   1c01c:	2201      	movs	r2, #1
   1c01e:	f1bb 0f00 	cmp.w	fp, #0
   1c022:	dd0d      	ble.n	1c040 <__kernel_rem_pio2+0x2f8>
   1c024:	f1bb 0f01 	cmp.w	fp, #1
   1c028:	f000 8133 	beq.w	1c292 <__kernel_rem_pio2+0x54a>
   1c02c:	f1bb 0f02 	cmp.w	fp, #2
   1c030:	d106      	bne.n	1c040 <__kernel_rem_pio2+0x2f8>
   1c032:	1e48      	subs	r0, r1, #1
   1c034:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   1c038:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1c03c:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   1c040:	2d02      	cmp	r5, #2
   1c042:	f47f af4a 	bne.w	1beda <__kernel_rem_pio2+0x192>
   1c046:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1c04a:	ee30 ab4a 	vsub.f64	d10, d0, d10
   1c04e:	2a00      	cmp	r2, #0
   1c050:	f43f af43 	beq.w	1beda <__kernel_rem_pio2+0x192>
   1c054:	4658      	mov	r0, fp
   1c056:	9102      	str	r1, [sp, #8]
   1c058:	f000 fbda 	bl	1c810 <scalbn>
   1c05c:	ee3a ab40 	vsub.f64	d10, d10, d0
   1c060:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1c064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c068:	9902      	ldr	r1, [sp, #8]
   1c06a:	f43f af3c 	beq.w	1bee6 <__kernel_rem_pio2+0x19e>
   1c06e:	9c06      	ldr	r4, [sp, #24]
   1c070:	eeb0 0b4a 	vmov.f64	d0, d10
   1c074:	4260      	negs	r0, r4
   1c076:	46a8      	mov	r8, r5
   1c078:	468b      	mov	fp, r1
   1c07a:	9d01      	ldr	r5, [sp, #4]
   1c07c:	f000 fbc8 	bl	1c810 <scalbn>
   1c080:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 1c388 <__kernel_rem_pio2+0x640>
   1c084:	eeb4 0bc6 	vcmpe.f64	d0, d6
   1c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c08c:	f2c0 8147 	blt.w	1c31e <__kernel_rem_pio2+0x5d6>
   1c090:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 1c390 <__kernel_rem_pio2+0x648>
   1c094:	ee20 7b07 	vmul.f64	d7, d0, d7
   1c098:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1c09c:	f10b 0201 	add.w	r2, fp, #1
   1c0a0:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1c0a4:	eea5 0b46 	vfms.f64	d0, d5, d6
   1c0a8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1c0ac:	3418      	adds	r4, #24
   1c0ae:	ee10 3a10 	vmov	r3, s0
   1c0b2:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   1c0b6:	ee17 3a10 	vmov	r3, s14
   1c0ba:	9406      	str	r4, [sp, #24]
   1c0bc:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   1c0c0:	e02a      	b.n	1c118 <__kernel_rem_pio2+0x3d0>
   1c0c2:	2301      	movs	r3, #1
   1c0c4:	2000      	movs	r0, #0
   1c0c6:	e783      	b.n	1bfd0 <__kernel_rem_pio2+0x288>
   1c0c8:	3001      	adds	r0, #1
   1c0ca:	4288      	cmp	r0, r1
   1c0cc:	f47f af7b 	bne.w	1bfc6 <__kernel_rem_pio2+0x27e>
   1c0d0:	e7a5      	b.n	1c01e <__kernel_rem_pio2+0x2d6>
   1c0d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   1c0d6:	eeb4 abc7 	vcmpe.f64	d10, d7
   1c0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c0de:	f280 80e5 	bge.w	1c2ac <__kernel_rem_pio2+0x564>
   1c0e2:	2500      	movs	r5, #0
   1c0e4:	e6f9      	b.n	1beda <__kernel_rem_pio2+0x192>
   1c0e6:	f101 0e01 	add.w	lr, r1, #1
   1c0ea:	4670      	mov	r0, lr
   1c0ec:	4675      	mov	r5, lr
   1c0ee:	e71f      	b.n	1bf30 <__kernel_rem_pio2+0x1e8>
   1c0f0:	9b06      	ldr	r3, [sp, #24]
   1c0f2:	f1a3 0118 	sub.w	r1, r3, #24
   1c0f6:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   1c0fa:	9106      	str	r1, [sp, #24]
   1c0fc:	46a8      	mov	r8, r5
   1c0fe:	4672      	mov	r2, lr
   1c100:	9d01      	ldr	r5, [sp, #4]
   1c102:	b94b      	cbnz	r3, 1c118 <__kernel_rem_pio2+0x3d0>
   1c104:	f1ac 0304 	sub.w	r3, ip, #4
   1c108:	443b      	add	r3, r7
   1c10a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   1c10e:	3a01      	subs	r2, #1
   1c110:	3918      	subs	r1, #24
   1c112:	2800      	cmp	r0, #0
   1c114:	d0f9      	beq.n	1c10a <__kernel_rem_pio2+0x3c2>
   1c116:	9106      	str	r1, [sp, #24]
   1c118:	9806      	ldr	r0, [sp, #24]
   1c11a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1c11e:	9201      	str	r2, [sp, #4]
   1c120:	f000 fb76 	bl	1c810 <scalbn>
   1c124:	9a01      	ldr	r2, [sp, #4]
   1c126:	2a00      	cmp	r2, #0
   1c128:	f2c0 8121 	blt.w	1c36e <__kernel_rem_pio2+0x626>
   1c12c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 1c390 <__kernel_rem_pio2+0x648>
   1c130:	f102 0c01 	add.w	ip, r2, #1
   1c134:	a96c      	add	r1, sp, #432	; 0x1b0
   1c136:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   1c13a:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   1c13e:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   1c142:	ed33 7a01 	vldmdb	r3!, {s14}
   1c146:	42bb      	cmp	r3, r7
   1c148:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1c14c:	ee27 7b00 	vmul.f64	d7, d7, d0
   1c150:	ee20 0b06 	vmul.f64	d0, d0, d6
   1c154:	ed21 7b02 	vstmdb	r1!, {d7}
   1c158:	d1f3      	bne.n	1c142 <__kernel_rem_pio2+0x3fa>
   1c15a:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 1c398 <__kernel_rem_pio2+0x650>
   1c15e:	f1ae 0308 	sub.w	r3, lr, #8
   1c162:	a96c      	add	r1, sp, #432	; 0x1b0
   1c164:	18ce      	adds	r6, r1, r3
   1c166:	2400      	movs	r4, #0
   1c168:	af44      	add	r7, sp, #272	; 0x110
   1c16a:	2d00      	cmp	r5, #0
   1c16c:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 1c3a0 <__kernel_rem_pio2+0x658>
   1c170:	db10      	blt.n	1c194 <__kernel_rem_pio2+0x44c>
   1c172:	eeb0 6b44 	vmov.f64	d6, d4
   1c176:	488c      	ldr	r0, [pc, #560]	; (1c3a8 <__kernel_rem_pio2+0x660>)
   1c178:	4631      	mov	r1, r6
   1c17a:	2300      	movs	r3, #0
   1c17c:	e003      	b.n	1c186 <__kernel_rem_pio2+0x43e>
   1c17e:	429c      	cmp	r4, r3
   1c180:	db08      	blt.n	1c194 <__kernel_rem_pio2+0x44c>
   1c182:	ecb0 6b02 	vldmia	r0!, {d6}
   1c186:	ecb1 5b02 	vldmia	r1!, {d5}
   1c18a:	3301      	adds	r3, #1
   1c18c:	429d      	cmp	r5, r3
   1c18e:	eea5 7b06 	vfma.f64	d7, d5, d6
   1c192:	daf4      	bge.n	1c17e <__kernel_rem_pio2+0x436>
   1c194:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1c198:	4294      	cmp	r4, r2
   1c19a:	ed83 7b00 	vstr	d7, [r3]
   1c19e:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   1c1a2:	f104 0301 	add.w	r3, r4, #1
   1c1a6:	f1a6 0608 	sub.w	r6, r6, #8
   1c1aa:	d001      	beq.n	1c1b0 <__kernel_rem_pio2+0x468>
   1c1ac:	461c      	mov	r4, r3
   1c1ae:	e7dc      	b.n	1c16a <__kernel_rem_pio2+0x422>
   1c1b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1c1b2:	2b02      	cmp	r3, #2
   1c1b4:	dc1d      	bgt.n	1c1f2 <__kernel_rem_pio2+0x4aa>
   1c1b6:	2b00      	cmp	r3, #0
   1c1b8:	f300 808b 	bgt.w	1c2d2 <__kernel_rem_pio2+0x58a>
   1c1bc:	d10f      	bne.n	1c1de <__kernel_rem_pio2+0x496>
   1c1be:	ed9f 7b78 	vldr	d7, [pc, #480]	; 1c3a0 <__kernel_rem_pio2+0x658>
   1c1c2:	44be      	add	lr, r7
   1c1c4:	ed3e 6b02 	vldmdb	lr!, {d6}
   1c1c8:	4577      	cmp	r7, lr
   1c1ca:	ee37 7b06 	vadd.f64	d7, d7, d6
   1c1ce:	d1f9      	bne.n	1c1c4 <__kernel_rem_pio2+0x47c>
   1c1d0:	4643      	mov	r3, r8
   1c1d2:	b10b      	cbz	r3, 1c1d8 <__kernel_rem_pio2+0x490>
   1c1d4:	eeb1 7b47 	vneg.f64	d7, d7
   1c1d8:	9b07      	ldr	r3, [sp, #28]
   1c1da:	ed83 7b00 	vstr	d7, [r3]
   1c1de:	ee1b 3a10 	vmov	r3, s22
   1c1e2:	f003 0007 	and.w	r0, r3, #7
   1c1e6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   1c1ea:	ecbd 8b08 	vpop	{d8-d11}
   1c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1f2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1c1f4:	2b03      	cmp	r3, #3
   1c1f6:	d1f2      	bne.n	1c1de <__kernel_rem_pio2+0x496>
   1c1f8:	2a00      	cmp	r2, #0
   1c1fa:	f000 80e3 	beq.w	1c3c4 <__kernel_rem_pio2+0x67c>
   1c1fe:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   1c202:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   1c206:	ed30 6b02 	vldmdb	r0!, {d6}
   1c20a:	eeb0 5b47 	vmov.f64	d5, d7
   1c20e:	4287      	cmp	r7, r0
   1c210:	ee37 7b06 	vadd.f64	d7, d7, d6
   1c214:	ee36 6b47 	vsub.f64	d6, d6, d7
   1c218:	ed80 7b00 	vstr	d7, [r0]
   1c21c:	ee36 6b05 	vadd.f64	d6, d6, d5
   1c220:	ed80 6b02 	vstr	d6, [r0, #8]
   1c224:	d1ef      	bne.n	1c206 <__kernel_rem_pio2+0x4be>
   1c226:	2a01      	cmp	r2, #1
   1c228:	f340 80cc 	ble.w	1c3c4 <__kernel_rem_pio2+0x67c>
   1c22c:	4439      	add	r1, r7
   1c22e:	ed91 6b00 	vldr	d6, [r1]
   1c232:	00da      	lsls	r2, r3, #3
   1c234:	a946      	add	r1, sp, #280	; 0x118
   1c236:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1c23a:	ed33 7b02 	vldmdb	r3!, {d7}
   1c23e:	eeb0 5b46 	vmov.f64	d5, d6
   1c242:	4299      	cmp	r1, r3
   1c244:	ee36 6b07 	vadd.f64	d6, d6, d7
   1c248:	ee37 7b46 	vsub.f64	d7, d7, d6
   1c24c:	ed83 6b00 	vstr	d6, [r3]
   1c250:	ee37 7b05 	vadd.f64	d7, d7, d5
   1c254:	ed83 7b02 	vstr	d7, [r3, #8]
   1c258:	d1ef      	bne.n	1c23a <__kernel_rem_pio2+0x4f2>
   1c25a:	ed9f 7b51 	vldr	d7, [pc, #324]	; 1c3a0 <__kernel_rem_pio2+0x658>
   1c25e:	f102 0308 	add.w	r3, r2, #8
   1c262:	443b      	add	r3, r7
   1c264:	f107 0210 	add.w	r2, r7, #16
   1c268:	ed33 6b02 	vldmdb	r3!, {d6}
   1c26c:	429a      	cmp	r2, r3
   1c26e:	ee37 7b06 	vadd.f64	d7, d7, d6
   1c272:	d1f9      	bne.n	1c268 <__kernel_rem_pio2+0x520>
   1c274:	4643      	mov	r3, r8
   1c276:	2b00      	cmp	r3, #0
   1c278:	d159      	bne.n	1c32e <__kernel_rem_pio2+0x5e6>
   1c27a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1c27e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1c282:	9c07      	ldr	r4, [sp, #28]
   1c284:	ed84 7b04 	vstr	d7, [r4, #16]
   1c288:	e9c4 0100 	strd	r0, r1, [r4]
   1c28c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1c290:	e7a5      	b.n	1c1de <__kernel_rem_pio2+0x496>
   1c292:	1e48      	subs	r0, r1, #1
   1c294:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   1c298:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1c29c:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   1c2a0:	e6ce      	b.n	1c040 <__kernel_rem_pio2+0x2f8>
   1c2a2:	2100      	movs	r1, #0
   1c2a4:	f06f 0317 	mvn.w	r3, #23
   1c2a8:	9103      	str	r1, [sp, #12]
   1c2aa:	e56d      	b.n	1bd88 <__kernel_rem_pio2+0x40>
   1c2ac:	ee1b 3a10 	vmov	r3, s22
   1c2b0:	2900      	cmp	r1, #0
   1c2b2:	f103 0301 	add.w	r3, r3, #1
   1c2b6:	ee0b 3a10 	vmov	s22, r3
   1c2ba:	bfc8      	it	gt
   1c2bc:	2502      	movgt	r5, #2
   1c2be:	f73f ae7a 	bgt.w	1bfb6 <__kernel_rem_pio2+0x26e>
   1c2c2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1c2c6:	ee37 ab4a 	vsub.f64	d10, d7, d10
   1c2ca:	2502      	movs	r5, #2
   1c2cc:	e605      	b.n	1beda <__kernel_rem_pio2+0x192>
   1c2ce:	2200      	movs	r2, #0
   1c2d0:	e6a5      	b.n	1c01e <__kernel_rem_pio2+0x2d6>
   1c2d2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 1c3a0 <__kernel_rem_pio2+0x658>
   1c2d6:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   1c2da:	ed3c 6b02 	vldmdb	ip!, {d6}
   1c2de:	4567      	cmp	r7, ip
   1c2e0:	ee37 7b06 	vadd.f64	d7, d7, d6
   1c2e4:	d1f9      	bne.n	1c2da <__kernel_rem_pio2+0x592>
   1c2e6:	4643      	mov	r3, r8
   1c2e8:	ed97 6b00 	vldr	d6, [r7]
   1c2ec:	bb8b      	cbnz	r3, 1c352 <__kernel_rem_pio2+0x60a>
   1c2ee:	9b07      	ldr	r3, [sp, #28]
   1c2f0:	2a00      	cmp	r2, #0
   1c2f2:	ed83 7b00 	vstr	d7, [r3]
   1c2f6:	ee36 7b47 	vsub.f64	d7, d6, d7
   1c2fa:	dd0c      	ble.n	1c316 <__kernel_rem_pio2+0x5ce>
   1c2fc:	a946      	add	r1, sp, #280	; 0x118
   1c2fe:	2301      	movs	r3, #1
   1c300:	ecb1 6b02 	vldmia	r1!, {d6}
   1c304:	3301      	adds	r3, #1
   1c306:	429a      	cmp	r2, r3
   1c308:	ee37 7b06 	vadd.f64	d7, d7, d6
   1c30c:	daf8      	bge.n	1c300 <__kernel_rem_pio2+0x5b8>
   1c30e:	4643      	mov	r3, r8
   1c310:	b10b      	cbz	r3, 1c316 <__kernel_rem_pio2+0x5ce>
   1c312:	eeb1 7b47 	vneg.f64	d7, d7
   1c316:	9b07      	ldr	r3, [sp, #28]
   1c318:	ed83 7b02 	vstr	d7, [r3, #8]
   1c31c:	e75f      	b.n	1c1de <__kernel_rem_pio2+0x496>
   1c31e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1c322:	465a      	mov	r2, fp
   1c324:	ee10 3a10 	vmov	r3, s0
   1c328:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   1c32c:	e6f4      	b.n	1c118 <__kernel_rem_pio2+0x3d0>
   1c32e:	ed97 5b00 	vldr	d5, [r7]
   1c332:	eeb1 7b47 	vneg.f64	d7, d7
   1c336:	ed97 6b02 	vldr	d6, [r7, #8]
   1c33a:	eeb1 5b45 	vneg.f64	d5, d5
   1c33e:	9b07      	ldr	r3, [sp, #28]
   1c340:	eeb1 6b46 	vneg.f64	d6, d6
   1c344:	ed83 5b00 	vstr	d5, [r3]
   1c348:	ed83 6b02 	vstr	d6, [r3, #8]
   1c34c:	ed83 7b04 	vstr	d7, [r3, #16]
   1c350:	e745      	b.n	1c1de <__kernel_rem_pio2+0x496>
   1c352:	9b07      	ldr	r3, [sp, #28]
   1c354:	eeb1 5b47 	vneg.f64	d5, d7
   1c358:	2a00      	cmp	r2, #0
   1c35a:	ed83 5b00 	vstr	d5, [r3]
   1c35e:	ee36 7b47 	vsub.f64	d7, d6, d7
   1c362:	dccb      	bgt.n	1c2fc <__kernel_rem_pio2+0x5b4>
   1c364:	e7d5      	b.n	1c312 <__kernel_rem_pio2+0x5ca>
   1c366:	9b04      	ldr	r3, [sp, #16]
   1c368:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1c36c:	e553      	b.n	1be16 <__kernel_rem_pio2+0xce>
   1c36e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1c370:	2b02      	cmp	r3, #2
   1c372:	dc1b      	bgt.n	1c3ac <__kernel_rem_pio2+0x664>
   1c374:	2b00      	cmp	r3, #0
   1c376:	dc21      	bgt.n	1c3bc <__kernel_rem_pio2+0x674>
   1c378:	f47f af31 	bne.w	1c1de <__kernel_rem_pio2+0x496>
   1c37c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 1c3a0 <__kernel_rem_pio2+0x658>
   1c380:	e726      	b.n	1c1d0 <__kernel_rem_pio2+0x488>
   1c382:	bf00      	nop
   1c384:	f3af 8000 	nop.w
   1c388:	00000000 	.word	0x00000000
   1c38c:	41700000 	.word	0x41700000
   1c390:	00000000 	.word	0x00000000
   1c394:	3e700000 	.word	0x3e700000
   1c398:	40000000 	.word	0x40000000
   1c39c:	3ff921fb 	.word	0x3ff921fb
	...
   1c3a8:	200002b8 	.word	0x200002b8
   1c3ac:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1c3ae:	2b03      	cmp	r3, #3
   1c3b0:	f47f af15 	bne.w	1c1de <__kernel_rem_pio2+0x496>
   1c3b4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 1c3d0 <__kernel_rem_pio2+0x688>
   1c3b8:	af44      	add	r7, sp, #272	; 0x110
   1c3ba:	e75b      	b.n	1c274 <__kernel_rem_pio2+0x52c>
   1c3bc:	ed9f 7b04 	vldr	d7, [pc, #16]	; 1c3d0 <__kernel_rem_pio2+0x688>
   1c3c0:	af44      	add	r7, sp, #272	; 0x110
   1c3c2:	e790      	b.n	1c2e6 <__kernel_rem_pio2+0x59e>
   1c3c4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 1c3d0 <__kernel_rem_pio2+0x688>
   1c3c8:	e754      	b.n	1c274 <__kernel_rem_pio2+0x52c>
   1c3ca:	bf00      	nop
   1c3cc:	f3af 8000 	nop.w
	...

0001c3d8 <__kernel_cos>:
   1c3d8:	ee10 3a90 	vmov	r3, s1
   1c3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c3e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1c3e4:	ed2d 8b02 	vpush	{d8}
   1c3e8:	da2e      	bge.n	1c448 <__kernel_cos+0x70>
   1c3ea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   1c3ee:	ee17 3a90 	vmov	r3, s15
   1c3f2:	2b00      	cmp	r3, #0
   1c3f4:	d065      	beq.n	1c4c2 <__kernel_cos+0xea>
   1c3f6:	ee20 4b00 	vmul.f64	d4, d0, d0
   1c3fa:	ed9f 8b35 	vldr	d8, [pc, #212]	; 1c4d0 <__kernel_cos+0xf8>
   1c3fe:	ed9f 2b36 	vldr	d2, [pc, #216]	; 1c4d8 <__kernel_cos+0x100>
   1c402:	ed9f 3b37 	vldr	d3, [pc, #220]	; 1c4e0 <__kernel_cos+0x108>
   1c406:	eea4 2b08 	vfma.f64	d2, d4, d8
   1c40a:	ed9f 5b37 	vldr	d5, [pc, #220]	; 1c4e8 <__kernel_cos+0x110>
   1c40e:	eea4 3b02 	vfma.f64	d3, d4, d2
   1c412:	ed9f 6b37 	vldr	d6, [pc, #220]	; 1c4f0 <__kernel_cos+0x118>
   1c416:	eea4 5b03 	vfma.f64	d5, d4, d3
   1c41a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 1c4f8 <__kernel_cos+0x120>
   1c41e:	eea4 6b05 	vfma.f64	d6, d4, d5
   1c422:	eea4 7b06 	vfma.f64	d7, d4, d6
   1c426:	ee24 7b07 	vmul.f64	d7, d4, d7
   1c42a:	ee21 1b40 	vnmul.f64	d1, d1, d0
   1c42e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1c432:	eea4 1b07 	vfma.f64	d1, d4, d7
   1c436:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1c43a:	ee94 1b06 	vfnms.f64	d1, d4, d6
   1c43e:	ecbd 8b02 	vpop	{d8}
   1c442:	ee30 0b41 	vsub.f64	d0, d0, d1
   1c446:	4770      	bx	lr
   1c448:	ed9f 8b21 	vldr	d8, [pc, #132]	; 1c4d0 <__kernel_cos+0xf8>
   1c44c:	ee20 4b00 	vmul.f64	d4, d0, d0
   1c450:	ed9f 2b21 	vldr	d2, [pc, #132]	; 1c4d8 <__kernel_cos+0x100>
   1c454:	ed9f 3b22 	vldr	d3, [pc, #136]	; 1c4e0 <__kernel_cos+0x108>
   1c458:	eea4 2b08 	vfma.f64	d2, d4, d8
   1c45c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 1c4e8 <__kernel_cos+0x110>
   1c460:	eea2 3b04 	vfma.f64	d3, d2, d4
   1c464:	ed9f 6b22 	vldr	d6, [pc, #136]	; 1c4f0 <__kernel_cos+0x118>
   1c468:	eea3 5b04 	vfma.f64	d5, d3, d4
   1c46c:	ed9f 7b22 	vldr	d7, [pc, #136]	; 1c4f8 <__kernel_cos+0x120>
   1c470:	eea5 6b04 	vfma.f64	d6, d5, d4
   1c474:	4a22      	ldr	r2, [pc, #136]	; (1c500 <__kernel_cos+0x128>)
   1c476:	eea6 7b04 	vfma.f64	d7, d6, d4
   1c47a:	4293      	cmp	r3, r2
   1c47c:	ee27 7b04 	vmul.f64	d7, d7, d4
   1c480:	ddd3      	ble.n	1c42a <__kernel_cos+0x52>
   1c482:	4a20      	ldr	r2, [pc, #128]	; (1c504 <__kernel_cos+0x12c>)
   1c484:	4293      	cmp	r3, r2
   1c486:	dc17      	bgt.n	1c4b8 <__kernel_cos+0xe0>
   1c488:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1c48c:	2000      	movs	r0, #0
   1c48e:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
   1c492:	ec41 0b15 	vmov	d5, r0, r1
   1c496:	ee36 6b45 	vsub.f64	d6, d6, d5
   1c49a:	ee21 1b40 	vnmul.f64	d1, d1, d0
   1c49e:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1c4a2:	eea4 1b07 	vfma.f64	d1, d4, d7
   1c4a6:	ee94 5b03 	vfnms.f64	d5, d4, d3
   1c4aa:	ecbd 8b02 	vpop	{d8}
   1c4ae:	ee35 0b41 	vsub.f64	d0, d5, d1
   1c4b2:	ee36 0b40 	vsub.f64	d0, d6, d0
   1c4b6:	4770      	bx	lr
   1c4b8:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
   1c4bc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
   1c4c0:	e7eb      	b.n	1c49a <__kernel_cos+0xc2>
   1c4c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1c4c6:	ecbd 8b02 	vpop	{d8}
   1c4ca:	4770      	bx	lr
   1c4cc:	f3af 8000 	nop.w
   1c4d0:	be8838d4 	.word	0xbe8838d4
   1c4d4:	bda8fae9 	.word	0xbda8fae9
   1c4d8:	bdb4b1c4 	.word	0xbdb4b1c4
   1c4dc:	3e21ee9e 	.word	0x3e21ee9e
   1c4e0:	809c52ad 	.word	0x809c52ad
   1c4e4:	be927e4f 	.word	0xbe927e4f
   1c4e8:	19cb1590 	.word	0x19cb1590
   1c4ec:	3efa01a0 	.word	0x3efa01a0
   1c4f0:	16c15177 	.word	0x16c15177
   1c4f4:	bf56c16c 	.word	0xbf56c16c
   1c4f8:	5555554c 	.word	0x5555554c
   1c4fc:	3fa55555 	.word	0x3fa55555
   1c500:	3fd33332 	.word	0x3fd33332
   1c504:	3fe90000 	.word	0x3fe90000

0001c508 <__kernel_sin>:
   1c508:	ee10 3a90 	vmov	r3, s1
   1c50c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c510:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1c514:	da04      	bge.n	1c520 <__kernel_sin+0x18>
   1c516:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   1c51a:	ee17 3a90 	vmov	r3, s15
   1c51e:	b35b      	cbz	r3, 1c578 <__kernel_sin+0x70>
   1c520:	ee20 7b00 	vmul.f64	d7, d0, d0
   1c524:	ed9f 2b16 	vldr	d2, [pc, #88]	; 1c580 <__kernel_sin+0x78>
   1c528:	ed9f 3b17 	vldr	d3, [pc, #92]	; 1c588 <__kernel_sin+0x80>
   1c52c:	ed9f 4b18 	vldr	d4, [pc, #96]	; 1c590 <__kernel_sin+0x88>
   1c530:	eea7 3b02 	vfma.f64	d3, d7, d2
   1c534:	ed9f 5b18 	vldr	d5, [pc, #96]	; 1c598 <__kernel_sin+0x90>
   1c538:	eea3 4b07 	vfma.f64	d4, d3, d7
   1c53c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 1c5a0 <__kernel_sin+0x98>
   1c540:	eea4 5b07 	vfma.f64	d5, d4, d7
   1c544:	eea5 6b07 	vfma.f64	d6, d5, d7
   1c548:	ee20 5b07 	vmul.f64	d5, d0, d7
   1c54c:	b930      	cbnz	r0, 1c55c <__kernel_sin+0x54>
   1c54e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 1c5a8 <__kernel_sin+0xa0>
   1c552:	eea7 4b06 	vfma.f64	d4, d7, d6
   1c556:	eea4 0b05 	vfma.f64	d0, d4, d5
   1c55a:	4770      	bx	lr
   1c55c:	ed9f 4b14 	vldr	d4, [pc, #80]	; 1c5b0 <__kernel_sin+0xa8>
   1c560:	ee26 6b45 	vnmul.f64	d6, d6, d5
   1c564:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1c568:	eea1 6b03 	vfma.f64	d6, d1, d3
   1c56c:	ee96 1b07 	vfnms.f64	d1, d6, d7
   1c570:	eea5 1b04 	vfma.f64	d1, d5, d4
   1c574:	ee30 0b41 	vsub.f64	d0, d0, d1
   1c578:	4770      	bx	lr
   1c57a:	bf00      	nop
   1c57c:	f3af 8000 	nop.w
   1c580:	5acfd57c 	.word	0x5acfd57c
   1c584:	3de5d93a 	.word	0x3de5d93a
   1c588:	8a2b9ceb 	.word	0x8a2b9ceb
   1c58c:	be5ae5e6 	.word	0xbe5ae5e6
   1c590:	57b1fe7d 	.word	0x57b1fe7d
   1c594:	3ec71de3 	.word	0x3ec71de3
   1c598:	19c161d5 	.word	0x19c161d5
   1c59c:	bf2a01a0 	.word	0xbf2a01a0
   1c5a0:	1110f8a6 	.word	0x1110f8a6
   1c5a4:	3f811111 	.word	0x3f811111
   1c5a8:	55555549 	.word	0x55555549
   1c5ac:	bfc55555 	.word	0xbfc55555
   1c5b0:	55555549 	.word	0x55555549
   1c5b4:	3fc55555 	.word	0x3fc55555

0001c5b8 <__kernel_tan>:
   1c5b8:	b538      	push	{r3, r4, r5, lr}
   1c5ba:	eeb0 7b40 	vmov.f64	d7, d0
   1c5be:	ee17 3a90 	vmov	r3, s15
   1c5c2:	498d      	ldr	r1, [pc, #564]	; (1c7f8 <__kernel_tan+0x240>)
   1c5c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1c5c8:	428a      	cmp	r2, r1
   1c5ca:	ed2d 8b10 	vpush	{d8-d15}
   1c5ce:	dc2d      	bgt.n	1c62c <__kernel_tan+0x74>
   1c5d0:	eefd 6bc0 	vcvt.s32.f64	s13, d0
   1c5d4:	ee16 1a90 	vmov	r1, s13
   1c5d8:	bbf1      	cbnz	r1, 1c658 <__kernel_tan+0xa0>
   1c5da:	ee10 4a10 	vmov	r4, s0
   1c5de:	1c43      	adds	r3, r0, #1
   1c5e0:	4323      	orrs	r3, r4
   1c5e2:	4313      	orrs	r3, r2
   1c5e4:	f000 80bc 	beq.w	1c760 <__kernel_tan+0x1a8>
   1c5e8:	2801      	cmp	r0, #1
   1c5ea:	f000 8096 	beq.w	1c71a <__kernel_tan+0x162>
   1c5ee:	ee30 6b01 	vadd.f64	d6, d0, d1
   1c5f2:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
   1c5f6:	ecbd 8b10 	vpop	{d8-d15}
   1c5fa:	ee85 4b06 	vdiv.f64	d4, d5, d6
   1c5fe:	ec55 4b16 	vmov	r4, r5, d6
   1c602:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1c606:	ec53 2b14 	vmov	r2, r3, d4
   1c60a:	460c      	mov	r4, r1
   1c60c:	460a      	mov	r2, r1
   1c60e:	ec43 2b10 	vmov	d0, r2, r3
   1c612:	ec45 4b15 	vmov	d5, r4, r5
   1c616:	eea5 6b00 	vfma.f64	d6, d5, d0
   1c61a:	ee35 7b47 	vsub.f64	d7, d5, d7
   1c61e:	ee31 7b47 	vsub.f64	d7, d1, d7
   1c622:	eea7 6b00 	vfma.f64	d6, d7, d0
   1c626:	eea6 0b04 	vfma.f64	d0, d6, d4
   1c62a:	bd38      	pop	{r3, r4, r5, pc}
   1c62c:	4973      	ldr	r1, [pc, #460]	; (1c7fc <__kernel_tan+0x244>)
   1c62e:	428a      	cmp	r2, r1
   1c630:	dd12      	ble.n	1c658 <__kernel_tan+0xa0>
   1c632:	ed9f 5b51 	vldr	d5, [pc, #324]	; 1c778 <__kernel_tan+0x1c0>
   1c636:	2b00      	cmp	r3, #0
   1c638:	ed9f 6b51 	vldr	d6, [pc, #324]	; 1c780 <__kernel_tan+0x1c8>
   1c63c:	bfb8      	it	lt
   1c63e:	eeb1 1b41 	vneglt.f64	d1, d1
   1c642:	ee35 5b41 	vsub.f64	d5, d5, d1
   1c646:	ed9f 1b50 	vldr	d1, [pc, #320]	; 1c788 <__kernel_tan+0x1d0>
   1c64a:	bfb8      	it	lt
   1c64c:	eeb1 7b40 	vneglt.f64	d7, d0
   1c650:	ee36 7b47 	vsub.f64	d7, d6, d7
   1c654:	ee35 7b07 	vadd.f64	d7, d5, d7
   1c658:	ed9f ab4d 	vldr	d10, [pc, #308]	; 1c790 <__kernel_tan+0x1d8>
   1c65c:	ee27 5b07 	vmul.f64	d5, d7, d7
   1c660:	ee25 6b05 	vmul.f64	d6, d5, d5
   1c664:	ed9f 8b4c 	vldr	d8, [pc, #304]	; 1c798 <__kernel_tan+0x1e0>
   1c668:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 1c7a0 <__kernel_tan+0x1e8>
   1c66c:	eea6 8b0a 	vfma.f64	d8, d6, d10
   1c670:	ed9f 4b4d 	vldr	d4, [pc, #308]	; 1c7a8 <__kernel_tan+0x1f0>
   1c674:	eea8 2b06 	vfma.f64	d2, d8, d6
   1c678:	ed9f cb4d 	vldr	d12, [pc, #308]	; 1c7b0 <__kernel_tan+0x1f8>
   1c67c:	eea2 4b06 	vfma.f64	d4, d2, d6
   1c680:	ed9f eb4d 	vldr	d14, [pc, #308]	; 1c7b8 <__kernel_tan+0x200>
   1c684:	eea4 cb06 	vfma.f64	d12, d4, d6
   1c688:	eeb0 4b41 	vmov.f64	d4, d1
   1c68c:	ed9f 9b4c 	vldr	d9, [pc, #304]	; 1c7c0 <__kernel_tan+0x208>
   1c690:	eeac eb06 	vfma.f64	d14, d12, d6
   1c694:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 1c7c8 <__kernel_tan+0x210>
   1c698:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 1c7d0 <__kernel_tan+0x218>
   1c69c:	eea6 0b09 	vfma.f64	d0, d6, d9
   1c6a0:	ed9f bb4d 	vldr	d11, [pc, #308]	; 1c7d8 <__kernel_tan+0x220>
   1c6a4:	eea0 3b06 	vfma.f64	d3, d0, d6
   1c6a8:	ed9f db4d 	vldr	d13, [pc, #308]	; 1c7e0 <__kernel_tan+0x228>
   1c6ac:	eea3 bb06 	vfma.f64	d11, d3, d6
   1c6b0:	ed9f fb4d 	vldr	d15, [pc, #308]	; 1c7e8 <__kernel_tan+0x230>
   1c6b4:	eeab db06 	vfma.f64	d13, d11, d6
   1c6b8:	4950      	ldr	r1, [pc, #320]	; (1c7fc <__kernel_tan+0x244>)
   1c6ba:	eead fb06 	vfma.f64	d15, d13, d6
   1c6be:	ee27 6b05 	vmul.f64	d6, d7, d5
   1c6c2:	eeaf eb05 	vfma.f64	d14, d15, d5
   1c6c6:	eeae 4b06 	vfma.f64	d4, d14, d6
   1c6ca:	eea4 1b05 	vfma.f64	d1, d4, d5
   1c6ce:	ed9f 5b48 	vldr	d5, [pc, #288]	; 1c7f0 <__kernel_tan+0x238>
   1c6d2:	428a      	cmp	r2, r1
   1c6d4:	eea6 1b05 	vfma.f64	d1, d6, d5
   1c6d8:	ee37 0b01 	vadd.f64	d0, d7, d1
   1c6dc:	dc20      	bgt.n	1c720 <__kernel_tan+0x168>
   1c6de:	2801      	cmp	r0, #1
   1c6e0:	d01b      	beq.n	1c71a <__kernel_tan+0x162>
   1c6e2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
   1c6e6:	ee86 4b00 	vdiv.f64	d4, d6, d0
   1c6ea:	ec51 0b10 	vmov	r0, r1, d0
   1c6ee:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
   1c6f2:	ec53 2b14 	vmov	r2, r3, d4
   1c6f6:	2000      	movs	r0, #0
   1c6f8:	4602      	mov	r2, r0
   1c6fa:	ec43 2b10 	vmov	d0, r2, r3
   1c6fe:	ec41 0b16 	vmov	d6, r0, r1
   1c702:	ee36 3b47 	vsub.f64	d3, d6, d7
   1c706:	eeb0 7b45 	vmov.f64	d7, d5
   1c70a:	ee31 1b43 	vsub.f64	d1, d1, d3
   1c70e:	eea6 7b00 	vfma.f64	d7, d6, d0
   1c712:	eea1 7b00 	vfma.f64	d7, d1, d0
   1c716:	eea7 0b04 	vfma.f64	d0, d7, d4
   1c71a:	ecbd 8b10 	vpop	{d8-d15}
   1c71e:	bd38      	pop	{r3, r4, r5, pc}
   1c720:	179b      	asrs	r3, r3, #30
   1c722:	ecbd 8b10 	vpop	{d8-d15}
   1c726:	ee20 4b00 	vmul.f64	d4, d0, d0
   1c72a:	ee06 0a90 	vmov	s13, r0
   1c72e:	f003 0302 	and.w	r3, r3, #2
   1c732:	f1c3 0301 	rsb	r3, r3, #1
   1c736:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1c73a:	ee06 3a90 	vmov	s13, r3
   1c73e:	ee30 0b03 	vadd.f64	d0, d0, d3
   1c742:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   1c746:	ee84 5b00 	vdiv.f64	d5, d4, d0
   1c74a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
   1c74e:	ee35 5b41 	vsub.f64	d5, d5, d1
   1c752:	ee37 7b45 	vsub.f64	d7, d7, d5
   1c756:	eea7 3b44 	vfms.f64	d3, d7, d4
   1c75a:	ee26 0b03 	vmul.f64	d0, d6, d3
   1c75e:	bd38      	pop	{r3, r4, r5, pc}
   1c760:	f7fe fce6 	bl	1b130 <fabs>
   1c764:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1c768:	eeb0 7b40 	vmov.f64	d7, d0
   1c76c:	ee86 0b07 	vdiv.f64	d0, d6, d7
   1c770:	e7d3      	b.n	1c71a <__kernel_tan+0x162>
   1c772:	bf00      	nop
   1c774:	f3af 8000 	nop.w
   1c778:	33145c07 	.word	0x33145c07
   1c77c:	3c81a626 	.word	0x3c81a626
   1c780:	54442d18 	.word	0x54442d18
   1c784:	3fe921fb 	.word	0x3fe921fb
	...
   1c790:	db605373 	.word	0xdb605373
   1c794:	bef375cb 	.word	0xbef375cb
   1c798:	a03792a6 	.word	0xa03792a6
   1c79c:	3f147e88 	.word	0x3f147e88
   1c7a0:	f2f26501 	.word	0xf2f26501
   1c7a4:	3f4344d8 	.word	0x3f4344d8
   1c7a8:	c9560328 	.word	0xc9560328
   1c7ac:	3f6d6d22 	.word	0x3f6d6d22
   1c7b0:	8406d637 	.word	0x8406d637
   1c7b4:	3f9664f4 	.word	0x3f9664f4
   1c7b8:	1110fe7a 	.word	0x1110fe7a
   1c7bc:	3fc11111 	.word	0x3fc11111
   1c7c0:	74bf7ad4 	.word	0x74bf7ad4
   1c7c4:	3efb2a70 	.word	0x3efb2a70
   1c7c8:	32f0a7e9 	.word	0x32f0a7e9
   1c7cc:	3f12b80f 	.word	0x3f12b80f
   1c7d0:	1a8d1068 	.word	0x1a8d1068
   1c7d4:	3f3026f7 	.word	0x3f3026f7
   1c7d8:	fee08315 	.word	0xfee08315
   1c7dc:	3f57dbc8 	.word	0x3f57dbc8
   1c7e0:	e96e8493 	.word	0xe96e8493
   1c7e4:	3f8226e3 	.word	0x3f8226e3
   1c7e8:	1bb341fe 	.word	0x1bb341fe
   1c7ec:	3faba1ba 	.word	0x3faba1ba
   1c7f0:	55555563 	.word	0x55555563
   1c7f4:	3fd55555 	.word	0x3fd55555
   1c7f8:	3e2fffff 	.word	0x3e2fffff
   1c7fc:	3fe59427 	.word	0x3fe59427

0001c800 <fabsf>:
   1c800:	ee10 3a10 	vmov	r3, s0
   1c804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c808:	ee00 3a10 	vmov	s0, r3
   1c80c:	4770      	bx	lr
   1c80e:	bf00      	nop

0001c810 <scalbn>:
   1c810:	ec53 2b10 	vmov	r2, r3, d0
   1c814:	b410      	push	{r4}
   1c816:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1c81a:	4619      	mov	r1, r3
   1c81c:	bb74      	cbnz	r4, 1c87c <scalbn+0x6c>
   1c81e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   1c822:	4311      	orrs	r1, r2
   1c824:	d027      	beq.n	1c876 <scalbn+0x66>
   1c826:	ed9f 7b30 	vldr	d7, [pc, #192]	; 1c8e8 <scalbn+0xd8>
   1c82a:	493b      	ldr	r1, [pc, #236]	; (1c918 <scalbn+0x108>)
   1c82c:	ee20 7b07 	vmul.f64	d7, d0, d7
   1c830:	4288      	cmp	r0, r1
   1c832:	ec53 2b17 	vmov	r2, r3, d7
   1c836:	db43      	blt.n	1c8c0 <scalbn+0xb0>
   1c838:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1c83c:	4619      	mov	r1, r3
   1c83e:	3c36      	subs	r4, #54	; 0x36
   1c840:	f24c 3c50 	movw	ip, #50000	; 0xc350
   1c844:	4560      	cmp	r0, ip
   1c846:	dc22      	bgt.n	1c88e <scalbn+0x7e>
   1c848:	4420      	add	r0, r4
   1c84a:	f240 74fe 	movw	r4, #2046	; 0x7fe
   1c84e:	42a0      	cmp	r0, r4
   1c850:	dc1d      	bgt.n	1c88e <scalbn+0x7e>
   1c852:	2800      	cmp	r0, #0
   1c854:	dc29      	bgt.n	1c8aa <scalbn+0x9a>
   1c856:	f110 0f35 	cmn.w	r0, #53	; 0x35
   1c85a:	db38      	blt.n	1c8ce <scalbn+0xbe>
   1c85c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   1c860:	3036      	adds	r0, #54	; 0x36
   1c862:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   1c866:	ed9f 7b22 	vldr	d7, [pc, #136]	; 1c8f0 <scalbn+0xe0>
   1c86a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   1c86e:	ec43 2b10 	vmov	d0, r2, r3
   1c872:	ee20 0b07 	vmul.f64	d0, d0, d7
   1c876:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c87a:	4770      	bx	lr
   1c87c:	f240 7cff 	movw	ip, #2047	; 0x7ff
   1c880:	4564      	cmp	r4, ip
   1c882:	d1dd      	bne.n	1c840 <scalbn+0x30>
   1c884:	ee30 0b00 	vadd.f64	d0, d0, d0
   1c888:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c88c:	4770      	bx	lr
   1c88e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 1c8f8 <scalbn+0xe8>
   1c892:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 1c900 <scalbn+0xf0>
   1c896:	eeb0 0b47 	vmov.f64	d0, d7
   1c89a:	2b00      	cmp	r3, #0
   1c89c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c8a0:	fe27 7b05 	vselge.f64	d7, d7, d5
   1c8a4:	ee27 0b00 	vmul.f64	d0, d7, d0
   1c8a8:	4770      	bx	lr
   1c8aa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   1c8ae:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   1c8b2:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   1c8b6:	ec43 2b10 	vmov	d0, r2, r3
   1c8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c8be:	4770      	bx	lr
   1c8c0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 1c908 <scalbn+0xf8>
   1c8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c8c8:	ee27 0b00 	vmul.f64	d0, d7, d0
   1c8cc:	4770      	bx	lr
   1c8ce:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 1c908 <scalbn+0xf8>
   1c8d2:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 1c910 <scalbn+0x100>
   1c8d6:	eeb0 0b47 	vmov.f64	d0, d7
   1c8da:	2b00      	cmp	r3, #0
   1c8dc:	fe27 7b05 	vselge.f64	d7, d7, d5
   1c8e0:	ee27 0b00 	vmul.f64	d0, d7, d0
   1c8e4:	e7c7      	b.n	1c876 <scalbn+0x66>
   1c8e6:	bf00      	nop
   1c8e8:	00000000 	.word	0x00000000
   1c8ec:	43500000 	.word	0x43500000
   1c8f0:	00000000 	.word	0x00000000
   1c8f4:	3c900000 	.word	0x3c900000
   1c8f8:	8800759c 	.word	0x8800759c
   1c8fc:	7e37e43c 	.word	0x7e37e43c
   1c900:	8800759c 	.word	0x8800759c
   1c904:	fe37e43c 	.word	0xfe37e43c
   1c908:	c2f8f359 	.word	0xc2f8f359
   1c90c:	01a56e1f 	.word	0x01a56e1f
   1c910:	c2f8f359 	.word	0xc2f8f359
   1c914:	81a56e1f 	.word	0x81a56e1f
   1c918:	ffff3cb0 	.word	0xffff3cb0

0001c91c <__kernel_rem_pio2f>:
   1c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c920:	ed2d 8b04 	vpush	{d8-d9}
   1c924:	b0db      	sub	sp, #364	; 0x16c
   1c926:	461c      	mov	r4, r3
   1c928:	9303      	str	r3, [sp, #12]
   1c92a:	9106      	str	r1, [sp, #24]
   1c92c:	4ba0      	ldr	r3, [pc, #640]	; (1cbb0 <__kernel_rem_pio2f+0x294>)
   1c92e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   1c930:	9208      	str	r2, [sp, #32]
   1c932:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   1c936:	1d11      	adds	r1, r2, #4
   1c938:	4682      	mov	sl, r0
   1c93a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c93e:	f2c0 8298 	blt.w	1ce72 <__kernel_rem_pio2f+0x556>
   1c942:	1ed3      	subs	r3, r2, #3
   1c944:	bf48      	it	mi
   1c946:	1d13      	addmi	r3, r2, #4
   1c948:	10db      	asrs	r3, r3, #3
   1c94a:	9302      	str	r3, [sp, #8]
   1c94c:	3301      	adds	r3, #1
   1c94e:	00db      	lsls	r3, r3, #3
   1c950:	9307      	str	r3, [sp, #28]
   1c952:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   1c956:	1a9b      	subs	r3, r3, r2
   1c958:	9305      	str	r3, [sp, #20]
   1c95a:	9b02      	ldr	r3, [sp, #8]
   1c95c:	eb15 0108 	adds.w	r1, r5, r8
   1c960:	eba3 0308 	sub.w	r3, r3, r8
   1c964:	d416      	bmi.n	1c994 <__kernel_rem_pio2f+0x78>
   1c966:	3101      	adds	r1, #1
   1c968:	ed9f 7a92 	vldr	s14, [pc, #584]	; 1cbb4 <__kernel_rem_pio2f+0x298>
   1c96c:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   1c96e:	4419      	add	r1, r3
   1c970:	aa1e      	add	r2, sp, #120	; 0x78
   1c972:	2b00      	cmp	r3, #0
   1c974:	bfa4      	itt	ge
   1c976:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   1c97a:	ee07 4a90 	vmovge	s15, r4
   1c97e:	f103 0301 	add.w	r3, r3, #1
   1c982:	bfac      	ite	ge
   1c984:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   1c988:	eef0 7a47 	vmovlt.f32	s15, s14
   1c98c:	428b      	cmp	r3, r1
   1c98e:	ece2 7a01 	vstmia	r2!, {s15}
   1c992:	d1ee      	bne.n	1c972 <__kernel_rem_pio2f+0x56>
   1c994:	2d00      	cmp	r5, #0
   1c996:	f2c0 82db 	blt.w	1cf50 <__kernel_rem_pio2f+0x634>
   1c99a:	9b03      	ldr	r3, [sp, #12]
   1c99c:	aa1e      	add	r2, sp, #120	; 0x78
   1c99e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   1c9a2:	ae46      	add	r6, sp, #280	; 0x118
   1c9a4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1c9a8:	4640      	mov	r0, r8
   1c9aa:	18ef      	adds	r7, r5, r3
   1c9ac:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   1c9b0:	f1b8 0f00 	cmp.w	r8, #0
   1c9b4:	eddf 7a7f 	vldr	s15, [pc, #508]	; 1cbb4 <__kernel_rem_pio2f+0x298>
   1c9b8:	db09      	blt.n	1c9ce <__kernel_rem_pio2f+0xb2>
   1c9ba:	4622      	mov	r2, r4
   1c9bc:	4653      	mov	r3, sl
   1c9be:	ecf3 6a01 	vldmia	r3!, {s13}
   1c9c2:	ed32 7a01 	vldmdb	r2!, {s14}
   1c9c6:	428b      	cmp	r3, r1
   1c9c8:	eee6 7a87 	vfma.f32	s15, s13, s14
   1c9cc:	d1f7      	bne.n	1c9be <__kernel_rem_pio2f+0xa2>
   1c9ce:	3001      	adds	r0, #1
   1c9d0:	42b8      	cmp	r0, r7
   1c9d2:	ece6 7a01 	vstmia	r6!, {s15}
   1c9d6:	f104 0404 	add.w	r4, r4, #4
   1c9da:	d1e9      	bne.n	1c9b0 <__kernel_rem_pio2f+0x94>
   1c9dc:	af0a      	add	r7, sp, #40	; 0x28
   1c9de:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1c9e2:	3b04      	subs	r3, #4
   1c9e4:	ed9f 9a75 	vldr	s18, [pc, #468]	; 1cbbc <__kernel_rem_pio2f+0x2a0>
   1c9e8:	eddf 8a73 	vldr	s17, [pc, #460]	; 1cbb8 <__kernel_rem_pio2f+0x29c>
   1c9ec:	9805      	ldr	r0, [sp, #20]
   1c9ee:	9304      	str	r3, [sp, #16]
   1c9f0:	eb0a 040c 	add.w	r4, sl, ip
   1c9f4:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   1c9f8:	ae46      	add	r6, sp, #280	; 0x118
   1c9fa:	9500      	str	r5, [sp, #0]
   1c9fc:	ab5a      	add	r3, sp, #360	; 0x168
   1c9fe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1ca02:	2d00      	cmp	r5, #0
   1ca04:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   1ca08:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   1ca0c:	dd16      	ble.n	1ca3c <__kernel_rem_pio2f+0x120>
   1ca0e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   1ca12:	463a      	mov	r2, r7
   1ca14:	ee60 7a09 	vmul.f32	s15, s0, s18
   1ca18:	eeb0 7a40 	vmov.f32	s14, s0
   1ca1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1ca20:	ed73 6a01 	vldmdb	r3!, {s13}
   1ca24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1ca28:	42b3      	cmp	r3, r6
   1ca2a:	eea7 7ae8 	vfms.f32	s14, s15, s17
   1ca2e:	ee37 0aa6 	vadd.f32	s0, s15, s13
   1ca32:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   1ca36:	eca2 7a01 	vstmia	r2!, {s14}
   1ca3a:	d1eb      	bne.n	1ca14 <__kernel_rem_pio2f+0xf8>
   1ca3c:	9001      	str	r0, [sp, #4]
   1ca3e:	f000 fb69 	bl	1d114 <scalbnf>
   1ca42:	eeb0 8a40 	vmov.f32	s16, s0
   1ca46:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   1ca4a:	ee28 0a00 	vmul.f32	s0, s16, s0
   1ca4e:	f000 fb1b 	bl	1d088 <floorf>
   1ca52:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   1ca56:	eea0 8a67 	vfms.f32	s16, s0, s15
   1ca5a:	9801      	ldr	r0, [sp, #4]
   1ca5c:	2800      	cmp	r0, #0
   1ca5e:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   1ca62:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   1ca66:	ee38 8a67 	vsub.f32	s16, s16, s15
   1ca6a:	dd76      	ble.n	1cb5a <__kernel_rem_pio2f+0x23e>
   1ca6c:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   1ca70:	f1c0 0308 	rsb	r3, r0, #8
   1ca74:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   1ca78:	fa42 fc03 	asr.w	ip, r2, r3
   1ca7c:	fa0c f303 	lsl.w	r3, ip, r3
   1ca80:	1ad3      	subs	r3, r2, r3
   1ca82:	f1c0 0107 	rsb	r1, r0, #7
   1ca86:	ee19 2a90 	vmov	r2, s19
   1ca8a:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   1ca8e:	410b      	asrs	r3, r1
   1ca90:	4462      	add	r2, ip
   1ca92:	2b00      	cmp	r3, #0
   1ca94:	ee09 2a90 	vmov	s19, r2
   1ca98:	dc67      	bgt.n	1cb6a <__kernel_rem_pio2f+0x24e>
   1ca9a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1ca9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1caa2:	f040 80be 	bne.w	1cc22 <__kernel_rem_pio2f+0x306>
   1caa6:	9a00      	ldr	r2, [sp, #0]
   1caa8:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   1caac:	455a      	cmp	r2, fp
   1caae:	dc0e      	bgt.n	1cace <__kernel_rem_pio2f+0x1b2>
   1cab0:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   1cab4:	eb07 0285 	add.w	r2, r7, r5, lsl #2
   1cab8:	2100      	movs	r1, #0
   1caba:	469e      	mov	lr, r3
   1cabc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1cac0:	454a      	cmp	r2, r9
   1cac2:	ea41 0103 	orr.w	r1, r1, r3
   1cac6:	d1f9      	bne.n	1cabc <__kernel_rem_pio2f+0x1a0>
   1cac8:	2900      	cmp	r1, #0
   1caca:	f040 80f1 	bne.w	1ccb0 <__kernel_rem_pio2f+0x394>
   1cace:	9b00      	ldr	r3, [sp, #0]
   1cad0:	3b01      	subs	r3, #1
   1cad2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   1cad6:	2b00      	cmp	r3, #0
   1cad8:	f040 80e6 	bne.w	1cca8 <__kernel_rem_pio2f+0x38c>
   1cadc:	9b04      	ldr	r3, [sp, #16]
   1cade:	f04f 0c01 	mov.w	ip, #1
   1cae2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1cae6:	f10c 0c01 	add.w	ip, ip, #1
   1caea:	2a00      	cmp	r2, #0
   1caec:	d0f9      	beq.n	1cae2 <__kernel_rem_pio2f+0x1c6>
   1caee:	1c6b      	adds	r3, r5, #1
   1caf0:	44ac      	add	ip, r5
   1caf2:	469e      	mov	lr, r3
   1caf4:	9902      	ldr	r1, [sp, #8]
   1caf6:	9a03      	ldr	r2, [sp, #12]
   1caf8:	eb01 0b03 	add.w	fp, r1, r3
   1cafc:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   1cb00:	9969      	ldr	r1, [sp, #420]	; 0x1a4
   1cb02:	442a      	add	r2, r5
   1cb04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1cb08:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   1cb0c:	ab1e      	add	r3, sp, #120	; 0x78
   1cb0e:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
   1cb12:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1cb16:	eddb 7a01 	vldr	s15, [fp, #4]
   1cb1a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 1cbb4 <__kernel_rem_pio2f+0x298>
   1cb1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1cb22:	f1b8 0f00 	cmp.w	r8, #0
   1cb26:	f10b 0b04 	add.w	fp, fp, #4
   1cb2a:	edc1 7a00 	vstr	s15, [r1]
   1cb2e:	460a      	mov	r2, r1
   1cb30:	f101 0104 	add.w	r1, r1, #4
   1cb34:	db09      	blt.n	1cb4a <__kernel_rem_pio2f+0x22e>
   1cb36:	4653      	mov	r3, sl
   1cb38:	e001      	b.n	1cb3e <__kernel_rem_pio2f+0x222>
   1cb3a:	ed72 7a01 	vldmdb	r2!, {s15}
   1cb3e:	ecf3 6a01 	vldmia	r3!, {s13}
   1cb42:	42a3      	cmp	r3, r4
   1cb44:	eea6 7aa7 	vfma.f32	s14, s13, s15
   1cb48:	d1f7      	bne.n	1cb3a <__kernel_rem_pio2f+0x21e>
   1cb4a:	f10e 0e01 	add.w	lr, lr, #1
   1cb4e:	45e6      	cmp	lr, ip
   1cb50:	eca5 7a01 	vstmia	r5!, {s14}
   1cb54:	dddf      	ble.n	1cb16 <__kernel_rem_pio2f+0x1fa>
   1cb56:	4665      	mov	r5, ip
   1cb58:	e750      	b.n	1c9fc <__kernel_rem_pio2f+0xe0>
   1cb5a:	f040 809b 	bne.w	1cc94 <__kernel_rem_pio2f+0x378>
   1cb5e:	1e6b      	subs	r3, r5, #1
   1cb60:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   1cb64:	11db      	asrs	r3, r3, #7
   1cb66:	2b00      	cmp	r3, #0
   1cb68:	dd97      	ble.n	1ca9a <__kernel_rem_pio2f+0x17e>
   1cb6a:	ee19 2a90 	vmov	r2, s19
   1cb6e:	2d00      	cmp	r5, #0
   1cb70:	f102 0201 	add.w	r2, r2, #1
   1cb74:	ee09 2a90 	vmov	s19, r2
   1cb78:	f340 8191 	ble.w	1ce9e <__kernel_rem_pio2f+0x582>
   1cb7c:	6839      	ldr	r1, [r7, #0]
   1cb7e:	2900      	cmp	r1, #0
   1cb80:	d17e      	bne.n	1cc80 <__kernel_rem_pio2f+0x364>
   1cb82:	2d01      	cmp	r5, #1
   1cb84:	d026      	beq.n	1cbd4 <__kernel_rem_pio2f+0x2b8>
   1cb86:	463a      	mov	r2, r7
   1cb88:	f04f 0c01 	mov.w	ip, #1
   1cb8c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1cb90:	2900      	cmp	r1, #0
   1cb92:	d079      	beq.n	1cc88 <__kernel_rem_pio2f+0x36c>
   1cb94:	f10c 0201 	add.w	r2, ip, #1
   1cb98:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   1cb9c:	4295      	cmp	r5, r2
   1cb9e:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   1cba2:	dd16      	ble.n	1cbd2 <__kernel_rem_pio2f+0x2b6>
   1cba4:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
   1cba8:	44bb      	add	fp, r7
   1cbaa:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   1cbae:	e00a      	b.n	1cbc6 <__kernel_rem_pio2f+0x2aa>
   1cbb0:	20002ea0 	.word	0x20002ea0
   1cbb4:	00000000 	.word	0x00000000
   1cbb8:	43800000 	.word	0x43800000
   1cbbc:	3b800000 	.word	0x3b800000
   1cbc0:	3fc90000 	.word	0x3fc90000
   1cbc4:	6811      	ldr	r1, [r2, #0]
   1cbc6:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   1cbca:	f842 1b04 	str.w	r1, [r2], #4
   1cbce:	455a      	cmp	r2, fp
   1cbd0:	d1f8      	bne.n	1cbc4 <__kernel_rem_pio2f+0x2a8>
   1cbd2:	2101      	movs	r1, #1
   1cbd4:	2800      	cmp	r0, #0
   1cbd6:	dd0c      	ble.n	1cbf2 <__kernel_rem_pio2f+0x2d6>
   1cbd8:	2801      	cmp	r0, #1
   1cbda:	f000 8141 	beq.w	1ce60 <__kernel_rem_pio2f+0x544>
   1cbde:	2802      	cmp	r0, #2
   1cbe0:	d107      	bne.n	1cbf2 <__kernel_rem_pio2f+0x2d6>
   1cbe2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   1cbe6:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
   1cbea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1cbee:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
   1cbf2:	2b02      	cmp	r3, #2
   1cbf4:	f47f af51 	bne.w	1ca9a <__kernel_rem_pio2f+0x17e>
   1cbf8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1cbfc:	ee30 8a48 	vsub.f32	s16, s0, s16
   1cc00:	2900      	cmp	r1, #0
   1cc02:	f43f af4a 	beq.w	1ca9a <__kernel_rem_pio2f+0x17e>
   1cc06:	9309      	str	r3, [sp, #36]	; 0x24
   1cc08:	9001      	str	r0, [sp, #4]
   1cc0a:	f000 fa83 	bl	1d114 <scalbnf>
   1cc0e:	ee38 8a40 	vsub.f32	s16, s16, s0
   1cc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cc14:	9801      	ldr	r0, [sp, #4]
   1cc16:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1cc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cc1e:	f43f af42 	beq.w	1caa6 <__kernel_rem_pio2f+0x18a>
   1cc22:	4698      	mov	r8, r3
   1cc24:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   1cc28:	eeb0 0a48 	vmov.f32	s0, s16
   1cc2c:	1a98      	subs	r0, r3, r2
   1cc2e:	9501      	str	r5, [sp, #4]
   1cc30:	9d00      	ldr	r5, [sp, #0]
   1cc32:	f000 fa6f 	bl	1d114 <scalbnf>
   1cc36:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 1cbb8 <__kernel_rem_pio2f+0x29c>
   1cc3a:	9b01      	ldr	r3, [sp, #4]
   1cc3c:	eeb4 0ac7 	vcmpe.f32	s0, s14
   1cc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cc44:	f2c0 8155 	blt.w	1cef2 <__kernel_rem_pio2f+0x5d6>
   1cc48:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 1cbbc <__kernel_rem_pio2f+0x2a0>
   1cc4c:	9a05      	ldr	r2, [sp, #20]
   1cc4e:	ee60 7a27 	vmul.f32	s15, s0, s15
   1cc52:	3208      	adds	r2, #8
   1cc54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1cc58:	9205      	str	r2, [sp, #20]
   1cc5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1cc5e:	f103 0b01 	add.w	fp, r3, #1
   1cc62:	eea7 0ac7 	vfms.f32	s0, s15, s14
   1cc66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1cc6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1cc6e:	ee10 2a10 	vmov	r2, s0
   1cc72:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   1cc76:	ee17 3a90 	vmov	r3, s15
   1cc7a:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   1cc7e:	e02b      	b.n	1ccd8 <__kernel_rem_pio2f+0x3bc>
   1cc80:	2201      	movs	r2, #1
   1cc82:	f04f 0c00 	mov.w	ip, #0
   1cc86:	e787      	b.n	1cb98 <__kernel_rem_pio2f+0x27c>
   1cc88:	f10c 0c01 	add.w	ip, ip, #1
   1cc8c:	45ac      	cmp	ip, r5
   1cc8e:	f47f af7d 	bne.w	1cb8c <__kernel_rem_pio2f+0x270>
   1cc92:	e79f      	b.n	1cbd4 <__kernel_rem_pio2f+0x2b8>
   1cc94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   1cc98:	eeb4 8ae7 	vcmpe.f32	s16, s15
   1cc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cca0:	f280 80ec 	bge.w	1ce7c <__kernel_rem_pio2f+0x560>
   1cca4:	2300      	movs	r3, #0
   1cca6:	e6f8      	b.n	1ca9a <__kernel_rem_pio2f+0x17e>
   1cca8:	1c6b      	adds	r3, r5, #1
   1ccaa:	469e      	mov	lr, r3
   1ccac:	469c      	mov	ip, r3
   1ccae:	e721      	b.n	1caf4 <__kernel_rem_pio2f+0x1d8>
   1ccb0:	9b05      	ldr	r3, [sp, #20]
   1ccb2:	9d00      	ldr	r5, [sp, #0]
   1ccb4:	f1a3 0208 	sub.w	r2, r3, #8
   1ccb8:	f857 302b 	ldr.w	r3, [r7, fp, lsl #2]
   1ccbc:	9205      	str	r2, [sp, #20]
   1ccbe:	46f0      	mov	r8, lr
   1ccc0:	b953      	cbnz	r3, 1ccd8 <__kernel_rem_pio2f+0x3bc>
   1ccc2:	f1ac 0304 	sub.w	r3, ip, #4
   1ccc6:	443b      	add	r3, r7
   1ccc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1cccc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1ccd0:	3a08      	subs	r2, #8
   1ccd2:	2900      	cmp	r1, #0
   1ccd4:	d0f8      	beq.n	1ccc8 <__kernel_rem_pio2f+0x3ac>
   1ccd6:	9205      	str	r2, [sp, #20]
   1ccd8:	9805      	ldr	r0, [sp, #20]
   1ccda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1ccde:	f000 fa19 	bl	1d114 <scalbnf>
   1cce2:	f1bb 0f00 	cmp.w	fp, #0
   1cce6:	f2c0 8129 	blt.w	1cf3c <__kernel_rem_pio2f+0x620>
   1ccea:	f10b 0601 	add.w	r6, fp, #1
   1ccee:	aa46      	add	r2, sp, #280	; 0x118
   1ccf0:	ed1f 7a4e 	vldr	s14, [pc, #-312]	; 1cbbc <__kernel_rem_pio2f+0x2a0>
   1ccf4:	ea4f 0c86 	mov.w	ip, r6, lsl #2
   1ccf8:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1ccfc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
   1cd00:	ed73 7a01 	vldmdb	r3!, {s15}
   1cd04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1cd08:	42bb      	cmp	r3, r7
   1cd0a:	ee67 7a80 	vmul.f32	s15, s15, s0
   1cd0e:	ee20 0a07 	vmul.f32	s0, s0, s14
   1cd12:	ed62 7a01 	vstmdb	r2!, {s15}
   1cd16:	d1f3      	bne.n	1cd00 <__kernel_rem_pio2f+0x3e4>
   1cd18:	f1ac 0304 	sub.w	r3, ip, #4
   1cd1c:	aa46      	add	r2, sp, #280	; 0x118
   1cd1e:	2d00      	cmp	r5, #0
   1cd20:	ed1f 6a59 	vldr	s12, [pc, #-356]	; 1cbc0 <__kernel_rem_pio2f+0x2a4>
   1cd24:	eb02 0403 	add.w	r4, r2, r3
   1cd28:	f04f 0000 	mov.w	r0, #0
   1cd2c:	db22      	blt.n	1cd74 <__kernel_rem_pio2f+0x458>
   1cd2e:	498f      	ldr	r1, [pc, #572]	; (1cf6c <__kernel_rem_pio2f+0x650>)
   1cd30:	eddf 7a8f 	vldr	s15, [pc, #572]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cd34:	eeb0 7a46 	vmov.f32	s14, s12
   1cd38:	4622      	mov	r2, r4
   1cd3a:	2300      	movs	r3, #0
   1cd3c:	e003      	b.n	1cd46 <__kernel_rem_pio2f+0x42a>
   1cd3e:	4298      	cmp	r0, r3
   1cd40:	db08      	blt.n	1cd54 <__kernel_rem_pio2f+0x438>
   1cd42:	ecb1 7a01 	vldmia	r1!, {s14}
   1cd46:	ecf2 6a01 	vldmia	r2!, {s13}
   1cd4a:	3301      	adds	r3, #1
   1cd4c:	429d      	cmp	r5, r3
   1cd4e:	eee6 7a87 	vfma.f32	s15, s13, s14
   1cd52:	daf4      	bge.n	1cd3e <__kernel_rem_pio2f+0x422>
   1cd54:	ab5a      	add	r3, sp, #360	; 0x168
   1cd56:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1cd5a:	4558      	cmp	r0, fp
   1cd5c:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   1cd60:	ea4f 0180 	mov.w	r1, r0, lsl #2
   1cd64:	f100 0201 	add.w	r2, r0, #1
   1cd68:	f1a4 0404 	sub.w	r4, r4, #4
   1cd6c:	d005      	beq.n	1cd7a <__kernel_rem_pio2f+0x45e>
   1cd6e:	2d00      	cmp	r5, #0
   1cd70:	4610      	mov	r0, r2
   1cd72:	dadc      	bge.n	1cd2e <__kernel_rem_pio2f+0x412>
   1cd74:	eddf 7a7e 	vldr	s15, [pc, #504]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cd78:	e7ec      	b.n	1cd54 <__kernel_rem_pio2f+0x438>
   1cd7a:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
   1cd7c:	2a02      	cmp	r2, #2
   1cd7e:	dc1d      	bgt.n	1cdbc <__kernel_rem_pio2f+0x4a0>
   1cd80:	2a00      	cmp	r2, #0
   1cd82:	f300 808e 	bgt.w	1cea2 <__kernel_rem_pio2f+0x586>
   1cd86:	d110      	bne.n	1cdaa <__kernel_rem_pio2f+0x48e>
   1cd88:	ab32      	add	r3, sp, #200	; 0xc8
   1cd8a:	eddf 7a79 	vldr	s15, [pc, #484]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cd8e:	449c      	add	ip, r3
   1cd90:	ed3c 7a01 	vldmdb	ip!, {s14}
   1cd94:	4563      	cmp	r3, ip
   1cd96:	ee77 7a87 	vadd.f32	s15, s15, s14
   1cd9a:	d1f9      	bne.n	1cd90 <__kernel_rem_pio2f+0x474>
   1cd9c:	4643      	mov	r3, r8
   1cd9e:	b10b      	cbz	r3, 1cda4 <__kernel_rem_pio2f+0x488>
   1cda0:	eef1 7a67 	vneg.f32	s15, s15
   1cda4:	9b06      	ldr	r3, [sp, #24]
   1cda6:	edc3 7a00 	vstr	s15, [r3]
   1cdaa:	ee19 3a90 	vmov	r3, s19
   1cdae:	f003 0007 	and.w	r0, r3, #7
   1cdb2:	b05b      	add	sp, #364	; 0x16c
   1cdb4:	ecbd 8b04 	vpop	{d8-d9}
   1cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdbc:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
   1cdbe:	2a03      	cmp	r2, #3
   1cdc0:	d1f3      	bne.n	1cdaa <__kernel_rem_pio2f+0x48e>
   1cdc2:	f1bb 0f00 	cmp.w	fp, #0
   1cdc6:	f000 80cb 	beq.w	1cf60 <__kernel_rem_pio2f+0x644>
   1cdca:	a832      	add	r0, sp, #200	; 0xc8
   1cdcc:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   1cdd0:	eb00 028b 	add.w	r2, r0, fp, lsl #2
   1cdd4:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
   1cdd8:	ed72 7a01 	vldmdb	r2!, {s15}
   1cddc:	eef0 6a47 	vmov.f32	s13, s14
   1cde0:	ee37 7a27 	vadd.f32	s14, s14, s15
   1cde4:	4290      	cmp	r0, r2
   1cde6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1cdea:	ed82 7a00 	vstr	s14, [r2]
   1cdee:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1cdf2:	edc2 7a01 	vstr	s15, [r2, #4]
   1cdf6:	d1ef      	bne.n	1cdd8 <__kernel_rem_pio2f+0x4bc>
   1cdf8:	f1bb 0f01 	cmp.w	fp, #1
   1cdfc:	f340 80b0 	ble.w	1cf60 <__kernel_rem_pio2f+0x644>
   1ce00:	f501 72b4 	add.w	r2, r1, #360	; 0x168
   1ce04:	eb0d 0102 	add.w	r1, sp, r2
   1ce08:	ed11 7a28 	vldr	s14, [r1, #-160]	; 0xffffff60
   1ce0c:	009a      	lsls	r2, r3, #2
   1ce0e:	a933      	add	r1, sp, #204	; 0xcc
   1ce10:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ce14:	ed73 7a01 	vldmdb	r3!, {s15}
   1ce18:	eef0 6a47 	vmov.f32	s13, s14
   1ce1c:	ee37 7a27 	vadd.f32	s14, s14, s15
   1ce20:	4299      	cmp	r1, r3
   1ce22:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1ce26:	ed83 7a00 	vstr	s14, [r3]
   1ce2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1ce2e:	edc3 7a01 	vstr	s15, [r3, #4]
   1ce32:	d1ef      	bne.n	1ce14 <__kernel_rem_pio2f+0x4f8>
   1ce34:	1d13      	adds	r3, r2, #4
   1ce36:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1ce3a:	4403      	add	r3, r0
   1ce3c:	3008      	adds	r0, #8
   1ce3e:	ed33 7a01 	vldmdb	r3!, {s14}
   1ce42:	4298      	cmp	r0, r3
   1ce44:	ee77 7a87 	vadd.f32	s15, s15, s14
   1ce48:	d1f9      	bne.n	1ce3e <__kernel_rem_pio2f+0x522>
   1ce4a:	4643      	mov	r3, r8
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d158      	bne.n	1cf02 <__kernel_rem_pio2f+0x5e6>
   1ce50:	9906      	ldr	r1, [sp, #24]
   1ce52:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   1ce54:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   1ce56:	600a      	str	r2, [r1, #0]
   1ce58:	604b      	str	r3, [r1, #4]
   1ce5a:	edc1 7a02 	vstr	s15, [r1, #8]
   1ce5e:	e7a4      	b.n	1cdaa <__kernel_rem_pio2f+0x48e>
   1ce60:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   1ce64:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
   1ce68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1ce6c:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
   1ce70:	e6bf      	b.n	1cbf2 <__kernel_rem_pio2f+0x2d6>
   1ce72:	2308      	movs	r3, #8
   1ce74:	9307      	str	r3, [sp, #28]
   1ce76:	2300      	movs	r3, #0
   1ce78:	9302      	str	r3, [sp, #8]
   1ce7a:	e56a      	b.n	1c952 <__kernel_rem_pio2f+0x36>
   1ce7c:	ee19 3a90 	vmov	r3, s19
   1ce80:	2d00      	cmp	r5, #0
   1ce82:	f103 0301 	add.w	r3, r3, #1
   1ce86:	ee09 3a90 	vmov	s19, r3
   1ce8a:	bfc8      	it	gt
   1ce8c:	2302      	movgt	r3, #2
   1ce8e:	f73f ae75 	bgt.w	1cb7c <__kernel_rem_pio2f+0x260>
   1ce92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1ce96:	ee37 8ac8 	vsub.f32	s16, s15, s16
   1ce9a:	2302      	movs	r3, #2
   1ce9c:	e5fd      	b.n	1ca9a <__kernel_rem_pio2f+0x17e>
   1ce9e:	2100      	movs	r1, #0
   1cea0:	e698      	b.n	1cbd4 <__kernel_rem_pio2f+0x2b8>
   1cea2:	ab32      	add	r3, sp, #200	; 0xc8
   1cea4:	eddf 7a32 	vldr	s15, [pc, #200]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cea8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1ceac:	ed36 7a01 	vldmdb	r6!, {s14}
   1ceb0:	42b3      	cmp	r3, r6
   1ceb2:	ee77 7a87 	vadd.f32	s15, s15, s14
   1ceb6:	d1f9      	bne.n	1ceac <__kernel_rem_pio2f+0x590>
   1ceb8:	4643      	mov	r3, r8
   1ceba:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   1cebe:	bb93      	cbnz	r3, 1cf26 <__kernel_rem_pio2f+0x60a>
   1cec0:	9b06      	ldr	r3, [sp, #24]
   1cec2:	f1bb 0f00 	cmp.w	fp, #0
   1cec6:	edc3 7a00 	vstr	s15, [r3]
   1ceca:	ee77 7a67 	vsub.f32	s15, s14, s15
   1cece:	dd0c      	ble.n	1ceea <__kernel_rem_pio2f+0x5ce>
   1ced0:	aa33      	add	r2, sp, #204	; 0xcc
   1ced2:	2301      	movs	r3, #1
   1ced4:	ecb2 7a01 	vldmia	r2!, {s14}
   1ced8:	3301      	adds	r3, #1
   1ceda:	459b      	cmp	fp, r3
   1cedc:	ee77 7a87 	vadd.f32	s15, s15, s14
   1cee0:	daf8      	bge.n	1ced4 <__kernel_rem_pio2f+0x5b8>
   1cee2:	4643      	mov	r3, r8
   1cee4:	b10b      	cbz	r3, 1ceea <__kernel_rem_pio2f+0x5ce>
   1cee6:	eef1 7a67 	vneg.f32	s15, s15
   1ceea:	9b06      	ldr	r3, [sp, #24]
   1ceec:	edc3 7a01 	vstr	s15, [r3, #4]
   1cef0:	e75b      	b.n	1cdaa <__kernel_rem_pio2f+0x48e>
   1cef2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1cef6:	469b      	mov	fp, r3
   1cef8:	ee10 2a10 	vmov	r2, s0
   1cefc:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
   1cf00:	e6ea      	b.n	1ccd8 <__kernel_rem_pio2f+0x3bc>
   1cf02:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   1cf06:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   1cf0a:	9b06      	ldr	r3, [sp, #24]
   1cf0c:	eef1 6a66 	vneg.f32	s13, s13
   1cf10:	eeb1 7a47 	vneg.f32	s14, s14
   1cf14:	eef1 7a67 	vneg.f32	s15, s15
   1cf18:	edc3 6a00 	vstr	s13, [r3]
   1cf1c:	ed83 7a01 	vstr	s14, [r3, #4]
   1cf20:	edc3 7a02 	vstr	s15, [r3, #8]
   1cf24:	e741      	b.n	1cdaa <__kernel_rem_pio2f+0x48e>
   1cf26:	9b06      	ldr	r3, [sp, #24]
   1cf28:	eef1 6a67 	vneg.f32	s13, s15
   1cf2c:	f1bb 0f00 	cmp.w	fp, #0
   1cf30:	ee77 7a67 	vsub.f32	s15, s14, s15
   1cf34:	edc3 6a00 	vstr	s13, [r3]
   1cf38:	dcca      	bgt.n	1ced0 <__kernel_rem_pio2f+0x5b4>
   1cf3a:	e7d4      	b.n	1cee6 <__kernel_rem_pio2f+0x5ca>
   1cf3c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   1cf3e:	2b02      	cmp	r3, #2
   1cf40:	dc0a      	bgt.n	1cf58 <__kernel_rem_pio2f+0x63c>
   1cf42:	2b00      	cmp	r3, #0
   1cf44:	dc0f      	bgt.n	1cf66 <__kernel_rem_pio2f+0x64a>
   1cf46:	f47f af30 	bne.w	1cdaa <__kernel_rem_pio2f+0x48e>
   1cf4a:	eddf 7a09 	vldr	s15, [pc, #36]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cf4e:	e725      	b.n	1cd9c <__kernel_rem_pio2f+0x480>
   1cf50:	9b03      	ldr	r3, [sp, #12]
   1cf52:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1cf56:	e541      	b.n	1c9dc <__kernel_rem_pio2f+0xc0>
   1cf58:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   1cf5a:	2b03      	cmp	r3, #3
   1cf5c:	f47f af25 	bne.w	1cdaa <__kernel_rem_pio2f+0x48e>
   1cf60:	eddf 7a03 	vldr	s15, [pc, #12]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cf64:	e771      	b.n	1ce4a <__kernel_rem_pio2f+0x52e>
   1cf66:	eddf 7a02 	vldr	s15, [pc, #8]	; 1cf70 <__kernel_rem_pio2f+0x654>
   1cf6a:	e7a5      	b.n	1ceb8 <__kernel_rem_pio2f+0x59c>
   1cf6c:	20001e68 	.word	0x20001e68
	...

0001cf78 <floor>:
   1cf78:	b510      	push	{r4, lr}
   1cf7a:	b082      	sub	sp, #8
   1cf7c:	ed8d 0b00 	vstr	d0, [sp]
   1cf80:	9901      	ldr	r1, [sp, #4]
   1cf82:	9800      	ldr	r0, [sp, #0]
   1cf84:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1cf88:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   1cf8c:	2b13      	cmp	r3, #19
   1cf8e:	4684      	mov	ip, r0
   1cf90:	dc31      	bgt.n	1cff6 <floor+0x7e>
   1cf92:	2b00      	cmp	r3, #0
   1cf94:	db21      	blt.n	1cfda <floor+0x62>
   1cf96:	4a3a      	ldr	r2, [pc, #232]	; (1d080 <floor+0x108>)
   1cf98:	411a      	asrs	r2, r3
   1cf9a:	ea01 0402 	and.w	r4, r1, r2
   1cf9e:	4304      	orrs	r4, r0
   1cfa0:	468e      	mov	lr, r1
   1cfa2:	d02d      	beq.n	1d000 <floor+0x88>
   1cfa4:	ed9f 7b34 	vldr	d7, [pc, #208]	; 1d078 <floor+0x100>
   1cfa8:	ed9d 6b00 	vldr	d6, [sp]
   1cfac:	ee36 7b07 	vadd.f64	d7, d6, d7
   1cfb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1cfb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cfb8:	dd09      	ble.n	1cfce <floor+0x56>
   1cfba:	2900      	cmp	r1, #0
   1cfbc:	da04      	bge.n	1cfc8 <floor+0x50>
   1cfbe:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1cfc2:	fa41 f303 	asr.w	r3, r1, r3
   1cfc6:	449e      	add	lr, r3
   1cfc8:	ea2e 0102 	bic.w	r1, lr, r2
   1cfcc:	2000      	movs	r0, #0
   1cfce:	460b      	mov	r3, r1
   1cfd0:	4602      	mov	r2, r0
   1cfd2:	ec43 2b10 	vmov	d0, r2, r3
   1cfd6:	b002      	add	sp, #8
   1cfd8:	bd10      	pop	{r4, pc}
   1cfda:	ed9f 7b27 	vldr	d7, [pc, #156]	; 1d078 <floor+0x100>
   1cfde:	ee30 7b07 	vadd.f64	d7, d0, d7
   1cfe2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cfea:	ddf0      	ble.n	1cfce <floor+0x56>
   1cfec:	2900      	cmp	r1, #0
   1cfee:	db28      	blt.n	1d042 <floor+0xca>
   1cff0:	2000      	movs	r0, #0
   1cff2:	4601      	mov	r1, r0
   1cff4:	e7eb      	b.n	1cfce <floor+0x56>
   1cff6:	2b33      	cmp	r3, #51	; 0x33
   1cff8:	dd06      	ble.n	1d008 <floor+0x90>
   1cffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1cffe:	d01b      	beq.n	1d038 <floor+0xc0>
   1d000:	ed9d 0b00 	vldr	d0, [sp]
   1d004:	b002      	add	sp, #8
   1d006:	bd10      	pop	{r4, pc}
   1d008:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   1d00c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1d010:	fa2e f202 	lsr.w	r2, lr, r2
   1d014:	4210      	tst	r0, r2
   1d016:	d0f3      	beq.n	1d000 <floor+0x88>
   1d018:	ed9f 7b17 	vldr	d7, [pc, #92]	; 1d078 <floor+0x100>
   1d01c:	ed9d 6b00 	vldr	d6, [sp]
   1d020:	ee36 7b07 	vadd.f64	d7, d6, d7
   1d024:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1d028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d02c:	ddcf      	ble.n	1cfce <floor+0x56>
   1d02e:	2900      	cmp	r1, #0
   1d030:	db13      	blt.n	1d05a <floor+0xe2>
   1d032:	ea2c 0002 	bic.w	r0, ip, r2
   1d036:	e7ca      	b.n	1cfce <floor+0x56>
   1d038:	ed9d 7b00 	vldr	d7, [sp]
   1d03c:	ee37 0b07 	vadd.f64	d0, d7, d7
   1d040:	e7e0      	b.n	1d004 <floor+0x8c>
   1d042:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1d046:	4301      	orrs	r1, r0
   1d048:	4b0e      	ldr	r3, [pc, #56]	; (1d084 <floor+0x10c>)
   1d04a:	2900      	cmp	r1, #0
   1d04c:	f04f 0000 	mov.w	r0, #0
   1d050:	bf0c      	ite	eq
   1d052:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   1d056:	4619      	movne	r1, r3
   1d058:	e7b9      	b.n	1cfce <floor+0x56>
   1d05a:	2b14      	cmp	r3, #20
   1d05c:	d009      	beq.n	1d072 <floor+0xfa>
   1d05e:	2401      	movs	r4, #1
   1d060:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1d064:	fa04 f303 	lsl.w	r3, r4, r3
   1d068:	449c      	add	ip, r3
   1d06a:	4560      	cmp	r0, ip
   1d06c:	bf88      	it	hi
   1d06e:	1909      	addhi	r1, r1, r4
   1d070:	e7df      	b.n	1d032 <floor+0xba>
   1d072:	3101      	adds	r1, #1
   1d074:	e7dd      	b.n	1d032 <floor+0xba>
   1d076:	bf00      	nop
   1d078:	8800759c 	.word	0x8800759c
   1d07c:	7e37e43c 	.word	0x7e37e43c
   1d080:	000fffff 	.word	0x000fffff
   1d084:	bff00000 	.word	0xbff00000

0001d088 <floorf>:
   1d088:	ee10 2a10 	vmov	r2, s0
   1d08c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   1d090:	3b7f      	subs	r3, #127	; 0x7f
   1d092:	2b16      	cmp	r3, #22
   1d094:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   1d098:	dc2a      	bgt.n	1d0f0 <floorf+0x68>
   1d09a:	2b00      	cmp	r3, #0
   1d09c:	ee10 0a10 	vmov	r0, s0
   1d0a0:	db18      	blt.n	1d0d4 <floorf+0x4c>
   1d0a2:	4919      	ldr	r1, [pc, #100]	; (1d108 <floorf+0x80>)
   1d0a4:	4119      	asrs	r1, r3
   1d0a6:	420a      	tst	r2, r1
   1d0a8:	d021      	beq.n	1d0ee <floorf+0x66>
   1d0aa:	eddf 7a18 	vldr	s15, [pc, #96]	; 1d10c <floorf+0x84>
   1d0ae:	ee70 7a27 	vadd.f32	s15, s0, s15
   1d0b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1d0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d0ba:	dd18      	ble.n	1d0ee <floorf+0x66>
   1d0bc:	2a00      	cmp	r2, #0
   1d0be:	da04      	bge.n	1d0ca <floorf+0x42>
   1d0c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1d0c4:	fa42 f303 	asr.w	r3, r2, r3
   1d0c8:	4418      	add	r0, r3
   1d0ca:	ea20 0301 	bic.w	r3, r0, r1
   1d0ce:	ee00 3a10 	vmov	s0, r3
   1d0d2:	4770      	bx	lr
   1d0d4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 1d10c <floorf+0x84>
   1d0d8:	ee70 7a27 	vadd.f32	s15, s0, s15
   1d0dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d0e4:	dd03      	ble.n	1d0ee <floorf+0x66>
   1d0e6:	2a00      	cmp	r2, #0
   1d0e8:	db08      	blt.n	1d0fc <floorf+0x74>
   1d0ea:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1d110 <floorf+0x88>
   1d0ee:	4770      	bx	lr
   1d0f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   1d0f4:	d3fb      	bcc.n	1d0ee <floorf+0x66>
   1d0f6:	ee30 0a00 	vadd.f32	s0, s0, s0
   1d0fa:	4770      	bx	lr
   1d0fc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1d100:	2900      	cmp	r1, #0
   1d102:	fe00 0a27 	vseleq.f32	s0, s0, s15
   1d106:	4770      	bx	lr
   1d108:	007fffff 	.word	0x007fffff
   1d10c:	7149f2ca 	.word	0x7149f2ca
   1d110:	00000000 	.word	0x00000000

0001d114 <scalbnf>:
   1d114:	ee10 3a10 	vmov	r3, s0
   1d118:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
   1d11c:	ee10 2a10 	vmov	r2, s0
   1d120:	d027      	beq.n	1d172 <scalbnf+0x5e>
   1d122:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   1d126:	d221      	bcs.n	1d16c <scalbnf+0x58>
   1d128:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   1d12c:	d122      	bne.n	1d174 <scalbnf+0x60>
   1d12e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1d1dc <scalbnf+0xc8>
   1d132:	4a2b      	ldr	r2, [pc, #172]	; (1d1e0 <scalbnf+0xcc>)
   1d134:	ee60 7a27 	vmul.f32	s15, s0, s15
   1d138:	4290      	cmp	r0, r2
   1d13a:	ee17 3a90 	vmov	r3, s15
   1d13e:	db33      	blt.n	1d1a8 <scalbnf+0x94>
   1d140:	f24c 3c50 	movw	ip, #50000	; 0xc350
   1d144:	f3c3 51c7 	ubfx	r1, r3, #23, #8
   1d148:	4560      	cmp	r0, ip
   1d14a:	ee17 2a90 	vmov	r2, s15
   1d14e:	f1a1 0119 	sub.w	r1, r1, #25
   1d152:	dd15      	ble.n	1d180 <scalbnf+0x6c>
   1d154:	eddf 7a23 	vldr	s15, [pc, #140]	; 1d1e4 <scalbnf+0xd0>
   1d158:	eddf 6a23 	vldr	s13, [pc, #140]	; 1d1e8 <scalbnf+0xd4>
   1d15c:	eeb0 7a67 	vmov.f32	s14, s15
   1d160:	2b00      	cmp	r3, #0
   1d162:	fe67 7aa6 	vselge.f32	s15, s15, s13
   1d166:	ee27 0a87 	vmul.f32	s0, s15, s14
   1d16a:	4770      	bx	lr
   1d16c:	ee30 0a00 	vadd.f32	s0, s0, s0
   1d170:	4770      	bx	lr
   1d172:	4770      	bx	lr
   1d174:	f24c 3c50 	movw	ip, #50000	; 0xc350
   1d178:	4560      	cmp	r0, ip
   1d17a:	ea4f 51d1 	mov.w	r1, r1, lsr #23
   1d17e:	dce9      	bgt.n	1d154 <scalbnf+0x40>
   1d180:	4401      	add	r1, r0
   1d182:	29fe      	cmp	r1, #254	; 0xfe
   1d184:	dce6      	bgt.n	1d154 <scalbnf+0x40>
   1d186:	2900      	cmp	r1, #0
   1d188:	dc15      	bgt.n	1d1b6 <scalbnf+0xa2>
   1d18a:	f111 0f16 	cmn.w	r1, #22
   1d18e:	db19      	blt.n	1d1c4 <scalbnf+0xb0>
   1d190:	3119      	adds	r1, #25
   1d192:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   1d196:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
   1d19a:	ee07 2a90 	vmov	s15, r2
   1d19e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 1d1ec <scalbnf+0xd8>
   1d1a2:	ee27 0a80 	vmul.f32	s0, s15, s0
   1d1a6:	4770      	bx	lr
   1d1a8:	eddf 7a11 	vldr	s15, [pc, #68]	; 1d1f0 <scalbnf+0xdc>
   1d1ac:	ee07 3a10 	vmov	s14, r3
   1d1b0:	ee27 0a27 	vmul.f32	s0, s14, s15
   1d1b4:	4770      	bx	lr
   1d1b6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   1d1ba:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
   1d1be:	ee00 3a10 	vmov	s0, r3
   1d1c2:	4770      	bx	lr
   1d1c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1d1f0 <scalbnf+0xdc>
   1d1c8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 1d1f4 <scalbnf+0xe0>
   1d1cc:	eeb0 7a67 	vmov.f32	s14, s15
   1d1d0:	2b00      	cmp	r3, #0
   1d1d2:	fe67 7aa6 	vselge.f32	s15, s15, s13
   1d1d6:	ee27 0a87 	vmul.f32	s0, s15, s14
   1d1da:	4770      	bx	lr
   1d1dc:	4c000000 	.word	0x4c000000
   1d1e0:	ffff3cb0 	.word	0xffff3cb0
   1d1e4:	7149f2ca 	.word	0x7149f2ca
   1d1e8:	f149f2ca 	.word	0xf149f2ca
   1d1ec:	33000000 	.word	0x33000000
   1d1f0:	0da24260 	.word	0x0da24260
   1d1f4:	8da24260 	.word	0x8da24260

0001d1f8 <__aeabi_atexit>:
   1d1f8:	4603      	mov	r3, r0
   1d1fa:	4608      	mov	r0, r1
   1d1fc:	4619      	mov	r1, r3
   1d1fe:	f002 bb85 	b.w	1f90c <__cxa_atexit>
   1d202:	bf00      	nop

0001d204 <__aeabi_drsub>:
   1d204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1d208:	e002      	b.n	1d210 <__adddf3>
   1d20a:	bf00      	nop

0001d20c <__aeabi_dsub>:
   1d20c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001d210 <__adddf3>:
   1d210:	b530      	push	{r4, r5, lr}
   1d212:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1d216:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1d21a:	ea94 0f05 	teq	r4, r5
   1d21e:	bf08      	it	eq
   1d220:	ea90 0f02 	teqeq	r0, r2
   1d224:	bf1f      	itttt	ne
   1d226:	ea54 0c00 	orrsne.w	ip, r4, r0
   1d22a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1d22e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1d232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1d236:	f000 80e2 	beq.w	1d3fe <__adddf3+0x1ee>
   1d23a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1d23e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1d242:	bfb8      	it	lt
   1d244:	426d      	neglt	r5, r5
   1d246:	dd0c      	ble.n	1d262 <__adddf3+0x52>
   1d248:	442c      	add	r4, r5
   1d24a:	ea80 0202 	eor.w	r2, r0, r2
   1d24e:	ea81 0303 	eor.w	r3, r1, r3
   1d252:	ea82 0000 	eor.w	r0, r2, r0
   1d256:	ea83 0101 	eor.w	r1, r3, r1
   1d25a:	ea80 0202 	eor.w	r2, r0, r2
   1d25e:	ea81 0303 	eor.w	r3, r1, r3
   1d262:	2d36      	cmp	r5, #54	; 0x36
   1d264:	bf88      	it	hi
   1d266:	bd30      	pophi	{r4, r5, pc}
   1d268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1d26c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1d270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1d274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1d278:	d002      	beq.n	1d280 <__adddf3+0x70>
   1d27a:	4240      	negs	r0, r0
   1d27c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1d284:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1d288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1d28c:	d002      	beq.n	1d294 <__adddf3+0x84>
   1d28e:	4252      	negs	r2, r2
   1d290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1d294:	ea94 0f05 	teq	r4, r5
   1d298:	f000 80a7 	beq.w	1d3ea <__adddf3+0x1da>
   1d29c:	f1a4 0401 	sub.w	r4, r4, #1
   1d2a0:	f1d5 0e20 	rsbs	lr, r5, #32
   1d2a4:	db0d      	blt.n	1d2c2 <__adddf3+0xb2>
   1d2a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   1d2aa:	fa22 f205 	lsr.w	r2, r2, r5
   1d2ae:	1880      	adds	r0, r0, r2
   1d2b0:	f141 0100 	adc.w	r1, r1, #0
   1d2b4:	fa03 f20e 	lsl.w	r2, r3, lr
   1d2b8:	1880      	adds	r0, r0, r2
   1d2ba:	fa43 f305 	asr.w	r3, r3, r5
   1d2be:	4159      	adcs	r1, r3
   1d2c0:	e00e      	b.n	1d2e0 <__adddf3+0xd0>
   1d2c2:	f1a5 0520 	sub.w	r5, r5, #32
   1d2c6:	f10e 0e20 	add.w	lr, lr, #32
   1d2ca:	2a01      	cmp	r2, #1
   1d2cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   1d2d0:	bf28      	it	cs
   1d2d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   1d2d6:	fa43 f305 	asr.w	r3, r3, r5
   1d2da:	18c0      	adds	r0, r0, r3
   1d2dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1d2e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1d2e4:	d507      	bpl.n	1d2f6 <__adddf3+0xe6>
   1d2e6:	f04f 0e00 	mov.w	lr, #0
   1d2ea:	f1dc 0c00 	rsbs	ip, ip, #0
   1d2ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   1d2f2:	eb6e 0101 	sbc.w	r1, lr, r1
   1d2f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1d2fa:	d31b      	bcc.n	1d334 <__adddf3+0x124>
   1d2fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1d300:	d30c      	bcc.n	1d31c <__adddf3+0x10c>
   1d302:	0849      	lsrs	r1, r1, #1
   1d304:	ea5f 0030 	movs.w	r0, r0, rrx
   1d308:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1d30c:	f104 0401 	add.w	r4, r4, #1
   1d310:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1d314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1d318:	f080 809a 	bcs.w	1d450 <__adddf3+0x240>
   1d31c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1d320:	bf08      	it	eq
   1d322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1d326:	f150 0000 	adcs.w	r0, r0, #0
   1d32a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1d32e:	ea41 0105 	orr.w	r1, r1, r5
   1d332:	bd30      	pop	{r4, r5, pc}
   1d334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1d338:	4140      	adcs	r0, r0
   1d33a:	eb41 0101 	adc.w	r1, r1, r1
   1d33e:	3c01      	subs	r4, #1
   1d340:	bf28      	it	cs
   1d342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1d346:	d2e9      	bcs.n	1d31c <__adddf3+0x10c>
   1d348:	f091 0f00 	teq	r1, #0
   1d34c:	bf04      	itt	eq
   1d34e:	4601      	moveq	r1, r0
   1d350:	2000      	moveq	r0, #0
   1d352:	fab1 f381 	clz	r3, r1
   1d356:	bf08      	it	eq
   1d358:	3320      	addeq	r3, #32
   1d35a:	f1a3 030b 	sub.w	r3, r3, #11
   1d35e:	f1b3 0220 	subs.w	r2, r3, #32
   1d362:	da0c      	bge.n	1d37e <__adddf3+0x16e>
   1d364:	320c      	adds	r2, #12
   1d366:	dd08      	ble.n	1d37a <__adddf3+0x16a>
   1d368:	f102 0c14 	add.w	ip, r2, #20
   1d36c:	f1c2 020c 	rsb	r2, r2, #12
   1d370:	fa01 f00c 	lsl.w	r0, r1, ip
   1d374:	fa21 f102 	lsr.w	r1, r1, r2
   1d378:	e00c      	b.n	1d394 <__adddf3+0x184>
   1d37a:	f102 0214 	add.w	r2, r2, #20
   1d37e:	bfd8      	it	le
   1d380:	f1c2 0c20 	rsble	ip, r2, #32
   1d384:	fa01 f102 	lsl.w	r1, r1, r2
   1d388:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d38c:	bfdc      	itt	le
   1d38e:	ea41 010c 	orrle.w	r1, r1, ip
   1d392:	4090      	lslle	r0, r2
   1d394:	1ae4      	subs	r4, r4, r3
   1d396:	bfa2      	ittt	ge
   1d398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1d39c:	4329      	orrge	r1, r5
   1d39e:	bd30      	popge	{r4, r5, pc}
   1d3a0:	ea6f 0404 	mvn.w	r4, r4
   1d3a4:	3c1f      	subs	r4, #31
   1d3a6:	da1c      	bge.n	1d3e2 <__adddf3+0x1d2>
   1d3a8:	340c      	adds	r4, #12
   1d3aa:	dc0e      	bgt.n	1d3ca <__adddf3+0x1ba>
   1d3ac:	f104 0414 	add.w	r4, r4, #20
   1d3b0:	f1c4 0220 	rsb	r2, r4, #32
   1d3b4:	fa20 f004 	lsr.w	r0, r0, r4
   1d3b8:	fa01 f302 	lsl.w	r3, r1, r2
   1d3bc:	ea40 0003 	orr.w	r0, r0, r3
   1d3c0:	fa21 f304 	lsr.w	r3, r1, r4
   1d3c4:	ea45 0103 	orr.w	r1, r5, r3
   1d3c8:	bd30      	pop	{r4, r5, pc}
   1d3ca:	f1c4 040c 	rsb	r4, r4, #12
   1d3ce:	f1c4 0220 	rsb	r2, r4, #32
   1d3d2:	fa20 f002 	lsr.w	r0, r0, r2
   1d3d6:	fa01 f304 	lsl.w	r3, r1, r4
   1d3da:	ea40 0003 	orr.w	r0, r0, r3
   1d3de:	4629      	mov	r1, r5
   1d3e0:	bd30      	pop	{r4, r5, pc}
   1d3e2:	fa21 f004 	lsr.w	r0, r1, r4
   1d3e6:	4629      	mov	r1, r5
   1d3e8:	bd30      	pop	{r4, r5, pc}
   1d3ea:	f094 0f00 	teq	r4, #0
   1d3ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1d3f2:	bf06      	itte	eq
   1d3f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1d3f8:	3401      	addeq	r4, #1
   1d3fa:	3d01      	subne	r5, #1
   1d3fc:	e74e      	b.n	1d29c <__adddf3+0x8c>
   1d3fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1d402:	bf18      	it	ne
   1d404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1d408:	d029      	beq.n	1d45e <__adddf3+0x24e>
   1d40a:	ea94 0f05 	teq	r4, r5
   1d40e:	bf08      	it	eq
   1d410:	ea90 0f02 	teqeq	r0, r2
   1d414:	d005      	beq.n	1d422 <__adddf3+0x212>
   1d416:	ea54 0c00 	orrs.w	ip, r4, r0
   1d41a:	bf04      	itt	eq
   1d41c:	4619      	moveq	r1, r3
   1d41e:	4610      	moveq	r0, r2
   1d420:	bd30      	pop	{r4, r5, pc}
   1d422:	ea91 0f03 	teq	r1, r3
   1d426:	bf1e      	ittt	ne
   1d428:	2100      	movne	r1, #0
   1d42a:	2000      	movne	r0, #0
   1d42c:	bd30      	popne	{r4, r5, pc}
   1d42e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1d432:	d105      	bne.n	1d440 <__adddf3+0x230>
   1d434:	0040      	lsls	r0, r0, #1
   1d436:	4149      	adcs	r1, r1
   1d438:	bf28      	it	cs
   1d43a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1d43e:	bd30      	pop	{r4, r5, pc}
   1d440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1d444:	bf3c      	itt	cc
   1d446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1d44a:	bd30      	popcc	{r4, r5, pc}
   1d44c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1d450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1d454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1d458:	f04f 0000 	mov.w	r0, #0
   1d45c:	bd30      	pop	{r4, r5, pc}
   1d45e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1d462:	bf1a      	itte	ne
   1d464:	4619      	movne	r1, r3
   1d466:	4610      	movne	r0, r2
   1d468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1d46c:	bf1c      	itt	ne
   1d46e:	460b      	movne	r3, r1
   1d470:	4602      	movne	r2, r0
   1d472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1d476:	bf06      	itte	eq
   1d478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1d47c:	ea91 0f03 	teqeq	r1, r3
   1d480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1d484:	bd30      	pop	{r4, r5, pc}
   1d486:	bf00      	nop

0001d488 <__aeabi_ui2d>:
   1d488:	f090 0f00 	teq	r0, #0
   1d48c:	bf04      	itt	eq
   1d48e:	2100      	moveq	r1, #0
   1d490:	4770      	bxeq	lr
   1d492:	b530      	push	{r4, r5, lr}
   1d494:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1d498:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1d49c:	f04f 0500 	mov.w	r5, #0
   1d4a0:	f04f 0100 	mov.w	r1, #0
   1d4a4:	e750      	b.n	1d348 <__adddf3+0x138>
   1d4a6:	bf00      	nop

0001d4a8 <__aeabi_i2d>:
   1d4a8:	f090 0f00 	teq	r0, #0
   1d4ac:	bf04      	itt	eq
   1d4ae:	2100      	moveq	r1, #0
   1d4b0:	4770      	bxeq	lr
   1d4b2:	b530      	push	{r4, r5, lr}
   1d4b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1d4b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1d4bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1d4c0:	bf48      	it	mi
   1d4c2:	4240      	negmi	r0, r0
   1d4c4:	f04f 0100 	mov.w	r1, #0
   1d4c8:	e73e      	b.n	1d348 <__adddf3+0x138>
   1d4ca:	bf00      	nop

0001d4cc <__aeabi_f2d>:
   1d4cc:	0042      	lsls	r2, r0, #1
   1d4ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1d4d2:	ea4f 0131 	mov.w	r1, r1, rrx
   1d4d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1d4da:	bf1f      	itttt	ne
   1d4dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1d4e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1d4e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1d4e8:	4770      	bxne	lr
   1d4ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1d4ee:	bf08      	it	eq
   1d4f0:	4770      	bxeq	lr
   1d4f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1d4f6:	bf04      	itt	eq
   1d4f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1d4fc:	4770      	bxeq	lr
   1d4fe:	b530      	push	{r4, r5, lr}
   1d500:	f44f 7460 	mov.w	r4, #896	; 0x380
   1d504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1d508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1d50c:	e71c      	b.n	1d348 <__adddf3+0x138>
   1d50e:	bf00      	nop

0001d510 <__aeabi_ul2d>:
   1d510:	ea50 0201 	orrs.w	r2, r0, r1
   1d514:	bf08      	it	eq
   1d516:	4770      	bxeq	lr
   1d518:	b530      	push	{r4, r5, lr}
   1d51a:	f04f 0500 	mov.w	r5, #0
   1d51e:	e00a      	b.n	1d536 <__aeabi_l2d+0x16>

0001d520 <__aeabi_l2d>:
   1d520:	ea50 0201 	orrs.w	r2, r0, r1
   1d524:	bf08      	it	eq
   1d526:	4770      	bxeq	lr
   1d528:	b530      	push	{r4, r5, lr}
   1d52a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1d52e:	d502      	bpl.n	1d536 <__aeabi_l2d+0x16>
   1d530:	4240      	negs	r0, r0
   1d532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d536:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1d53a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1d53e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1d542:	f43f aed8 	beq.w	1d2f6 <__adddf3+0xe6>
   1d546:	f04f 0203 	mov.w	r2, #3
   1d54a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1d54e:	bf18      	it	ne
   1d550:	3203      	addne	r2, #3
   1d552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1d556:	bf18      	it	ne
   1d558:	3203      	addne	r2, #3
   1d55a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1d55e:	f1c2 0320 	rsb	r3, r2, #32
   1d562:	fa00 fc03 	lsl.w	ip, r0, r3
   1d566:	fa20 f002 	lsr.w	r0, r0, r2
   1d56a:	fa01 fe03 	lsl.w	lr, r1, r3
   1d56e:	ea40 000e 	orr.w	r0, r0, lr
   1d572:	fa21 f102 	lsr.w	r1, r1, r2
   1d576:	4414      	add	r4, r2
   1d578:	e6bd      	b.n	1d2f6 <__adddf3+0xe6>
   1d57a:	bf00      	nop

0001d57c <atof>:
   1d57c:	2100      	movs	r1, #0
   1d57e:	f001 bbf7 	b.w	1ed70 <strtod>
   1d582:	bf00      	nop

0001d584 <atol>:
   1d584:	220a      	movs	r2, #10
   1d586:	2100      	movs	r1, #0
   1d588:	f001 bca4 	b.w	1eed4 <strtol>

0001d58c <malloc>:
   1d58c:	4b02      	ldr	r3, [pc, #8]	; (1d598 <malloc+0xc>)
   1d58e:	4601      	mov	r1, r0
   1d590:	6818      	ldr	r0, [r3, #0]
   1d592:	f000 b80b 	b.w	1d5ac <_malloc_r>
   1d596:	bf00      	nop
   1d598:	200043c8 	.word	0x200043c8

0001d59c <free>:
   1d59c:	4b02      	ldr	r3, [pc, #8]	; (1d5a8 <free+0xc>)
   1d59e:	4601      	mov	r1, r0
   1d5a0:	6818      	ldr	r0, [r3, #0]
   1d5a2:	f002 bcef 	b.w	1ff84 <_free_r>
   1d5a6:	bf00      	nop
   1d5a8:	200043c8 	.word	0x200043c8

0001d5ac <_malloc_r>:
   1d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5b0:	f101 060b 	add.w	r6, r1, #11
   1d5b4:	2e16      	cmp	r6, #22
   1d5b6:	b083      	sub	sp, #12
   1d5b8:	4604      	mov	r4, r0
   1d5ba:	d824      	bhi.n	1d606 <_malloc_r+0x5a>
   1d5bc:	2910      	cmp	r1, #16
   1d5be:	f200 80ba 	bhi.w	1d736 <_malloc_r+0x18a>
   1d5c2:	f000 faa3 	bl	1db0c <__malloc_lock>
   1d5c6:	2610      	movs	r6, #16
   1d5c8:	2218      	movs	r2, #24
   1d5ca:	2002      	movs	r0, #2
   1d5cc:	4fb5      	ldr	r7, [pc, #724]	; (1d8a4 <_malloc_r+0x2f8>)
   1d5ce:	443a      	add	r2, r7
   1d5d0:	f1a2 0108 	sub.w	r1, r2, #8
   1d5d4:	6853      	ldr	r3, [r2, #4]
   1d5d6:	428b      	cmp	r3, r1
   1d5d8:	f000 80ba 	beq.w	1d750 <_malloc_r+0x1a4>
   1d5dc:	685a      	ldr	r2, [r3, #4]
   1d5de:	68d9      	ldr	r1, [r3, #12]
   1d5e0:	f022 0203 	bic.w	r2, r2, #3
   1d5e4:	441a      	add	r2, r3
   1d5e6:	689d      	ldr	r5, [r3, #8]
   1d5e8:	60e9      	str	r1, [r5, #12]
   1d5ea:	608d      	str	r5, [r1, #8]
   1d5ec:	6851      	ldr	r1, [r2, #4]
   1d5ee:	f041 0101 	orr.w	r1, r1, #1
   1d5f2:	4620      	mov	r0, r4
   1d5f4:	6051      	str	r1, [r2, #4]
   1d5f6:	f103 0508 	add.w	r5, r3, #8
   1d5fa:	f000 fa8d 	bl	1db18 <__malloc_unlock>
   1d5fe:	4628      	mov	r0, r5
   1d600:	b003      	add	sp, #12
   1d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d606:	f036 0607 	bics.w	r6, r6, #7
   1d60a:	f100 8094 	bmi.w	1d736 <_malloc_r+0x18a>
   1d60e:	42b1      	cmp	r1, r6
   1d610:	f200 8091 	bhi.w	1d736 <_malloc_r+0x18a>
   1d614:	f000 fa7a 	bl	1db0c <__malloc_lock>
   1d618:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1d61c:	f0c0 819a 	bcc.w	1d954 <_malloc_r+0x3a8>
   1d620:	0a73      	lsrs	r3, r6, #9
   1d622:	f000 808f 	beq.w	1d744 <_malloc_r+0x198>
   1d626:	2b04      	cmp	r3, #4
   1d628:	f200 816f 	bhi.w	1d90a <_malloc_r+0x35e>
   1d62c:	09b3      	lsrs	r3, r6, #6
   1d62e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1d632:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   1d636:	00c3      	lsls	r3, r0, #3
   1d638:	4f9a      	ldr	r7, [pc, #616]	; (1d8a4 <_malloc_r+0x2f8>)
   1d63a:	443b      	add	r3, r7
   1d63c:	f1a3 0508 	sub.w	r5, r3, #8
   1d640:	685b      	ldr	r3, [r3, #4]
   1d642:	429d      	cmp	r5, r3
   1d644:	d106      	bne.n	1d654 <_malloc_r+0xa8>
   1d646:	e00c      	b.n	1d662 <_malloc_r+0xb6>
   1d648:	2900      	cmp	r1, #0
   1d64a:	f280 8127 	bge.w	1d89c <_malloc_r+0x2f0>
   1d64e:	68db      	ldr	r3, [r3, #12]
   1d650:	429d      	cmp	r5, r3
   1d652:	d006      	beq.n	1d662 <_malloc_r+0xb6>
   1d654:	685a      	ldr	r2, [r3, #4]
   1d656:	f022 0203 	bic.w	r2, r2, #3
   1d65a:	1b91      	subs	r1, r2, r6
   1d65c:	290f      	cmp	r1, #15
   1d65e:	ddf3      	ble.n	1d648 <_malloc_r+0x9c>
   1d660:	4660      	mov	r0, ip
   1d662:	693d      	ldr	r5, [r7, #16]
   1d664:	f8df c250 	ldr.w	ip, [pc, #592]	; 1d8b8 <_malloc_r+0x30c>
   1d668:	4565      	cmp	r5, ip
   1d66a:	d07c      	beq.n	1d766 <_malloc_r+0x1ba>
   1d66c:	686a      	ldr	r2, [r5, #4]
   1d66e:	f022 0203 	bic.w	r2, r2, #3
   1d672:	1b93      	subs	r3, r2, r6
   1d674:	2b0f      	cmp	r3, #15
   1d676:	f300 817b 	bgt.w	1d970 <_malloc_r+0x3c4>
   1d67a:	2b00      	cmp	r3, #0
   1d67c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   1d680:	f280 816c 	bge.w	1d95c <_malloc_r+0x3b0>
   1d684:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1d688:	f080 811a 	bcs.w	1d8c0 <_malloc_r+0x314>
   1d68c:	08d3      	lsrs	r3, r2, #3
   1d68e:	6879      	ldr	r1, [r7, #4]
   1d690:	3301      	adds	r3, #1
   1d692:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   1d696:	2201      	movs	r2, #1
   1d698:	fa02 f20e 	lsl.w	r2, r2, lr
   1d69c:	430a      	orrs	r2, r1
   1d69e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   1d6a2:	f8c5 e008 	str.w	lr, [r5, #8]
   1d6a6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1d6aa:	3908      	subs	r1, #8
   1d6ac:	60e9      	str	r1, [r5, #12]
   1d6ae:	607a      	str	r2, [r7, #4]
   1d6b0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   1d6b4:	f8ce 500c 	str.w	r5, [lr, #12]
   1d6b8:	1083      	asrs	r3, r0, #2
   1d6ba:	2101      	movs	r1, #1
   1d6bc:	4099      	lsls	r1, r3
   1d6be:	4291      	cmp	r1, r2
   1d6c0:	d857      	bhi.n	1d772 <_malloc_r+0x1c6>
   1d6c2:	4211      	tst	r1, r2
   1d6c4:	d106      	bne.n	1d6d4 <_malloc_r+0x128>
   1d6c6:	f020 0003 	bic.w	r0, r0, #3
   1d6ca:	0049      	lsls	r1, r1, #1
   1d6cc:	4211      	tst	r1, r2
   1d6ce:	f100 0004 	add.w	r0, r0, #4
   1d6d2:	d0fa      	beq.n	1d6ca <_malloc_r+0x11e>
   1d6d4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1d6d8:	464d      	mov	r5, r9
   1d6da:	4686      	mov	lr, r0
   1d6dc:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1d6e0:	4545      	cmp	r5, r8
   1d6e2:	d108      	bne.n	1d6f6 <_malloc_r+0x14a>
   1d6e4:	e11d      	b.n	1d922 <_malloc_r+0x376>
   1d6e6:	2b00      	cmp	r3, #0
   1d6e8:	f280 8124 	bge.w	1d934 <_malloc_r+0x388>
   1d6ec:	f8d8 800c 	ldr.w	r8, [r8, #12]
   1d6f0:	4545      	cmp	r5, r8
   1d6f2:	f000 8116 	beq.w	1d922 <_malloc_r+0x376>
   1d6f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d6fa:	f022 0203 	bic.w	r2, r2, #3
   1d6fe:	1b93      	subs	r3, r2, r6
   1d700:	2b0f      	cmp	r3, #15
   1d702:	ddf0      	ble.n	1d6e6 <_malloc_r+0x13a>
   1d704:	4620      	mov	r0, r4
   1d706:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   1d70a:	eb08 0106 	add.w	r1, r8, r6
   1d70e:	f046 0601 	orr.w	r6, r6, #1
   1d712:	f8c8 6004 	str.w	r6, [r8, #4]
   1d716:	60ec      	str	r4, [r5, #12]
   1d718:	60a5      	str	r5, [r4, #8]
   1d71a:	f043 0401 	orr.w	r4, r3, #1
   1d71e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1d722:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1d726:	604c      	str	r4, [r1, #4]
   1d728:	f848 3002 	str.w	r3, [r8, r2]
   1d72c:	f000 f9f4 	bl	1db18 <__malloc_unlock>
   1d730:	f108 0508 	add.w	r5, r8, #8
   1d734:	e002      	b.n	1d73c <_malloc_r+0x190>
   1d736:	230c      	movs	r3, #12
   1d738:	6023      	str	r3, [r4, #0]
   1d73a:	2500      	movs	r5, #0
   1d73c:	4628      	mov	r0, r5
   1d73e:	b003      	add	sp, #12
   1d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d744:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d748:	2040      	movs	r0, #64	; 0x40
   1d74a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   1d74e:	e773      	b.n	1d638 <_malloc_r+0x8c>
   1d750:	68d3      	ldr	r3, [r2, #12]
   1d752:	429a      	cmp	r2, r3
   1d754:	bf08      	it	eq
   1d756:	3002      	addeq	r0, #2
   1d758:	f47f af40 	bne.w	1d5dc <_malloc_r+0x30>
   1d75c:	693d      	ldr	r5, [r7, #16]
   1d75e:	f8df c158 	ldr.w	ip, [pc, #344]	; 1d8b8 <_malloc_r+0x30c>
   1d762:	4565      	cmp	r5, ip
   1d764:	d182      	bne.n	1d66c <_malloc_r+0xc0>
   1d766:	687a      	ldr	r2, [r7, #4]
   1d768:	1083      	asrs	r3, r0, #2
   1d76a:	2101      	movs	r1, #1
   1d76c:	4099      	lsls	r1, r3
   1d76e:	4291      	cmp	r1, r2
   1d770:	d9a7      	bls.n	1d6c2 <_malloc_r+0x116>
   1d772:	68bd      	ldr	r5, [r7, #8]
   1d774:	686b      	ldr	r3, [r5, #4]
   1d776:	f023 0903 	bic.w	r9, r3, #3
   1d77a:	454e      	cmp	r6, r9
   1d77c:	d803      	bhi.n	1d786 <_malloc_r+0x1da>
   1d77e:	eba9 0306 	sub.w	r3, r9, r6
   1d782:	2b0f      	cmp	r3, #15
   1d784:	dc7a      	bgt.n	1d87c <_malloc_r+0x2d0>
   1d786:	f8df b134 	ldr.w	fp, [pc, #308]	; 1d8bc <_malloc_r+0x310>
   1d78a:	4b47      	ldr	r3, [pc, #284]	; (1d8a8 <_malloc_r+0x2fc>)
   1d78c:	f8db 2000 	ldr.w	r2, [fp]
   1d790:	681b      	ldr	r3, [r3, #0]
   1d792:	3201      	adds	r2, #1
   1d794:	4433      	add	r3, r6
   1d796:	eb05 0a09 	add.w	sl, r5, r9
   1d79a:	f000 8133 	beq.w	1da04 <_malloc_r+0x458>
   1d79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1d7a2:	330f      	adds	r3, #15
   1d7a4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   1d7a8:	f028 080f 	bic.w	r8, r8, #15
   1d7ac:	4641      	mov	r1, r8
   1d7ae:	4620      	mov	r0, r4
   1d7b0:	f002 f8b8 	bl	1f924 <_sbrk_r>
   1d7b4:	1c41      	adds	r1, r0, #1
   1d7b6:	4602      	mov	r2, r0
   1d7b8:	f000 80f3 	beq.w	1d9a2 <_malloc_r+0x3f6>
   1d7bc:	4582      	cmp	sl, r0
   1d7be:	f200 80ee 	bhi.w	1d99e <_malloc_r+0x3f2>
   1d7c2:	4b3a      	ldr	r3, [pc, #232]	; (1d8ac <_malloc_r+0x300>)
   1d7c4:	6819      	ldr	r1, [r3, #0]
   1d7c6:	4441      	add	r1, r8
   1d7c8:	6019      	str	r1, [r3, #0]
   1d7ca:	4608      	mov	r0, r1
   1d7cc:	f000 814e 	beq.w	1da6c <_malloc_r+0x4c0>
   1d7d0:	f8db 1000 	ldr.w	r1, [fp]
   1d7d4:	9301      	str	r3, [sp, #4]
   1d7d6:	3101      	adds	r1, #1
   1d7d8:	bf1b      	ittet	ne
   1d7da:	eba2 010a 	subne.w	r1, r2, sl
   1d7de:	1809      	addne	r1, r1, r0
   1d7e0:	f8cb 2000 	streq.w	r2, [fp]
   1d7e4:	6019      	strne	r1, [r3, #0]
   1d7e6:	f012 0b07 	ands.w	fp, r2, #7
   1d7ea:	f000 8117 	beq.w	1da1c <_malloc_r+0x470>
   1d7ee:	f1cb 0108 	rsb	r1, fp, #8
   1d7f2:	440a      	add	r2, r1
   1d7f4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   1d7f8:	4490      	add	r8, r2
   1d7fa:	3108      	adds	r1, #8
   1d7fc:	eba1 0108 	sub.w	r1, r1, r8
   1d800:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1d804:	4651      	mov	r1, sl
   1d806:	4620      	mov	r0, r4
   1d808:	9200      	str	r2, [sp, #0]
   1d80a:	f002 f88b 	bl	1f924 <_sbrk_r>
   1d80e:	1c42      	adds	r2, r0, #1
   1d810:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d814:	f000 814f 	beq.w	1dab6 <_malloc_r+0x50a>
   1d818:	1a80      	subs	r0, r0, r2
   1d81a:	eb00 080a 	add.w	r8, r0, sl
   1d81e:	6819      	ldr	r1, [r3, #0]
   1d820:	60ba      	str	r2, [r7, #8]
   1d822:	f048 0001 	orr.w	r0, r8, #1
   1d826:	4451      	add	r1, sl
   1d828:	42bd      	cmp	r5, r7
   1d82a:	6050      	str	r0, [r2, #4]
   1d82c:	6019      	str	r1, [r3, #0]
   1d82e:	f000 8129 	beq.w	1da84 <_malloc_r+0x4d8>
   1d832:	f1b9 0f0f 	cmp.w	r9, #15
   1d836:	f240 8127 	bls.w	1da88 <_malloc_r+0x4dc>
   1d83a:	6868      	ldr	r0, [r5, #4]
   1d83c:	f1a9 0c0c 	sub.w	ip, r9, #12
   1d840:	f02c 0c07 	bic.w	ip, ip, #7
   1d844:	f000 0001 	and.w	r0, r0, #1
   1d848:	ea40 000c 	orr.w	r0, r0, ip
   1d84c:	6068      	str	r0, [r5, #4]
   1d84e:	f04f 0e05 	mov.w	lr, #5
   1d852:	eb05 000c 	add.w	r0, r5, ip
   1d856:	f1bc 0f0f 	cmp.w	ip, #15
   1d85a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   1d85e:	f200 8132 	bhi.w	1dac6 <_malloc_r+0x51a>
   1d862:	6850      	ldr	r0, [r2, #4]
   1d864:	4615      	mov	r5, r2
   1d866:	4b12      	ldr	r3, [pc, #72]	; (1d8b0 <_malloc_r+0x304>)
   1d868:	681a      	ldr	r2, [r3, #0]
   1d86a:	428a      	cmp	r2, r1
   1d86c:	bf38      	it	cc
   1d86e:	6019      	strcc	r1, [r3, #0]
   1d870:	4b10      	ldr	r3, [pc, #64]	; (1d8b4 <_malloc_r+0x308>)
   1d872:	681a      	ldr	r2, [r3, #0]
   1d874:	428a      	cmp	r2, r1
   1d876:	bf38      	it	cc
   1d878:	6019      	strcc	r1, [r3, #0]
   1d87a:	e094      	b.n	1d9a6 <_malloc_r+0x3fa>
   1d87c:	19aa      	adds	r2, r5, r6
   1d87e:	f043 0301 	orr.w	r3, r3, #1
   1d882:	f046 0601 	orr.w	r6, r6, #1
   1d886:	606e      	str	r6, [r5, #4]
   1d888:	4620      	mov	r0, r4
   1d88a:	60ba      	str	r2, [r7, #8]
   1d88c:	6053      	str	r3, [r2, #4]
   1d88e:	f000 f943 	bl	1db18 <__malloc_unlock>
   1d892:	3508      	adds	r5, #8
   1d894:	4628      	mov	r0, r5
   1d896:	b003      	add	sp, #12
   1d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d89c:	68d9      	ldr	r1, [r3, #12]
   1d89e:	441a      	add	r2, r3
   1d8a0:	e6a1      	b.n	1d5e6 <_malloc_r+0x3a>
   1d8a2:	bf00      	nop
   1d8a4:	20003fac 	.word	0x20003fac
   1d8a8:	200059ec 	.word	0x200059ec
   1d8ac:	200059bc 	.word	0x200059bc
   1d8b0:	200059e4 	.word	0x200059e4
   1d8b4:	200059e8 	.word	0x200059e8
   1d8b8:	20003fb4 	.word	0x20003fb4
   1d8bc:	200043b4 	.word	0x200043b4
   1d8c0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   1d8c4:	ea4f 2352 	mov.w	r3, r2, lsr #9
   1d8c8:	d363      	bcc.n	1d992 <_malloc_r+0x3e6>
   1d8ca:	2b14      	cmp	r3, #20
   1d8cc:	f200 80b7 	bhi.w	1da3e <_malloc_r+0x492>
   1d8d0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   1d8d4:	00c9      	lsls	r1, r1, #3
   1d8d6:	335b      	adds	r3, #91	; 0x5b
   1d8d8:	eb07 0e01 	add.w	lr, r7, r1
   1d8dc:	5879      	ldr	r1, [r7, r1]
   1d8de:	f1ae 0e08 	sub.w	lr, lr, #8
   1d8e2:	458e      	cmp	lr, r1
   1d8e4:	f000 8091 	beq.w	1da0a <_malloc_r+0x45e>
   1d8e8:	684b      	ldr	r3, [r1, #4]
   1d8ea:	f023 0303 	bic.w	r3, r3, #3
   1d8ee:	4293      	cmp	r3, r2
   1d8f0:	d902      	bls.n	1d8f8 <_malloc_r+0x34c>
   1d8f2:	6889      	ldr	r1, [r1, #8]
   1d8f4:	458e      	cmp	lr, r1
   1d8f6:	d1f7      	bne.n	1d8e8 <_malloc_r+0x33c>
   1d8f8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   1d8fc:	687a      	ldr	r2, [r7, #4]
   1d8fe:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   1d902:	f8ce 5008 	str.w	r5, [lr, #8]
   1d906:	60cd      	str	r5, [r1, #12]
   1d908:	e6d6      	b.n	1d6b8 <_malloc_r+0x10c>
   1d90a:	2b14      	cmp	r3, #20
   1d90c:	d959      	bls.n	1d9c2 <_malloc_r+0x416>
   1d90e:	2b54      	cmp	r3, #84	; 0x54
   1d910:	f200 809d 	bhi.w	1da4e <_malloc_r+0x4a2>
   1d914:	0b33      	lsrs	r3, r6, #12
   1d916:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1d91a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   1d91e:	00c3      	lsls	r3, r0, #3
   1d920:	e68a      	b.n	1d638 <_malloc_r+0x8c>
   1d922:	f10e 0e01 	add.w	lr, lr, #1
   1d926:	f01e 0f03 	tst.w	lr, #3
   1d92a:	f105 0508 	add.w	r5, r5, #8
   1d92e:	f47f aed5 	bne.w	1d6dc <_malloc_r+0x130>
   1d932:	e051      	b.n	1d9d8 <_malloc_r+0x42c>
   1d934:	4442      	add	r2, r8
   1d936:	4645      	mov	r5, r8
   1d938:	6853      	ldr	r3, [r2, #4]
   1d93a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1d93e:	f043 0301 	orr.w	r3, r3, #1
   1d942:	6053      	str	r3, [r2, #4]
   1d944:	f855 3f08 	ldr.w	r3, [r5, #8]!
   1d948:	4620      	mov	r0, r4
   1d94a:	60d9      	str	r1, [r3, #12]
   1d94c:	608b      	str	r3, [r1, #8]
   1d94e:	f000 f8e3 	bl	1db18 <__malloc_unlock>
   1d952:	e6f3      	b.n	1d73c <_malloc_r+0x190>
   1d954:	08f0      	lsrs	r0, r6, #3
   1d956:	f106 0208 	add.w	r2, r6, #8
   1d95a:	e637      	b.n	1d5cc <_malloc_r+0x20>
   1d95c:	442a      	add	r2, r5
   1d95e:	4620      	mov	r0, r4
   1d960:	6853      	ldr	r3, [r2, #4]
   1d962:	f043 0301 	orr.w	r3, r3, #1
   1d966:	6053      	str	r3, [r2, #4]
   1d968:	3508      	adds	r5, #8
   1d96a:	f000 f8d5 	bl	1db18 <__malloc_unlock>
   1d96e:	e6e5      	b.n	1d73c <_malloc_r+0x190>
   1d970:	19a9      	adds	r1, r5, r6
   1d972:	4620      	mov	r0, r4
   1d974:	f046 0601 	orr.w	r6, r6, #1
   1d978:	f043 0401 	orr.w	r4, r3, #1
   1d97c:	606e      	str	r6, [r5, #4]
   1d97e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1d982:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1d986:	604c      	str	r4, [r1, #4]
   1d988:	50ab      	str	r3, [r5, r2]
   1d98a:	f000 f8c5 	bl	1db18 <__malloc_unlock>
   1d98e:	3508      	adds	r5, #8
   1d990:	e6d4      	b.n	1d73c <_malloc_r+0x190>
   1d992:	0993      	lsrs	r3, r2, #6
   1d994:	f103 0139 	add.w	r1, r3, #57	; 0x39
   1d998:	00c9      	lsls	r1, r1, #3
   1d99a:	3338      	adds	r3, #56	; 0x38
   1d99c:	e79c      	b.n	1d8d8 <_malloc_r+0x32c>
   1d99e:	42bd      	cmp	r5, r7
   1d9a0:	d05f      	beq.n	1da62 <_malloc_r+0x4b6>
   1d9a2:	68bd      	ldr	r5, [r7, #8]
   1d9a4:	6868      	ldr	r0, [r5, #4]
   1d9a6:	f020 0803 	bic.w	r8, r0, #3
   1d9aa:	4546      	cmp	r6, r8
   1d9ac:	eba8 0306 	sub.w	r3, r8, r6
   1d9b0:	d802      	bhi.n	1d9b8 <_malloc_r+0x40c>
   1d9b2:	2b0f      	cmp	r3, #15
   1d9b4:	f73f af62 	bgt.w	1d87c <_malloc_r+0x2d0>
   1d9b8:	4620      	mov	r0, r4
   1d9ba:	f000 f8ad 	bl	1db18 <__malloc_unlock>
   1d9be:	2500      	movs	r5, #0
   1d9c0:	e6bc      	b.n	1d73c <_malloc_r+0x190>
   1d9c2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1d9c6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   1d9ca:	00c3      	lsls	r3, r0, #3
   1d9cc:	e634      	b.n	1d638 <_malloc_r+0x8c>
   1d9ce:	f859 3908 	ldr.w	r3, [r9], #-8
   1d9d2:	454b      	cmp	r3, r9
   1d9d4:	f040 8096 	bne.w	1db04 <_malloc_r+0x558>
   1d9d8:	f010 0f03 	tst.w	r0, #3
   1d9dc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   1d9e0:	d1f5      	bne.n	1d9ce <_malloc_r+0x422>
   1d9e2:	687b      	ldr	r3, [r7, #4]
   1d9e4:	ea23 0301 	bic.w	r3, r3, r1
   1d9e8:	607b      	str	r3, [r7, #4]
   1d9ea:	0049      	lsls	r1, r1, #1
   1d9ec:	4299      	cmp	r1, r3
   1d9ee:	f63f aec0 	bhi.w	1d772 <_malloc_r+0x1c6>
   1d9f2:	b919      	cbnz	r1, 1d9fc <_malloc_r+0x450>
   1d9f4:	e6bd      	b.n	1d772 <_malloc_r+0x1c6>
   1d9f6:	0049      	lsls	r1, r1, #1
   1d9f8:	f10e 0e04 	add.w	lr, lr, #4
   1d9fc:	4219      	tst	r1, r3
   1d9fe:	d0fa      	beq.n	1d9f6 <_malloc_r+0x44a>
   1da00:	4670      	mov	r0, lr
   1da02:	e667      	b.n	1d6d4 <_malloc_r+0x128>
   1da04:	f103 0810 	add.w	r8, r3, #16
   1da08:	e6d0      	b.n	1d7ac <_malloc_r+0x200>
   1da0a:	109a      	asrs	r2, r3, #2
   1da0c:	f04f 0801 	mov.w	r8, #1
   1da10:	687b      	ldr	r3, [r7, #4]
   1da12:	fa08 f202 	lsl.w	r2, r8, r2
   1da16:	431a      	orrs	r2, r3
   1da18:	607a      	str	r2, [r7, #4]
   1da1a:	e770      	b.n	1d8fe <_malloc_r+0x352>
   1da1c:	eb02 0108 	add.w	r1, r2, r8
   1da20:	4249      	negs	r1, r1
   1da22:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1da26:	4651      	mov	r1, sl
   1da28:	4620      	mov	r0, r4
   1da2a:	9200      	str	r2, [sp, #0]
   1da2c:	f001 ff7a 	bl	1f924 <_sbrk_r>
   1da30:	1c43      	adds	r3, r0, #1
   1da32:	e9dd 2300 	ldrd	r2, r3, [sp]
   1da36:	f47f aeef 	bne.w	1d818 <_malloc_r+0x26c>
   1da3a:	46da      	mov	sl, fp
   1da3c:	e6ef      	b.n	1d81e <_malloc_r+0x272>
   1da3e:	2b54      	cmp	r3, #84	; 0x54
   1da40:	d825      	bhi.n	1da8e <_malloc_r+0x4e2>
   1da42:	0b13      	lsrs	r3, r2, #12
   1da44:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   1da48:	00c9      	lsls	r1, r1, #3
   1da4a:	336e      	adds	r3, #110	; 0x6e
   1da4c:	e744      	b.n	1d8d8 <_malloc_r+0x32c>
   1da4e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1da52:	d825      	bhi.n	1daa0 <_malloc_r+0x4f4>
   1da54:	0bf3      	lsrs	r3, r6, #15
   1da56:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1da5a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   1da5e:	00c3      	lsls	r3, r0, #3
   1da60:	e5ea      	b.n	1d638 <_malloc_r+0x8c>
   1da62:	4b29      	ldr	r3, [pc, #164]	; (1db08 <_malloc_r+0x55c>)
   1da64:	6818      	ldr	r0, [r3, #0]
   1da66:	4440      	add	r0, r8
   1da68:	6018      	str	r0, [r3, #0]
   1da6a:	e6b1      	b.n	1d7d0 <_malloc_r+0x224>
   1da6c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   1da70:	f1bc 0f00 	cmp.w	ip, #0
   1da74:	f47f aeac 	bne.w	1d7d0 <_malloc_r+0x224>
   1da78:	68bd      	ldr	r5, [r7, #8]
   1da7a:	44c8      	add	r8, r9
   1da7c:	f048 0001 	orr.w	r0, r8, #1
   1da80:	6068      	str	r0, [r5, #4]
   1da82:	e6f0      	b.n	1d866 <_malloc_r+0x2ba>
   1da84:	4615      	mov	r5, r2
   1da86:	e6ee      	b.n	1d866 <_malloc_r+0x2ba>
   1da88:	2301      	movs	r3, #1
   1da8a:	6053      	str	r3, [r2, #4]
   1da8c:	e794      	b.n	1d9b8 <_malloc_r+0x40c>
   1da8e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1da92:	d823      	bhi.n	1dadc <_malloc_r+0x530>
   1da94:	0bd3      	lsrs	r3, r2, #15
   1da96:	f103 0178 	add.w	r1, r3, #120	; 0x78
   1da9a:	00c9      	lsls	r1, r1, #3
   1da9c:	3377      	adds	r3, #119	; 0x77
   1da9e:	e71b      	b.n	1d8d8 <_malloc_r+0x32c>
   1daa0:	f240 5254 	movw	r2, #1364	; 0x554
   1daa4:	4293      	cmp	r3, r2
   1daa6:	d823      	bhi.n	1daf0 <_malloc_r+0x544>
   1daa8:	0cb3      	lsrs	r3, r6, #18
   1daaa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1daae:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   1dab2:	00c3      	lsls	r3, r0, #3
   1dab4:	e5c0      	b.n	1d638 <_malloc_r+0x8c>
   1dab6:	f1ab 0b08 	sub.w	fp, fp, #8
   1daba:	44d8      	add	r8, fp
   1dabc:	eba8 0802 	sub.w	r8, r8, r2
   1dac0:	f04f 0a00 	mov.w	sl, #0
   1dac4:	e6ab      	b.n	1d81e <_malloc_r+0x272>
   1dac6:	f105 0108 	add.w	r1, r5, #8
   1daca:	4620      	mov	r0, r4
   1dacc:	9300      	str	r3, [sp, #0]
   1dace:	f002 fa59 	bl	1ff84 <_free_r>
   1dad2:	68bd      	ldr	r5, [r7, #8]
   1dad4:	9b00      	ldr	r3, [sp, #0]
   1dad6:	6868      	ldr	r0, [r5, #4]
   1dad8:	6819      	ldr	r1, [r3, #0]
   1dada:	e6c4      	b.n	1d866 <_malloc_r+0x2ba>
   1dadc:	f240 5154 	movw	r1, #1364	; 0x554
   1dae0:	428b      	cmp	r3, r1
   1dae2:	d80b      	bhi.n	1dafc <_malloc_r+0x550>
   1dae4:	0c93      	lsrs	r3, r2, #18
   1dae6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   1daea:	00c9      	lsls	r1, r1, #3
   1daec:	337c      	adds	r3, #124	; 0x7c
   1daee:	e6f3      	b.n	1d8d8 <_malloc_r+0x32c>
   1daf0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1daf4:	207f      	movs	r0, #127	; 0x7f
   1daf6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   1dafa:	e59d      	b.n	1d638 <_malloc_r+0x8c>
   1dafc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   1db00:	237e      	movs	r3, #126	; 0x7e
   1db02:	e6e9      	b.n	1d8d8 <_malloc_r+0x32c>
   1db04:	687b      	ldr	r3, [r7, #4]
   1db06:	e770      	b.n	1d9ea <_malloc_r+0x43e>
   1db08:	200059bc 	.word	0x200059bc

0001db0c <__malloc_lock>:
   1db0c:	4801      	ldr	r0, [pc, #4]	; (1db14 <__malloc_lock+0x8>)
   1db0e:	f002 b92b 	b.w	1fd68 <__retarget_lock_acquire_recursive>
   1db12:	bf00      	nop
   1db14:	200059b4 	.word	0x200059b4

0001db18 <__malloc_unlock>:
   1db18:	4801      	ldr	r0, [pc, #4]	; (1db20 <__malloc_unlock+0x8>)
   1db1a:	f002 b927 	b.w	1fd6c <__retarget_lock_release_recursive>
   1db1e:	bf00      	nop
   1db20:	200059b4 	.word	0x200059b4

0001db24 <_realloc_r>:
   1db24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db28:	4617      	mov	r7, r2
   1db2a:	2900      	cmp	r1, #0
   1db2c:	f000 8098 	beq.w	1dc60 <_realloc_r+0x13c>
   1db30:	460c      	mov	r4, r1
   1db32:	f107 050b 	add.w	r5, r7, #11
   1db36:	4680      	mov	r8, r0
   1db38:	f7ff ffe8 	bl	1db0c <__malloc_lock>
   1db3c:	2d16      	cmp	r5, #22
   1db3e:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1db42:	d85b      	bhi.n	1dbfc <_realloc_r+0xd8>
   1db44:	2510      	movs	r5, #16
   1db46:	462a      	mov	r2, r5
   1db48:	42af      	cmp	r7, r5
   1db4a:	d85c      	bhi.n	1dc06 <_realloc_r+0xe2>
   1db4c:	f021 0603 	bic.w	r6, r1, #3
   1db50:	4296      	cmp	r6, r2
   1db52:	f1a4 0908 	sub.w	r9, r4, #8
   1db56:	da62      	bge.n	1dc1e <_realloc_r+0xfa>
   1db58:	4bbc      	ldr	r3, [pc, #752]	; (1de4c <_realloc_r+0x328>)
   1db5a:	f8d3 c008 	ldr.w	ip, [r3, #8]
   1db5e:	eb09 0006 	add.w	r0, r9, r6
   1db62:	4584      	cmp	ip, r0
   1db64:	f000 8097 	beq.w	1dc96 <_realloc_r+0x172>
   1db68:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1db6c:	f02c 0301 	bic.w	r3, ip, #1
   1db70:	4403      	add	r3, r0
   1db72:	685b      	ldr	r3, [r3, #4]
   1db74:	07db      	lsls	r3, r3, #31
   1db76:	d468      	bmi.n	1dc4a <_realloc_r+0x126>
   1db78:	f02c 0c03 	bic.w	ip, ip, #3
   1db7c:	eb06 030c 	add.w	r3, r6, ip
   1db80:	4293      	cmp	r3, r2
   1db82:	da47      	bge.n	1dc14 <_realloc_r+0xf0>
   1db84:	07cb      	lsls	r3, r1, #31
   1db86:	d410      	bmi.n	1dbaa <_realloc_r+0x86>
   1db88:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1db8c:	eba9 0a03 	sub.w	sl, r9, r3
   1db90:	f8da 3004 	ldr.w	r3, [sl, #4]
   1db94:	f023 0103 	bic.w	r1, r3, #3
   1db98:	448c      	add	ip, r1
   1db9a:	44b4      	add	ip, r6
   1db9c:	4594      	cmp	ip, r2
   1db9e:	f280 8111 	bge.w	1ddc4 <_realloc_r+0x2a0>
   1dba2:	1873      	adds	r3, r6, r1
   1dba4:	4293      	cmp	r3, r2
   1dba6:	f280 80e8 	bge.w	1dd7a <_realloc_r+0x256>
   1dbaa:	4639      	mov	r1, r7
   1dbac:	4640      	mov	r0, r8
   1dbae:	f7ff fcfd 	bl	1d5ac <_malloc_r>
   1dbb2:	4607      	mov	r7, r0
   1dbb4:	b1e0      	cbz	r0, 1dbf0 <_realloc_r+0xcc>
   1dbb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1dbba:	f023 0301 	bic.w	r3, r3, #1
   1dbbe:	444b      	add	r3, r9
   1dbc0:	f1a0 0208 	sub.w	r2, r0, #8
   1dbc4:	4293      	cmp	r3, r2
   1dbc6:	f000 80d2 	beq.w	1dd6e <_realloc_r+0x24a>
   1dbca:	1f32      	subs	r2, r6, #4
   1dbcc:	2a24      	cmp	r2, #36	; 0x24
   1dbce:	f200 80f5 	bhi.w	1ddbc <_realloc_r+0x298>
   1dbd2:	2a13      	cmp	r2, #19
   1dbd4:	f200 80ac 	bhi.w	1dd30 <_realloc_r+0x20c>
   1dbd8:	4603      	mov	r3, r0
   1dbda:	4622      	mov	r2, r4
   1dbdc:	6811      	ldr	r1, [r2, #0]
   1dbde:	6019      	str	r1, [r3, #0]
   1dbe0:	6851      	ldr	r1, [r2, #4]
   1dbe2:	6059      	str	r1, [r3, #4]
   1dbe4:	6892      	ldr	r2, [r2, #8]
   1dbe6:	609a      	str	r2, [r3, #8]
   1dbe8:	4621      	mov	r1, r4
   1dbea:	4640      	mov	r0, r8
   1dbec:	f002 f9ca 	bl	1ff84 <_free_r>
   1dbf0:	4640      	mov	r0, r8
   1dbf2:	f7ff ff91 	bl	1db18 <__malloc_unlock>
   1dbf6:	4638      	mov	r0, r7
   1dbf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbfc:	f025 0507 	bic.w	r5, r5, #7
   1dc00:	2d00      	cmp	r5, #0
   1dc02:	462a      	mov	r2, r5
   1dc04:	daa0      	bge.n	1db48 <_realloc_r+0x24>
   1dc06:	230c      	movs	r3, #12
   1dc08:	f8c8 3000 	str.w	r3, [r8]
   1dc0c:	2700      	movs	r7, #0
   1dc0e:	4638      	mov	r0, r7
   1dc10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc14:	461e      	mov	r6, r3
   1dc16:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1dc1a:	60d3      	str	r3, [r2, #12]
   1dc1c:	609a      	str	r2, [r3, #8]
   1dc1e:	1b73      	subs	r3, r6, r5
   1dc20:	2b0f      	cmp	r3, #15
   1dc22:	d822      	bhi.n	1dc6a <_realloc_r+0x146>
   1dc24:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1dc28:	f003 0301 	and.w	r3, r3, #1
   1dc2c:	4333      	orrs	r3, r6
   1dc2e:	444e      	add	r6, r9
   1dc30:	f8c9 3004 	str.w	r3, [r9, #4]
   1dc34:	6873      	ldr	r3, [r6, #4]
   1dc36:	f043 0301 	orr.w	r3, r3, #1
   1dc3a:	6073      	str	r3, [r6, #4]
   1dc3c:	4640      	mov	r0, r8
   1dc3e:	4627      	mov	r7, r4
   1dc40:	f7ff ff6a 	bl	1db18 <__malloc_unlock>
   1dc44:	4638      	mov	r0, r7
   1dc46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc4a:	07c9      	lsls	r1, r1, #31
   1dc4c:	d4ad      	bmi.n	1dbaa <_realloc_r+0x86>
   1dc4e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1dc52:	eba9 0a03 	sub.w	sl, r9, r3
   1dc56:	f8da 1004 	ldr.w	r1, [sl, #4]
   1dc5a:	f021 0103 	bic.w	r1, r1, #3
   1dc5e:	e7a0      	b.n	1dba2 <_realloc_r+0x7e>
   1dc60:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc64:	4611      	mov	r1, r2
   1dc66:	f7ff bca1 	b.w	1d5ac <_malloc_r>
   1dc6a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1dc6e:	eb09 0105 	add.w	r1, r9, r5
   1dc72:	f002 0201 	and.w	r2, r2, #1
   1dc76:	444e      	add	r6, r9
   1dc78:	f043 0301 	orr.w	r3, r3, #1
   1dc7c:	432a      	orrs	r2, r5
   1dc7e:	f8c9 2004 	str.w	r2, [r9, #4]
   1dc82:	604b      	str	r3, [r1, #4]
   1dc84:	6873      	ldr	r3, [r6, #4]
   1dc86:	f043 0301 	orr.w	r3, r3, #1
   1dc8a:	3108      	adds	r1, #8
   1dc8c:	6073      	str	r3, [r6, #4]
   1dc8e:	4640      	mov	r0, r8
   1dc90:	f002 f978 	bl	1ff84 <_free_r>
   1dc94:	e7d2      	b.n	1dc3c <_realloc_r+0x118>
   1dc96:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1dc9a:	f020 0b03 	bic.w	fp, r0, #3
   1dc9e:	eb06 0c0b 	add.w	ip, r6, fp
   1dca2:	f105 0010 	add.w	r0, r5, #16
   1dca6:	4584      	cmp	ip, r0
   1dca8:	da4d      	bge.n	1dd46 <_realloc_r+0x222>
   1dcaa:	07c9      	lsls	r1, r1, #31
   1dcac:	f53f af7d 	bmi.w	1dbaa <_realloc_r+0x86>
   1dcb0:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1dcb4:	eba9 0a01 	sub.w	sl, r9, r1
   1dcb8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1dcbc:	f021 0103 	bic.w	r1, r1, #3
   1dcc0:	448b      	add	fp, r1
   1dcc2:	44b3      	add	fp, r6
   1dcc4:	4558      	cmp	r0, fp
   1dcc6:	f73f af6c 	bgt.w	1dba2 <_realloc_r+0x7e>
   1dcca:	4657      	mov	r7, sl
   1dccc:	f8da 100c 	ldr.w	r1, [sl, #12]
   1dcd0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1dcd4:	1f32      	subs	r2, r6, #4
   1dcd6:	2a24      	cmp	r2, #36	; 0x24
   1dcd8:	60c1      	str	r1, [r0, #12]
   1dcda:	6088      	str	r0, [r1, #8]
   1dcdc:	f200 80db 	bhi.w	1de96 <_realloc_r+0x372>
   1dce0:	2a13      	cmp	r2, #19
   1dce2:	f240 80d6 	bls.w	1de92 <_realloc_r+0x36e>
   1dce6:	6821      	ldr	r1, [r4, #0]
   1dce8:	f8ca 1008 	str.w	r1, [sl, #8]
   1dcec:	6861      	ldr	r1, [r4, #4]
   1dcee:	f8ca 100c 	str.w	r1, [sl, #12]
   1dcf2:	2a1b      	cmp	r2, #27
   1dcf4:	f200 80df 	bhi.w	1deb6 <_realloc_r+0x392>
   1dcf8:	3408      	adds	r4, #8
   1dcfa:	f10a 0210 	add.w	r2, sl, #16
   1dcfe:	6821      	ldr	r1, [r4, #0]
   1dd00:	6011      	str	r1, [r2, #0]
   1dd02:	6861      	ldr	r1, [r4, #4]
   1dd04:	6051      	str	r1, [r2, #4]
   1dd06:	68a1      	ldr	r1, [r4, #8]
   1dd08:	6091      	str	r1, [r2, #8]
   1dd0a:	eb0a 0105 	add.w	r1, sl, r5
   1dd0e:	ebab 0205 	sub.w	r2, fp, r5
   1dd12:	f042 0201 	orr.w	r2, r2, #1
   1dd16:	6099      	str	r1, [r3, #8]
   1dd18:	604a      	str	r2, [r1, #4]
   1dd1a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1dd1e:	f003 0301 	and.w	r3, r3, #1
   1dd22:	432b      	orrs	r3, r5
   1dd24:	4640      	mov	r0, r8
   1dd26:	f8ca 3004 	str.w	r3, [sl, #4]
   1dd2a:	f7ff fef5 	bl	1db18 <__malloc_unlock>
   1dd2e:	e76e      	b.n	1dc0e <_realloc_r+0xea>
   1dd30:	6823      	ldr	r3, [r4, #0]
   1dd32:	6003      	str	r3, [r0, #0]
   1dd34:	6863      	ldr	r3, [r4, #4]
   1dd36:	6043      	str	r3, [r0, #4]
   1dd38:	2a1b      	cmp	r2, #27
   1dd3a:	d868      	bhi.n	1de0e <_realloc_r+0x2ea>
   1dd3c:	f104 0208 	add.w	r2, r4, #8
   1dd40:	f100 0308 	add.w	r3, r0, #8
   1dd44:	e74a      	b.n	1dbdc <_realloc_r+0xb8>
   1dd46:	eb09 0205 	add.w	r2, r9, r5
   1dd4a:	609a      	str	r2, [r3, #8]
   1dd4c:	ebac 0305 	sub.w	r3, ip, r5
   1dd50:	f043 0301 	orr.w	r3, r3, #1
   1dd54:	6053      	str	r3, [r2, #4]
   1dd56:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1dd5a:	f003 0301 	and.w	r3, r3, #1
   1dd5e:	432b      	orrs	r3, r5
   1dd60:	4640      	mov	r0, r8
   1dd62:	f844 3c04 	str.w	r3, [r4, #-4]
   1dd66:	f7ff fed7 	bl	1db18 <__malloc_unlock>
   1dd6a:	4627      	mov	r7, r4
   1dd6c:	e74f      	b.n	1dc0e <_realloc_r+0xea>
   1dd6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1dd72:	f023 0303 	bic.w	r3, r3, #3
   1dd76:	441e      	add	r6, r3
   1dd78:	e751      	b.n	1dc1e <_realloc_r+0xfa>
   1dd7a:	4657      	mov	r7, sl
   1dd7c:	f8da 100c 	ldr.w	r1, [sl, #12]
   1dd80:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1dd84:	1f32      	subs	r2, r6, #4
   1dd86:	2a24      	cmp	r2, #36	; 0x24
   1dd88:	60c1      	str	r1, [r0, #12]
   1dd8a:	6088      	str	r0, [r1, #8]
   1dd8c:	d84c      	bhi.n	1de28 <_realloc_r+0x304>
   1dd8e:	2a13      	cmp	r2, #19
   1dd90:	d948      	bls.n	1de24 <_realloc_r+0x300>
   1dd92:	6821      	ldr	r1, [r4, #0]
   1dd94:	f8ca 1008 	str.w	r1, [sl, #8]
   1dd98:	6861      	ldr	r1, [r4, #4]
   1dd9a:	f8ca 100c 	str.w	r1, [sl, #12]
   1dd9e:	2a1b      	cmp	r2, #27
   1dda0:	d856      	bhi.n	1de50 <_realloc_r+0x32c>
   1dda2:	3408      	adds	r4, #8
   1dda4:	f10a 0210 	add.w	r2, sl, #16
   1dda8:	461e      	mov	r6, r3
   1ddaa:	6823      	ldr	r3, [r4, #0]
   1ddac:	6013      	str	r3, [r2, #0]
   1ddae:	6863      	ldr	r3, [r4, #4]
   1ddb0:	6053      	str	r3, [r2, #4]
   1ddb2:	68a3      	ldr	r3, [r4, #8]
   1ddb4:	6093      	str	r3, [r2, #8]
   1ddb6:	46d1      	mov	r9, sl
   1ddb8:	463c      	mov	r4, r7
   1ddba:	e730      	b.n	1dc1e <_realloc_r+0xfa>
   1ddbc:	4621      	mov	r1, r4
   1ddbe:	f001 f99b 	bl	1f0f8 <memmove>
   1ddc2:	e711      	b.n	1dbe8 <_realloc_r+0xc4>
   1ddc4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   1ddc8:	4657      	mov	r7, sl
   1ddca:	60cb      	str	r3, [r1, #12]
   1ddcc:	6099      	str	r1, [r3, #8]
   1ddce:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1ddd2:	f8da 300c 	ldr.w	r3, [sl, #12]
   1ddd6:	60cb      	str	r3, [r1, #12]
   1ddd8:	1f32      	subs	r2, r6, #4
   1ddda:	2a24      	cmp	r2, #36	; 0x24
   1dddc:	6099      	str	r1, [r3, #8]
   1ddde:	d82d      	bhi.n	1de3c <_realloc_r+0x318>
   1dde0:	2a13      	cmp	r2, #19
   1dde2:	d929      	bls.n	1de38 <_realloc_r+0x314>
   1dde4:	6823      	ldr	r3, [r4, #0]
   1dde6:	f8ca 3008 	str.w	r3, [sl, #8]
   1ddea:	6863      	ldr	r3, [r4, #4]
   1ddec:	f8ca 300c 	str.w	r3, [sl, #12]
   1ddf0:	2a1b      	cmp	r2, #27
   1ddf2:	d842      	bhi.n	1de7a <_realloc_r+0x356>
   1ddf4:	3408      	adds	r4, #8
   1ddf6:	f10a 0310 	add.w	r3, sl, #16
   1ddfa:	6822      	ldr	r2, [r4, #0]
   1ddfc:	601a      	str	r2, [r3, #0]
   1ddfe:	6862      	ldr	r2, [r4, #4]
   1de00:	605a      	str	r2, [r3, #4]
   1de02:	68a2      	ldr	r2, [r4, #8]
   1de04:	609a      	str	r2, [r3, #8]
   1de06:	4666      	mov	r6, ip
   1de08:	46d1      	mov	r9, sl
   1de0a:	463c      	mov	r4, r7
   1de0c:	e707      	b.n	1dc1e <_realloc_r+0xfa>
   1de0e:	68a3      	ldr	r3, [r4, #8]
   1de10:	6083      	str	r3, [r0, #8]
   1de12:	68e3      	ldr	r3, [r4, #12]
   1de14:	60c3      	str	r3, [r0, #12]
   1de16:	2a24      	cmp	r2, #36	; 0x24
   1de18:	d026      	beq.n	1de68 <_realloc_r+0x344>
   1de1a:	f104 0210 	add.w	r2, r4, #16
   1de1e:	f100 0310 	add.w	r3, r0, #16
   1de22:	e6db      	b.n	1dbdc <_realloc_r+0xb8>
   1de24:	463a      	mov	r2, r7
   1de26:	e7bf      	b.n	1dda8 <_realloc_r+0x284>
   1de28:	4621      	mov	r1, r4
   1de2a:	4638      	mov	r0, r7
   1de2c:	461e      	mov	r6, r3
   1de2e:	46d1      	mov	r9, sl
   1de30:	f001 f962 	bl	1f0f8 <memmove>
   1de34:	463c      	mov	r4, r7
   1de36:	e6f2      	b.n	1dc1e <_realloc_r+0xfa>
   1de38:	463b      	mov	r3, r7
   1de3a:	e7de      	b.n	1ddfa <_realloc_r+0x2d6>
   1de3c:	4621      	mov	r1, r4
   1de3e:	4638      	mov	r0, r7
   1de40:	4666      	mov	r6, ip
   1de42:	46d1      	mov	r9, sl
   1de44:	f001 f958 	bl	1f0f8 <memmove>
   1de48:	463c      	mov	r4, r7
   1de4a:	e6e8      	b.n	1dc1e <_realloc_r+0xfa>
   1de4c:	20003fac 	.word	0x20003fac
   1de50:	68a1      	ldr	r1, [r4, #8]
   1de52:	f8ca 1010 	str.w	r1, [sl, #16]
   1de56:	68e1      	ldr	r1, [r4, #12]
   1de58:	f8ca 1014 	str.w	r1, [sl, #20]
   1de5c:	2a24      	cmp	r2, #36	; 0x24
   1de5e:	d020      	beq.n	1dea2 <_realloc_r+0x37e>
   1de60:	3410      	adds	r4, #16
   1de62:	f10a 0218 	add.w	r2, sl, #24
   1de66:	e79f      	b.n	1dda8 <_realloc_r+0x284>
   1de68:	6923      	ldr	r3, [r4, #16]
   1de6a:	6103      	str	r3, [r0, #16]
   1de6c:	6961      	ldr	r1, [r4, #20]
   1de6e:	6141      	str	r1, [r0, #20]
   1de70:	f104 0218 	add.w	r2, r4, #24
   1de74:	f100 0318 	add.w	r3, r0, #24
   1de78:	e6b0      	b.n	1dbdc <_realloc_r+0xb8>
   1de7a:	68a3      	ldr	r3, [r4, #8]
   1de7c:	f8ca 3010 	str.w	r3, [sl, #16]
   1de80:	68e3      	ldr	r3, [r4, #12]
   1de82:	f8ca 3014 	str.w	r3, [sl, #20]
   1de86:	2a24      	cmp	r2, #36	; 0x24
   1de88:	d021      	beq.n	1dece <_realloc_r+0x3aa>
   1de8a:	3410      	adds	r4, #16
   1de8c:	f10a 0318 	add.w	r3, sl, #24
   1de90:	e7b3      	b.n	1ddfa <_realloc_r+0x2d6>
   1de92:	463a      	mov	r2, r7
   1de94:	e733      	b.n	1dcfe <_realloc_r+0x1da>
   1de96:	4621      	mov	r1, r4
   1de98:	4638      	mov	r0, r7
   1de9a:	f001 f92d 	bl	1f0f8 <memmove>
   1de9e:	4b16      	ldr	r3, [pc, #88]	; (1def8 <_realloc_r+0x3d4>)
   1dea0:	e733      	b.n	1dd0a <_realloc_r+0x1e6>
   1dea2:	6922      	ldr	r2, [r4, #16]
   1dea4:	f8ca 2018 	str.w	r2, [sl, #24]
   1dea8:	6962      	ldr	r2, [r4, #20]
   1deaa:	f8ca 201c 	str.w	r2, [sl, #28]
   1deae:	3418      	adds	r4, #24
   1deb0:	f10a 0220 	add.w	r2, sl, #32
   1deb4:	e778      	b.n	1dda8 <_realloc_r+0x284>
   1deb6:	68a1      	ldr	r1, [r4, #8]
   1deb8:	f8ca 1010 	str.w	r1, [sl, #16]
   1debc:	68e1      	ldr	r1, [r4, #12]
   1debe:	f8ca 1014 	str.w	r1, [sl, #20]
   1dec2:	2a24      	cmp	r2, #36	; 0x24
   1dec4:	d00d      	beq.n	1dee2 <_realloc_r+0x3be>
   1dec6:	3410      	adds	r4, #16
   1dec8:	f10a 0218 	add.w	r2, sl, #24
   1decc:	e717      	b.n	1dcfe <_realloc_r+0x1da>
   1dece:	6923      	ldr	r3, [r4, #16]
   1ded0:	f8ca 3018 	str.w	r3, [sl, #24]
   1ded4:	6963      	ldr	r3, [r4, #20]
   1ded6:	f8ca 301c 	str.w	r3, [sl, #28]
   1deda:	3418      	adds	r4, #24
   1dedc:	f10a 0320 	add.w	r3, sl, #32
   1dee0:	e78b      	b.n	1ddfa <_realloc_r+0x2d6>
   1dee2:	6922      	ldr	r2, [r4, #16]
   1dee4:	f8ca 2018 	str.w	r2, [sl, #24]
   1dee8:	6962      	ldr	r2, [r4, #20]
   1deea:	f8ca 201c 	str.w	r2, [sl, #28]
   1deee:	3418      	adds	r4, #24
   1def0:	f10a 0220 	add.w	r2, sl, #32
   1def4:	e703      	b.n	1dcfe <_realloc_r+0x1da>
   1def6:	bf00      	nop
   1def8:	20003fac 	.word	0x20003fac
   1defc:	00000000 	.word	0x00000000

0001df00 <_strtod_l>:
   1df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df04:	ed2d 8b10 	vpush	{d8-d15}
   1df08:	b097      	sub	sp, #92	; 0x5c
   1df0a:	468a      	mov	sl, r1
   1df0c:	2100      	movs	r1, #0
   1df0e:	9207      	str	r2, [sp, #28]
   1df10:	9112      	str	r1, [sp, #72]	; 0x48
   1df12:	2200      	movs	r2, #0
   1df14:	2100      	movs	r1, #0
   1df16:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1df1a:	4680      	mov	r8, r0
   1df1c:	4651      	mov	r1, sl
   1df1e:	9111      	str	r1, [sp, #68]	; 0x44
   1df20:	460f      	mov	r7, r1
   1df22:	f811 2b01 	ldrb.w	r2, [r1], #1
   1df26:	2a2d      	cmp	r2, #45	; 0x2d
   1df28:	d85e      	bhi.n	1dfe8 <_strtod_l+0xe8>
   1df2a:	a001      	add	r0, pc, #4	; (adr r0, 1df30 <_strtod_l+0x30>)
   1df2c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1df30:	0001e0d1 	.word	0x0001e0d1
   1df34:	0001dfe9 	.word	0x0001dfe9
   1df38:	0001dfe9 	.word	0x0001dfe9
   1df3c:	0001dfe9 	.word	0x0001dfe9
   1df40:	0001dfe9 	.word	0x0001dfe9
   1df44:	0001dfe9 	.word	0x0001dfe9
   1df48:	0001dfe9 	.word	0x0001dfe9
   1df4c:	0001dfe9 	.word	0x0001dfe9
   1df50:	0001dfe9 	.word	0x0001dfe9
   1df54:	0001df1f 	.word	0x0001df1f
   1df58:	0001df1f 	.word	0x0001df1f
   1df5c:	0001df1f 	.word	0x0001df1f
   1df60:	0001df1f 	.word	0x0001df1f
   1df64:	0001df1f 	.word	0x0001df1f
   1df68:	0001dfe9 	.word	0x0001dfe9
   1df6c:	0001dfe9 	.word	0x0001dfe9
   1df70:	0001dfe9 	.word	0x0001dfe9
   1df74:	0001dfe9 	.word	0x0001dfe9
   1df78:	0001dfe9 	.word	0x0001dfe9
   1df7c:	0001dfe9 	.word	0x0001dfe9
   1df80:	0001dfe9 	.word	0x0001dfe9
   1df84:	0001dfe9 	.word	0x0001dfe9
   1df88:	0001dfe9 	.word	0x0001dfe9
   1df8c:	0001dfe9 	.word	0x0001dfe9
   1df90:	0001dfe9 	.word	0x0001dfe9
   1df94:	0001dfe9 	.word	0x0001dfe9
   1df98:	0001dfe9 	.word	0x0001dfe9
   1df9c:	0001dfe9 	.word	0x0001dfe9
   1dfa0:	0001dfe9 	.word	0x0001dfe9
   1dfa4:	0001dfe9 	.word	0x0001dfe9
   1dfa8:	0001dfe9 	.word	0x0001dfe9
   1dfac:	0001dfe9 	.word	0x0001dfe9
   1dfb0:	0001df1f 	.word	0x0001df1f
   1dfb4:	0001dfe9 	.word	0x0001dfe9
   1dfb8:	0001dfe9 	.word	0x0001dfe9
   1dfbc:	0001dfe9 	.word	0x0001dfe9
   1dfc0:	0001dfe9 	.word	0x0001dfe9
   1dfc4:	0001dfe9 	.word	0x0001dfe9
   1dfc8:	0001dfe9 	.word	0x0001dfe9
   1dfcc:	0001dfe9 	.word	0x0001dfe9
   1dfd0:	0001dfe9 	.word	0x0001dfe9
   1dfd4:	0001dfe9 	.word	0x0001dfe9
   1dfd8:	0001dfe9 	.word	0x0001dfe9
   1dfdc:	0001e70b 	.word	0x0001e70b
   1dfe0:	0001dfe9 	.word	0x0001dfe9
   1dfe4:	0001e6f7 	.word	0x0001e6f7
   1dfe8:	2100      	movs	r1, #0
   1dfea:	9109      	str	r1, [sp, #36]	; 0x24
   1dfec:	2a30      	cmp	r2, #48	; 0x30
   1dfee:	d07d      	beq.n	1e0ec <_strtod_l+0x1ec>
   1dff0:	2300      	movs	r3, #0
   1dff2:	9308      	str	r3, [sp, #32]
   1dff4:	2a2f      	cmp	r2, #47	; 0x2f
   1dff6:	4614      	mov	r4, r2
   1dff8:	f240 84cd 	bls.w	1e996 <_strtod_l+0xa96>
   1dffc:	f04f 0900 	mov.w	r9, #0
   1e000:	4638      	mov	r0, r7
   1e002:	464e      	mov	r6, r9
   1e004:	464d      	mov	r5, r9
   1e006:	e012      	b.n	1e02e <_strtod_l+0x12e>
   1e008:	3001      	adds	r0, #1
   1e00a:	2d08      	cmp	r5, #8
   1e00c:	9011      	str	r0, [sp, #68]	; 0x44
   1e00e:	bfc8      	it	gt
   1e010:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   1e014:	7804      	ldrb	r4, [r0, #0]
   1e016:	bfc6      	itte	gt
   1e018:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   1e01c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   1e020:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   1e024:	2c2f      	cmp	r4, #47	; 0x2f
   1e026:	f105 0501 	add.w	r5, r5, #1
   1e02a:	4622      	mov	r2, r4
   1e02c:	dd6f      	ble.n	1e10e <_strtod_l+0x20e>
   1e02e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1e032:	2c39      	cmp	r4, #57	; 0x39
   1e034:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1e038:	dde6      	ble.n	1e008 <_strtod_l+0x108>
   1e03a:	499f      	ldr	r1, [pc, #636]	; (1e2b8 <_strtod_l+0x3b8>)
   1e03c:	2201      	movs	r2, #1
   1e03e:	f001 f9af 	bl	1f3a0 <strncmp>
   1e042:	2800      	cmp	r0, #0
   1e044:	d137      	bne.n	1e0b6 <_strtod_l+0x1b6>
   1e046:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e048:	461a      	mov	r2, r3
   1e04a:	3301      	adds	r3, #1
   1e04c:	9311      	str	r3, [sp, #68]	; 0x44
   1e04e:	7854      	ldrb	r4, [r2, #1]
   1e050:	2d00      	cmp	r5, #0
   1e052:	f040 8543 	bne.w	1eadc <_strtod_l+0xbdc>
   1e056:	2c30      	cmp	r4, #48	; 0x30
   1e058:	f040 8524 	bne.w	1eaa4 <_strtod_l+0xba4>
   1e05c:	f1c3 0201 	rsb	r2, r3, #1
   1e060:	1898      	adds	r0, r3, r2
   1e062:	3301      	adds	r3, #1
   1e064:	9311      	str	r3, [sp, #68]	; 0x44
   1e066:	781c      	ldrb	r4, [r3, #0]
   1e068:	2c30      	cmp	r4, #48	; 0x30
   1e06a:	d0f9      	beq.n	1e060 <_strtod_l+0x160>
   1e06c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1e070:	2b08      	cmp	r3, #8
   1e072:	f200 8301 	bhi.w	1e678 <_strtod_l+0x778>
   1e076:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1e078:	1c43      	adds	r3, r0, #1
   1e07a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1e07e:	930b      	str	r3, [sp, #44]	; 0x2c
   1e080:	2501      	movs	r5, #1
   1e082:	46bc      	mov	ip, r7
   1e084:	f04f 0e00 	mov.w	lr, #0
   1e088:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1e08c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   1e090:	2000      	movs	r0, #0
   1e092:	f10c 0301 	add.w	r3, ip, #1
   1e096:	9311      	str	r3, [sp, #68]	; 0x44
   1e098:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1e09c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   1e0a0:	2909      	cmp	r1, #9
   1e0a2:	f200 82bb 	bhi.w	1e61c <_strtod_l+0x71c>
   1e0a6:	3001      	adds	r0, #1
   1e0a8:	468b      	mov	fp, r1
   1e0aa:	2900      	cmp	r1, #0
   1e0ac:	f040 844f 	bne.w	1e94e <_strtod_l+0xa4e>
   1e0b0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1e0b4:	e7ed      	b.n	1e092 <_strtod_l+0x192>
   1e0b6:	2000      	movs	r0, #0
   1e0b8:	2c65      	cmp	r4, #101	; 0x65
   1e0ba:	46ae      	mov	lr, r5
   1e0bc:	900b      	str	r0, [sp, #44]	; 0x2c
   1e0be:	4684      	mov	ip, r0
   1e0c0:	d001      	beq.n	1e0c6 <_strtod_l+0x1c6>
   1e0c2:	2c45      	cmp	r4, #69	; 0x45
   1e0c4:	d130      	bne.n	1e128 <_strtod_l+0x228>
   1e0c6:	2d00      	cmp	r5, #0
   1e0c8:	d16b      	bne.n	1e1a2 <_strtod_l+0x2a2>
   1e0ca:	9b08      	ldr	r3, [sp, #32]
   1e0cc:	4303      	orrs	r3, r0
   1e0ce:	d167      	bne.n	1e1a0 <_strtod_l+0x2a0>
   1e0d0:	9b07      	ldr	r3, [sp, #28]
   1e0d2:	ed9f 8b77 	vldr	d8, [pc, #476]	; 1e2b0 <_strtod_l+0x3b0>
   1e0d6:	b113      	cbz	r3, 1e0de <_strtod_l+0x1de>
   1e0d8:	9b07      	ldr	r3, [sp, #28]
   1e0da:	f8c3 a000 	str.w	sl, [r3]
   1e0de:	eeb0 0b48 	vmov.f64	d0, d8
   1e0e2:	b017      	add	sp, #92	; 0x5c
   1e0e4:	ecbd 8b10 	vpop	{d8-d15}
   1e0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0ec:	787a      	ldrb	r2, [r7, #1]
   1e0ee:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1e0f2:	2a58      	cmp	r2, #88	; 0x58
   1e0f4:	f000 840c 	beq.w	1e910 <_strtod_l+0xa10>
   1e0f8:	3701      	adds	r7, #1
   1e0fa:	9711      	str	r7, [sp, #68]	; 0x44
   1e0fc:	783a      	ldrb	r2, [r7, #0]
   1e0fe:	2a30      	cmp	r2, #48	; 0x30
   1e100:	d0fa      	beq.n	1e0f8 <_strtod_l+0x1f8>
   1e102:	2a00      	cmp	r2, #0
   1e104:	f000 80b7 	beq.w	1e276 <_strtod_l+0x376>
   1e108:	2301      	movs	r3, #1
   1e10a:	9308      	str	r3, [sp, #32]
   1e10c:	e772      	b.n	1dff4 <_strtod_l+0xf4>
   1e10e:	496a      	ldr	r1, [pc, #424]	; (1e2b8 <_strtod_l+0x3b8>)
   1e110:	2201      	movs	r2, #1
   1e112:	f001 f945 	bl	1f3a0 <strncmp>
   1e116:	2800      	cmp	r0, #0
   1e118:	f000 80c0 	beq.w	1e29c <_strtod_l+0x39c>
   1e11c:	46ae      	mov	lr, r5
   1e11e:	f04f 0c00 	mov.w	ip, #0
   1e122:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1e126:	4660      	mov	r0, ip
   1e128:	f04f 0b00 	mov.w	fp, #0
   1e12c:	2d00      	cmp	r5, #0
   1e12e:	d07e      	beq.n	1e22e <_strtod_l+0x32e>
   1e130:	ee07 6a90 	vmov	s15, r6
   1e134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e136:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   1e13a:	ebab 0303 	sub.w	r3, fp, r3
   1e13e:	f1be 0f00 	cmp.w	lr, #0
   1e142:	bf08      	it	eq
   1e144:	46ae      	moveq	lr, r5
   1e146:	2d10      	cmp	r5, #16
   1e148:	930a      	str	r3, [sp, #40]	; 0x28
   1e14a:	462b      	mov	r3, r5
   1e14c:	bfa8      	it	ge
   1e14e:	2310      	movge	r3, #16
   1e150:	2d09      	cmp	r5, #9
   1e152:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e156:	dd0c      	ble.n	1e172 <_strtod_l+0x272>
   1e158:	4a58      	ldr	r2, [pc, #352]	; (1e2bc <_strtod_l+0x3bc>)
   1e15a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1e15e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   1e162:	ee06 9a90 	vmov	s13, r9
   1e166:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   1e16a:	eea7 6b05 	vfma.f64	d6, d7, d5
   1e16e:	ed8d 6b04 	vstr	d6, [sp, #16]
   1e172:	2d0f      	cmp	r5, #15
   1e174:	f300 80a8 	bgt.w	1e2c8 <_strtod_l+0x3c8>
   1e178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e17a:	2a00      	cmp	r2, #0
   1e17c:	f000 83e4 	beq.w	1e948 <_strtod_l+0xa48>
   1e180:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e182:	f340 833c 	ble.w	1e7fe <_strtod_l+0x8fe>
   1e186:	2a16      	cmp	r2, #22
   1e188:	f340 8498 	ble.w	1eabc <_strtod_l+0xbbc>
   1e18c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e18e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   1e192:	428a      	cmp	r2, r1
   1e194:	f280 84a6 	bge.w	1eae4 <_strtod_l+0xbe4>
   1e198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e19a:	1aeb      	subs	r3, r5, r3
   1e19c:	4413      	add	r3, r2
   1e19e:	e099      	b.n	1e2d4 <_strtod_l+0x3d4>
   1e1a0:	2500      	movs	r5, #0
   1e1a2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   1e1a6:	f10a 0301 	add.w	r3, sl, #1
   1e1aa:	9311      	str	r3, [sp, #68]	; 0x44
   1e1ac:	f89a 4001 	ldrb.w	r4, [sl, #1]
   1e1b0:	2c2b      	cmp	r4, #43	; 0x2b
   1e1b2:	f000 825e 	beq.w	1e672 <_strtod_l+0x772>
   1e1b6:	2c2d      	cmp	r4, #45	; 0x2d
   1e1b8:	f000 81f7 	beq.w	1e5aa <_strtod_l+0x6aa>
   1e1bc:	2300      	movs	r3, #0
   1e1be:	930a      	str	r3, [sp, #40]	; 0x28
   1e1c0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1e1c4:	2b09      	cmp	r3, #9
   1e1c6:	f200 81eb 	bhi.w	1e5a0 <_strtod_l+0x6a0>
   1e1ca:	2c30      	cmp	r4, #48	; 0x30
   1e1cc:	d105      	bne.n	1e1da <_strtod_l+0x2da>
   1e1ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e1d0:	3301      	adds	r3, #1
   1e1d2:	9311      	str	r3, [sp, #68]	; 0x44
   1e1d4:	781c      	ldrb	r4, [r3, #0]
   1e1d6:	2c30      	cmp	r4, #48	; 0x30
   1e1d8:	d0fa      	beq.n	1e1d0 <_strtod_l+0x2d0>
   1e1da:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1e1de:	2b08      	cmp	r3, #8
   1e1e0:	d8a2      	bhi.n	1e128 <_strtod_l+0x228>
   1e1e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1e1e4:	920c      	str	r2, [sp, #48]	; 0x30
   1e1e6:	1c53      	adds	r3, r2, #1
   1e1e8:	9311      	str	r3, [sp, #68]	; 0x44
   1e1ea:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1e1ee:	7854      	ldrb	r4, [r2, #1]
   1e1f0:	2c2f      	cmp	r4, #47	; 0x2f
   1e1f2:	dc07      	bgt.n	1e204 <_strtod_l+0x304>
   1e1f4:	e3de      	b.n	1e9b4 <_strtod_l+0xab4>
   1e1f6:	3301      	adds	r3, #1
   1e1f8:	9311      	str	r3, [sp, #68]	; 0x44
   1e1fa:	784c      	ldrb	r4, [r1, #1]
   1e1fc:	2c2f      	cmp	r4, #47	; 0x2f
   1e1fe:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   1e202:	dd06      	ble.n	1e212 <_strtod_l+0x312>
   1e204:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   1e208:	2c39      	cmp	r4, #57	; 0x39
   1e20a:	4619      	mov	r1, r3
   1e20c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   1e210:	ddf1      	ble.n	1e1f6 <_strtod_l+0x2f6>
   1e212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1e214:	1a9b      	subs	r3, r3, r2
   1e216:	2b08      	cmp	r3, #8
   1e218:	f340 83cc 	ble.w	1e9b4 <_strtod_l+0xab4>
   1e21c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   1e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e222:	2b00      	cmp	r3, #0
   1e224:	d082      	beq.n	1e12c <_strtod_l+0x22c>
   1e226:	f1cb 0b00 	rsb	fp, fp, #0
   1e22a:	2d00      	cmp	r5, #0
   1e22c:	d180      	bne.n	1e130 <_strtod_l+0x230>
   1e22e:	9b08      	ldr	r3, [sp, #32]
   1e230:	4303      	orrs	r3, r0
   1e232:	d120      	bne.n	1e276 <_strtod_l+0x376>
   1e234:	f1bc 0f00 	cmp.w	ip, #0
   1e238:	f47f af4a 	bne.w	1e0d0 <_strtod_l+0x1d0>
   1e23c:	2c69      	cmp	r4, #105	; 0x69
   1e23e:	f000 83cf 	beq.w	1e9e0 <_strtod_l+0xae0>
   1e242:	f300 82f3 	bgt.w	1e82c <_strtod_l+0x92c>
   1e246:	2c49      	cmp	r4, #73	; 0x49
   1e248:	f000 83ca 	beq.w	1e9e0 <_strtod_l+0xae0>
   1e24c:	2c4e      	cmp	r4, #78	; 0x4e
   1e24e:	f47f af3f 	bne.w	1e0d0 <_strtod_l+0x1d0>
   1e252:	491b      	ldr	r1, [pc, #108]	; (1e2c0 <_strtod_l+0x3c0>)
   1e254:	a811      	add	r0, sp, #68	; 0x44
   1e256:	f002 fab7 	bl	207c8 <__match>
   1e25a:	2800      	cmp	r0, #0
   1e25c:	f43f af38 	beq.w	1e0d0 <_strtod_l+0x1d0>
   1e260:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e262:	781b      	ldrb	r3, [r3, #0]
   1e264:	2b28      	cmp	r3, #40	; 0x28
   1e266:	f000 84f2 	beq.w	1ec4e <_strtod_l+0xd4e>
   1e26a:	4816      	ldr	r0, [pc, #88]	; (1e2c4 <_strtod_l+0x3c4>)
   1e26c:	f7fd fa38 	bl	1b6e0 <nan>
   1e270:	eeb0 8b40 	vmov.f64	d8, d0
   1e274:	e001      	b.n	1e27a <_strtod_l+0x37a>
   1e276:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 1e2b0 <_strtod_l+0x3b0>
   1e27a:	9a07      	ldr	r2, [sp, #28]
   1e27c:	b10a      	cbz	r2, 1e282 <_strtod_l+0x382>
   1e27e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e280:	6013      	str	r3, [r2, #0]
   1e282:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e284:	2b00      	cmp	r3, #0
   1e286:	f43f af2a 	beq.w	1e0de <_strtod_l+0x1de>
   1e28a:	eeb1 8b48 	vneg.f64	d8, d8
   1e28e:	eeb0 0b48 	vmov.f64	d0, d8
   1e292:	b017      	add	sp, #92	; 0x5c
   1e294:	ecbd 8b10 	vpop	{d8-d15}
   1e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e29c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e29e:	900b      	str	r0, [sp, #44]	; 0x2c
   1e2a0:	1c5a      	adds	r2, r3, #1
   1e2a2:	9211      	str	r2, [sp, #68]	; 0x44
   1e2a4:	785c      	ldrb	r4, [r3, #1]
   1e2a6:	46ae      	mov	lr, r5
   1e2a8:	e6f8      	b.n	1e09c <_strtod_l+0x19c>
   1e2aa:	bf00      	nop
   1e2ac:	f3af 8000 	nop.w
	...
   1e2b8:	20002b14 	.word	0x20002b14
   1e2bc:	20000b98 	.word	0x20000b98
   1e2c0:	20002b24 	.word	0x20002b24
   1e2c4:	20002724 	.word	0x20002724
   1e2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e2ca:	1aeb      	subs	r3, r5, r3
   1e2cc:	4413      	add	r3, r2
   1e2ce:	2b00      	cmp	r3, #0
   1e2d0:	f340 82b0 	ble.w	1e834 <_strtod_l+0x934>
   1e2d4:	f013 010f 	ands.w	r1, r3, #15
   1e2d8:	d00a      	beq.n	1e2f0 <_strtod_l+0x3f0>
   1e2da:	4ac3      	ldr	r2, [pc, #780]	; (1e5e8 <_strtod_l+0x6e8>)
   1e2dc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1e2e0:	ed9d 6b04 	vldr	d6, [sp, #16]
   1e2e4:	ed92 7b00 	vldr	d7, [r2]
   1e2e8:	ee27 7b06 	vmul.f64	d7, d7, d6
   1e2ec:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e2f0:	f033 020f 	bics.w	r2, r3, #15
   1e2f4:	f040 8238 	bne.w	1e768 <_strtod_l+0x868>
   1e2f8:	2300      	movs	r3, #0
   1e2fa:	9308      	str	r3, [sp, #32]
   1e2fc:	9600      	str	r6, [sp, #0]
   1e2fe:	462b      	mov	r3, r5
   1e300:	4672      	mov	r2, lr
   1e302:	4639      	mov	r1, r7
   1e304:	4640      	mov	r0, r8
   1e306:	f004 f98f 	bl	22628 <__s2b>
   1e30a:	4681      	mov	r9, r0
   1e30c:	2800      	cmp	r0, #0
   1e30e:	f000 82e1 	beq.w	1e8d4 <_strtod_l+0x9d4>
   1e312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e314:	eba3 0b0b 	sub.w	fp, r3, fp
   1e318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e31a:	ed9f eba9 	vldr	d14, [pc, #676]	; 1e5c0 <_strtod_l+0x6c0>
   1e31e:	2b00      	cmp	r3, #0
   1e320:	ed9f cba9 	vldr	d12, [pc, #676]	; 1e5c8 <_strtod_l+0x6c8>
   1e324:	ed9f dbaa 	vldr	d13, [pc, #680]	; 1e5d0 <_strtod_l+0x6d0>
   1e328:	ed9f bbab 	vldr	d11, [pc, #684]	; 1e5d8 <_strtod_l+0x6d8>
   1e32c:	bfb4      	ite	lt
   1e32e:	465a      	movlt	r2, fp
   1e330:	2200      	movge	r2, #0
   1e332:	f04f 0a00 	mov.w	sl, #0
   1e336:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e33a:	920b      	str	r2, [sp, #44]	; 0x2c
   1e33c:	930c      	str	r3, [sp, #48]	; 0x30
   1e33e:	4654      	mov	r4, sl
   1e340:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1e344:	4640      	mov	r0, r8
   1e346:	f004 f8ed 	bl	22524 <_Balloc>
   1e34a:	4606      	mov	r6, r0
   1e34c:	2800      	cmp	r0, #0
   1e34e:	f000 810e 	beq.w	1e56e <_strtod_l+0x66e>
   1e352:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1e356:	ed9d 8b04 	vldr	d8, [sp, #16]
   1e35a:	3202      	adds	r2, #2
   1e35c:	0092      	lsls	r2, r2, #2
   1e35e:	f109 010c 	add.w	r1, r9, #12
   1e362:	300c      	adds	r0, #12
   1e364:	f7fa f8b2 	bl	184cc <memcpy>
   1e368:	eeb0 0b48 	vmov.f64	d0, d8
   1e36c:	aa14      	add	r2, sp, #80	; 0x50
   1e36e:	a913      	add	r1, sp, #76	; 0x4c
   1e370:	4640      	mov	r0, r8
   1e372:	f004 fd15 	bl	22da0 <__d2b>
   1e376:	9012      	str	r0, [sp, #72]	; 0x48
   1e378:	2800      	cmp	r0, #0
   1e37a:	f000 80e4 	beq.w	1e546 <_strtod_l+0x646>
   1e37e:	2101      	movs	r1, #1
   1e380:	4640      	mov	r0, r8
   1e382:	f004 f9f9 	bl	22778 <__i2b>
   1e386:	4604      	mov	r4, r0
   1e388:	2800      	cmp	r0, #0
   1e38a:	f000 80f0 	beq.w	1e56e <_strtod_l+0x66e>
   1e38e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1e390:	2a00      	cmp	r2, #0
   1e392:	f2c0 80de 	blt.w	1e552 <_strtod_l+0x652>
   1e396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e398:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1e39a:	eb02 0b03 	add.w	fp, r2, r3
   1e39e:	9b08      	ldr	r3, [sp, #32]
   1e3a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1e3a2:	1ad2      	subs	r2, r2, r3
   1e3a4:	442a      	add	r2, r5
   1e3a6:	4b91      	ldr	r3, [pc, #580]	; (1e5ec <_strtod_l+0x6ec>)
   1e3a8:	3a01      	subs	r2, #1
   1e3aa:	429a      	cmp	r2, r3
   1e3ac:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   1e3b0:	f280 8098 	bge.w	1e4e4 <_strtod_l+0x5e4>
   1e3b4:	1a99      	subs	r1, r3, r2
   1e3b6:	291f      	cmp	r1, #31
   1e3b8:	eba5 0501 	sub.w	r5, r5, r1
   1e3bc:	f300 80e3 	bgt.w	1e586 <_strtod_l+0x686>
   1e3c0:	2201      	movs	r2, #1
   1e3c2:	fa02 f301 	lsl.w	r3, r2, r1
   1e3c6:	930d      	str	r3, [sp, #52]	; 0x34
   1e3c8:	2300      	movs	r3, #0
   1e3ca:	930e      	str	r3, [sp, #56]	; 0x38
   1e3cc:	442f      	add	r7, r5
   1e3ce:	9b08      	ldr	r3, [sp, #32]
   1e3d0:	445d      	add	r5, fp
   1e3d2:	45ab      	cmp	fp, r5
   1e3d4:	465a      	mov	r2, fp
   1e3d6:	441f      	add	r7, r3
   1e3d8:	bfa8      	it	ge
   1e3da:	462a      	movge	r2, r5
   1e3dc:	42ba      	cmp	r2, r7
   1e3de:	bfa8      	it	ge
   1e3e0:	463a      	movge	r2, r7
   1e3e2:	2a00      	cmp	r2, #0
   1e3e4:	dd03      	ble.n	1e3ee <_strtod_l+0x4ee>
   1e3e6:	1aad      	subs	r5, r5, r2
   1e3e8:	1abf      	subs	r7, r7, r2
   1e3ea:	ebab 0b02 	sub.w	fp, fp, r2
   1e3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e3f0:	2b00      	cmp	r3, #0
   1e3f2:	f300 8088 	bgt.w	1e506 <_strtod_l+0x606>
   1e3f6:	2d00      	cmp	r5, #0
   1e3f8:	f300 809c 	bgt.w	1e534 <_strtod_l+0x634>
   1e3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e3fe:	2b00      	cmp	r3, #0
   1e400:	f300 80b7 	bgt.w	1e572 <_strtod_l+0x672>
   1e404:	2f00      	cmp	r7, #0
   1e406:	f300 80a9 	bgt.w	1e55c <_strtod_l+0x65c>
   1e40a:	f1bb 0f00 	cmp.w	fp, #0
   1e40e:	dd08      	ble.n	1e422 <_strtod_l+0x522>
   1e410:	4621      	mov	r1, r4
   1e412:	465a      	mov	r2, fp
   1e414:	4640      	mov	r0, r8
   1e416:	f004 faeb 	bl	229f0 <__lshift>
   1e41a:	4604      	mov	r4, r0
   1e41c:	2800      	cmp	r0, #0
   1e41e:	f000 80a6 	beq.w	1e56e <_strtod_l+0x66e>
   1e422:	9912      	ldr	r1, [sp, #72]	; 0x48
   1e424:	4632      	mov	r2, r6
   1e426:	4640      	mov	r0, r8
   1e428:	f004 fb7c 	bl	22b24 <__mdiff>
   1e42c:	4682      	mov	sl, r0
   1e42e:	2800      	cmp	r0, #0
   1e430:	f000 809d 	beq.w	1e56e <_strtod_l+0x66e>
   1e434:	2300      	movs	r3, #0
   1e436:	68c5      	ldr	r5, [r0, #12]
   1e438:	60c3      	str	r3, [r0, #12]
   1e43a:	4621      	mov	r1, r4
   1e43c:	f004 fb50 	bl	22ae0 <__mcmp>
   1e440:	2800      	cmp	r0, #0
   1e442:	f2c0 83c7 	blt.w	1ebd4 <_strtod_l+0xcd4>
   1e446:	f000 8361 	beq.w	1eb0c <_strtod_l+0xc0c>
   1e44a:	4621      	mov	r1, r4
   1e44c:	4650      	mov	r0, sl
   1e44e:	f004 fd11 	bl	22e74 <__ratio>
   1e452:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   1e456:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1e45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e45e:	d846      	bhi.n	1e4ee <_strtod_l+0x5ee>
   1e460:	2d00      	cmp	r5, #0
   1e462:	f000 80cb 	beq.w	1e5fc <_strtod_l+0x6fc>
   1e466:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1e46a:	9805      	ldr	r0, [sp, #20]
   1e46c:	4b60      	ldr	r3, [pc, #384]	; (1e5f0 <_strtod_l+0x6f0>)
   1e46e:	2200      	movs	r2, #0
   1e470:	4960      	ldr	r1, [pc, #384]	; (1e5f4 <_strtod_l+0x6f4>)
   1e472:	f8df c184 	ldr.w	ip, [pc, #388]	; 1e5f8 <_strtod_l+0x6f8>
   1e476:	ea00 0701 	and.w	r7, r0, r1
   1e47a:	4567      	cmp	r7, ip
   1e47c:	f000 80d4 	beq.w	1e628 <_strtod_l+0x728>
   1e480:	9908      	ldr	r1, [sp, #32]
   1e482:	b159      	cbz	r1, 1e49c <_strtod_l+0x59c>
   1e484:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   1e488:	d808      	bhi.n	1e49c <_strtod_l+0x59c>
   1e48a:	eeb4 9bcb 	vcmpe.f64	d9, d11
   1e48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e492:	f240 8156 	bls.w	1e742 <_strtod_l+0x842>
   1e496:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   1e49a:	1bcb      	subs	r3, r1, r7
   1e49c:	eeb0 0b48 	vmov.f64	d0, d8
   1e4a0:	ec43 2b1a 	vmov	d10, r2, r3
   1e4a4:	f004 fbe8 	bl	22c78 <__ulp>
   1e4a8:	eeaa 8b00 	vfma.f64	d8, d10, d0
   1e4ac:	ed8d 8b04 	vstr	d8, [sp, #16]
   1e4b0:	ee18 3a90 	vmov	r3, s17
   1e4b4:	9a08      	ldr	r2, [sp, #32]
   1e4b6:	b922      	cbnz	r2, 1e4c2 <_strtod_l+0x5c2>
   1e4b8:	4a4e      	ldr	r2, [pc, #312]	; (1e5f4 <_strtod_l+0x6f4>)
   1e4ba:	401a      	ands	r2, r3
   1e4bc:	4297      	cmp	r7, r2
   1e4be:	f000 80e4 	beq.w	1e68a <_strtod_l+0x78a>
   1e4c2:	9912      	ldr	r1, [sp, #72]	; 0x48
   1e4c4:	4640      	mov	r0, r8
   1e4c6:	f004 f853 	bl	22570 <_Bfree>
   1e4ca:	4631      	mov	r1, r6
   1e4cc:	4640      	mov	r0, r8
   1e4ce:	f004 f84f 	bl	22570 <_Bfree>
   1e4d2:	4621      	mov	r1, r4
   1e4d4:	4640      	mov	r0, r8
   1e4d6:	f004 f84b 	bl	22570 <_Bfree>
   1e4da:	4651      	mov	r1, sl
   1e4dc:	4640      	mov	r0, r8
   1e4de:	f004 f847 	bl	22570 <_Bfree>
   1e4e2:	e72d      	b.n	1e340 <_strtod_l+0x440>
   1e4e4:	2301      	movs	r3, #1
   1e4e6:	2100      	movs	r1, #0
   1e4e8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   1e4ec:	e76e      	b.n	1e3cc <_strtod_l+0x4cc>
   1e4ee:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1e4f2:	ee20 9b09 	vmul.f64	d9, d0, d9
   1e4f6:	2d00      	cmp	r5, #0
   1e4f8:	d15f      	bne.n	1e5ba <_strtod_l+0x6ba>
   1e4fa:	eeb1 7b49 	vneg.f64	d7, d9
   1e4fe:	9805      	ldr	r0, [sp, #20]
   1e500:	ec53 2b17 	vmov	r2, r3, d7
   1e504:	e7b4      	b.n	1e470 <_strtod_l+0x570>
   1e506:	4621      	mov	r1, r4
   1e508:	461a      	mov	r2, r3
   1e50a:	4640      	mov	r0, r8
   1e50c:	f004 fa10 	bl	22930 <__pow5mult>
   1e510:	4604      	mov	r4, r0
   1e512:	b360      	cbz	r0, 1e56e <_strtod_l+0x66e>
   1e514:	4601      	mov	r1, r0
   1e516:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1e518:	4640      	mov	r0, r8
   1e51a:	f004 f95b 	bl	227d4 <__multiply>
   1e51e:	b330      	cbz	r0, 1e56e <_strtod_l+0x66e>
   1e520:	900f      	str	r0, [sp, #60]	; 0x3c
   1e522:	9912      	ldr	r1, [sp, #72]	; 0x48
   1e524:	4640      	mov	r0, r8
   1e526:	f004 f823 	bl	22570 <_Bfree>
   1e52a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e52c:	9212      	str	r2, [sp, #72]	; 0x48
   1e52e:	2d00      	cmp	r5, #0
   1e530:	f77f af64 	ble.w	1e3fc <_strtod_l+0x4fc>
   1e534:	9912      	ldr	r1, [sp, #72]	; 0x48
   1e536:	462a      	mov	r2, r5
   1e538:	4640      	mov	r0, r8
   1e53a:	f004 fa59 	bl	229f0 <__lshift>
   1e53e:	9012      	str	r0, [sp, #72]	; 0x48
   1e540:	2800      	cmp	r0, #0
   1e542:	f47f af5b 	bne.w	1e3fc <_strtod_l+0x4fc>
   1e546:	2322      	movs	r3, #34	; 0x22
   1e548:	ed9f 8b25 	vldr	d8, [pc, #148]	; 1e5e0 <_strtod_l+0x6e0>
   1e54c:	f8c8 3000 	str.w	r3, [r8]
   1e550:	e0bc      	b.n	1e6cc <_strtod_l+0x7cc>
   1e552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e554:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1e558:	1a9f      	subs	r7, r3, r2
   1e55a:	e720      	b.n	1e39e <_strtod_l+0x49e>
   1e55c:	4631      	mov	r1, r6
   1e55e:	463a      	mov	r2, r7
   1e560:	4640      	mov	r0, r8
   1e562:	f004 fa45 	bl	229f0 <__lshift>
   1e566:	4606      	mov	r6, r0
   1e568:	2800      	cmp	r0, #0
   1e56a:	f47f af4e 	bne.w	1e40a <_strtod_l+0x50a>
   1e56e:	9812      	ldr	r0, [sp, #72]	; 0x48
   1e570:	e7e9      	b.n	1e546 <_strtod_l+0x646>
   1e572:	4631      	mov	r1, r6
   1e574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1e576:	4640      	mov	r0, r8
   1e578:	f004 f9da 	bl	22930 <__pow5mult>
   1e57c:	4606      	mov	r6, r0
   1e57e:	2800      	cmp	r0, #0
   1e580:	f47f af40 	bne.w	1e404 <_strtod_l+0x504>
   1e584:	e7f3      	b.n	1e56e <_strtod_l+0x66e>
   1e586:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   1e58a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   1e58e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   1e592:	2101      	movs	r1, #1
   1e594:	32e2      	adds	r2, #226	; 0xe2
   1e596:	fa01 f302 	lsl.w	r3, r1, r2
   1e59a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   1e59e:	e715      	b.n	1e3cc <_strtod_l+0x4cc>
   1e5a0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   1e5a4:	f04f 0b00 	mov.w	fp, #0
   1e5a8:	e5c0      	b.n	1e12c <_strtod_l+0x22c>
   1e5aa:	2301      	movs	r3, #1
   1e5ac:	930a      	str	r3, [sp, #40]	; 0x28
   1e5ae:	f10a 0302 	add.w	r3, sl, #2
   1e5b2:	9311      	str	r3, [sp, #68]	; 0x44
   1e5b4:	f89a 4002 	ldrb.w	r4, [sl, #2]
   1e5b8:	e602      	b.n	1e1c0 <_strtod_l+0x2c0>
   1e5ba:	eeb0 7b49 	vmov.f64	d7, d9
   1e5be:	e79e      	b.n	1e4fe <_strtod_l+0x5fe>
   1e5c0:	94a03595 	.word	0x94a03595
   1e5c4:	3fcfffff 	.word	0x3fcfffff
   1e5c8:	94a03595 	.word	0x94a03595
   1e5cc:	3fdfffff 	.word	0x3fdfffff
   1e5d0:	35afe535 	.word	0x35afe535
   1e5d4:	3fe00000 	.word	0x3fe00000
   1e5d8:	ffc00000 	.word	0xffc00000
   1e5dc:	41dfffff 	.word	0x41dfffff
   1e5e0:	00000000 	.word	0x00000000
   1e5e4:	7ff00000 	.word	0x7ff00000
   1e5e8:	20000b98 	.word	0x20000b98
   1e5ec:	fffffc02 	.word	0xfffffc02
   1e5f0:	3ff00000 	.word	0x3ff00000
   1e5f4:	7ff00000 	.word	0x7ff00000
   1e5f8:	7fe00000 	.word	0x7fe00000
   1e5fc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1e600:	2900      	cmp	r1, #0
   1e602:	f000 8085 	beq.w	1e710 <_strtod_l+0x810>
   1e606:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1e60a:	2901      	cmp	r1, #1
   1e60c:	f000 81d8 	beq.w	1e9c0 <_strtod_l+0xac0>
   1e610:	4610      	mov	r0, r2
   1e612:	4bb7      	ldr	r3, [pc, #732]	; (1e8f0 <_strtod_l+0x9f0>)
   1e614:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1e618:	2200      	movs	r2, #0
   1e61a:	e729      	b.n	1e470 <_strtod_l+0x570>
   1e61c:	2c65      	cmp	r4, #101	; 0x65
   1e61e:	f04f 0c01 	mov.w	ip, #1
   1e622:	f43f adbe 	beq.w	1e1a2 <_strtod_l+0x2a2>
   1e626:	e54c      	b.n	1e0c2 <_strtod_l+0x1c2>
   1e628:	ec43 2b1a 	vmov	d10, r2, r3
   1e62c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   1e630:	9305      	str	r3, [sp, #20]
   1e632:	ed9d fb04 	vldr	d15, [sp, #16]
   1e636:	eeb0 0b4f 	vmov.f64	d0, d15
   1e63a:	f004 fb1d 	bl	22c78 <__ulp>
   1e63e:	49ad      	ldr	r1, [pc, #692]	; (1e8f4 <_strtod_l+0x9f4>)
   1e640:	eeaa fb00 	vfma.f64	d15, d10, d0
   1e644:	ee1f 3a90 	vmov	r3, s31
   1e648:	4aab      	ldr	r2, [pc, #684]	; (1e8f8 <_strtod_l+0x9f8>)
   1e64a:	4019      	ands	r1, r3
   1e64c:	4291      	cmp	r1, r2
   1e64e:	ed8d fb04 	vstr	d15, [sp, #16]
   1e652:	d972      	bls.n	1e73a <_strtod_l+0x83a>
   1e654:	4ba9      	ldr	r3, [pc, #676]	; (1e8fc <_strtod_l+0x9fc>)
   1e656:	ee18 2a90 	vmov	r2, s17
   1e65a:	429a      	cmp	r2, r3
   1e65c:	d103      	bne.n	1e666 <_strtod_l+0x766>
   1e65e:	ee18 3a10 	vmov	r3, s16
   1e662:	3301      	adds	r3, #1
   1e664:	d083      	beq.n	1e56e <_strtod_l+0x66e>
   1e666:	4aa5      	ldr	r2, [pc, #660]	; (1e8fc <_strtod_l+0x9fc>)
   1e668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e66c:	e9cd 3204 	strd	r3, r2, [sp, #16]
   1e670:	e727      	b.n	1e4c2 <_strtod_l+0x5c2>
   1e672:	2300      	movs	r3, #0
   1e674:	930a      	str	r3, [sp, #40]	; 0x28
   1e676:	e79a      	b.n	1e5ae <_strtod_l+0x6ae>
   1e678:	2c65      	cmp	r4, #101	; 0x65
   1e67a:	f000 80d0 	beq.w	1e81e <_strtod_l+0x91e>
   1e67e:	2c45      	cmp	r4, #69	; 0x45
   1e680:	f000 80cd 	beq.w	1e81e <_strtod_l+0x91e>
   1e684:	f04f 0c01 	mov.w	ip, #1
   1e688:	e5d1      	b.n	1e22e <_strtod_l+0x32e>
   1e68a:	ec51 0b19 	vmov	r0, r1, d9
   1e68e:	930d      	str	r3, [sp, #52]	; 0x34
   1e690:	f007 fbbe 	bl	25e10 <__aeabi_d2lz>
   1e694:	f7fe ff44 	bl	1d520 <__aeabi_l2d>
   1e698:	9b04      	ldr	r3, [sp, #16]
   1e69a:	431d      	orrs	r5, r3
   1e69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e69e:	ec41 0b17 	vmov	d7, r0, r1
   1e6a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1e6a6:	431d      	orrs	r5, r3
   1e6a8:	ee39 9b47 	vsub.f64	d9, d9, d7
   1e6ac:	f000 80a0 	beq.w	1e7f0 <_strtod_l+0x8f0>
   1e6b0:	eeb4 9bcc 	vcmpe.f64	d9, d12
   1e6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e6b8:	d405      	bmi.n	1e6c6 <_strtod_l+0x7c6>
   1e6ba:	eeb4 9bcd 	vcmpe.f64	d9, d13
   1e6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e6c2:	f77f aefe 	ble.w	1e4c2 <_strtod_l+0x5c2>
   1e6c6:	ed9d 8b04 	vldr	d8, [sp, #16]
   1e6ca:	9812      	ldr	r0, [sp, #72]	; 0x48
   1e6cc:	4601      	mov	r1, r0
   1e6ce:	4640      	mov	r0, r8
   1e6d0:	f003 ff4e 	bl	22570 <_Bfree>
   1e6d4:	4631      	mov	r1, r6
   1e6d6:	4640      	mov	r0, r8
   1e6d8:	f003 ff4a 	bl	22570 <_Bfree>
   1e6dc:	4621      	mov	r1, r4
   1e6de:	4640      	mov	r0, r8
   1e6e0:	f003 ff46 	bl	22570 <_Bfree>
   1e6e4:	4649      	mov	r1, r9
   1e6e6:	4640      	mov	r0, r8
   1e6e8:	f003 ff42 	bl	22570 <_Bfree>
   1e6ec:	4651      	mov	r1, sl
   1e6ee:	4640      	mov	r0, r8
   1e6f0:	f003 ff3e 	bl	22570 <_Bfree>
   1e6f4:	e5c1      	b.n	1e27a <_strtod_l+0x37a>
   1e6f6:	2201      	movs	r2, #1
   1e6f8:	9209      	str	r2, [sp, #36]	; 0x24
   1e6fa:	1c79      	adds	r1, r7, #1
   1e6fc:	9111      	str	r1, [sp, #68]	; 0x44
   1e6fe:	787a      	ldrb	r2, [r7, #1]
   1e700:	2a00      	cmp	r2, #0
   1e702:	f43f ace5 	beq.w	1e0d0 <_strtod_l+0x1d0>
   1e706:	460f      	mov	r7, r1
   1e708:	e470      	b.n	1dfec <_strtod_l+0xec>
   1e70a:	2200      	movs	r2, #0
   1e70c:	9209      	str	r2, [sp, #36]	; 0x24
   1e70e:	e7f4      	b.n	1e6fa <_strtod_l+0x7fa>
   1e710:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1e714:	4610      	mov	r0, r2
   1e716:	2b00      	cmp	r3, #0
   1e718:	f47f af7b 	bne.w	1e612 <_strtod_l+0x712>
   1e71c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1e720:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1e724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e728:	f100 81d3 	bmi.w	1ead2 <_strtod_l+0xbd2>
   1e72c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1e730:	ee20 9b09 	vmul.f64	d9, d0, d9
   1e734:	eeb1 7b49 	vneg.f64	d7, d9
   1e738:	e6e2      	b.n	1e500 <_strtod_l+0x600>
   1e73a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   1e73e:	9305      	str	r3, [sp, #20]
   1e740:	e6b8      	b.n	1e4b4 <_strtod_l+0x5b4>
   1e742:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   1e746:	ee19 3a10 	vmov	r3, s18
   1e74a:	2b01      	cmp	r3, #1
   1e74c:	bf38      	it	cc
   1e74e:	2301      	movcc	r3, #1
   1e750:	ee09 3a10 	vmov	s18, r3
   1e754:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   1e758:	2d00      	cmp	r5, #0
   1e75a:	f040 813e 	bne.w	1e9da <_strtod_l+0xada>
   1e75e:	eeb1 7b49 	vneg.f64	d7, d9
   1e762:	ec53 2b17 	vmov	r2, r3, d7
   1e766:	e696      	b.n	1e496 <_strtod_l+0x596>
   1e768:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   1e76c:	f300 80b2 	bgt.w	1e8d4 <_strtod_l+0x9d4>
   1e770:	2a10      	cmp	r2, #16
   1e772:	ea4f 1322 	mov.w	r3, r2, asr #4
   1e776:	f340 8286 	ble.w	1ec86 <_strtod_l+0xd86>
   1e77a:	4c61      	ldr	r4, [pc, #388]	; (1e900 <_strtod_l+0xa00>)
   1e77c:	ed9d 7b04 	vldr	d7, [sp, #16]
   1e780:	2000      	movs	r0, #0
   1e782:	4622      	mov	r2, r4
   1e784:	4601      	mov	r1, r0
   1e786:	f013 0f01 	tst.w	r3, #1
   1e78a:	f101 0101 	add.w	r1, r1, #1
   1e78e:	ea4f 0363 	mov.w	r3, r3, asr #1
   1e792:	d004      	beq.n	1e79e <_strtod_l+0x89e>
   1e794:	ed92 6b00 	vldr	d6, [r2]
   1e798:	2001      	movs	r0, #1
   1e79a:	ee27 7b06 	vmul.f64	d7, d7, d6
   1e79e:	2b01      	cmp	r3, #1
   1e7a0:	f102 0208 	add.w	r2, r2, #8
   1e7a4:	d1ef      	bne.n	1e786 <_strtod_l+0x886>
   1e7a6:	b108      	cbz	r0, 1e7ac <_strtod_l+0x8ac>
   1e7a8:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e7ac:	9b05      	ldr	r3, [sp, #20]
   1e7ae:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1e7b2:	9305      	str	r3, [sp, #20]
   1e7b4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   1e7b8:	ed9d 6b04 	vldr	d6, [sp, #16]
   1e7bc:	ed94 7b00 	vldr	d7, [r4]
   1e7c0:	4b4c      	ldr	r3, [pc, #304]	; (1e8f4 <_strtod_l+0x9f4>)
   1e7c2:	ee27 7b06 	vmul.f64	d7, d7, d6
   1e7c6:	ee17 2a90 	vmov	r2, s15
   1e7ca:	494e      	ldr	r1, [pc, #312]	; (1e904 <_strtod_l+0xa04>)
   1e7cc:	4013      	ands	r3, r2
   1e7ce:	428b      	cmp	r3, r1
   1e7d0:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e7d4:	d87e      	bhi.n	1e8d4 <_strtod_l+0x9d4>
   1e7d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1e7da:	428b      	cmp	r3, r1
   1e7dc:	f240 81d6 	bls.w	1eb8c <_strtod_l+0xc8c>
   1e7e0:	4c46      	ldr	r4, [pc, #280]	; (1e8fc <_strtod_l+0x9fc>)
   1e7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e7e6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1e7ea:	2300      	movs	r3, #0
   1e7ec:	9308      	str	r3, [sp, #32]
   1e7ee:	e585      	b.n	1e2fc <_strtod_l+0x3fc>
   1e7f0:	eeb4 9bce 	vcmpe.f64	d9, d14
   1e7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e7f8:	f57f ae63 	bpl.w	1e4c2 <_strtod_l+0x5c2>
   1e7fc:	e763      	b.n	1e6c6 <_strtod_l+0x7c6>
   1e7fe:	3216      	adds	r2, #22
   1e800:	f6ff ad62 	blt.w	1e2c8 <_strtod_l+0x3c8>
   1e804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e806:	eba3 0b0b 	sub.w	fp, r3, fp
   1e80a:	4b3f      	ldr	r3, [pc, #252]	; (1e908 <_strtod_l+0xa08>)
   1e80c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   1e810:	ed93 7b00 	vldr	d7, [r3]
   1e814:	ed9d 6b04 	vldr	d6, [sp, #16]
   1e818:	ee86 8b07 	vdiv.f64	d8, d6, d7
   1e81c:	e52d      	b.n	1e27a <_strtod_l+0x37a>
   1e81e:	f04f 0e00 	mov.w	lr, #0
   1e822:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   1e826:	f04f 0c01 	mov.w	ip, #1
   1e82a:	e44e      	b.n	1e0ca <_strtod_l+0x1ca>
   1e82c:	2c6e      	cmp	r4, #110	; 0x6e
   1e82e:	f43f ad10 	beq.w	1e252 <_strtod_l+0x352>
   1e832:	e44d      	b.n	1e0d0 <_strtod_l+0x1d0>
   1e834:	f43f ad60 	beq.w	1e2f8 <_strtod_l+0x3f8>
   1e838:	425b      	negs	r3, r3
   1e83a:	f013 010f 	ands.w	r1, r3, #15
   1e83e:	d00a      	beq.n	1e856 <_strtod_l+0x956>
   1e840:	4a31      	ldr	r2, [pc, #196]	; (1e908 <_strtod_l+0xa08>)
   1e842:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1e846:	ed9d 6b04 	vldr	d6, [sp, #16]
   1e84a:	ed92 7b00 	vldr	d7, [r2]
   1e84e:	ee86 7b07 	vdiv.f64	d7, d6, d7
   1e852:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e856:	111b      	asrs	r3, r3, #4
   1e858:	f43f ad4e 	beq.w	1e2f8 <_strtod_l+0x3f8>
   1e85c:	2b1f      	cmp	r3, #31
   1e85e:	dc33      	bgt.n	1e8c8 <_strtod_l+0x9c8>
   1e860:	f013 0210 	ands.w	r2, r3, #16
   1e864:	bf18      	it	ne
   1e866:	226a      	movne	r2, #106	; 0x6a
   1e868:	ed9d 7b04 	vldr	d7, [sp, #16]
   1e86c:	9208      	str	r2, [sp, #32]
   1e86e:	4a27      	ldr	r2, [pc, #156]	; (1e90c <_strtod_l+0xa0c>)
   1e870:	2100      	movs	r1, #0
   1e872:	07d8      	lsls	r0, r3, #31
   1e874:	d504      	bpl.n	1e880 <_strtod_l+0x980>
   1e876:	ed92 6b00 	vldr	d6, [r2]
   1e87a:	2101      	movs	r1, #1
   1e87c:	ee27 7b06 	vmul.f64	d7, d7, d6
   1e880:	105b      	asrs	r3, r3, #1
   1e882:	f102 0208 	add.w	r2, r2, #8
   1e886:	d1f4      	bne.n	1e872 <_strtod_l+0x972>
   1e888:	b109      	cbz	r1, 1e88e <_strtod_l+0x98e>
   1e88a:	ed8d 7b04 	vstr	d7, [sp, #16]
   1e88e:	9b08      	ldr	r3, [sp, #32]
   1e890:	b193      	cbz	r3, 1e8b8 <_strtod_l+0x9b8>
   1e892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e896:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1e89a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1e89e:	2b00      	cmp	r3, #0
   1e8a0:	dd0a      	ble.n	1e8b8 <_strtod_l+0x9b8>
   1e8a2:	2b1f      	cmp	r3, #31
   1e8a4:	f340 822f 	ble.w	1ed06 <_strtod_l+0xe06>
   1e8a8:	2000      	movs	r0, #0
   1e8aa:	2b34      	cmp	r3, #52	; 0x34
   1e8ac:	9004      	str	r0, [sp, #16]
   1e8ae:	f340 8240 	ble.w	1ed32 <_strtod_l+0xe32>
   1e8b2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1e8b6:	9305      	str	r3, [sp, #20]
   1e8b8:	ed9d 7b04 	vldr	d7, [sp, #16]
   1e8bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e8c4:	f47f ad1a 	bne.w	1e2fc <_strtod_l+0x3fc>
   1e8c8:	2322      	movs	r3, #34	; 0x22
   1e8ca:	ed9f 8b05 	vldr	d8, [pc, #20]	; 1e8e0 <_strtod_l+0x9e0>
   1e8ce:	f8c8 3000 	str.w	r3, [r8]
   1e8d2:	e4d2      	b.n	1e27a <_strtod_l+0x37a>
   1e8d4:	2322      	movs	r3, #34	; 0x22
   1e8d6:	ed9f 8b04 	vldr	d8, [pc, #16]	; 1e8e8 <_strtod_l+0x9e8>
   1e8da:	f8c8 3000 	str.w	r3, [r8]
   1e8de:	e4cc      	b.n	1e27a <_strtod_l+0x37a>
	...
   1e8ec:	7ff00000 	.word	0x7ff00000
   1e8f0:	bff00000 	.word	0xbff00000
   1e8f4:	7ff00000 	.word	0x7ff00000
   1e8f8:	7c9fffff 	.word	0x7c9fffff
   1e8fc:	7fefffff 	.word	0x7fefffff
   1e900:	20000b70 	.word	0x20000b70
   1e904:	7ca00000 	.word	0x7ca00000
   1e908:	20000b98 	.word	0x20000b98
   1e90c:	20001dc8 	.word	0x20001dc8
   1e910:	9302      	str	r3, [sp, #8]
   1e912:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e914:	9301      	str	r3, [sp, #4]
   1e916:	ab12      	add	r3, sp, #72	; 0x48
   1e918:	9300      	str	r3, [sp, #0]
   1e91a:	4aa7      	ldr	r2, [pc, #668]	; (1ebb8 <_strtod_l+0xcb8>)
   1e91c:	ab13      	add	r3, sp, #76	; 0x4c
   1e91e:	a911      	add	r1, sp, #68	; 0x44
   1e920:	4640      	mov	r0, r8
   1e922:	f001 fc87 	bl	20234 <__gethex>
   1e926:	f010 050f 	ands.w	r5, r0, #15
   1e92a:	4604      	mov	r4, r0
   1e92c:	f43f aca3 	beq.w	1e276 <_strtod_l+0x376>
   1e930:	2d06      	cmp	r5, #6
   1e932:	d174      	bne.n	1ea1e <_strtod_l+0xb1e>
   1e934:	9b07      	ldr	r3, [sp, #28]
   1e936:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 1eba0 <_strtod_l+0xca0>
   1e93a:	3701      	adds	r7, #1
   1e93c:	2b00      	cmp	r3, #0
   1e93e:	f43f abce 	beq.w	1e0de <_strtod_l+0x1de>
   1e942:	601f      	str	r7, [r3, #0]
   1e944:	f7ff bbcb 	b.w	1e0de <_strtod_l+0x1de>
   1e948:	ed9d 8b04 	vldr	d8, [sp, #16]
   1e94c:	e495      	b.n	1e27a <_strtod_l+0x37a>
   1e94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e950:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1e954:	4403      	add	r3, r0
   1e956:	930b      	str	r3, [sp, #44]	; 0x2c
   1e958:	2801      	cmp	r0, #1
   1e95a:	f105 0301 	add.w	r3, r5, #1
   1e95e:	461a      	mov	r2, r3
   1e960:	d014      	beq.n	1e98c <_strtod_l+0xa8c>
   1e962:	4428      	add	r0, r5
   1e964:	1e44      	subs	r4, r0, #1
   1e966:	e003      	b.n	1e970 <_strtod_l+0xa70>
   1e968:	0046      	lsls	r6, r0, #1
   1e96a:	429c      	cmp	r4, r3
   1e96c:	d00d      	beq.n	1e98a <_strtod_l+0xa8a>
   1e96e:	3301      	adds	r3, #1
   1e970:	462a      	mov	r2, r5
   1e972:	2a08      	cmp	r2, #8
   1e974:	461d      	mov	r5, r3
   1e976:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   1e97a:	d9f5      	bls.n	1e968 <_strtod_l+0xa68>
   1e97c:	2b10      	cmp	r3, #16
   1e97e:	bfdc      	itt	le
   1e980:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1e984:	ea4f 0949 	movle.w	r9, r9, lsl #1
   1e988:	e7ef      	b.n	1e96a <_strtod_l+0xa6a>
   1e98a:	3202      	adds	r2, #2
   1e98c:	2d08      	cmp	r5, #8
   1e98e:	dc3c      	bgt.n	1ea0a <_strtod_l+0xb0a>
   1e990:	4615      	mov	r5, r2
   1e992:	f7ff bb79 	b.w	1e088 <_strtod_l+0x188>
   1e996:	4989      	ldr	r1, [pc, #548]	; (1ebbc <_strtod_l+0xcbc>)
   1e998:	2201      	movs	r2, #1
   1e99a:	4638      	mov	r0, r7
   1e99c:	f000 fd00 	bl	1f3a0 <strncmp>
   1e9a0:	2800      	cmp	r0, #0
   1e9a2:	f000 8082 	beq.w	1eaaa <_strtod_l+0xbaa>
   1e9a6:	f04f 0e00 	mov.w	lr, #0
   1e9aa:	46f1      	mov	r9, lr
   1e9ac:	4676      	mov	r6, lr
   1e9ae:	4675      	mov	r5, lr
   1e9b0:	f7ff bbb5 	b.w	1e11e <_strtod_l+0x21e>
   1e9b4:	f644 631f 	movw	r3, #19999	; 0x4e1f
   1e9b8:	459b      	cmp	fp, r3
   1e9ba:	bfa8      	it	ge
   1e9bc:	469b      	movge	fp, r3
   1e9be:	e42f      	b.n	1e220 <_strtod_l+0x320>
   1e9c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e9c4:	4618      	mov	r0, r3
   1e9c6:	2b00      	cmp	r3, #0
   1e9c8:	f47f ae23 	bne.w	1e612 <_strtod_l+0x712>
   1e9cc:	2322      	movs	r3, #34	; 0x22
   1e9ce:	ed9f 8b74 	vldr	d8, [pc, #464]	; 1eba0 <_strtod_l+0xca0>
   1e9d2:	9812      	ldr	r0, [sp, #72]	; 0x48
   1e9d4:	f8c8 3000 	str.w	r3, [r8]
   1e9d8:	e678      	b.n	1e6cc <_strtod_l+0x7cc>
   1e9da:	eeb0 7b49 	vmov.f64	d7, d9
   1e9de:	e6c0      	b.n	1e762 <_strtod_l+0x862>
   1e9e0:	4977      	ldr	r1, [pc, #476]	; (1ebc0 <_strtod_l+0xcc0>)
   1e9e2:	a811      	add	r0, sp, #68	; 0x44
   1e9e4:	f001 fef0 	bl	207c8 <__match>
   1e9e8:	2800      	cmp	r0, #0
   1e9ea:	f43f ab71 	beq.w	1e0d0 <_strtod_l+0x1d0>
   1e9ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e9f0:	4974      	ldr	r1, [pc, #464]	; (1ebc4 <_strtod_l+0xcc4>)
   1e9f2:	3b01      	subs	r3, #1
   1e9f4:	a811      	add	r0, sp, #68	; 0x44
   1e9f6:	9311      	str	r3, [sp, #68]	; 0x44
   1e9f8:	f001 fee6 	bl	207c8 <__match>
   1e9fc:	b910      	cbnz	r0, 1ea04 <_strtod_l+0xb04>
   1e9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ea00:	3301      	adds	r3, #1
   1ea02:	9311      	str	r3, [sp, #68]	; 0x44
   1ea04:	ed9f 8b68 	vldr	d8, [pc, #416]	; 1eba8 <_strtod_l+0xca8>
   1ea08:	e437      	b.n	1e27a <_strtod_l+0x37a>
   1ea0a:	2a10      	cmp	r2, #16
   1ea0c:	bfdc      	itt	le
   1ea0e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1ea12:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   1ea16:	4615      	mov	r5, r2
   1ea18:	2000      	movs	r0, #0
   1ea1a:	f7ff bb3a 	b.w	1e092 <_strtod_l+0x192>
   1ea1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ea20:	b13a      	cbz	r2, 1ea32 <_strtod_l+0xb32>
   1ea22:	2135      	movs	r1, #53	; 0x35
   1ea24:	a814      	add	r0, sp, #80	; 0x50
   1ea26:	f004 fa57 	bl	22ed8 <__copybits>
   1ea2a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1ea2c:	4640      	mov	r0, r8
   1ea2e:	f003 fd9f 	bl	22570 <_Bfree>
   1ea32:	3d01      	subs	r5, #1
   1ea34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ea36:	2d04      	cmp	r5, #4
   1ea38:	f200 818f 	bhi.w	1ed5a <_strtod_l+0xe5a>
   1ea3c:	e8df f005 	tbb	[pc, r5]
   1ea40:	1f2a2d03 	.word	0x1f2a2d03
   1ea44:	03          	.byte	0x03
   1ea45:	00          	.byte	0x00
   1ea46:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ea48:	9204      	str	r2, [sp, #16]
   1ea4a:	f203 4233 	addw	r2, r3, #1075	; 0x433
   1ea4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ea50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ea54:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   1ea58:	9305      	str	r3, [sp, #20]
   1ea5a:	05e5      	lsls	r5, r4, #23
   1ea5c:	d502      	bpl.n	1ea64 <_strtod_l+0xb64>
   1ea5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ea62:	9305      	str	r3, [sp, #20]
   1ea64:	4a58      	ldr	r2, [pc, #352]	; (1ebc8 <_strtod_l+0xcc8>)
   1ea66:	401a      	ands	r2, r3
   1ea68:	ed9d 8b04 	vldr	d8, [sp, #16]
   1ea6c:	2a00      	cmp	r2, #0
   1ea6e:	f47f ac04 	bne.w	1e27a <_strtod_l+0x37a>
   1ea72:	f000 ff7f 	bl	1f974 <__errno>
   1ea76:	2322      	movs	r3, #34	; 0x22
   1ea78:	6003      	str	r3, [r0, #0]
   1ea7a:	f7ff bbfe 	b.w	1e27a <_strtod_l+0x37a>
   1ea7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea82:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1ea86:	e9cd 3604 	strd	r3, r6, [sp, #16]
   1ea8a:	05e3      	lsls	r3, r4, #23
   1ea8c:	f57f af5c 	bpl.w	1e948 <_strtod_l+0xa48>
   1ea90:	9b05      	ldr	r3, [sp, #20]
   1ea92:	e7e4      	b.n	1ea5e <_strtod_l+0xb5e>
   1ea94:	4b4c      	ldr	r3, [pc, #304]	; (1ebc8 <_strtod_l+0xcc8>)
   1ea96:	9305      	str	r3, [sp, #20]
   1ea98:	e7f7      	b.n	1ea8a <_strtod_l+0xb8a>
   1ea9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ea9c:	9304      	str	r3, [sp, #16]
   1ea9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1eaa0:	9305      	str	r3, [sp, #20]
   1eaa2:	e7da      	b.n	1ea5a <_strtod_l+0xb5a>
   1eaa4:	2000      	movs	r0, #0
   1eaa6:	f7ff bae1 	b.w	1e06c <_strtod_l+0x16c>
   1eaaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1eaac:	461a      	mov	r2, r3
   1eaae:	3301      	adds	r3, #1
   1eab0:	9311      	str	r3, [sp, #68]	; 0x44
   1eab2:	7854      	ldrb	r4, [r2, #1]
   1eab4:	4606      	mov	r6, r0
   1eab6:	4681      	mov	r9, r0
   1eab8:	f7ff bacd 	b.w	1e056 <_strtod_l+0x156>
   1eabc:	4b43      	ldr	r3, [pc, #268]	; (1ebcc <_strtod_l+0xccc>)
   1eabe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1eac2:	ed93 8b00 	vldr	d8, [r3]
   1eac6:	ed9d 7b04 	vldr	d7, [sp, #16]
   1eaca:	ee28 8b07 	vmul.f64	d8, d8, d7
   1eace:	f7ff bbd4 	b.w	1e27a <_strtod_l+0x37a>
   1ead2:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   1ead6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   1eada:	e511      	b.n	1e500 <_strtod_l+0x600>
   1eadc:	46ae      	mov	lr, r5
   1eade:	900b      	str	r0, [sp, #44]	; 0x2c
   1eae0:	f7ff badc 	b.w	1e09c <_strtod_l+0x19c>
   1eae4:	4b39      	ldr	r3, [pc, #228]	; (1ebcc <_strtod_l+0xccc>)
   1eae6:	f1c5 050f 	rsb	r5, r5, #15
   1eaea:	1b4a      	subs	r2, r1, r5
   1eaec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1eaf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1eaf4:	ed95 8b00 	vldr	d8, [r5]
   1eaf8:	ed93 7b00 	vldr	d7, [r3]
   1eafc:	ed9d 6b04 	vldr	d6, [sp, #16]
   1eb00:	ee28 8b06 	vmul.f64	d8, d8, d6
   1eb04:	ee28 8b07 	vmul.f64	d8, d8, d7
   1eb08:	f7ff bbb7 	b.w	1e27a <_strtod_l+0x37a>
   1eb0c:	2d00      	cmp	r5, #0
   1eb0e:	f000 8095 	beq.w	1ec3c <_strtod_l+0xd3c>
   1eb12:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   1eb16:	4b2e      	ldr	r3, [pc, #184]	; (1ebd0 <_strtod_l+0xcd0>)
   1eb18:	f3cc 0113 	ubfx	r1, ip, #0, #20
   1eb1c:	4299      	cmp	r1, r3
   1eb1e:	4662      	mov	r2, ip
   1eb20:	f000 80d2 	beq.w	1ecc8 <_strtod_l+0xdc8>
   1eb24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eb26:	2b00      	cmp	r3, #0
   1eb28:	f000 80a5 	beq.w	1ec76 <_strtod_l+0xd76>
   1eb2c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1eb30:	4213      	tst	r3, r2
   1eb32:	4617      	mov	r7, r2
   1eb34:	d01a      	beq.n	1eb6c <_strtod_l+0xc6c>
   1eb36:	eeb0 0b48 	vmov.f64	d0, d8
   1eb3a:	2d00      	cmp	r5, #0
   1eb3c:	f000 80a6 	beq.w	1ec8c <_strtod_l+0xd8c>
   1eb40:	f004 f89a 	bl	22c78 <__ulp>
   1eb44:	9b08      	ldr	r3, [sp, #32]
   1eb46:	b17b      	cbz	r3, 1eb68 <_strtod_l+0xc68>
   1eb48:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1eb4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1eb50:	2b00      	cmp	r3, #0
   1eb52:	dd09      	ble.n	1eb68 <_strtod_l+0xc68>
   1eb54:	051b      	lsls	r3, r3, #20
   1eb56:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1eb5a:	2000      	movs	r0, #0
   1eb5c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1eb60:	ec41 0b17 	vmov	d7, r0, r1
   1eb64:	ee20 0b07 	vmul.f64	d0, d0, d7
   1eb68:	ee38 8b00 	vadd.f64	d8, d8, d0
   1eb6c:	9b08      	ldr	r3, [sp, #32]
   1eb6e:	b15b      	cbz	r3, 1eb88 <_strtod_l+0xc88>
   1eb70:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 1ebb0 <_strtod_l+0xcb0>
   1eb74:	4b14      	ldr	r3, [pc, #80]	; (1ebc8 <_strtod_l+0xcc8>)
   1eb76:	ee28 8b07 	vmul.f64	d8, d8, d7
   1eb7a:	ee18 2a90 	vmov	r2, s17
   1eb7e:	4013      	ands	r3, r2
   1eb80:	b913      	cbnz	r3, 1eb88 <_strtod_l+0xc88>
   1eb82:	2322      	movs	r3, #34	; 0x22
   1eb84:	f8c8 3000 	str.w	r3, [r8]
   1eb88:	9812      	ldr	r0, [sp, #72]	; 0x48
   1eb8a:	e59f      	b.n	1e6cc <_strtod_l+0x7cc>
   1eb8c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   1eb90:	9305      	str	r3, [sp, #20]
   1eb92:	2300      	movs	r3, #0
   1eb94:	9308      	str	r3, [sp, #32]
   1eb96:	f7ff bbb1 	b.w	1e2fc <_strtod_l+0x3fc>
   1eb9a:	bf00      	nop
   1eb9c:	f3af 8000 	nop.w
	...
   1ebac:	7ff00000 	.word	0x7ff00000
   1ebb0:	00000000 	.word	0x00000000
   1ebb4:	39500000 	.word	0x39500000
   1ebb8:	20002e68 	.word	0x20002e68
   1ebbc:	20002b14 	.word	0x20002b14
   1ebc0:	20002b18 	.word	0x20002b18
   1ebc4:	20002b1c 	.word	0x20002b1c
   1ebc8:	7ff00000 	.word	0x7ff00000
   1ebcc:	20000b98 	.word	0x20000b98
   1ebd0:	000fffff 	.word	0x000fffff
   1ebd4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1ebd8:	430d      	orrs	r5, r1
   1ebda:	d1c7      	bne.n	1eb6c <_strtod_l+0xc6c>
   1ebdc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1ebe0:	4617      	mov	r7, r2
   1ebe2:	2b00      	cmp	r3, #0
   1ebe4:	d1c2      	bne.n	1eb6c <_strtod_l+0xc6c>
   1ebe6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   1ebea:	0d1b      	lsrs	r3, r3, #20
   1ebec:	051b      	lsls	r3, r3, #20
   1ebee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1ebf2:	d9bb      	bls.n	1eb6c <_strtod_l+0xc6c>
   1ebf4:	f8da 3014 	ldr.w	r3, [sl, #20]
   1ebf8:	b91b      	cbnz	r3, 1ec02 <_strtod_l+0xd02>
   1ebfa:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ebfe:	2b01      	cmp	r3, #1
   1ec00:	ddb4      	ble.n	1eb6c <_strtod_l+0xc6c>
   1ec02:	4651      	mov	r1, sl
   1ec04:	2201      	movs	r2, #1
   1ec06:	4640      	mov	r0, r8
   1ec08:	f003 fef2 	bl	229f0 <__lshift>
   1ec0c:	4621      	mov	r1, r4
   1ec0e:	4682      	mov	sl, r0
   1ec10:	f003 ff66 	bl	22ae0 <__mcmp>
   1ec14:	2800      	cmp	r0, #0
   1ec16:	dda9      	ble.n	1eb6c <_strtod_l+0xc6c>
   1ec18:	9b08      	ldr	r3, [sp, #32]
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d17e      	bne.n	1ed1c <_strtod_l+0xe1c>
   1ec1e:	4b50      	ldr	r3, [pc, #320]	; (1ed60 <_strtod_l+0xe60>)
   1ec20:	403b      	ands	r3, r7
   1ec22:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ec26:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1ec2a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1ec2e:	9305      	str	r3, [sp, #20]
   1ec30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ec34:	9304      	str	r3, [sp, #16]
   1ec36:	ed9d 8b04 	vldr	d8, [sp, #16]
   1ec3a:	e797      	b.n	1eb6c <_strtod_l+0xc6c>
   1ec3c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1ec40:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1ec44:	430b      	orrs	r3, r1
   1ec46:	4617      	mov	r7, r2
   1ec48:	f47f af6c 	bne.w	1eb24 <_strtod_l+0xc24>
   1ec4c:	e7e4      	b.n	1ec18 <_strtod_l+0xd18>
   1ec4e:	4945      	ldr	r1, [pc, #276]	; (1ed64 <_strtod_l+0xe64>)
   1ec50:	a811      	add	r0, sp, #68	; 0x44
   1ec52:	aa14      	add	r2, sp, #80	; 0x50
   1ec54:	f001 fdd4 	bl	20800 <__hexnan>
   1ec58:	2805      	cmp	r0, #5
   1ec5a:	f47f ab06 	bne.w	1e26a <_strtod_l+0x36a>
   1ec5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ec60:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   1ec64:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1ec68:	9305      	str	r3, [sp, #20]
   1ec6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ec6c:	9304      	str	r3, [sp, #16]
   1ec6e:	ed9d 8b04 	vldr	d8, [sp, #16]
   1ec72:	f7ff bb02 	b.w	1e27a <_strtod_l+0x37a>
   1ec76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ec7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ec7c:	4203      	tst	r3, r0
   1ec7e:	f43f af75 	beq.w	1eb6c <_strtod_l+0xc6c>
   1ec82:	460f      	mov	r7, r1
   1ec84:	e757      	b.n	1eb36 <_strtod_l+0xc36>
   1ec86:	4c38      	ldr	r4, [pc, #224]	; (1ed68 <_strtod_l+0xe68>)
   1ec88:	2100      	movs	r1, #0
   1ec8a:	e58f      	b.n	1e7ac <_strtod_l+0x8ac>
   1ec8c:	f003 fff4 	bl	22c78 <__ulp>
   1ec90:	9b08      	ldr	r3, [sp, #32]
   1ec92:	2b00      	cmp	r3, #0
   1ec94:	d055      	beq.n	1ed42 <_strtod_l+0xe42>
   1ec96:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1ec9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1ec9e:	2b00      	cmp	r3, #0
   1eca0:	dd09      	ble.n	1ecb6 <_strtod_l+0xdb6>
   1eca2:	051b      	lsls	r3, r3, #20
   1eca4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1eca8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1ecac:	4628      	mov	r0, r5
   1ecae:	ec41 0b17 	vmov	d7, r0, r1
   1ecb2:	ee20 0b07 	vmul.f64	d0, d0, d7
   1ecb6:	ee38 8b40 	vsub.f64	d8, d8, d0
   1ecba:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1ecbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ecc2:	f47f af55 	bne.w	1eb70 <_strtod_l+0xc70>
   1ecc6:	e681      	b.n	1e9cc <_strtod_l+0xacc>
   1ecc8:	9b08      	ldr	r3, [sp, #32]
   1ecca:	9904      	ldr	r1, [sp, #16]
   1eccc:	b31b      	cbz	r3, 1ed16 <_strtod_l+0xe16>
   1ecce:	4b24      	ldr	r3, [pc, #144]	; (1ed60 <_strtod_l+0xe60>)
   1ecd0:	4013      	ands	r3, r2
   1ecd2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1ecd6:	d81e      	bhi.n	1ed16 <_strtod_l+0xe16>
   1ecd8:	0d1b      	lsrs	r3, r3, #20
   1ecda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1ecde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ece2:	fa00 f303 	lsl.w	r3, r0, r3
   1ece6:	4299      	cmp	r1, r3
   1ece8:	f47f af1c 	bne.w	1eb24 <_strtod_l+0xc24>
   1ecec:	4b1f      	ldr	r3, [pc, #124]	; (1ed6c <_strtod_l+0xe6c>)
   1ecee:	429a      	cmp	r2, r3
   1ecf0:	d030      	beq.n	1ed54 <_strtod_l+0xe54>
   1ecf2:	4b1b      	ldr	r3, [pc, #108]	; (1ed60 <_strtod_l+0xe60>)
   1ecf4:	4013      	ands	r3, r2
   1ecf6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1ecfa:	9305      	str	r3, [sp, #20]
   1ecfc:	2300      	movs	r3, #0
   1ecfe:	9304      	str	r3, [sp, #16]
   1ed00:	ed9d 8b04 	vldr	d8, [sp, #16]
   1ed04:	e732      	b.n	1eb6c <_strtod_l+0xc6c>
   1ed06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ed0a:	fa02 f303 	lsl.w	r3, r2, r3
   1ed0e:	9a04      	ldr	r2, [sp, #16]
   1ed10:	401a      	ands	r2, r3
   1ed12:	9204      	str	r2, [sp, #16]
   1ed14:	e5d0      	b.n	1e8b8 <_strtod_l+0x9b8>
   1ed16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ed1a:	e7e4      	b.n	1ece6 <_strtod_l+0xde6>
   1ed1c:	4b10      	ldr	r3, [pc, #64]	; (1ed60 <_strtod_l+0xe60>)
   1ed1e:	403b      	ands	r3, r7
   1ed20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1ed24:	f73f af7d 	bgt.w	1ec22 <_strtod_l+0xd22>
   1ed28:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1ed2c:	f73f af20 	bgt.w	1eb70 <_strtod_l+0xc70>
   1ed30:	e64c      	b.n	1e9cc <_strtod_l+0xacc>
   1ed32:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   1ed36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ed3a:	4093      	lsls	r3, r2
   1ed3c:	400b      	ands	r3, r1
   1ed3e:	9305      	str	r3, [sp, #20]
   1ed40:	e5ba      	b.n	1e8b8 <_strtod_l+0x9b8>
   1ed42:	ee38 8b40 	vsub.f64	d8, d8, d0
   1ed46:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1ed4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ed4e:	f47f af1b 	bne.w	1eb88 <_strtod_l+0xc88>
   1ed52:	e63b      	b.n	1e9cc <_strtod_l+0xacc>
   1ed54:	3101      	adds	r1, #1
   1ed56:	d1cc      	bne.n	1ecf2 <_strtod_l+0xdf2>
   1ed58:	e409      	b.n	1e56e <_strtod_l+0x66e>
   1ed5a:	2300      	movs	r3, #0
   1ed5c:	e67d      	b.n	1ea5a <_strtod_l+0xb5a>
   1ed5e:	bf00      	nop
   1ed60:	7ff00000 	.word	0x7ff00000
   1ed64:	20002e7c 	.word	0x20002e7c
   1ed68:	20000b70 	.word	0x20000b70
   1ed6c:	7fefffff 	.word	0x7fefffff

0001ed70 <strtod>:
   1ed70:	b410      	push	{r4}
   1ed72:	4c05      	ldr	r4, [pc, #20]	; (1ed88 <strtod+0x18>)
   1ed74:	4b05      	ldr	r3, [pc, #20]	; (1ed8c <strtod+0x1c>)
   1ed76:	4684      	mov	ip, r0
   1ed78:	460a      	mov	r2, r1
   1ed7a:	6820      	ldr	r0, [r4, #0]
   1ed7c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ed80:	4661      	mov	r1, ip
   1ed82:	f7ff b8bd 	b.w	1df00 <_strtod_l>
   1ed86:	bf00      	nop
   1ed88:	200043c8 	.word	0x200043c8
   1ed8c:	20003e40 	.word	0x20003e40

0001ed90 <_strtol_l.constprop.0>:
   1ed90:	2b01      	cmp	r3, #1
   1ed92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed96:	d040      	beq.n	1ee1a <_strtol_l.constprop.0+0x8a>
   1ed98:	2b24      	cmp	r3, #36	; 0x24
   1ed9a:	4698      	mov	r8, r3
   1ed9c:	d83d      	bhi.n	1ee1a <_strtol_l.constprop.0+0x8a>
   1ed9e:	4d4c      	ldr	r5, [pc, #304]	; (1eed0 <_strtol_l.constprop.0+0x140>)
   1eda0:	468e      	mov	lr, r1
   1eda2:	4676      	mov	r6, lr
   1eda4:	f81e bb01 	ldrb.w	fp, [lr], #1
   1eda8:	f815 400b 	ldrb.w	r4, [r5, fp]
   1edac:	f014 0408 	ands.w	r4, r4, #8
   1edb0:	d1f7      	bne.n	1eda2 <_strtol_l.constprop.0+0x12>
   1edb2:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1edb6:	d072      	beq.n	1ee9e <_strtol_l.constprop.0+0x10e>
   1edb8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   1edbc:	bf08      	it	eq
   1edbe:	f89e b000 	ldrbeq.w	fp, [lr]
   1edc2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1edc6:	bf08      	it	eq
   1edc8:	f106 0e02 	addeq.w	lr, r6, #2
   1edcc:	2b00      	cmp	r3, #0
   1edce:	d042      	beq.n	1ee56 <_strtol_l.constprop.0+0xc6>
   1edd0:	2b10      	cmp	r3, #16
   1edd2:	d057      	beq.n	1ee84 <_strtol_l.constprop.0+0xf4>
   1edd4:	fbb9 f7f8 	udiv	r7, r9, r8
   1edd8:	2500      	movs	r5, #0
   1edda:	462e      	mov	r6, r5
   1eddc:	fb08 9a17 	mls	sl, r8, r7, r9
   1ede0:	e005      	b.n	1edee <_strtol_l.constprop.0+0x5e>
   1ede2:	d033      	beq.n	1ee4c <_strtol_l.constprop.0+0xbc>
   1ede4:	fb08 c606 	mla	r6, r8, r6, ip
   1ede8:	2501      	movs	r5, #1
   1edea:	f81e bb01 	ldrb.w	fp, [lr], #1
   1edee:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   1edf2:	f1bc 0f09 	cmp.w	ip, #9
   1edf6:	d906      	bls.n	1ee06 <_strtol_l.constprop.0+0x76>
   1edf8:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   1edfc:	f1bc 0f19 	cmp.w	ip, #25
   1ee00:	d812      	bhi.n	1ee28 <_strtol_l.constprop.0+0x98>
   1ee02:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   1ee06:	4563      	cmp	r3, ip
   1ee08:	dd17      	ble.n	1ee3a <_strtol_l.constprop.0+0xaa>
   1ee0a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1ee0e:	d0ec      	beq.n	1edea <_strtol_l.constprop.0+0x5a>
   1ee10:	42b7      	cmp	r7, r6
   1ee12:	d2e6      	bcs.n	1ede2 <_strtol_l.constprop.0+0x52>
   1ee14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee18:	e7e7      	b.n	1edea <_strtol_l.constprop.0+0x5a>
   1ee1a:	f000 fdab 	bl	1f974 <__errno>
   1ee1e:	2316      	movs	r3, #22
   1ee20:	6003      	str	r3, [r0, #0]
   1ee22:	2000      	movs	r0, #0
   1ee24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee28:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   1ee2c:	f1bc 0f19 	cmp.w	ip, #25
   1ee30:	d803      	bhi.n	1ee3a <_strtol_l.constprop.0+0xaa>
   1ee32:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   1ee36:	4563      	cmp	r3, ip
   1ee38:	dce7      	bgt.n	1ee0a <_strtol_l.constprop.0+0x7a>
   1ee3a:	1c6b      	adds	r3, r5, #1
   1ee3c:	d027      	beq.n	1ee8e <_strtol_l.constprop.0+0xfe>
   1ee3e:	b98c      	cbnz	r4, 1ee64 <_strtol_l.constprop.0+0xd4>
   1ee40:	b10a      	cbz	r2, 1ee46 <_strtol_l.constprop.0+0xb6>
   1ee42:	bba5      	cbnz	r5, 1eeae <_strtol_l.constprop.0+0x11e>
   1ee44:	6011      	str	r1, [r2, #0]
   1ee46:	4630      	mov	r0, r6
   1ee48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee4c:	45e2      	cmp	sl, ip
   1ee4e:	dac9      	bge.n	1ede4 <_strtol_l.constprop.0+0x54>
   1ee50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ee54:	e7c9      	b.n	1edea <_strtol_l.constprop.0+0x5a>
   1ee56:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1ee5a:	d005      	beq.n	1ee68 <_strtol_l.constprop.0+0xd8>
   1ee5c:	f04f 080a 	mov.w	r8, #10
   1ee60:	4643      	mov	r3, r8
   1ee62:	e7b7      	b.n	1edd4 <_strtol_l.constprop.0+0x44>
   1ee64:	4276      	negs	r6, r6
   1ee66:	e7eb      	b.n	1ee40 <_strtol_l.constprop.0+0xb0>
   1ee68:	f89e 3000 	ldrb.w	r3, [lr]
   1ee6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ee70:	2b58      	cmp	r3, #88	; 0x58
   1ee72:	d121      	bne.n	1eeb8 <_strtol_l.constprop.0+0x128>
   1ee74:	f04f 0810 	mov.w	r8, #16
   1ee78:	f89e b001 	ldrb.w	fp, [lr, #1]
   1ee7c:	4643      	mov	r3, r8
   1ee7e:	f10e 0e02 	add.w	lr, lr, #2
   1ee82:	e7a7      	b.n	1edd4 <_strtol_l.constprop.0+0x44>
   1ee84:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   1ee88:	d01a      	beq.n	1eec0 <_strtol_l.constprop.0+0x130>
   1ee8a:	4698      	mov	r8, r3
   1ee8c:	e7a2      	b.n	1edd4 <_strtol_l.constprop.0+0x44>
   1ee8e:	2322      	movs	r3, #34	; 0x22
   1ee90:	6003      	str	r3, [r0, #0]
   1ee92:	b172      	cbz	r2, 1eeb2 <_strtol_l.constprop.0+0x122>
   1ee94:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   1ee98:	464e      	mov	r6, r9
   1ee9a:	6011      	str	r1, [r2, #0]
   1ee9c:	e7d3      	b.n	1ee46 <_strtol_l.constprop.0+0xb6>
   1ee9e:	f89e b000 	ldrb.w	fp, [lr]
   1eea2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   1eea6:	f106 0e02 	add.w	lr, r6, #2
   1eeaa:	2401      	movs	r4, #1
   1eeac:	e78e      	b.n	1edcc <_strtol_l.constprop.0+0x3c>
   1eeae:	46b1      	mov	r9, r6
   1eeb0:	e7f0      	b.n	1ee94 <_strtol_l.constprop.0+0x104>
   1eeb2:	464e      	mov	r6, r9
   1eeb4:	4630      	mov	r0, r6
   1eeb6:	e7c7      	b.n	1ee48 <_strtol_l.constprop.0+0xb8>
   1eeb8:	f04f 0808 	mov.w	r8, #8
   1eebc:	4643      	mov	r3, r8
   1eebe:	e789      	b.n	1edd4 <_strtol_l.constprop.0+0x44>
   1eec0:	f89e 5000 	ldrb.w	r5, [lr]
   1eec4:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   1eec8:	2d58      	cmp	r5, #88	; 0x58
   1eeca:	d0d3      	beq.n	1ee74 <_strtol_l.constprop.0+0xe4>
   1eecc:	4698      	mov	r8, r3
   1eece:	e781      	b.n	1edd4 <_strtol_l.constprop.0+0x44>
   1eed0:	2000299d 	.word	0x2000299d

0001eed4 <strtol>:
   1eed4:	b410      	push	{r4}
   1eed6:	4c05      	ldr	r4, [pc, #20]	; (1eeec <strtol+0x18>)
   1eed8:	4684      	mov	ip, r0
   1eeda:	4613      	mov	r3, r2
   1eedc:	6820      	ldr	r0, [r4, #0]
   1eede:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eee2:	460a      	mov	r2, r1
   1eee4:	4661      	mov	r1, ip
   1eee6:	f7ff bf53 	b.w	1ed90 <_strtol_l.constprop.0>
   1eeea:	bf00      	nop
   1eeec:	200043c8 	.word	0x200043c8

0001eef0 <sprintf>:
   1eef0:	b40e      	push	{r1, r2, r3}
   1eef2:	b510      	push	{r4, lr}
   1eef4:	b09d      	sub	sp, #116	; 0x74
   1eef6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1eefa:	ab1f      	add	r3, sp, #124	; 0x7c
   1eefc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1ef00:	9104      	str	r1, [sp, #16]
   1ef02:	4909      	ldr	r1, [pc, #36]	; (1ef28 <sprintf+0x38>)
   1ef04:	f853 2b04 	ldr.w	r2, [r3], #4
   1ef08:	9002      	str	r0, [sp, #8]
   1ef0a:	4c08      	ldr	r4, [pc, #32]	; (1ef2c <sprintf+0x3c>)
   1ef0c:	6808      	ldr	r0, [r1, #0]
   1ef0e:	9301      	str	r3, [sp, #4]
   1ef10:	a902      	add	r1, sp, #8
   1ef12:	9405      	str	r4, [sp, #20]
   1ef14:	f001 fd64 	bl	209e0 <_svfprintf_r>
   1ef18:	9b02      	ldr	r3, [sp, #8]
   1ef1a:	2200      	movs	r2, #0
   1ef1c:	701a      	strb	r2, [r3, #0]
   1ef1e:	b01d      	add	sp, #116	; 0x74
   1ef20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ef24:	b003      	add	sp, #12
   1ef26:	4770      	bx	lr
   1ef28:	200043c8 	.word	0x200043c8
   1ef2c:	ffff0208 	.word	0xffff0208

0001ef30 <stdio_exit_handler>:
   1ef30:	4a02      	ldr	r2, [pc, #8]	; (1ef3c <stdio_exit_handler+0xc>)
   1ef32:	4903      	ldr	r1, [pc, #12]	; (1ef40 <stdio_exit_handler+0x10>)
   1ef34:	4803      	ldr	r0, [pc, #12]	; (1ef44 <stdio_exit_handler+0x14>)
   1ef36:	f000 b8bb 	b.w	1f0b0 <_fwalk_sglue>
   1ef3a:	bf00      	nop
   1ef3c:	200043bc 	.word	0x200043bc
   1ef40:	00022f99 	.word	0x00022f99
   1ef44:	20003548 	.word	0x20003548

0001ef48 <cleanup_stdio>:
   1ef48:	4b0c      	ldr	r3, [pc, #48]	; (1ef7c <cleanup_stdio+0x34>)
   1ef4a:	6841      	ldr	r1, [r0, #4]
   1ef4c:	4299      	cmp	r1, r3
   1ef4e:	b510      	push	{r4, lr}
   1ef50:	4604      	mov	r4, r0
   1ef52:	d001      	beq.n	1ef58 <cleanup_stdio+0x10>
   1ef54:	f004 f820 	bl	22f98 <_fclose_r>
   1ef58:	68a1      	ldr	r1, [r4, #8]
   1ef5a:	4b09      	ldr	r3, [pc, #36]	; (1ef80 <cleanup_stdio+0x38>)
   1ef5c:	4299      	cmp	r1, r3
   1ef5e:	d002      	beq.n	1ef66 <cleanup_stdio+0x1e>
   1ef60:	4620      	mov	r0, r4
   1ef62:	f004 f819 	bl	22f98 <_fclose_r>
   1ef66:	68e1      	ldr	r1, [r4, #12]
   1ef68:	4b06      	ldr	r3, [pc, #24]	; (1ef84 <cleanup_stdio+0x3c>)
   1ef6a:	4299      	cmp	r1, r3
   1ef6c:	d004      	beq.n	1ef78 <cleanup_stdio+0x30>
   1ef6e:	4620      	mov	r0, r4
   1ef70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ef74:	f004 b810 	b.w	22f98 <_fclose_r>
   1ef78:	bd10      	pop	{r4, pc}
   1ef7a:	bf00      	nop
   1ef7c:	200059f0 	.word	0x200059f0
   1ef80:	20005a58 	.word	0x20005a58
   1ef84:	20005ac0 	.word	0x20005ac0

0001ef88 <global_stdio_init.part.0>:
   1ef88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef8c:	4c2a      	ldr	r4, [pc, #168]	; (1f038 <global_stdio_init.part.0+0xb0>)
   1ef8e:	4b2b      	ldr	r3, [pc, #172]	; (1f03c <global_stdio_init.part.0+0xb4>)
   1ef90:	482b      	ldr	r0, [pc, #172]	; (1f040 <global_stdio_init.part.0+0xb8>)
   1ef92:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1f054 <global_stdio_init.part.0+0xcc>
   1ef96:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1f058 <global_stdio_init.part.0+0xd0>
   1ef9a:	4f2a      	ldr	r7, [pc, #168]	; (1f044 <global_stdio_init.part.0+0xbc>)
   1ef9c:	6018      	str	r0, [r3, #0]
   1ef9e:	2500      	movs	r5, #0
   1efa0:	2304      	movs	r3, #4
   1efa2:	2208      	movs	r2, #8
   1efa4:	4629      	mov	r1, r5
   1efa6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1efaa:	4e27      	ldr	r6, [pc, #156]	; (1f048 <global_stdio_init.part.0+0xc0>)
   1efac:	6665      	str	r5, [r4, #100]	; 0x64
   1efae:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1efb2:	e9c4 5500 	strd	r5, r5, [r4]
   1efb6:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1efba:	61a5      	str	r5, [r4, #24]
   1efbc:	f000 f918 	bl	1f1f0 <memset>
   1efc0:	4b22      	ldr	r3, [pc, #136]	; (1f04c <global_stdio_init.part.0+0xc4>)
   1efc2:	6763      	str	r3, [r4, #116]	; 0x74
   1efc4:	2208      	movs	r2, #8
   1efc6:	4629      	mov	r1, r5
   1efc8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1efcc:	e9c4 4907 	strd	r4, r9, [r4, #28]
   1efd0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   1efd4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   1efd8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   1efdc:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   1efe0:	6725      	str	r5, [r4, #112]	; 0x70
   1efe2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1efe6:	62e6      	str	r6, [r4, #44]	; 0x2c
   1efe8:	f000 f902 	bl	1f1f0 <memset>
   1efec:	4b18      	ldr	r3, [pc, #96]	; (1f050 <global_stdio_init.part.0+0xc8>)
   1efee:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   1eff2:	4629      	mov	r1, r5
   1eff4:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1eff8:	2208      	movs	r2, #8
   1effa:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   1effe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   1f002:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   1f006:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   1f00a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   1f00e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   1f012:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   1f016:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   1f01a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   1f01e:	f000 f8e7 	bl	1f1f0 <memset>
   1f022:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1f026:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   1f02a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   1f02e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1f032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f036:	bf00      	nop
   1f038:	200059f0 	.word	0x200059f0
   1f03c:	20005b28 	.word	0x20005b28
   1f040:	0001ef31 	.word	0x0001ef31
   1f044:	00023249 	.word	0x00023249
   1f048:	00023269 	.word	0x00023269
   1f04c:	00010009 	.word	0x00010009
   1f050:	00020012 	.word	0x00020012
   1f054:	000231e5 	.word	0x000231e5
   1f058:	00023209 	.word	0x00023209

0001f05c <__sinit>:
   1f05c:	b510      	push	{r4, lr}
   1f05e:	4604      	mov	r4, r0
   1f060:	480a      	ldr	r0, [pc, #40]	; (1f08c <__sinit+0x30>)
   1f062:	f000 fe81 	bl	1fd68 <__retarget_lock_acquire_recursive>
   1f066:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f068:	b923      	cbnz	r3, 1f074 <__sinit+0x18>
   1f06a:	4b09      	ldr	r3, [pc, #36]	; (1f090 <__sinit+0x34>)
   1f06c:	4a09      	ldr	r2, [pc, #36]	; (1f094 <__sinit+0x38>)
   1f06e:	681b      	ldr	r3, [r3, #0]
   1f070:	6362      	str	r2, [r4, #52]	; 0x34
   1f072:	b123      	cbz	r3, 1f07e <__sinit+0x22>
   1f074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f078:	4804      	ldr	r0, [pc, #16]	; (1f08c <__sinit+0x30>)
   1f07a:	f000 be77 	b.w	1fd6c <__retarget_lock_release_recursive>
   1f07e:	f7ff ff83 	bl	1ef88 <global_stdio_init.part.0>
   1f082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f086:	4801      	ldr	r0, [pc, #4]	; (1f08c <__sinit+0x30>)
   1f088:	f000 be70 	b.w	1fd6c <__retarget_lock_release_recursive>
   1f08c:	200059b8 	.word	0x200059b8
   1f090:	20005b28 	.word	0x20005b28
   1f094:	0001ef49 	.word	0x0001ef49

0001f098 <__sfp_lock_acquire>:
   1f098:	4801      	ldr	r0, [pc, #4]	; (1f0a0 <__sfp_lock_acquire+0x8>)
   1f09a:	f000 be65 	b.w	1fd68 <__retarget_lock_acquire_recursive>
   1f09e:	bf00      	nop
   1f0a0:	200059b8 	.word	0x200059b8

0001f0a4 <__sfp_lock_release>:
   1f0a4:	4801      	ldr	r0, [pc, #4]	; (1f0ac <__sfp_lock_release+0x8>)
   1f0a6:	f000 be61 	b.w	1fd6c <__retarget_lock_release_recursive>
   1f0aa:	bf00      	nop
   1f0ac:	200059b8 	.word	0x200059b8

0001f0b0 <_fwalk_sglue>:
   1f0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f0b4:	4680      	mov	r8, r0
   1f0b6:	460f      	mov	r7, r1
   1f0b8:	4616      	mov	r6, r2
   1f0ba:	f04f 0900 	mov.w	r9, #0
   1f0be:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   1f0c2:	3d01      	subs	r5, #1
   1f0c4:	d411      	bmi.n	1f0ea <_fwalk_sglue+0x3a>
   1f0c6:	89a3      	ldrh	r3, [r4, #12]
   1f0c8:	2b01      	cmp	r3, #1
   1f0ca:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1f0ce:	d908      	bls.n	1f0e2 <_fwalk_sglue+0x32>
   1f0d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1f0d4:	3301      	adds	r3, #1
   1f0d6:	4621      	mov	r1, r4
   1f0d8:	d003      	beq.n	1f0e2 <_fwalk_sglue+0x32>
   1f0da:	4640      	mov	r0, r8
   1f0dc:	47b8      	blx	r7
   1f0de:	ea49 0900 	orr.w	r9, r9, r0
   1f0e2:	1c6b      	adds	r3, r5, #1
   1f0e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1f0e8:	d1ed      	bne.n	1f0c6 <_fwalk_sglue+0x16>
   1f0ea:	6836      	ldr	r6, [r6, #0]
   1f0ec:	2e00      	cmp	r6, #0
   1f0ee:	d1e6      	bne.n	1f0be <_fwalk_sglue+0xe>
   1f0f0:	4648      	mov	r0, r9
   1f0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f0f6:	bf00      	nop

0001f0f8 <memmove>:
   1f0f8:	4288      	cmp	r0, r1
   1f0fa:	d90d      	bls.n	1f118 <memmove+0x20>
   1f0fc:	188b      	adds	r3, r1, r2
   1f0fe:	4283      	cmp	r3, r0
   1f100:	d90a      	bls.n	1f118 <memmove+0x20>
   1f102:	eb00 0c02 	add.w	ip, r0, r2
   1f106:	b1ba      	cbz	r2, 1f138 <memmove+0x40>
   1f108:	4662      	mov	r2, ip
   1f10a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1f10e:	f802 cd01 	strb.w	ip, [r2, #-1]!
   1f112:	4299      	cmp	r1, r3
   1f114:	d1f9      	bne.n	1f10a <memmove+0x12>
   1f116:	4770      	bx	lr
   1f118:	2a0f      	cmp	r2, #15
   1f11a:	d80e      	bhi.n	1f13a <memmove+0x42>
   1f11c:	4603      	mov	r3, r0
   1f11e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1f122:	b14a      	cbz	r2, 1f138 <memmove+0x40>
   1f124:	f10c 0c01 	add.w	ip, ip, #1
   1f128:	3b01      	subs	r3, #1
   1f12a:	448c      	add	ip, r1
   1f12c:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f130:	f803 2f01 	strb.w	r2, [r3, #1]!
   1f134:	4561      	cmp	r1, ip
   1f136:	d1f9      	bne.n	1f12c <memmove+0x34>
   1f138:	4770      	bx	lr
   1f13a:	ea40 0301 	orr.w	r3, r0, r1
   1f13e:	079b      	lsls	r3, r3, #30
   1f140:	d150      	bne.n	1f1e4 <memmove+0xec>
   1f142:	f1a2 0310 	sub.w	r3, r2, #16
   1f146:	b570      	push	{r4, r5, r6, lr}
   1f148:	f101 0c20 	add.w	ip, r1, #32
   1f14c:	f023 050f 	bic.w	r5, r3, #15
   1f150:	f101 0e10 	add.w	lr, r1, #16
   1f154:	f100 0410 	add.w	r4, r0, #16
   1f158:	44ac      	add	ip, r5
   1f15a:	091b      	lsrs	r3, r3, #4
   1f15c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   1f160:	f844 5c10 	str.w	r5, [r4, #-16]
   1f164:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   1f168:	f844 5c0c 	str.w	r5, [r4, #-12]
   1f16c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   1f170:	f844 5c08 	str.w	r5, [r4, #-8]
   1f174:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   1f178:	f844 5c04 	str.w	r5, [r4, #-4]
   1f17c:	f10e 0e10 	add.w	lr, lr, #16
   1f180:	45e6      	cmp	lr, ip
   1f182:	f104 0410 	add.w	r4, r4, #16
   1f186:	d1e9      	bne.n	1f15c <memmove+0x64>
   1f188:	3301      	adds	r3, #1
   1f18a:	f012 0f0c 	tst.w	r2, #12
   1f18e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1f192:	f002 040f 	and.w	r4, r2, #15
   1f196:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1f19a:	d027      	beq.n	1f1ec <memmove+0xf4>
   1f19c:	3c04      	subs	r4, #4
   1f19e:	f024 0603 	bic.w	r6, r4, #3
   1f1a2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1f1a6:	441e      	add	r6, r3
   1f1a8:	1f1c      	subs	r4, r3, #4
   1f1aa:	468e      	mov	lr, r1
   1f1ac:	f85e 5b04 	ldr.w	r5, [lr], #4
   1f1b0:	f844 5f04 	str.w	r5, [r4, #4]!
   1f1b4:	42b4      	cmp	r4, r6
   1f1b6:	d1f9      	bne.n	1f1ac <memmove+0xb4>
   1f1b8:	f10c 0401 	add.w	r4, ip, #1
   1f1bc:	f002 0203 	and.w	r2, r2, #3
   1f1c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1f1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1f1c8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1f1cc:	b14a      	cbz	r2, 1f1e2 <memmove+0xea>
   1f1ce:	f10c 0c01 	add.w	ip, ip, #1
   1f1d2:	3b01      	subs	r3, #1
   1f1d4:	448c      	add	ip, r1
   1f1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f1da:	f803 2f01 	strb.w	r2, [r3, #1]!
   1f1de:	4561      	cmp	r1, ip
   1f1e0:	d1f9      	bne.n	1f1d6 <memmove+0xde>
   1f1e2:	bd70      	pop	{r4, r5, r6, pc}
   1f1e4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1f1e8:	4603      	mov	r3, r0
   1f1ea:	e79b      	b.n	1f124 <memmove+0x2c>
   1f1ec:	4622      	mov	r2, r4
   1f1ee:	e7eb      	b.n	1f1c8 <memmove+0xd0>

0001f1f0 <memset>:
   1f1f0:	0783      	lsls	r3, r0, #30
   1f1f2:	b530      	push	{r4, r5, lr}
   1f1f4:	d048      	beq.n	1f288 <memset+0x98>
   1f1f6:	1e54      	subs	r4, r2, #1
   1f1f8:	2a00      	cmp	r2, #0
   1f1fa:	d03f      	beq.n	1f27c <memset+0x8c>
   1f1fc:	b2ca      	uxtb	r2, r1
   1f1fe:	4603      	mov	r3, r0
   1f200:	e001      	b.n	1f206 <memset+0x16>
   1f202:	3c01      	subs	r4, #1
   1f204:	d33a      	bcc.n	1f27c <memset+0x8c>
   1f206:	f803 2b01 	strb.w	r2, [r3], #1
   1f20a:	079d      	lsls	r5, r3, #30
   1f20c:	d1f9      	bne.n	1f202 <memset+0x12>
   1f20e:	2c03      	cmp	r4, #3
   1f210:	d92d      	bls.n	1f26e <memset+0x7e>
   1f212:	b2cd      	uxtb	r5, r1
   1f214:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1f218:	2c0f      	cmp	r4, #15
   1f21a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1f21e:	d936      	bls.n	1f28e <memset+0x9e>
   1f220:	f1a4 0210 	sub.w	r2, r4, #16
   1f224:	f022 0c0f 	bic.w	ip, r2, #15
   1f228:	f103 0e20 	add.w	lr, r3, #32
   1f22c:	44e6      	add	lr, ip
   1f22e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   1f232:	f103 0210 	add.w	r2, r3, #16
   1f236:	e942 5504 	strd	r5, r5, [r2, #-16]
   1f23a:	e942 5502 	strd	r5, r5, [r2, #-8]
   1f23e:	3210      	adds	r2, #16
   1f240:	4572      	cmp	r2, lr
   1f242:	d1f8      	bne.n	1f236 <memset+0x46>
   1f244:	f10c 0201 	add.w	r2, ip, #1
   1f248:	f014 0f0c 	tst.w	r4, #12
   1f24c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1f250:	f004 0c0f 	and.w	ip, r4, #15
   1f254:	d013      	beq.n	1f27e <memset+0x8e>
   1f256:	f1ac 0304 	sub.w	r3, ip, #4
   1f25a:	f023 0303 	bic.w	r3, r3, #3
   1f25e:	3304      	adds	r3, #4
   1f260:	4413      	add	r3, r2
   1f262:	f842 5b04 	str.w	r5, [r2], #4
   1f266:	4293      	cmp	r3, r2
   1f268:	d1fb      	bne.n	1f262 <memset+0x72>
   1f26a:	f00c 0403 	and.w	r4, ip, #3
   1f26e:	b12c      	cbz	r4, 1f27c <memset+0x8c>
   1f270:	b2c9      	uxtb	r1, r1
   1f272:	441c      	add	r4, r3
   1f274:	f803 1b01 	strb.w	r1, [r3], #1
   1f278:	429c      	cmp	r4, r3
   1f27a:	d1fb      	bne.n	1f274 <memset+0x84>
   1f27c:	bd30      	pop	{r4, r5, pc}
   1f27e:	4664      	mov	r4, ip
   1f280:	4613      	mov	r3, r2
   1f282:	2c00      	cmp	r4, #0
   1f284:	d1f4      	bne.n	1f270 <memset+0x80>
   1f286:	e7f9      	b.n	1f27c <memset+0x8c>
   1f288:	4603      	mov	r3, r0
   1f28a:	4614      	mov	r4, r2
   1f28c:	e7bf      	b.n	1f20e <memset+0x1e>
   1f28e:	461a      	mov	r2, r3
   1f290:	46a4      	mov	ip, r4
   1f292:	e7e0      	b.n	1f256 <memset+0x66>

0001f294 <strcat>:
   1f294:	0783      	lsls	r3, r0, #30
   1f296:	b510      	push	{r4, lr}
   1f298:	4604      	mov	r4, r0
   1f29a:	d110      	bne.n	1f2be <strcat+0x2a>
   1f29c:	6802      	ldr	r2, [r0, #0]
   1f29e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1f2a2:	ea23 0302 	bic.w	r3, r3, r2
   1f2a6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f2aa:	d108      	bne.n	1f2be <strcat+0x2a>
   1f2ac:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1f2b0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1f2b4:	ea23 0302 	bic.w	r3, r3, r2
   1f2b8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f2bc:	d0f6      	beq.n	1f2ac <strcat+0x18>
   1f2be:	7803      	ldrb	r3, [r0, #0]
   1f2c0:	b11b      	cbz	r3, 1f2ca <strcat+0x36>
   1f2c2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1f2c6:	2b00      	cmp	r3, #0
   1f2c8:	d1fb      	bne.n	1f2c2 <strcat+0x2e>
   1f2ca:	f000 fcc7 	bl	1fc5c <strcpy>
   1f2ce:	4620      	mov	r0, r4
   1f2d0:	bd10      	pop	{r4, pc}
   1f2d2:	bf00      	nop

0001f2d4 <strchr>:
   1f2d4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1f2d8:	4603      	mov	r3, r0
   1f2da:	d044      	beq.n	1f366 <strchr+0x92>
   1f2dc:	0782      	lsls	r2, r0, #30
   1f2de:	d132      	bne.n	1f346 <strchr+0x72>
   1f2e0:	b510      	push	{r4, lr}
   1f2e2:	6804      	ldr	r4, [r0, #0]
   1f2e4:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
   1f2e8:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
   1f2ec:	ea8e 0204 	eor.w	r2, lr, r4
   1f2f0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1f2f4:	ea23 0302 	bic.w	r3, r3, r2
   1f2f8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1f2fc:	ea22 0204 	bic.w	r2, r2, r4
   1f300:	4313      	orrs	r3, r2
   1f302:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f306:	d10f      	bne.n	1f328 <strchr+0x54>
   1f308:	f850 4f04 	ldr.w	r4, [r0, #4]!
   1f30c:	ea84 0c0e 	eor.w	ip, r4, lr
   1f310:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   1f314:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   1f318:	ea23 0304 	bic.w	r3, r3, r4
   1f31c:	ea22 020c 	bic.w	r2, r2, ip
   1f320:	4313      	orrs	r3, r2
   1f322:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f326:	d0ef      	beq.n	1f308 <strchr+0x34>
   1f328:	7803      	ldrb	r3, [r0, #0]
   1f32a:	b923      	cbnz	r3, 1f336 <strchr+0x62>
   1f32c:	e036      	b.n	1f39c <strchr+0xc8>
   1f32e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1f332:	2b00      	cmp	r3, #0
   1f334:	d032      	beq.n	1f39c <strchr+0xc8>
   1f336:	4299      	cmp	r1, r3
   1f338:	d1f9      	bne.n	1f32e <strchr+0x5a>
   1f33a:	bd10      	pop	{r4, pc}
   1f33c:	428a      	cmp	r2, r1
   1f33e:	d011      	beq.n	1f364 <strchr+0x90>
   1f340:	079a      	lsls	r2, r3, #30
   1f342:	4618      	mov	r0, r3
   1f344:	d0cc      	beq.n	1f2e0 <strchr+0xc>
   1f346:	4618      	mov	r0, r3
   1f348:	f813 2b01 	ldrb.w	r2, [r3], #1
   1f34c:	2a00      	cmp	r2, #0
   1f34e:	d1f5      	bne.n	1f33c <strchr+0x68>
   1f350:	4610      	mov	r0, r2
   1f352:	4770      	bx	lr
   1f354:	0799      	lsls	r1, r3, #30
   1f356:	4618      	mov	r0, r3
   1f358:	d007      	beq.n	1f36a <strchr+0x96>
   1f35a:	4618      	mov	r0, r3
   1f35c:	3301      	adds	r3, #1
   1f35e:	7802      	ldrb	r2, [r0, #0]
   1f360:	2a00      	cmp	r2, #0
   1f362:	d1f7      	bne.n	1f354 <strchr+0x80>
   1f364:	4770      	bx	lr
   1f366:	0782      	lsls	r2, r0, #30
   1f368:	d1f7      	bne.n	1f35a <strchr+0x86>
   1f36a:	6802      	ldr	r2, [r0, #0]
   1f36c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1f370:	ea23 0302 	bic.w	r3, r3, r2
   1f374:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f378:	d108      	bne.n	1f38c <strchr+0xb8>
   1f37a:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1f37e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1f382:	ea23 0302 	bic.w	r3, r3, r2
   1f386:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f38a:	d0f6      	beq.n	1f37a <strchr+0xa6>
   1f38c:	7803      	ldrb	r3, [r0, #0]
   1f38e:	2b00      	cmp	r3, #0
   1f390:	d0e8      	beq.n	1f364 <strchr+0x90>
   1f392:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1f396:	2b00      	cmp	r3, #0
   1f398:	d1fb      	bne.n	1f392 <strchr+0xbe>
   1f39a:	4770      	bx	lr
   1f39c:	4618      	mov	r0, r3
   1f39e:	bd10      	pop	{r4, pc}

0001f3a0 <strncmp>:
   1f3a0:	2a00      	cmp	r2, #0
   1f3a2:	d03e      	beq.n	1f422 <strncmp+0x82>
   1f3a4:	ea40 0301 	orr.w	r3, r0, r1
   1f3a8:	079b      	lsls	r3, r3, #30
   1f3aa:	b530      	push	{r4, r5, lr}
   1f3ac:	4684      	mov	ip, r0
   1f3ae:	d12f      	bne.n	1f410 <strncmp+0x70>
   1f3b0:	2a03      	cmp	r2, #3
   1f3b2:	d92d      	bls.n	1f410 <strncmp+0x70>
   1f3b4:	460b      	mov	r3, r1
   1f3b6:	e008      	b.n	1f3ca <strncmp+0x2a>
   1f3b8:	3a04      	subs	r2, #4
   1f3ba:	4684      	mov	ip, r0
   1f3bc:	4619      	mov	r1, r3
   1f3be:	d025      	beq.n	1f40c <strncmp+0x6c>
   1f3c0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   1f3c4:	d122      	bne.n	1f40c <strncmp+0x6c>
   1f3c6:	2a03      	cmp	r2, #3
   1f3c8:	d922      	bls.n	1f410 <strncmp+0x70>
   1f3ca:	6804      	ldr	r4, [r0, #0]
   1f3cc:	4619      	mov	r1, r3
   1f3ce:	f853 5b04 	ldr.w	r5, [r3], #4
   1f3d2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1f3d6:	42ac      	cmp	r4, r5
   1f3d8:	4684      	mov	ip, r0
   1f3da:	ea2e 0e04 	bic.w	lr, lr, r4
   1f3de:	f100 0004 	add.w	r0, r0, #4
   1f3e2:	d0e9      	beq.n	1f3b8 <strncmp+0x18>
   1f3e4:	f89c 0000 	ldrb.w	r0, [ip]
   1f3e8:	780c      	ldrb	r4, [r1, #0]
   1f3ea:	42a0      	cmp	r0, r4
   1f3ec:	d11b      	bne.n	1f426 <strncmp+0x86>
   1f3ee:	46e6      	mov	lr, ip
   1f3f0:	b168      	cbz	r0, 1f40e <strncmp+0x6e>
   1f3f2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1f3f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f3fa:	eba2 030e 	sub.w	r3, r2, lr
   1f3fe:	42a0      	cmp	r0, r4
   1f400:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1f404:	d10f      	bne.n	1f426 <strncmp+0x86>
   1f406:	eb1c 0303 	adds.w	r3, ip, r3
   1f40a:	d1f1      	bne.n	1f3f0 <strncmp+0x50>
   1f40c:	2000      	movs	r0, #0
   1f40e:	bd30      	pop	{r4, r5, pc}
   1f410:	f89c 0000 	ldrb.w	r0, [ip]
   1f414:	780c      	ldrb	r4, [r1, #0]
   1f416:	4284      	cmp	r4, r0
   1f418:	d105      	bne.n	1f426 <strncmp+0x86>
   1f41a:	2a01      	cmp	r2, #1
   1f41c:	d0f6      	beq.n	1f40c <strncmp+0x6c>
   1f41e:	46e6      	mov	lr, ip
   1f420:	e7e6      	b.n	1f3f0 <strncmp+0x50>
   1f422:	4610      	mov	r0, r2
   1f424:	4770      	bx	lr
   1f426:	1b00      	subs	r0, r0, r4
   1f428:	bd30      	pop	{r4, r5, pc}
   1f42a:	bf00      	nop

0001f42c <strncpy>:
   1f42c:	ea40 0301 	orr.w	r3, r0, r1
   1f430:	079b      	lsls	r3, r3, #30
   1f432:	b530      	push	{r4, r5, lr}
   1f434:	d101      	bne.n	1f43a <strncpy+0xe>
   1f436:	2a03      	cmp	r2, #3
   1f438:	d80f      	bhi.n	1f45a <strncpy+0x2e>
   1f43a:	4684      	mov	ip, r0
   1f43c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1f440:	e007      	b.n	1f452 <strncpy+0x26>
   1f442:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   1f446:	f803 1b01 	strb.w	r1, [r3], #1
   1f44a:	1e54      	subs	r4, r2, #1
   1f44c:	b1c1      	cbz	r1, 1f480 <strncpy+0x54>
   1f44e:	469c      	mov	ip, r3
   1f450:	4622      	mov	r2, r4
   1f452:	4663      	mov	r3, ip
   1f454:	2a00      	cmp	r2, #0
   1f456:	d1f4      	bne.n	1f442 <strncpy+0x16>
   1f458:	bd30      	pop	{r4, r5, pc}
   1f45a:	460b      	mov	r3, r1
   1f45c:	4684      	mov	ip, r0
   1f45e:	4619      	mov	r1, r3
   1f460:	f853 5b04 	ldr.w	r5, [r3], #4
   1f464:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   1f468:	ea24 0405 	bic.w	r4, r4, r5
   1f46c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1f470:	d1e4      	bne.n	1f43c <strncpy+0x10>
   1f472:	3a04      	subs	r2, #4
   1f474:	2a03      	cmp	r2, #3
   1f476:	f84c 5b04 	str.w	r5, [ip], #4
   1f47a:	4619      	mov	r1, r3
   1f47c:	d8ef      	bhi.n	1f45e <strncpy+0x32>
   1f47e:	e7dd      	b.n	1f43c <strncpy+0x10>
   1f480:	4494      	add	ip, r2
   1f482:	2c00      	cmp	r4, #0
   1f484:	d0e8      	beq.n	1f458 <strncpy+0x2c>
   1f486:	f803 1b01 	strb.w	r1, [r3], #1
   1f48a:	4563      	cmp	r3, ip
   1f48c:	d1fb      	bne.n	1f486 <strncpy+0x5a>
   1f48e:	bd30      	pop	{r4, r5, pc}

0001f490 <critical_factorization>:
   1f490:	2901      	cmp	r1, #1
   1f492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f496:	d95b      	bls.n	1f550 <critical_factorization+0xc0>
   1f498:	f04f 0801 	mov.w	r8, #1
   1f49c:	46c6      	mov	lr, r8
   1f49e:	2400      	movs	r4, #0
   1f4a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f4a4:	4643      	mov	r3, r8
   1f4a6:	e008      	b.n	1f4ba <critical_factorization+0x2a>
   1f4a8:	eba3 0805 	sub.w	r8, r3, r5
   1f4ac:	461c      	mov	r4, r3
   1f4ae:	f04f 0e01 	mov.w	lr, #1
   1f4b2:	eb04 030e 	add.w	r3, r4, lr
   1f4b6:	428b      	cmp	r3, r1
   1f4b8:	d210      	bcs.n	1f4dc <critical_factorization+0x4c>
   1f4ba:	eb00 0c0e 	add.w	ip, r0, lr
   1f4be:	5cc7      	ldrb	r7, [r0, r3]
   1f4c0:	f81c 6005 	ldrb.w	r6, [ip, r5]
   1f4c4:	42b7      	cmp	r7, r6
   1f4c6:	d3ef      	bcc.n	1f4a8 <critical_factorization+0x18>
   1f4c8:	d032      	beq.n	1f530 <critical_factorization+0xa0>
   1f4ca:	f04f 0801 	mov.w	r8, #1
   1f4ce:	4625      	mov	r5, r4
   1f4d0:	46c6      	mov	lr, r8
   1f4d2:	4444      	add	r4, r8
   1f4d4:	eb04 030e 	add.w	r3, r4, lr
   1f4d8:	428b      	cmp	r3, r1
   1f4da:	d3ee      	bcc.n	1f4ba <critical_factorization+0x2a>
   1f4dc:	2701      	movs	r7, #1
   1f4de:	f8c2 8000 	str.w	r8, [r2]
   1f4e2:	46be      	mov	lr, r7
   1f4e4:	2400      	movs	r4, #0
   1f4e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1f4ea:	463b      	mov	r3, r7
   1f4ec:	e007      	b.n	1f4fe <critical_factorization+0x6e>
   1f4ee:	1b9f      	subs	r7, r3, r6
   1f4f0:	461c      	mov	r4, r3
   1f4f2:	f04f 0e01 	mov.w	lr, #1
   1f4f6:	eb04 030e 	add.w	r3, r4, lr
   1f4fa:	428b      	cmp	r3, r1
   1f4fc:	d210      	bcs.n	1f520 <critical_factorization+0x90>
   1f4fe:	eb00 0c06 	add.w	ip, r0, r6
   1f502:	f810 8003 	ldrb.w	r8, [r0, r3]
   1f506:	f81c c00e 	ldrb.w	ip, [ip, lr]
   1f50a:	45e0      	cmp	r8, ip
   1f50c:	d8ef      	bhi.n	1f4ee <critical_factorization+0x5e>
   1f50e:	d017      	beq.n	1f540 <critical_factorization+0xb0>
   1f510:	2701      	movs	r7, #1
   1f512:	4626      	mov	r6, r4
   1f514:	46be      	mov	lr, r7
   1f516:	443c      	add	r4, r7
   1f518:	eb04 030e 	add.w	r3, r4, lr
   1f51c:	428b      	cmp	r3, r1
   1f51e:	d3ee      	bcc.n	1f4fe <critical_factorization+0x6e>
   1f520:	3601      	adds	r6, #1
   1f522:	1c68      	adds	r0, r5, #1
   1f524:	4286      	cmp	r6, r0
   1f526:	d301      	bcc.n	1f52c <critical_factorization+0x9c>
   1f528:	6017      	str	r7, [r2, #0]
   1f52a:	4630      	mov	r0, r6
   1f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f530:	45c6      	cmp	lr, r8
   1f532:	bf0a      	itet	eq
   1f534:	4474      	addeq	r4, lr
   1f536:	f10e 0e01 	addne.w	lr, lr, #1
   1f53a:	f04f 0e01 	moveq.w	lr, #1
   1f53e:	e7b8      	b.n	1f4b2 <critical_factorization+0x22>
   1f540:	45be      	cmp	lr, r7
   1f542:	bf0a      	itet	eq
   1f544:	4474      	addeq	r4, lr
   1f546:	f10e 0e01 	addne.w	lr, lr, #1
   1f54a:	f04f 0e01 	moveq.w	lr, #1
   1f54e:	e7d2      	b.n	1f4f6 <critical_factorization+0x66>
   1f550:	2701      	movs	r7, #1
   1f552:	2600      	movs	r6, #0
   1f554:	e7e8      	b.n	1f528 <critical_factorization+0x98>
   1f556:	bf00      	nop

0001f558 <two_way_long_needle>:
   1f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f55c:	4692      	mov	sl, r2
   1f55e:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   1f562:	aa05      	add	r2, sp, #20
   1f564:	4681      	mov	r9, r0
   1f566:	460f      	mov	r7, r1
   1f568:	4650      	mov	r0, sl
   1f56a:	4619      	mov	r1, r3
   1f56c:	461d      	mov	r5, r3
   1f56e:	f7ff ff8f 	bl	1f490 <critical_factorization>
   1f572:	4613      	mov	r3, r2
   1f574:	4683      	mov	fp, r0
   1f576:	f20d 4214 	addw	r2, sp, #1044	; 0x414
   1f57a:	f843 5f04 	str.w	r5, [r3, #4]!
   1f57e:	4293      	cmp	r3, r2
   1f580:	d1fb      	bne.n	1f57a <two_way_long_needle+0x22>
   1f582:	2d00      	cmp	r5, #0
   1f584:	f000 80df 	beq.w	1f746 <two_way_long_needle+0x1ee>
   1f588:	1e6c      	subs	r4, r5, #1
   1f58a:	ae06      	add	r6, sp, #24
   1f58c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   1f590:	eb0a 0004 	add.w	r0, sl, r4
   1f594:	9600      	str	r6, [sp, #0]
   1f596:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   1f59a:	1aab      	subs	r3, r5, r2
   1f59c:	3b01      	subs	r3, #1
   1f59e:	4453      	add	r3, sl
   1f5a0:	4282      	cmp	r2, r0
   1f5a2:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
   1f5a6:	d1f6      	bne.n	1f596 <two_way_long_needle+0x3e>
   1f5a8:	9905      	ldr	r1, [sp, #20]
   1f5aa:	465a      	mov	r2, fp
   1f5ac:	4451      	add	r1, sl
   1f5ae:	4650      	mov	r0, sl
   1f5b0:	f003 fe6c 	bl	2328c <memcmp>
   1f5b4:	2800      	cmp	r0, #0
   1f5b6:	d16f      	bne.n	1f698 <two_way_long_needle+0x140>
   1f5b8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1f5bc:	9303      	str	r3, [sp, #12]
   1f5be:	f1cb 0301 	rsb	r3, fp, #1
   1f5c2:	4680      	mov	r8, r0
   1f5c4:	4606      	mov	r6, r0
   1f5c6:	9301      	str	r3, [sp, #4]
   1f5c8:	eb09 0e06 	add.w	lr, r9, r6
   1f5cc:	9a00      	ldr	r2, [sp, #0]
   1f5ce:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1f5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1f5d6:	b1db      	cbz	r3, 1f610 <two_way_long_needle+0xb8>
   1f5d8:	f1b8 0f00 	cmp.w	r8, #0
   1f5dc:	d003      	beq.n	1f5e6 <two_way_long_needle+0x8e>
   1f5de:	9a05      	ldr	r2, [sp, #20]
   1f5e0:	429a      	cmp	r2, r3
   1f5e2:	d900      	bls.n	1f5e6 <two_way_long_needle+0x8e>
   1f5e4:	1aab      	subs	r3, r5, r2
   1f5e6:	441e      	add	r6, r3
   1f5e8:	f04f 0800 	mov.w	r8, #0
   1f5ec:	1b7b      	subs	r3, r7, r5
   1f5ee:	429e      	cmp	r6, r3
   1f5f0:	d9ea      	bls.n	1f5c8 <two_way_long_needle+0x70>
   1f5f2:	eb09 0007 	add.w	r0, r9, r7
   1f5f6:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
   1f5fa:	f003 fe77 	bl	232ec <strnlen>
   1f5fe:	4407      	add	r7, r0
   1f600:	1b7b      	subs	r3, r7, r5
   1f602:	429e      	cmp	r6, r3
   1f604:	d9e0      	bls.n	1f5c8 <two_way_long_needle+0x70>
   1f606:	2000      	movs	r0, #0
   1f608:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1f60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f610:	45c3      	cmp	fp, r8
   1f612:	465b      	mov	r3, fp
   1f614:	bf38      	it	cc
   1f616:	4643      	movcc	r3, r8
   1f618:	42a3      	cmp	r3, r4
   1f61a:	d210      	bcs.n	1f63e <two_way_long_needle+0xe6>
   1f61c:	1e59      	subs	r1, r3, #1
   1f61e:	18f2      	adds	r2, r6, r3
   1f620:	4451      	add	r1, sl
   1f622:	444a      	add	r2, r9
   1f624:	e002      	b.n	1f62c <two_way_long_needle+0xd4>
   1f626:	3301      	adds	r3, #1
   1f628:	42a3      	cmp	r3, r4
   1f62a:	d208      	bcs.n	1f63e <two_way_long_needle+0xe6>
   1f62c:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f630:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1f634:	4584      	cmp	ip, r0
   1f636:	d0f6      	beq.n	1f626 <two_way_long_needle+0xce>
   1f638:	9a01      	ldr	r2, [sp, #4]
   1f63a:	4416      	add	r6, r2
   1f63c:	e7d3      	b.n	1f5e6 <two_way_long_needle+0x8e>
   1f63e:	45c3      	cmp	fp, r8
   1f640:	9b03      	ldr	r3, [sp, #12]
   1f642:	d97e      	bls.n	1f742 <two_way_long_needle+0x1ea>
   1f644:	eb06 020b 	add.w	r2, r6, fp
   1f648:	444a      	add	r2, r9
   1f64a:	eb0a 010b 	add.w	r1, sl, fp
   1f64e:	9602      	str	r6, [sp, #8]
   1f650:	e002      	b.n	1f658 <two_way_long_needle+0x100>
   1f652:	4543      	cmp	r3, r8
   1f654:	d015      	beq.n	1f682 <two_way_long_needle+0x12a>
   1f656:	4603      	mov	r3, r0
   1f658:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1f65c:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
   1f660:	4286      	cmp	r6, r0
   1f662:	f103 0c01 	add.w	ip, r3, #1
   1f666:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   1f66a:	d0f2      	beq.n	1f652 <two_way_long_needle+0xfa>
   1f66c:	9e02      	ldr	r6, [sp, #8]
   1f66e:	4663      	mov	r3, ip
   1f670:	f108 0801 	add.w	r8, r8, #1
   1f674:	4598      	cmp	r8, r3
   1f676:	d80a      	bhi.n	1f68e <two_way_long_needle+0x136>
   1f678:	9b05      	ldr	r3, [sp, #20]
   1f67a:	441e      	add	r6, r3
   1f67c:	eba5 0803 	sub.w	r8, r5, r3
   1f680:	e7b4      	b.n	1f5ec <two_way_long_needle+0x94>
   1f682:	4643      	mov	r3, r8
   1f684:	f108 0801 	add.w	r8, r8, #1
   1f688:	4598      	cmp	r8, r3
   1f68a:	9e02      	ldr	r6, [sp, #8]
   1f68c:	d9f4      	bls.n	1f678 <two_way_long_needle+0x120>
   1f68e:	4670      	mov	r0, lr
   1f690:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1f694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f698:	eba5 030b 	sub.w	r3, r5, fp
   1f69c:	455b      	cmp	r3, fp
   1f69e:	bf38      	it	cc
   1f6a0:	465b      	movcc	r3, fp
   1f6a2:	3301      	adds	r3, #1
   1f6a4:	9305      	str	r3, [sp, #20]
   1f6a6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   1f6aa:	9301      	str	r3, [sp, #4]
   1f6ac:	f1cb 0301 	rsb	r3, fp, #1
   1f6b0:	2600      	movs	r6, #0
   1f6b2:	9302      	str	r3, [sp, #8]
   1f6b4:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
   1f6b8:	eb09 0106 	add.w	r1, r9, r6
   1f6bc:	9a00      	ldr	r2, [sp, #0]
   1f6be:	5d0b      	ldrb	r3, [r1, r4]
   1f6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1f6c4:	b16b      	cbz	r3, 1f6e2 <two_way_long_needle+0x18a>
   1f6c6:	441e      	add	r6, r3
   1f6c8:	1b7b      	subs	r3, r7, r5
   1f6ca:	42b3      	cmp	r3, r6
   1f6cc:	d2f4      	bcs.n	1f6b8 <two_way_long_needle+0x160>
   1f6ce:	eb09 0007 	add.w	r0, r9, r7
   1f6d2:	4641      	mov	r1, r8
   1f6d4:	f003 fe0a 	bl	232ec <strnlen>
   1f6d8:	4407      	add	r7, r0
   1f6da:	1b7b      	subs	r3, r7, r5
   1f6dc:	42b3      	cmp	r3, r6
   1f6de:	d2eb      	bcs.n	1f6b8 <two_way_long_needle+0x160>
   1f6e0:	e791      	b.n	1f606 <two_way_long_needle+0xae>
   1f6e2:	45a3      	cmp	fp, r4
   1f6e4:	d214      	bcs.n	1f710 <two_way_long_needle+0x1b8>
   1f6e6:	9b01      	ldr	r3, [sp, #4]
   1f6e8:	eb0b 0206 	add.w	r2, fp, r6
   1f6ec:	eb0a 0c03 	add.w	ip, sl, r3
   1f6f0:	444a      	add	r2, r9
   1f6f2:	465b      	mov	r3, fp
   1f6f4:	e002      	b.n	1f6fc <two_way_long_needle+0x1a4>
   1f6f6:	3301      	adds	r3, #1
   1f6f8:	42a3      	cmp	r3, r4
   1f6fa:	d209      	bcs.n	1f710 <two_way_long_needle+0x1b8>
   1f6fc:	f812 0b01 	ldrb.w	r0, [r2], #1
   1f700:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1f704:	4586      	cmp	lr, r0
   1f706:	d0f6      	beq.n	1f6f6 <two_way_long_needle+0x19e>
   1f708:	9a02      	ldr	r2, [sp, #8]
   1f70a:	4416      	add	r6, r2
   1f70c:	441e      	add	r6, r3
   1f70e:	e7db      	b.n	1f6c8 <two_way_long_needle+0x170>
   1f710:	f1bb 0f00 	cmp.w	fp, #0
   1f714:	d010      	beq.n	1f738 <two_way_long_needle+0x1e0>
   1f716:	eb0b 0006 	add.w	r0, fp, r6
   1f71a:	4448      	add	r0, r9
   1f71c:	eb0a 020b 	add.w	r2, sl, fp
   1f720:	e001      	b.n	1f726 <two_way_long_needle+0x1ce>
   1f722:	4553      	cmp	r3, sl
   1f724:	d008      	beq.n	1f738 <two_way_long_needle+0x1e0>
   1f726:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   1f72a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   1f72e:	45e6      	cmp	lr, ip
   1f730:	4613      	mov	r3, r2
   1f732:	d0f6      	beq.n	1f722 <two_way_long_needle+0x1ca>
   1f734:	9b05      	ldr	r3, [sp, #20]
   1f736:	e7c6      	b.n	1f6c6 <two_way_long_needle+0x16e>
   1f738:	4608      	mov	r0, r1
   1f73a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   1f73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f742:	465b      	mov	r3, fp
   1f744:	e794      	b.n	1f670 <two_way_long_needle+0x118>
   1f746:	ab06      	add	r3, sp, #24
   1f748:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1f74c:	9300      	str	r3, [sp, #0]
   1f74e:	e72b      	b.n	1f5a8 <two_way_long_needle+0x50>

0001f750 <strstr>:
   1f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f754:	460d      	mov	r5, r1
   1f756:	7809      	ldrb	r1, [r1, #0]
   1f758:	b090      	sub	sp, #64	; 0x40
   1f75a:	4604      	mov	r4, r0
   1f75c:	2900      	cmp	r1, #0
   1f75e:	d054      	beq.n	1f80a <strstr+0xba>
   1f760:	786a      	ldrb	r2, [r5, #1]
   1f762:	2a00      	cmp	r2, #0
   1f764:	f000 8083 	beq.w	1f86e <strstr+0x11e>
   1f768:	78ab      	ldrb	r3, [r5, #2]
   1f76a:	2b00      	cmp	r3, #0
   1f76c:	d051      	beq.n	1f812 <strstr+0xc2>
   1f76e:	78e8      	ldrb	r0, [r5, #3]
   1f770:	682e      	ldr	r6, [r5, #0]
   1f772:	2800      	cmp	r0, #0
   1f774:	f000 8082 	beq.w	1f87c <strstr+0x12c>
   1f778:	792b      	ldrb	r3, [r5, #4]
   1f77a:	2b00      	cmp	r3, #0
   1f77c:	d057      	beq.n	1f82e <strstr+0xde>
   1f77e:	4628      	mov	r0, r5
   1f780:	f000 fafe 	bl	1fd80 <strlen>
   1f784:	4606      	mov	r6, r0
   1f786:	f440 7100 	orr.w	r1, r0, #512	; 0x200
   1f78a:	4620      	mov	r0, r4
   1f78c:	f003 fdae 	bl	232ec <strnlen>
   1f790:	4286      	cmp	r6, r0
   1f792:	d85b      	bhi.n	1f84c <strstr+0xfc>
   1f794:	2efe      	cmp	r6, #254	; 0xfe
   1f796:	f200 8086 	bhi.w	1f8a6 <strstr+0x156>
   1f79a:	1b80      	subs	r0, r0, r6
   1f79c:	1827      	adds	r7, r4, r0
   1f79e:	2240      	movs	r2, #64	; 0x40
   1f7a0:	1c71      	adds	r1, r6, #1
   1f7a2:	4668      	mov	r0, sp
   1f7a4:	f7ff fd24 	bl	1f1f0 <memset>
   1f7a8:	b17e      	cbz	r6, 1f7ca <strstr+0x7a>
   1f7aa:	1e6a      	subs	r2, r5, #1
   1f7ac:	fa5f fc86 	uxtb.w	ip, r6
   1f7b0:	1990      	adds	r0, r2, r6
   1f7b2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1f7b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f7ba:	3340      	adds	r3, #64	; 0x40
   1f7bc:	446b      	add	r3, sp
   1f7be:	1aa9      	subs	r1, r5, r2
   1f7c0:	4461      	add	r1, ip
   1f7c2:	4282      	cmp	r2, r0
   1f7c4:	f803 1c40 	strb.w	r1, [r3, #-64]
   1f7c8:	d1f3      	bne.n	1f7b2 <strstr+0x62>
   1f7ca:	3c01      	subs	r4, #1
   1f7cc:	5da3      	ldrb	r3, [r4, r6]
   1f7ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f7d2:	3340      	adds	r3, #64	; 0x40
   1f7d4:	446b      	add	r3, sp
   1f7d6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   1f7da:	441c      	add	r4, r3
   1f7dc:	42a7      	cmp	r7, r4
   1f7de:	d203      	bcs.n	1f7e8 <strstr+0x98>
   1f7e0:	e039      	b.n	1f856 <strstr+0x106>
   1f7e2:	4444      	add	r4, r8
   1f7e4:	42a7      	cmp	r7, r4
   1f7e6:	d336      	bcc.n	1f856 <strstr+0x106>
   1f7e8:	f814 c006 	ldrb.w	ip, [r4, r6]
   1f7ec:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   1f7f0:	f10c 0340 	add.w	r3, ip, #64	; 0x40
   1f7f4:	eb0d 0c03 	add.w	ip, sp, r3
   1f7f8:	4620      	mov	r0, r4
   1f7fa:	4632      	mov	r2, r6
   1f7fc:	4629      	mov	r1, r5
   1f7fe:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
   1f802:	f003 fd43 	bl	2328c <memcmp>
   1f806:	2800      	cmp	r0, #0
   1f808:	d1eb      	bne.n	1f7e2 <strstr+0x92>
   1f80a:	4620      	mov	r0, r4
   1f80c:	b010      	add	sp, #64	; 0x40
   1f80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f812:	7800      	ldrb	r0, [r0, #0]
   1f814:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1f818:	e000      	b.n	1f81c <strstr+0xcc>
   1f81a:	460c      	mov	r4, r1
   1f81c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1f820:	1c61      	adds	r1, r4, #1
   1f822:	b198      	cbz	r0, 1f84c <strstr+0xfc>
   1f824:	429a      	cmp	r2, r3
   1f826:	7860      	ldrb	r0, [r4, #1]
   1f828:	d1f7      	bne.n	1f81a <strstr+0xca>
   1f82a:	3c01      	subs	r4, #1
   1f82c:	e7ed      	b.n	1f80a <strstr+0xba>
   1f82e:	7822      	ldrb	r2, [r4, #0]
   1f830:	b162      	cbz	r2, 1f84c <strstr+0xfc>
   1f832:	ba31      	rev	r1, r6
   1f834:	e001      	b.n	1f83a <strstr+0xea>
   1f836:	4299      	cmp	r1, r3
   1f838:	d01e      	beq.n	1f878 <strstr+0x128>
   1f83a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1f83e:	4620      	mov	r0, r4
   1f840:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   1f844:	2a00      	cmp	r2, #0
   1f846:	d1f6      	bne.n	1f836 <strstr+0xe6>
   1f848:	4299      	cmp	r1, r3
   1f84a:	d015      	beq.n	1f878 <strstr+0x128>
   1f84c:	2400      	movs	r4, #0
   1f84e:	4620      	mov	r0, r4
   1f850:	b010      	add	sp, #64	; 0x40
   1f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f856:	5dbb      	ldrb	r3, [r7, r6]
   1f858:	19b8      	adds	r0, r7, r6
   1f85a:	2b00      	cmp	r3, #0
   1f85c:	d0f6      	beq.n	1f84c <strstr+0xfc>
   1f85e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   1f862:	f003 fd43 	bl	232ec <strnlen>
   1f866:	4407      	add	r7, r0
   1f868:	42bc      	cmp	r4, r7
   1f86a:	d9ae      	bls.n	1f7ca <strstr+0x7a>
   1f86c:	e7ee      	b.n	1f84c <strstr+0xfc>
   1f86e:	b010      	add	sp, #64	; 0x40
   1f870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f874:	f7ff bd2e 	b.w	1f2d4 <strchr>
   1f878:	1ec4      	subs	r4, r0, #3
   1f87a:	e7c6      	b.n	1f80a <strstr+0xba>
   1f87c:	0412      	lsls	r2, r2, #16
   1f87e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1f882:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1f886:	7821      	ldrb	r1, [r4, #0]
   1f888:	4602      	mov	r2, r0
   1f88a:	e000      	b.n	1f88e <strstr+0x13e>
   1f88c:	462c      	mov	r4, r5
   1f88e:	ea41 0002 	orr.w	r0, r1, r2
   1f892:	1c65      	adds	r5, r4, #1
   1f894:	0202      	lsls	r2, r0, #8
   1f896:	2900      	cmp	r1, #0
   1f898:	d0d8      	beq.n	1f84c <strstr+0xfc>
   1f89a:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
   1f89e:	7861      	ldrb	r1, [r4, #1]
   1f8a0:	d1f4      	bne.n	1f88c <strstr+0x13c>
   1f8a2:	3c02      	subs	r4, #2
   1f8a4:	e7b1      	b.n	1f80a <strstr+0xba>
   1f8a6:	4601      	mov	r1, r0
   1f8a8:	4633      	mov	r3, r6
   1f8aa:	462a      	mov	r2, r5
   1f8ac:	4620      	mov	r0, r4
   1f8ae:	b010      	add	sp, #64	; 0x40
   1f8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f8b4:	f7ff be50 	b.w	1f558 <two_way_long_needle>

0001f8b8 <stpcpy>:
   1f8b8:	ea41 0300 	orr.w	r3, r1, r0
   1f8bc:	079b      	lsls	r3, r3, #30
   1f8be:	d115      	bne.n	1f8ec <stpcpy+0x34>
   1f8c0:	680b      	ldr	r3, [r1, #0]
   1f8c2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1f8c6:	ea22 0203 	bic.w	r2, r2, r3
   1f8ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1f8ce:	d10d      	bne.n	1f8ec <stpcpy+0x34>
   1f8d0:	f101 0c04 	add.w	ip, r1, #4
   1f8d4:	f840 3b04 	str.w	r3, [r0], #4
   1f8d8:	4661      	mov	r1, ip
   1f8da:	f85c 3b04 	ldr.w	r3, [ip], #4
   1f8de:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1f8e2:	ea22 0203 	bic.w	r2, r2, r3
   1f8e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1f8ea:	d0f3      	beq.n	1f8d4 <stpcpy+0x1c>
   1f8ec:	4603      	mov	r3, r0
   1f8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   1f8f2:	4618      	mov	r0, r3
   1f8f4:	f803 2b01 	strb.w	r2, [r3], #1
   1f8f8:	2a00      	cmp	r2, #0
   1f8fa:	d1f8      	bne.n	1f8ee <stpcpy+0x36>
   1f8fc:	4770      	bx	lr
   1f8fe:	bf00      	nop

0001f900 <__locale_mb_cur_max>:
   1f900:	4b01      	ldr	r3, [pc, #4]	; (1f908 <__locale_mb_cur_max+0x8>)
   1f902:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1f906:	4770      	bx	lr
   1f908:	20003e40 	.word	0x20003e40

0001f90c <__cxa_atexit>:
   1f90c:	4613      	mov	r3, r2
   1f90e:	460a      	mov	r2, r1
   1f910:	4601      	mov	r1, r0
   1f912:	2002      	movs	r0, #2
   1f914:	f000 baa2 	b.w	1fe5c <__register_exitproc>

0001f918 <fcvtf>:
   1f918:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   1f91c:	2300      	movs	r3, #0
   1f91e:	f003 bd39 	b.w	23394 <fcvtbuf>
   1f922:	bf00      	nop

0001f924 <_sbrk_r>:
   1f924:	b538      	push	{r3, r4, r5, lr}
   1f926:	4d07      	ldr	r5, [pc, #28]	; (1f944 <_sbrk_r+0x20>)
   1f928:	2200      	movs	r2, #0
   1f92a:	4604      	mov	r4, r0
   1f92c:	4608      	mov	r0, r1
   1f92e:	602a      	str	r2, [r5, #0]
   1f930:	f7f9 fa06 	bl	18d40 <_sbrk>
   1f934:	1c43      	adds	r3, r0, #1
   1f936:	d000      	beq.n	1f93a <_sbrk_r+0x16>
   1f938:	bd38      	pop	{r3, r4, r5, pc}
   1f93a:	682b      	ldr	r3, [r5, #0]
   1f93c:	2b00      	cmp	r3, #0
   1f93e:	d0fb      	beq.n	1f938 <_sbrk_r+0x14>
   1f940:	6023      	str	r3, [r4, #0]
   1f942:	bd38      	pop	{r3, r4, r5, pc}
   1f944:	20005be4 	.word	0x20005be4

0001f948 <_write_r>:
   1f948:	b538      	push	{r3, r4, r5, lr}
   1f94a:	460c      	mov	r4, r1
   1f94c:	4d08      	ldr	r5, [pc, #32]	; (1f970 <_write_r+0x28>)
   1f94e:	4684      	mov	ip, r0
   1f950:	4611      	mov	r1, r2
   1f952:	4620      	mov	r0, r4
   1f954:	461a      	mov	r2, r3
   1f956:	2300      	movs	r3, #0
   1f958:	602b      	str	r3, [r5, #0]
   1f95a:	4664      	mov	r4, ip
   1f95c:	f7f8 fa06 	bl	17d6c <_write>
   1f960:	1c43      	adds	r3, r0, #1
   1f962:	d000      	beq.n	1f966 <_write_r+0x1e>
   1f964:	bd38      	pop	{r3, r4, r5, pc}
   1f966:	682b      	ldr	r3, [r5, #0]
   1f968:	2b00      	cmp	r3, #0
   1f96a:	d0fb      	beq.n	1f964 <_write_r+0x1c>
   1f96c:	6023      	str	r3, [r4, #0]
   1f96e:	bd38      	pop	{r3, r4, r5, pc}
   1f970:	20005be4 	.word	0x20005be4

0001f974 <__errno>:
   1f974:	4b01      	ldr	r3, [pc, #4]	; (1f97c <__errno+0x8>)
   1f976:	6818      	ldr	r0, [r3, #0]
   1f978:	4770      	bx	lr
   1f97a:	bf00      	nop
   1f97c:	200043c8 	.word	0x200043c8
   1f980:	eba2 0003 	sub.w	r0, r2, r3
   1f984:	4770      	bx	lr
   1f986:	bf00      	nop

0001f988 <strcmp>:
   1f988:	7802      	ldrb	r2, [r0, #0]
   1f98a:	780b      	ldrb	r3, [r1, #0]
   1f98c:	2a01      	cmp	r2, #1
   1f98e:	bf28      	it	cs
   1f990:	429a      	cmpcs	r2, r3
   1f992:	d1f5      	bne.n	1f980 <__errno+0xc>
   1f994:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   1f998:	ea40 0401 	orr.w	r4, r0, r1
   1f99c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1f9a0:	f06f 0c00 	mvn.w	ip, #0
   1f9a4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   1f9a8:	b312      	cbz	r2, 1f9f0 <strcmp+0x68>
   1f9aa:	ea80 0401 	eor.w	r4, r0, r1
   1f9ae:	f014 0f07 	tst.w	r4, #7
   1f9b2:	d16a      	bne.n	1fa8a <strcmp+0x102>
   1f9b4:	f000 0407 	and.w	r4, r0, #7
   1f9b8:	f020 0007 	bic.w	r0, r0, #7
   1f9bc:	f004 0503 	and.w	r5, r4, #3
   1f9c0:	f021 0107 	bic.w	r1, r1, #7
   1f9c4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1f9c8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1f9cc:	f014 0f04 	tst.w	r4, #4
   1f9d0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1f9d4:	fa0c f405 	lsl.w	r4, ip, r5
   1f9d8:	ea62 0204 	orn	r2, r2, r4
   1f9dc:	ea66 0604 	orn	r6, r6, r4
   1f9e0:	d00a      	beq.n	1f9f8 <strcmp+0x70>
   1f9e2:	ea63 0304 	orn	r3, r3, r4
   1f9e6:	4662      	mov	r2, ip
   1f9e8:	ea67 0704 	orn	r7, r7, r4
   1f9ec:	4666      	mov	r6, ip
   1f9ee:	e003      	b.n	1f9f8 <strcmp+0x70>
   1f9f0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1f9f4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1f9f8:	fa82 f54c 	uadd8	r5, r2, ip
   1f9fc:	ea82 0406 	eor.w	r4, r2, r6
   1fa00:	faa4 f48c 	sel	r4, r4, ip
   1fa04:	bb6c      	cbnz	r4, 1fa62 <strcmp+0xda>
   1fa06:	fa83 f54c 	uadd8	r5, r3, ip
   1fa0a:	ea83 0507 	eor.w	r5, r3, r7
   1fa0e:	faa5 f58c 	sel	r5, r5, ip
   1fa12:	b995      	cbnz	r5, 1fa3a <strcmp+0xb2>
   1fa14:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   1fa18:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1fa1c:	fa82 f54c 	uadd8	r5, r2, ip
   1fa20:	ea82 0406 	eor.w	r4, r2, r6
   1fa24:	faa4 f48c 	sel	r4, r4, ip
   1fa28:	fa83 f54c 	uadd8	r5, r3, ip
   1fa2c:	ea83 0507 	eor.w	r5, r3, r7
   1fa30:	faa5 f58c 	sel	r5, r5, ip
   1fa34:	4325      	orrs	r5, r4
   1fa36:	d0db      	beq.n	1f9f0 <strcmp+0x68>
   1fa38:	b99c      	cbnz	r4, 1fa62 <strcmp+0xda>
   1fa3a:	ba2d      	rev	r5, r5
   1fa3c:	fab5 f485 	clz	r4, r5
   1fa40:	f024 0407 	bic.w	r4, r4, #7
   1fa44:	fa27 f104 	lsr.w	r1, r7, r4
   1fa48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1fa4c:	fa23 f304 	lsr.w	r3, r3, r4
   1fa50:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1fa54:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1fa58:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1fa5c:	eba0 0001 	sub.w	r0, r0, r1
   1fa60:	4770      	bx	lr
   1fa62:	ba24      	rev	r4, r4
   1fa64:	fab4 f484 	clz	r4, r4
   1fa68:	f024 0407 	bic.w	r4, r4, #7
   1fa6c:	fa26 f104 	lsr.w	r1, r6, r4
   1fa70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1fa74:	fa22 f204 	lsr.w	r2, r2, r4
   1fa78:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1fa7c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1fa80:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1fa84:	eba0 0001 	sub.w	r0, r0, r1
   1fa88:	4770      	bx	lr
   1fa8a:	f014 0f03 	tst.w	r4, #3
   1fa8e:	d13c      	bne.n	1fb0a <strcmp+0x182>
   1fa90:	f010 0403 	ands.w	r4, r0, #3
   1fa94:	d128      	bne.n	1fae8 <strcmp+0x160>
   1fa96:	f850 2b08 	ldr.w	r2, [r0], #8
   1fa9a:	f851 3b08 	ldr.w	r3, [r1], #8
   1fa9e:	fa82 f54c 	uadd8	r5, r2, ip
   1faa2:	ea82 0503 	eor.w	r5, r2, r3
   1faa6:	faa5 f58c 	sel	r5, r5, ip
   1faaa:	b95d      	cbnz	r5, 1fac4 <strcmp+0x13c>
   1faac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1fab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1fab4:	fa82 f54c 	uadd8	r5, r2, ip
   1fab8:	ea82 0503 	eor.w	r5, r2, r3
   1fabc:	faa5 f58c 	sel	r5, r5, ip
   1fac0:	2d00      	cmp	r5, #0
   1fac2:	d0e8      	beq.n	1fa96 <strcmp+0x10e>
   1fac4:	ba2d      	rev	r5, r5
   1fac6:	fab5 f485 	clz	r4, r5
   1faca:	f024 0407 	bic.w	r4, r4, #7
   1face:	fa23 f104 	lsr.w	r1, r3, r4
   1fad2:	fa22 f204 	lsr.w	r2, r2, r4
   1fad6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1fada:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1fade:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1fae2:	eba0 0001 	sub.w	r0, r0, r1
   1fae6:	4770      	bx	lr
   1fae8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1faec:	f020 0003 	bic.w	r0, r0, #3
   1faf0:	f850 2b08 	ldr.w	r2, [r0], #8
   1faf4:	f021 0103 	bic.w	r1, r1, #3
   1faf8:	f851 3b08 	ldr.w	r3, [r1], #8
   1fafc:	fa0c f404 	lsl.w	r4, ip, r4
   1fb00:	ea62 0204 	orn	r2, r2, r4
   1fb04:	ea63 0304 	orn	r3, r3, r4
   1fb08:	e7c9      	b.n	1fa9e <strcmp+0x116>
   1fb0a:	f010 0403 	ands.w	r4, r0, #3
   1fb0e:	d01a      	beq.n	1fb46 <strcmp+0x1be>
   1fb10:	eba1 0104 	sub.w	r1, r1, r4
   1fb14:	f020 0003 	bic.w	r0, r0, #3
   1fb18:	07e4      	lsls	r4, r4, #31
   1fb1a:	f850 2b04 	ldr.w	r2, [r0], #4
   1fb1e:	d006      	beq.n	1fb2e <strcmp+0x1a6>
   1fb20:	d20f      	bcs.n	1fb42 <strcmp+0x1ba>
   1fb22:	788b      	ldrb	r3, [r1, #2]
   1fb24:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   1fb28:	1ae4      	subs	r4, r4, r3
   1fb2a:	d106      	bne.n	1fb3a <strcmp+0x1b2>
   1fb2c:	b12b      	cbz	r3, 1fb3a <strcmp+0x1b2>
   1fb2e:	78cb      	ldrb	r3, [r1, #3]
   1fb30:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   1fb34:	1ae4      	subs	r4, r4, r3
   1fb36:	d100      	bne.n	1fb3a <strcmp+0x1b2>
   1fb38:	b91b      	cbnz	r3, 1fb42 <strcmp+0x1ba>
   1fb3a:	4620      	mov	r0, r4
   1fb3c:	f85d 4b10 	ldr.w	r4, [sp], #16
   1fb40:	4770      	bx	lr
   1fb42:	f101 0104 	add.w	r1, r1, #4
   1fb46:	f850 2b04 	ldr.w	r2, [r0], #4
   1fb4a:	07cc      	lsls	r4, r1, #31
   1fb4c:	f021 0103 	bic.w	r1, r1, #3
   1fb50:	f851 3b04 	ldr.w	r3, [r1], #4
   1fb54:	d848      	bhi.n	1fbe8 <strcmp+0x260>
   1fb56:	d224      	bcs.n	1fba2 <strcmp+0x21a>
   1fb58:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1fb5c:	fa82 f54c 	uadd8	r5, r2, ip
   1fb60:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   1fb64:	faa5 f58c 	sel	r5, r5, ip
   1fb68:	d10a      	bne.n	1fb80 <strcmp+0x1f8>
   1fb6a:	b965      	cbnz	r5, 1fb86 <strcmp+0x1fe>
   1fb6c:	f851 3b04 	ldr.w	r3, [r1], #4
   1fb70:	ea84 0402 	eor.w	r4, r4, r2
   1fb74:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   1fb78:	d10e      	bne.n	1fb98 <strcmp+0x210>
   1fb7a:	f850 2b04 	ldr.w	r2, [r0], #4
   1fb7e:	e7eb      	b.n	1fb58 <strcmp+0x1d0>
   1fb80:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1fb84:	e055      	b.n	1fc32 <strcmp+0x2aa>
   1fb86:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1fb8a:	d14d      	bne.n	1fc28 <strcmp+0x2a0>
   1fb8c:	7808      	ldrb	r0, [r1, #0]
   1fb8e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1fb92:	f1c0 0000 	rsb	r0, r0, #0
   1fb96:	4770      	bx	lr
   1fb98:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1fb9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1fba0:	e047      	b.n	1fc32 <strcmp+0x2aa>
   1fba2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   1fba6:	fa82 f54c 	uadd8	r5, r2, ip
   1fbaa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1fbae:	faa5 f58c 	sel	r5, r5, ip
   1fbb2:	d10a      	bne.n	1fbca <strcmp+0x242>
   1fbb4:	b965      	cbnz	r5, 1fbd0 <strcmp+0x248>
   1fbb6:	f851 3b04 	ldr.w	r3, [r1], #4
   1fbba:	ea84 0402 	eor.w	r4, r4, r2
   1fbbe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   1fbc2:	d10c      	bne.n	1fbde <strcmp+0x256>
   1fbc4:	f850 2b04 	ldr.w	r2, [r0], #4
   1fbc8:	e7eb      	b.n	1fba2 <strcmp+0x21a>
   1fbca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1fbce:	e030      	b.n	1fc32 <strcmp+0x2aa>
   1fbd0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   1fbd4:	d128      	bne.n	1fc28 <strcmp+0x2a0>
   1fbd6:	880b      	ldrh	r3, [r1, #0]
   1fbd8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1fbdc:	e029      	b.n	1fc32 <strcmp+0x2aa>
   1fbde:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1fbe2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   1fbe6:	e024      	b.n	1fc32 <strcmp+0x2aa>
   1fbe8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1fbec:	fa82 f54c 	uadd8	r5, r2, ip
   1fbf0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   1fbf4:	faa5 f58c 	sel	r5, r5, ip
   1fbf8:	d10a      	bne.n	1fc10 <strcmp+0x288>
   1fbfa:	b965      	cbnz	r5, 1fc16 <strcmp+0x28e>
   1fbfc:	f851 3b04 	ldr.w	r3, [r1], #4
   1fc00:	ea84 0402 	eor.w	r4, r4, r2
   1fc04:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1fc08:	d109      	bne.n	1fc1e <strcmp+0x296>
   1fc0a:	f850 2b04 	ldr.w	r2, [r0], #4
   1fc0e:	e7eb      	b.n	1fbe8 <strcmp+0x260>
   1fc10:	ea4f 6313 	mov.w	r3, r3, lsr #24
   1fc14:	e00d      	b.n	1fc32 <strcmp+0x2aa>
   1fc16:	f015 0fff 	tst.w	r5, #255	; 0xff
   1fc1a:	d105      	bne.n	1fc28 <strcmp+0x2a0>
   1fc1c:	680b      	ldr	r3, [r1, #0]
   1fc1e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   1fc22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1fc26:	e004      	b.n	1fc32 <strcmp+0x2aa>
   1fc28:	f04f 0000 	mov.w	r0, #0
   1fc2c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1fc30:	4770      	bx	lr
   1fc32:	ba12      	rev	r2, r2
   1fc34:	ba1b      	rev	r3, r3
   1fc36:	fa82 f44c 	uadd8	r4, r2, ip
   1fc3a:	ea82 0403 	eor.w	r4, r2, r3
   1fc3e:	faa4 f58c 	sel	r5, r4, ip
   1fc42:	fab5 f485 	clz	r4, r5
   1fc46:	fa02 f204 	lsl.w	r2, r2, r4
   1fc4a:	fa03 f304 	lsl.w	r3, r3, r4
   1fc4e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   1fc52:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1fc56:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1fc5a:	4770      	bx	lr

0001fc5c <strcpy>:
   1fc5c:	ea80 0201 	eor.w	r2, r0, r1
   1fc60:	4684      	mov	ip, r0
   1fc62:	f012 0f03 	tst.w	r2, #3
   1fc66:	d14f      	bne.n	1fd08 <strcpy+0xac>
   1fc68:	f011 0f03 	tst.w	r1, #3
   1fc6c:	d132      	bne.n	1fcd4 <strcpy+0x78>
   1fc6e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1fc72:	f011 0f04 	tst.w	r1, #4
   1fc76:	f851 3b04 	ldr.w	r3, [r1], #4
   1fc7a:	d00b      	beq.n	1fc94 <strcpy+0x38>
   1fc7c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1fc80:	439a      	bics	r2, r3
   1fc82:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1fc86:	bf04      	itt	eq
   1fc88:	f84c 3b04 	streq.w	r3, [ip], #4
   1fc8c:	f851 3b04 	ldreq.w	r3, [r1], #4
   1fc90:	d116      	bne.n	1fcc0 <strcpy+0x64>
   1fc92:	bf00      	nop
   1fc94:	f851 4b04 	ldr.w	r4, [r1], #4
   1fc98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1fc9c:	439a      	bics	r2, r3
   1fc9e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1fca2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1fca6:	d10b      	bne.n	1fcc0 <strcpy+0x64>
   1fca8:	f84c 3b04 	str.w	r3, [ip], #4
   1fcac:	43a2      	bics	r2, r4
   1fcae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1fcb2:	bf04      	itt	eq
   1fcb4:	f851 3b04 	ldreq.w	r3, [r1], #4
   1fcb8:	f84c 4b04 	streq.w	r4, [ip], #4
   1fcbc:	d0ea      	beq.n	1fc94 <strcpy+0x38>
   1fcbe:	4623      	mov	r3, r4
   1fcc0:	f80c 3b01 	strb.w	r3, [ip], #1
   1fcc4:	f013 0fff 	tst.w	r3, #255	; 0xff
   1fcc8:	ea4f 2333 	mov.w	r3, r3, ror #8
   1fccc:	d1f8      	bne.n	1fcc0 <strcpy+0x64>
   1fcce:	f85d 4b04 	ldr.w	r4, [sp], #4
   1fcd2:	4770      	bx	lr
   1fcd4:	f011 0f01 	tst.w	r1, #1
   1fcd8:	d006      	beq.n	1fce8 <strcpy+0x8c>
   1fcda:	f811 2b01 	ldrb.w	r2, [r1], #1
   1fcde:	f80c 2b01 	strb.w	r2, [ip], #1
   1fce2:	2a00      	cmp	r2, #0
   1fce4:	bf08      	it	eq
   1fce6:	4770      	bxeq	lr
   1fce8:	f011 0f02 	tst.w	r1, #2
   1fcec:	d0bf      	beq.n	1fc6e <strcpy+0x12>
   1fcee:	f831 2b02 	ldrh.w	r2, [r1], #2
   1fcf2:	f012 0fff 	tst.w	r2, #255	; 0xff
   1fcf6:	bf16      	itet	ne
   1fcf8:	f82c 2b02 	strhne.w	r2, [ip], #2
   1fcfc:	f88c 2000 	strbeq.w	r2, [ip]
   1fd00:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1fd04:	d1b3      	bne.n	1fc6e <strcpy+0x12>
   1fd06:	4770      	bx	lr
   1fd08:	f811 2b01 	ldrb.w	r2, [r1], #1
   1fd0c:	f80c 2b01 	strb.w	r2, [ip], #1
   1fd10:	2a00      	cmp	r2, #0
   1fd12:	d1f9      	bne.n	1fd08 <strcpy+0xac>
   1fd14:	4770      	bx	lr
   1fd16:	bf00      	nop

0001fd18 <__libc_init_array>:
   1fd18:	b570      	push	{r4, r5, r6, lr}
   1fd1a:	4e0d      	ldr	r6, [pc, #52]	; (1fd50 <__libc_init_array+0x38>)
   1fd1c:	4d0d      	ldr	r5, [pc, #52]	; (1fd54 <__libc_init_array+0x3c>)
   1fd1e:	1b76      	subs	r6, r6, r5
   1fd20:	10b6      	asrs	r6, r6, #2
   1fd22:	d006      	beq.n	1fd32 <__libc_init_array+0x1a>
   1fd24:	2400      	movs	r4, #0
   1fd26:	f855 3b04 	ldr.w	r3, [r5], #4
   1fd2a:	3401      	adds	r4, #1
   1fd2c:	4798      	blx	r3
   1fd2e:	42a6      	cmp	r6, r4
   1fd30:	d1f9      	bne.n	1fd26 <__libc_init_array+0xe>
   1fd32:	4e09      	ldr	r6, [pc, #36]	; (1fd58 <__libc_init_array+0x40>)
   1fd34:	4d09      	ldr	r5, [pc, #36]	; (1fd5c <__libc_init_array+0x44>)
   1fd36:	1b76      	subs	r6, r6, r5
   1fd38:	f006 f8aa 	bl	25e90 <___init_veneer>
   1fd3c:	10b6      	asrs	r6, r6, #2
   1fd3e:	d006      	beq.n	1fd4e <__libc_init_array+0x36>
   1fd40:	2400      	movs	r4, #0
   1fd42:	f855 3b04 	ldr.w	r3, [r5], #4
   1fd46:	3401      	adds	r4, #1
   1fd48:	4798      	blx	r3
   1fd4a:	42a6      	cmp	r6, r4
   1fd4c:	d1f9      	bne.n	1fd42 <__libc_init_array+0x2a>
   1fd4e:	bd70      	pop	{r4, r5, r6, pc}
   1fd50:	60001c70 	.word	0x60001c70
   1fd54:	60001c70 	.word	0x60001c70
   1fd58:	60001cb8 	.word	0x60001cb8
   1fd5c:	60001c70 	.word	0x60001c70

0001fd60 <__retarget_lock_init_recursive>:
   1fd60:	4770      	bx	lr
   1fd62:	bf00      	nop

0001fd64 <__retarget_lock_close_recursive>:
   1fd64:	4770      	bx	lr
   1fd66:	bf00      	nop

0001fd68 <__retarget_lock_acquire_recursive>:
   1fd68:	4770      	bx	lr
   1fd6a:	bf00      	nop

0001fd6c <__retarget_lock_release_recursive>:
   1fd6c:	4770      	bx	lr
   1fd6e:	bf00      	nop
	...

0001fd80 <strlen>:
   1fd80:	f890 f000 	pld	[r0]
   1fd84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1fd88:	f020 0107 	bic.w	r1, r0, #7
   1fd8c:	f06f 0c00 	mvn.w	ip, #0
   1fd90:	f010 0407 	ands.w	r4, r0, #7
   1fd94:	f891 f020 	pld	[r1, #32]
   1fd98:	f040 8049 	bne.w	1fe2e <strlen+0xae>
   1fd9c:	f04f 0400 	mov.w	r4, #0
   1fda0:	f06f 0007 	mvn.w	r0, #7
   1fda4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1fda8:	f891 f040 	pld	[r1, #64]	; 0x40
   1fdac:	f100 0008 	add.w	r0, r0, #8
   1fdb0:	fa82 f24c 	uadd8	r2, r2, ip
   1fdb4:	faa4 f28c 	sel	r2, r4, ip
   1fdb8:	fa83 f34c 	uadd8	r3, r3, ip
   1fdbc:	faa2 f38c 	sel	r3, r2, ip
   1fdc0:	bb4b      	cbnz	r3, 1fe16 <strlen+0x96>
   1fdc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1fdc6:	fa82 f24c 	uadd8	r2, r2, ip
   1fdca:	f100 0008 	add.w	r0, r0, #8
   1fdce:	faa4 f28c 	sel	r2, r4, ip
   1fdd2:	fa83 f34c 	uadd8	r3, r3, ip
   1fdd6:	faa2 f38c 	sel	r3, r2, ip
   1fdda:	b9e3      	cbnz	r3, 1fe16 <strlen+0x96>
   1fddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1fde0:	fa82 f24c 	uadd8	r2, r2, ip
   1fde4:	f100 0008 	add.w	r0, r0, #8
   1fde8:	faa4 f28c 	sel	r2, r4, ip
   1fdec:	fa83 f34c 	uadd8	r3, r3, ip
   1fdf0:	faa2 f38c 	sel	r3, r2, ip
   1fdf4:	b97b      	cbnz	r3, 1fe16 <strlen+0x96>
   1fdf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1fdfa:	f101 0120 	add.w	r1, r1, #32
   1fdfe:	fa82 f24c 	uadd8	r2, r2, ip
   1fe02:	f100 0008 	add.w	r0, r0, #8
   1fe06:	faa4 f28c 	sel	r2, r4, ip
   1fe0a:	fa83 f34c 	uadd8	r3, r3, ip
   1fe0e:	faa2 f38c 	sel	r3, r2, ip
   1fe12:	2b00      	cmp	r3, #0
   1fe14:	d0c6      	beq.n	1fda4 <strlen+0x24>
   1fe16:	2a00      	cmp	r2, #0
   1fe18:	bf04      	itt	eq
   1fe1a:	3004      	addeq	r0, #4
   1fe1c:	461a      	moveq	r2, r3
   1fe1e:	ba12      	rev	r2, r2
   1fe20:	fab2 f282 	clz	r2, r2
   1fe24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1fe28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1fe2c:	4770      	bx	lr
   1fe2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1fe32:	f004 0503 	and.w	r5, r4, #3
   1fe36:	f1c4 0000 	rsb	r0, r4, #0
   1fe3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1fe3e:	f014 0f04 	tst.w	r4, #4
   1fe42:	f891 f040 	pld	[r1, #64]	; 0x40
   1fe46:	fa0c f505 	lsl.w	r5, ip, r5
   1fe4a:	ea62 0205 	orn	r2, r2, r5
   1fe4e:	bf1c      	itt	ne
   1fe50:	ea63 0305 	ornne	r3, r3, r5
   1fe54:	4662      	movne	r2, ip
   1fe56:	f04f 0400 	mov.w	r4, #0
   1fe5a:	e7a9      	b.n	1fdb0 <strlen+0x30>

0001fe5c <__register_exitproc>:
   1fe5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fe60:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1fee0 <__register_exitproc+0x84>
   1fe64:	4606      	mov	r6, r0
   1fe66:	f8da 0000 	ldr.w	r0, [sl]
   1fe6a:	4698      	mov	r8, r3
   1fe6c:	460f      	mov	r7, r1
   1fe6e:	4691      	mov	r9, r2
   1fe70:	f7ff ff7a 	bl	1fd68 <__retarget_lock_acquire_recursive>
   1fe74:	4b18      	ldr	r3, [pc, #96]	; (1fed8 <__register_exitproc+0x7c>)
   1fe76:	681c      	ldr	r4, [r3, #0]
   1fe78:	b324      	cbz	r4, 1fec4 <__register_exitproc+0x68>
   1fe7a:	6865      	ldr	r5, [r4, #4]
   1fe7c:	2d1f      	cmp	r5, #31
   1fe7e:	dc24      	bgt.n	1feca <__register_exitproc+0x6e>
   1fe80:	b95e      	cbnz	r6, 1fe9a <__register_exitproc+0x3e>
   1fe82:	1c6b      	adds	r3, r5, #1
   1fe84:	3502      	adds	r5, #2
   1fe86:	f8da 0000 	ldr.w	r0, [sl]
   1fe8a:	6063      	str	r3, [r4, #4]
   1fe8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   1fe90:	f7ff ff6c 	bl	1fd6c <__retarget_lock_release_recursive>
   1fe94:	2000      	movs	r0, #0
   1fe96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fe9a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1fe9e:	2301      	movs	r3, #1
   1fea0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1fea4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   1fea8:	40ab      	lsls	r3, r5
   1feaa:	431a      	orrs	r2, r3
   1feac:	2e02      	cmp	r6, #2
   1feae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   1feb2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1feb6:	d1e4      	bne.n	1fe82 <__register_exitproc+0x26>
   1feb8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1febc:	431a      	orrs	r2, r3
   1febe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   1fec2:	e7de      	b.n	1fe82 <__register_exitproc+0x26>
   1fec4:	4c05      	ldr	r4, [pc, #20]	; (1fedc <__register_exitproc+0x80>)
   1fec6:	601c      	str	r4, [r3, #0]
   1fec8:	e7d7      	b.n	1fe7a <__register_exitproc+0x1e>
   1feca:	f8da 0000 	ldr.w	r0, [sl]
   1fece:	f7ff ff4d 	bl	1fd6c <__retarget_lock_release_recursive>
   1fed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fed6:	e7de      	b.n	1fe96 <__register_exitproc+0x3a>
   1fed8:	2000581c 	.word	0x2000581c
   1fedc:	20005820 	.word	0x20005820
   1fee0:	20003e34 	.word	0x20003e34

0001fee4 <_malloc_trim_r>:
   1fee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fee6:	4f24      	ldr	r7, [pc, #144]	; (1ff78 <_malloc_trim_r+0x94>)
   1fee8:	460c      	mov	r4, r1
   1feea:	4606      	mov	r6, r0
   1feec:	f7fd fe0e 	bl	1db0c <__malloc_lock>
   1fef0:	68bb      	ldr	r3, [r7, #8]
   1fef2:	685d      	ldr	r5, [r3, #4]
   1fef4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   1fef8:	310f      	adds	r1, #15
   1fefa:	f025 0503 	bic.w	r5, r5, #3
   1fefe:	194b      	adds	r3, r1, r5
   1ff00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1ff04:	f023 030f 	bic.w	r3, r3, #15
   1ff08:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1ff0c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1ff10:	db07      	blt.n	1ff22 <_malloc_trim_r+0x3e>
   1ff12:	2100      	movs	r1, #0
   1ff14:	4630      	mov	r0, r6
   1ff16:	f7ff fd05 	bl	1f924 <_sbrk_r>
   1ff1a:	68bb      	ldr	r3, [r7, #8]
   1ff1c:	442b      	add	r3, r5
   1ff1e:	4298      	cmp	r0, r3
   1ff20:	d004      	beq.n	1ff2c <_malloc_trim_r+0x48>
   1ff22:	4630      	mov	r0, r6
   1ff24:	f7fd fdf8 	bl	1db18 <__malloc_unlock>
   1ff28:	2000      	movs	r0, #0
   1ff2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff2c:	4261      	negs	r1, r4
   1ff2e:	4630      	mov	r0, r6
   1ff30:	f7ff fcf8 	bl	1f924 <_sbrk_r>
   1ff34:	3001      	adds	r0, #1
   1ff36:	d00d      	beq.n	1ff54 <_malloc_trim_r+0x70>
   1ff38:	4a10      	ldr	r2, [pc, #64]	; (1ff7c <_malloc_trim_r+0x98>)
   1ff3a:	68bb      	ldr	r3, [r7, #8]
   1ff3c:	1b2d      	subs	r5, r5, r4
   1ff3e:	f045 0501 	orr.w	r5, r5, #1
   1ff42:	605d      	str	r5, [r3, #4]
   1ff44:	6813      	ldr	r3, [r2, #0]
   1ff46:	4630      	mov	r0, r6
   1ff48:	1b1b      	subs	r3, r3, r4
   1ff4a:	6013      	str	r3, [r2, #0]
   1ff4c:	f7fd fde4 	bl	1db18 <__malloc_unlock>
   1ff50:	2001      	movs	r0, #1
   1ff52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ff54:	2100      	movs	r1, #0
   1ff56:	4630      	mov	r0, r6
   1ff58:	f7ff fce4 	bl	1f924 <_sbrk_r>
   1ff5c:	68ba      	ldr	r2, [r7, #8]
   1ff5e:	1a83      	subs	r3, r0, r2
   1ff60:	2b0f      	cmp	r3, #15
   1ff62:	ddde      	ble.n	1ff22 <_malloc_trim_r+0x3e>
   1ff64:	f043 0301 	orr.w	r3, r3, #1
   1ff68:	6053      	str	r3, [r2, #4]
   1ff6a:	4b05      	ldr	r3, [pc, #20]	; (1ff80 <_malloc_trim_r+0x9c>)
   1ff6c:	4903      	ldr	r1, [pc, #12]	; (1ff7c <_malloc_trim_r+0x98>)
   1ff6e:	681b      	ldr	r3, [r3, #0]
   1ff70:	1ac0      	subs	r0, r0, r3
   1ff72:	6008      	str	r0, [r1, #0]
   1ff74:	e7d5      	b.n	1ff22 <_malloc_trim_r+0x3e>
   1ff76:	bf00      	nop
   1ff78:	20003fac 	.word	0x20003fac
   1ff7c:	200059bc 	.word	0x200059bc
   1ff80:	200043b4 	.word	0x200043b4

0001ff84 <_free_r>:
   1ff84:	2900      	cmp	r1, #0
   1ff86:	d061      	beq.n	2004c <_free_r+0xc8>
   1ff88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff8a:	460c      	mov	r4, r1
   1ff8c:	4606      	mov	r6, r0
   1ff8e:	f7fd fdbd 	bl	1db0c <__malloc_lock>
   1ff92:	f854 2c04 	ldr.w	r2, [r4, #-4]
   1ff96:	4f7b      	ldr	r7, [pc, #492]	; (20184 <_free_r+0x200>)
   1ff98:	f1a4 0508 	sub.w	r5, r4, #8
   1ff9c:	f022 0101 	bic.w	r1, r2, #1
   1ffa0:	eb05 0c01 	add.w	ip, r5, r1
   1ffa4:	68b8      	ldr	r0, [r7, #8]
   1ffa6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1ffaa:	4560      	cmp	r0, ip
   1ffac:	f023 0303 	bic.w	r3, r3, #3
   1ffb0:	f000 808b 	beq.w	200ca <_free_r+0x146>
   1ffb4:	07d2      	lsls	r2, r2, #31
   1ffb6:	f8cc 3004 	str.w	r3, [ip, #4]
   1ffba:	d432      	bmi.n	20022 <_free_r+0x9e>
   1ffbc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   1ffc0:	1aad      	subs	r5, r5, r2
   1ffc2:	4411      	add	r1, r2
   1ffc4:	68aa      	ldr	r2, [r5, #8]
   1ffc6:	f107 0008 	add.w	r0, r7, #8
   1ffca:	4282      	cmp	r2, r0
   1ffcc:	d06a      	beq.n	200a4 <_free_r+0x120>
   1ffce:	eb0c 0403 	add.w	r4, ip, r3
   1ffd2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   1ffd6:	68ec      	ldr	r4, [r5, #12]
   1ffd8:	60d4      	str	r4, [r2, #12]
   1ffda:	f01e 0f01 	tst.w	lr, #1
   1ffde:	60a2      	str	r2, [r4, #8]
   1ffe0:	f000 8097 	beq.w	20112 <_free_r+0x18e>
   1ffe4:	f041 0301 	orr.w	r3, r1, #1
   1ffe8:	606b      	str	r3, [r5, #4]
   1ffea:	f8cc 1000 	str.w	r1, [ip]
   1ffee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1fff2:	d235      	bcs.n	20060 <_free_r+0xdc>
   1fff4:	6878      	ldr	r0, [r7, #4]
   1fff6:	08cb      	lsrs	r3, r1, #3
   1fff8:	2201      	movs	r2, #1
   1fffa:	0949      	lsrs	r1, r1, #5
   1fffc:	3301      	adds	r3, #1
   1fffe:	408a      	lsls	r2, r1
   20000:	4302      	orrs	r2, r0
   20002:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   20006:	607a      	str	r2, [r7, #4]
   20008:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2000c:	3a08      	subs	r2, #8
   2000e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   20012:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   20016:	60cd      	str	r5, [r1, #12]
   20018:	4630      	mov	r0, r6
   2001a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2001e:	f7fd bd7b 	b.w	1db18 <__malloc_unlock>
   20022:	eb0c 0203 	add.w	r2, ip, r3
   20026:	6852      	ldr	r2, [r2, #4]
   20028:	07d0      	lsls	r0, r2, #31
   2002a:	d410      	bmi.n	2004e <_free_r+0xca>
   2002c:	4419      	add	r1, r3
   2002e:	f107 0008 	add.w	r0, r7, #8
   20032:	f8dc 3008 	ldr.w	r3, [ip, #8]
   20036:	4283      	cmp	r3, r0
   20038:	d073      	beq.n	20122 <_free_r+0x19e>
   2003a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2003e:	60da      	str	r2, [r3, #12]
   20040:	6093      	str	r3, [r2, #8]
   20042:	f041 0301 	orr.w	r3, r1, #1
   20046:	606b      	str	r3, [r5, #4]
   20048:	5069      	str	r1, [r5, r1]
   2004a:	e7d0      	b.n	1ffee <_free_r+0x6a>
   2004c:	4770      	bx	lr
   2004e:	f041 0301 	orr.w	r3, r1, #1
   20052:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   20056:	f844 3c04 	str.w	r3, [r4, #-4]
   2005a:	f8cc 1000 	str.w	r1, [ip]
   2005e:	d3c9      	bcc.n	1fff4 <_free_r+0x70>
   20060:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   20064:	ea4f 2351 	mov.w	r3, r1, lsr #9
   20068:	d248      	bcs.n	200fc <_free_r+0x178>
   2006a:	098b      	lsrs	r3, r1, #6
   2006c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   20070:	f103 0238 	add.w	r2, r3, #56	; 0x38
   20074:	00c3      	lsls	r3, r0, #3
   20076:	18f8      	adds	r0, r7, r3
   20078:	58fb      	ldr	r3, [r7, r3]
   2007a:	3808      	subs	r0, #8
   2007c:	4298      	cmp	r0, r3
   2007e:	d059      	beq.n	20134 <_free_r+0x1b0>
   20080:	685a      	ldr	r2, [r3, #4]
   20082:	f022 0203 	bic.w	r2, r2, #3
   20086:	428a      	cmp	r2, r1
   20088:	d902      	bls.n	20090 <_free_r+0x10c>
   2008a:	689b      	ldr	r3, [r3, #8]
   2008c:	4298      	cmp	r0, r3
   2008e:	d1f7      	bne.n	20080 <_free_r+0xfc>
   20090:	68d8      	ldr	r0, [r3, #12]
   20092:	e9c5 3002 	strd	r3, r0, [r5, #8]
   20096:	6085      	str	r5, [r0, #8]
   20098:	60dd      	str	r5, [r3, #12]
   2009a:	4630      	mov	r0, r6
   2009c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   200a0:	f7fd bd3a 	b.w	1db18 <__malloc_unlock>
   200a4:	eb0c 0203 	add.w	r2, ip, r3
   200a8:	6852      	ldr	r2, [r2, #4]
   200aa:	07d2      	lsls	r2, r2, #31
   200ac:	d463      	bmi.n	20176 <_free_r+0x1f2>
   200ae:	440b      	add	r3, r1
   200b0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   200b4:	60ca      	str	r2, [r1, #12]
   200b6:	6091      	str	r1, [r2, #8]
   200b8:	f043 0201 	orr.w	r2, r3, #1
   200bc:	606a      	str	r2, [r5, #4]
   200be:	4630      	mov	r0, r6
   200c0:	50eb      	str	r3, [r5, r3]
   200c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   200c6:	f7fd bd27 	b.w	1db18 <__malloc_unlock>
   200ca:	440b      	add	r3, r1
   200cc:	07d1      	lsls	r1, r2, #31
   200ce:	d407      	bmi.n	200e0 <_free_r+0x15c>
   200d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   200d4:	1aad      	subs	r5, r5, r2
   200d6:	4413      	add	r3, r2
   200d8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   200dc:	60ca      	str	r2, [r1, #12]
   200de:	6091      	str	r1, [r2, #8]
   200e0:	f043 0201 	orr.w	r2, r3, #1
   200e4:	606a      	str	r2, [r5, #4]
   200e6:	4a28      	ldr	r2, [pc, #160]	; (20188 <_free_r+0x204>)
   200e8:	60bd      	str	r5, [r7, #8]
   200ea:	6812      	ldr	r2, [r2, #0]
   200ec:	429a      	cmp	r2, r3
   200ee:	d893      	bhi.n	20018 <_free_r+0x94>
   200f0:	4b26      	ldr	r3, [pc, #152]	; (2018c <_free_r+0x208>)
   200f2:	4630      	mov	r0, r6
   200f4:	6819      	ldr	r1, [r3, #0]
   200f6:	f7ff fef5 	bl	1fee4 <_malloc_trim_r>
   200fa:	e78d      	b.n	20018 <_free_r+0x94>
   200fc:	2b14      	cmp	r3, #20
   200fe:	d90a      	bls.n	20116 <_free_r+0x192>
   20100:	2b54      	cmp	r3, #84	; 0x54
   20102:	d81f      	bhi.n	20144 <_free_r+0x1c0>
   20104:	0b0b      	lsrs	r3, r1, #12
   20106:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2010a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   2010e:	00c3      	lsls	r3, r0, #3
   20110:	e7b1      	b.n	20076 <_free_r+0xf2>
   20112:	4419      	add	r1, r3
   20114:	e78d      	b.n	20032 <_free_r+0xae>
   20116:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2011a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   2011e:	00c3      	lsls	r3, r0, #3
   20120:	e7a9      	b.n	20076 <_free_r+0xf2>
   20122:	f041 0301 	orr.w	r3, r1, #1
   20126:	e9c7 5504 	strd	r5, r5, [r7, #16]
   2012a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   2012e:	606b      	str	r3, [r5, #4]
   20130:	5069      	str	r1, [r5, r1]
   20132:	e771      	b.n	20018 <_free_r+0x94>
   20134:	6879      	ldr	r1, [r7, #4]
   20136:	1092      	asrs	r2, r2, #2
   20138:	2401      	movs	r4, #1
   2013a:	fa04 f202 	lsl.w	r2, r4, r2
   2013e:	430a      	orrs	r2, r1
   20140:	607a      	str	r2, [r7, #4]
   20142:	e7a6      	b.n	20092 <_free_r+0x10e>
   20144:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   20148:	d806      	bhi.n	20158 <_free_r+0x1d4>
   2014a:	0bcb      	lsrs	r3, r1, #15
   2014c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   20150:	f103 0277 	add.w	r2, r3, #119	; 0x77
   20154:	00c3      	lsls	r3, r0, #3
   20156:	e78e      	b.n	20076 <_free_r+0xf2>
   20158:	f240 5254 	movw	r2, #1364	; 0x554
   2015c:	4293      	cmp	r3, r2
   2015e:	d806      	bhi.n	2016e <_free_r+0x1ea>
   20160:	0c8b      	lsrs	r3, r1, #18
   20162:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   20166:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   2016a:	00c3      	lsls	r3, r0, #3
   2016c:	e783      	b.n	20076 <_free_r+0xf2>
   2016e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   20172:	227e      	movs	r2, #126	; 0x7e
   20174:	e77f      	b.n	20076 <_free_r+0xf2>
   20176:	f041 0301 	orr.w	r3, r1, #1
   2017a:	606b      	str	r3, [r5, #4]
   2017c:	f8cc 1000 	str.w	r1, [ip]
   20180:	e74a      	b.n	20018 <_free_r+0x94>
   20182:	bf00      	nop
   20184:	20003fac 	.word	0x20003fac
   20188:	200043b8 	.word	0x200043b8
   2018c:	200059ec 	.word	0x200059ec

00020190 <rshift>:
   20190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20194:	6904      	ldr	r4, [r0, #16]
   20196:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   2019a:	dd2f      	ble.n	201fc <rshift+0x6c>
   2019c:	f100 0e14 	add.w	lr, r0, #20
   201a0:	114e      	asrs	r6, r1, #5
   201a2:	f011 0c1f 	ands.w	ip, r1, #31
   201a6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   201aa:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   201ae:	d02b      	beq.n	20208 <rshift+0x78>
   201b0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   201b4:	3304      	adds	r3, #4
   201b6:	429d      	cmp	r5, r3
   201b8:	fa21 f10c 	lsr.w	r1, r1, ip
   201bc:	f1cc 0820 	rsb	r8, ip, #32
   201c0:	d918      	bls.n	201f4 <rshift+0x64>
   201c2:	4677      	mov	r7, lr
   201c4:	681a      	ldr	r2, [r3, #0]
   201c6:	fa02 f208 	lsl.w	r2, r2, r8
   201ca:	430a      	orrs	r2, r1
   201cc:	f847 2b04 	str.w	r2, [r7], #4
   201d0:	f853 1b04 	ldr.w	r1, [r3], #4
   201d4:	429d      	cmp	r5, r3
   201d6:	fa21 f10c 	lsr.w	r1, r1, ip
   201da:	d8f3      	bhi.n	201c4 <rshift+0x34>
   201dc:	1ba3      	subs	r3, r4, r6
   201de:	009b      	lsls	r3, r3, #2
   201e0:	3b05      	subs	r3, #5
   201e2:	089b      	lsrs	r3, r3, #2
   201e4:	3301      	adds	r3, #1
   201e6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   201ea:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   201ee:	b1c9      	cbz	r1, 20224 <rshift+0x94>
   201f0:	3404      	adds	r4, #4
   201f2:	e017      	b.n	20224 <rshift+0x94>
   201f4:	6141      	str	r1, [r0, #20]
   201f6:	4674      	mov	r4, lr
   201f8:	2900      	cmp	r1, #0
   201fa:	d1f9      	bne.n	201f0 <rshift+0x60>
   201fc:	2300      	movs	r3, #0
   201fe:	6103      	str	r3, [r0, #16]
   20200:	2300      	movs	r3, #0
   20202:	6143      	str	r3, [r0, #20]
   20204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20208:	429d      	cmp	r5, r3
   2020a:	bf88      	it	hi
   2020c:	f100 0210 	addhi.w	r2, r0, #16
   20210:	d9f4      	bls.n	201fc <rshift+0x6c>
   20212:	f853 1b04 	ldr.w	r1, [r3], #4
   20216:	f842 1f04 	str.w	r1, [r2, #4]!
   2021a:	429d      	cmp	r5, r3
   2021c:	d8f9      	bhi.n	20212 <rshift+0x82>
   2021e:	1ba4      	subs	r4, r4, r6
   20220:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   20224:	eba4 030e 	sub.w	r3, r4, lr
   20228:	109b      	asrs	r3, r3, #2
   2022a:	4574      	cmp	r4, lr
   2022c:	6103      	str	r3, [r0, #16]
   2022e:	d0e7      	beq.n	20200 <rshift+0x70>
   20230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020234 <__gethex>:
   20234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20238:	ed2d 8b02 	vpush	{d8}
   2023c:	680c      	ldr	r4, [r1, #0]
   2023e:	468b      	mov	fp, r1
   20240:	78a1      	ldrb	r1, [r4, #2]
   20242:	b085      	sub	sp, #20
   20244:	2930      	cmp	r1, #48	; 0x30
   20246:	ee08 0a10 	vmov	s16, r0
   2024a:	4692      	mov	sl, r2
   2024c:	9302      	str	r3, [sp, #8]
   2024e:	f040 81ce 	bne.w	205ee <__gethex+0x3ba>
   20252:	f06f 0001 	mvn.w	r0, #1
   20256:	1b00      	subs	r0, r0, r4
   20258:	1ce2      	adds	r2, r4, #3
   2025a:	1883      	adds	r3, r0, r2
   2025c:	4614      	mov	r4, r2
   2025e:	f812 1b01 	ldrb.w	r1, [r2], #1
   20262:	2930      	cmp	r1, #48	; 0x30
   20264:	d0f9      	beq.n	2025a <__gethex+0x26>
   20266:	f8df 8300 	ldr.w	r8, [pc, #768]	; 20568 <__gethex+0x334>
   2026a:	f818 2001 	ldrb.w	r2, [r8, r1]
   2026e:	2a00      	cmp	r2, #0
   20270:	f000 80e5 	beq.w	2043e <__gethex+0x20a>
   20274:	7822      	ldrb	r2, [r4, #0]
   20276:	2700      	movs	r7, #0
   20278:	f818 2002 	ldrb.w	r2, [r8, r2]
   2027c:	463d      	mov	r5, r7
   2027e:	4626      	mov	r6, r4
   20280:	b12a      	cbz	r2, 2028e <__gethex+0x5a>
   20282:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   20286:	f818 2002 	ldrb.w	r2, [r8, r2]
   2028a:	2a00      	cmp	r2, #0
   2028c:	d1f9      	bne.n	20282 <__gethex+0x4e>
   2028e:	49b5      	ldr	r1, [pc, #724]	; (20564 <__gethex+0x330>)
   20290:	9301      	str	r3, [sp, #4]
   20292:	2201      	movs	r2, #1
   20294:	4630      	mov	r0, r6
   20296:	f7ff f883 	bl	1f3a0 <strncmp>
   2029a:	9b01      	ldr	r3, [sp, #4]
   2029c:	4681      	mov	r9, r0
   2029e:	2800      	cmp	r0, #0
   202a0:	d04d      	beq.n	2033e <__gethex+0x10a>
   202a2:	2d00      	cmp	r5, #0
   202a4:	d14e      	bne.n	20344 <__gethex+0x110>
   202a6:	7832      	ldrb	r2, [r6, #0]
   202a8:	46a9      	mov	r9, r5
   202aa:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   202ae:	2a50      	cmp	r2, #80	; 0x50
   202b0:	4635      	mov	r5, r6
   202b2:	d050      	beq.n	20356 <__gethex+0x122>
   202b4:	f8cb 6000 	str.w	r6, [fp]
   202b8:	2f00      	cmp	r7, #0
   202ba:	d169      	bne.n	20390 <__gethex+0x15c>
   202bc:	1b2b      	subs	r3, r5, r4
   202be:	3b01      	subs	r3, #1
   202c0:	2b07      	cmp	r3, #7
   202c2:	4639      	mov	r1, r7
   202c4:	dd04      	ble.n	202d0 <__gethex+0x9c>
   202c6:	105b      	asrs	r3, r3, #1
   202c8:	2b07      	cmp	r3, #7
   202ca:	f101 0101 	add.w	r1, r1, #1
   202ce:	dcfa      	bgt.n	202c6 <__gethex+0x92>
   202d0:	ee18 0a10 	vmov	r0, s16
   202d4:	f002 f926 	bl	22524 <_Balloc>
   202d8:	4683      	mov	fp, r0
   202da:	2800      	cmp	r0, #0
   202dc:	f000 8266 	beq.w	207ac <__gethex+0x578>
   202e0:	f100 0614 	add.w	r6, r0, #20
   202e4:	42ac      	cmp	r4, r5
   202e6:	9601      	str	r6, [sp, #4]
   202e8:	f080 81d2 	bcs.w	20690 <__gethex+0x45c>
   202ec:	2700      	movs	r7, #0
   202ee:	f8cd 900c 	str.w	r9, [sp, #12]
   202f2:	499c      	ldr	r1, [pc, #624]	; (20564 <__gethex+0x330>)
   202f4:	46a1      	mov	r9, r4
   202f6:	463c      	mov	r4, r7
   202f8:	e00c      	b.n	20314 <__gethex+0xe0>
   202fa:	2f20      	cmp	r7, #32
   202fc:	d019      	beq.n	20332 <__gethex+0xfe>
   202fe:	4638      	mov	r0, r7
   20300:	3704      	adds	r7, #4
   20302:	782a      	ldrb	r2, [r5, #0]
   20304:	f818 2002 	ldrb.w	r2, [r8, r2]
   20308:	f002 020f 	and.w	r2, r2, #15
   2030c:	4082      	lsls	r2, r0
   2030e:	4314      	orrs	r4, r2
   20310:	454d      	cmp	r5, r9
   20312:	d047      	beq.n	203a4 <__gethex+0x170>
   20314:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   20318:	2a2e      	cmp	r2, #46	; 0x2e
   2031a:	d1ee      	bne.n	202fa <__gethex+0xc6>
   2031c:	454d      	cmp	r5, r9
   2031e:	d3ec      	bcc.n	202fa <__gethex+0xc6>
   20320:	2201      	movs	r2, #1
   20322:	4628      	mov	r0, r5
   20324:	f7ff f83c 	bl	1f3a0 <strncmp>
   20328:	498e      	ldr	r1, [pc, #568]	; (20564 <__gethex+0x330>)
   2032a:	2800      	cmp	r0, #0
   2032c:	d0f0      	beq.n	20310 <__gethex+0xdc>
   2032e:	2f20      	cmp	r7, #32
   20330:	d1e5      	bne.n	202fe <__gethex+0xca>
   20332:	2000      	movs	r0, #0
   20334:	f846 4b04 	str.w	r4, [r6], #4
   20338:	2704      	movs	r7, #4
   2033a:	4604      	mov	r4, r0
   2033c:	e7e1      	b.n	20302 <__gethex+0xce>
   2033e:	2d00      	cmp	r5, #0
   20340:	f000 8142 	beq.w	205c8 <__gethex+0x394>
   20344:	7832      	ldrb	r2, [r6, #0]
   20346:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2034a:	1bad      	subs	r5, r5, r6
   2034c:	2a50      	cmp	r2, #80	; 0x50
   2034e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   20352:	4635      	mov	r5, r6
   20354:	d1ae      	bne.n	202b4 <__gethex+0x80>
   20356:	786a      	ldrb	r2, [r5, #1]
   20358:	2a2b      	cmp	r2, #43	; 0x2b
   2035a:	f000 8125 	beq.w	205a8 <__gethex+0x374>
   2035e:	2a2d      	cmp	r2, #45	; 0x2d
   20360:	f000 80a5 	beq.w	204ae <__gethex+0x27a>
   20364:	1c6e      	adds	r6, r5, #1
   20366:	2000      	movs	r0, #0
   20368:	f818 1002 	ldrb.w	r1, [r8, r2]
   2036c:	1e4a      	subs	r2, r1, #1
   2036e:	2a18      	cmp	r2, #24
   20370:	f200 809b 	bhi.w	204aa <__gethex+0x276>
   20374:	7872      	ldrb	r2, [r6, #1]
   20376:	f818 2002 	ldrb.w	r2, [r8, r2]
   2037a:	3910      	subs	r1, #16
   2037c:	3601      	adds	r6, #1
   2037e:	2a00      	cmp	r2, #0
   20380:	d15a      	bne.n	20438 <__gethex+0x204>
   20382:	b100      	cbz	r0, 20386 <__gethex+0x152>
   20384:	4249      	negs	r1, r1
   20386:	4489      	add	r9, r1
   20388:	f8cb 6000 	str.w	r6, [fp]
   2038c:	2f00      	cmp	r7, #0
   2038e:	d095      	beq.n	202bc <__gethex+0x88>
   20390:	2b00      	cmp	r3, #0
   20392:	bf14      	ite	ne
   20394:	2500      	movne	r5, #0
   20396:	2506      	moveq	r5, #6
   20398:	4628      	mov	r0, r5
   2039a:	b005      	add	sp, #20
   2039c:	ecbd 8b02 	vpop	{d8}
   203a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
   203a8:	4623      	mov	r3, r4
   203aa:	f846 3b04 	str.w	r3, [r6], #4
   203ae:	4618      	mov	r0, r3
   203b0:	9b01      	ldr	r3, [sp, #4]
   203b2:	1af6      	subs	r6, r6, r3
   203b4:	10b6      	asrs	r6, r6, #2
   203b6:	f8cb 6010 	str.w	r6, [fp, #16]
   203ba:	f002 f98d 	bl	226d8 <__hi0bits>
   203be:	0176      	lsls	r6, r6, #5
   203c0:	f8da 4000 	ldr.w	r4, [sl]
   203c4:	1a30      	subs	r0, r6, r0
   203c6:	42a0      	cmp	r0, r4
   203c8:	dc75      	bgt.n	204b6 <__gethex+0x282>
   203ca:	f2c0 80ef 	blt.w	205ac <__gethex+0x378>
   203ce:	2700      	movs	r7, #0
   203d0:	f8da 3008 	ldr.w	r3, [sl, #8]
   203d4:	454b      	cmp	r3, r9
   203d6:	f2c0 8151 	blt.w	2067c <__gethex+0x448>
   203da:	f8da 3004 	ldr.w	r3, [sl, #4]
   203de:	454b      	cmp	r3, r9
   203e0:	dd4a      	ble.n	20478 <__gethex+0x244>
   203e2:	eba3 0909 	sub.w	r9, r3, r9
   203e6:	454c      	cmp	r4, r9
   203e8:	f300 8082 	bgt.w	204f0 <__gethex+0x2bc>
   203ec:	f8da 200c 	ldr.w	r2, [sl, #12]
   203f0:	2a02      	cmp	r2, #2
   203f2:	f000 8165 	beq.w	206c0 <__gethex+0x48c>
   203f6:	2a03      	cmp	r2, #3
   203f8:	f000 8181 	beq.w	206fe <__gethex+0x4ca>
   203fc:	2a01      	cmp	r2, #1
   203fe:	f000 816f 	beq.w	206e0 <__gethex+0x4ac>
   20402:	ee18 0a10 	vmov	r0, s16
   20406:	4659      	mov	r1, fp
   20408:	f002 f8b2 	bl	22570 <_Bfree>
   2040c:	2550      	movs	r5, #80	; 0x50
   2040e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20410:	2300      	movs	r3, #0
   20412:	4628      	mov	r0, r5
   20414:	6013      	str	r3, [r2, #0]
   20416:	b005      	add	sp, #20
   20418:	ecbd 8b02 	vpop	{d8}
   2041c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20420:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   20424:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   20428:	f1a2 0110 	sub.w	r1, r2, #16
   2042c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   20430:	f818 2002 	ldrb.w	r2, [r8, r2]
   20434:	2a00      	cmp	r2, #0
   20436:	d0a4      	beq.n	20382 <__gethex+0x14e>
   20438:	2a19      	cmp	r2, #25
   2043a:	ddf1      	ble.n	20420 <__gethex+0x1ec>
   2043c:	e7a1      	b.n	20382 <__gethex+0x14e>
   2043e:	4949      	ldr	r1, [pc, #292]	; (20564 <__gethex+0x330>)
   20440:	9301      	str	r3, [sp, #4]
   20442:	2201      	movs	r2, #1
   20444:	4620      	mov	r0, r4
   20446:	f7fe ffab 	bl	1f3a0 <strncmp>
   2044a:	9b01      	ldr	r3, [sp, #4]
   2044c:	2800      	cmp	r0, #0
   2044e:	d16d      	bne.n	2052c <__gethex+0x2f8>
   20450:	7861      	ldrb	r1, [r4, #1]
   20452:	f818 2001 	ldrb.w	r2, [r8, r1]
   20456:	1c65      	adds	r5, r4, #1
   20458:	2a00      	cmp	r2, #0
   2045a:	d069      	beq.n	20530 <__gethex+0x2fc>
   2045c:	2930      	cmp	r1, #48	; 0x30
   2045e:	462c      	mov	r4, r5
   20460:	d105      	bne.n	2046e <__gethex+0x23a>
   20462:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   20466:	2b30      	cmp	r3, #48	; 0x30
   20468:	d0fb      	beq.n	20462 <__gethex+0x22e>
   2046a:	f818 2003 	ldrb.w	r2, [r8, r3]
   2046e:	fab2 f782 	clz	r7, r2
   20472:	097f      	lsrs	r7, r7, #5
   20474:	2301      	movs	r3, #1
   20476:	e702      	b.n	2027e <__gethex+0x4a>
   20478:	2501      	movs	r5, #1
   2047a:	b157      	cbz	r7, 20492 <__gethex+0x25e>
   2047c:	f8da 300c 	ldr.w	r3, [sl, #12]
   20480:	2b02      	cmp	r3, #2
   20482:	d05d      	beq.n	20540 <__gethex+0x30c>
   20484:	2b03      	cmp	r3, #3
   20486:	d05f      	beq.n	20548 <__gethex+0x314>
   20488:	2b01      	cmp	r3, #1
   2048a:	f000 8084 	beq.w	20596 <__gethex+0x362>
   2048e:	f045 0510 	orr.w	r5, r5, #16
   20492:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20494:	f8c3 b000 	str.w	fp, [r3]
   20498:	9b02      	ldr	r3, [sp, #8]
   2049a:	4628      	mov	r0, r5
   2049c:	f8c3 9000 	str.w	r9, [r3]
   204a0:	b005      	add	sp, #20
   204a2:	ecbd 8b02 	vpop	{d8}
   204a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204aa:	462e      	mov	r6, r5
   204ac:	e702      	b.n	202b4 <__gethex+0x80>
   204ae:	2001      	movs	r0, #1
   204b0:	78aa      	ldrb	r2, [r5, #2]
   204b2:	1cae      	adds	r6, r5, #2
   204b4:	e758      	b.n	20368 <__gethex+0x134>
   204b6:	1b06      	subs	r6, r0, r4
   204b8:	4631      	mov	r1, r6
   204ba:	4658      	mov	r0, fp
   204bc:	f002 fd3a 	bl	22f34 <__any_on>
   204c0:	4607      	mov	r7, r0
   204c2:	b178      	cbz	r0, 204e4 <__gethex+0x2b0>
   204c4:	1e72      	subs	r2, r6, #1
   204c6:	1153      	asrs	r3, r2, #5
   204c8:	9901      	ldr	r1, [sp, #4]
   204ca:	2701      	movs	r7, #1
   204cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   204d0:	f002 031f 	and.w	r3, r2, #31
   204d4:	fa07 f303 	lsl.w	r3, r7, r3
   204d8:	420b      	tst	r3, r1
   204da:	d003      	beq.n	204e4 <__gethex+0x2b0>
   204dc:	42ba      	cmp	r2, r7
   204de:	f300 80e2 	bgt.w	206a6 <__gethex+0x472>
   204e2:	2702      	movs	r7, #2
   204e4:	4631      	mov	r1, r6
   204e6:	4658      	mov	r0, fp
   204e8:	44b1      	add	r9, r6
   204ea:	f7ff fe51 	bl	20190 <rshift>
   204ee:	e76f      	b.n	203d0 <__gethex+0x19c>
   204f0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
   204f4:	2f00      	cmp	r7, #0
   204f6:	f040 80ce 	bne.w	20696 <__gethex+0x462>
   204fa:	2d00      	cmp	r5, #0
   204fc:	f040 80cd 	bne.w	2069a <__gethex+0x466>
   20500:	116b      	asrs	r3, r5, #5
   20502:	9a01      	ldr	r2, [sp, #4]
   20504:	f005 051f 	and.w	r5, r5, #31
   20508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2050c:	2301      	movs	r3, #1
   2050e:	40ab      	lsls	r3, r5
   20510:	4213      	tst	r3, r2
   20512:	4649      	mov	r1, r9
   20514:	4658      	mov	r0, fp
   20516:	bf18      	it	ne
   20518:	f047 0702 	orrne.w	r7, r7, #2
   2051c:	eba4 0409 	sub.w	r4, r4, r9
   20520:	f7ff fe36 	bl	20190 <rshift>
   20524:	2502      	movs	r5, #2
   20526:	f8da 9004 	ldr.w	r9, [sl, #4]
   2052a:	e7a6      	b.n	2047a <__gethex+0x246>
   2052c:	7821      	ldrb	r1, [r4, #0]
   2052e:	4625      	mov	r5, r4
   20530:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   20534:	2950      	cmp	r1, #80	; 0x50
   20536:	f000 80bf 	beq.w	206b8 <__gethex+0x484>
   2053a:	f8cb 5000 	str.w	r5, [fp]
   2053e:	e727      	b.n	20390 <__gethex+0x15c>
   20540:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20542:	f1c3 0301 	rsb	r3, r3, #1
   20546:	9311      	str	r3, [sp, #68]	; 0x44
   20548:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2054a:	2b00      	cmp	r3, #0
   2054c:	d09f      	beq.n	2048e <__gethex+0x25a>
   2054e:	f8db 7010 	ldr.w	r7, [fp, #16]
   20552:	f8dd 8004 	ldr.w	r8, [sp, #4]
   20556:	00ba      	lsls	r2, r7, #2
   20558:	4643      	mov	r3, r8
   2055a:	9201      	str	r2, [sp, #4]
   2055c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   20560:	2100      	movs	r1, #0
   20562:	e007      	b.n	20574 <__gethex+0x340>
   20564:	20002b14 	.word	0x20002b14
   20568:	200027d8 	.word	0x200027d8
   2056c:	4298      	cmp	r0, r3
   2056e:	f843 1c04 	str.w	r1, [r3, #-4]
   20572:	d93f      	bls.n	205f4 <__gethex+0x3c0>
   20574:	461e      	mov	r6, r3
   20576:	f853 2b04 	ldr.w	r2, [r3], #4
   2057a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2057e:	d0f5      	beq.n	2056c <__gethex+0x338>
   20580:	3201      	adds	r2, #1
   20582:	2d02      	cmp	r5, #2
   20584:	6032      	str	r2, [r6, #0]
   20586:	f000 80bf 	beq.w	20708 <__gethex+0x4d4>
   2058a:	f014 041f 	ands.w	r4, r4, #31
   2058e:	f040 80e7 	bne.w	20760 <__gethex+0x52c>
   20592:	2521      	movs	r5, #33	; 0x21
   20594:	e77d      	b.n	20492 <__gethex+0x25e>
   20596:	07ba      	lsls	r2, r7, #30
   20598:	f57f af79 	bpl.w	2048e <__gethex+0x25a>
   2059c:	9b01      	ldr	r3, [sp, #4]
   2059e:	681b      	ldr	r3, [r3, #0]
   205a0:	431f      	orrs	r7, r3
   205a2:	07fb      	lsls	r3, r7, #31
   205a4:	d4d3      	bmi.n	2054e <__gethex+0x31a>
   205a6:	e772      	b.n	2048e <__gethex+0x25a>
   205a8:	2000      	movs	r0, #0
   205aa:	e781      	b.n	204b0 <__gethex+0x27c>
   205ac:	1a22      	subs	r2, r4, r0
   205ae:	4659      	mov	r1, fp
   205b0:	ee18 0a10 	vmov	r0, s16
   205b4:	eba9 0902 	sub.w	r9, r9, r2
   205b8:	f002 fa1a 	bl	229f0 <__lshift>
   205bc:	f100 0314 	add.w	r3, r0, #20
   205c0:	4683      	mov	fp, r0
   205c2:	9301      	str	r3, [sp, #4]
   205c4:	2700      	movs	r7, #0
   205c6:	e703      	b.n	203d0 <__gethex+0x19c>
   205c8:	7872      	ldrb	r2, [r6, #1]
   205ca:	f818 0002 	ldrb.w	r0, [r8, r2]
   205ce:	1c71      	adds	r1, r6, #1
   205d0:	2800      	cmp	r0, #0
   205d2:	f000 80a0 	beq.w	20716 <__gethex+0x4e2>
   205d6:	460d      	mov	r5, r1
   205d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   205dc:	f818 0002 	ldrb.w	r0, [r8, r2]
   205e0:	2800      	cmp	r0, #0
   205e2:	d1f8      	bne.n	205d6 <__gethex+0x3a2>
   205e4:	1b75      	subs	r5, r6, r5
   205e6:	ea4f 0985 	mov.w	r9, r5, lsl #2
   205ea:	460e      	mov	r6, r1
   205ec:	e65d      	b.n	202aa <__gethex+0x76>
   205ee:	3402      	adds	r4, #2
   205f0:	2300      	movs	r3, #0
   205f2:	e638      	b.n	20266 <__gethex+0x32>
   205f4:	f8db 3008 	ldr.w	r3, [fp, #8]
   205f8:	429f      	cmp	r7, r3
   205fa:	f280 808e 	bge.w	2071a <__gethex+0x4e6>
   205fe:	463b      	mov	r3, r7
   20600:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   20604:	2101      	movs	r1, #1
   20606:	3301      	adds	r3, #1
   20608:	2d02      	cmp	r5, #2
   2060a:	f8cb 3010 	str.w	r3, [fp, #16]
   2060e:	6151      	str	r1, [r2, #20]
   20610:	d07a      	beq.n	20708 <__gethex+0x4d4>
   20612:	429f      	cmp	r7, r3
   20614:	dab9      	bge.n	2058a <__gethex+0x356>
   20616:	2b00      	cmp	r3, #0
   20618:	f340 809b 	ble.w	20752 <__gethex+0x51e>
   2061c:	f8db 2014 	ldr.w	r2, [fp, #20]
   20620:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   20624:	f10b 0018 	add.w	r0, fp, #24
   20628:	4283      	cmp	r3, r0
   2062a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   2062e:	f240 80b1 	bls.w	20794 <__gethex+0x560>
   20632:	4644      	mov	r4, r8
   20634:	6801      	ldr	r1, [r0, #0]
   20636:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   2063a:	f844 2b04 	str.w	r2, [r4], #4
   2063e:	f850 2b04 	ldr.w	r2, [r0], #4
   20642:	4283      	cmp	r3, r0
   20644:	ea4f 0252 	mov.w	r2, r2, lsr #1
   20648:	d8f4      	bhi.n	20634 <__gethex+0x400>
   2064a:	eba3 030b 	sub.w	r3, r3, fp
   2064e:	3b19      	subs	r3, #25
   20650:	089b      	lsrs	r3, r3, #2
   20652:	3301      	adds	r3, #1
   20654:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   20658:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2065c:	2a00      	cmp	r2, #0
   2065e:	f040 809d 	bne.w	2079c <__gethex+0x568>
   20662:	eba3 0208 	sub.w	r2, r3, r8
   20666:	1092      	asrs	r2, r2, #2
   20668:	4543      	cmp	r3, r8
   2066a:	f8cb 2010 	str.w	r2, [fp, #16]
   2066e:	d073      	beq.n	20758 <__gethex+0x524>
   20670:	f8da 3008 	ldr.w	r3, [sl, #8]
   20674:	f109 0901 	add.w	r9, r9, #1
   20678:	454b      	cmp	r3, r9
   2067a:	da8a      	bge.n	20592 <__gethex+0x35e>
   2067c:	ee18 0a10 	vmov	r0, s16
   20680:	4659      	mov	r1, fp
   20682:	f001 ff75 	bl	22570 <_Bfree>
   20686:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20688:	2300      	movs	r3, #0
   2068a:	6013      	str	r3, [r2, #0]
   2068c:	25a3      	movs	r5, #163	; 0xa3
   2068e:	e683      	b.n	20398 <__gethex+0x164>
   20690:	9e01      	ldr	r6, [sp, #4]
   20692:	2300      	movs	r3, #0
   20694:	e689      	b.n	203aa <__gethex+0x176>
   20696:	2701      	movs	r7, #1
   20698:	e732      	b.n	20500 <__gethex+0x2cc>
   2069a:	4629      	mov	r1, r5
   2069c:	4658      	mov	r0, fp
   2069e:	f002 fc49 	bl	22f34 <__any_on>
   206a2:	4607      	mov	r7, r0
   206a4:	e72c      	b.n	20500 <__gethex+0x2cc>
   206a6:	1eb1      	subs	r1, r6, #2
   206a8:	4658      	mov	r0, fp
   206aa:	f002 fc43 	bl	22f34 <__any_on>
   206ae:	2800      	cmp	r0, #0
   206b0:	f43f af17 	beq.w	204e2 <__gethex+0x2ae>
   206b4:	2703      	movs	r7, #3
   206b6:	e715      	b.n	204e4 <__gethex+0x2b0>
   206b8:	f04f 0900 	mov.w	r9, #0
   206bc:	2701      	movs	r7, #1
   206be:	e64a      	b.n	20356 <__gethex+0x122>
   206c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   206c2:	2a00      	cmp	r2, #0
   206c4:	f47f ae9d 	bne.w	20402 <__gethex+0x1ce>
   206c8:	9902      	ldr	r1, [sp, #8]
   206ca:	600b      	str	r3, [r1, #0]
   206cc:	9b01      	ldr	r3, [sp, #4]
   206ce:	2201      	movs	r2, #1
   206d0:	f8cb 2010 	str.w	r2, [fp, #16]
   206d4:	601a      	str	r2, [r3, #0]
   206d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   206d8:	2562      	movs	r5, #98	; 0x62
   206da:	f8c3 b000 	str.w	fp, [r3]
   206de:	e65b      	b.n	20398 <__gethex+0x164>
   206e0:	454c      	cmp	r4, r9
   206e2:	f47f ae8e 	bne.w	20402 <__gethex+0x1ce>
   206e6:	2c01      	cmp	r4, #1
   206e8:	d0ee      	beq.n	206c8 <__gethex+0x494>
   206ea:	1e61      	subs	r1, r4, #1
   206ec:	4658      	mov	r0, fp
   206ee:	f002 fc21 	bl	22f34 <__any_on>
   206f2:	2800      	cmp	r0, #0
   206f4:	f43f ae85 	beq.w	20402 <__gethex+0x1ce>
   206f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   206fc:	e7e4      	b.n	206c8 <__gethex+0x494>
   206fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20700:	2a00      	cmp	r2, #0
   20702:	f43f ae7e 	beq.w	20402 <__gethex+0x1ce>
   20706:	e7df      	b.n	206c8 <__gethex+0x494>
   20708:	f8da 3000 	ldr.w	r3, [sl]
   2070c:	3b01      	subs	r3, #1
   2070e:	42a3      	cmp	r3, r4
   20710:	d034      	beq.n	2077c <__gethex+0x548>
   20712:	2522      	movs	r5, #34	; 0x22
   20714:	e6bd      	b.n	20492 <__gethex+0x25e>
   20716:	460e      	mov	r6, r1
   20718:	e5c7      	b.n	202aa <__gethex+0x76>
   2071a:	f8db 1004 	ldr.w	r1, [fp, #4]
   2071e:	ee18 0a10 	vmov	r0, s16
   20722:	3101      	adds	r1, #1
   20724:	f001 fefe 	bl	22524 <_Balloc>
   20728:	4606      	mov	r6, r0
   2072a:	b3c8      	cbz	r0, 207a0 <__gethex+0x56c>
   2072c:	f8db 3010 	ldr.w	r3, [fp, #16]
   20730:	3302      	adds	r3, #2
   20732:	009a      	lsls	r2, r3, #2
   20734:	f10b 010c 	add.w	r1, fp, #12
   20738:	300c      	adds	r0, #12
   2073a:	f7f7 fec7 	bl	184cc <memcpy>
   2073e:	4659      	mov	r1, fp
   20740:	ee18 0a10 	vmov	r0, s16
   20744:	f001 ff14 	bl	22570 <_Bfree>
   20748:	f106 0814 	add.w	r8, r6, #20
   2074c:	6933      	ldr	r3, [r6, #16]
   2074e:	46b3      	mov	fp, r6
   20750:	e756      	b.n	20600 <__gethex+0x3cc>
   20752:	2300      	movs	r3, #0
   20754:	f8cb 3010 	str.w	r3, [fp, #16]
   20758:	2300      	movs	r3, #0
   2075a:	f8cb 3014 	str.w	r3, [fp, #20]
   2075e:	e787      	b.n	20670 <__gethex+0x43c>
   20760:	9b01      	ldr	r3, [sp, #4]
   20762:	4443      	add	r3, r8
   20764:	f1c4 0420 	rsb	r4, r4, #32
   20768:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2076c:	f001 ffb4 	bl	226d8 <__hi0bits>
   20770:	42a0      	cmp	r0, r4
   20772:	f6bf af0e 	bge.w	20592 <__gethex+0x35e>
   20776:	f8db 3010 	ldr.w	r3, [fp, #16]
   2077a:	e74c      	b.n	20616 <__gethex+0x3e2>
   2077c:	1163      	asrs	r3, r4, #5
   2077e:	f004 041f 	and.w	r4, r4, #31
   20782:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   20786:	2301      	movs	r3, #1
   20788:	40a3      	lsls	r3, r4
   2078a:	4213      	tst	r3, r2
   2078c:	bf0c      	ite	eq
   2078e:	2522      	moveq	r5, #34	; 0x22
   20790:	2521      	movne	r5, #33	; 0x21
   20792:	e67e      	b.n	20492 <__gethex+0x25e>
   20794:	f8c8 2000 	str.w	r2, [r8]
   20798:	4643      	mov	r3, r8
   2079a:	b16a      	cbz	r2, 207b8 <__gethex+0x584>
   2079c:	3304      	adds	r3, #4
   2079e:	e760      	b.n	20662 <__gethex+0x42e>
   207a0:	4b07      	ldr	r3, [pc, #28]	; (207c0 <__gethex+0x58c>)
   207a2:	4808      	ldr	r0, [pc, #32]	; (207c4 <__gethex+0x590>)
   207a4:	4632      	mov	r2, r6
   207a6:	2184      	movs	r1, #132	; 0x84
   207a8:	f002 ff0a 	bl	235c0 <__assert_func>
   207ac:	4b04      	ldr	r3, [pc, #16]	; (207c0 <__gethex+0x58c>)
   207ae:	4805      	ldr	r0, [pc, #20]	; (207c4 <__gethex+0x590>)
   207b0:	465a      	mov	r2, fp
   207b2:	21e4      	movs	r1, #228	; 0xe4
   207b4:	f002 ff04 	bl	235c0 <__assert_func>
   207b8:	f8cb 2010 	str.w	r2, [fp, #16]
   207bc:	e7cc      	b.n	20758 <__gethex+0x524>
   207be:	bf00      	nop
   207c0:	20002758 	.word	0x20002758
   207c4:	2000276c 	.word	0x2000276c

000207c8 <__match>:
   207c8:	b410      	push	{r4}
   207ca:	6804      	ldr	r4, [r0, #0]
   207cc:	e009      	b.n	207e2 <__match+0x1a>
   207ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   207d2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   207d6:	f1bc 0f19 	cmp.w	ip, #25
   207da:	bf98      	it	ls
   207dc:	3320      	addls	r3, #32
   207de:	4293      	cmp	r3, r2
   207e0:	d109      	bne.n	207f6 <__match+0x2e>
   207e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   207e6:	2a00      	cmp	r2, #0
   207e8:	d1f1      	bne.n	207ce <__match+0x6>
   207ea:	3401      	adds	r4, #1
   207ec:	6004      	str	r4, [r0, #0]
   207ee:	2001      	movs	r0, #1
   207f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   207f4:	4770      	bx	lr
   207f6:	2000      	movs	r0, #0
   207f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   207fc:	4770      	bx	lr
   207fe:	bf00      	nop

00020800 <__hexnan>:
   20800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20804:	6809      	ldr	r1, [r1, #0]
   20806:	b085      	sub	sp, #20
   20808:	114b      	asrs	r3, r1, #5
   2080a:	f011 011f 	ands.w	r1, r1, #31
   2080e:	9002      	str	r0, [sp, #8]
   20810:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   20814:	9103      	str	r1, [sp, #12]
   20816:	f040 808f 	bne.w	20938 <__hexnan+0x138>
   2081a:	1f1d      	subs	r5, r3, #4
   2081c:	9301      	str	r3, [sp, #4]
   2081e:	9b02      	ldr	r3, [sp, #8]
   20820:	9901      	ldr	r1, [sp, #4]
   20822:	681c      	ldr	r4, [r3, #0]
   20824:	2300      	movs	r3, #0
   20826:	f841 3c04 	str.w	r3, [r1, #-4]
   2082a:	7861      	ldrb	r1, [r4, #1]
   2082c:	3401      	adds	r4, #1
   2082e:	2900      	cmp	r1, #0
   20830:	f000 8098 	beq.w	20964 <__hexnan+0x164>
   20834:	f8df 9174 	ldr.w	r9, [pc, #372]	; 209ac <__hexnan+0x1ac>
   20838:	46a8      	mov	r8, r5
   2083a:	46ac      	mov	ip, r5
   2083c:	469a      	mov	sl, r3
   2083e:	461e      	mov	r6, r3
   20840:	e00e      	b.n	20860 <__hexnan+0x60>
   20842:	2920      	cmp	r1, #32
   20844:	f200 808c 	bhi.w	20960 <__hexnan+0x160>
   20848:	4556      	cmp	r6, sl
   2084a:	dd06      	ble.n	2085a <__hexnan+0x5a>
   2084c:	45c4      	cmp	ip, r8
   2084e:	d201      	bcs.n	20854 <__hexnan+0x54>
   20850:	2b07      	cmp	r3, #7
   20852:	dd5b      	ble.n	2090c <__hexnan+0x10c>
   20854:	4562      	cmp	r2, ip
   20856:	d351      	bcc.n	208fc <__hexnan+0xfc>
   20858:	2308      	movs	r3, #8
   2085a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2085e:	b1a1      	cbz	r1, 2088a <__hexnan+0x8a>
   20860:	f819 0001 	ldrb.w	r0, [r9, r1]
   20864:	2800      	cmp	r0, #0
   20866:	d0ec      	beq.n	20842 <__hexnan+0x42>
   20868:	3301      	adds	r3, #1
   2086a:	2b08      	cmp	r3, #8
   2086c:	f106 0601 	add.w	r6, r6, #1
   20870:	dc3a      	bgt.n	208e8 <__hexnan+0xe8>
   20872:	f8dc 1000 	ldr.w	r1, [ip]
   20876:	0109      	lsls	r1, r1, #4
   20878:	f000 000f 	and.w	r0, r0, #15
   2087c:	4308      	orrs	r0, r1
   2087e:	f8cc 0000 	str.w	r0, [ip]
   20882:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   20886:	2900      	cmp	r1, #0
   20888:	d1ea      	bne.n	20860 <__hexnan+0x60>
   2088a:	2e00      	cmp	r6, #0
   2088c:	d06a      	beq.n	20964 <__hexnan+0x164>
   2088e:	45c4      	cmp	ip, r8
   20890:	d201      	bcs.n	20896 <__hexnan+0x96>
   20892:	2b07      	cmp	r3, #7
   20894:	dd74      	ble.n	20980 <__hexnan+0x180>
   20896:	4562      	cmp	r2, ip
   20898:	d252      	bcs.n	20940 <__hexnan+0x140>
   2089a:	1f11      	subs	r1, r2, #4
   2089c:	4663      	mov	r3, ip
   2089e:	f853 0b04 	ldr.w	r0, [r3], #4
   208a2:	f841 0f04 	str.w	r0, [r1, #4]!
   208a6:	42ab      	cmp	r3, r5
   208a8:	d9f9      	bls.n	2089e <__hexnan+0x9e>
   208aa:	eba5 030c 	sub.w	r3, r5, ip
   208ae:	f023 0303 	bic.w	r3, r3, #3
   208b2:	1c69      	adds	r1, r5, #1
   208b4:	3304      	adds	r3, #4
   208b6:	f10c 0c01 	add.w	ip, ip, #1
   208ba:	4561      	cmp	r1, ip
   208bc:	bf38      	it	cc
   208be:	2304      	movcc	r3, #4
   208c0:	4413      	add	r3, r2
   208c2:	2100      	movs	r1, #0
   208c4:	f843 1b04 	str.w	r1, [r3], #4
   208c8:	42ab      	cmp	r3, r5
   208ca:	d9fb      	bls.n	208c4 <__hexnan+0xc4>
   208cc:	9b01      	ldr	r3, [sp, #4]
   208ce:	f853 3c04 	ldr.w	r3, [r3, #-4]
   208d2:	b92b      	cbnz	r3, 208e0 <__hexnan+0xe0>
   208d4:	42aa      	cmp	r2, r5
   208d6:	d049      	beq.n	2096c <__hexnan+0x16c>
   208d8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   208dc:	2b00      	cmp	r3, #0
   208de:	d0f9      	beq.n	208d4 <__hexnan+0xd4>
   208e0:	2005      	movs	r0, #5
   208e2:	b005      	add	sp, #20
   208e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208e8:	4562      	cmp	r2, ip
   208ea:	d2b6      	bcs.n	2085a <__hexnan+0x5a>
   208ec:	2300      	movs	r3, #0
   208ee:	f84c 3c04 	str.w	r3, [ip, #-4]
   208f2:	4619      	mov	r1, r3
   208f4:	f1ac 0c04 	sub.w	ip, ip, #4
   208f8:	2301      	movs	r3, #1
   208fa:	e7bd      	b.n	20878 <__hexnan+0x78>
   208fc:	2300      	movs	r3, #0
   208fe:	f1ac 0804 	sub.w	r8, ip, #4
   20902:	f84c 3c04 	str.w	r3, [ip, #-4]
   20906:	46b2      	mov	sl, r6
   20908:	46c4      	mov	ip, r8
   2090a:	e7a6      	b.n	2085a <__hexnan+0x5a>
   2090c:	f1c3 0108 	rsb	r1, r3, #8
   20910:	f8dc 3000 	ldr.w	r3, [ip]
   20914:	0089      	lsls	r1, r1, #2
   20916:	f1c1 0e20 	rsb	lr, r1, #32
   2091a:	4660      	mov	r0, ip
   2091c:	469b      	mov	fp, r3
   2091e:	6847      	ldr	r7, [r0, #4]
   20920:	fa07 f30e 	lsl.w	r3, r7, lr
   20924:	ea43 030b 	orr.w	r3, r3, fp
   20928:	fa27 fb01 	lsr.w	fp, r7, r1
   2092c:	6003      	str	r3, [r0, #0]
   2092e:	f840 bf04 	str.w	fp, [r0, #4]!
   20932:	4540      	cmp	r0, r8
   20934:	d3f3      	bcc.n	2091e <__hexnan+0x11e>
   20936:	e78d      	b.n	20854 <__hexnan+0x54>
   20938:	1d19      	adds	r1, r3, #4
   2093a:	9101      	str	r1, [sp, #4]
   2093c:	461d      	mov	r5, r3
   2093e:	e76e      	b.n	2081e <__hexnan+0x1e>
   20940:	9b03      	ldr	r3, [sp, #12]
   20942:	2b00      	cmp	r3, #0
   20944:	d0c2      	beq.n	208cc <__hexnan+0xcc>
   20946:	9b03      	ldr	r3, [sp, #12]
   20948:	9801      	ldr	r0, [sp, #4]
   2094a:	f1c3 0120 	rsb	r1, r3, #32
   2094e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20952:	40cb      	lsrs	r3, r1
   20954:	f850 1c04 	ldr.w	r1, [r0, #-4]
   20958:	400b      	ands	r3, r1
   2095a:	f840 3c04 	str.w	r3, [r0, #-4]
   2095e:	e7b8      	b.n	208d2 <__hexnan+0xd2>
   20960:	2929      	cmp	r1, #41	; 0x29
   20962:	d009      	beq.n	20978 <__hexnan+0x178>
   20964:	2004      	movs	r0, #4
   20966:	b005      	add	sp, #20
   20968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2096c:	2301      	movs	r3, #1
   2096e:	2005      	movs	r0, #5
   20970:	602b      	str	r3, [r5, #0]
   20972:	b005      	add	sp, #20
   20974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20978:	9902      	ldr	r1, [sp, #8]
   2097a:	3401      	adds	r4, #1
   2097c:	600c      	str	r4, [r1, #0]
   2097e:	e784      	b.n	2088a <__hexnan+0x8a>
   20980:	f8dc 1000 	ldr.w	r1, [ip]
   20984:	f1c3 0308 	rsb	r3, r3, #8
   20988:	009b      	lsls	r3, r3, #2
   2098a:	f1c3 0720 	rsb	r7, r3, #32
   2098e:	4664      	mov	r4, ip
   20990:	4608      	mov	r0, r1
   20992:	6866      	ldr	r6, [r4, #4]
   20994:	fa06 f107 	lsl.w	r1, r6, r7
   20998:	4301      	orrs	r1, r0
   2099a:	fa26 f003 	lsr.w	r0, r6, r3
   2099e:	6021      	str	r1, [r4, #0]
   209a0:	f844 0f04 	str.w	r0, [r4, #4]!
   209a4:	4544      	cmp	r4, r8
   209a6:	d3f4      	bcc.n	20992 <__hexnan+0x192>
   209a8:	e775      	b.n	20896 <__hexnan+0x96>
   209aa:	bf00      	nop
   209ac:	200027d8 	.word	0x200027d8

000209b0 <__ascii_mbtowc>:
   209b0:	b082      	sub	sp, #8
   209b2:	b149      	cbz	r1, 209c8 <__ascii_mbtowc+0x18>
   209b4:	b15a      	cbz	r2, 209ce <__ascii_mbtowc+0x1e>
   209b6:	b16b      	cbz	r3, 209d4 <__ascii_mbtowc+0x24>
   209b8:	7813      	ldrb	r3, [r2, #0]
   209ba:	600b      	str	r3, [r1, #0]
   209bc:	7812      	ldrb	r2, [r2, #0]
   209be:	1e10      	subs	r0, r2, #0
   209c0:	bf18      	it	ne
   209c2:	2001      	movne	r0, #1
   209c4:	b002      	add	sp, #8
   209c6:	4770      	bx	lr
   209c8:	a901      	add	r1, sp, #4
   209ca:	2a00      	cmp	r2, #0
   209cc:	d1f3      	bne.n	209b6 <__ascii_mbtowc+0x6>
   209ce:	4610      	mov	r0, r2
   209d0:	b002      	add	sp, #8
   209d2:	4770      	bx	lr
   209d4:	f06f 0001 	mvn.w	r0, #1
   209d8:	e7f4      	b.n	209c4 <__ascii_mbtowc+0x14>
   209da:	bf00      	nop
   209dc:	0000      	movs	r0, r0
	...

000209e0 <_svfprintf_r>:
   209e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209e4:	ed2d 8b08 	vpush	{d8-d11}
   209e8:	b0d1      	sub	sp, #324	; 0x144
   209ea:	460c      	mov	r4, r1
   209ec:	ee0b 1a10 	vmov	s22, r1
   209f0:	4690      	mov	r8, r2
   209f2:	9308      	str	r3, [sp, #32]
   209f4:	4683      	mov	fp, r0
   209f6:	f002 fc8b 	bl	23310 <_localeconv_r>
   209fa:	6803      	ldr	r3, [r0, #0]
   209fc:	9312      	str	r3, [sp, #72]	; 0x48
   209fe:	4618      	mov	r0, r3
   20a00:	f7ff f9be 	bl	1fd80 <strlen>
   20a04:	af20      	add	r7, sp, #128	; 0x80
   20a06:	9010      	str	r0, [sp, #64]	; 0x40
   20a08:	2208      	movs	r2, #8
   20a0a:	2100      	movs	r1, #0
   20a0c:	4638      	mov	r0, r7
   20a0e:	f7fe fbef 	bl	1f1f0 <memset>
   20a12:	89a3      	ldrh	r3, [r4, #12]
   20a14:	061b      	lsls	r3, r3, #24
   20a16:	d503      	bpl.n	20a20 <_svfprintf_r+0x40>
   20a18:	6923      	ldr	r3, [r4, #16]
   20a1a:	2b00      	cmp	r3, #0
   20a1c:	f000 8755 	beq.w	218ca <_svfprintf_r+0xeea>
   20a20:	2300      	movs	r3, #0
   20a22:	ed9f 8b83 	vldr	d8, [pc, #524]	; 20c30 <_svfprintf_r+0x250>
   20a26:	ed9f 9b84 	vldr	d9, [pc, #528]	; 20c38 <_svfprintf_r+0x258>
   20a2a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   20a2e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   20a32:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   20a36:	aa27      	add	r2, sp, #156	; 0x9c
   20a38:	930e      	str	r3, [sp, #56]	; 0x38
   20a3a:	9224      	str	r2, [sp, #144]	; 0x90
   20a3c:	4692      	mov	sl, r2
   20a3e:	9311      	str	r3, [sp, #68]	; 0x44
   20a40:	9304      	str	r3, [sp, #16]
   20a42:	4644      	mov	r4, r8
   20a44:	46a1      	mov	r9, r4
   20a46:	4b7e      	ldr	r3, [pc, #504]	; (20c40 <_svfprintf_r+0x260>)
   20a48:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   20a4c:	f7fe ff58 	bl	1f900 <__locale_mb_cur_max>
   20a50:	464a      	mov	r2, r9
   20a52:	4603      	mov	r3, r0
   20a54:	a91c      	add	r1, sp, #112	; 0x70
   20a56:	9700      	str	r7, [sp, #0]
   20a58:	4658      	mov	r0, fp
   20a5a:	47a8      	blx	r5
   20a5c:	2800      	cmp	r0, #0
   20a5e:	f000 80b0 	beq.w	20bc2 <_svfprintf_r+0x1e2>
   20a62:	f2c0 80a6 	blt.w	20bb2 <_svfprintf_r+0x1d2>
   20a66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   20a68:	2a25      	cmp	r2, #37	; 0x25
   20a6a:	4603      	mov	r3, r0
   20a6c:	d001      	beq.n	20a72 <_svfprintf_r+0x92>
   20a6e:	4499      	add	r9, r3
   20a70:	e7e9      	b.n	20a46 <_svfprintf_r+0x66>
   20a72:	ebb9 0504 	subs.w	r5, r9, r4
   20a76:	4606      	mov	r6, r0
   20a78:	f040 80a7 	bne.w	20bca <_svfprintf_r+0x1ea>
   20a7c:	2300      	movs	r3, #0
   20a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a82:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   20a86:	4698      	mov	r8, r3
   20a88:	9306      	str	r3, [sp, #24]
   20a8a:	f109 0901 	add.w	r9, r9, #1
   20a8e:	f899 3000 	ldrb.w	r3, [r9]
   20a92:	9203      	str	r2, [sp, #12]
   20a94:	252b      	movs	r5, #43	; 0x2b
   20a96:	2620      	movs	r6, #32
   20a98:	f109 0901 	add.w	r9, r9, #1
   20a9c:	f1a3 0220 	sub.w	r2, r3, #32
   20aa0:	2a5a      	cmp	r2, #90	; 0x5a
   20aa2:	f200 80cf 	bhi.w	20c44 <_svfprintf_r+0x264>
   20aa6:	e8df f012 	tbh	[pc, r2, lsl #1]
   20aaa:	02e8      	.short	0x02e8
   20aac:	00cd00cd 	.word	0x00cd00cd
   20ab0:	00cd02e3 	.word	0x00cd02e3
   20ab4:	00cd00cd 	.word	0x00cd00cd
   20ab8:	00cd006a 	.word	0x00cd006a
   20abc:	020500cd 	.word	0x020500cd
   20ac0:	00cd0284 	.word	0x00cd0284
   20ac4:	02c90210 	.word	0x02c90210
   20ac8:	02bd00cd 	.word	0x02bd00cd
   20acc:	005b005b 	.word	0x005b005b
   20ad0:	005b005b 	.word	0x005b005b
   20ad4:	005b005b 	.word	0x005b005b
   20ad8:	005b005b 	.word	0x005b005b
   20adc:	00cd005b 	.word	0x00cd005b
   20ae0:	00cd00cd 	.word	0x00cd00cd
   20ae4:	00cd00cd 	.word	0x00cd00cd
   20ae8:	00cd00cd 	.word	0x00cd00cd
   20aec:	00cd0153 	.word	0x00cd0153
   20af0:	021a0183 	.word	0x021a0183
   20af4:	01530153 	.word	0x01530153
   20af8:	00cd0153 	.word	0x00cd0153
   20afc:	00cd00cd 	.word	0x00cd00cd
   20b00:	021500cd 	.word	0x021500cd
   20b04:	00cd00cd 	.word	0x00cd00cd
   20b08:	00cd0296 	.word	0x00cd0296
   20b0c:	00cd00cd 	.word	0x00cd00cd
   20b10:	00cd01ab 	.word	0x00cd01ab
   20b14:	00cd02aa 	.word	0x00cd02aa
   20b18:	06e300cd 	.word	0x06e300cd
   20b1c:	00cd00cd 	.word	0x00cd00cd
   20b20:	00cd00cd 	.word	0x00cd00cd
   20b24:	00cd00cd 	.word	0x00cd00cd
   20b28:	00cd00cd 	.word	0x00cd00cd
   20b2c:	00cd0153 	.word	0x00cd0153
   20b30:	01de0183 	.word	0x01de0183
   20b34:	01530153 	.word	0x01530153
   20b38:	02770153 	.word	0x02770153
   20b3c:	007f01de 	.word	0x007f01de
   20b40:	028900cd 	.word	0x028900cd
   20b44:	025f00cd 	.word	0x025f00cd
   20b48:	022f06e0 	.word	0x022f06e0
   20b4c:	00cd007f 	.word	0x00cd007f
   20b50:	007c01ab 	.word	0x007c01ab
   20b54:	00cd06b8 	.word	0x00cd06b8
   20b58:	06bd00cd 	.word	0x06bd00cd
   20b5c:	007c00cd 	.word	0x007c00cd
   20b60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   20b64:	2100      	movs	r1, #0
   20b66:	f819 3b01 	ldrb.w	r3, [r9], #1
   20b6a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   20b6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   20b72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   20b76:	2a09      	cmp	r2, #9
   20b78:	d9f5      	bls.n	20b66 <_svfprintf_r+0x186>
   20b7a:	9106      	str	r1, [sp, #24]
   20b7c:	e78e      	b.n	20a9c <_svfprintf_r+0xbc>
   20b7e:	4658      	mov	r0, fp
   20b80:	f002 fbc6 	bl	23310 <_localeconv_r>
   20b84:	6843      	ldr	r3, [r0, #4]
   20b86:	9315      	str	r3, [sp, #84]	; 0x54
   20b88:	4618      	mov	r0, r3
   20b8a:	f7ff f8f9 	bl	1fd80 <strlen>
   20b8e:	9016      	str	r0, [sp, #88]	; 0x58
   20b90:	4658      	mov	r0, fp
   20b92:	f002 fbbd 	bl	23310 <_localeconv_r>
   20b96:	6883      	ldr	r3, [r0, #8]
   20b98:	9313      	str	r3, [sp, #76]	; 0x4c
   20b9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20b9c:	2b00      	cmp	r3, #0
   20b9e:	f040 862d 	bne.w	217fc <_svfprintf_r+0xe1c>
   20ba2:	f899 3000 	ldrb.w	r3, [r9]
   20ba6:	e777      	b.n	20a98 <_svfprintf_r+0xb8>
   20ba8:	f899 3000 	ldrb.w	r3, [r9]
   20bac:	f048 0820 	orr.w	r8, r8, #32
   20bb0:	e772      	b.n	20a98 <_svfprintf_r+0xb8>
   20bb2:	2208      	movs	r2, #8
   20bb4:	2100      	movs	r1, #0
   20bb6:	4638      	mov	r0, r7
   20bb8:	f7fe fb1a 	bl	1f1f0 <memset>
   20bbc:	2301      	movs	r3, #1
   20bbe:	4499      	add	r9, r3
   20bc0:	e741      	b.n	20a46 <_svfprintf_r+0x66>
   20bc2:	ebb9 0504 	subs.w	r5, r9, r4
   20bc6:	4606      	mov	r6, r0
   20bc8:	d011      	beq.n	20bee <_svfprintf_r+0x20e>
   20bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20bcc:	442b      	add	r3, r5
   20bce:	9326      	str	r3, [sp, #152]	; 0x98
   20bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20bd2:	3301      	adds	r3, #1
   20bd4:	2b07      	cmp	r3, #7
   20bd6:	e9ca 4500 	strd	r4, r5, [sl]
   20bda:	9325      	str	r3, [sp, #148]	; 0x94
   20bdc:	dc1c      	bgt.n	20c18 <_svfprintf_r+0x238>
   20bde:	f10a 0a08 	add.w	sl, sl, #8
   20be2:	9b04      	ldr	r3, [sp, #16]
   20be4:	442b      	add	r3, r5
   20be6:	9304      	str	r3, [sp, #16]
   20be8:	2e00      	cmp	r6, #0
   20bea:	f47f af47 	bne.w	20a7c <_svfprintf_r+0x9c>
   20bee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20bf0:	2b00      	cmp	r3, #0
   20bf2:	f041 820b 	bne.w	2200c <_svfprintf_r+0x162c>
   20bf6:	ee1b 3a10 	vmov	r3, s22
   20bfa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   20bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
   20c02:	9b04      	ldr	r3, [sp, #16]
   20c04:	bf18      	it	ne
   20c06:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   20c0a:	9304      	str	r3, [sp, #16]
   20c0c:	9804      	ldr	r0, [sp, #16]
   20c0e:	b051      	add	sp, #324	; 0x144
   20c10:	ecbd 8b08 	vpop	{d8-d11}
   20c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c18:	ee1b 1a10 	vmov	r1, s22
   20c1c:	aa24      	add	r2, sp, #144	; 0x90
   20c1e:	4658      	mov	r0, fp
   20c20:	f003 fc48 	bl	244b4 <__ssprint_r>
   20c24:	2800      	cmp	r0, #0
   20c26:	d1e6      	bne.n	20bf6 <_svfprintf_r+0x216>
   20c28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20c2c:	e7d9      	b.n	20be2 <_svfprintf_r+0x202>
   20c2e:	bf00      	nop
	...
   20c38:	ffffffff 	.word	0xffffffff
   20c3c:	7fefffff 	.word	0x7fefffff
   20c40:	20003e40 	.word	0x20003e40
   20c44:	930b      	str	r3, [sp, #44]	; 0x2c
   20c46:	2b00      	cmp	r3, #0
   20c48:	d0d1      	beq.n	20bee <_svfprintf_r+0x20e>
   20c4a:	2100      	movs	r1, #0
   20c4c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   20c50:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   20c54:	2301      	movs	r3, #1
   20c56:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   20c5a:	9302      	str	r3, [sp, #8]
   20c5c:	9107      	str	r1, [sp, #28]
   20c5e:	9305      	str	r3, [sp, #20]
   20c60:	9103      	str	r1, [sp, #12]
   20c62:	910f      	str	r1, [sp, #60]	; 0x3c
   20c64:	ac37      	add	r4, sp, #220	; 0xdc
   20c66:	f018 0302 	ands.w	r3, r8, #2
   20c6a:	9309      	str	r3, [sp, #36]	; 0x24
   20c6c:	d002      	beq.n	20c74 <_svfprintf_r+0x294>
   20c6e:	9b02      	ldr	r3, [sp, #8]
   20c70:	3302      	adds	r3, #2
   20c72:	9302      	str	r3, [sp, #8]
   20c74:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   20c78:	930a      	str	r3, [sp, #40]	; 0x28
   20c7a:	d105      	bne.n	20c88 <_svfprintf_r+0x2a8>
   20c7c:	9b06      	ldr	r3, [sp, #24]
   20c7e:	9a02      	ldr	r2, [sp, #8]
   20c80:	1a9d      	subs	r5, r3, r2
   20c82:	2d00      	cmp	r5, #0
   20c84:	f300 8369 	bgt.w	2135a <_svfprintf_r+0x97a>
   20c88:	9a26      	ldr	r2, [sp, #152]	; 0x98
   20c8a:	b189      	cbz	r1, 20cb0 <_svfprintf_r+0x2d0>
   20c8c:	9925      	ldr	r1, [sp, #148]	; 0x94
   20c8e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   20c92:	3101      	adds	r1, #1
   20c94:	3201      	adds	r2, #1
   20c96:	f8ca 0000 	str.w	r0, [sl]
   20c9a:	2907      	cmp	r1, #7
   20c9c:	f04f 0001 	mov.w	r0, #1
   20ca0:	9226      	str	r2, [sp, #152]	; 0x98
   20ca2:	9125      	str	r1, [sp, #148]	; 0x94
   20ca4:	f8ca 0004 	str.w	r0, [sl, #4]
   20ca8:	f300 83a2 	bgt.w	213f0 <_svfprintf_r+0xa10>
   20cac:	f10a 0a08 	add.w	sl, sl, #8
   20cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20cb2:	b183      	cbz	r3, 20cd6 <_svfprintf_r+0x2f6>
   20cb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20cb6:	a91a      	add	r1, sp, #104	; 0x68
   20cb8:	3301      	adds	r3, #1
   20cba:	3202      	adds	r2, #2
   20cbc:	f8ca 1000 	str.w	r1, [sl]
   20cc0:	2b07      	cmp	r3, #7
   20cc2:	f04f 0102 	mov.w	r1, #2
   20cc6:	9226      	str	r2, [sp, #152]	; 0x98
   20cc8:	9325      	str	r3, [sp, #148]	; 0x94
   20cca:	f8ca 1004 	str.w	r1, [sl, #4]
   20cce:	f300 83a3 	bgt.w	21418 <_svfprintf_r+0xa38>
   20cd2:	f10a 0a08 	add.w	sl, sl, #8
   20cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20cd8:	2b80      	cmp	r3, #128	; 0x80
   20cda:	f000 826c 	beq.w	211b6 <_svfprintf_r+0x7d6>
   20cde:	9b03      	ldr	r3, [sp, #12]
   20ce0:	9905      	ldr	r1, [sp, #20]
   20ce2:	1a5d      	subs	r5, r3, r1
   20ce4:	2d00      	cmp	r5, #0
   20ce6:	f300 82a5 	bgt.w	21234 <_svfprintf_r+0x854>
   20cea:	f418 7f80 	tst.w	r8, #256	; 0x100
   20cee:	f040 820d 	bne.w	2110c <_svfprintf_r+0x72c>
   20cf2:	9b05      	ldr	r3, [sp, #20]
   20cf4:	f8ca 3004 	str.w	r3, [sl, #4]
   20cf8:	441a      	add	r2, r3
   20cfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   20cfc:	f8ca 4000 	str.w	r4, [sl]
   20d00:	3301      	adds	r3, #1
   20d02:	2b07      	cmp	r3, #7
   20d04:	9226      	str	r2, [sp, #152]	; 0x98
   20d06:	9325      	str	r3, [sp, #148]	; 0x94
   20d08:	f300 831b 	bgt.w	21342 <_svfprintf_r+0x962>
   20d0c:	f10a 0a08 	add.w	sl, sl, #8
   20d10:	f018 0f04 	tst.w	r8, #4
   20d14:	d005      	beq.n	20d22 <_svfprintf_r+0x342>
   20d16:	9b06      	ldr	r3, [sp, #24]
   20d18:	9902      	ldr	r1, [sp, #8]
   20d1a:	1a5c      	subs	r4, r3, r1
   20d1c:	2c00      	cmp	r4, #0
   20d1e:	f300 8388 	bgt.w	21432 <_svfprintf_r+0xa52>
   20d22:	9b04      	ldr	r3, [sp, #16]
   20d24:	9906      	ldr	r1, [sp, #24]
   20d26:	9802      	ldr	r0, [sp, #8]
   20d28:	4281      	cmp	r1, r0
   20d2a:	bfac      	ite	ge
   20d2c:	185b      	addge	r3, r3, r1
   20d2e:	181b      	addlt	r3, r3, r0
   20d30:	9304      	str	r3, [sp, #16]
   20d32:	2a00      	cmp	r2, #0
   20d34:	f040 82b0 	bne.w	21298 <_svfprintf_r+0x8b8>
   20d38:	2300      	movs	r3, #0
   20d3a:	9325      	str	r3, [sp, #148]	; 0x94
   20d3c:	9b07      	ldr	r3, [sp, #28]
   20d3e:	b11b      	cbz	r3, 20d48 <_svfprintf_r+0x368>
   20d40:	9907      	ldr	r1, [sp, #28]
   20d42:	4658      	mov	r0, fp
   20d44:	f7ff f91e 	bl	1ff84 <_free_r>
   20d48:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   20d4c:	464c      	mov	r4, r9
   20d4e:	e679      	b.n	20a44 <_svfprintf_r+0x64>
   20d50:	930b      	str	r3, [sp, #44]	; 0x2c
   20d52:	9b08      	ldr	r3, [sp, #32]
   20d54:	3307      	adds	r3, #7
   20d56:	f023 0307 	bic.w	r3, r3, #7
   20d5a:	ecb3 8b02 	vldmia	r3!, {d8}
   20d5e:	eeb0 7bc8 	vabs.f64	d7, d8
   20d62:	eeb4 7b49 	vcmp.f64	d7, d9
   20d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20d6a:	9308      	str	r3, [sp, #32]
   20d6c:	f340 84e9 	ble.w	21742 <_svfprintf_r+0xd62>
   20d70:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   20d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20d78:	f101 8059 	bmi.w	21e2e <_svfprintf_r+0x144e>
   20d7c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   20d80:	4cab      	ldr	r4, [pc, #684]	; (21030 <_svfprintf_r+0x650>)
   20d82:	4bac      	ldr	r3, [pc, #688]	; (21034 <_svfprintf_r+0x654>)
   20d84:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   20d88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20d8a:	2a47      	cmp	r2, #71	; 0x47
   20d8c:	bfc8      	it	gt
   20d8e:	461c      	movgt	r4, r3
   20d90:	2300      	movs	r3, #0
   20d92:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   20d96:	2203      	movs	r2, #3
   20d98:	9307      	str	r3, [sp, #28]
   20d9a:	9202      	str	r2, [sp, #8]
   20d9c:	9205      	str	r2, [sp, #20]
   20d9e:	9303      	str	r3, [sp, #12]
   20da0:	930f      	str	r3, [sp, #60]	; 0x3c
   20da2:	2900      	cmp	r1, #0
   20da4:	f43f af5f 	beq.w	20c66 <_svfprintf_r+0x286>
   20da8:	9b02      	ldr	r3, [sp, #8]
   20daa:	3301      	adds	r3, #1
   20dac:	9302      	str	r3, [sp, #8]
   20dae:	e75a      	b.n	20c66 <_svfprintf_r+0x286>
   20db0:	2b43      	cmp	r3, #67	; 0x43
   20db2:	930b      	str	r3, [sp, #44]	; 0x2c
   20db4:	d003      	beq.n	20dbe <_svfprintf_r+0x3de>
   20db6:	f018 0f10 	tst.w	r8, #16
   20dba:	f000 855d 	beq.w	21878 <_svfprintf_r+0xe98>
   20dbe:	9d08      	ldr	r5, [sp, #32]
   20dc0:	2208      	movs	r2, #8
   20dc2:	2100      	movs	r1, #0
   20dc4:	a822      	add	r0, sp, #136	; 0x88
   20dc6:	ac37      	add	r4, sp, #220	; 0xdc
   20dc8:	f7fe fa12 	bl	1f1f0 <memset>
   20dcc:	ab22      	add	r3, sp, #136	; 0x88
   20dce:	f855 2b04 	ldr.w	r2, [r5], #4
   20dd2:	4621      	mov	r1, r4
   20dd4:	4658      	mov	r0, fp
   20dd6:	f002 fb83 	bl	234e0 <_wcrtomb_r>
   20dda:	4603      	mov	r3, r0
   20ddc:	3301      	adds	r3, #1
   20dde:	9005      	str	r0, [sp, #20]
   20de0:	f001 82ee 	beq.w	223c0 <_svfprintf_r+0x19e0>
   20de4:	9b05      	ldr	r3, [sp, #20]
   20de6:	9508      	str	r5, [sp, #32]
   20de8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20dec:	9302      	str	r3, [sp, #8]
   20dee:	2100      	movs	r1, #0
   20df0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   20df4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   20df8:	9107      	str	r1, [sp, #28]
   20dfa:	9103      	str	r1, [sp, #12]
   20dfc:	910f      	str	r1, [sp, #60]	; 0x3c
   20dfe:	e732      	b.n	20c66 <_svfprintf_r+0x286>
   20e00:	930b      	str	r3, [sp, #44]	; 0x2c
   20e02:	9b08      	ldr	r3, [sp, #32]
   20e04:	461a      	mov	r2, r3
   20e06:	2300      	movs	r3, #0
   20e08:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   20e0c:	4613      	mov	r3, r2
   20e0e:	f853 4b04 	ldr.w	r4, [r3], #4
   20e12:	9308      	str	r3, [sp, #32]
   20e14:	2c00      	cmp	r4, #0
   20e16:	f000 8548 	beq.w	218aa <_svfprintf_r+0xeca>
   20e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20e1c:	2b53      	cmp	r3, #83	; 0x53
   20e1e:	f000 86ec 	beq.w	21bfa <_svfprintf_r+0x121a>
   20e22:	f018 0310 	ands.w	r3, r8, #16
   20e26:	930c      	str	r3, [sp, #48]	; 0x30
   20e28:	f040 86e7 	bne.w	21bfa <_svfprintf_r+0x121a>
   20e2c:	9b03      	ldr	r3, [sp, #12]
   20e2e:	1c5d      	adds	r5, r3, #1
   20e30:	f001 80e5 	beq.w	21ffe <_svfprintf_r+0x161e>
   20e34:	990c      	ldr	r1, [sp, #48]	; 0x30
   20e36:	461a      	mov	r2, r3
   20e38:	4620      	mov	r0, r4
   20e3a:	f002 fb01 	bl	23440 <memchr>
   20e3e:	9007      	str	r0, [sp, #28]
   20e40:	2800      	cmp	r0, #0
   20e42:	f001 8328 	beq.w	22496 <_svfprintf_r+0x1ab6>
   20e46:	9b07      	ldr	r3, [sp, #28]
   20e48:	1b1a      	subs	r2, r3, r4
   20e4a:	9205      	str	r2, [sp, #20]
   20e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20e4e:	9303      	str	r3, [sp, #12]
   20e50:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   20e54:	930f      	str	r3, [sp, #60]	; 0x3c
   20e56:	930d      	str	r3, [sp, #52]	; 0x34
   20e58:	9307      	str	r3, [sp, #28]
   20e5a:	2373      	movs	r3, #115	; 0x73
   20e5c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   20e60:	9202      	str	r2, [sp, #8]
   20e62:	930b      	str	r3, [sp, #44]	; 0x2c
   20e64:	e79d      	b.n	20da2 <_svfprintf_r+0x3c2>
   20e66:	f018 0f20 	tst.w	r8, #32
   20e6a:	930b      	str	r3, [sp, #44]	; 0x2c
   20e6c:	9b08      	ldr	r3, [sp, #32]
   20e6e:	d03d      	beq.n	20eec <_svfprintf_r+0x50c>
   20e70:	3307      	adds	r3, #7
   20e72:	f023 0307 	bic.w	r3, r3, #7
   20e76:	461a      	mov	r2, r3
   20e78:	4611      	mov	r1, r2
   20e7a:	685b      	ldr	r3, [r3, #4]
   20e7c:	f851 2b08 	ldr.w	r2, [r1], #8
   20e80:	9108      	str	r1, [sp, #32]
   20e82:	4619      	mov	r1, r3
   20e84:	2b00      	cmp	r3, #0
   20e86:	f2c0 840c 	blt.w	216a2 <_svfprintf_r+0xcc2>
   20e8a:	9b03      	ldr	r3, [sp, #12]
   20e8c:	3301      	adds	r3, #1
   20e8e:	f000 829e 	beq.w	213ce <_svfprintf_r+0x9ee>
   20e92:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   20e96:	ea52 0301 	orrs.w	r3, r2, r1
   20e9a:	9002      	str	r0, [sp, #8]
   20e9c:	f040 8299 	bne.w	213d2 <_svfprintf_r+0x9f2>
   20ea0:	9b03      	ldr	r3, [sp, #12]
   20ea2:	2b00      	cmp	r3, #0
   20ea4:	f040 829a 	bne.w	213dc <_svfprintf_r+0x9fc>
   20ea8:	4680      	mov	r8, r0
   20eaa:	2300      	movs	r3, #0
   20eac:	9303      	str	r3, [sp, #12]
   20eae:	9305      	str	r3, [sp, #20]
   20eb0:	ac50      	add	r4, sp, #320	; 0x140
   20eb2:	e106      	b.n	210c2 <_svfprintf_r+0x6e2>
   20eb4:	9b08      	ldr	r3, [sp, #32]
   20eb6:	f853 2b04 	ldr.w	r2, [r3], #4
   20eba:	9206      	str	r2, [sp, #24]
   20ebc:	2a00      	cmp	r2, #0
   20ebe:	f280 8419 	bge.w	216f4 <_svfprintf_r+0xd14>
   20ec2:	9a06      	ldr	r2, [sp, #24]
   20ec4:	9308      	str	r3, [sp, #32]
   20ec6:	4252      	negs	r2, r2
   20ec8:	9206      	str	r2, [sp, #24]
   20eca:	f899 3000 	ldrb.w	r3, [r9]
   20ece:	f048 0804 	orr.w	r8, r8, #4
   20ed2:	e5e1      	b.n	20a98 <_svfprintf_r+0xb8>
   20ed4:	f899 3000 	ldrb.w	r3, [r9]
   20ed8:	f048 0808 	orr.w	r8, r8, #8
   20edc:	e5dc      	b.n	20a98 <_svfprintf_r+0xb8>
   20ede:	f048 0810 	orr.w	r8, r8, #16
   20ee2:	f018 0f20 	tst.w	r8, #32
   20ee6:	930b      	str	r3, [sp, #44]	; 0x2c
   20ee8:	9b08      	ldr	r3, [sp, #32]
   20eea:	d1c1      	bne.n	20e70 <_svfprintf_r+0x490>
   20eec:	f018 0f10 	tst.w	r8, #16
   20ef0:	f040 840b 	bne.w	2170a <_svfprintf_r+0xd2a>
   20ef4:	f018 0f40 	tst.w	r8, #64	; 0x40
   20ef8:	f000 8403 	beq.w	21702 <_svfprintf_r+0xd22>
   20efc:	f933 2b04 	ldrsh.w	r2, [r3], #4
   20f00:	9308      	str	r3, [sp, #32]
   20f02:	17d1      	asrs	r1, r2, #31
   20f04:	460b      	mov	r3, r1
   20f06:	e7bd      	b.n	20e84 <_svfprintf_r+0x4a4>
   20f08:	9b08      	ldr	r3, [sp, #32]
   20f0a:	f048 0202 	orr.w	r2, r8, #2
   20f0e:	9202      	str	r2, [sp, #8]
   20f10:	f853 2b04 	ldr.w	r2, [r3], #4
   20f14:	9308      	str	r3, [sp, #32]
   20f16:	f647 0330 	movw	r3, #30768	; 0x7830
   20f1a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   20f1e:	2078      	movs	r0, #120	; 0x78
   20f20:	4b45      	ldr	r3, [pc, #276]	; (21038 <_svfprintf_r+0x658>)
   20f22:	9311      	str	r3, [sp, #68]	; 0x44
   20f24:	2100      	movs	r1, #0
   20f26:	2302      	movs	r3, #2
   20f28:	900b      	str	r0, [sp, #44]	; 0x2c
   20f2a:	2000      	movs	r0, #0
   20f2c:	9c03      	ldr	r4, [sp, #12]
   20f2e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   20f32:	1c60      	adds	r0, r4, #1
   20f34:	f000 80ad 	beq.w	21092 <_svfprintf_r+0x6b2>
   20f38:	9802      	ldr	r0, [sp, #8]
   20f3a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   20f3e:	ea52 0001 	orrs.w	r0, r2, r1
   20f42:	f040 80a4 	bne.w	2108e <_svfprintf_r+0x6ae>
   20f46:	2c00      	cmp	r4, #0
   20f48:	f040 86ae 	bne.w	21ca8 <_svfprintf_r+0x12c8>
   20f4c:	2b00      	cmp	r3, #0
   20f4e:	d1ac      	bne.n	20eaa <_svfprintf_r+0x4ca>
   20f50:	9b02      	ldr	r3, [sp, #8]
   20f52:	f013 0301 	ands.w	r3, r3, #1
   20f56:	9305      	str	r3, [sp, #20]
   20f58:	f000 83d1 	beq.w	216fe <_svfprintf_r+0xd1e>
   20f5c:	2330      	movs	r3, #48	; 0x30
   20f5e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   20f62:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   20f66:	e0ac      	b.n	210c2 <_svfprintf_r+0x6e2>
   20f68:	f018 0f20 	tst.w	r8, #32
   20f6c:	f040 83d4 	bne.w	21718 <_svfprintf_r+0xd38>
   20f70:	f018 0f10 	tst.w	r8, #16
   20f74:	f040 869f 	bne.w	21cb6 <_svfprintf_r+0x12d6>
   20f78:	f018 0f40 	tst.w	r8, #64	; 0x40
   20f7c:	f040 8797 	bne.w	21eae <_svfprintf_r+0x14ce>
   20f80:	f418 7f00 	tst.w	r8, #512	; 0x200
   20f84:	f000 8697 	beq.w	21cb6 <_svfprintf_r+0x12d6>
   20f88:	9b08      	ldr	r3, [sp, #32]
   20f8a:	9904      	ldr	r1, [sp, #16]
   20f8c:	f853 2b04 	ldr.w	r2, [r3], #4
   20f90:	9308      	str	r3, [sp, #32]
   20f92:	7011      	strb	r1, [r2, #0]
   20f94:	464c      	mov	r4, r9
   20f96:	e555      	b.n	20a44 <_svfprintf_r+0x64>
   20f98:	f899 3000 	ldrb.w	r3, [r9]
   20f9c:	2b68      	cmp	r3, #104	; 0x68
   20f9e:	bf03      	ittte	eq
   20fa0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   20fa4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   20fa8:	f109 0901 	addeq.w	r9, r9, #1
   20fac:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   20fb0:	e572      	b.n	20a98 <_svfprintf_r+0xb8>
   20fb2:	f899 3000 	ldrb.w	r3, [r9]
   20fb6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   20fba:	e56d      	b.n	20a98 <_svfprintf_r+0xb8>
   20fbc:	f899 3000 	ldrb.w	r3, [r9]
   20fc0:	2b6c      	cmp	r3, #108	; 0x6c
   20fc2:	bf03      	ittte	eq
   20fc4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   20fc8:	f048 0820 	orreq.w	r8, r8, #32
   20fcc:	f109 0901 	addeq.w	r9, r9, #1
   20fd0:	f048 0810 	orrne.w	r8, r8, #16
   20fd4:	e560      	b.n	20a98 <_svfprintf_r+0xb8>
   20fd6:	930b      	str	r3, [sp, #44]	; 0x2c
   20fd8:	f048 0810 	orr.w	r8, r8, #16
   20fdc:	f018 0120 	ands.w	r1, r8, #32
   20fe0:	f000 8351 	beq.w	21686 <_svfprintf_r+0xca6>
   20fe4:	9b08      	ldr	r3, [sp, #32]
   20fe6:	3307      	adds	r3, #7
   20fe8:	f023 0307 	bic.w	r3, r3, #7
   20fec:	6859      	ldr	r1, [r3, #4]
   20fee:	f853 2b08 	ldr.w	r2, [r3], #8
   20ff2:	9308      	str	r3, [sp, #32]
   20ff4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   20ff8:	9302      	str	r3, [sp, #8]
   20ffa:	2300      	movs	r3, #0
   20ffc:	e795      	b.n	20f2a <_svfprintf_r+0x54a>
   20ffe:	930b      	str	r3, [sp, #44]	; 0x2c
   21000:	f048 0310 	orr.w	r3, r8, #16
   21004:	9302      	str	r3, [sp, #8]
   21006:	9b02      	ldr	r3, [sp, #8]
   21008:	f013 0120 	ands.w	r1, r3, #32
   2100c:	f000 8329 	beq.w	21662 <_svfprintf_r+0xc82>
   21010:	9b08      	ldr	r3, [sp, #32]
   21012:	3307      	adds	r3, #7
   21014:	f023 0307 	bic.w	r3, r3, #7
   21018:	6859      	ldr	r1, [r3, #4]
   2101a:	f853 2b08 	ldr.w	r2, [r3], #8
   2101e:	9308      	str	r3, [sp, #32]
   21020:	2301      	movs	r3, #1
   21022:	e782      	b.n	20f2a <_svfprintf_r+0x54a>
   21024:	f899 3000 	ldrb.w	r3, [r9]
   21028:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   2102c:	e534      	b.n	20a98 <_svfprintf_r+0xb8>
   2102e:	bf00      	nop
   21030:	20002b28 	.word	0x20002b28
   21034:	20002b2c 	.word	0x20002b2c
   21038:	20002b38 	.word	0x20002b38
   2103c:	4649      	mov	r1, r9
   2103e:	f811 3b01 	ldrb.w	r3, [r1], #1
   21042:	2b2a      	cmp	r3, #42	; 0x2a
   21044:	f001 8249 	beq.w	224da <_svfprintf_r+0x1afa>
   21048:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2104c:	2a09      	cmp	r2, #9
   2104e:	4689      	mov	r9, r1
   21050:	bf98      	it	ls
   21052:	2100      	movls	r1, #0
   21054:	f201 8144 	bhi.w	222e0 <_svfprintf_r+0x1900>
   21058:	f819 3b01 	ldrb.w	r3, [r9], #1
   2105c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   21060:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   21064:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   21068:	2a09      	cmp	r2, #9
   2106a:	d9f5      	bls.n	21058 <_svfprintf_r+0x678>
   2106c:	9103      	str	r1, [sp, #12]
   2106e:	e515      	b.n	20a9c <_svfprintf_r+0xbc>
   21070:	f899 3000 	ldrb.w	r3, [r9]
   21074:	f048 0801 	orr.w	r8, r8, #1
   21078:	e50e      	b.n	20a98 <_svfprintf_r+0xb8>
   2107a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   2107e:	2b00      	cmp	r3, #0
   21080:	f47f ad8f 	bne.w	20ba2 <_svfprintf_r+0x1c2>
   21084:	f899 3000 	ldrb.w	r3, [r9]
   21088:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   2108c:	e504      	b.n	20a98 <_svfprintf_r+0xb8>
   2108e:	f8cd 8008 	str.w	r8, [sp, #8]
   21092:	2b01      	cmp	r3, #1
   21094:	f000 819d 	beq.w	213d2 <_svfprintf_r+0x9f2>
   21098:	2b02      	cmp	r3, #2
   2109a:	ac50      	add	r4, sp, #320	; 0x140
   2109c:	d120      	bne.n	210e0 <_svfprintf_r+0x700>
   2109e:	9811      	ldr	r0, [sp, #68]	; 0x44
   210a0:	f002 030f 	and.w	r3, r2, #15
   210a4:	0912      	lsrs	r2, r2, #4
   210a6:	5cc3      	ldrb	r3, [r0, r3]
   210a8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   210ac:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   210b0:	0909      	lsrs	r1, r1, #4
   210b2:	ea52 0301 	orrs.w	r3, r2, r1
   210b6:	d1f3      	bne.n	210a0 <_svfprintf_r+0x6c0>
   210b8:	ab50      	add	r3, sp, #320	; 0x140
   210ba:	1b1b      	subs	r3, r3, r4
   210bc:	f8dd 8008 	ldr.w	r8, [sp, #8]
   210c0:	9305      	str	r3, [sp, #20]
   210c2:	9a05      	ldr	r2, [sp, #20]
   210c4:	9803      	ldr	r0, [sp, #12]
   210c6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   210ca:	4282      	cmp	r2, r0
   210cc:	f04f 0300 	mov.w	r3, #0
   210d0:	bfb8      	it	lt
   210d2:	4602      	movlt	r2, r0
   210d4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   210d8:	9307      	str	r3, [sp, #28]
   210da:	9202      	str	r2, [sp, #8]
   210dc:	930f      	str	r3, [sp, #60]	; 0x3c
   210de:	e660      	b.n	20da2 <_svfprintf_r+0x3c2>
   210e0:	f002 0307 	and.w	r3, r2, #7
   210e4:	08d2      	lsrs	r2, r2, #3
   210e6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   210ea:	08c9      	lsrs	r1, r1, #3
   210ec:	3330      	adds	r3, #48	; 0x30
   210ee:	ea52 0501 	orrs.w	r5, r2, r1
   210f2:	4620      	mov	r0, r4
   210f4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   210f8:	d1f2      	bne.n	210e0 <_svfprintf_r+0x700>
   210fa:	9a02      	ldr	r2, [sp, #8]
   210fc:	07d1      	lsls	r1, r2, #31
   210fe:	f100 824d 	bmi.w	2159c <_svfprintf_r+0xbbc>
   21102:	ab50      	add	r3, sp, #320	; 0x140
   21104:	1b1b      	subs	r3, r3, r4
   21106:	4690      	mov	r8, r2
   21108:	9305      	str	r3, [sp, #20]
   2110a:	e7da      	b.n	210c2 <_svfprintf_r+0x6e2>
   2110c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2110e:	2b65      	cmp	r3, #101	; 0x65
   21110:	f340 80d4 	ble.w	212bc <_svfprintf_r+0x8dc>
   21114:	eeb5 8b40 	vcmp.f64	d8, #0.0
   21118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2111c:	f040 81c1 	bne.w	214a2 <_svfprintf_r+0xac2>
   21120:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21122:	49ba      	ldr	r1, [pc, #744]	; (2140c <_svfprintf_r+0xa2c>)
   21124:	f8ca 1000 	str.w	r1, [sl]
   21128:	3301      	adds	r3, #1
   2112a:	3201      	adds	r2, #1
   2112c:	2101      	movs	r1, #1
   2112e:	2b07      	cmp	r3, #7
   21130:	9226      	str	r2, [sp, #152]	; 0x98
   21132:	9325      	str	r3, [sp, #148]	; 0x94
   21134:	f8ca 1004 	str.w	r1, [sl, #4]
   21138:	f300 8551 	bgt.w	21bde <_svfprintf_r+0x11fe>
   2113c:	f10a 0a08 	add.w	sl, sl, #8
   21140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21142:	990e      	ldr	r1, [sp, #56]	; 0x38
   21144:	428b      	cmp	r3, r1
   21146:	f280 82d0 	bge.w	216ea <_svfprintf_r+0xd0a>
   2114a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2114c:	9912      	ldr	r1, [sp, #72]	; 0x48
   2114e:	441a      	add	r2, r3
   21150:	e9ca 1300 	strd	r1, r3, [sl]
   21154:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21156:	9226      	str	r2, [sp, #152]	; 0x98
   21158:	3301      	adds	r3, #1
   2115a:	2b07      	cmp	r3, #7
   2115c:	9325      	str	r3, [sp, #148]	; 0x94
   2115e:	f300 8397 	bgt.w	21890 <_svfprintf_r+0xeb0>
   21162:	f10a 0a08 	add.w	sl, sl, #8
   21166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21168:	1e5c      	subs	r4, r3, #1
   2116a:	2c00      	cmp	r4, #0
   2116c:	f77f add0 	ble.w	20d10 <_svfprintf_r+0x330>
   21170:	2c10      	cmp	r4, #16
   21172:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21174:	f340 856e 	ble.w	21c54 <_svfprintf_r+0x1274>
   21178:	ee1b 6a10 	vmov	r6, s22
   2117c:	2510      	movs	r5, #16
   2117e:	e005      	b.n	2118c <_svfprintf_r+0x7ac>
   21180:	f10a 0a08 	add.w	sl, sl, #8
   21184:	3c10      	subs	r4, #16
   21186:	2c10      	cmp	r4, #16
   21188:	f340 8564 	ble.w	21c54 <_svfprintf_r+0x1274>
   2118c:	3301      	adds	r3, #1
   2118e:	49a0      	ldr	r1, [pc, #640]	; (21410 <_svfprintf_r+0xa30>)
   21190:	3210      	adds	r2, #16
   21192:	2b07      	cmp	r3, #7
   21194:	e9ca 1500 	strd	r1, r5, [sl]
   21198:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2119c:	ddf0      	ble.n	21180 <_svfprintf_r+0x7a0>
   2119e:	aa24      	add	r2, sp, #144	; 0x90
   211a0:	4631      	mov	r1, r6
   211a2:	4658      	mov	r0, fp
   211a4:	f003 f986 	bl	244b4 <__ssprint_r>
   211a8:	2800      	cmp	r0, #0
   211aa:	d17e      	bne.n	212aa <_svfprintf_r+0x8ca>
   211ac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   211b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   211b4:	e7e6      	b.n	21184 <_svfprintf_r+0x7a4>
   211b6:	9b06      	ldr	r3, [sp, #24]
   211b8:	9902      	ldr	r1, [sp, #8]
   211ba:	1a5d      	subs	r5, r3, r1
   211bc:	2d00      	cmp	r5, #0
   211be:	f77f ad8e 	ble.w	20cde <_svfprintf_r+0x2fe>
   211c2:	2d10      	cmp	r5, #16
   211c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   211c6:	dd21      	ble.n	2120c <_svfprintf_r+0x82c>
   211c8:	9409      	str	r4, [sp, #36]	; 0x24
   211ca:	2610      	movs	r6, #16
   211cc:	ee1b 4a10 	vmov	r4, s22
   211d0:	e004      	b.n	211dc <_svfprintf_r+0x7fc>
   211d2:	3d10      	subs	r5, #16
   211d4:	2d10      	cmp	r5, #16
   211d6:	f10a 0a08 	add.w	sl, sl, #8
   211da:	dd16      	ble.n	2120a <_svfprintf_r+0x82a>
   211dc:	3301      	adds	r3, #1
   211de:	498c      	ldr	r1, [pc, #560]	; (21410 <_svfprintf_r+0xa30>)
   211e0:	3210      	adds	r2, #16
   211e2:	2b07      	cmp	r3, #7
   211e4:	e9ca 1600 	strd	r1, r6, [sl]
   211e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   211ec:	ddf1      	ble.n	211d2 <_svfprintf_r+0x7f2>
   211ee:	aa24      	add	r2, sp, #144	; 0x90
   211f0:	4621      	mov	r1, r4
   211f2:	4658      	mov	r0, fp
   211f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   211f8:	f003 f95c 	bl	244b4 <__ssprint_r>
   211fc:	2800      	cmp	r0, #0
   211fe:	d154      	bne.n	212aa <_svfprintf_r+0x8ca>
   21200:	3d10      	subs	r5, #16
   21202:	2d10      	cmp	r5, #16
   21204:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21208:	dce8      	bgt.n	211dc <_svfprintf_r+0x7fc>
   2120a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2120c:	4980      	ldr	r1, [pc, #512]	; (21410 <_svfprintf_r+0xa30>)
   2120e:	f8ca 5004 	str.w	r5, [sl, #4]
   21212:	3301      	adds	r3, #1
   21214:	442a      	add	r2, r5
   21216:	2b07      	cmp	r3, #7
   21218:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2121c:	f8ca 1000 	str.w	r1, [sl]
   21220:	f300 8526 	bgt.w	21c70 <_svfprintf_r+0x1290>
   21224:	9b03      	ldr	r3, [sp, #12]
   21226:	9905      	ldr	r1, [sp, #20]
   21228:	1a5d      	subs	r5, r3, r1
   2122a:	2d00      	cmp	r5, #0
   2122c:	f10a 0a08 	add.w	sl, sl, #8
   21230:	f77f ad5b 	ble.w	20cea <_svfprintf_r+0x30a>
   21234:	2d10      	cmp	r5, #16
   21236:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21238:	dd1f      	ble.n	2127a <_svfprintf_r+0x89a>
   2123a:	4651      	mov	r1, sl
   2123c:	2610      	movs	r6, #16
   2123e:	ee1b aa10 	vmov	sl, s22
   21242:	e004      	b.n	2124e <_svfprintf_r+0x86e>
   21244:	3d10      	subs	r5, #16
   21246:	2d10      	cmp	r5, #16
   21248:	f101 0108 	add.w	r1, r1, #8
   2124c:	dd14      	ble.n	21278 <_svfprintf_r+0x898>
   2124e:	3301      	adds	r3, #1
   21250:	486f      	ldr	r0, [pc, #444]	; (21410 <_svfprintf_r+0xa30>)
   21252:	3210      	adds	r2, #16
   21254:	2b07      	cmp	r3, #7
   21256:	e9c1 0600 	strd	r0, r6, [r1]
   2125a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2125e:	ddf1      	ble.n	21244 <_svfprintf_r+0x864>
   21260:	aa24      	add	r2, sp, #144	; 0x90
   21262:	4651      	mov	r1, sl
   21264:	4658      	mov	r0, fp
   21266:	f003 f925 	bl	244b4 <__ssprint_r>
   2126a:	b9f0      	cbnz	r0, 212aa <_svfprintf_r+0x8ca>
   2126c:	3d10      	subs	r5, #16
   2126e:	2d10      	cmp	r5, #16
   21270:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21274:	a927      	add	r1, sp, #156	; 0x9c
   21276:	dcea      	bgt.n	2124e <_svfprintf_r+0x86e>
   21278:	468a      	mov	sl, r1
   2127a:	3301      	adds	r3, #1
   2127c:	4964      	ldr	r1, [pc, #400]	; (21410 <_svfprintf_r+0xa30>)
   2127e:	f8ca 5004 	str.w	r5, [sl, #4]
   21282:	442a      	add	r2, r5
   21284:	2b07      	cmp	r3, #7
   21286:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2128a:	f8ca 1000 	str.w	r1, [sl]
   2128e:	f300 81da 	bgt.w	21646 <_svfprintf_r+0xc66>
   21292:	f10a 0a08 	add.w	sl, sl, #8
   21296:	e528      	b.n	20cea <_svfprintf_r+0x30a>
   21298:	ee1b 1a10 	vmov	r1, s22
   2129c:	aa24      	add	r2, sp, #144	; 0x90
   2129e:	4658      	mov	r0, fp
   212a0:	f003 f908 	bl	244b4 <__ssprint_r>
   212a4:	2800      	cmp	r0, #0
   212a6:	f43f ad47 	beq.w	20d38 <_svfprintf_r+0x358>
   212aa:	9b07      	ldr	r3, [sp, #28]
   212ac:	2b00      	cmp	r3, #0
   212ae:	f43f aca2 	beq.w	20bf6 <_svfprintf_r+0x216>
   212b2:	9907      	ldr	r1, [sp, #28]
   212b4:	4658      	mov	r0, fp
   212b6:	f7fe fe65 	bl	1ff84 <_free_r>
   212ba:	e49c      	b.n	20bf6 <_svfprintf_r+0x216>
   212bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   212be:	2b01      	cmp	r3, #1
   212c0:	f340 817a 	ble.w	215b8 <_svfprintf_r+0xbd8>
   212c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   212c6:	f8ca 4000 	str.w	r4, [sl]
   212ca:	3301      	adds	r3, #1
   212cc:	3201      	adds	r2, #1
   212ce:	2101      	movs	r1, #1
   212d0:	2b07      	cmp	r3, #7
   212d2:	9226      	str	r2, [sp, #152]	; 0x98
   212d4:	9325      	str	r3, [sp, #148]	; 0x94
   212d6:	f8ca 1004 	str.w	r1, [sl, #4]
   212da:	f300 81f8 	bgt.w	216ce <_svfprintf_r+0xcee>
   212de:	f10a 0a08 	add.w	sl, sl, #8
   212e2:	9910      	ldr	r1, [sp, #64]	; 0x40
   212e4:	9812      	ldr	r0, [sp, #72]	; 0x48
   212e6:	3301      	adds	r3, #1
   212e8:	440a      	add	r2, r1
   212ea:	2b07      	cmp	r3, #7
   212ec:	e9ca 0100 	strd	r0, r1, [sl]
   212f0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   212f4:	f300 81dd 	bgt.w	216b2 <_svfprintf_r+0xcd2>
   212f8:	f10a 0a08 	add.w	sl, sl, #8
   212fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   21300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21304:	f000 8177 	beq.w	215f6 <_svfprintf_r+0xc16>
   21308:	990e      	ldr	r1, [sp, #56]	; 0x38
   2130a:	3301      	adds	r3, #1
   2130c:	3901      	subs	r1, #1
   2130e:	3401      	adds	r4, #1
   21310:	440a      	add	r2, r1
   21312:	2b07      	cmp	r3, #7
   21314:	f8ca 4000 	str.w	r4, [sl]
   21318:	9325      	str	r3, [sp, #148]	; 0x94
   2131a:	f8ca 1004 	str.w	r1, [sl, #4]
   2131e:	9226      	str	r2, [sp, #152]	; 0x98
   21320:	f300 815b 	bgt.w	215da <_svfprintf_r+0xbfa>
   21324:	f10a 0a08 	add.w	sl, sl, #8
   21328:	9914      	ldr	r1, [sp, #80]	; 0x50
   2132a:	f8ca 1004 	str.w	r1, [sl, #4]
   2132e:	3301      	adds	r3, #1
   21330:	440a      	add	r2, r1
   21332:	2b07      	cmp	r3, #7
   21334:	a91e      	add	r1, sp, #120	; 0x78
   21336:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2133a:	f8ca 1000 	str.w	r1, [sl]
   2133e:	f77f ace5 	ble.w	20d0c <_svfprintf_r+0x32c>
   21342:	ee1b 1a10 	vmov	r1, s22
   21346:	aa24      	add	r2, sp, #144	; 0x90
   21348:	4658      	mov	r0, fp
   2134a:	f003 f8b3 	bl	244b4 <__ssprint_r>
   2134e:	2800      	cmp	r0, #0
   21350:	d1ab      	bne.n	212aa <_svfprintf_r+0x8ca>
   21352:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21354:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21358:	e4da      	b.n	20d10 <_svfprintf_r+0x330>
   2135a:	2d10      	cmp	r5, #16
   2135c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   21360:	4e2c      	ldr	r6, [pc, #176]	; (21414 <_svfprintf_r+0xa34>)
   21362:	dd24      	ble.n	213ae <_svfprintf_r+0x9ce>
   21364:	9417      	str	r4, [sp, #92]	; 0x5c
   21366:	2310      	movs	r3, #16
   21368:	ee1b 4a10 	vmov	r4, s22
   2136c:	4608      	mov	r0, r1
   2136e:	e004      	b.n	2137a <_svfprintf_r+0x99a>
   21370:	3d10      	subs	r5, #16
   21372:	2d10      	cmp	r5, #16
   21374:	f10a 0a08 	add.w	sl, sl, #8
   21378:	dd17      	ble.n	213aa <_svfprintf_r+0x9ca>
   2137a:	3001      	adds	r0, #1
   2137c:	3210      	adds	r2, #16
   2137e:	2807      	cmp	r0, #7
   21380:	e9ca 6300 	strd	r6, r3, [sl]
   21384:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   21388:	ddf2      	ble.n	21370 <_svfprintf_r+0x990>
   2138a:	aa24      	add	r2, sp, #144	; 0x90
   2138c:	4621      	mov	r1, r4
   2138e:	4658      	mov	r0, fp
   21390:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21394:	f003 f88e 	bl	244b4 <__ssprint_r>
   21398:	2800      	cmp	r0, #0
   2139a:	d186      	bne.n	212aa <_svfprintf_r+0x8ca>
   2139c:	3d10      	subs	r5, #16
   2139e:	2d10      	cmp	r5, #16
   213a0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   213a4:	f04f 0310 	mov.w	r3, #16
   213a8:	dce7      	bgt.n	2137a <_svfprintf_r+0x99a>
   213aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   213ac:	4601      	mov	r1, r0
   213ae:	3101      	adds	r1, #1
   213b0:	442a      	add	r2, r5
   213b2:	2907      	cmp	r1, #7
   213b4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   213b8:	f8ca 6000 	str.w	r6, [sl]
   213bc:	f8ca 5004 	str.w	r5, [sl, #4]
   213c0:	f300 83bd 	bgt.w	21b3e <_svfprintf_r+0x115e>
   213c4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   213c8:	f10a 0a08 	add.w	sl, sl, #8
   213cc:	e45d      	b.n	20c8a <_svfprintf_r+0x2aa>
   213ce:	f8cd 8008 	str.w	r8, [sp, #8]
   213d2:	2a0a      	cmp	r2, #10
   213d4:	f171 0300 	sbcs.w	r3, r1, #0
   213d8:	f080 8345 	bcs.w	21a66 <_svfprintf_r+0x1086>
   213dc:	3230      	adds	r2, #48	; 0x30
   213de:	2301      	movs	r3, #1
   213e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   213e4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   213e8:	9305      	str	r3, [sp, #20]
   213ea:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   213ee:	e668      	b.n	210c2 <_svfprintf_r+0x6e2>
   213f0:	ee1b 1a10 	vmov	r1, s22
   213f4:	aa24      	add	r2, sp, #144	; 0x90
   213f6:	4658      	mov	r0, fp
   213f8:	f003 f85c 	bl	244b4 <__ssprint_r>
   213fc:	2800      	cmp	r0, #0
   213fe:	f47f af54 	bne.w	212aa <_svfprintf_r+0x8ca>
   21402:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21404:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21408:	e452      	b.n	20cb0 <_svfprintf_r+0x2d0>
   2140a:	bf00      	nop
   2140c:	20002234 	.word	0x20002234
   21410:	20003514 	.word	0x20003514
   21414:	20002b68 	.word	0x20002b68
   21418:	ee1b 1a10 	vmov	r1, s22
   2141c:	aa24      	add	r2, sp, #144	; 0x90
   2141e:	4658      	mov	r0, fp
   21420:	f003 f848 	bl	244b4 <__ssprint_r>
   21424:	2800      	cmp	r0, #0
   21426:	f47f af40 	bne.w	212aa <_svfprintf_r+0x8ca>
   2142a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2142c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21430:	e451      	b.n	20cd6 <_svfprintf_r+0x2f6>
   21432:	2c10      	cmp	r4, #16
   21434:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21436:	4ebe      	ldr	r6, [pc, #760]	; (21730 <_svfprintf_r+0xd50>)
   21438:	dd1f      	ble.n	2147a <_svfprintf_r+0xa9a>
   2143a:	ee1b 8a10 	vmov	r8, s22
   2143e:	2510      	movs	r5, #16
   21440:	e004      	b.n	2144c <_svfprintf_r+0xa6c>
   21442:	3c10      	subs	r4, #16
   21444:	2c10      	cmp	r4, #16
   21446:	f10a 0a08 	add.w	sl, sl, #8
   2144a:	dd16      	ble.n	2147a <_svfprintf_r+0xa9a>
   2144c:	3301      	adds	r3, #1
   2144e:	3210      	adds	r2, #16
   21450:	2b07      	cmp	r3, #7
   21452:	e9ca 6500 	strd	r6, r5, [sl]
   21456:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2145a:	ddf2      	ble.n	21442 <_svfprintf_r+0xa62>
   2145c:	aa24      	add	r2, sp, #144	; 0x90
   2145e:	4641      	mov	r1, r8
   21460:	4658      	mov	r0, fp
   21462:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21466:	f003 f825 	bl	244b4 <__ssprint_r>
   2146a:	2800      	cmp	r0, #0
   2146c:	f47f af1d 	bne.w	212aa <_svfprintf_r+0x8ca>
   21470:	3c10      	subs	r4, #16
   21472:	2c10      	cmp	r4, #16
   21474:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21478:	dce8      	bgt.n	2144c <_svfprintf_r+0xa6c>
   2147a:	3301      	adds	r3, #1
   2147c:	4422      	add	r2, r4
   2147e:	2b07      	cmp	r3, #7
   21480:	e9ca 6400 	strd	r6, r4, [sl]
   21484:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21488:	f77f ac4b 	ble.w	20d22 <_svfprintf_r+0x342>
   2148c:	ee1b 1a10 	vmov	r1, s22
   21490:	aa24      	add	r2, sp, #144	; 0x90
   21492:	4658      	mov	r0, fp
   21494:	f003 f80e 	bl	244b4 <__ssprint_r>
   21498:	2800      	cmp	r0, #0
   2149a:	f47f af06 	bne.w	212aa <_svfprintf_r+0x8ca>
   2149e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   214a0:	e43f      	b.n	20d22 <_svfprintf_r+0x342>
   214a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   214a4:	2900      	cmp	r1, #0
   214a6:	f340 835a 	ble.w	21b5e <_svfprintf_r+0x117e>
   214aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   214ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   214ae:	429e      	cmp	r6, r3
   214b0:	bfa8      	it	ge
   214b2:	461e      	movge	r6, r3
   214b4:	2e00      	cmp	r6, #0
   214b6:	dd0b      	ble.n	214d0 <_svfprintf_r+0xaf0>
   214b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   214ba:	3301      	adds	r3, #1
   214bc:	4432      	add	r2, r6
   214be:	2b07      	cmp	r3, #7
   214c0:	e9ca 4600 	strd	r4, r6, [sl]
   214c4:	9226      	str	r2, [sp, #152]	; 0x98
   214c6:	9325      	str	r3, [sp, #148]	; 0x94
   214c8:	f300 8689 	bgt.w	221de <_svfprintf_r+0x17fe>
   214cc:	f10a 0a08 	add.w	sl, sl, #8
   214d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   214d2:	2e00      	cmp	r6, #0
   214d4:	bfa8      	it	ge
   214d6:	1bad      	subge	r5, r5, r6
   214d8:	2d00      	cmp	r5, #0
   214da:	f300 8203 	bgt.w	218e4 <_svfprintf_r+0xf04>
   214de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   214e0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   214e4:	4423      	add	r3, r4
   214e6:	9305      	str	r3, [sp, #20]
   214e8:	f040 821f 	bne.w	2192a <_svfprintf_r+0xf4a>
   214ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   214ee:	990e      	ldr	r1, [sp, #56]	; 0x38
   214f0:	428b      	cmp	r3, r1
   214f2:	db03      	blt.n	214fc <_svfprintf_r+0xb1c>
   214f4:	f018 0f01 	tst.w	r8, #1
   214f8:	f000 84cf 	beq.w	21e9a <_svfprintf_r+0x14ba>
   214fc:	9910      	ldr	r1, [sp, #64]	; 0x40
   214fe:	9812      	ldr	r0, [sp, #72]	; 0x48
   21500:	440a      	add	r2, r1
   21502:	e9ca 0100 	strd	r0, r1, [sl]
   21506:	9925      	ldr	r1, [sp, #148]	; 0x94
   21508:	9226      	str	r2, [sp, #152]	; 0x98
   2150a:	3101      	adds	r1, #1
   2150c:	2907      	cmp	r1, #7
   2150e:	9125      	str	r1, [sp, #148]	; 0x94
   21510:	f300 86a5 	bgt.w	2225e <_svfprintf_r+0x187e>
   21514:	f10a 0a08 	add.w	sl, sl, #8
   21518:	990e      	ldr	r1, [sp, #56]	; 0x38
   2151a:	1865      	adds	r5, r4, r1
   2151c:	1acc      	subs	r4, r1, r3
   2151e:	9b05      	ldr	r3, [sp, #20]
   21520:	1aed      	subs	r5, r5, r3
   21522:	42a5      	cmp	r5, r4
   21524:	bfa8      	it	ge
   21526:	4625      	movge	r5, r4
   21528:	2d00      	cmp	r5, #0
   2152a:	dd0d      	ble.n	21548 <_svfprintf_r+0xb68>
   2152c:	f8ca 3000 	str.w	r3, [sl]
   21530:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21532:	f8ca 5004 	str.w	r5, [sl, #4]
   21536:	3301      	adds	r3, #1
   21538:	442a      	add	r2, r5
   2153a:	2b07      	cmp	r3, #7
   2153c:	9226      	str	r2, [sp, #152]	; 0x98
   2153e:	9325      	str	r3, [sp, #148]	; 0x94
   21540:	f300 86bb 	bgt.w	222ba <_svfprintf_r+0x18da>
   21544:	f10a 0a08 	add.w	sl, sl, #8
   21548:	2d00      	cmp	r5, #0
   2154a:	bfa8      	it	ge
   2154c:	1b64      	subge	r4, r4, r5
   2154e:	2c00      	cmp	r4, #0
   21550:	f77f abde 	ble.w	20d10 <_svfprintf_r+0x330>
   21554:	2c10      	cmp	r4, #16
   21556:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21558:	f340 837c 	ble.w	21c54 <_svfprintf_r+0x1274>
   2155c:	ee1b 6a10 	vmov	r6, s22
   21560:	2510      	movs	r5, #16
   21562:	e005      	b.n	21570 <_svfprintf_r+0xb90>
   21564:	f10a 0a08 	add.w	sl, sl, #8
   21568:	3c10      	subs	r4, #16
   2156a:	2c10      	cmp	r4, #16
   2156c:	f340 8372 	ble.w	21c54 <_svfprintf_r+0x1274>
   21570:	3301      	adds	r3, #1
   21572:	4970      	ldr	r1, [pc, #448]	; (21734 <_svfprintf_r+0xd54>)
   21574:	3210      	adds	r2, #16
   21576:	2b07      	cmp	r3, #7
   21578:	e9ca 1500 	strd	r1, r5, [sl]
   2157c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21580:	ddf0      	ble.n	21564 <_svfprintf_r+0xb84>
   21582:	aa24      	add	r2, sp, #144	; 0x90
   21584:	4631      	mov	r1, r6
   21586:	4658      	mov	r0, fp
   21588:	f002 ff94 	bl	244b4 <__ssprint_r>
   2158c:	2800      	cmp	r0, #0
   2158e:	f47f ae8c 	bne.w	212aa <_svfprintf_r+0x8ca>
   21592:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21596:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2159a:	e7e5      	b.n	21568 <_svfprintf_r+0xb88>
   2159c:	2b30      	cmp	r3, #48	; 0x30
   2159e:	f43f ad8b 	beq.w	210b8 <_svfprintf_r+0x6d8>
   215a2:	2330      	movs	r3, #48	; 0x30
   215a4:	3802      	subs	r0, #2
   215a6:	f804 3c01 	strb.w	r3, [r4, #-1]
   215aa:	ab50      	add	r3, sp, #320	; 0x140
   215ac:	1a1b      	subs	r3, r3, r0
   215ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
   215b2:	9305      	str	r3, [sp, #20]
   215b4:	4604      	mov	r4, r0
   215b6:	e584      	b.n	210c2 <_svfprintf_r+0x6e2>
   215b8:	f018 0f01 	tst.w	r8, #1
   215bc:	f47f ae82 	bne.w	212c4 <_svfprintf_r+0x8e4>
   215c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   215c2:	f8ca 4000 	str.w	r4, [sl]
   215c6:	3301      	adds	r3, #1
   215c8:	3201      	adds	r2, #1
   215ca:	2101      	movs	r1, #1
   215cc:	2b07      	cmp	r3, #7
   215ce:	9226      	str	r2, [sp, #152]	; 0x98
   215d0:	9325      	str	r3, [sp, #148]	; 0x94
   215d2:	f8ca 1004 	str.w	r1, [sl, #4]
   215d6:	f77f aea5 	ble.w	21324 <_svfprintf_r+0x944>
   215da:	ee1b 1a10 	vmov	r1, s22
   215de:	aa24      	add	r2, sp, #144	; 0x90
   215e0:	4658      	mov	r0, fp
   215e2:	f002 ff67 	bl	244b4 <__ssprint_r>
   215e6:	2800      	cmp	r0, #0
   215e8:	f47f ae5f 	bne.w	212aa <_svfprintf_r+0x8ca>
   215ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   215f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   215f4:	e698      	b.n	21328 <_svfprintf_r+0x948>
   215f6:	990e      	ldr	r1, [sp, #56]	; 0x38
   215f8:	1e4c      	subs	r4, r1, #1
   215fa:	2c00      	cmp	r4, #0
   215fc:	f77f ae94 	ble.w	21328 <_svfprintf_r+0x948>
   21600:	2c10      	cmp	r4, #16
   21602:	f340 8361 	ble.w	21cc8 <_svfprintf_r+0x12e8>
   21606:	ee1b 6a10 	vmov	r6, s22
   2160a:	2510      	movs	r5, #16
   2160c:	e005      	b.n	2161a <_svfprintf_r+0xc3a>
   2160e:	f10a 0a08 	add.w	sl, sl, #8
   21612:	3c10      	subs	r4, #16
   21614:	2c10      	cmp	r4, #16
   21616:	f340 8357 	ble.w	21cc8 <_svfprintf_r+0x12e8>
   2161a:	3301      	adds	r3, #1
   2161c:	4945      	ldr	r1, [pc, #276]	; (21734 <_svfprintf_r+0xd54>)
   2161e:	3210      	adds	r2, #16
   21620:	2b07      	cmp	r3, #7
   21622:	e9ca 1500 	strd	r1, r5, [sl]
   21626:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2162a:	ddf0      	ble.n	2160e <_svfprintf_r+0xc2e>
   2162c:	aa24      	add	r2, sp, #144	; 0x90
   2162e:	4631      	mov	r1, r6
   21630:	4658      	mov	r0, fp
   21632:	f002 ff3f 	bl	244b4 <__ssprint_r>
   21636:	2800      	cmp	r0, #0
   21638:	f47f ae37 	bne.w	212aa <_svfprintf_r+0x8ca>
   2163c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21640:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21644:	e7e5      	b.n	21612 <_svfprintf_r+0xc32>
   21646:	ee1b 1a10 	vmov	r1, s22
   2164a:	aa24      	add	r2, sp, #144	; 0x90
   2164c:	4658      	mov	r0, fp
   2164e:	f002 ff31 	bl	244b4 <__ssprint_r>
   21652:	2800      	cmp	r0, #0
   21654:	f47f ae29 	bne.w	212aa <_svfprintf_r+0x8ca>
   21658:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2165a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2165e:	f7ff bb44 	b.w	20cea <_svfprintf_r+0x30a>
   21662:	9b02      	ldr	r3, [sp, #8]
   21664:	f013 0310 	ands.w	r3, r3, #16
   21668:	f040 80c1 	bne.w	217ee <_svfprintf_r+0xe0e>
   2166c:	9a02      	ldr	r2, [sp, #8]
   2166e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   21672:	f000 837a 	beq.w	21d6a <_svfprintf_r+0x138a>
   21676:	9808      	ldr	r0, [sp, #32]
   21678:	f850 2b04 	ldr.w	r2, [r0], #4
   2167c:	9008      	str	r0, [sp, #32]
   2167e:	4619      	mov	r1, r3
   21680:	b292      	uxth	r2, r2
   21682:	2301      	movs	r3, #1
   21684:	e451      	b.n	20f2a <_svfprintf_r+0x54a>
   21686:	f018 0310 	ands.w	r3, r8, #16
   2168a:	d155      	bne.n	21738 <_svfprintf_r+0xd58>
   2168c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   21690:	f000 835d 	beq.w	21d4e <_svfprintf_r+0x136e>
   21694:	9808      	ldr	r0, [sp, #32]
   21696:	f850 2b04 	ldr.w	r2, [r0], #4
   2169a:	9008      	str	r0, [sp, #32]
   2169c:	4619      	mov	r1, r3
   2169e:	b292      	uxth	r2, r2
   216a0:	e4a8      	b.n	20ff4 <_svfprintf_r+0x614>
   216a2:	4252      	negs	r2, r2
   216a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   216a8:	f8cd 8008 	str.w	r8, [sp, #8]
   216ac:	202d      	movs	r0, #45	; 0x2d
   216ae:	2301      	movs	r3, #1
   216b0:	e43c      	b.n	20f2c <_svfprintf_r+0x54c>
   216b2:	ee1b 1a10 	vmov	r1, s22
   216b6:	aa24      	add	r2, sp, #144	; 0x90
   216b8:	4658      	mov	r0, fp
   216ba:	f002 fefb 	bl	244b4 <__ssprint_r>
   216be:	2800      	cmp	r0, #0
   216c0:	f47f adf3 	bne.w	212aa <_svfprintf_r+0x8ca>
   216c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   216c8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   216cc:	e616      	b.n	212fc <_svfprintf_r+0x91c>
   216ce:	ee1b 1a10 	vmov	r1, s22
   216d2:	aa24      	add	r2, sp, #144	; 0x90
   216d4:	4658      	mov	r0, fp
   216d6:	f002 feed 	bl	244b4 <__ssprint_r>
   216da:	2800      	cmp	r0, #0
   216dc:	f47f ade5 	bne.w	212aa <_svfprintf_r+0x8ca>
   216e0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   216e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   216e8:	e5fb      	b.n	212e2 <_svfprintf_r+0x902>
   216ea:	f018 0f01 	tst.w	r8, #1
   216ee:	f43f ab0f 	beq.w	20d10 <_svfprintf_r+0x330>
   216f2:	e52a      	b.n	2114a <_svfprintf_r+0x76a>
   216f4:	9308      	str	r3, [sp, #32]
   216f6:	f899 3000 	ldrb.w	r3, [r9]
   216fa:	f7ff b9cd 	b.w	20a98 <_svfprintf_r+0xb8>
   216fe:	ac50      	add	r4, sp, #320	; 0x140
   21700:	e4df      	b.n	210c2 <_svfprintf_r+0x6e2>
   21702:	f418 7f00 	tst.w	r8, #512	; 0x200
   21706:	f040 83db 	bne.w	21ec0 <_svfprintf_r+0x14e0>
   2170a:	f853 2b04 	ldr.w	r2, [r3], #4
   2170e:	9308      	str	r3, [sp, #32]
   21710:	17d1      	asrs	r1, r2, #31
   21712:	460b      	mov	r3, r1
   21714:	f7ff bbb6 	b.w	20e84 <_svfprintf_r+0x4a4>
   21718:	9b08      	ldr	r3, [sp, #32]
   2171a:	9804      	ldr	r0, [sp, #16]
   2171c:	f853 1b04 	ldr.w	r1, [r3], #4
   21720:	9308      	str	r3, [sp, #32]
   21722:	17c2      	asrs	r2, r0, #31
   21724:	e9c1 0200 	strd	r0, r2, [r1]
   21728:	464c      	mov	r4, r9
   2172a:	f7ff b98b 	b.w	20a44 <_svfprintf_r+0x64>
   2172e:	bf00      	nop
   21730:	20002b68 	.word	0x20002b68
   21734:	20003514 	.word	0x20003514
   21738:	9b08      	ldr	r3, [sp, #32]
   2173a:	f853 2b04 	ldr.w	r2, [r3], #4
   2173e:	9308      	str	r3, [sp, #32]
   21740:	e458      	b.n	20ff4 <_svfprintf_r+0x614>
   21742:	eeb4 8b48 	vcmp.f64	d8, d8
   21746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2174a:	f180 8694 	bvs.w	22476 <_svfprintf_r+0x1a96>
   2174e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21750:	2b61      	cmp	r3, #97	; 0x61
   21752:	f000 8552 	beq.w	221fa <_svfprintf_r+0x181a>
   21756:	2b41      	cmp	r3, #65	; 0x41
   21758:	f000 85c0 	beq.w	222dc <_svfprintf_r+0x18fc>
   2175c:	9b03      	ldr	r3, [sp, #12]
   2175e:	3301      	adds	r3, #1
   21760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21762:	f023 0520 	bic.w	r5, r3, #32
   21766:	f000 8480 	beq.w	2206a <_svfprintf_r+0x168a>
   2176a:	2d47      	cmp	r5, #71	; 0x47
   2176c:	d104      	bne.n	21778 <_svfprintf_r+0xd98>
   2176e:	9b03      	ldr	r3, [sp, #12]
   21770:	2b00      	cmp	r3, #0
   21772:	bf08      	it	eq
   21774:	2301      	moveq	r3, #1
   21776:	9303      	str	r3, [sp, #12]
   21778:	ee18 3a90 	vmov	r3, s17
   2177c:	2b00      	cmp	r3, #0
   2177e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   21782:	4646      	mov	r6, r8
   21784:	f2c0 8618 	blt.w	223b8 <_svfprintf_r+0x19d8>
   21788:	eeb0 ab48 	vmov.f64	d10, d8
   2178c:	2300      	movs	r3, #0
   2178e:	4690      	mov	r8, r2
   21790:	9309      	str	r3, [sp, #36]	; 0x24
   21792:	9307      	str	r3, [sp, #28]
   21794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21796:	3b41      	subs	r3, #65	; 0x41
   21798:	2b25      	cmp	r3, #37	; 0x25
   2179a:	f200 8398 	bhi.w	21ece <_svfprintf_r+0x14ee>
   2179e:	e8df f013 	tbh	[pc, r3, lsl #1]
   217a2:	046f      	.short	0x046f
   217a4:	03960396 	.word	0x03960396
   217a8:	04680396 	.word	0x04680396
   217ac:	0396046c 	.word	0x0396046c
   217b0:	03960396 	.word	0x03960396
   217b4:	03960396 	.word	0x03960396
   217b8:	03960396 	.word	0x03960396
   217bc:	03960396 	.word	0x03960396
   217c0:	03960396 	.word	0x03960396
   217c4:	03960396 	.word	0x03960396
   217c8:	03960396 	.word	0x03960396
   217cc:	03960396 	.word	0x03960396
   217d0:	03960396 	.word	0x03960396
   217d4:	03960396 	.word	0x03960396
   217d8:	03960396 	.word	0x03960396
   217dc:	03960396 	.word	0x03960396
   217e0:	03960396 	.word	0x03960396
   217e4:	03960396 	.word	0x03960396
   217e8:	04680396 	.word	0x04680396
   217ec:	046c      	.short	0x046c
   217ee:	9b08      	ldr	r3, [sp, #32]
   217f0:	f853 2b04 	ldr.w	r2, [r3], #4
   217f4:	9308      	str	r3, [sp, #32]
   217f6:	2301      	movs	r3, #1
   217f8:	f7ff bb97 	b.w	20f2a <_svfprintf_r+0x54a>
   217fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   217fe:	2b00      	cmp	r3, #0
   21800:	f43f a9cf 	beq.w	20ba2 <_svfprintf_r+0x1c2>
   21804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21806:	781b      	ldrb	r3, [r3, #0]
   21808:	2b00      	cmp	r3, #0
   2180a:	f43f a9ca 	beq.w	20ba2 <_svfprintf_r+0x1c2>
   2180e:	f899 3000 	ldrb.w	r3, [r9]
   21812:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   21816:	f7ff b93f 	b.w	20a98 <_svfprintf_r+0xb8>
   2181a:	930b      	str	r3, [sp, #44]	; 0x2c
   2181c:	f8cd 8008 	str.w	r8, [sp, #8]
   21820:	f7ff bbf1 	b.w	21006 <_svfprintf_r+0x626>
   21824:	930b      	str	r3, [sp, #44]	; 0x2c
   21826:	4b9a      	ldr	r3, [pc, #616]	; (21a90 <_svfprintf_r+0x10b0>)
   21828:	9311      	str	r3, [sp, #68]	; 0x44
   2182a:	f018 0120 	ands.w	r1, r8, #32
   2182e:	f000 8105 	beq.w	21a3c <_svfprintf_r+0x105c>
   21832:	9b08      	ldr	r3, [sp, #32]
   21834:	3307      	adds	r3, #7
   21836:	f023 0307 	bic.w	r3, r3, #7
   2183a:	6859      	ldr	r1, [r3, #4]
   2183c:	f853 2b08 	ldr.w	r2, [r3], #8
   21840:	9308      	str	r3, [sp, #32]
   21842:	f018 0f01 	tst.w	r8, #1
   21846:	d00a      	beq.n	2185e <_svfprintf_r+0xe7e>
   21848:	ea52 0301 	orrs.w	r3, r2, r1
   2184c:	d007      	beq.n	2185e <_svfprintf_r+0xe7e>
   2184e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21850:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   21854:	2330      	movs	r3, #48	; 0x30
   21856:	f048 0802 	orr.w	r8, r8, #2
   2185a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   2185e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   21862:	9302      	str	r3, [sp, #8]
   21864:	2302      	movs	r3, #2
   21866:	f7ff bb60 	b.w	20f2a <_svfprintf_r+0x54a>
   2186a:	930b      	str	r3, [sp, #44]	; 0x2c
   2186c:	f7ff bbb6 	b.w	20fdc <_svfprintf_r+0x5fc>
   21870:	930b      	str	r3, [sp, #44]	; 0x2c
   21872:	4b88      	ldr	r3, [pc, #544]	; (21a94 <_svfprintf_r+0x10b4>)
   21874:	9311      	str	r3, [sp, #68]	; 0x44
   21876:	e7d8      	b.n	2182a <_svfprintf_r+0xe4a>
   21878:	9b08      	ldr	r3, [sp, #32]
   2187a:	2101      	movs	r1, #1
   2187c:	f853 2b04 	ldr.w	r2, [r3], #4
   21880:	9102      	str	r1, [sp, #8]
   21882:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   21886:	9308      	str	r3, [sp, #32]
   21888:	9105      	str	r1, [sp, #20]
   2188a:	ac37      	add	r4, sp, #220	; 0xdc
   2188c:	f7ff baaf 	b.w	20dee <_svfprintf_r+0x40e>
   21890:	ee1b 1a10 	vmov	r1, s22
   21894:	aa24      	add	r2, sp, #144	; 0x90
   21896:	4658      	mov	r0, fp
   21898:	f002 fe0c 	bl	244b4 <__ssprint_r>
   2189c:	2800      	cmp	r0, #0
   2189e:	f47f ad04 	bne.w	212aa <_svfprintf_r+0x8ca>
   218a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   218a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   218a8:	e45d      	b.n	21166 <_svfprintf_r+0x786>
   218aa:	9b03      	ldr	r3, [sp, #12]
   218ac:	9407      	str	r4, [sp, #28]
   218ae:	2b06      	cmp	r3, #6
   218b0:	4622      	mov	r2, r4
   218b2:	bf28      	it	cs
   218b4:	2306      	movcs	r3, #6
   218b6:	9403      	str	r4, [sp, #12]
   218b8:	4621      	mov	r1, r4
   218ba:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   218be:	4c76      	ldr	r4, [pc, #472]	; (21a98 <_svfprintf_r+0x10b8>)
   218c0:	9302      	str	r3, [sp, #8]
   218c2:	9305      	str	r3, [sp, #20]
   218c4:	920f      	str	r2, [sp, #60]	; 0x3c
   218c6:	f7ff ba6c 	b.w	20da2 <_svfprintf_r+0x3c2>
   218ca:	2140      	movs	r1, #64	; 0x40
   218cc:	4658      	mov	r0, fp
   218ce:	f7fb fe6d 	bl	1d5ac <_malloc_r>
   218d2:	6020      	str	r0, [r4, #0]
   218d4:	6120      	str	r0, [r4, #16]
   218d6:	2800      	cmp	r0, #0
   218d8:	f000 860f 	beq.w	224fa <_svfprintf_r+0x1b1a>
   218dc:	2340      	movs	r3, #64	; 0x40
   218de:	6163      	str	r3, [r4, #20]
   218e0:	f7ff b89e 	b.w	20a20 <_svfprintf_r+0x40>
   218e4:	2d10      	cmp	r5, #16
   218e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   218e8:	f340 825d 	ble.w	21da6 <_svfprintf_r+0x13c6>
   218ec:	4651      	mov	r1, sl
   218ee:	2610      	movs	r6, #16
   218f0:	ee1b aa10 	vmov	sl, s22
   218f4:	e004      	b.n	21900 <_svfprintf_r+0xf20>
   218f6:	3108      	adds	r1, #8
   218f8:	3d10      	subs	r5, #16
   218fa:	2d10      	cmp	r5, #16
   218fc:	f340 8252 	ble.w	21da4 <_svfprintf_r+0x13c4>
   21900:	3301      	adds	r3, #1
   21902:	4866      	ldr	r0, [pc, #408]	; (21a9c <_svfprintf_r+0x10bc>)
   21904:	3210      	adds	r2, #16
   21906:	2b07      	cmp	r3, #7
   21908:	e9c1 0600 	strd	r0, r6, [r1]
   2190c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21910:	ddf1      	ble.n	218f6 <_svfprintf_r+0xf16>
   21912:	aa24      	add	r2, sp, #144	; 0x90
   21914:	4651      	mov	r1, sl
   21916:	4658      	mov	r0, fp
   21918:	f002 fdcc 	bl	244b4 <__ssprint_r>
   2191c:	2800      	cmp	r0, #0
   2191e:	f47f acc4 	bne.w	212aa <_svfprintf_r+0x8ca>
   21922:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21926:	a927      	add	r1, sp, #156	; 0x9c
   21928:	e7e6      	b.n	218f8 <_svfprintf_r+0xf18>
   2192a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2192c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   21930:	18e3      	adds	r3, r4, r3
   21932:	9303      	str	r3, [sp, #12]
   21934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21936:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   2193a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   2193c:	9d05      	ldr	r5, [sp, #20]
   2193e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   21942:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   21946:	940b      	str	r4, [sp, #44]	; 0x2c
   21948:	ee1b 1a10 	vmov	r1, s22
   2194c:	4650      	mov	r0, sl
   2194e:	2b00      	cmp	r3, #0
   21950:	d034      	beq.n	219bc <_svfprintf_r+0xfdc>
   21952:	f1b8 0f00 	cmp.w	r8, #0
   21956:	d135      	bne.n	219c4 <_svfprintf_r+0xfe4>
   21958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2195a:	3b01      	subs	r3, #1
   2195c:	3e01      	subs	r6, #1
   2195e:	930d      	str	r3, [sp, #52]	; 0x34
   21960:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21962:	e9c0 3900 	strd	r3, r9, [r0]
   21966:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21968:	3301      	adds	r3, #1
   2196a:	444a      	add	r2, r9
   2196c:	2b07      	cmp	r3, #7
   2196e:	9226      	str	r2, [sp, #152]	; 0x98
   21970:	9325      	str	r3, [sp, #148]	; 0x94
   21972:	dc6c      	bgt.n	21a4e <_svfprintf_r+0x106e>
   21974:	3008      	adds	r0, #8
   21976:	9b03      	ldr	r3, [sp, #12]
   21978:	f896 c000 	ldrb.w	ip, [r6]
   2197c:	1b5b      	subs	r3, r3, r5
   2197e:	4563      	cmp	r3, ip
   21980:	bfa8      	it	ge
   21982:	4663      	movge	r3, ip
   21984:	2b00      	cmp	r3, #0
   21986:	469a      	mov	sl, r3
   21988:	dd0c      	ble.n	219a4 <_svfprintf_r+0xfc4>
   2198a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2198c:	3401      	adds	r4, #1
   2198e:	441a      	add	r2, r3
   21990:	2c07      	cmp	r4, #7
   21992:	e9c0 5300 	strd	r5, r3, [r0]
   21996:	9226      	str	r2, [sp, #152]	; 0x98
   21998:	9425      	str	r4, [sp, #148]	; 0x94
   2199a:	f300 8177 	bgt.w	21c8c <_svfprintf_r+0x12ac>
   2199e:	f896 c000 	ldrb.w	ip, [r6]
   219a2:	3008      	adds	r0, #8
   219a4:	f1ba 0f00 	cmp.w	sl, #0
   219a8:	bfac      	ite	ge
   219aa:	ebac 040a 	subge.w	r4, ip, sl
   219ae:	4664      	movlt	r4, ip
   219b0:	2c00      	cmp	r4, #0
   219b2:	dc0a      	bgt.n	219ca <_svfprintf_r+0xfea>
   219b4:	4465      	add	r5, ip
   219b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   219b8:	2b00      	cmp	r3, #0
   219ba:	d1ca      	bne.n	21952 <_svfprintf_r+0xf72>
   219bc:	f1b8 0f00 	cmp.w	r8, #0
   219c0:	f000 83ac 	beq.w	2211c <_svfprintf_r+0x173c>
   219c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   219c8:	e7ca      	b.n	21960 <_svfprintf_r+0xf80>
   219ca:	2c10      	cmp	r4, #16
   219cc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   219d0:	dd24      	ble.n	21a1c <_svfprintf_r+0x103c>
   219d2:	9505      	str	r5, [sp, #20]
   219d4:	f04f 0a10 	mov.w	sl, #16
   219d8:	4663      	mov	r3, ip
   219da:	460d      	mov	r5, r1
   219dc:	e004      	b.n	219e8 <_svfprintf_r+0x1008>
   219de:	3c10      	subs	r4, #16
   219e0:	2c10      	cmp	r4, #16
   219e2:	f100 0008 	add.w	r0, r0, #8
   219e6:	dd16      	ble.n	21a16 <_svfprintf_r+0x1036>
   219e8:	3301      	adds	r3, #1
   219ea:	492c      	ldr	r1, [pc, #176]	; (21a9c <_svfprintf_r+0x10bc>)
   219ec:	3210      	adds	r2, #16
   219ee:	2b07      	cmp	r3, #7
   219f0:	e9c0 1a00 	strd	r1, sl, [r0]
   219f4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   219f8:	ddf1      	ble.n	219de <_svfprintf_r+0xffe>
   219fa:	aa24      	add	r2, sp, #144	; 0x90
   219fc:	4629      	mov	r1, r5
   219fe:	4658      	mov	r0, fp
   21a00:	f002 fd58 	bl	244b4 <__ssprint_r>
   21a04:	2800      	cmp	r0, #0
   21a06:	f47f ac50 	bne.w	212aa <_svfprintf_r+0x8ca>
   21a0a:	3c10      	subs	r4, #16
   21a0c:	2c10      	cmp	r4, #16
   21a0e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21a12:	a827      	add	r0, sp, #156	; 0x9c
   21a14:	dce8      	bgt.n	219e8 <_svfprintf_r+0x1008>
   21a16:	4629      	mov	r1, r5
   21a18:	9d05      	ldr	r5, [sp, #20]
   21a1a:	469c      	mov	ip, r3
   21a1c:	f10c 0301 	add.w	r3, ip, #1
   21a20:	4422      	add	r2, r4
   21a22:	6044      	str	r4, [r0, #4]
   21a24:	2b07      	cmp	r3, #7
   21a26:	4c1d      	ldr	r4, [pc, #116]	; (21a9c <_svfprintf_r+0x10bc>)
   21a28:	6004      	str	r4, [r0, #0]
   21a2a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21a2e:	f300 83c6 	bgt.w	221be <_svfprintf_r+0x17de>
   21a32:	f896 c000 	ldrb.w	ip, [r6]
   21a36:	3008      	adds	r0, #8
   21a38:	4465      	add	r5, ip
   21a3a:	e7bc      	b.n	219b6 <_svfprintf_r+0xfd6>
   21a3c:	f018 0310 	ands.w	r3, r8, #16
   21a40:	f000 80c2 	beq.w	21bc8 <_svfprintf_r+0x11e8>
   21a44:	9b08      	ldr	r3, [sp, #32]
   21a46:	f853 2b04 	ldr.w	r2, [r3], #4
   21a4a:	9308      	str	r3, [sp, #32]
   21a4c:	e6f9      	b.n	21842 <_svfprintf_r+0xe62>
   21a4e:	aa24      	add	r2, sp, #144	; 0x90
   21a50:	4658      	mov	r0, fp
   21a52:	9105      	str	r1, [sp, #20]
   21a54:	f002 fd2e 	bl	244b4 <__ssprint_r>
   21a58:	2800      	cmp	r0, #0
   21a5a:	f47f ac26 	bne.w	212aa <_svfprintf_r+0x8ca>
   21a5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21a60:	9905      	ldr	r1, [sp, #20]
   21a62:	a827      	add	r0, sp, #156	; 0x9c
   21a64:	e787      	b.n	21976 <_svfprintf_r+0xf96>
   21a66:	9802      	ldr	r0, [sp, #8]
   21a68:	f8cd a01c 	str.w	sl, [sp, #28]
   21a6c:	ac50      	add	r4, sp, #320	; 0x140
   21a6e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   21a72:	2500      	movs	r5, #0
   21a74:	ee0a ba10 	vmov	s20, fp
   21a78:	4b09      	ldr	r3, [pc, #36]	; (21aa0 <_svfprintf_r+0x10c0>)
   21a7a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   21a7e:	f8cd 9014 	str.w	r9, [sp, #20]
   21a82:	46a3      	mov	fp, r4
   21a84:	f04f 0805 	mov.w	r8, #5
   21a88:	46ac      	mov	ip, r5
   21a8a:	4604      	mov	r4, r0
   21a8c:	e010      	b.n	21ab0 <_svfprintf_r+0x10d0>
   21a8e:	bf00      	nop
   21a90:	20002b38 	.word	0x20002b38
   21a94:	20002b4c 	.word	0x20002b4c
   21a98:	20002b60 	.word	0x20002b60
   21a9c:	20003514 	.word	0x20003514
   21aa0:	cccccccd 	.word	0xcccccccd
   21aa4:	2a0a      	cmp	r2, #10
   21aa6:	f171 0100 	sbcs.w	r1, r1, #0
   21aaa:	d336      	bcc.n	21b1a <_svfprintf_r+0x113a>
   21aac:	464a      	mov	r2, r9
   21aae:	4631      	mov	r1, r6
   21ab0:	1850      	adds	r0, r2, r1
   21ab2:	f140 0000 	adc.w	r0, r0, #0
   21ab6:	fba3 5600 	umull	r5, r6, r3, r0
   21aba:	f026 0503 	bic.w	r5, r6, #3
   21abe:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   21ac2:	1b40      	subs	r0, r0, r5
   21ac4:	1a15      	subs	r5, r2, r0
   21ac6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   21aca:	f161 0e00 	sbc.w	lr, r1, #0
   21ace:	fb06 f605 	mul.w	r6, r6, r5
   21ad2:	fba5 9503 	umull	r9, r5, r5, r3
   21ad6:	fb03 660e 	mla	r6, r3, lr, r6
   21ada:	f009 0e01 	and.w	lr, r9, #1
   21ade:	442e      	add	r6, r5
   21ae0:	fbae 5e08 	umull	r5, lr, lr, r8
   21ae4:	182d      	adds	r5, r5, r0
   21ae6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   21aea:	3530      	adds	r5, #48	; 0x30
   21aec:	f80b 5c01 	strb.w	r5, [fp, #-1]
   21af0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   21af4:	f10c 0c01 	add.w	ip, ip, #1
   21af8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   21afc:	0876      	lsrs	r6, r6, #1
   21afe:	2c00      	cmp	r4, #0
   21b00:	d0d0      	beq.n	21aa4 <_svfprintf_r+0x10c4>
   21b02:	f89a 0000 	ldrb.w	r0, [sl]
   21b06:	4584      	cmp	ip, r0
   21b08:	d1cc      	bne.n	21aa4 <_svfprintf_r+0x10c4>
   21b0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   21b0e:	d0c9      	beq.n	21aa4 <_svfprintf_r+0x10c4>
   21b10:	2a0a      	cmp	r2, #10
   21b12:	f171 0100 	sbcs.w	r1, r1, #0
   21b16:	f080 818f 	bcs.w	21e38 <_svfprintf_r+0x1458>
   21b1a:	465c      	mov	r4, fp
   21b1c:	ab50      	add	r3, sp, #320	; 0x140
   21b1e:	1b1b      	subs	r3, r3, r4
   21b20:	f8dd 9014 	ldr.w	r9, [sp, #20]
   21b24:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   21b28:	ee1a ba10 	vmov	fp, s20
   21b2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   21b30:	f8dd 8008 	ldr.w	r8, [sp, #8]
   21b34:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   21b38:	9305      	str	r3, [sp, #20]
   21b3a:	f7ff bac2 	b.w	210c2 <_svfprintf_r+0x6e2>
   21b3e:	ee1b 1a10 	vmov	r1, s22
   21b42:	aa24      	add	r2, sp, #144	; 0x90
   21b44:	4658      	mov	r0, fp
   21b46:	f002 fcb5 	bl	244b4 <__ssprint_r>
   21b4a:	2800      	cmp	r0, #0
   21b4c:	f47f abad 	bne.w	212aa <_svfprintf_r+0x8ca>
   21b50:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   21b54:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21b56:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21b5a:	f7ff b896 	b.w	20c8a <_svfprintf_r+0x2aa>
   21b5e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21b60:	48be      	ldr	r0, [pc, #760]	; (21e5c <_svfprintf_r+0x147c>)
   21b62:	f8ca 0000 	str.w	r0, [sl]
   21b66:	3301      	adds	r3, #1
   21b68:	3201      	adds	r2, #1
   21b6a:	2001      	movs	r0, #1
   21b6c:	2b07      	cmp	r3, #7
   21b6e:	9226      	str	r2, [sp, #152]	; 0x98
   21b70:	9325      	str	r3, [sp, #148]	; 0x94
   21b72:	f8ca 0004 	str.w	r0, [sl, #4]
   21b76:	f300 8177 	bgt.w	21e68 <_svfprintf_r+0x1488>
   21b7a:	f10a 0a08 	add.w	sl, sl, #8
   21b7e:	2900      	cmp	r1, #0
   21b80:	f040 80af 	bne.w	21ce2 <_svfprintf_r+0x1302>
   21b84:	990e      	ldr	r1, [sp, #56]	; 0x38
   21b86:	f008 0301 	and.w	r3, r8, #1
   21b8a:	430b      	orrs	r3, r1
   21b8c:	f43f a8c0 	beq.w	20d10 <_svfprintf_r+0x330>
   21b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21b92:	9912      	ldr	r1, [sp, #72]	; 0x48
   21b94:	441a      	add	r2, r3
   21b96:	e9ca 1300 	strd	r1, r3, [sl]
   21b9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21b9c:	9226      	str	r2, [sp, #152]	; 0x98
   21b9e:	3301      	adds	r3, #1
   21ba0:	2b07      	cmp	r3, #7
   21ba2:	9325      	str	r3, [sp, #148]	; 0x94
   21ba4:	f300 8252 	bgt.w	2204c <_svfprintf_r+0x166c>
   21ba8:	f10a 0a08 	add.w	sl, sl, #8
   21bac:	990e      	ldr	r1, [sp, #56]	; 0x38
   21bae:	f8ca 4000 	str.w	r4, [sl]
   21bb2:	3301      	adds	r3, #1
   21bb4:	440a      	add	r2, r1
   21bb6:	2b07      	cmp	r3, #7
   21bb8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21bbc:	f8ca 1004 	str.w	r1, [sl, #4]
   21bc0:	f77f a8a4 	ble.w	20d0c <_svfprintf_r+0x32c>
   21bc4:	f7ff bbbd 	b.w	21342 <_svfprintf_r+0x962>
   21bc8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   21bcc:	f000 80dd 	beq.w	21d8a <_svfprintf_r+0x13aa>
   21bd0:	9808      	ldr	r0, [sp, #32]
   21bd2:	f850 2b04 	ldr.w	r2, [r0], #4
   21bd6:	9008      	str	r0, [sp, #32]
   21bd8:	4619      	mov	r1, r3
   21bda:	b292      	uxth	r2, r2
   21bdc:	e631      	b.n	21842 <_svfprintf_r+0xe62>
   21bde:	ee1b 1a10 	vmov	r1, s22
   21be2:	aa24      	add	r2, sp, #144	; 0x90
   21be4:	4658      	mov	r0, fp
   21be6:	f002 fc65 	bl	244b4 <__ssprint_r>
   21bea:	2800      	cmp	r0, #0
   21bec:	f47f ab5d 	bne.w	212aa <_svfprintf_r+0x8ca>
   21bf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21bf2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21bf6:	f7ff baa3 	b.w	21140 <_svfprintf_r+0x760>
   21bfa:	ae22      	add	r6, sp, #136	; 0x88
   21bfc:	2208      	movs	r2, #8
   21bfe:	2100      	movs	r1, #0
   21c00:	4630      	mov	r0, r6
   21c02:	941d      	str	r4, [sp, #116]	; 0x74
   21c04:	f7fd faf4 	bl	1f1f0 <memset>
   21c08:	9b03      	ldr	r3, [sp, #12]
   21c0a:	1c5a      	adds	r2, r3, #1
   21c0c:	f000 80db 	beq.w	21dc6 <_svfprintf_r+0x13e6>
   21c10:	2500      	movs	r5, #0
   21c12:	f8cd 9008 	str.w	r9, [sp, #8]
   21c16:	f8cd 801c 	str.w	r8, [sp, #28]
   21c1a:	4699      	mov	r9, r3
   21c1c:	46a8      	mov	r8, r5
   21c1e:	e00c      	b.n	21c3a <_svfprintf_r+0x125a>
   21c20:	a937      	add	r1, sp, #220	; 0xdc
   21c22:	4658      	mov	r0, fp
   21c24:	f001 fc5c 	bl	234e0 <_wcrtomb_r>
   21c28:	1c43      	adds	r3, r0, #1
   21c2a:	4440      	add	r0, r8
   21c2c:	f000 83c8 	beq.w	223c0 <_svfprintf_r+0x19e0>
   21c30:	4548      	cmp	r0, r9
   21c32:	dc08      	bgt.n	21c46 <_svfprintf_r+0x1266>
   21c34:	f000 8418 	beq.w	22468 <_svfprintf_r+0x1a88>
   21c38:	4680      	mov	r8, r0
   21c3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   21c3c:	5952      	ldr	r2, [r2, r5]
   21c3e:	4633      	mov	r3, r6
   21c40:	3504      	adds	r5, #4
   21c42:	2a00      	cmp	r2, #0
   21c44:	d1ec      	bne.n	21c20 <_svfprintf_r+0x1240>
   21c46:	f8cd 8014 	str.w	r8, [sp, #20]
   21c4a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   21c4e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   21c52:	e0c5      	b.n	21de0 <_svfprintf_r+0x1400>
   21c54:	3301      	adds	r3, #1
   21c56:	4982      	ldr	r1, [pc, #520]	; (21e60 <_svfprintf_r+0x1480>)
   21c58:	f8ca 4004 	str.w	r4, [sl, #4]
   21c5c:	4422      	add	r2, r4
   21c5e:	2b07      	cmp	r3, #7
   21c60:	f8ca 1000 	str.w	r1, [sl]
   21c64:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21c68:	f77f a850 	ble.w	20d0c <_svfprintf_r+0x32c>
   21c6c:	f7ff bb69 	b.w	21342 <_svfprintf_r+0x962>
   21c70:	ee1b 1a10 	vmov	r1, s22
   21c74:	aa24      	add	r2, sp, #144	; 0x90
   21c76:	4658      	mov	r0, fp
   21c78:	f002 fc1c 	bl	244b4 <__ssprint_r>
   21c7c:	2800      	cmp	r0, #0
   21c7e:	f47f ab14 	bne.w	212aa <_svfprintf_r+0x8ca>
   21c82:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21c84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21c88:	f7ff b829 	b.w	20cde <_svfprintf_r+0x2fe>
   21c8c:	aa24      	add	r2, sp, #144	; 0x90
   21c8e:	4658      	mov	r0, fp
   21c90:	9105      	str	r1, [sp, #20]
   21c92:	f002 fc0f 	bl	244b4 <__ssprint_r>
   21c96:	2800      	cmp	r0, #0
   21c98:	f47f ab07 	bne.w	212aa <_svfprintf_r+0x8ca>
   21c9c:	f896 c000 	ldrb.w	ip, [r6]
   21ca0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21ca2:	9905      	ldr	r1, [sp, #20]
   21ca4:	a827      	add	r0, sp, #156	; 0x9c
   21ca6:	e67d      	b.n	219a4 <_svfprintf_r+0xfc4>
   21ca8:	2b01      	cmp	r3, #1
   21caa:	f8cd 8008 	str.w	r8, [sp, #8]
   21cae:	f47f a9f3 	bne.w	21098 <_svfprintf_r+0x6b8>
   21cb2:	f7ff bb93 	b.w	213dc <_svfprintf_r+0x9fc>
   21cb6:	9b08      	ldr	r3, [sp, #32]
   21cb8:	9904      	ldr	r1, [sp, #16]
   21cba:	f853 2b04 	ldr.w	r2, [r3], #4
   21cbe:	464c      	mov	r4, r9
   21cc0:	6011      	str	r1, [r2, #0]
   21cc2:	9308      	str	r3, [sp, #32]
   21cc4:	f7fe bebe 	b.w	20a44 <_svfprintf_r+0x64>
   21cc8:	3301      	adds	r3, #1
   21cca:	4965      	ldr	r1, [pc, #404]	; (21e60 <_svfprintf_r+0x1480>)
   21ccc:	f8ca 4004 	str.w	r4, [sl, #4]
   21cd0:	4422      	add	r2, r4
   21cd2:	2b07      	cmp	r3, #7
   21cd4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21cd8:	f8ca 1000 	str.w	r1, [sl]
   21cdc:	f77f ab22 	ble.w	21324 <_svfprintf_r+0x944>
   21ce0:	e47b      	b.n	215da <_svfprintf_r+0xbfa>
   21ce2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21ce4:	9812      	ldr	r0, [sp, #72]	; 0x48
   21ce6:	441a      	add	r2, r3
   21ce8:	e9ca 0300 	strd	r0, r3, [sl]
   21cec:	9b25      	ldr	r3, [sp, #148]	; 0x94
   21cee:	9226      	str	r2, [sp, #152]	; 0x98
   21cf0:	3301      	adds	r3, #1
   21cf2:	2b07      	cmp	r3, #7
   21cf4:	9325      	str	r3, [sp, #148]	; 0x94
   21cf6:	f300 81a9 	bgt.w	2204c <_svfprintf_r+0x166c>
   21cfa:	f10a 0a08 	add.w	sl, sl, #8
   21cfe:	2900      	cmp	r1, #0
   21d00:	f6bf af54 	bge.w	21bac <_svfprintf_r+0x11cc>
   21d04:	424d      	negs	r5, r1
   21d06:	3110      	adds	r1, #16
   21d08:	f280 830f 	bge.w	2232a <_svfprintf_r+0x194a>
   21d0c:	ee1b 1a10 	vmov	r1, s22
   21d10:	2610      	movs	r6, #16
   21d12:	e005      	b.n	21d20 <_svfprintf_r+0x1340>
   21d14:	f10a 0a08 	add.w	sl, sl, #8
   21d18:	3d10      	subs	r5, #16
   21d1a:	2d10      	cmp	r5, #16
   21d1c:	f340 8305 	ble.w	2232a <_svfprintf_r+0x194a>
   21d20:	3301      	adds	r3, #1
   21d22:	484f      	ldr	r0, [pc, #316]	; (21e60 <_svfprintf_r+0x1480>)
   21d24:	3210      	adds	r2, #16
   21d26:	2b07      	cmp	r3, #7
   21d28:	e9ca 0600 	strd	r0, r6, [sl]
   21d2c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21d30:	ddf0      	ble.n	21d14 <_svfprintf_r+0x1334>
   21d32:	aa24      	add	r2, sp, #144	; 0x90
   21d34:	4658      	mov	r0, fp
   21d36:	9103      	str	r1, [sp, #12]
   21d38:	f002 fbbc 	bl	244b4 <__ssprint_r>
   21d3c:	2800      	cmp	r0, #0
   21d3e:	f47f aab4 	bne.w	212aa <_svfprintf_r+0x8ca>
   21d42:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   21d46:	9903      	ldr	r1, [sp, #12]
   21d48:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21d4c:	e7e4      	b.n	21d18 <_svfprintf_r+0x1338>
   21d4e:	9b08      	ldr	r3, [sp, #32]
   21d50:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   21d54:	bf1a      	itte	ne
   21d56:	4611      	movne	r1, r2
   21d58:	f853 2b04 	ldrne.w	r2, [r3], #4
   21d5c:	f853 2b04 	ldreq.w	r2, [r3], #4
   21d60:	9308      	str	r3, [sp, #32]
   21d62:	bf18      	it	ne
   21d64:	b2d2      	uxtbne	r2, r2
   21d66:	f7ff b945 	b.w	20ff4 <_svfprintf_r+0x614>
   21d6a:	9b02      	ldr	r3, [sp, #8]
   21d6c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   21d70:	9b08      	ldr	r3, [sp, #32]
   21d72:	bf1a      	itte	ne
   21d74:	4611      	movne	r1, r2
   21d76:	f853 2b04 	ldrne.w	r2, [r3], #4
   21d7a:	f853 2b04 	ldreq.w	r2, [r3], #4
   21d7e:	9308      	str	r3, [sp, #32]
   21d80:	bf18      	it	ne
   21d82:	b2d2      	uxtbne	r2, r2
   21d84:	2301      	movs	r3, #1
   21d86:	f7ff b8d0 	b.w	20f2a <_svfprintf_r+0x54a>
   21d8a:	9b08      	ldr	r3, [sp, #32]
   21d8c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   21d90:	bf1a      	itte	ne
   21d92:	4611      	movne	r1, r2
   21d94:	f853 2b04 	ldrne.w	r2, [r3], #4
   21d98:	f853 2b04 	ldreq.w	r2, [r3], #4
   21d9c:	9308      	str	r3, [sp, #32]
   21d9e:	bf18      	it	ne
   21da0:	b2d2      	uxtbne	r2, r2
   21da2:	e54e      	b.n	21842 <_svfprintf_r+0xe62>
   21da4:	468a      	mov	sl, r1
   21da6:	3301      	adds	r3, #1
   21da8:	492d      	ldr	r1, [pc, #180]	; (21e60 <_svfprintf_r+0x1480>)
   21daa:	f8ca 5004 	str.w	r5, [sl, #4]
   21dae:	442a      	add	r2, r5
   21db0:	2b07      	cmp	r3, #7
   21db2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   21db6:	f8ca 1000 	str.w	r1, [sl]
   21dba:	f300 8139 	bgt.w	22030 <_svfprintf_r+0x1650>
   21dbe:	f10a 0a08 	add.w	sl, sl, #8
   21dc2:	f7ff bb8c 	b.w	214de <_svfprintf_r+0xafe>
   21dc6:	2300      	movs	r3, #0
   21dc8:	4619      	mov	r1, r3
   21dca:	9600      	str	r6, [sp, #0]
   21dcc:	aa1d      	add	r2, sp, #116	; 0x74
   21dce:	4658      	mov	r0, fp
   21dd0:	f001 fbac 	bl	2352c <_wcsrtombs_r>
   21dd4:	4603      	mov	r3, r0
   21dd6:	3301      	adds	r3, #1
   21dd8:	9005      	str	r0, [sp, #20]
   21dda:	f000 82f1 	beq.w	223c0 <_svfprintf_r+0x19e0>
   21dde:	941d      	str	r4, [sp, #116]	; 0x74
   21de0:	9b05      	ldr	r3, [sp, #20]
   21de2:	2b00      	cmp	r3, #0
   21de4:	d04e      	beq.n	21e84 <_svfprintf_r+0x14a4>
   21de6:	2b63      	cmp	r3, #99	; 0x63
   21de8:	f300 8118 	bgt.w	2201c <_svfprintf_r+0x163c>
   21dec:	2300      	movs	r3, #0
   21dee:	9307      	str	r3, [sp, #28]
   21df0:	ac37      	add	r4, sp, #220	; 0xdc
   21df2:	2208      	movs	r2, #8
   21df4:	2100      	movs	r1, #0
   21df6:	4630      	mov	r0, r6
   21df8:	f7fd f9fa 	bl	1f1f0 <memset>
   21dfc:	9d05      	ldr	r5, [sp, #20]
   21dfe:	9600      	str	r6, [sp, #0]
   21e00:	462b      	mov	r3, r5
   21e02:	aa1d      	add	r2, sp, #116	; 0x74
   21e04:	4621      	mov	r1, r4
   21e06:	4658      	mov	r0, fp
   21e08:	f001 fb90 	bl	2352c <_wcsrtombs_r>
   21e0c:	4285      	cmp	r5, r0
   21e0e:	f040 837c 	bne.w	2250a <_svfprintf_r+0x1b2a>
   21e12:	9a05      	ldr	r2, [sp, #20]
   21e14:	2300      	movs	r3, #0
   21e16:	54a3      	strb	r3, [r4, r2]
   21e18:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   21e1c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   21e20:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   21e24:	9303      	str	r3, [sp, #12]
   21e26:	9202      	str	r2, [sp, #8]
   21e28:	930f      	str	r3, [sp, #60]	; 0x3c
   21e2a:	f7fe bfba 	b.w	20da2 <_svfprintf_r+0x3c2>
   21e2e:	212d      	movs	r1, #45	; 0x2d
   21e30:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   21e34:	f7fe bfa4 	b.w	20d80 <_svfprintf_r+0x3a0>
   21e38:	9b16      	ldr	r3, [sp, #88]	; 0x58
   21e3a:	9915      	ldr	r1, [sp, #84]	; 0x54
   21e3c:	ebab 0b03 	sub.w	fp, fp, r3
   21e40:	461a      	mov	r2, r3
   21e42:	4658      	mov	r0, fp
   21e44:	f7fd faf2 	bl	1f42c <strncpy>
   21e48:	f89a 2001 	ldrb.w	r2, [sl, #1]
   21e4c:	4b05      	ldr	r3, [pc, #20]	; (21e64 <_svfprintf_r+0x1484>)
   21e4e:	b10a      	cbz	r2, 21e54 <_svfprintf_r+0x1474>
   21e50:	f10a 0a01 	add.w	sl, sl, #1
   21e54:	f04f 0c00 	mov.w	ip, #0
   21e58:	e628      	b.n	21aac <_svfprintf_r+0x10cc>
   21e5a:	bf00      	nop
   21e5c:	20002234 	.word	0x20002234
   21e60:	20003514 	.word	0x20003514
   21e64:	cccccccd 	.word	0xcccccccd
   21e68:	ee1b 1a10 	vmov	r1, s22
   21e6c:	aa24      	add	r2, sp, #144	; 0x90
   21e6e:	4658      	mov	r0, fp
   21e70:	f002 fb20 	bl	244b4 <__ssprint_r>
   21e74:	2800      	cmp	r0, #0
   21e76:	f47f aa18 	bne.w	212aa <_svfprintf_r+0x8ca>
   21e7a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   21e7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21e7e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   21e82:	e67c      	b.n	21b7e <_svfprintf_r+0x119e>
   21e84:	9b05      	ldr	r3, [sp, #20]
   21e86:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   21e8a:	930f      	str	r3, [sp, #60]	; 0x3c
   21e8c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   21e90:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   21e94:	9307      	str	r3, [sp, #28]
   21e96:	f7fe bf84 	b.w	20da2 <_svfprintf_r+0x3c2>
   21e9a:	990e      	ldr	r1, [sp, #56]	; 0x38
   21e9c:	9805      	ldr	r0, [sp, #20]
   21e9e:	1865      	adds	r5, r4, r1
   21ea0:	1a2d      	subs	r5, r5, r0
   21ea2:	1acc      	subs	r4, r1, r3
   21ea4:	42a5      	cmp	r5, r4
   21ea6:	bfa8      	it	ge
   21ea8:	4625      	movge	r5, r4
   21eaa:	f7ff bb4d 	b.w	21548 <_svfprintf_r+0xb68>
   21eae:	9b08      	ldr	r3, [sp, #32]
   21eb0:	9904      	ldr	r1, [sp, #16]
   21eb2:	f853 2b04 	ldr.w	r2, [r3], #4
   21eb6:	9308      	str	r3, [sp, #32]
   21eb8:	8011      	strh	r1, [r2, #0]
   21eba:	464c      	mov	r4, r9
   21ebc:	f7fe bdc2 	b.w	20a44 <_svfprintf_r+0x64>
   21ec0:	f913 2b04 	ldrsb.w	r2, [r3], #4
   21ec4:	9308      	str	r3, [sp, #32]
   21ec6:	17d1      	asrs	r1, r2, #31
   21ec8:	460b      	mov	r3, r1
   21eca:	f7fe bfdb 	b.w	20e84 <_svfprintf_r+0x4a4>
   21ece:	9a03      	ldr	r2, [sp, #12]
   21ed0:	2102      	movs	r1, #2
   21ed2:	ab22      	add	r3, sp, #136	; 0x88
   21ed4:	9301      	str	r3, [sp, #4]
   21ed6:	ab1d      	add	r3, sp, #116	; 0x74
   21ed8:	9300      	str	r3, [sp, #0]
   21eda:	4658      	mov	r0, fp
   21edc:	ab1b      	add	r3, sp, #108	; 0x6c
   21ede:	eeb0 0b4a 	vmov.f64	d0, d10
   21ee2:	9202      	str	r2, [sp, #8]
   21ee4:	f001 fc5c 	bl	237a0 <_dtoa_r>
   21ee8:	2d47      	cmp	r5, #71	; 0x47
   21eea:	9a02      	ldr	r2, [sp, #8]
   21eec:	4604      	mov	r4, r0
   21eee:	f000 8161 	beq.w	221b4 <_svfprintf_r+0x17d4>
   21ef2:	2d46      	cmp	r5, #70	; 0x46
   21ef4:	4410      	add	r0, r2
   21ef6:	d105      	bne.n	21f04 <_svfprintf_r+0x1524>
   21ef8:	7823      	ldrb	r3, [r4, #0]
   21efa:	2b30      	cmp	r3, #48	; 0x30
   21efc:	f000 826f 	beq.w	223de <_svfprintf_r+0x19fe>
   21f00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   21f02:	4410      	add	r0, r2
   21f04:	eeb5 ab40 	vcmp.f64	d10, #0.0
   21f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21f0c:	f040 8146 	bne.w	2219c <_svfprintf_r+0x17bc>
   21f10:	4603      	mov	r3, r0
   21f12:	1b1b      	subs	r3, r3, r4
   21f14:	930e      	str	r3, [sp, #56]	; 0x38
   21f16:	2d47      	cmp	r5, #71	; 0x47
   21f18:	f000 8110 	beq.w	2213c <_svfprintf_r+0x175c>
   21f1c:	2d46      	cmp	r5, #70	; 0x46
   21f1e:	f000 81b5 	beq.w	2228c <_svfprintf_r+0x18ac>
   21f22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   21f24:	930c      	str	r3, [sp, #48]	; 0x30
   21f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21f28:	2d41      	cmp	r5, #65	; 0x41
   21f2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   21f2e:	931b      	str	r3, [sp, #108]	; 0x6c
   21f30:	f000 81e5 	beq.w	222fe <_svfprintf_r+0x191e>
   21f34:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   21f38:	2100      	movs	r1, #0
   21f3a:	2b00      	cmp	r3, #0
   21f3c:	bfb8      	it	lt
   21f3e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   21f40:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   21f44:	bfba      	itte	lt
   21f46:	f1c3 0301 	rsblt	r3, r3, #1
   21f4a:	222d      	movlt	r2, #45	; 0x2d
   21f4c:	222b      	movge	r2, #43	; 0x2b
   21f4e:	2b09      	cmp	r3, #9
   21f50:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   21f54:	f340 81da 	ble.w	2230c <_svfprintf_r+0x192c>
   21f58:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   21f5c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 2237c <_svfprintf_r+0x199c>
   21f60:	462a      	mov	r2, r5
   21f62:	4610      	mov	r0, r2
   21f64:	fb8c 2103 	smull	r2, r1, ip, r3
   21f68:	17da      	asrs	r2, r3, #31
   21f6a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   21f6e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   21f72:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   21f76:	3130      	adds	r1, #48	; 0x30
   21f78:	f800 1c01 	strb.w	r1, [r0, #-1]
   21f7c:	4619      	mov	r1, r3
   21f7e:	2963      	cmp	r1, #99	; 0x63
   21f80:	4613      	mov	r3, r2
   21f82:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   21f86:	dcec      	bgt.n	21f62 <_svfprintf_r+0x1582>
   21f88:	3330      	adds	r3, #48	; 0x30
   21f8a:	b2d9      	uxtb	r1, r3
   21f8c:	1e83      	subs	r3, r0, #2
   21f8e:	429d      	cmp	r5, r3
   21f90:	f802 1c01 	strb.w	r1, [r2, #-1]
   21f94:	f240 828b 	bls.w	224ae <_svfprintf_r+0x1ace>
   21f98:	4613      	mov	r3, r2
   21f9a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   21f9e:	e001      	b.n	21fa4 <_svfprintf_r+0x15c4>
   21fa0:	f813 1b01 	ldrb.w	r1, [r3], #1
   21fa4:	f802 1b01 	strb.w	r1, [r2], #1
   21fa8:	429d      	cmp	r5, r3
   21faa:	d1f9      	bne.n	21fa0 <_svfprintf_r+0x15c0>
   21fac:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   21fb0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   21fb4:	1a1b      	subs	r3, r3, r0
   21fb6:	4413      	add	r3, r2
   21fb8:	aa1e      	add	r2, sp, #120	; 0x78
   21fba:	1a9b      	subs	r3, r3, r2
   21fbc:	9314      	str	r3, [sp, #80]	; 0x50
   21fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   21fc2:	2b01      	cmp	r3, #1
   21fc4:	441a      	add	r2, r3
   21fc6:	9205      	str	r2, [sp, #20]
   21fc8:	f340 8203 	ble.w	223d2 <_svfprintf_r+0x19f2>
   21fcc:	9b05      	ldr	r3, [sp, #20]
   21fce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21fd0:	4413      	add	r3, r2
   21fd2:	9305      	str	r3, [sp, #20]
   21fd4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   21fd8:	9a05      	ldr	r2, [sp, #20]
   21fda:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   21fde:	2300      	movs	r3, #0
   21fe0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   21fe4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   21fe8:	930f      	str	r3, [sp, #60]	; 0x3c
   21fea:	9202      	str	r2, [sp, #8]
   21fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21fee:	2b00      	cmp	r3, #0
   21ff0:	f040 80b1 	bne.w	22156 <_svfprintf_r+0x1776>
   21ff4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   21ff8:	9303      	str	r3, [sp, #12]
   21ffa:	f7fe bed2 	b.w	20da2 <_svfprintf_r+0x3c2>
   21ffe:	4620      	mov	r0, r4
   22000:	f7fd febe 	bl	1fd80 <strlen>
   22004:	4602      	mov	r2, r0
   22006:	9005      	str	r0, [sp, #20]
   22008:	f7fe bf20 	b.w	20e4c <_svfprintf_r+0x46c>
   2200c:	ee1b 1a10 	vmov	r1, s22
   22010:	aa24      	add	r2, sp, #144	; 0x90
   22012:	4658      	mov	r0, fp
   22014:	f002 fa4e 	bl	244b4 <__ssprint_r>
   22018:	f7fe bded 	b.w	20bf6 <_svfprintf_r+0x216>
   2201c:	1c59      	adds	r1, r3, #1
   2201e:	4658      	mov	r0, fp
   22020:	f7fb fac4 	bl	1d5ac <_malloc_r>
   22024:	4604      	mov	r4, r0
   22026:	2800      	cmp	r0, #0
   22028:	f000 81ca 	beq.w	223c0 <_svfprintf_r+0x19e0>
   2202c:	9007      	str	r0, [sp, #28]
   2202e:	e6e0      	b.n	21df2 <_svfprintf_r+0x1412>
   22030:	ee1b 1a10 	vmov	r1, s22
   22034:	aa24      	add	r2, sp, #144	; 0x90
   22036:	4658      	mov	r0, fp
   22038:	f002 fa3c 	bl	244b4 <__ssprint_r>
   2203c:	2800      	cmp	r0, #0
   2203e:	f47f a934 	bne.w	212aa <_svfprintf_r+0x8ca>
   22042:	9a26      	ldr	r2, [sp, #152]	; 0x98
   22044:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   22048:	f7ff ba49 	b.w	214de <_svfprintf_r+0xafe>
   2204c:	ee1b 1a10 	vmov	r1, s22
   22050:	aa24      	add	r2, sp, #144	; 0x90
   22052:	4658      	mov	r0, fp
   22054:	f002 fa2e 	bl	244b4 <__ssprint_r>
   22058:	2800      	cmp	r0, #0
   2205a:	f47f a926 	bne.w	212aa <_svfprintf_r+0x8ca>
   2205e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   22062:	991b      	ldr	r1, [sp, #108]	; 0x6c
   22064:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   22068:	e649      	b.n	21cfe <_svfprintf_r+0x131e>
   2206a:	2306      	movs	r3, #6
   2206c:	9303      	str	r3, [sp, #12]
   2206e:	f7ff bb83 	b.w	21778 <_svfprintf_r+0xd98>
   22072:	9b03      	ldr	r3, [sp, #12]
   22074:	2102      	movs	r1, #2
   22076:	1c5a      	adds	r2, r3, #1
   22078:	e72b      	b.n	21ed2 <_svfprintf_r+0x14f2>
   2207a:	9a03      	ldr	r2, [sp, #12]
   2207c:	2103      	movs	r1, #3
   2207e:	e728      	b.n	21ed2 <_svfprintf_r+0x14f2>
   22080:	a81b      	add	r0, sp, #108	; 0x6c
   22082:	eeb0 0b4a 	vmov.f64	d0, d10
   22086:	f001 fa5f 	bl	23548 <frexp>
   2208a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   2208e:	ee20 0b07 	vmul.f64	d0, d0, d7
   22092:	eeb5 0b40 	vcmp.f64	d0, #0.0
   22096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2209a:	d101      	bne.n	220a0 <_svfprintf_r+0x16c0>
   2209c:	2301      	movs	r3, #1
   2209e:	931b      	str	r3, [sp, #108]	; 0x6c
   220a0:	48b3      	ldr	r0, [pc, #716]	; (22370 <_svfprintf_r+0x1990>)
   220a2:	9b03      	ldr	r3, [sp, #12]
   220a4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   220a8:	3b01      	subs	r3, #1
   220aa:	4622      	mov	r2, r4
   220ac:	e004      	b.n	220b8 <_svfprintf_r+0x16d8>
   220ae:	eeb5 0b40 	vcmp.f64	d0, #0.0
   220b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   220b6:	d013      	beq.n	220e0 <_svfprintf_r+0x1700>
   220b8:	ee20 0b05 	vmul.f64	d0, d0, d5
   220bc:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   220c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   220c4:	ee17 1a90 	vmov	r1, s15
   220c8:	5c41      	ldrb	r1, [r0, r1]
   220ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   220ce:	4694      	mov	ip, r2
   220d0:	ee30 0b46 	vsub.f64	d0, d0, d6
   220d4:	f802 1b01 	strb.w	r1, [r2], #1
   220d8:	4619      	mov	r1, r3
   220da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   220de:	d1e6      	bne.n	220ae <_svfprintf_r+0x16ce>
   220e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   220e4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   220e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   220ec:	f300 8148 	bgt.w	22380 <_svfprintf_r+0x19a0>
   220f0:	eeb4 0b46 	vcmp.f64	d0, d6
   220f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   220f8:	d104      	bne.n	22104 <_svfprintf_r+0x1724>
   220fa:	ee17 3a90 	vmov	r3, s15
   220fe:	07db      	lsls	r3, r3, #31
   22100:	f100 813e 	bmi.w	22380 <_svfprintf_r+0x19a0>
   22104:	2900      	cmp	r1, #0
   22106:	db06      	blt.n	22116 <_svfprintf_r+0x1736>
   22108:	1c4b      	adds	r3, r1, #1
   2210a:	4413      	add	r3, r2
   2210c:	2130      	movs	r1, #48	; 0x30
   2210e:	f802 1b01 	strb.w	r1, [r2], #1
   22112:	4293      	cmp	r3, r2
   22114:	d1fb      	bne.n	2210e <_svfprintf_r+0x172e>
   22116:	1b13      	subs	r3, r2, r4
   22118:	930e      	str	r3, [sp, #56]	; 0x38
   2211a:	e6fc      	b.n	21f16 <_svfprintf_r+0x1536>
   2211c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2211e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22120:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   22124:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   22128:	9613      	str	r6, [sp, #76]	; 0x4c
   2212a:	18e3      	adds	r3, r4, r3
   2212c:	429d      	cmp	r5, r3
   2212e:	4629      	mov	r1, r5
   22130:	bf28      	it	cs
   22132:	4619      	movcs	r1, r3
   22134:	4682      	mov	sl, r0
   22136:	9105      	str	r1, [sp, #20]
   22138:	f7ff b9d8 	b.w	214ec <_svfprintf_r+0xb0c>
   2213c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2213e:	930c      	str	r3, [sp, #48]	; 0x30
   22140:	1cda      	adds	r2, r3, #3
   22142:	db02      	blt.n	2214a <_svfprintf_r+0x176a>
   22144:	9a03      	ldr	r2, [sp, #12]
   22146:	4293      	cmp	r3, r2
   22148:	dd0c      	ble.n	22164 <_svfprintf_r+0x1784>
   2214a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2214c:	3b02      	subs	r3, #2
   2214e:	930b      	str	r3, [sp, #44]	; 0x2c
   22150:	f023 0520 	bic.w	r5, r3, #32
   22154:	e6e7      	b.n	21f26 <_svfprintf_r+0x1546>
   22156:	212d      	movs	r1, #45	; 0x2d
   22158:	2300      	movs	r3, #0
   2215a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   2215e:	9303      	str	r3, [sp, #12]
   22160:	f7fe be22 	b.w	20da8 <_svfprintf_r+0x3c8>
   22164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22168:	4293      	cmp	r3, r2
   2216a:	f2c0 80bd 	blt.w	222e8 <_svfprintf_r+0x1908>
   2216e:	07f0      	lsls	r0, r6, #31
   22170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22172:	f140 8132 	bpl.w	223da <_svfprintf_r+0x19fa>
   22176:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22178:	4413      	add	r3, r2
   2217a:	9305      	str	r3, [sp, #20]
   2217c:	0571      	lsls	r1, r6, #21
   2217e:	d503      	bpl.n	22188 <_svfprintf_r+0x17a8>
   22180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22182:	2b00      	cmp	r3, #0
   22184:	f300 8135 	bgt.w	223f2 <_svfprintf_r+0x1a12>
   22188:	9b05      	ldr	r3, [sp, #20]
   2218a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2218e:	9302      	str	r3, [sp, #8]
   22190:	2367      	movs	r3, #103	; 0x67
   22192:	930b      	str	r3, [sp, #44]	; 0x2c
   22194:	2300      	movs	r3, #0
   22196:	930f      	str	r3, [sp, #60]	; 0x3c
   22198:	930d      	str	r3, [sp, #52]	; 0x34
   2219a:	e727      	b.n	21fec <_svfprintf_r+0x160c>
   2219c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2219e:	4283      	cmp	r3, r0
   221a0:	f4bf aeb7 	bcs.w	21f12 <_svfprintf_r+0x1532>
   221a4:	2130      	movs	r1, #48	; 0x30
   221a6:	1c5a      	adds	r2, r3, #1
   221a8:	9222      	str	r2, [sp, #136]	; 0x88
   221aa:	7019      	strb	r1, [r3, #0]
   221ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   221ae:	4298      	cmp	r0, r3
   221b0:	d8f9      	bhi.n	221a6 <_svfprintf_r+0x17c6>
   221b2:	e6ae      	b.n	21f12 <_svfprintf_r+0x1532>
   221b4:	07f3      	lsls	r3, r6, #31
   221b6:	f100 80a7 	bmi.w	22308 <_svfprintf_r+0x1928>
   221ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   221bc:	e6a9      	b.n	21f12 <_svfprintf_r+0x1532>
   221be:	aa24      	add	r2, sp, #144	; 0x90
   221c0:	4658      	mov	r0, fp
   221c2:	9105      	str	r1, [sp, #20]
   221c4:	f002 f976 	bl	244b4 <__ssprint_r>
   221c8:	2800      	cmp	r0, #0
   221ca:	f47f a86e 	bne.w	212aa <_svfprintf_r+0x8ca>
   221ce:	f896 c000 	ldrb.w	ip, [r6]
   221d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   221d4:	9905      	ldr	r1, [sp, #20]
   221d6:	a827      	add	r0, sp, #156	; 0x9c
   221d8:	4465      	add	r5, ip
   221da:	f7ff bbec 	b.w	219b6 <_svfprintf_r+0xfd6>
   221de:	ee1b 1a10 	vmov	r1, s22
   221e2:	aa24      	add	r2, sp, #144	; 0x90
   221e4:	4658      	mov	r0, fp
   221e6:	f002 f965 	bl	244b4 <__ssprint_r>
   221ea:	2800      	cmp	r0, #0
   221ec:	f47f a85d 	bne.w	212aa <_svfprintf_r+0x8ca>
   221f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   221f2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   221f6:	f7ff b96b 	b.w	214d0 <_svfprintf_r+0xaf0>
   221fa:	2378      	movs	r3, #120	; 0x78
   221fc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   22200:	2330      	movs	r3, #48	; 0x30
   22202:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   22206:	9b03      	ldr	r3, [sp, #12]
   22208:	2b63      	cmp	r3, #99	; 0x63
   2220a:	f048 0602 	orr.w	r6, r8, #2
   2220e:	f300 80a6 	bgt.w	2235e <_svfprintf_r+0x197e>
   22212:	2300      	movs	r3, #0
   22214:	9307      	str	r3, [sp, #28]
   22216:	ac37      	add	r4, sp, #220	; 0xdc
   22218:	ee18 3a90 	vmov	r3, s17
   2221c:	2b00      	cmp	r3, #0
   2221e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   22222:	db2b      	blt.n	2227c <_svfprintf_r+0x189c>
   22224:	eeb0 ab48 	vmov.f64	d10, d8
   22228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2222a:	f023 0520 	bic.w	r5, r3, #32
   2222e:	2300      	movs	r3, #0
   22230:	9309      	str	r3, [sp, #36]	; 0x24
   22232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22234:	2b61      	cmp	r3, #97	; 0x61
   22236:	f47f aaad 	bne.w	21794 <_svfprintf_r+0xdb4>
   2223a:	eeb0 0b4a 	vmov.f64	d0, d10
   2223e:	a81b      	add	r0, sp, #108	; 0x6c
   22240:	f001 f982 	bl	23548 <frexp>
   22244:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   22248:	ee20 0b07 	vmul.f64	d0, d0, d7
   2224c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   22250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22254:	d101      	bne.n	2225a <_svfprintf_r+0x187a>
   22256:	2301      	movs	r3, #1
   22258:	931b      	str	r3, [sp, #108]	; 0x6c
   2225a:	4846      	ldr	r0, [pc, #280]	; (22374 <_svfprintf_r+0x1994>)
   2225c:	e721      	b.n	220a2 <_svfprintf_r+0x16c2>
   2225e:	ee1b 1a10 	vmov	r1, s22
   22262:	aa24      	add	r2, sp, #144	; 0x90
   22264:	4658      	mov	r0, fp
   22266:	f002 f925 	bl	244b4 <__ssprint_r>
   2226a:	2800      	cmp	r0, #0
   2226c:	f47f a81d 	bne.w	212aa <_svfprintf_r+0x8ca>
   22270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   22272:	9a26      	ldr	r2, [sp, #152]	; 0x98
   22274:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   22278:	f7ff b94e 	b.w	21518 <_svfprintf_r+0xb38>
   2227c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2227e:	f023 0520 	bic.w	r5, r3, #32
   22282:	232d      	movs	r3, #45	; 0x2d
   22284:	9309      	str	r3, [sp, #36]	; 0x24
   22286:	eeb1 ab48 	vneg.f64	d10, d8
   2228a:	e7d2      	b.n	22232 <_svfprintf_r+0x1852>
   2228c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2228e:	920c      	str	r2, [sp, #48]	; 0x30
   22290:	2a00      	cmp	r2, #0
   22292:	f006 0301 	and.w	r3, r6, #1
   22296:	f340 810d 	ble.w	224b4 <_svfprintf_r+0x1ad4>
   2229a:	9903      	ldr	r1, [sp, #12]
   2229c:	430b      	orrs	r3, r1
   2229e:	f040 80cf 	bne.w	22440 <_svfprintf_r+0x1a60>
   222a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   222a4:	9305      	str	r3, [sp, #20]
   222a6:	2366      	movs	r3, #102	; 0x66
   222a8:	930b      	str	r3, [sp, #44]	; 0x2c
   222aa:	0572      	lsls	r2, r6, #21
   222ac:	f100 80a3 	bmi.w	223f6 <_svfprintf_r+0x1a16>
   222b0:	9b05      	ldr	r3, [sp, #20]
   222b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   222b6:	9302      	str	r3, [sp, #8]
   222b8:	e76c      	b.n	22194 <_svfprintf_r+0x17b4>
   222ba:	ee1b 1a10 	vmov	r1, s22
   222be:	aa24      	add	r2, sp, #144	; 0x90
   222c0:	4658      	mov	r0, fp
   222c2:	f002 f8f7 	bl	244b4 <__ssprint_r>
   222c6:	2800      	cmp	r0, #0
   222c8:	f47e afef 	bne.w	212aa <_svfprintf_r+0x8ca>
   222cc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   222ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   222d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   222d2:	1b1c      	subs	r4, r3, r4
   222d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   222d8:	f7ff b936 	b.w	21548 <_svfprintf_r+0xb68>
   222dc:	2358      	movs	r3, #88	; 0x58
   222de:	e78d      	b.n	221fc <_svfprintf_r+0x181c>
   222e0:	2200      	movs	r2, #0
   222e2:	9203      	str	r2, [sp, #12]
   222e4:	f7fe bbda 	b.w	20a9c <_svfprintf_r+0xbc>
   222e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   222ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   222ec:	189a      	adds	r2, r3, r2
   222ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   222f0:	9205      	str	r2, [sp, #20]
   222f2:	2b00      	cmp	r3, #0
   222f4:	f340 80ab 	ble.w	2244e <_svfprintf_r+0x1a6e>
   222f8:	2367      	movs	r3, #103	; 0x67
   222fa:	930b      	str	r3, [sp, #44]	; 0x2c
   222fc:	e7d5      	b.n	222aa <_svfprintf_r+0x18ca>
   222fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22300:	320f      	adds	r2, #15
   22302:	b2d2      	uxtb	r2, r2
   22304:	2101      	movs	r1, #1
   22306:	e618      	b.n	21f3a <_svfprintf_r+0x155a>
   22308:	18a0      	adds	r0, r4, r2
   2230a:	e5fb      	b.n	21f04 <_svfprintf_r+0x1524>
   2230c:	2900      	cmp	r1, #0
   2230e:	f040 80a8 	bne.w	22462 <_svfprintf_r+0x1a82>
   22312:	2230      	movs	r2, #48	; 0x30
   22314:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   22318:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   2231c:	3330      	adds	r3, #48	; 0x30
   2231e:	f802 3b01 	strb.w	r3, [r2], #1
   22322:	ab1e      	add	r3, sp, #120	; 0x78
   22324:	1ad3      	subs	r3, r2, r3
   22326:	9314      	str	r3, [sp, #80]	; 0x50
   22328:	e649      	b.n	21fbe <_svfprintf_r+0x15de>
   2232a:	3301      	adds	r3, #1
   2232c:	4912      	ldr	r1, [pc, #72]	; (22378 <_svfprintf_r+0x1998>)
   2232e:	f8ca 5004 	str.w	r5, [sl, #4]
   22332:	442a      	add	r2, r5
   22334:	2b07      	cmp	r3, #7
   22336:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2233a:	f8ca 1000 	str.w	r1, [sl]
   2233e:	f77f ac33 	ble.w	21ba8 <_svfprintf_r+0x11c8>
   22342:	ee1b 1a10 	vmov	r1, s22
   22346:	aa24      	add	r2, sp, #144	; 0x90
   22348:	4658      	mov	r0, fp
   2234a:	f002 f8b3 	bl	244b4 <__ssprint_r>
   2234e:	2800      	cmp	r0, #0
   22350:	f47e afab 	bne.w	212aa <_svfprintf_r+0x8ca>
   22354:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   22358:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2235c:	e426      	b.n	21bac <_svfprintf_r+0x11cc>
   2235e:	1c59      	adds	r1, r3, #1
   22360:	4658      	mov	r0, fp
   22362:	f7fb f923 	bl	1d5ac <_malloc_r>
   22366:	4604      	mov	r4, r0
   22368:	b350      	cbz	r0, 223c0 <_svfprintf_r+0x19e0>
   2236a:	9007      	str	r0, [sp, #28]
   2236c:	e754      	b.n	22218 <_svfprintf_r+0x1838>
   2236e:	bf00      	nop
   22370:	20002b4c 	.word	0x20002b4c
   22374:	20002b38 	.word	0x20002b38
   22378:	20003514 	.word	0x20003514
   2237c:	66666667 	.word	0x66666667
   22380:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   22384:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   22388:	f890 c00f 	ldrb.w	ip, [r0, #15]
   2238c:	4561      	cmp	r1, ip
   2238e:	4613      	mov	r3, r2
   22390:	d10a      	bne.n	223a8 <_svfprintf_r+0x19c8>
   22392:	f04f 0e30 	mov.w	lr, #48	; 0x30
   22396:	f803 ec01 	strb.w	lr, [r3, #-1]
   2239a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2239c:	1e59      	subs	r1, r3, #1
   2239e:	9122      	str	r1, [sp, #136]	; 0x88
   223a0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   223a4:	458c      	cmp	ip, r1
   223a6:	d0f6      	beq.n	22396 <_svfprintf_r+0x19b6>
   223a8:	2939      	cmp	r1, #57	; 0x39
   223aa:	bf16      	itet	ne
   223ac:	3101      	addne	r1, #1
   223ae:	7a81      	ldrbeq	r1, [r0, #10]
   223b0:	b2c9      	uxtbne	r1, r1
   223b2:	f803 1c01 	strb.w	r1, [r3, #-1]
   223b6:	e6ae      	b.n	22116 <_svfprintf_r+0x1736>
   223b8:	2300      	movs	r3, #0
   223ba:	4690      	mov	r8, r2
   223bc:	9307      	str	r3, [sp, #28]
   223be:	e760      	b.n	22282 <_svfprintf_r+0x18a2>
   223c0:	ee1b 2a10 	vmov	r2, s22
   223c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   223c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   223cc:	8193      	strh	r3, [r2, #12]
   223ce:	f7fe bc16 	b.w	20bfe <_svfprintf_r+0x21e>
   223d2:	07f5      	lsls	r5, r6, #31
   223d4:	f57f adfe 	bpl.w	21fd4 <_svfprintf_r+0x15f4>
   223d8:	e5f8      	b.n	21fcc <_svfprintf_r+0x15ec>
   223da:	9305      	str	r3, [sp, #20]
   223dc:	e6ce      	b.n	2217c <_svfprintf_r+0x179c>
   223de:	eeb5 ab40 	vcmp.f64	d10, #0.0
   223e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   223e6:	f43f ad8b 	beq.w	21f00 <_svfprintf_r+0x1520>
   223ea:	f1c2 0201 	rsb	r2, r2, #1
   223ee:	921b      	str	r2, [sp, #108]	; 0x6c
   223f0:	e587      	b.n	21f02 <_svfprintf_r+0x1522>
   223f2:	2367      	movs	r3, #103	; 0x67
   223f4:	930b      	str	r3, [sp, #44]	; 0x2c
   223f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   223f8:	780b      	ldrb	r3, [r1, #0]
   223fa:	2bff      	cmp	r3, #255	; 0xff
   223fc:	d079      	beq.n	224f2 <_svfprintf_r+0x1b12>
   223fe:	2500      	movs	r5, #0
   22400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   22402:	4628      	mov	r0, r5
   22404:	e003      	b.n	2240e <_svfprintf_r+0x1a2e>
   22406:	3001      	adds	r0, #1
   22408:	3101      	adds	r1, #1
   2240a:	2bff      	cmp	r3, #255	; 0xff
   2240c:	d008      	beq.n	22420 <_svfprintf_r+0x1a40>
   2240e:	4293      	cmp	r3, r2
   22410:	da06      	bge.n	22420 <_svfprintf_r+0x1a40>
   22412:	1ad2      	subs	r2, r2, r3
   22414:	784b      	ldrb	r3, [r1, #1]
   22416:	2b00      	cmp	r3, #0
   22418:	d1f5      	bne.n	22406 <_svfprintf_r+0x1a26>
   2241a:	780b      	ldrb	r3, [r1, #0]
   2241c:	3501      	adds	r5, #1
   2241e:	e7f4      	b.n	2240a <_svfprintf_r+0x1a2a>
   22420:	920c      	str	r2, [sp, #48]	; 0x30
   22422:	9113      	str	r1, [sp, #76]	; 0x4c
   22424:	900d      	str	r0, [sp, #52]	; 0x34
   22426:	950f      	str	r5, [sp, #60]	; 0x3c
   22428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2242a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2242c:	9916      	ldr	r1, [sp, #88]	; 0x58
   2242e:	4413      	add	r3, r2
   22430:	9a05      	ldr	r2, [sp, #20]
   22432:	fb01 2303 	mla	r3, r1, r3, r2
   22436:	9305      	str	r3, [sp, #20]
   22438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2243c:	9302      	str	r3, [sp, #8]
   2243e:	e5d5      	b.n	21fec <_svfprintf_r+0x160c>
   22440:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22442:	18d3      	adds	r3, r2, r3
   22444:	4419      	add	r1, r3
   22446:	2366      	movs	r3, #102	; 0x66
   22448:	9105      	str	r1, [sp, #20]
   2244a:	930b      	str	r3, [sp, #44]	; 0x2c
   2244c:	e72d      	b.n	222aa <_svfprintf_r+0x18ca>
   2244e:	f1c3 0301 	rsb	r3, r3, #1
   22452:	441a      	add	r2, r3
   22454:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   22458:	9302      	str	r3, [sp, #8]
   2245a:	2367      	movs	r3, #103	; 0x67
   2245c:	9205      	str	r2, [sp, #20]
   2245e:	930b      	str	r3, [sp, #44]	; 0x2c
   22460:	e698      	b.n	22194 <_svfprintf_r+0x17b4>
   22462:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   22466:	e759      	b.n	2231c <_svfprintf_r+0x193c>
   22468:	9b03      	ldr	r3, [sp, #12]
   2246a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   2246e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   22472:	9305      	str	r3, [sp, #20]
   22474:	e4b4      	b.n	21de0 <_svfprintf_r+0x1400>
   22476:	ee18 3a90 	vmov	r3, s17
   2247a:	2b00      	cmp	r3, #0
   2247c:	bfb4      	ite	lt
   2247e:	212d      	movlt	r1, #45	; 0x2d
   22480:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   22484:	4c25      	ldr	r4, [pc, #148]	; (2251c <_svfprintf_r+0x1b3c>)
   22486:	4b26      	ldr	r3, [pc, #152]	; (22520 <_svfprintf_r+0x1b40>)
   22488:	bfb8      	it	lt
   2248a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   2248e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   22492:	f7fe bc79 	b.w	20d88 <_svfprintf_r+0x3a8>
   22496:	9b03      	ldr	r3, [sp, #12]
   22498:	9302      	str	r3, [sp, #8]
   2249a:	9305      	str	r3, [sp, #20]
   2249c:	2373      	movs	r3, #115	; 0x73
   2249e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   224a2:	9003      	str	r0, [sp, #12]
   224a4:	900f      	str	r0, [sp, #60]	; 0x3c
   224a6:	900d      	str	r0, [sp, #52]	; 0x34
   224a8:	930b      	str	r3, [sp, #44]	; 0x2c
   224aa:	f7fe bc7a 	b.w	20da2 <_svfprintf_r+0x3c2>
   224ae:	2302      	movs	r3, #2
   224b0:	9314      	str	r3, [sp, #80]	; 0x50
   224b2:	e584      	b.n	21fbe <_svfprintf_r+0x15de>
   224b4:	9a03      	ldr	r2, [sp, #12]
   224b6:	4313      	orrs	r3, r2
   224b8:	d105      	bne.n	224c6 <_svfprintf_r+0x1ae6>
   224ba:	2301      	movs	r3, #1
   224bc:	2266      	movs	r2, #102	; 0x66
   224be:	9302      	str	r3, [sp, #8]
   224c0:	920b      	str	r2, [sp, #44]	; 0x2c
   224c2:	9305      	str	r3, [sp, #20]
   224c4:	e666      	b.n	22194 <_svfprintf_r+0x17b4>
   224c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   224c8:	3301      	adds	r3, #1
   224ca:	441a      	add	r2, r3
   224cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   224d0:	9302      	str	r3, [sp, #8]
   224d2:	2366      	movs	r3, #102	; 0x66
   224d4:	9205      	str	r2, [sp, #20]
   224d6:	930b      	str	r3, [sp, #44]	; 0x2c
   224d8:	e65c      	b.n	22194 <_svfprintf_r+0x17b4>
   224da:	9a08      	ldr	r2, [sp, #32]
   224dc:	f899 3001 	ldrb.w	r3, [r9, #1]
   224e0:	4689      	mov	r9, r1
   224e2:	f852 1b04 	ldr.w	r1, [r2], #4
   224e6:	9208      	str	r2, [sp, #32]
   224e8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   224ec:	9103      	str	r1, [sp, #12]
   224ee:	f7fe bad3 	b.w	20a98 <_svfprintf_r+0xb8>
   224f2:	2300      	movs	r3, #0
   224f4:	930f      	str	r3, [sp, #60]	; 0x3c
   224f6:	930d      	str	r3, [sp, #52]	; 0x34
   224f8:	e796      	b.n	22428 <_svfprintf_r+0x1a48>
   224fa:	230c      	movs	r3, #12
   224fc:	f8cb 3000 	str.w	r3, [fp]
   22500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22504:	9304      	str	r3, [sp, #16]
   22506:	f7fe bb81 	b.w	20c0c <_svfprintf_r+0x22c>
   2250a:	ee1b 2a10 	vmov	r2, s22
   2250e:	8993      	ldrh	r3, [r2, #12]
   22510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22514:	8193      	strh	r3, [r2, #12]
   22516:	f7fe bec8 	b.w	212aa <_svfprintf_r+0x8ca>
   2251a:	bf00      	nop
   2251c:	20002b30 	.word	0x20002b30
   22520:	20002b34 	.word	0x20002b34

00022524 <_Balloc>:
   22524:	6c43      	ldr	r3, [r0, #68]	; 0x44
   22526:	b570      	push	{r4, r5, r6, lr}
   22528:	4605      	mov	r5, r0
   2252a:	460c      	mov	r4, r1
   2252c:	b14b      	cbz	r3, 22542 <_Balloc+0x1e>
   2252e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   22532:	b180      	cbz	r0, 22556 <_Balloc+0x32>
   22534:	6802      	ldr	r2, [r0, #0]
   22536:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2253a:	2300      	movs	r3, #0
   2253c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   22540:	bd70      	pop	{r4, r5, r6, pc}
   22542:	2221      	movs	r2, #33	; 0x21
   22544:	2104      	movs	r1, #4
   22546:	f001 f85b 	bl	23600 <_calloc_r>
   2254a:	4603      	mov	r3, r0
   2254c:	6468      	str	r0, [r5, #68]	; 0x44
   2254e:	2800      	cmp	r0, #0
   22550:	d1ed      	bne.n	2252e <_Balloc+0xa>
   22552:	2000      	movs	r0, #0
   22554:	bd70      	pop	{r4, r5, r6, pc}
   22556:	2101      	movs	r1, #1
   22558:	fa01 f604 	lsl.w	r6, r1, r4
   2255c:	1d72      	adds	r2, r6, #5
   2255e:	0092      	lsls	r2, r2, #2
   22560:	4628      	mov	r0, r5
   22562:	f001 f84d 	bl	23600 <_calloc_r>
   22566:	2800      	cmp	r0, #0
   22568:	d0f3      	beq.n	22552 <_Balloc+0x2e>
   2256a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   2256e:	e7e4      	b.n	2253a <_Balloc+0x16>

00022570 <_Bfree>:
   22570:	b131      	cbz	r1, 22580 <_Bfree+0x10>
   22572:	6c43      	ldr	r3, [r0, #68]	; 0x44
   22574:	684a      	ldr	r2, [r1, #4]
   22576:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2257a:	6008      	str	r0, [r1, #0]
   2257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   22580:	4770      	bx	lr
   22582:	bf00      	nop

00022584 <__multadd>:
   22584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22588:	690e      	ldr	r6, [r1, #16]
   2258a:	4680      	mov	r8, r0
   2258c:	460f      	mov	r7, r1
   2258e:	461d      	mov	r5, r3
   22590:	f101 0e14 	add.w	lr, r1, #20
   22594:	2000      	movs	r0, #0
   22596:	f8de 1000 	ldr.w	r1, [lr]
   2259a:	b28c      	uxth	r4, r1
   2259c:	fb02 5304 	mla	r3, r2, r4, r5
   225a0:	0c09      	lsrs	r1, r1, #16
   225a2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   225a6:	fb02 cc01 	mla	ip, r2, r1, ip
   225aa:	3001      	adds	r0, #1
   225ac:	b29c      	uxth	r4, r3
   225ae:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   225b2:	4286      	cmp	r6, r0
   225b4:	f84e 4b04 	str.w	r4, [lr], #4
   225b8:	ea4f 451c 	mov.w	r5, ip, lsr #16
   225bc:	dceb      	bgt.n	22596 <__multadd+0x12>
   225be:	b13d      	cbz	r5, 225d0 <__multadd+0x4c>
   225c0:	68bb      	ldr	r3, [r7, #8]
   225c2:	42b3      	cmp	r3, r6
   225c4:	dd07      	ble.n	225d6 <__multadd+0x52>
   225c6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   225ca:	3601      	adds	r6, #1
   225cc:	615d      	str	r5, [r3, #20]
   225ce:	613e      	str	r6, [r7, #16]
   225d0:	4638      	mov	r0, r7
   225d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   225d6:	6879      	ldr	r1, [r7, #4]
   225d8:	4640      	mov	r0, r8
   225da:	3101      	adds	r1, #1
   225dc:	f7ff ffa2 	bl	22524 <_Balloc>
   225e0:	4604      	mov	r4, r0
   225e2:	b1b0      	cbz	r0, 22612 <__multadd+0x8e>
   225e4:	693a      	ldr	r2, [r7, #16]
   225e6:	3202      	adds	r2, #2
   225e8:	f107 010c 	add.w	r1, r7, #12
   225ec:	0092      	lsls	r2, r2, #2
   225ee:	300c      	adds	r0, #12
   225f0:	f7f5 ff6c 	bl	184cc <memcpy>
   225f4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   225f8:	687a      	ldr	r2, [r7, #4]
   225fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   225fe:	6039      	str	r1, [r7, #0]
   22600:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   22604:	4627      	mov	r7, r4
   22606:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   2260a:	3601      	adds	r6, #1
   2260c:	615d      	str	r5, [r3, #20]
   2260e:	613e      	str	r6, [r7, #16]
   22610:	e7de      	b.n	225d0 <__multadd+0x4c>
   22612:	4b03      	ldr	r3, [pc, #12]	; (22620 <__multadd+0x9c>)
   22614:	4803      	ldr	r0, [pc, #12]	; (22624 <__multadd+0xa0>)
   22616:	4622      	mov	r2, r4
   22618:	21ba      	movs	r1, #186	; 0xba
   2261a:	f000 ffd1 	bl	235c0 <__assert_func>
   2261e:	bf00      	nop
   22620:	20002758 	.word	0x20002758
   22624:	20002938 	.word	0x20002938

00022628 <__s2b>:
   22628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2262c:	4617      	mov	r7, r2
   2262e:	4a27      	ldr	r2, [pc, #156]	; (226cc <__s2b+0xa4>)
   22630:	461e      	mov	r6, r3
   22632:	3308      	adds	r3, #8
   22634:	460c      	mov	r4, r1
   22636:	2e09      	cmp	r6, #9
   22638:	fb82 1203 	smull	r1, r2, r2, r3
   2263c:	ea4f 73e3 	mov.w	r3, r3, asr #31
   22640:	4605      	mov	r5, r0
   22642:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   22646:	dd39      	ble.n	226bc <__s2b+0x94>
   22648:	f04f 0c01 	mov.w	ip, #1
   2264c:	2100      	movs	r1, #0
   2264e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22652:	4563      	cmp	r3, ip
   22654:	f101 0101 	add.w	r1, r1, #1
   22658:	dcf9      	bgt.n	2264e <__s2b+0x26>
   2265a:	4628      	mov	r0, r5
   2265c:	f7ff ff62 	bl	22524 <_Balloc>
   22660:	4601      	mov	r1, r0
   22662:	b368      	cbz	r0, 226c0 <__s2b+0x98>
   22664:	9b08      	ldr	r3, [sp, #32]
   22666:	6143      	str	r3, [r0, #20]
   22668:	2f09      	cmp	r7, #9
   2266a:	f04f 0301 	mov.w	r3, #1
   2266e:	6103      	str	r3, [r0, #16]
   22670:	dc12      	bgt.n	22698 <__s2b+0x70>
   22672:	340a      	adds	r4, #10
   22674:	2709      	movs	r7, #9
   22676:	42be      	cmp	r6, r7
   22678:	dd0b      	ble.n	22692 <__s2b+0x6a>
   2267a:	1bf2      	subs	r2, r6, r7
   2267c:	18a6      	adds	r6, r4, r2
   2267e:	f814 3b01 	ldrb.w	r3, [r4], #1
   22682:	220a      	movs	r2, #10
   22684:	3b30      	subs	r3, #48	; 0x30
   22686:	4628      	mov	r0, r5
   22688:	f7ff ff7c 	bl	22584 <__multadd>
   2268c:	42a6      	cmp	r6, r4
   2268e:	4601      	mov	r1, r0
   22690:	d1f5      	bne.n	2267e <__s2b+0x56>
   22692:	4608      	mov	r0, r1
   22694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22698:	f104 0909 	add.w	r9, r4, #9
   2269c:	46c8      	mov	r8, r9
   2269e:	443c      	add	r4, r7
   226a0:	f818 3b01 	ldrb.w	r3, [r8], #1
   226a4:	220a      	movs	r2, #10
   226a6:	3b30      	subs	r3, #48	; 0x30
   226a8:	4628      	mov	r0, r5
   226aa:	f7ff ff6b 	bl	22584 <__multadd>
   226ae:	45a0      	cmp	r8, r4
   226b0:	4601      	mov	r1, r0
   226b2:	d1f5      	bne.n	226a0 <__s2b+0x78>
   226b4:	f1a7 0408 	sub.w	r4, r7, #8
   226b8:	444c      	add	r4, r9
   226ba:	e7dc      	b.n	22676 <__s2b+0x4e>
   226bc:	2100      	movs	r1, #0
   226be:	e7cc      	b.n	2265a <__s2b+0x32>
   226c0:	460a      	mov	r2, r1
   226c2:	4b03      	ldr	r3, [pc, #12]	; (226d0 <__s2b+0xa8>)
   226c4:	4803      	ldr	r0, [pc, #12]	; (226d4 <__s2b+0xac>)
   226c6:	21d3      	movs	r1, #211	; 0xd3
   226c8:	f000 ff7a 	bl	235c0 <__assert_func>
   226cc:	38e38e39 	.word	0x38e38e39
   226d0:	20002758 	.word	0x20002758
   226d4:	20002938 	.word	0x20002938

000226d8 <__hi0bits>:
   226d8:	0c03      	lsrs	r3, r0, #16
   226da:	041b      	lsls	r3, r3, #16
   226dc:	b9d3      	cbnz	r3, 22714 <__hi0bits+0x3c>
   226de:	0400      	lsls	r0, r0, #16
   226e0:	2310      	movs	r3, #16
   226e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   226e6:	bf04      	itt	eq
   226e8:	0200      	lsleq	r0, r0, #8
   226ea:	3308      	addeq	r3, #8
   226ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   226f0:	bf04      	itt	eq
   226f2:	0100      	lsleq	r0, r0, #4
   226f4:	3304      	addeq	r3, #4
   226f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   226fa:	bf04      	itt	eq
   226fc:	0080      	lsleq	r0, r0, #2
   226fe:	3302      	addeq	r3, #2
   22700:	2800      	cmp	r0, #0
   22702:	db05      	blt.n	22710 <__hi0bits+0x38>
   22704:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   22708:	f103 0301 	add.w	r3, r3, #1
   2270c:	bf08      	it	eq
   2270e:	2320      	moveq	r3, #32
   22710:	4618      	mov	r0, r3
   22712:	4770      	bx	lr
   22714:	2300      	movs	r3, #0
   22716:	e7e4      	b.n	226e2 <__hi0bits+0xa>

00022718 <__lo0bits>:
   22718:	6803      	ldr	r3, [r0, #0]
   2271a:	f013 0207 	ands.w	r2, r3, #7
   2271e:	d008      	beq.n	22732 <__lo0bits+0x1a>
   22720:	07d9      	lsls	r1, r3, #31
   22722:	d41f      	bmi.n	22764 <__lo0bits+0x4c>
   22724:	079a      	lsls	r2, r3, #30
   22726:	d522      	bpl.n	2276e <__lo0bits+0x56>
   22728:	085b      	lsrs	r3, r3, #1
   2272a:	6003      	str	r3, [r0, #0]
   2272c:	2201      	movs	r2, #1
   2272e:	4610      	mov	r0, r2
   22730:	4770      	bx	lr
   22732:	b299      	uxth	r1, r3
   22734:	b909      	cbnz	r1, 2273a <__lo0bits+0x22>
   22736:	0c1b      	lsrs	r3, r3, #16
   22738:	2210      	movs	r2, #16
   2273a:	b2d9      	uxtb	r1, r3
   2273c:	b909      	cbnz	r1, 22742 <__lo0bits+0x2a>
   2273e:	3208      	adds	r2, #8
   22740:	0a1b      	lsrs	r3, r3, #8
   22742:	0719      	lsls	r1, r3, #28
   22744:	bf04      	itt	eq
   22746:	091b      	lsreq	r3, r3, #4
   22748:	3204      	addeq	r2, #4
   2274a:	0799      	lsls	r1, r3, #30
   2274c:	bf04      	itt	eq
   2274e:	089b      	lsreq	r3, r3, #2
   22750:	3202      	addeq	r2, #2
   22752:	07d9      	lsls	r1, r3, #31
   22754:	d403      	bmi.n	2275e <__lo0bits+0x46>
   22756:	085b      	lsrs	r3, r3, #1
   22758:	f102 0201 	add.w	r2, r2, #1
   2275c:	d005      	beq.n	2276a <__lo0bits+0x52>
   2275e:	6003      	str	r3, [r0, #0]
   22760:	4610      	mov	r0, r2
   22762:	4770      	bx	lr
   22764:	2200      	movs	r2, #0
   22766:	4610      	mov	r0, r2
   22768:	4770      	bx	lr
   2276a:	2220      	movs	r2, #32
   2276c:	e7df      	b.n	2272e <__lo0bits+0x16>
   2276e:	089b      	lsrs	r3, r3, #2
   22770:	2202      	movs	r2, #2
   22772:	6003      	str	r3, [r0, #0]
   22774:	4610      	mov	r0, r2
   22776:	4770      	bx	lr

00022778 <__i2b>:
   22778:	b538      	push	{r3, r4, r5, lr}
   2277a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2277c:	4604      	mov	r4, r0
   2277e:	460d      	mov	r5, r1
   22780:	b14b      	cbz	r3, 22796 <__i2b+0x1e>
   22782:	6858      	ldr	r0, [r3, #4]
   22784:	b1b0      	cbz	r0, 227b4 <__i2b+0x3c>
   22786:	6802      	ldr	r2, [r0, #0]
   22788:	605a      	str	r2, [r3, #4]
   2278a:	2200      	movs	r2, #0
   2278c:	2301      	movs	r3, #1
   2278e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   22792:	60c2      	str	r2, [r0, #12]
   22794:	bd38      	pop	{r3, r4, r5, pc}
   22796:	2221      	movs	r2, #33	; 0x21
   22798:	2104      	movs	r1, #4
   2279a:	f000 ff31 	bl	23600 <_calloc_r>
   2279e:	4603      	mov	r3, r0
   227a0:	6460      	str	r0, [r4, #68]	; 0x44
   227a2:	2800      	cmp	r0, #0
   227a4:	d1ed      	bne.n	22782 <__i2b+0xa>
   227a6:	4b09      	ldr	r3, [pc, #36]	; (227cc <__i2b+0x54>)
   227a8:	4809      	ldr	r0, [pc, #36]	; (227d0 <__i2b+0x58>)
   227aa:	2200      	movs	r2, #0
   227ac:	f240 1145 	movw	r1, #325	; 0x145
   227b0:	f000 ff06 	bl	235c0 <__assert_func>
   227b4:	221c      	movs	r2, #28
   227b6:	2101      	movs	r1, #1
   227b8:	4620      	mov	r0, r4
   227ba:	f000 ff21 	bl	23600 <_calloc_r>
   227be:	2800      	cmp	r0, #0
   227c0:	d0f1      	beq.n	227a6 <__i2b+0x2e>
   227c2:	2201      	movs	r2, #1
   227c4:	2302      	movs	r3, #2
   227c6:	e9c0 2301 	strd	r2, r3, [r0, #4]
   227ca:	e7de      	b.n	2278a <__i2b+0x12>
   227cc:	20002758 	.word	0x20002758
   227d0:	20002938 	.word	0x20002938

000227d4 <__multiply>:
   227d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227d8:	690e      	ldr	r6, [r1, #16]
   227da:	6915      	ldr	r5, [r2, #16]
   227dc:	42ae      	cmp	r6, r5
   227de:	b085      	sub	sp, #20
   227e0:	4688      	mov	r8, r1
   227e2:	4614      	mov	r4, r2
   227e4:	db05      	blt.n	227f2 <__multiply+0x1e>
   227e6:	462a      	mov	r2, r5
   227e8:	4623      	mov	r3, r4
   227ea:	4635      	mov	r5, r6
   227ec:	460c      	mov	r4, r1
   227ee:	4616      	mov	r6, r2
   227f0:	4698      	mov	r8, r3
   227f2:	68a3      	ldr	r3, [r4, #8]
   227f4:	6861      	ldr	r1, [r4, #4]
   227f6:	19af      	adds	r7, r5, r6
   227f8:	42bb      	cmp	r3, r7
   227fa:	bfb8      	it	lt
   227fc:	3101      	addlt	r1, #1
   227fe:	f7ff fe91 	bl	22524 <_Balloc>
   22802:	9001      	str	r0, [sp, #4]
   22804:	2800      	cmp	r0, #0
   22806:	f000 8087 	beq.w	22918 <__multiply+0x144>
   2280a:	9b01      	ldr	r3, [sp, #4]
   2280c:	f103 0914 	add.w	r9, r3, #20
   22810:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   22814:	45d1      	cmp	r9, sl
   22816:	d205      	bcs.n	22824 <__multiply+0x50>
   22818:	464b      	mov	r3, r9
   2281a:	2200      	movs	r2, #0
   2281c:	f843 2b04 	str.w	r2, [r3], #4
   22820:	459a      	cmp	sl, r3
   22822:	d8fb      	bhi.n	2281c <__multiply+0x48>
   22824:	f108 0814 	add.w	r8, r8, #20
   22828:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   2282c:	f104 0314 	add.w	r3, r4, #20
   22830:	45d8      	cmp	r8, fp
   22832:	461a      	mov	r2, r3
   22834:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   22838:	d25f      	bcs.n	228fa <__multiply+0x126>
   2283a:	1b2b      	subs	r3, r5, r4
   2283c:	3b15      	subs	r3, #21
   2283e:	f023 0303 	bic.w	r3, r3, #3
   22842:	3304      	adds	r3, #4
   22844:	3415      	adds	r4, #21
   22846:	42a5      	cmp	r5, r4
   22848:	bf38      	it	cc
   2284a:	2304      	movcc	r3, #4
   2284c:	e9cd a702 	strd	sl, r7, [sp, #8]
   22850:	46ac      	mov	ip, r5
   22852:	461f      	mov	r7, r3
   22854:	4692      	mov	sl, r2
   22856:	e005      	b.n	22864 <__multiply+0x90>
   22858:	0c09      	lsrs	r1, r1, #16
   2285a:	d129      	bne.n	228b0 <__multiply+0xdc>
   2285c:	45c3      	cmp	fp, r8
   2285e:	f109 0904 	add.w	r9, r9, #4
   22862:	d948      	bls.n	228f6 <__multiply+0x122>
   22864:	f858 1b04 	ldr.w	r1, [r8], #4
   22868:	b28d      	uxth	r5, r1
   2286a:	2d00      	cmp	r5, #0
   2286c:	d0f4      	beq.n	22858 <__multiply+0x84>
   2286e:	4656      	mov	r6, sl
   22870:	464c      	mov	r4, r9
   22872:	2300      	movs	r3, #0
   22874:	f856 1b04 	ldr.w	r1, [r6], #4
   22878:	6822      	ldr	r2, [r4, #0]
   2287a:	fa1f fe81 	uxth.w	lr, r1
   2287e:	b290      	uxth	r0, r2
   22880:	0c09      	lsrs	r1, r1, #16
   22882:	fb05 000e 	mla	r0, r5, lr, r0
   22886:	0c12      	lsrs	r2, r2, #16
   22888:	4403      	add	r3, r0
   2288a:	fb05 2201 	mla	r2, r5, r1, r2
   2288e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   22892:	b29b      	uxth	r3, r3
   22894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   22898:	45b4      	cmp	ip, r6
   2289a:	f844 3b04 	str.w	r3, [r4], #4
   2289e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   228a2:	d8e7      	bhi.n	22874 <__multiply+0xa0>
   228a4:	f849 3007 	str.w	r3, [r9, r7]
   228a8:	f858 1c04 	ldr.w	r1, [r8, #-4]
   228ac:	0c09      	lsrs	r1, r1, #16
   228ae:	d0d5      	beq.n	2285c <__multiply+0x88>
   228b0:	f8d9 3000 	ldr.w	r3, [r9]
   228b4:	4650      	mov	r0, sl
   228b6:	461a      	mov	r2, r3
   228b8:	464c      	mov	r4, r9
   228ba:	2600      	movs	r6, #0
   228bc:	8805      	ldrh	r5, [r0, #0]
   228be:	0c12      	lsrs	r2, r2, #16
   228c0:	fb01 2205 	mla	r2, r1, r5, r2
   228c4:	4416      	add	r6, r2
   228c6:	b29b      	uxth	r3, r3
   228c8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   228cc:	f844 3b04 	str.w	r3, [r4], #4
   228d0:	f850 5b04 	ldr.w	r5, [r0], #4
   228d4:	6822      	ldr	r2, [r4, #0]
   228d6:	0c2d      	lsrs	r5, r5, #16
   228d8:	b293      	uxth	r3, r2
   228da:	fb01 3305 	mla	r3, r1, r5, r3
   228de:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   228e2:	4584      	cmp	ip, r0
   228e4:	ea4f 4613 	mov.w	r6, r3, lsr #16
   228e8:	d8e8      	bhi.n	228bc <__multiply+0xe8>
   228ea:	45c3      	cmp	fp, r8
   228ec:	f849 3007 	str.w	r3, [r9, r7]
   228f0:	f109 0904 	add.w	r9, r9, #4
   228f4:	d8b6      	bhi.n	22864 <__multiply+0x90>
   228f6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   228fa:	2f00      	cmp	r7, #0
   228fc:	dc02      	bgt.n	22904 <__multiply+0x130>
   228fe:	e005      	b.n	2290c <__multiply+0x138>
   22900:	3f01      	subs	r7, #1
   22902:	d003      	beq.n	2290c <__multiply+0x138>
   22904:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   22908:	2b00      	cmp	r3, #0
   2290a:	d0f9      	beq.n	22900 <__multiply+0x12c>
   2290c:	9b01      	ldr	r3, [sp, #4]
   2290e:	4618      	mov	r0, r3
   22910:	611f      	str	r7, [r3, #16]
   22912:	b005      	add	sp, #20
   22914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22918:	4b03      	ldr	r3, [pc, #12]	; (22928 <__multiply+0x154>)
   2291a:	4804      	ldr	r0, [pc, #16]	; (2292c <__multiply+0x158>)
   2291c:	9a01      	ldr	r2, [sp, #4]
   2291e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   22922:	f000 fe4d 	bl	235c0 <__assert_func>
   22926:	bf00      	nop
   22928:	20002758 	.word	0x20002758
   2292c:	20002938 	.word	0x20002938

00022930 <__pow5mult>:
   22930:	f012 0303 	ands.w	r3, r2, #3
   22934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22938:	4614      	mov	r4, r2
   2293a:	4606      	mov	r6, r0
   2293c:	d132      	bne.n	229a4 <__pow5mult+0x74>
   2293e:	460d      	mov	r5, r1
   22940:	10a4      	asrs	r4, r4, #2
   22942:	d020      	beq.n	22986 <__pow5mult+0x56>
   22944:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   22948:	f1b8 0f00 	cmp.w	r8, #0
   2294c:	d033      	beq.n	229b6 <__pow5mult+0x86>
   2294e:	07e3      	lsls	r3, r4, #31
   22950:	f04f 0700 	mov.w	r7, #0
   22954:	d407      	bmi.n	22966 <__pow5mult+0x36>
   22956:	1064      	asrs	r4, r4, #1
   22958:	d015      	beq.n	22986 <__pow5mult+0x56>
   2295a:	f8d8 0000 	ldr.w	r0, [r8]
   2295e:	b1a8      	cbz	r0, 2298c <__pow5mult+0x5c>
   22960:	4680      	mov	r8, r0
   22962:	07e3      	lsls	r3, r4, #31
   22964:	d5f7      	bpl.n	22956 <__pow5mult+0x26>
   22966:	4642      	mov	r2, r8
   22968:	4629      	mov	r1, r5
   2296a:	4630      	mov	r0, r6
   2296c:	f7ff ff32 	bl	227d4 <__multiply>
   22970:	b1b5      	cbz	r5, 229a0 <__pow5mult+0x70>
   22972:	6869      	ldr	r1, [r5, #4]
   22974:	6c73      	ldr	r3, [r6, #68]	; 0x44
   22976:	1064      	asrs	r4, r4, #1
   22978:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2297c:	602a      	str	r2, [r5, #0]
   2297e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   22982:	4605      	mov	r5, r0
   22984:	d1e9      	bne.n	2295a <__pow5mult+0x2a>
   22986:	4628      	mov	r0, r5
   22988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2298c:	4642      	mov	r2, r8
   2298e:	4641      	mov	r1, r8
   22990:	4630      	mov	r0, r6
   22992:	f7ff ff1f 	bl	227d4 <__multiply>
   22996:	f8c8 0000 	str.w	r0, [r8]
   2299a:	6007      	str	r7, [r0, #0]
   2299c:	4680      	mov	r8, r0
   2299e:	e7e0      	b.n	22962 <__pow5mult+0x32>
   229a0:	4605      	mov	r5, r0
   229a2:	e7d8      	b.n	22956 <__pow5mult+0x26>
   229a4:	3b01      	subs	r3, #1
   229a6:	4a0f      	ldr	r2, [pc, #60]	; (229e4 <__pow5mult+0xb4>)
   229a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   229ac:	2300      	movs	r3, #0
   229ae:	f7ff fde9 	bl	22584 <__multadd>
   229b2:	4605      	mov	r5, r0
   229b4:	e7c4      	b.n	22940 <__pow5mult+0x10>
   229b6:	2101      	movs	r1, #1
   229b8:	4630      	mov	r0, r6
   229ba:	f7ff fdb3 	bl	22524 <_Balloc>
   229be:	4680      	mov	r8, r0
   229c0:	b140      	cbz	r0, 229d4 <__pow5mult+0xa4>
   229c2:	2301      	movs	r3, #1
   229c4:	f240 2271 	movw	r2, #625	; 0x271
   229c8:	e9c0 3204 	strd	r3, r2, [r0, #16]
   229cc:	2300      	movs	r3, #0
   229ce:	6430      	str	r0, [r6, #64]	; 0x40
   229d0:	6003      	str	r3, [r0, #0]
   229d2:	e7bc      	b.n	2294e <__pow5mult+0x1e>
   229d4:	4b04      	ldr	r3, [pc, #16]	; (229e8 <__pow5mult+0xb8>)
   229d6:	4805      	ldr	r0, [pc, #20]	; (229ec <__pow5mult+0xbc>)
   229d8:	4642      	mov	r2, r8
   229da:	f240 1145 	movw	r1, #325	; 0x145
   229de:	f000 fdef 	bl	235c0 <__assert_func>
   229e2:	bf00      	nop
   229e4:	20002fac 	.word	0x20002fac
   229e8:	20002758 	.word	0x20002758
   229ec:	20002938 	.word	0x20002938

000229f0 <__lshift>:
   229f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   229f4:	460d      	mov	r5, r1
   229f6:	4614      	mov	r4, r2
   229f8:	692f      	ldr	r7, [r5, #16]
   229fa:	68ab      	ldr	r3, [r5, #8]
   229fc:	6849      	ldr	r1, [r1, #4]
   229fe:	eb07 1762 	add.w	r7, r7, r2, asr #5
   22a02:	1c7e      	adds	r6, r7, #1
   22a04:	429e      	cmp	r6, r3
   22a06:	4680      	mov	r8, r0
   22a08:	ea4f 1962 	mov.w	r9, r2, asr #5
   22a0c:	dd04      	ble.n	22a18 <__lshift+0x28>
   22a0e:	005b      	lsls	r3, r3, #1
   22a10:	429e      	cmp	r6, r3
   22a12:	f101 0101 	add.w	r1, r1, #1
   22a16:	dcfa      	bgt.n	22a0e <__lshift+0x1e>
   22a18:	4640      	mov	r0, r8
   22a1a:	f7ff fd83 	bl	22524 <_Balloc>
   22a1e:	4684      	mov	ip, r0
   22a20:	2800      	cmp	r0, #0
   22a22:	d052      	beq.n	22aca <__lshift+0xda>
   22a24:	f1b9 0f00 	cmp.w	r9, #0
   22a28:	f100 0214 	add.w	r2, r0, #20
   22a2c:	dd0e      	ble.n	22a4c <__lshift+0x5c>
   22a2e:	f109 0105 	add.w	r1, r9, #5
   22a32:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   22a36:	4613      	mov	r3, r2
   22a38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   22a3c:	2000      	movs	r0, #0
   22a3e:	f843 0b04 	str.w	r0, [r3], #4
   22a42:	428b      	cmp	r3, r1
   22a44:	d1fb      	bne.n	22a3e <__lshift+0x4e>
   22a46:	f1ae 0314 	sub.w	r3, lr, #20
   22a4a:	441a      	add	r2, r3
   22a4c:	6929      	ldr	r1, [r5, #16]
   22a4e:	f105 0314 	add.w	r3, r5, #20
   22a52:	f014 0e1f 	ands.w	lr, r4, #31
   22a56:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   22a5a:	d02e      	beq.n	22aba <__lshift+0xca>
   22a5c:	f1ce 0920 	rsb	r9, lr, #32
   22a60:	4610      	mov	r0, r2
   22a62:	f04f 0a00 	mov.w	sl, #0
   22a66:	681c      	ldr	r4, [r3, #0]
   22a68:	fa04 f40e 	lsl.w	r4, r4, lr
   22a6c:	ea44 040a 	orr.w	r4, r4, sl
   22a70:	f840 4b04 	str.w	r4, [r0], #4
   22a74:	f853 4b04 	ldr.w	r4, [r3], #4
   22a78:	4299      	cmp	r1, r3
   22a7a:	fa24 fa09 	lsr.w	sl, r4, r9
   22a7e:	d8f2      	bhi.n	22a66 <__lshift+0x76>
   22a80:	1b4b      	subs	r3, r1, r5
   22a82:	3b15      	subs	r3, #21
   22a84:	f023 0303 	bic.w	r3, r3, #3
   22a88:	3304      	adds	r3, #4
   22a8a:	f105 0015 	add.w	r0, r5, #21
   22a8e:	4281      	cmp	r1, r0
   22a90:	bf38      	it	cc
   22a92:	2304      	movcc	r3, #4
   22a94:	f1ba 0f00 	cmp.w	sl, #0
   22a98:	bf18      	it	ne
   22a9a:	4637      	movne	r7, r6
   22a9c:	f842 a003 	str.w	sl, [r2, r3]
   22aa0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   22aa4:	686a      	ldr	r2, [r5, #4]
   22aa6:	f8cc 7010 	str.w	r7, [ip, #16]
   22aaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   22aae:	6029      	str	r1, [r5, #0]
   22ab0:	4660      	mov	r0, ip
   22ab2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   22ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22aba:	3a04      	subs	r2, #4
   22abc:	f853 0b04 	ldr.w	r0, [r3], #4
   22ac0:	f842 0f04 	str.w	r0, [r2, #4]!
   22ac4:	4299      	cmp	r1, r3
   22ac6:	d8f9      	bhi.n	22abc <__lshift+0xcc>
   22ac8:	e7ea      	b.n	22aa0 <__lshift+0xb0>
   22aca:	4b03      	ldr	r3, [pc, #12]	; (22ad8 <__lshift+0xe8>)
   22acc:	4803      	ldr	r0, [pc, #12]	; (22adc <__lshift+0xec>)
   22ace:	4662      	mov	r2, ip
   22ad0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   22ad4:	f000 fd74 	bl	235c0 <__assert_func>
   22ad8:	20002758 	.word	0x20002758
   22adc:	20002938 	.word	0x20002938

00022ae0 <__mcmp>:
   22ae0:	690b      	ldr	r3, [r1, #16]
   22ae2:	4684      	mov	ip, r0
   22ae4:	6900      	ldr	r0, [r0, #16]
   22ae6:	1ac0      	subs	r0, r0, r3
   22ae8:	d116      	bne.n	22b18 <__mcmp+0x38>
   22aea:	f10c 0c14 	add.w	ip, ip, #20
   22aee:	3114      	adds	r1, #20
   22af0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   22af4:	b410      	push	{r4}
   22af6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   22afa:	e001      	b.n	22b00 <__mcmp+0x20>
   22afc:	4594      	cmp	ip, r2
   22afe:	d208      	bcs.n	22b12 <__mcmp+0x32>
   22b00:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   22b04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   22b08:	428c      	cmp	r4, r1
   22b0a:	d0f7      	beq.n	22afc <__mcmp+0x1c>
   22b0c:	d205      	bcs.n	22b1a <__mcmp+0x3a>
   22b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22b12:	f85d 4b04 	ldr.w	r4, [sp], #4
   22b16:	4770      	bx	lr
   22b18:	4770      	bx	lr
   22b1a:	2001      	movs	r0, #1
   22b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
   22b20:	4770      	bx	lr
   22b22:	bf00      	nop

00022b24 <__mdiff>:
   22b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b28:	690f      	ldr	r7, [r1, #16]
   22b2a:	6913      	ldr	r3, [r2, #16]
   22b2c:	1aff      	subs	r7, r7, r3
   22b2e:	2f00      	cmp	r7, #0
   22b30:	460e      	mov	r6, r1
   22b32:	4690      	mov	r8, r2
   22b34:	d17f      	bne.n	22c36 <__mdiff+0x112>
   22b36:	f101 0514 	add.w	r5, r1, #20
   22b3a:	3214      	adds	r2, #20
   22b3c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   22b40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   22b44:	e001      	b.n	22b4a <__mdiff+0x26>
   22b46:	429d      	cmp	r5, r3
   22b48:	d278      	bcs.n	22c3c <__mdiff+0x118>
   22b4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   22b4e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   22b52:	42a1      	cmp	r1, r4
   22b54:	d0f7      	beq.n	22b46 <__mdiff+0x22>
   22b56:	d369      	bcc.n	22c2c <__mdiff+0x108>
   22b58:	6871      	ldr	r1, [r6, #4]
   22b5a:	f7ff fce3 	bl	22524 <_Balloc>
   22b5e:	4681      	mov	r9, r0
   22b60:	2800      	cmp	r0, #0
   22b62:	d077      	beq.n	22c54 <__mdiff+0x130>
   22b64:	6935      	ldr	r5, [r6, #16]
   22b66:	f8d8 2010 	ldr.w	r2, [r8, #16]
   22b6a:	60c7      	str	r7, [r0, #12]
   22b6c:	f108 0e14 	add.w	lr, r8, #20
   22b70:	f106 0014 	add.w	r0, r6, #20
   22b74:	f109 0a14 	add.w	sl, r9, #20
   22b78:	f106 0110 	add.w	r1, r6, #16
   22b7c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   22b80:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   22b84:	4656      	mov	r6, sl
   22b86:	f04f 0c00 	mov.w	ip, #0
   22b8a:	f85e 4b04 	ldr.w	r4, [lr], #4
   22b8e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   22b92:	b2a3      	uxth	r3, r4
   22b94:	fa1c fc8b 	uxtah	ip, ip, fp
   22b98:	ebac 0303 	sub.w	r3, ip, r3
   22b9c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   22ba0:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   22ba4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   22ba8:	b29b      	uxth	r3, r3
   22baa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   22bae:	4572      	cmp	r2, lr
   22bb0:	f846 3b04 	str.w	r3, [r6], #4
   22bb4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   22bb8:	d8e7      	bhi.n	22b8a <__mdiff+0x66>
   22bba:	eba2 0108 	sub.w	r1, r2, r8
   22bbe:	3915      	subs	r1, #21
   22bc0:	f108 0815 	add.w	r8, r8, #21
   22bc4:	4542      	cmp	r2, r8
   22bc6:	f021 0403 	bic.w	r4, r1, #3
   22bca:	f104 0404 	add.w	r4, r4, #4
   22bce:	bf38      	it	cc
   22bd0:	2404      	movcc	r4, #4
   22bd2:	4420      	add	r0, r4
   22bd4:	f021 0203 	bic.w	r2, r1, #3
   22bd8:	bf38      	it	cc
   22bda:	2200      	movcc	r2, #0
   22bdc:	4287      	cmp	r7, r0
   22bde:	4452      	add	r2, sl
   22be0:	4454      	add	r4, sl
   22be2:	d918      	bls.n	22c16 <__mdiff+0xf2>
   22be4:	4626      	mov	r6, r4
   22be6:	4601      	mov	r1, r0
   22be8:	f851 3b04 	ldr.w	r3, [r1], #4
   22bec:	fa1c fc83 	uxtah	ip, ip, r3
   22bf0:	ea4f 422c 	mov.w	r2, ip, asr #16
   22bf4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   22bf8:	fa1f fc8c 	uxth.w	ip, ip
   22bfc:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   22c00:	428f      	cmp	r7, r1
   22c02:	f846 3b04 	str.w	r3, [r6], #4
   22c06:	ea4f 4c22 	mov.w	ip, r2, asr #16
   22c0a:	d8ed      	bhi.n	22be8 <__mdiff+0xc4>
   22c0c:	3f01      	subs	r7, #1
   22c0e:	1a3f      	subs	r7, r7, r0
   22c10:	f027 0703 	bic.w	r7, r7, #3
   22c14:	19e2      	adds	r2, r4, r7
   22c16:	b923      	cbnz	r3, 22c22 <__mdiff+0xfe>
   22c18:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   22c1c:	3d01      	subs	r5, #1
   22c1e:	2b00      	cmp	r3, #0
   22c20:	d0fa      	beq.n	22c18 <__mdiff+0xf4>
   22c22:	f8c9 5010 	str.w	r5, [r9, #16]
   22c26:	4648      	mov	r0, r9
   22c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c2c:	4633      	mov	r3, r6
   22c2e:	2701      	movs	r7, #1
   22c30:	4646      	mov	r6, r8
   22c32:	4698      	mov	r8, r3
   22c34:	e790      	b.n	22b58 <__mdiff+0x34>
   22c36:	dbf9      	blt.n	22c2c <__mdiff+0x108>
   22c38:	2700      	movs	r7, #0
   22c3a:	e78d      	b.n	22b58 <__mdiff+0x34>
   22c3c:	2100      	movs	r1, #0
   22c3e:	f7ff fc71 	bl	22524 <_Balloc>
   22c42:	4681      	mov	r9, r0
   22c44:	b168      	cbz	r0, 22c62 <__mdiff+0x13e>
   22c46:	2201      	movs	r2, #1
   22c48:	2300      	movs	r3, #0
   22c4a:	e9c9 2304 	strd	r2, r3, [r9, #16]
   22c4e:	4648      	mov	r0, r9
   22c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c54:	4b06      	ldr	r3, [pc, #24]	; (22c70 <__mdiff+0x14c>)
   22c56:	4807      	ldr	r0, [pc, #28]	; (22c74 <__mdiff+0x150>)
   22c58:	464a      	mov	r2, r9
   22c5a:	f240 2145 	movw	r1, #581	; 0x245
   22c5e:	f000 fcaf 	bl	235c0 <__assert_func>
   22c62:	4b03      	ldr	r3, [pc, #12]	; (22c70 <__mdiff+0x14c>)
   22c64:	4803      	ldr	r0, [pc, #12]	; (22c74 <__mdiff+0x150>)
   22c66:	464a      	mov	r2, r9
   22c68:	f240 2137 	movw	r1, #567	; 0x237
   22c6c:	f000 fca8 	bl	235c0 <__assert_func>
   22c70:	20002758 	.word	0x20002758
   22c74:	20002938 	.word	0x20002938

00022c78 <__ulp>:
   22c78:	b082      	sub	sp, #8
   22c7a:	ed8d 0b00 	vstr	d0, [sp]
   22c7e:	4b16      	ldr	r3, [pc, #88]	; (22cd8 <__ulp+0x60>)
   22c80:	9a01      	ldr	r2, [sp, #4]
   22c82:	4013      	ands	r3, r2
   22c84:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   22c88:	2b00      	cmp	r3, #0
   22c8a:	dd06      	ble.n	22c9a <__ulp+0x22>
   22c8c:	2200      	movs	r2, #0
   22c8e:	4619      	mov	r1, r3
   22c90:	4610      	mov	r0, r2
   22c92:	ec41 0b10 	vmov	d0, r0, r1
   22c96:	b002      	add	sp, #8
   22c98:	4770      	bx	lr
   22c9a:	425b      	negs	r3, r3
   22c9c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   22ca0:	ea4f 5223 	mov.w	r2, r3, asr #20
   22ca4:	da09      	bge.n	22cba <__ulp+0x42>
   22ca6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   22caa:	4113      	asrs	r3, r2
   22cac:	2200      	movs	r2, #0
   22cae:	4619      	mov	r1, r3
   22cb0:	4610      	mov	r0, r2
   22cb2:	ec41 0b10 	vmov	d0, r0, r1
   22cb6:	b002      	add	sp, #8
   22cb8:	4770      	bx	lr
   22cba:	f1a2 0314 	sub.w	r3, r2, #20
   22cbe:	2b1e      	cmp	r3, #30
   22cc0:	bfda      	itte	le
   22cc2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   22cc6:	40da      	lsrle	r2, r3
   22cc8:	2201      	movgt	r2, #1
   22cca:	2300      	movs	r3, #0
   22ccc:	4619      	mov	r1, r3
   22cce:	4610      	mov	r0, r2
   22cd0:	ec41 0b10 	vmov	d0, r0, r1
   22cd4:	b002      	add	sp, #8
   22cd6:	4770      	bx	lr
   22cd8:	7ff00000 	.word	0x7ff00000

00022cdc <__b2d>:
   22cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cde:	6904      	ldr	r4, [r0, #16]
   22ce0:	f100 0614 	add.w	r6, r0, #20
   22ce4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   22ce8:	1f27      	subs	r7, r4, #4
   22cea:	f854 5c04 	ldr.w	r5, [r4, #-4]
   22cee:	4628      	mov	r0, r5
   22cf0:	f7ff fcf2 	bl	226d8 <__hi0bits>
   22cf4:	f1c0 0320 	rsb	r3, r0, #32
   22cf8:	280a      	cmp	r0, #10
   22cfa:	600b      	str	r3, [r1, #0]
   22cfc:	dd1b      	ble.n	22d36 <__b2d+0x5a>
   22cfe:	42be      	cmp	r6, r7
   22d00:	d20b      	bcs.n	22d1a <__b2d+0x3e>
   22d02:	380b      	subs	r0, #11
   22d04:	f854 1c08 	ldr.w	r1, [r4, #-8]
   22d08:	d12e      	bne.n	22d68 <__b2d+0x8c>
   22d0a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   22d0e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   22d12:	460a      	mov	r2, r1
   22d14:	ec43 2b10 	vmov	d0, r2, r3
   22d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d1a:	f1b0 010b 	subs.w	r1, r0, #11
   22d1e:	d0f4      	beq.n	22d0a <__b2d+0x2e>
   22d20:	fa05 f101 	lsl.w	r1, r5, r1
   22d24:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   22d28:	2100      	movs	r1, #0
   22d2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   22d2e:	460a      	mov	r2, r1
   22d30:	ec43 2b10 	vmov	d0, r2, r3
   22d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d36:	f1c0 0c0b 	rsb	ip, r0, #11
   22d3a:	fa25 f10c 	lsr.w	r1, r5, ip
   22d3e:	42be      	cmp	r6, r7
   22d40:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   22d44:	bf38      	it	cc
   22d46:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   22d4a:	f100 0015 	add.w	r0, r0, #21
   22d4e:	bf34      	ite	cc
   22d50:	fa21 f10c 	lsrcc.w	r1, r1, ip
   22d54:	2100      	movcs	r1, #0
   22d56:	fa05 f000 	lsl.w	r0, r5, r0
   22d5a:	4301      	orrs	r1, r0
   22d5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   22d60:	460a      	mov	r2, r1
   22d62:	ec43 2b10 	vmov	d0, r2, r3
   22d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d68:	f1c0 0c20 	rsb	ip, r0, #32
   22d6c:	4085      	lsls	r5, r0
   22d6e:	fa21 f30c 	lsr.w	r3, r1, ip
   22d72:	ea45 0703 	orr.w	r7, r5, r3
   22d76:	f1a4 0508 	sub.w	r5, r4, #8
   22d7a:	42ae      	cmp	r6, r5
   22d7c:	fa01 f100 	lsl.w	r1, r1, r0
   22d80:	bf3c      	itt	cc
   22d82:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   22d86:	fa20 f00c 	lsrcc.w	r0, r0, ip
   22d8a:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   22d8e:	bf38      	it	cc
   22d90:	4301      	orrcc	r1, r0
   22d92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   22d96:	460a      	mov	r2, r1
   22d98:	ec43 2b10 	vmov	d0, r2, r3
   22d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d9e:	bf00      	nop

00022da0 <__d2b>:
   22da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22da4:	4688      	mov	r8, r1
   22da6:	b083      	sub	sp, #12
   22da8:	2101      	movs	r1, #1
   22daa:	ec57 6b10 	vmov	r6, r7, d0
   22dae:	4615      	mov	r5, r2
   22db0:	f7ff fbb8 	bl	22524 <_Balloc>
   22db4:	4604      	mov	r4, r0
   22db6:	2800      	cmp	r0, #0
   22db8:	d051      	beq.n	22e5e <__d2b+0xbe>
   22dba:	f3c7 590a 	ubfx	r9, r7, #20, #11
   22dbe:	f3c7 0313 	ubfx	r3, r7, #0, #20
   22dc2:	f1b9 0f00 	cmp.w	r9, #0
   22dc6:	d001      	beq.n	22dcc <__d2b+0x2c>
   22dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22dcc:	2e00      	cmp	r6, #0
   22dce:	9301      	str	r3, [sp, #4]
   22dd0:	d118      	bne.n	22e04 <__d2b+0x64>
   22dd2:	a801      	add	r0, sp, #4
   22dd4:	f7ff fca0 	bl	22718 <__lo0bits>
   22dd8:	9a01      	ldr	r2, [sp, #4]
   22dda:	6162      	str	r2, [r4, #20]
   22ddc:	2201      	movs	r2, #1
   22dde:	f100 0320 	add.w	r3, r0, #32
   22de2:	6122      	str	r2, [r4, #16]
   22de4:	f1b9 0f00 	cmp.w	r9, #0
   22de8:	d025      	beq.n	22e36 <__d2b+0x96>
   22dea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   22dee:	eb09 0203 	add.w	r2, r9, r3
   22df2:	4620      	mov	r0, r4
   22df4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   22df8:	f8c8 2000 	str.w	r2, [r8]
   22dfc:	602b      	str	r3, [r5, #0]
   22dfe:	b003      	add	sp, #12
   22e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22e04:	4668      	mov	r0, sp
   22e06:	9600      	str	r6, [sp, #0]
   22e08:	f7ff fc86 	bl	22718 <__lo0bits>
   22e0c:	4603      	mov	r3, r0
   22e0e:	b310      	cbz	r0, 22e56 <__d2b+0xb6>
   22e10:	e9dd 0200 	ldrd	r0, r2, [sp]
   22e14:	f1c3 0120 	rsb	r1, r3, #32
   22e18:	fa02 f101 	lsl.w	r1, r2, r1
   22e1c:	4301      	orrs	r1, r0
   22e1e:	40da      	lsrs	r2, r3
   22e20:	6161      	str	r1, [r4, #20]
   22e22:	9201      	str	r2, [sp, #4]
   22e24:	2a00      	cmp	r2, #0
   22e26:	61a2      	str	r2, [r4, #24]
   22e28:	bf14      	ite	ne
   22e2a:	2202      	movne	r2, #2
   22e2c:	2201      	moveq	r2, #1
   22e2e:	6122      	str	r2, [r4, #16]
   22e30:	f1b9 0f00 	cmp.w	r9, #0
   22e34:	d1d9      	bne.n	22dea <__d2b+0x4a>
   22e36:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   22e3a:	f8c8 3000 	str.w	r3, [r8]
   22e3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   22e42:	6918      	ldr	r0, [r3, #16]
   22e44:	f7ff fc48 	bl	226d8 <__hi0bits>
   22e48:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   22e4c:	4620      	mov	r0, r4
   22e4e:	602b      	str	r3, [r5, #0]
   22e50:	b003      	add	sp, #12
   22e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22e56:	9a00      	ldr	r2, [sp, #0]
   22e58:	6162      	str	r2, [r4, #20]
   22e5a:	9a01      	ldr	r2, [sp, #4]
   22e5c:	e7e2      	b.n	22e24 <__d2b+0x84>
   22e5e:	4b03      	ldr	r3, [pc, #12]	; (22e6c <__d2b+0xcc>)
   22e60:	4803      	ldr	r0, [pc, #12]	; (22e70 <__d2b+0xd0>)
   22e62:	4622      	mov	r2, r4
   22e64:	f240 310f 	movw	r1, #783	; 0x30f
   22e68:	f000 fbaa 	bl	235c0 <__assert_func>
   22e6c:	20002758 	.word	0x20002758
   22e70:	20002938 	.word	0x20002938

00022e74 <__ratio>:
   22e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e76:	b083      	sub	sp, #12
   22e78:	460e      	mov	r6, r1
   22e7a:	4669      	mov	r1, sp
   22e7c:	4607      	mov	r7, r0
   22e7e:	f7ff ff2d 	bl	22cdc <__b2d>
   22e82:	a901      	add	r1, sp, #4
   22e84:	4630      	mov	r0, r6
   22e86:	ec55 4b10 	vmov	r4, r5, d0
   22e8a:	eeb0 7b40 	vmov.f64	d7, d0
   22e8e:	f7ff ff25 	bl	22cdc <__b2d>
   22e92:	6933      	ldr	r3, [r6, #16]
   22e94:	693a      	ldr	r2, [r7, #16]
   22e96:	1ad2      	subs	r2, r2, r3
   22e98:	e9dd 3100 	ldrd	r3, r1, [sp]
   22e9c:	1a5b      	subs	r3, r3, r1
   22e9e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   22ea2:	2b00      	cmp	r3, #0
   22ea4:	dd09      	ble.n	22eba <__ratio+0x46>
   22ea6:	ee17 2a90 	vmov	r2, s15
   22eaa:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   22eae:	ec45 4b17 	vmov	d7, r4, r5
   22eb2:	ee87 0b00 	vdiv.f64	d0, d7, d0
   22eb6:	b003      	add	sp, #12
   22eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22eba:	ee10 2a90 	vmov	r2, s1
   22ebe:	ec51 0b10 	vmov	r0, r1, d0
   22ec2:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   22ec6:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   22eca:	ec41 0b10 	vmov	d0, r0, r1
   22ece:	ee87 0b00 	vdiv.f64	d0, d7, d0
   22ed2:	b003      	add	sp, #12
   22ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22ed6:	bf00      	nop

00022ed8 <__copybits>:
   22ed8:	3901      	subs	r1, #1
   22eda:	1149      	asrs	r1, r1, #5
   22edc:	f101 0c01 	add.w	ip, r1, #1
   22ee0:	6911      	ldr	r1, [r2, #16]
   22ee2:	f102 0314 	add.w	r3, r2, #20
   22ee6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   22eea:	428b      	cmp	r3, r1
   22eec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   22ef0:	d217      	bcs.n	22f22 <__copybits+0x4a>
   22ef2:	b510      	push	{r4, lr}
   22ef4:	f1a0 0e04 	sub.w	lr, r0, #4
   22ef8:	f853 4b04 	ldr.w	r4, [r3], #4
   22efc:	f84e 4f04 	str.w	r4, [lr, #4]!
   22f00:	4299      	cmp	r1, r3
   22f02:	d8f9      	bhi.n	22ef8 <__copybits+0x20>
   22f04:	1a8a      	subs	r2, r1, r2
   22f06:	f1a2 0315 	sub.w	r3, r2, #21
   22f0a:	f023 0303 	bic.w	r3, r3, #3
   22f0e:	3304      	adds	r3, #4
   22f10:	4418      	add	r0, r3
   22f12:	4584      	cmp	ip, r0
   22f14:	d904      	bls.n	22f20 <__copybits+0x48>
   22f16:	2300      	movs	r3, #0
   22f18:	f840 3b04 	str.w	r3, [r0], #4
   22f1c:	4584      	cmp	ip, r0
   22f1e:	d8fb      	bhi.n	22f18 <__copybits+0x40>
   22f20:	bd10      	pop	{r4, pc}
   22f22:	4584      	cmp	ip, r0
   22f24:	d905      	bls.n	22f32 <__copybits+0x5a>
   22f26:	2300      	movs	r3, #0
   22f28:	f840 3b04 	str.w	r3, [r0], #4
   22f2c:	4584      	cmp	ip, r0
   22f2e:	d8fb      	bhi.n	22f28 <__copybits+0x50>
   22f30:	4770      	bx	lr
   22f32:	4770      	bx	lr

00022f34 <__any_on>:
   22f34:	6903      	ldr	r3, [r0, #16]
   22f36:	114a      	asrs	r2, r1, #5
   22f38:	4293      	cmp	r3, r2
   22f3a:	f100 0014 	add.w	r0, r0, #20
   22f3e:	da09      	bge.n	22f54 <__any_on+0x20>
   22f40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   22f44:	e002      	b.n	22f4c <__any_on+0x18>
   22f46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22f4a:	b9c2      	cbnz	r2, 22f7e <__any_on+0x4a>
   22f4c:	4283      	cmp	r3, r0
   22f4e:	d8fa      	bhi.n	22f46 <__any_on+0x12>
   22f50:	2000      	movs	r0, #0
   22f52:	4770      	bx	lr
   22f54:	dd10      	ble.n	22f78 <__any_on+0x44>
   22f56:	f011 011f 	ands.w	r1, r1, #31
   22f5a:	d00d      	beq.n	22f78 <__any_on+0x44>
   22f5c:	b410      	push	{r4}
   22f5e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   22f62:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   22f66:	fa24 f201 	lsr.w	r2, r4, r1
   22f6a:	408a      	lsls	r2, r1
   22f6c:	4294      	cmp	r4, r2
   22f6e:	d00c      	beq.n	22f8a <__any_on+0x56>
   22f70:	2001      	movs	r0, #1
   22f72:	f85d 4b04 	ldr.w	r4, [sp], #4
   22f76:	4770      	bx	lr
   22f78:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   22f7c:	e7e6      	b.n	22f4c <__any_on+0x18>
   22f7e:	2001      	movs	r0, #1
   22f80:	4770      	bx	lr
   22f82:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22f86:	2a00      	cmp	r2, #0
   22f88:	d1f2      	bne.n	22f70 <__any_on+0x3c>
   22f8a:	4283      	cmp	r3, r0
   22f8c:	d8f9      	bhi.n	22f82 <__any_on+0x4e>
   22f8e:	2000      	movs	r0, #0
   22f90:	f85d 4b04 	ldr.w	r4, [sp], #4
   22f94:	4770      	bx	lr
   22f96:	bf00      	nop

00022f98 <_fclose_r>:
   22f98:	b570      	push	{r4, r5, r6, lr}
   22f9a:	2900      	cmp	r1, #0
   22f9c:	d04b      	beq.n	23036 <_fclose_r+0x9e>
   22f9e:	4606      	mov	r6, r0
   22fa0:	460c      	mov	r4, r1
   22fa2:	b110      	cbz	r0, 22faa <_fclose_r+0x12>
   22fa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   22fa6:	2b00      	cmp	r3, #0
   22fa8:	d048      	beq.n	2303c <_fclose_r+0xa4>
   22faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22fac:	07d8      	lsls	r0, r3, #31
   22fae:	d534      	bpl.n	2301a <_fclose_r+0x82>
   22fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22fb4:	2b00      	cmp	r3, #0
   22fb6:	d03e      	beq.n	23036 <_fclose_r+0x9e>
   22fb8:	4621      	mov	r1, r4
   22fba:	4630      	mov	r0, r6
   22fbc:	f000 f850 	bl	23060 <__sflush_r>
   22fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22fc2:	4605      	mov	r5, r0
   22fc4:	b133      	cbz	r3, 22fd4 <_fclose_r+0x3c>
   22fc6:	69e1      	ldr	r1, [r4, #28]
   22fc8:	4630      	mov	r0, r6
   22fca:	4798      	blx	r3
   22fcc:	2800      	cmp	r0, #0
   22fce:	bfb8      	it	lt
   22fd0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   22fd4:	89a3      	ldrh	r3, [r4, #12]
   22fd6:	061a      	lsls	r2, r3, #24
   22fd8:	d43c      	bmi.n	23054 <_fclose_r+0xbc>
   22fda:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22fdc:	b141      	cbz	r1, 22ff0 <_fclose_r+0x58>
   22fde:	f104 0340 	add.w	r3, r4, #64	; 0x40
   22fe2:	4299      	cmp	r1, r3
   22fe4:	d002      	beq.n	22fec <_fclose_r+0x54>
   22fe6:	4630      	mov	r0, r6
   22fe8:	f7fc ffcc 	bl	1ff84 <_free_r>
   22fec:	2300      	movs	r3, #0
   22fee:	6323      	str	r3, [r4, #48]	; 0x30
   22ff0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   22ff2:	b121      	cbz	r1, 22ffe <_fclose_r+0x66>
   22ff4:	4630      	mov	r0, r6
   22ff6:	f7fc ffc5 	bl	1ff84 <_free_r>
   22ffa:	2300      	movs	r3, #0
   22ffc:	6463      	str	r3, [r4, #68]	; 0x44
   22ffe:	f7fc f84b 	bl	1f098 <__sfp_lock_acquire>
   23002:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23004:	2200      	movs	r2, #0
   23006:	07db      	lsls	r3, r3, #31
   23008:	81a2      	strh	r2, [r4, #12]
   2300a:	d51f      	bpl.n	2304c <_fclose_r+0xb4>
   2300c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2300e:	f7fc fea9 	bl	1fd64 <__retarget_lock_close_recursive>
   23012:	f7fc f847 	bl	1f0a4 <__sfp_lock_release>
   23016:	4628      	mov	r0, r5
   23018:	bd70      	pop	{r4, r5, r6, pc}
   2301a:	89a3      	ldrh	r3, [r4, #12]
   2301c:	0599      	lsls	r1, r3, #22
   2301e:	d4cb      	bmi.n	22fb8 <_fclose_r+0x20>
   23020:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23022:	f7fc fea1 	bl	1fd68 <__retarget_lock_acquire_recursive>
   23026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2302a:	2b00      	cmp	r3, #0
   2302c:	d1c4      	bne.n	22fb8 <_fclose_r+0x20>
   2302e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   23030:	f015 0501 	ands.w	r5, r5, #1
   23034:	d005      	beq.n	23042 <_fclose_r+0xaa>
   23036:	2500      	movs	r5, #0
   23038:	4628      	mov	r0, r5
   2303a:	bd70      	pop	{r4, r5, r6, pc}
   2303c:	f7fc f80e 	bl	1f05c <__sinit>
   23040:	e7b3      	b.n	22faa <_fclose_r+0x12>
   23042:	6da0      	ldr	r0, [r4, #88]	; 0x58
   23044:	f7fc fe92 	bl	1fd6c <__retarget_lock_release_recursive>
   23048:	4628      	mov	r0, r5
   2304a:	bd70      	pop	{r4, r5, r6, pc}
   2304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2304e:	f7fc fe8d 	bl	1fd6c <__retarget_lock_release_recursive>
   23052:	e7db      	b.n	2300c <_fclose_r+0x74>
   23054:	6921      	ldr	r1, [r4, #16]
   23056:	4630      	mov	r0, r6
   23058:	f7fc ff94 	bl	1ff84 <_free_r>
   2305c:	e7bd      	b.n	22fda <_fclose_r+0x42>
   2305e:	bf00      	nop

00023060 <__sflush_r>:
   23060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   23064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23068:	460c      	mov	r4, r1
   2306a:	0711      	lsls	r1, r2, #28
   2306c:	4680      	mov	r8, r0
   2306e:	d447      	bmi.n	23100 <__sflush_r+0xa0>
   23070:	6863      	ldr	r3, [r4, #4]
   23072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   23076:	2b00      	cmp	r3, #0
   23078:	81a2      	strh	r2, [r4, #12]
   2307a:	dd5e      	ble.n	2313a <__sflush_r+0xda>
   2307c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   2307e:	2d00      	cmp	r5, #0
   23080:	d058      	beq.n	23134 <__sflush_r+0xd4>
   23082:	2300      	movs	r3, #0
   23084:	f8d8 6000 	ldr.w	r6, [r8]
   23088:	f8c8 3000 	str.w	r3, [r8]
   2308c:	b293      	uxth	r3, r2
   2308e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   23092:	d156      	bne.n	23142 <__sflush_r+0xe2>
   23094:	2301      	movs	r3, #1
   23096:	69e1      	ldr	r1, [r4, #28]
   23098:	4640      	mov	r0, r8
   2309a:	47a8      	blx	r5
   2309c:	1c43      	adds	r3, r0, #1
   2309e:	d067      	beq.n	23170 <__sflush_r+0x110>
   230a0:	89a3      	ldrh	r3, [r4, #12]
   230a2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   230a4:	075f      	lsls	r7, r3, #29
   230a6:	d505      	bpl.n	230b4 <__sflush_r+0x54>
   230a8:	6863      	ldr	r3, [r4, #4]
   230aa:	1ac0      	subs	r0, r0, r3
   230ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   230ae:	b10b      	cbz	r3, 230b4 <__sflush_r+0x54>
   230b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   230b2:	1ac0      	subs	r0, r0, r3
   230b4:	69e1      	ldr	r1, [r4, #28]
   230b6:	4602      	mov	r2, r0
   230b8:	2300      	movs	r3, #0
   230ba:	4640      	mov	r0, r8
   230bc:	47a8      	blx	r5
   230be:	1c41      	adds	r1, r0, #1
   230c0:	d141      	bne.n	23146 <__sflush_r+0xe6>
   230c2:	f8d8 3000 	ldr.w	r3, [r8]
   230c6:	2b00      	cmp	r3, #0
   230c8:	d03d      	beq.n	23146 <__sflush_r+0xe6>
   230ca:	2b1d      	cmp	r3, #29
   230cc:	d001      	beq.n	230d2 <__sflush_r+0x72>
   230ce:	2b16      	cmp	r3, #22
   230d0:	d156      	bne.n	23180 <__sflush_r+0x120>
   230d2:	89a3      	ldrh	r3, [r4, #12]
   230d4:	6922      	ldr	r2, [r4, #16]
   230d6:	6022      	str	r2, [r4, #0]
   230d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   230dc:	2100      	movs	r1, #0
   230de:	6061      	str	r1, [r4, #4]
   230e0:	81a3      	strh	r3, [r4, #12]
   230e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   230e4:	f8c8 6000 	str.w	r6, [r8]
   230e8:	b321      	cbz	r1, 23134 <__sflush_r+0xd4>
   230ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
   230ee:	4299      	cmp	r1, r3
   230f0:	d002      	beq.n	230f8 <__sflush_r+0x98>
   230f2:	4640      	mov	r0, r8
   230f4:	f7fc ff46 	bl	1ff84 <_free_r>
   230f8:	2000      	movs	r0, #0
   230fa:	6320      	str	r0, [r4, #48]	; 0x30
   230fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23100:	6926      	ldr	r6, [r4, #16]
   23102:	b1be      	cbz	r6, 23134 <__sflush_r+0xd4>
   23104:	b293      	uxth	r3, r2
   23106:	6825      	ldr	r5, [r4, #0]
   23108:	6026      	str	r6, [r4, #0]
   2310a:	079a      	lsls	r2, r3, #30
   2310c:	bf0c      	ite	eq
   2310e:	6963      	ldreq	r3, [r4, #20]
   23110:	2300      	movne	r3, #0
   23112:	1bad      	subs	r5, r5, r6
   23114:	60a3      	str	r3, [r4, #8]
   23116:	e00b      	b.n	23130 <__sflush_r+0xd0>
   23118:	462b      	mov	r3, r5
   2311a:	4632      	mov	r2, r6
   2311c:	69e1      	ldr	r1, [r4, #28]
   2311e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   23120:	4640      	mov	r0, r8
   23122:	47b8      	blx	r7
   23124:	f1b0 0c00 	subs.w	ip, r0, #0
   23128:	eba5 050c 	sub.w	r5, r5, ip
   2312c:	4466      	add	r6, ip
   2312e:	dd17      	ble.n	23160 <__sflush_r+0x100>
   23130:	2d00      	cmp	r5, #0
   23132:	dcf1      	bgt.n	23118 <__sflush_r+0xb8>
   23134:	2000      	movs	r0, #0
   23136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2313a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2313c:	2b00      	cmp	r3, #0
   2313e:	dc9d      	bgt.n	2307c <__sflush_r+0x1c>
   23140:	e7f8      	b.n	23134 <__sflush_r+0xd4>
   23142:	6d20      	ldr	r0, [r4, #80]	; 0x50
   23144:	e7ae      	b.n	230a4 <__sflush_r+0x44>
   23146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2314a:	6922      	ldr	r2, [r4, #16]
   2314c:	6022      	str	r2, [r4, #0]
   2314e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   23152:	81a3      	strh	r3, [r4, #12]
   23154:	2200      	movs	r2, #0
   23156:	04db      	lsls	r3, r3, #19
   23158:	6062      	str	r2, [r4, #4]
   2315a:	d5c2      	bpl.n	230e2 <__sflush_r+0x82>
   2315c:	6520      	str	r0, [r4, #80]	; 0x50
   2315e:	e7c0      	b.n	230e2 <__sflush_r+0x82>
   23160:	89a3      	ldrh	r3, [r4, #12]
   23162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2316a:	81a3      	strh	r3, [r4, #12]
   2316c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23170:	f8d8 3000 	ldr.w	r3, [r8]
   23174:	2b00      	cmp	r3, #0
   23176:	d093      	beq.n	230a0 <__sflush_r+0x40>
   23178:	2b1d      	cmp	r3, #29
   2317a:	d006      	beq.n	2318a <__sflush_r+0x12a>
   2317c:	2b16      	cmp	r3, #22
   2317e:	d004      	beq.n	2318a <__sflush_r+0x12a>
   23180:	89a3      	ldrh	r3, [r4, #12]
   23182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23186:	81a3      	strh	r3, [r4, #12]
   23188:	e7d5      	b.n	23136 <__sflush_r+0xd6>
   2318a:	f8c8 6000 	str.w	r6, [r8]
   2318e:	e7d1      	b.n	23134 <__sflush_r+0xd4>

00023190 <_fflush_r>:
   23190:	b538      	push	{r3, r4, r5, lr}
   23192:	460c      	mov	r4, r1
   23194:	4605      	mov	r5, r0
   23196:	b108      	cbz	r0, 2319c <_fflush_r+0xc>
   23198:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2319a:	b303      	cbz	r3, 231de <_fflush_r+0x4e>
   2319c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   231a0:	b188      	cbz	r0, 231c6 <_fflush_r+0x36>
   231a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   231a4:	07db      	lsls	r3, r3, #31
   231a6:	d401      	bmi.n	231ac <_fflush_r+0x1c>
   231a8:	0581      	lsls	r1, r0, #22
   231aa:	d50f      	bpl.n	231cc <_fflush_r+0x3c>
   231ac:	4628      	mov	r0, r5
   231ae:	4621      	mov	r1, r4
   231b0:	f7ff ff56 	bl	23060 <__sflush_r>
   231b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   231b6:	07da      	lsls	r2, r3, #31
   231b8:	4605      	mov	r5, r0
   231ba:	d402      	bmi.n	231c2 <_fflush_r+0x32>
   231bc:	89a3      	ldrh	r3, [r4, #12]
   231be:	059b      	lsls	r3, r3, #22
   231c0:	d508      	bpl.n	231d4 <_fflush_r+0x44>
   231c2:	4628      	mov	r0, r5
   231c4:	bd38      	pop	{r3, r4, r5, pc}
   231c6:	4605      	mov	r5, r0
   231c8:	4628      	mov	r0, r5
   231ca:	bd38      	pop	{r3, r4, r5, pc}
   231cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   231ce:	f7fc fdcb 	bl	1fd68 <__retarget_lock_acquire_recursive>
   231d2:	e7eb      	b.n	231ac <_fflush_r+0x1c>
   231d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   231d6:	f7fc fdc9 	bl	1fd6c <__retarget_lock_release_recursive>
   231da:	4628      	mov	r0, r5
   231dc:	bd38      	pop	{r3, r4, r5, pc}
   231de:	f7fb ff3d 	bl	1f05c <__sinit>
   231e2:	e7db      	b.n	2319c <_fflush_r+0xc>

000231e4 <__sread>:
   231e4:	b510      	push	{r4, lr}
   231e6:	460c      	mov	r4, r1
   231e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   231ec:	f000 f8bc 	bl	23368 <_read_r>
   231f0:	2800      	cmp	r0, #0
   231f2:	db03      	blt.n	231fc <__sread+0x18>
   231f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   231f6:	4403      	add	r3, r0
   231f8:	6523      	str	r3, [r4, #80]	; 0x50
   231fa:	bd10      	pop	{r4, pc}
   231fc:	89a3      	ldrh	r3, [r4, #12]
   231fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   23202:	81a3      	strh	r3, [r4, #12]
   23204:	bd10      	pop	{r4, pc}
   23206:	bf00      	nop

00023208 <__swrite>:
   23208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2320c:	460c      	mov	r4, r1
   2320e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   23212:	461f      	mov	r7, r3
   23214:	05cb      	lsls	r3, r1, #23
   23216:	4605      	mov	r5, r0
   23218:	4616      	mov	r6, r2
   2321a:	d40b      	bmi.n	23234 <__swrite+0x2c>
   2321c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   23220:	81a1      	strh	r1, [r4, #12]
   23222:	463b      	mov	r3, r7
   23224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23228:	4632      	mov	r2, r6
   2322a:	4628      	mov	r0, r5
   2322c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23230:	f7fc bb8a 	b.w	1f948 <_write_r>
   23234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23238:	2302      	movs	r3, #2
   2323a:	2200      	movs	r2, #0
   2323c:	f000 f87e 	bl	2333c <_lseek_r>
   23240:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   23244:	e7ea      	b.n	2321c <__swrite+0x14>
   23246:	bf00      	nop

00023248 <__sseek>:
   23248:	b510      	push	{r4, lr}
   2324a:	460c      	mov	r4, r1
   2324c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23250:	f000 f874 	bl	2333c <_lseek_r>
   23254:	89a3      	ldrh	r3, [r4, #12]
   23256:	1c42      	adds	r2, r0, #1
   23258:	bf0e      	itee	eq
   2325a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2325e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   23262:	6520      	strne	r0, [r4, #80]	; 0x50
   23264:	81a3      	strh	r3, [r4, #12]
   23266:	bd10      	pop	{r4, pc}

00023268 <__sclose>:
   23268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2326c:	f000 b854 	b.w	23318 <_close_r>

00023270 <__ascii_wctomb>:
   23270:	b149      	cbz	r1, 23286 <__ascii_wctomb+0x16>
   23272:	2aff      	cmp	r2, #255	; 0xff
   23274:	d802      	bhi.n	2327c <__ascii_wctomb+0xc>
   23276:	700a      	strb	r2, [r1, #0]
   23278:	2001      	movs	r0, #1
   2327a:	4770      	bx	lr
   2327c:	238a      	movs	r3, #138	; 0x8a
   2327e:	6003      	str	r3, [r0, #0]
   23280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23284:	4770      	bx	lr
   23286:	4608      	mov	r0, r1
   23288:	4770      	bx	lr
   2328a:	bf00      	nop

0002328c <memcmp>:
   2328c:	2a03      	cmp	r2, #3
   2328e:	b570      	push	{r4, r5, r6, lr}
   23290:	d914      	bls.n	232bc <memcmp+0x30>
   23292:	ea40 0301 	orr.w	r3, r0, r1
   23296:	079b      	lsls	r3, r3, #30
   23298:	d122      	bne.n	232e0 <memcmp+0x54>
   2329a:	4604      	mov	r4, r0
   2329c:	460b      	mov	r3, r1
   2329e:	4619      	mov	r1, r3
   232a0:	4620      	mov	r0, r4
   232a2:	680e      	ldr	r6, [r1, #0]
   232a4:	6805      	ldr	r5, [r0, #0]
   232a6:	42b5      	cmp	r5, r6
   232a8:	f104 0404 	add.w	r4, r4, #4
   232ac:	f103 0304 	add.w	r3, r3, #4
   232b0:	d116      	bne.n	232e0 <memcmp+0x54>
   232b2:	3a04      	subs	r2, #4
   232b4:	2a03      	cmp	r2, #3
   232b6:	4620      	mov	r0, r4
   232b8:	4619      	mov	r1, r3
   232ba:	d8f0      	bhi.n	2329e <memcmp+0x12>
   232bc:	1e54      	subs	r4, r2, #1
   232be:	b19a      	cbz	r2, 232e8 <memcmp+0x5c>
   232c0:	1e42      	subs	r2, r0, #1
   232c2:	3901      	subs	r1, #1
   232c4:	e001      	b.n	232ca <memcmp+0x3e>
   232c6:	18c3      	adds	r3, r0, r3
   232c8:	d00c      	beq.n	232e4 <memcmp+0x58>
   232ca:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   232ce:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   232d2:	45e6      	cmp	lr, ip
   232d4:	eba4 0302 	sub.w	r3, r4, r2
   232d8:	d0f5      	beq.n	232c6 <memcmp+0x3a>
   232da:	ebae 000c 	sub.w	r0, lr, ip
   232de:	bd70      	pop	{r4, r5, r6, pc}
   232e0:	1e54      	subs	r4, r2, #1
   232e2:	e7ed      	b.n	232c0 <memcmp+0x34>
   232e4:	4618      	mov	r0, r3
   232e6:	bd70      	pop	{r4, r5, r6, pc}
   232e8:	4610      	mov	r0, r2
   232ea:	bd70      	pop	{r4, r5, r6, pc}

000232ec <strnlen>:
   232ec:	b171      	cbz	r1, 2330c <strnlen+0x20>
   232ee:	4603      	mov	r3, r0
   232f0:	eb00 0c01 	add.w	ip, r0, r1
   232f4:	e001      	b.n	232fa <strnlen+0xe>
   232f6:	4563      	cmp	r3, ip
   232f8:	d006      	beq.n	23308 <strnlen+0x1c>
   232fa:	461a      	mov	r2, r3
   232fc:	3301      	adds	r3, #1
   232fe:	7811      	ldrb	r1, [r2, #0]
   23300:	2900      	cmp	r1, #0
   23302:	d1f8      	bne.n	232f6 <strnlen+0xa>
   23304:	1a10      	subs	r0, r2, r0
   23306:	4770      	bx	lr
   23308:	1a18      	subs	r0, r3, r0
   2330a:	4770      	bx	lr
   2330c:	4608      	mov	r0, r1
   2330e:	4770      	bx	lr

00023310 <_localeconv_r>:
   23310:	4800      	ldr	r0, [pc, #0]	; (23314 <_localeconv_r+0x4>)
   23312:	4770      	bx	lr
   23314:	20003f30 	.word	0x20003f30

00023318 <_close_r>:
   23318:	b538      	push	{r3, r4, r5, lr}
   2331a:	4d07      	ldr	r5, [pc, #28]	; (23338 <_close_r+0x20>)
   2331c:	2200      	movs	r2, #0
   2331e:	4604      	mov	r4, r0
   23320:	4608      	mov	r0, r1
   23322:	602a      	str	r2, [r5, #0]
   23324:	f7f5 fd28 	bl	18d78 <_close>
   23328:	1c43      	adds	r3, r0, #1
   2332a:	d000      	beq.n	2332e <_close_r+0x16>
   2332c:	bd38      	pop	{r3, r4, r5, pc}
   2332e:	682b      	ldr	r3, [r5, #0]
   23330:	2b00      	cmp	r3, #0
   23332:	d0fb      	beq.n	2332c <_close_r+0x14>
   23334:	6023      	str	r3, [r4, #0]
   23336:	bd38      	pop	{r3, r4, r5, pc}
   23338:	20005be4 	.word	0x20005be4

0002333c <_lseek_r>:
   2333c:	b538      	push	{r3, r4, r5, lr}
   2333e:	460c      	mov	r4, r1
   23340:	4d08      	ldr	r5, [pc, #32]	; (23364 <_lseek_r+0x28>)
   23342:	4684      	mov	ip, r0
   23344:	4611      	mov	r1, r2
   23346:	4620      	mov	r0, r4
   23348:	461a      	mov	r2, r3
   2334a:	2300      	movs	r3, #0
   2334c:	602b      	str	r3, [r5, #0]
   2334e:	4664      	mov	r4, ip
   23350:	f7f5 fd1e 	bl	18d90 <_lseek>
   23354:	1c43      	adds	r3, r0, #1
   23356:	d000      	beq.n	2335a <_lseek_r+0x1e>
   23358:	bd38      	pop	{r3, r4, r5, pc}
   2335a:	682b      	ldr	r3, [r5, #0]
   2335c:	2b00      	cmp	r3, #0
   2335e:	d0fb      	beq.n	23358 <_lseek_r+0x1c>
   23360:	6023      	str	r3, [r4, #0]
   23362:	bd38      	pop	{r3, r4, r5, pc}
   23364:	20005be4 	.word	0x20005be4

00023368 <_read_r>:
   23368:	b538      	push	{r3, r4, r5, lr}
   2336a:	460c      	mov	r4, r1
   2336c:	4d08      	ldr	r5, [pc, #32]	; (23390 <_read_r+0x28>)
   2336e:	4684      	mov	ip, r0
   23370:	4611      	mov	r1, r2
   23372:	4620      	mov	r0, r4
   23374:	461a      	mov	r2, r3
   23376:	2300      	movs	r3, #0
   23378:	602b      	str	r3, [r5, #0]
   2337a:	4664      	mov	r4, ip
   2337c:	f7f5 fcfa 	bl	18d74 <_read>
   23380:	1c43      	adds	r3, r0, #1
   23382:	d000      	beq.n	23386 <_read_r+0x1e>
   23384:	bd38      	pop	{r3, r4, r5, pc}
   23386:	682b      	ldr	r3, [r5, #0]
   23388:	2b00      	cmp	r3, #0
   2338a:	d0fb      	beq.n	23384 <_read_r+0x1c>
   2338c:	6023      	str	r3, [r4, #0]
   2338e:	bd38      	pop	{r3, r4, r5, pc}
   23390:	20005be4 	.word	0x20005be4

00023394 <fcvtbuf>:
   23394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23398:	460e      	mov	r6, r1
   2339a:	4926      	ldr	r1, [pc, #152]	; (23434 <fcvtbuf+0xa0>)
   2339c:	b087      	sub	sp, #28
   2339e:	680f      	ldr	r7, [r1, #0]
   233a0:	4604      	mov	r4, r0
   233a2:	4690      	mov	r8, r2
   233a4:	461d      	mov	r5, r3
   233a6:	b353      	cbz	r3, 233fe <fcvtbuf+0x6a>
   233a8:	aa05      	add	r2, sp, #20
   233aa:	4633      	mov	r3, r6
   233ac:	9201      	str	r2, [sp, #4]
   233ae:	2103      	movs	r1, #3
   233b0:	4622      	mov	r2, r4
   233b2:	f8cd 8000 	str.w	r8, [sp]
   233b6:	4638      	mov	r0, r7
   233b8:	f000 f9f2 	bl	237a0 <_dtoa_r>
   233bc:	9b05      	ldr	r3, [sp, #20]
   233be:	6832      	ldr	r2, [r6, #0]
   233c0:	4298      	cmp	r0, r3
   233c2:	4684      	mov	ip, r0
   233c4:	f1c2 0200 	rsb	r2, r2, #0
   233c8:	4629      	mov	r1, r5
   233ca:	d209      	bcs.n	233e0 <fcvtbuf+0x4c>
   233cc:	1a10      	subs	r0, r2, r0
   233ce:	f81c 3b01 	ldrb.w	r3, [ip], #1
   233d2:	f801 3b01 	strb.w	r3, [r1], #1
   233d6:	9b05      	ldr	r3, [sp, #20]
   233d8:	4563      	cmp	r3, ip
   233da:	eb00 020c 	add.w	r2, r0, ip
   233de:	d8f6      	bhi.n	233ce <fcvtbuf+0x3a>
   233e0:	4294      	cmp	r4, r2
   233e2:	dd24      	ble.n	2342e <fcvtbuf+0x9a>
   233e4:	1aa2      	subs	r2, r4, r2
   233e6:	440a      	add	r2, r1
   233e8:	2330      	movs	r3, #48	; 0x30
   233ea:	f801 3b01 	strb.w	r3, [r1], #1
   233ee:	4291      	cmp	r1, r2
   233f0:	d1fb      	bne.n	233ea <fcvtbuf+0x56>
   233f2:	2300      	movs	r3, #0
   233f4:	7013      	strb	r3, [r2, #0]
   233f6:	4628      	mov	r0, r5
   233f8:	b007      	add	sp, #28
   233fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   233fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
   23400:	f100 0323 	add.w	r3, r0, #35	; 0x23
   23404:	429a      	cmp	r2, r3
   23406:	dd01      	ble.n	2340c <fcvtbuf+0x78>
   23408:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   2340a:	e7cd      	b.n	233a8 <fcvtbuf+0x14>
   2340c:	f100 0924 	add.w	r9, r0, #36	; 0x24
   23410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   23412:	464a      	mov	r2, r9
   23414:	4638      	mov	r0, r7
   23416:	ed8d 0b02 	vstr	d0, [sp, #8]
   2341a:	f7fa fb83 	bl	1db24 <_realloc_r>
   2341e:	4605      	mov	r5, r0
   23420:	2800      	cmp	r0, #0
   23422:	d0e8      	beq.n	233f6 <fcvtbuf+0x62>
   23424:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   23428:	ed9d 0b02 	vldr	d0, [sp, #8]
   2342c:	e7bc      	b.n	233a8 <fcvtbuf+0x14>
   2342e:	460a      	mov	r2, r1
   23430:	e7df      	b.n	233f2 <fcvtbuf+0x5e>
   23432:	bf00      	nop
   23434:	200043c8 	.word	0x200043c8
	...

00023440 <memchr>:
   23440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   23444:	2a10      	cmp	r2, #16
   23446:	db2b      	blt.n	234a0 <memchr+0x60>
   23448:	f010 0f07 	tst.w	r0, #7
   2344c:	d008      	beq.n	23460 <memchr+0x20>
   2344e:	f810 3b01 	ldrb.w	r3, [r0], #1
   23452:	3a01      	subs	r2, #1
   23454:	428b      	cmp	r3, r1
   23456:	d02d      	beq.n	234b4 <memchr+0x74>
   23458:	f010 0f07 	tst.w	r0, #7
   2345c:	b342      	cbz	r2, 234b0 <memchr+0x70>
   2345e:	d1f6      	bne.n	2344e <memchr+0xe>
   23460:	b4f0      	push	{r4, r5, r6, r7}
   23462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   23466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   2346a:	f022 0407 	bic.w	r4, r2, #7
   2346e:	f07f 0700 	mvns.w	r7, #0
   23472:	2300      	movs	r3, #0
   23474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   23478:	3c08      	subs	r4, #8
   2347a:	ea85 0501 	eor.w	r5, r5, r1
   2347e:	ea86 0601 	eor.w	r6, r6, r1
   23482:	fa85 f547 	uadd8	r5, r5, r7
   23486:	faa3 f587 	sel	r5, r3, r7
   2348a:	fa86 f647 	uadd8	r6, r6, r7
   2348e:	faa5 f687 	sel	r6, r5, r7
   23492:	b98e      	cbnz	r6, 234b8 <memchr+0x78>
   23494:	d1ee      	bne.n	23474 <memchr+0x34>
   23496:	bcf0      	pop	{r4, r5, r6, r7}
   23498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2349c:	f002 0207 	and.w	r2, r2, #7
   234a0:	b132      	cbz	r2, 234b0 <memchr+0x70>
   234a2:	f810 3b01 	ldrb.w	r3, [r0], #1
   234a6:	3a01      	subs	r2, #1
   234a8:	ea83 0301 	eor.w	r3, r3, r1
   234ac:	b113      	cbz	r3, 234b4 <memchr+0x74>
   234ae:	d1f8      	bne.n	234a2 <memchr+0x62>
   234b0:	2000      	movs	r0, #0
   234b2:	4770      	bx	lr
   234b4:	3801      	subs	r0, #1
   234b6:	4770      	bx	lr
   234b8:	2d00      	cmp	r5, #0
   234ba:	bf06      	itte	eq
   234bc:	4635      	moveq	r5, r6
   234be:	3803      	subeq	r0, #3
   234c0:	3807      	subne	r0, #7
   234c2:	f015 0f01 	tst.w	r5, #1
   234c6:	d107      	bne.n	234d8 <memchr+0x98>
   234c8:	3001      	adds	r0, #1
   234ca:	f415 7f80 	tst.w	r5, #256	; 0x100
   234ce:	bf02      	ittt	eq
   234d0:	3001      	addeq	r0, #1
   234d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   234d6:	3001      	addeq	r0, #1
   234d8:	bcf0      	pop	{r4, r5, r6, r7}
   234da:	3801      	subs	r0, #1
   234dc:	4770      	bx	lr
   234de:	bf00      	nop

000234e0 <_wcrtomb_r>:
   234e0:	b570      	push	{r4, r5, r6, lr}
   234e2:	4605      	mov	r5, r0
   234e4:	b084      	sub	sp, #16
   234e6:	b15b      	cbz	r3, 23500 <_wcrtomb_r+0x20>
   234e8:	461c      	mov	r4, r3
   234ea:	b169      	cbz	r1, 23508 <_wcrtomb_r+0x28>
   234ec:	4b0e      	ldr	r3, [pc, #56]	; (23528 <_wcrtomb_r+0x48>)
   234ee:	4628      	mov	r0, r5
   234f0:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   234f4:	4623      	mov	r3, r4
   234f6:	47b0      	blx	r6
   234f8:	1c43      	adds	r3, r0, #1
   234fa:	d00f      	beq.n	2351c <_wcrtomb_r+0x3c>
   234fc:	b004      	add	sp, #16
   234fe:	bd70      	pop	{r4, r5, r6, pc}
   23500:	f500 7482 	add.w	r4, r0, #260	; 0x104
   23504:	2900      	cmp	r1, #0
   23506:	d1f1      	bne.n	234ec <_wcrtomb_r+0xc>
   23508:	4a07      	ldr	r2, [pc, #28]	; (23528 <_wcrtomb_r+0x48>)
   2350a:	4623      	mov	r3, r4
   2350c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   23510:	4628      	mov	r0, r5
   23512:	460a      	mov	r2, r1
   23514:	a901      	add	r1, sp, #4
   23516:	47b0      	blx	r6
   23518:	1c43      	adds	r3, r0, #1
   2351a:	d1ef      	bne.n	234fc <_wcrtomb_r+0x1c>
   2351c:	2200      	movs	r2, #0
   2351e:	238a      	movs	r3, #138	; 0x8a
   23520:	6022      	str	r2, [r4, #0]
   23522:	602b      	str	r3, [r5, #0]
   23524:	b004      	add	sp, #16
   23526:	bd70      	pop	{r4, r5, r6, pc}
   23528:	20003e40 	.word	0x20003e40

0002352c <_wcsrtombs_r>:
   2352c:	b510      	push	{r4, lr}
   2352e:	b082      	sub	sp, #8
   23530:	9c04      	ldr	r4, [sp, #16]
   23532:	e9cd 3400 	strd	r3, r4, [sp]
   23536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2353a:	f002 fb6b 	bl	25c14 <_wcsnrtombs_r>
   2353e:	b002      	add	sp, #8
   23540:	bd10      	pop	{r4, pc}
   23542:	bf00      	nop
   23544:	0000      	movs	r0, r0
	...

00023548 <frexp>:
   23548:	b430      	push	{r4, r5}
   2354a:	b082      	sub	sp, #8
   2354c:	ed8d 0b00 	vstr	d0, [sp]
   23550:	9a01      	ldr	r2, [sp, #4]
   23552:	4c19      	ldr	r4, [pc, #100]	; (235b8 <frexp+0x70>)
   23554:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   23558:	2100      	movs	r1, #0
   2355a:	42a3      	cmp	r3, r4
   2355c:	6001      	str	r1, [r0, #0]
   2355e:	dc21      	bgt.n	235a4 <frexp+0x5c>
   23560:	9c00      	ldr	r4, [sp, #0]
   23562:	431c      	orrs	r4, r3
   23564:	d01e      	beq.n	235a4 <frexp+0x5c>
   23566:	4c15      	ldr	r4, [pc, #84]	; (235bc <frexp+0x74>)
   23568:	4014      	ands	r4, r2
   2356a:	b954      	cbnz	r4, 23582 <frexp+0x3a>
   2356c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 235b0 <frexp+0x68>
   23570:	ee20 7b07 	vmul.f64	d7, d0, d7
   23574:	ed8d 7b00 	vstr	d7, [sp]
   23578:	9a01      	ldr	r2, [sp, #4]
   2357a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   2357e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   23582:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   23586:	e9dd 4500 	ldrd	r4, r5, [sp]
   2358a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   2358e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   23592:	151b      	asrs	r3, r3, #20
   23594:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   23598:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   2359c:	e9cd 4500 	strd	r4, r5, [sp]
   235a0:	440b      	add	r3, r1
   235a2:	6003      	str	r3, [r0, #0]
   235a4:	ed9d 0b00 	vldr	d0, [sp]
   235a8:	b002      	add	sp, #8
   235aa:	bc30      	pop	{r4, r5}
   235ac:	4770      	bx	lr
   235ae:	bf00      	nop
   235b0:	00000000 	.word	0x00000000
   235b4:	43500000 	.word	0x43500000
   235b8:	7fefffff 	.word	0x7fefffff
   235bc:	7ff00000 	.word	0x7ff00000

000235c0 <__assert_func>:
   235c0:	b500      	push	{lr}
   235c2:	4c0b      	ldr	r4, [pc, #44]	; (235f0 <__assert_func+0x30>)
   235c4:	6825      	ldr	r5, [r4, #0]
   235c6:	4614      	mov	r4, r2
   235c8:	68ee      	ldr	r6, [r5, #12]
   235ca:	461a      	mov	r2, r3
   235cc:	b085      	sub	sp, #20
   235ce:	4603      	mov	r3, r0
   235d0:	460d      	mov	r5, r1
   235d2:	b14c      	cbz	r4, 235e8 <__assert_func+0x28>
   235d4:	4907      	ldr	r1, [pc, #28]	; (235f4 <__assert_func+0x34>)
   235d6:	9500      	str	r5, [sp, #0]
   235d8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   235dc:	4630      	mov	r0, r6
   235de:	4906      	ldr	r1, [pc, #24]	; (235f8 <__assert_func+0x38>)
   235e0:	f000 ff54 	bl	2448c <fiprintf>
   235e4:	f7f5 fbd8 	bl	18d98 <abort>
   235e8:	4904      	ldr	r1, [pc, #16]	; (235fc <__assert_func+0x3c>)
   235ea:	460c      	mov	r4, r1
   235ec:	e7f3      	b.n	235d6 <__assert_func+0x16>
   235ee:	bf00      	nop
   235f0:	200043c8 	.word	0x200043c8
   235f4:	20002718 	.word	0x20002718
   235f8:	20002728 	.word	0x20002728
   235fc:	20002724 	.word	0x20002724

00023600 <_calloc_r>:
   23600:	b538      	push	{r3, r4, r5, lr}
   23602:	fba1 1402 	umull	r1, r4, r1, r2
   23606:	bb8c      	cbnz	r4, 2366c <_calloc_r+0x6c>
   23608:	f7f9 ffd0 	bl	1d5ac <_malloc_r>
   2360c:	4605      	mov	r5, r0
   2360e:	b1e0      	cbz	r0, 2364a <_calloc_r+0x4a>
   23610:	f850 2c04 	ldr.w	r2, [r0, #-4]
   23614:	f022 0203 	bic.w	r2, r2, #3
   23618:	3a04      	subs	r2, #4
   2361a:	2a24      	cmp	r2, #36	; 0x24
   2361c:	d817      	bhi.n	2364e <_calloc_r+0x4e>
   2361e:	2a13      	cmp	r2, #19
   23620:	d91a      	bls.n	23658 <_calloc_r+0x58>
   23622:	2a1b      	cmp	r2, #27
   23624:	e9c0 4400 	strd	r4, r4, [r0]
   23628:	d91d      	bls.n	23666 <_calloc_r+0x66>
   2362a:	2a24      	cmp	r2, #36	; 0x24
   2362c:	bf14      	ite	ne
   2362e:	f100 0210 	addne.w	r2, r0, #16
   23632:	f100 0218 	addeq.w	r2, r0, #24
   23636:	f04f 0300 	mov.w	r3, #0
   2363a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2363e:	bf04      	itt	eq
   23640:	6104      	streq	r4, [r0, #16]
   23642:	6144      	streq	r4, [r0, #20]
   23644:	e9c2 3300 	strd	r3, r3, [r2]
   23648:	6093      	str	r3, [r2, #8]
   2364a:	4628      	mov	r0, r5
   2364c:	bd38      	pop	{r3, r4, r5, pc}
   2364e:	4621      	mov	r1, r4
   23650:	f7fb fdce 	bl	1f1f0 <memset>
   23654:	4628      	mov	r0, r5
   23656:	bd38      	pop	{r3, r4, r5, pc}
   23658:	4602      	mov	r2, r0
   2365a:	2300      	movs	r3, #0
   2365c:	e9c2 3300 	strd	r3, r3, [r2]
   23660:	6093      	str	r3, [r2, #8]
   23662:	4628      	mov	r0, r5
   23664:	bd38      	pop	{r3, r4, r5, pc}
   23666:	f100 0208 	add.w	r2, r0, #8
   2366a:	e7f6      	b.n	2365a <_calloc_r+0x5a>
   2366c:	f7fc f982 	bl	1f974 <__errno>
   23670:	230c      	movs	r3, #12
   23672:	2500      	movs	r5, #0
   23674:	6003      	str	r3, [r0, #0]
   23676:	e7e8      	b.n	2364a <_calloc_r+0x4a>

00023678 <quorem>:
   23678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2367c:	6903      	ldr	r3, [r0, #16]
   2367e:	690c      	ldr	r4, [r1, #16]
   23680:	42a3      	cmp	r3, r4
   23682:	b083      	sub	sp, #12
   23684:	f2c0 8087 	blt.w	23796 <quorem+0x11e>
   23688:	3c01      	subs	r4, #1
   2368a:	f101 0514 	add.w	r5, r1, #20
   2368e:	00a3      	lsls	r3, r4, #2
   23690:	f100 0814 	add.w	r8, r0, #20
   23694:	9300      	str	r3, [sp, #0]
   23696:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2369a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   2369e:	3301      	adds	r3, #1
   236a0:	4681      	mov	r9, r0
   236a2:	429a      	cmp	r2, r3
   236a4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   236a8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   236ac:	9001      	str	r0, [sp, #4]
   236ae:	fbb2 f6f3 	udiv	r6, r2, r3
   236b2:	d33b      	bcc.n	2372c <quorem+0xb4>
   236b4:	f04f 0c00 	mov.w	ip, #0
   236b8:	46ae      	mov	lr, r5
   236ba:	4640      	mov	r0, r8
   236bc:	46e2      	mov	sl, ip
   236be:	4663      	mov	r3, ip
   236c0:	f85e bb04 	ldr.w	fp, [lr], #4
   236c4:	6802      	ldr	r2, [r0, #0]
   236c6:	fa1f fc8b 	uxth.w	ip, fp
   236ca:	fb06 330c 	mla	r3, r6, ip, r3
   236ce:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   236d2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   236d6:	fb06 cc0b 	mla	ip, r6, fp, ip
   236da:	b29b      	uxth	r3, r3
   236dc:	ebaa 0303 	sub.w	r3, sl, r3
   236e0:	fa1f fa8c 	uxth.w	sl, ip
   236e4:	fa13 f382 	uxtah	r3, r3, r2
   236e8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   236ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
   236f0:	b29b      	uxth	r3, r3
   236f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   236f6:	4577      	cmp	r7, lr
   236f8:	f840 3b04 	str.w	r3, [r0], #4
   236fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   23700:	ea4f 431c 	mov.w	r3, ip, lsr #16
   23704:	d2dc      	bcs.n	236c0 <quorem+0x48>
   23706:	9b00      	ldr	r3, [sp, #0]
   23708:	f858 3003 	ldr.w	r3, [r8, r3]
   2370c:	b973      	cbnz	r3, 2372c <quorem+0xb4>
   2370e:	9b01      	ldr	r3, [sp, #4]
   23710:	3b04      	subs	r3, #4
   23712:	4598      	cmp	r8, r3
   23714:	d304      	bcc.n	23720 <quorem+0xa8>
   23716:	e007      	b.n	23728 <quorem+0xb0>
   23718:	4598      	cmp	r8, r3
   2371a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2371e:	d203      	bcs.n	23728 <quorem+0xb0>
   23720:	f853 2904 	ldr.w	r2, [r3], #-4
   23724:	2a00      	cmp	r2, #0
   23726:	d0f7      	beq.n	23718 <quorem+0xa0>
   23728:	f8c9 4010 	str.w	r4, [r9, #16]
   2372c:	4648      	mov	r0, r9
   2372e:	f7ff f9d7 	bl	22ae0 <__mcmp>
   23732:	2800      	cmp	r0, #0
   23734:	db2b      	blt.n	2378e <quorem+0x116>
   23736:	3601      	adds	r6, #1
   23738:	4641      	mov	r1, r8
   2373a:	2300      	movs	r3, #0
   2373c:	f855 0b04 	ldr.w	r0, [r5], #4
   23740:	f8d1 c000 	ldr.w	ip, [r1]
   23744:	b282      	uxth	r2, r0
   23746:	1a9a      	subs	r2, r3, r2
   23748:	0c03      	lsrs	r3, r0, #16
   2374a:	fa12 f28c 	uxtah	r2, r2, ip
   2374e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   23752:	eb03 4322 	add.w	r3, r3, r2, asr #16
   23756:	b292      	uxth	r2, r2
   23758:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2375c:	42af      	cmp	r7, r5
   2375e:	f841 2b04 	str.w	r2, [r1], #4
   23762:	ea4f 4323 	mov.w	r3, r3, asr #16
   23766:	d2e9      	bcs.n	2373c <quorem+0xc4>
   23768:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   2376c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   23770:	b96a      	cbnz	r2, 2378e <quorem+0x116>
   23772:	3b04      	subs	r3, #4
   23774:	4598      	cmp	r8, r3
   23776:	d304      	bcc.n	23782 <quorem+0x10a>
   23778:	e007      	b.n	2378a <quorem+0x112>
   2377a:	4598      	cmp	r8, r3
   2377c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   23780:	d203      	bcs.n	2378a <quorem+0x112>
   23782:	f853 2904 	ldr.w	r2, [r3], #-4
   23786:	2a00      	cmp	r2, #0
   23788:	d0f7      	beq.n	2377a <quorem+0x102>
   2378a:	f8c9 4010 	str.w	r4, [r9, #16]
   2378e:	4630      	mov	r0, r6
   23790:	b003      	add	sp, #12
   23792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23796:	2000      	movs	r0, #0
   23798:	b003      	add	sp, #12
   2379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2379e:	bf00      	nop

000237a0 <_dtoa_r>:
   237a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237a4:	ed2d 8b02 	vpush	{d8}
   237a8:	b08f      	sub	sp, #60	; 0x3c
   237aa:	ed8d 0b02 	vstr	d0, [sp, #8]
   237ae:	9101      	str	r1, [sp, #4]
   237b0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   237b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   237b4:	9305      	str	r3, [sp, #20]
   237b6:	ec57 6b10 	vmov	r6, r7, d0
   237ba:	4604      	mov	r4, r0
   237bc:	4693      	mov	fp, r2
   237be:	b141      	cbz	r1, 237d2 <_dtoa_r+0x32>
   237c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   237c2:	604a      	str	r2, [r1, #4]
   237c4:	2301      	movs	r3, #1
   237c6:	4093      	lsls	r3, r2
   237c8:	608b      	str	r3, [r1, #8]
   237ca:	f7fe fed1 	bl	22570 <_Bfree>
   237ce:	2300      	movs	r3, #0
   237d0:	63a3      	str	r3, [r4, #56]	; 0x38
   237d2:	f1b7 0800 	subs.w	r8, r7, #0
   237d6:	bfb4      	ite	lt
   237d8:	2301      	movlt	r3, #1
   237da:	2300      	movge	r3, #0
   237dc:	602b      	str	r3, [r5, #0]
   237de:	4bbe      	ldr	r3, [pc, #760]	; (23ad8 <_dtoa_r+0x338>)
   237e0:	bfbc      	itt	lt
   237e2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   237e6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   237ea:	ea33 0308 	bics.w	r3, r3, r8
   237ee:	f000 809f 	beq.w	23930 <_dtoa_r+0x190>
   237f2:	ed9d 8b02 	vldr	d8, [sp, #8]
   237f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   237fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   237fe:	d111      	bne.n	23824 <_dtoa_r+0x84>
   23800:	9a05      	ldr	r2, [sp, #20]
   23802:	2301      	movs	r3, #1
   23804:	6013      	str	r3, [r2, #0]
   23806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23808:	2b00      	cmp	r3, #0
   2380a:	f000 823f 	beq.w	23c8c <_dtoa_r+0x4ec>
   2380e:	4bb3      	ldr	r3, [pc, #716]	; (23adc <_dtoa_r+0x33c>)
   23810:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   23812:	6013      	str	r3, [r2, #0]
   23814:	3b01      	subs	r3, #1
   23816:	9300      	str	r3, [sp, #0]
   23818:	9800      	ldr	r0, [sp, #0]
   2381a:	b00f      	add	sp, #60	; 0x3c
   2381c:	ecbd 8b02 	vpop	{d8}
   23820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23824:	aa0c      	add	r2, sp, #48	; 0x30
   23826:	a90d      	add	r1, sp, #52	; 0x34
   23828:	4620      	mov	r0, r4
   2382a:	eeb0 0b48 	vmov.f64	d0, d8
   2382e:	f7ff fab7 	bl	22da0 <__d2b>
   23832:	ea5f 5318 	movs.w	r3, r8, lsr #20
   23836:	4605      	mov	r5, r0
   23838:	f040 8092 	bne.w	23960 <_dtoa_r+0x1c0>
   2383c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   23840:	440b      	add	r3, r1
   23842:	f203 4232 	addw	r2, r3, #1074	; 0x432
   23846:	2a20      	cmp	r2, #32
   23848:	f340 82fa 	ble.w	23e40 <_dtoa_r+0x6a0>
   2384c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   23850:	fa08 f802 	lsl.w	r8, r8, r2
   23854:	f203 4212 	addw	r2, r3, #1042	; 0x412
   23858:	40d6      	lsrs	r6, r2
   2385a:	ea48 0206 	orr.w	r2, r8, r6
   2385e:	ee07 2a10 	vmov	s14, r2
   23862:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   23866:	1e58      	subs	r0, r3, #1
   23868:	ee17 6a90 	vmov	r6, s15
   2386c:	ec53 2b17 	vmov	r2, r3, d7
   23870:	f04f 0a01 	mov.w	sl, #1
   23874:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   23878:	ed9f 3b91 	vldr	d3, [pc, #580]	; 23ac0 <_dtoa_r+0x320>
   2387c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 23ac8 <_dtoa_r+0x328>
   23880:	ed9f 5b93 	vldr	d5, [pc, #588]	; 23ad0 <_dtoa_r+0x330>
   23884:	ee06 0a90 	vmov	s13, r0
   23888:	ec43 2b12 	vmov	d2, r2, r3
   2388c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   23890:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   23894:	ee32 6b46 	vsub.f64	d6, d2, d6
   23898:	eea6 7b03 	vfma.f64	d7, d6, d3
   2389c:	eea4 7b05 	vfma.f64	d7, d4, d5
   238a0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   238a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   238a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   238ac:	ee16 7a90 	vmov	r7, s13
   238b0:	d508      	bpl.n	238c4 <_dtoa_r+0x124>
   238b2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   238b6:	eeb4 6b47 	vcmp.f64	d6, d7
   238ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   238be:	bf18      	it	ne
   238c0:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   238c4:	2f16      	cmp	r7, #22
   238c6:	f200 8145 	bhi.w	23b54 <_dtoa_r+0x3b4>
   238ca:	4b85      	ldr	r3, [pc, #532]	; (23ae0 <_dtoa_r+0x340>)
   238cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   238d0:	ed93 7b00 	vldr	d7, [r3]
   238d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   238d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   238dc:	d557      	bpl.n	2398e <_dtoa_r+0x1ee>
   238de:	1a09      	subs	r1, r1, r0
   238e0:	2300      	movs	r3, #0
   238e2:	f1b1 0801 	subs.w	r8, r1, #1
   238e6:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   238ea:	930a      	str	r3, [sp, #40]	; 0x28
   238ec:	f100 8139 	bmi.w	23b62 <_dtoa_r+0x3c2>
   238f0:	2300      	movs	r3, #0
   238f2:	9306      	str	r3, [sp, #24]
   238f4:	2f00      	cmp	r7, #0
   238f6:	da52      	bge.n	2399e <_dtoa_r+0x1fe>
   238f8:	9b06      	ldr	r3, [sp, #24]
   238fa:	9704      	str	r7, [sp, #16]
   238fc:	1bdb      	subs	r3, r3, r7
   238fe:	9306      	str	r3, [sp, #24]
   23900:	427b      	negs	r3, r7
   23902:	9308      	str	r3, [sp, #32]
   23904:	9b01      	ldr	r3, [sp, #4]
   23906:	2b09      	cmp	r3, #9
   23908:	f04f 0700 	mov.w	r7, #0
   2390c:	d84e      	bhi.n	239ac <_dtoa_r+0x20c>
   2390e:	2b05      	cmp	r3, #5
   23910:	f340 829d 	ble.w	23e4e <_dtoa_r+0x6ae>
   23914:	3b04      	subs	r3, #4
   23916:	9301      	str	r3, [sp, #4]
   23918:	2600      	movs	r6, #0
   2391a:	9b01      	ldr	r3, [sp, #4]
   2391c:	1e9a      	subs	r2, r3, #2
   2391e:	2a03      	cmp	r2, #3
   23920:	f200 8125 	bhi.w	23b6e <_dtoa_r+0x3ce>
   23924:	e8df f012 	tbh	[pc, r2, lsl #1]
   23928:	03a703aa 	.word	0x03a703aa
   2392c:	037e039d 	.word	0x037e039d
   23930:	9a05      	ldr	r2, [sp, #20]
   23932:	f3c8 0813 	ubfx	r8, r8, #0, #20
   23936:	f242 730f 	movw	r3, #9999	; 0x270f
   2393a:	ea58 0806 	orrs.w	r8, r8, r6
   2393e:	6013      	str	r3, [r2, #0]
   23940:	d11e      	bne.n	23980 <_dtoa_r+0x1e0>
   23942:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23944:	2b00      	cmp	r3, #0
   23946:	f000 8591 	beq.w	2446c <_dtoa_r+0xccc>
   2394a:	4b66      	ldr	r3, [pc, #408]	; (23ae4 <_dtoa_r+0x344>)
   2394c:	9300      	str	r3, [sp, #0]
   2394e:	3308      	adds	r3, #8
   23950:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   23952:	9800      	ldr	r0, [sp, #0]
   23954:	6013      	str	r3, [r2, #0]
   23956:	b00f      	add	sp, #60	; 0x3c
   23958:	ecbd 8b02 	vpop	{d8}
   2395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23960:	ee18 6a90 	vmov	r6, s17
   23964:	f3c6 0613 	ubfx	r6, r6, #0, #20
   23968:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   2396c:	ec53 2b18 	vmov	r2, r3, d8
   23970:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   23974:	990c      	ldr	r1, [sp, #48]	; 0x30
   23976:	f04f 0a00 	mov.w	sl, #0
   2397a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2397e:	e77b      	b.n	23878 <_dtoa_r+0xd8>
   23980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23982:	2b00      	cmp	r3, #0
   23984:	f040 833b 	bne.w	23ffe <_dtoa_r+0x85e>
   23988:	4b57      	ldr	r3, [pc, #348]	; (23ae8 <_dtoa_r+0x348>)
   2398a:	9300      	str	r3, [sp, #0]
   2398c:	e744      	b.n	23818 <_dtoa_r+0x78>
   2398e:	1a09      	subs	r1, r1, r0
   23990:	2300      	movs	r3, #0
   23992:	f1b1 0801 	subs.w	r8, r1, #1
   23996:	930a      	str	r3, [sp, #40]	; 0x28
   23998:	f100 80e3 	bmi.w	23b62 <_dtoa_r+0x3c2>
   2399c:	9306      	str	r3, [sp, #24]
   2399e:	2300      	movs	r3, #0
   239a0:	9308      	str	r3, [sp, #32]
   239a2:	9b01      	ldr	r3, [sp, #4]
   239a4:	9704      	str	r7, [sp, #16]
   239a6:	2b09      	cmp	r3, #9
   239a8:	44b8      	add	r8, r7
   239aa:	d9b0      	bls.n	2390e <_dtoa_r+0x16e>
   239ac:	2300      	movs	r3, #0
   239ae:	2601      	movs	r6, #1
   239b0:	9301      	str	r3, [sp, #4]
   239b2:	9607      	str	r6, [sp, #28]
   239b4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   239b8:	469b      	mov	fp, r3
   239ba:	2100      	movs	r1, #0
   239bc:	63e1      	str	r1, [r4, #60]	; 0x3c
   239be:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   239c2:	4620      	mov	r0, r4
   239c4:	f7fe fdae 	bl	22524 <_Balloc>
   239c8:	9000      	str	r0, [sp, #0]
   239ca:	2800      	cmp	r0, #0
   239cc:	f000 8540 	beq.w	24450 <_dtoa_r+0xcb0>
   239d0:	9b00      	ldr	r3, [sp, #0]
   239d2:	63a3      	str	r3, [r4, #56]	; 0x38
   239d4:	f1b9 0f0e 	cmp.w	r9, #14
   239d8:	f200 80dc 	bhi.w	23b94 <_dtoa_r+0x3f4>
   239dc:	2e00      	cmp	r6, #0
   239de:	f000 80d9 	beq.w	23b94 <_dtoa_r+0x3f4>
   239e2:	9b04      	ldr	r3, [sp, #16]
   239e4:	2b00      	cmp	r3, #0
   239e6:	f340 83de 	ble.w	241a6 <_dtoa_r+0xa06>
   239ea:	4a3d      	ldr	r2, [pc, #244]	; (23ae0 <_dtoa_r+0x340>)
   239ec:	f003 010f 	and.w	r1, r3, #15
   239f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   239f4:	ed92 7b00 	vldr	d7, [r2]
   239f8:	111a      	asrs	r2, r3, #4
   239fa:	05db      	lsls	r3, r3, #23
   239fc:	f140 8382 	bpl.w	24104 <_dtoa_r+0x964>
   23a00:	493a      	ldr	r1, [pc, #232]	; (23aec <_dtoa_r+0x34c>)
   23a02:	ed91 6b08 	vldr	d6, [r1, #32]
   23a06:	f002 020f 	and.w	r2, r2, #15
   23a0a:	2003      	movs	r0, #3
   23a0c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   23a10:	b15a      	cbz	r2, 23a2a <_dtoa_r+0x28a>
   23a12:	4936      	ldr	r1, [pc, #216]	; (23aec <_dtoa_r+0x34c>)
   23a14:	07d6      	lsls	r6, r2, #31
   23a16:	d504      	bpl.n	23a22 <_dtoa_r+0x282>
   23a18:	ed91 6b00 	vldr	d6, [r1]
   23a1c:	3001      	adds	r0, #1
   23a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
   23a22:	1052      	asrs	r2, r2, #1
   23a24:	f101 0108 	add.w	r1, r1, #8
   23a28:	d1f4      	bne.n	23a14 <_dtoa_r+0x274>
   23a2a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   23a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23a30:	b13b      	cbz	r3, 23a42 <_dtoa_r+0x2a2>
   23a32:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   23a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
   23a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23a3e:	f100 84ae 	bmi.w	2439e <_dtoa_r+0xbfe>
   23a42:	ee07 0a90 	vmov	s15, r0
   23a46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   23a4a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   23a4e:	eea5 7b06 	vfma.f64	d7, d5, d6
   23a52:	ee17 2a90 	vmov	r2, s15
   23a56:	ec51 0b17 	vmov	r0, r1, d7
   23a5a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   23a5e:	f1b9 0f00 	cmp.w	r9, #0
   23a62:	f000 8388 	beq.w	24176 <_dtoa_r+0x9d6>
   23a66:	9e04      	ldr	r6, [sp, #16]
   23a68:	464a      	mov	r2, r9
   23a6a:	9b07      	ldr	r3, [sp, #28]
   23a6c:	2b00      	cmp	r3, #0
   23a6e:	f000 8447 	beq.w	24300 <_dtoa_r+0xb60>
   23a72:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   23a76:	4b1a      	ldr	r3, [pc, #104]	; (23ae0 <_dtoa_r+0x340>)
   23a78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   23a7c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   23a80:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   23a84:	ee36 7b47 	vsub.f64	d7, d6, d7
   23a88:	ed1c 6b02 	vldr	d6, [ip, #-8]
   23a8c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   23a90:	ec41 0b16 	vmov	d6, r0, r1
   23a94:	ee14 0a90 	vmov	r0, s9
   23a98:	ee35 5b46 	vsub.f64	d5, d5, d6
   23a9c:	9900      	ldr	r1, [sp, #0]
   23a9e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   23aa2:	3030      	adds	r0, #48	; 0x30
   23aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23aa8:	f801 0b01 	strb.w	r0, [r1], #1
   23aac:	f300 84ac 	bgt.w	24408 <_dtoa_r+0xc68>
   23ab0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   23ab4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   23ab8:	f04f 0c00 	mov.w	ip, #0
   23abc:	e031      	b.n	23b22 <_dtoa_r+0x382>
   23abe:	bf00      	nop
   23ac0:	636f4361 	.word	0x636f4361
   23ac4:	3fd287a7 	.word	0x3fd287a7
   23ac8:	8b60c8b3 	.word	0x8b60c8b3
   23acc:	3fc68a28 	.word	0x3fc68a28
   23ad0:	509f79fb 	.word	0x509f79fb
   23ad4:	3fd34413 	.word	0x3fd34413
   23ad8:	7ff00000 	.word	0x7ff00000
   23adc:	20002235 	.word	0x20002235
   23ae0:	20000b98 	.word	0x20000b98
   23ae4:	20002aa0 	.word	0x20002aa0
   23ae8:	20002aac 	.word	0x20002aac
   23aec:	20000b70 	.word	0x20000b70
   23af0:	f10c 0c01 	add.w	ip, ip, #1
   23af4:	4594      	cmp	ip, r2
   23af6:	da4d      	bge.n	23b94 <_dtoa_r+0x3f4>
   23af8:	ee27 7b04 	vmul.f64	d7, d7, d4
   23afc:	ee25 5b04 	vmul.f64	d5, d5, d4
   23b00:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   23b04:	ee16 3a90 	vmov	r3, s13
   23b08:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   23b0c:	3330      	adds	r3, #48	; 0x30
   23b0e:	ee37 7b43 	vsub.f64	d7, d7, d3
   23b12:	eeb4 7bc5 	vcmpe.f64	d7, d5
   23b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23b1a:	f801 3b01 	strb.w	r3, [r1], #1
   23b1e:	f100 8473 	bmi.w	24408 <_dtoa_r+0xc68>
   23b22:	ee32 6b47 	vsub.f64	d6, d2, d7
   23b26:	eeb4 6bc5 	vcmpe.f64	d6, d5
   23b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23b2e:	d5df      	bpl.n	23af0 <_dtoa_r+0x350>
   23b30:	9a00      	ldr	r2, [sp, #0]
   23b32:	9604      	str	r6, [sp, #16]
   23b34:	e002      	b.n	23b3c <_dtoa_r+0x39c>
   23b36:	428a      	cmp	r2, r1
   23b38:	f000 8450 	beq.w	243dc <_dtoa_r+0xc3c>
   23b3c:	4689      	mov	r9, r1
   23b3e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   23b42:	2b39      	cmp	r3, #57	; 0x39
   23b44:	d0f7      	beq.n	23b36 <_dtoa_r+0x396>
   23b46:	3301      	adds	r3, #1
   23b48:	b2db      	uxtb	r3, r3
   23b4a:	700b      	strb	r3, [r1, #0]
   23b4c:	9b04      	ldr	r3, [sp, #16]
   23b4e:	3301      	adds	r3, #1
   23b50:	9304      	str	r3, [sp, #16]
   23b52:	e155      	b.n	23e00 <_dtoa_r+0x660>
   23b54:	1a09      	subs	r1, r1, r0
   23b56:	2301      	movs	r3, #1
   23b58:	f1b1 0801 	subs.w	r8, r1, #1
   23b5c:	930a      	str	r3, [sp, #40]	; 0x28
   23b5e:	f57f aec7 	bpl.w	238f0 <_dtoa_r+0x150>
   23b62:	f1c1 0301 	rsb	r3, r1, #1
   23b66:	9306      	str	r3, [sp, #24]
   23b68:	f04f 0800 	mov.w	r8, #0
   23b6c:	e6c2      	b.n	238f4 <_dtoa_r+0x154>
   23b6e:	2600      	movs	r6, #0
   23b70:	63e6      	str	r6, [r4, #60]	; 0x3c
   23b72:	4631      	mov	r1, r6
   23b74:	4620      	mov	r0, r4
   23b76:	f7fe fcd5 	bl	22524 <_Balloc>
   23b7a:	9000      	str	r0, [sp, #0]
   23b7c:	2800      	cmp	r0, #0
   23b7e:	f000 8467 	beq.w	24450 <_dtoa_r+0xcb0>
   23b82:	9b00      	ldr	r3, [sp, #0]
   23b84:	63a3      	str	r3, [r4, #56]	; 0x38
   23b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23b8a:	930b      	str	r3, [sp, #44]	; 0x2c
   23b8c:	4699      	mov	r9, r3
   23b8e:	2301      	movs	r3, #1
   23b90:	46b3      	mov	fp, r6
   23b92:	9307      	str	r3, [sp, #28]
   23b94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   23b96:	2a00      	cmp	r2, #0
   23b98:	db55      	blt.n	23c46 <_dtoa_r+0x4a6>
   23b9a:	9904      	ldr	r1, [sp, #16]
   23b9c:	290e      	cmp	r1, #14
   23b9e:	dc52      	bgt.n	23c46 <_dtoa_r+0x4a6>
   23ba0:	4bb7      	ldr	r3, [pc, #732]	; (23e80 <_dtoa_r+0x6e0>)
   23ba2:	f1bb 0f00 	cmp.w	fp, #0
   23ba6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   23baa:	ed93 6b00 	vldr	d6, [r3]
   23bae:	da15      	bge.n	23bdc <_dtoa_r+0x43c>
   23bb0:	f1b9 0f00 	cmp.w	r9, #0
   23bb4:	dc12      	bgt.n	23bdc <_dtoa_r+0x43c>
   23bb6:	f040 82f2 	bne.w	2419e <_dtoa_r+0x9fe>
   23bba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   23bbe:	ee26 7b07 	vmul.f64	d7, d6, d7
   23bc2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   23bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23bca:	46ca      	mov	sl, r9
   23bcc:	464e      	mov	r6, r9
   23bce:	f200 826d 	bhi.w	240ac <_dtoa_r+0x90c>
   23bd2:	f8dd 8000 	ldr.w	r8, [sp]
   23bd6:	ea6f 0b0b 	mvn.w	fp, fp
   23bda:	e270      	b.n	240be <_dtoa_r+0x91e>
   23bdc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   23be0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   23be4:	9900      	ldr	r1, [sp, #0]
   23be6:	ee17 3a10 	vmov	r3, s14
   23bea:	f1b9 0f01 	cmp.w	r9, #1
   23bee:	f103 0330 	add.w	r3, r3, #48	; 0x30
   23bf2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   23bf6:	f801 3b01 	strb.w	r3, [r1], #1
   23bfa:	eea5 8b46 	vfms.f64	d8, d5, d6
   23bfe:	f000 8334 	beq.w	2426a <_dtoa_r+0xaca>
   23c02:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   23c06:	2301      	movs	r3, #1
   23c08:	e011      	b.n	23c2e <_dtoa_r+0x48e>
   23c0a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   23c0e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   23c12:	3301      	adds	r3, #1
   23c14:	ee17 2a10 	vmov	r2, s14
   23c18:	454b      	cmp	r3, r9
   23c1a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   23c1e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   23c22:	f801 2b01 	strb.w	r2, [r1], #1
   23c26:	eea5 8b46 	vfms.f64	d8, d5, d6
   23c2a:	f000 831e 	beq.w	2426a <_dtoa_r+0xaca>
   23c2e:	ee28 8b04 	vmul.f64	d8, d8, d4
   23c32:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23c3a:	d1e6      	bne.n	23c0a <_dtoa_r+0x46a>
   23c3c:	9b04      	ldr	r3, [sp, #16]
   23c3e:	3301      	adds	r3, #1
   23c40:	9304      	str	r3, [sp, #16]
   23c42:	4689      	mov	r9, r1
   23c44:	e0dc      	b.n	23e00 <_dtoa_r+0x660>
   23c46:	9b07      	ldr	r3, [sp, #28]
   23c48:	b343      	cbz	r3, 23c9c <_dtoa_r+0x4fc>
   23c4a:	9b01      	ldr	r3, [sp, #4]
   23c4c:	2b01      	cmp	r3, #1
   23c4e:	f340 8276 	ble.w	2413e <_dtoa_r+0x99e>
   23c52:	9b08      	ldr	r3, [sp, #32]
   23c54:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   23c58:	4553      	cmp	r3, sl
   23c5a:	f280 823f 	bge.w	240dc <_dtoa_r+0x93c>
   23c5e:	9b08      	ldr	r3, [sp, #32]
   23c60:	f8cd a020 	str.w	sl, [sp, #32]
   23c64:	ebaa 0203 	sub.w	r2, sl, r3
   23c68:	4417      	add	r7, r2
   23c6a:	f04f 0a00 	mov.w	sl, #0
   23c6e:	f1b9 0f00 	cmp.w	r9, #0
   23c72:	f2c0 8325 	blt.w	242c0 <_dtoa_r+0xb20>
   23c76:	9b06      	ldr	r3, [sp, #24]
   23c78:	9309      	str	r3, [sp, #36]	; 0x24
   23c7a:	444b      	add	r3, r9
   23c7c:	44c8      	add	r8, r9
   23c7e:	9306      	str	r3, [sp, #24]
   23c80:	2101      	movs	r1, #1
   23c82:	4620      	mov	r0, r4
   23c84:	f7fe fd78 	bl	22778 <__i2b>
   23c88:	4606      	mov	r6, r0
   23c8a:	e00c      	b.n	23ca6 <_dtoa_r+0x506>
   23c8c:	4b7d      	ldr	r3, [pc, #500]	; (23e84 <_dtoa_r+0x6e4>)
   23c8e:	9300      	str	r3, [sp, #0]
   23c90:	9800      	ldr	r0, [sp, #0]
   23c92:	b00f      	add	sp, #60	; 0x3c
   23c94:	ecbd 8b02 	vpop	{d8}
   23c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c9c:	9b06      	ldr	r3, [sp, #24]
   23c9e:	f8dd a020 	ldr.w	sl, [sp, #32]
   23ca2:	9e07      	ldr	r6, [sp, #28]
   23ca4:	9309      	str	r3, [sp, #36]	; 0x24
   23ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23ca8:	b16b      	cbz	r3, 23cc6 <_dtoa_r+0x526>
   23caa:	f1b8 0f00 	cmp.w	r8, #0
   23cae:	dd0a      	ble.n	23cc6 <_dtoa_r+0x526>
   23cb0:	4543      	cmp	r3, r8
   23cb2:	9906      	ldr	r1, [sp, #24]
   23cb4:	461a      	mov	r2, r3
   23cb6:	bfa8      	it	ge
   23cb8:	4642      	movge	r2, r8
   23cba:	1a89      	subs	r1, r1, r2
   23cbc:	1a9b      	subs	r3, r3, r2
   23cbe:	9106      	str	r1, [sp, #24]
   23cc0:	9309      	str	r3, [sp, #36]	; 0x24
   23cc2:	eba8 0802 	sub.w	r8, r8, r2
   23cc6:	9b08      	ldr	r3, [sp, #32]
   23cc8:	b163      	cbz	r3, 23ce4 <_dtoa_r+0x544>
   23cca:	9b07      	ldr	r3, [sp, #28]
   23ccc:	2b00      	cmp	r3, #0
   23cce:	f000 82a7 	beq.w	24220 <_dtoa_r+0xa80>
   23cd2:	f1ba 0f00 	cmp.w	sl, #0
   23cd6:	f300 8204 	bgt.w	240e2 <_dtoa_r+0x942>
   23cda:	9b08      	ldr	r3, [sp, #32]
   23cdc:	ebb3 020a 	subs.w	r2, r3, sl
   23ce0:	f040 82ff 	bne.w	242e2 <_dtoa_r+0xb42>
   23ce4:	2101      	movs	r1, #1
   23ce6:	4620      	mov	r0, r4
   23ce8:	f7fe fd46 	bl	22778 <__i2b>
   23cec:	2f00      	cmp	r7, #0
   23cee:	4682      	mov	sl, r0
   23cf0:	f300 80af 	bgt.w	23e52 <_dtoa_r+0x6b2>
   23cf4:	9b01      	ldr	r3, [sp, #4]
   23cf6:	2b01      	cmp	r3, #1
   23cf8:	f340 8187 	ble.w	2400a <_dtoa_r+0x86a>
   23cfc:	2300      	movs	r3, #0
   23cfe:	9308      	str	r3, [sp, #32]
   23d00:	2001      	movs	r0, #1
   23d02:	2f00      	cmp	r7, #0
   23d04:	f040 80b1 	bne.w	23e6a <_dtoa_r+0x6ca>
   23d08:	4440      	add	r0, r8
   23d0a:	f010 001f 	ands.w	r0, r0, #31
   23d0e:	f000 817a 	beq.w	24006 <_dtoa_r+0x866>
   23d12:	f1c0 0220 	rsb	r2, r0, #32
   23d16:	2a04      	cmp	r2, #4
   23d18:	f300 8088 	bgt.w	23e2c <_dtoa_r+0x68c>
   23d1c:	f040 81f6 	bne.w	2410c <_dtoa_r+0x96c>
   23d20:	9b06      	ldr	r3, [sp, #24]
   23d22:	2b00      	cmp	r3, #0
   23d24:	dd05      	ble.n	23d32 <_dtoa_r+0x592>
   23d26:	4629      	mov	r1, r5
   23d28:	461a      	mov	r2, r3
   23d2a:	4620      	mov	r0, r4
   23d2c:	f7fe fe60 	bl	229f0 <__lshift>
   23d30:	4605      	mov	r5, r0
   23d32:	f1b8 0f00 	cmp.w	r8, #0
   23d36:	dd05      	ble.n	23d44 <_dtoa_r+0x5a4>
   23d38:	4651      	mov	r1, sl
   23d3a:	4642      	mov	r2, r8
   23d3c:	4620      	mov	r0, r4
   23d3e:	f7fe fe57 	bl	229f0 <__lshift>
   23d42:	4682      	mov	sl, r0
   23d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23d46:	2b00      	cmp	r3, #0
   23d48:	f040 813f 	bne.w	23fca <_dtoa_r+0x82a>
   23d4c:	f1b9 0f00 	cmp.w	r9, #0
   23d50:	f340 8125 	ble.w	23f9e <_dtoa_r+0x7fe>
   23d54:	9b07      	ldr	r3, [sp, #28]
   23d56:	2b00      	cmp	r3, #0
   23d58:	f040 80a3 	bne.w	23ea2 <_dtoa_r+0x702>
   23d5c:	9b04      	ldr	r3, [sp, #16]
   23d5e:	3301      	adds	r3, #1
   23d60:	9304      	str	r3, [sp, #16]
   23d62:	f8dd 8000 	ldr.w	r8, [sp]
   23d66:	2701      	movs	r7, #1
   23d68:	e007      	b.n	23d7a <_dtoa_r+0x5da>
   23d6a:	4629      	mov	r1, r5
   23d6c:	2300      	movs	r3, #0
   23d6e:	220a      	movs	r2, #10
   23d70:	4620      	mov	r0, r4
   23d72:	f7fe fc07 	bl	22584 <__multadd>
   23d76:	3701      	adds	r7, #1
   23d78:	4605      	mov	r5, r0
   23d7a:	4651      	mov	r1, sl
   23d7c:	4628      	mov	r0, r5
   23d7e:	f7ff fc7b 	bl	23678 <quorem>
   23d82:	45b9      	cmp	r9, r7
   23d84:	f100 0030 	add.w	r0, r0, #48	; 0x30
   23d88:	f808 0b01 	strb.w	r0, [r8], #1
   23d8c:	dced      	bgt.n	23d6a <_dtoa_r+0x5ca>
   23d8e:	f1b9 0f00 	cmp.w	r9, #0
   23d92:	9a00      	ldr	r2, [sp, #0]
   23d94:	bfcc      	ite	gt
   23d96:	46cb      	movgt	fp, r9
   23d98:	f04f 0b01 	movle.w	fp, #1
   23d9c:	4603      	mov	r3, r0
   23d9e:	4493      	add	fp, r2
   23da0:	2700      	movs	r7, #0
   23da2:	4629      	mov	r1, r5
   23da4:	2201      	movs	r2, #1
   23da6:	4620      	mov	r0, r4
   23da8:	9301      	str	r3, [sp, #4]
   23daa:	f7fe fe21 	bl	229f0 <__lshift>
   23dae:	4651      	mov	r1, sl
   23db0:	4605      	mov	r5, r0
   23db2:	f7fe fe95 	bl	22ae0 <__mcmp>
   23db6:	2800      	cmp	r0, #0
   23db8:	f340 81af 	ble.w	2411a <_dtoa_r+0x97a>
   23dbc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   23dc0:	9a00      	ldr	r2, [sp, #0]
   23dc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   23dc6:	e004      	b.n	23dd2 <_dtoa_r+0x632>
   23dc8:	455a      	cmp	r2, fp
   23dca:	f000 81b1 	beq.w	24130 <_dtoa_r+0x990>
   23dce:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   23dd2:	2b39      	cmp	r3, #57	; 0x39
   23dd4:	f10b 0901 	add.w	r9, fp, #1
   23dd8:	d0f6      	beq.n	23dc8 <_dtoa_r+0x628>
   23dda:	3301      	adds	r3, #1
   23ddc:	f88b 3000 	strb.w	r3, [fp]
   23de0:	4651      	mov	r1, sl
   23de2:	4620      	mov	r0, r4
   23de4:	f7fe fbc4 	bl	22570 <_Bfree>
   23de8:	b156      	cbz	r6, 23e00 <_dtoa_r+0x660>
   23dea:	b12f      	cbz	r7, 23df8 <_dtoa_r+0x658>
   23dec:	42b7      	cmp	r7, r6
   23dee:	d003      	beq.n	23df8 <_dtoa_r+0x658>
   23df0:	4639      	mov	r1, r7
   23df2:	4620      	mov	r0, r4
   23df4:	f7fe fbbc 	bl	22570 <_Bfree>
   23df8:	4631      	mov	r1, r6
   23dfa:	4620      	mov	r0, r4
   23dfc:	f7fe fbb8 	bl	22570 <_Bfree>
   23e00:	4629      	mov	r1, r5
   23e02:	4620      	mov	r0, r4
   23e04:	f7fe fbb4 	bl	22570 <_Bfree>
   23e08:	2300      	movs	r3, #0
   23e0a:	f889 3000 	strb.w	r3, [r9]
   23e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23e12:	601a      	str	r2, [r3, #0]
   23e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23e16:	2b00      	cmp	r3, #0
   23e18:	f43f acfe 	beq.w	23818 <_dtoa_r+0x78>
   23e1c:	9800      	ldr	r0, [sp, #0]
   23e1e:	f8c3 9000 	str.w	r9, [r3]
   23e22:	b00f      	add	sp, #60	; 0x3c
   23e24:	ecbd 8b02 	vpop	{d8}
   23e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e2c:	f1c0 001c 	rsb	r0, r0, #28
   23e30:	9b06      	ldr	r3, [sp, #24]
   23e32:	4403      	add	r3, r0
   23e34:	9306      	str	r3, [sp, #24]
   23e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e38:	4403      	add	r3, r0
   23e3a:	9309      	str	r3, [sp, #36]	; 0x24
   23e3c:	4480      	add	r8, r0
   23e3e:	e76f      	b.n	23d20 <_dtoa_r+0x580>
   23e40:	f1c2 0220 	rsb	r2, r2, #32
   23e44:	fa06 f202 	lsl.w	r2, r6, r2
   23e48:	ee07 2a10 	vmov	s14, r2
   23e4c:	e509      	b.n	23862 <_dtoa_r+0xc2>
   23e4e:	2601      	movs	r6, #1
   23e50:	e563      	b.n	2391a <_dtoa_r+0x17a>
   23e52:	4601      	mov	r1, r0
   23e54:	463a      	mov	r2, r7
   23e56:	4620      	mov	r0, r4
   23e58:	f7fe fd6a 	bl	22930 <__pow5mult>
   23e5c:	9b01      	ldr	r3, [sp, #4]
   23e5e:	2b01      	cmp	r3, #1
   23e60:	4682      	mov	sl, r0
   23e62:	f340 81c5 	ble.w	241f0 <_dtoa_r+0xa50>
   23e66:	2300      	movs	r3, #0
   23e68:	9308      	str	r3, [sp, #32]
   23e6a:	f8da 2010 	ldr.w	r2, [sl, #16]
   23e6e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   23e72:	6910      	ldr	r0, [r2, #16]
   23e74:	f7fe fc30 	bl	226d8 <__hi0bits>
   23e78:	f1c0 0020 	rsb	r0, r0, #32
   23e7c:	e744      	b.n	23d08 <_dtoa_r+0x568>
   23e7e:	bf00      	nop
   23e80:	20000b98 	.word	0x20000b98
   23e84:	20002234 	.word	0x20002234
   23e88:	4631      	mov	r1, r6
   23e8a:	2300      	movs	r3, #0
   23e8c:	220a      	movs	r2, #10
   23e8e:	4620      	mov	r0, r4
   23e90:	f7fe fb78 	bl	22584 <__multadd>
   23e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23e96:	2b00      	cmp	r3, #0
   23e98:	4606      	mov	r6, r0
   23e9a:	f340 82ce 	ble.w	2443a <_dtoa_r+0xc9a>
   23e9e:	9704      	str	r7, [sp, #16]
   23ea0:	4699      	mov	r9, r3
   23ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23ea4:	2b00      	cmp	r3, #0
   23ea6:	dd05      	ble.n	23eb4 <_dtoa_r+0x714>
   23ea8:	4631      	mov	r1, r6
   23eaa:	461a      	mov	r2, r3
   23eac:	4620      	mov	r0, r4
   23eae:	f7fe fd9f 	bl	229f0 <__lshift>
   23eb2:	4606      	mov	r6, r0
   23eb4:	9b08      	ldr	r3, [sp, #32]
   23eb6:	2b00      	cmp	r3, #0
   23eb8:	f040 81eb 	bne.w	24292 <_dtoa_r+0xaf2>
   23ebc:	46b0      	mov	r8, r6
   23ebe:	9b02      	ldr	r3, [sp, #8]
   23ec0:	9f00      	ldr	r7, [sp, #0]
   23ec2:	f003 0201 	and.w	r2, r3, #1
   23ec6:	1e7b      	subs	r3, r7, #1
   23ec8:	444b      	add	r3, r9
   23eca:	9308      	str	r3, [sp, #32]
   23ecc:	9b01      	ldr	r3, [sp, #4]
   23ece:	920a      	str	r2, [sp, #40]	; 0x28
   23ed0:	4313      	orrs	r3, r2
   23ed2:	9309      	str	r3, [sp, #36]	; 0x24
   23ed4:	4651      	mov	r1, sl
   23ed6:	4628      	mov	r0, r5
   23ed8:	f7ff fbce 	bl	23678 <quorem>
   23edc:	4631      	mov	r1, r6
   23ede:	4683      	mov	fp, r0
   23ee0:	4628      	mov	r0, r5
   23ee2:	f7fe fdfd 	bl	22ae0 <__mcmp>
   23ee6:	4642      	mov	r2, r8
   23ee8:	4651      	mov	r1, sl
   23eea:	4681      	mov	r9, r0
   23eec:	4620      	mov	r0, r4
   23eee:	f7fe fe19 	bl	22b24 <__mdiff>
   23ef2:	68c2      	ldr	r2, [r0, #12]
   23ef4:	4601      	mov	r1, r0
   23ef6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   23efa:	2a00      	cmp	r2, #0
   23efc:	d142      	bne.n	23f84 <_dtoa_r+0x7e4>
   23efe:	e9cd 0306 	strd	r0, r3, [sp, #24]
   23f02:	4628      	mov	r0, r5
   23f04:	f7fe fdec 	bl	22ae0 <__mcmp>
   23f08:	9906      	ldr	r1, [sp, #24]
   23f0a:	9002      	str	r0, [sp, #8]
   23f0c:	4620      	mov	r0, r4
   23f0e:	f7fe fb2f 	bl	22570 <_Bfree>
   23f12:	9a02      	ldr	r2, [sp, #8]
   23f14:	9b07      	ldr	r3, [sp, #28]
   23f16:	b91a      	cbnz	r2, 23f20 <_dtoa_r+0x780>
   23f18:	9909      	ldr	r1, [sp, #36]	; 0x24
   23f1a:	2900      	cmp	r1, #0
   23f1c:	f000 827e 	beq.w	2441c <_dtoa_r+0xc7c>
   23f20:	f1b9 0f00 	cmp.w	r9, #0
   23f24:	f2c0 8183 	blt.w	2422e <_dtoa_r+0xa8e>
   23f28:	9901      	ldr	r1, [sp, #4]
   23f2a:	ea49 0901 	orr.w	r9, r9, r1
   23f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
   23f30:	ea51 0909 	orrs.w	r9, r1, r9
   23f34:	f000 817b 	beq.w	2422e <_dtoa_r+0xa8e>
   23f38:	2a00      	cmp	r2, #0
   23f3a:	f300 81c6 	bgt.w	242ca <_dtoa_r+0xb2a>
   23f3e:	9a08      	ldr	r2, [sp, #32]
   23f40:	703b      	strb	r3, [r7, #0]
   23f42:	f107 0901 	add.w	r9, r7, #1
   23f46:	4297      	cmp	r7, r2
   23f48:	46cb      	mov	fp, r9
   23f4a:	f000 81c4 	beq.w	242d6 <_dtoa_r+0xb36>
   23f4e:	4629      	mov	r1, r5
   23f50:	2300      	movs	r3, #0
   23f52:	220a      	movs	r2, #10
   23f54:	4620      	mov	r0, r4
   23f56:	f7fe fb15 	bl	22584 <__multadd>
   23f5a:	4546      	cmp	r6, r8
   23f5c:	4605      	mov	r5, r0
   23f5e:	4631      	mov	r1, r6
   23f60:	f04f 0300 	mov.w	r3, #0
   23f64:	f04f 020a 	mov.w	r2, #10
   23f68:	4620      	mov	r0, r4
   23f6a:	d012      	beq.n	23f92 <_dtoa_r+0x7f2>
   23f6c:	f7fe fb0a 	bl	22584 <__multadd>
   23f70:	4641      	mov	r1, r8
   23f72:	4606      	mov	r6, r0
   23f74:	2300      	movs	r3, #0
   23f76:	220a      	movs	r2, #10
   23f78:	4620      	mov	r0, r4
   23f7a:	f7fe fb03 	bl	22584 <__multadd>
   23f7e:	464f      	mov	r7, r9
   23f80:	4680      	mov	r8, r0
   23f82:	e7a7      	b.n	23ed4 <_dtoa_r+0x734>
   23f84:	4620      	mov	r0, r4
   23f86:	9302      	str	r3, [sp, #8]
   23f88:	f7fe faf2 	bl	22570 <_Bfree>
   23f8c:	9b02      	ldr	r3, [sp, #8]
   23f8e:	2201      	movs	r2, #1
   23f90:	e7c6      	b.n	23f20 <_dtoa_r+0x780>
   23f92:	f7fe faf7 	bl	22584 <__multadd>
   23f96:	464f      	mov	r7, r9
   23f98:	4606      	mov	r6, r0
   23f9a:	4680      	mov	r8, r0
   23f9c:	e79a      	b.n	23ed4 <_dtoa_r+0x734>
   23f9e:	9b01      	ldr	r3, [sp, #4]
   23fa0:	2b02      	cmp	r3, #2
   23fa2:	dc71      	bgt.n	24088 <_dtoa_r+0x8e8>
   23fa4:	9b07      	ldr	r3, [sp, #28]
   23fa6:	2b00      	cmp	r3, #0
   23fa8:	f47f af7b 	bne.w	23ea2 <_dtoa_r+0x702>
   23fac:	9b04      	ldr	r3, [sp, #16]
   23fae:	4651      	mov	r1, sl
   23fb0:	3301      	adds	r3, #1
   23fb2:	4628      	mov	r0, r5
   23fb4:	9304      	str	r3, [sp, #16]
   23fb6:	f7ff fb5f 	bl	23678 <quorem>
   23fba:	f8dd b000 	ldr.w	fp, [sp]
   23fbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   23fc2:	f80b 3b01 	strb.w	r3, [fp], #1
   23fc6:	2700      	movs	r7, #0
   23fc8:	e6eb      	b.n	23da2 <_dtoa_r+0x602>
   23fca:	4651      	mov	r1, sl
   23fcc:	4628      	mov	r0, r5
   23fce:	f7fe fd87 	bl	22ae0 <__mcmp>
   23fd2:	2800      	cmp	r0, #0
   23fd4:	f6bf aeba 	bge.w	23d4c <_dtoa_r+0x5ac>
   23fd8:	4629      	mov	r1, r5
   23fda:	2300      	movs	r3, #0
   23fdc:	220a      	movs	r2, #10
   23fde:	4620      	mov	r0, r4
   23fe0:	f7fe fad0 	bl	22584 <__multadd>
   23fe4:	9b04      	ldr	r3, [sp, #16]
   23fe6:	1e5f      	subs	r7, r3, #1
   23fe8:	9b07      	ldr	r3, [sp, #28]
   23fea:	4605      	mov	r5, r0
   23fec:	2b00      	cmp	r3, #0
   23fee:	f47f af4b 	bne.w	23e88 <_dtoa_r+0x6e8>
   23ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23ff4:	2b00      	cmp	r3, #0
   23ff6:	f340 8218 	ble.w	2442a <_dtoa_r+0xc8a>
   23ffa:	4699      	mov	r9, r3
   23ffc:	e6b1      	b.n	23d62 <_dtoa_r+0x5c2>
   23ffe:	4bbc      	ldr	r3, [pc, #752]	; (242f0 <_dtoa_r+0xb50>)
   24000:	9300      	str	r3, [sp, #0]
   24002:	3303      	adds	r3, #3
   24004:	e4a4      	b.n	23950 <_dtoa_r+0x1b0>
   24006:	201c      	movs	r0, #28
   24008:	e712      	b.n	23e30 <_dtoa_r+0x690>
   2400a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2400e:	2800      	cmp	r0, #0
   24010:	f47f ae74 	bne.w	23cfc <_dtoa_r+0x55c>
   24014:	f3c1 0213 	ubfx	r2, r1, #0, #20
   24018:	2a00      	cmp	r2, #0
   2401a:	f000 80f4 	beq.w	24206 <_dtoa_r+0xa66>
   2401e:	9b02      	ldr	r3, [sp, #8]
   24020:	9308      	str	r3, [sp, #32]
   24022:	e66d      	b.n	23d00 <_dtoa_r+0x560>
   24024:	2301      	movs	r3, #1
   24026:	9307      	str	r3, [sp, #28]
   24028:	9b04      	ldr	r3, [sp, #16]
   2402a:	445b      	add	r3, fp
   2402c:	f103 0901 	add.w	r9, r3, #1
   24030:	f1b9 0f01 	cmp.w	r9, #1
   24034:	46cc      	mov	ip, r9
   24036:	930b      	str	r3, [sp, #44]	; 0x2c
   24038:	bfb8      	it	lt
   2403a:	f04f 0c01 	movlt.w	ip, #1
   2403e:	2100      	movs	r1, #0
   24040:	f1bc 0f17 	cmp.w	ip, #23
   24044:	63e1      	str	r1, [r4, #60]	; 0x3c
   24046:	f77f acbc 	ble.w	239c2 <_dtoa_r+0x222>
   2404a:	2001      	movs	r0, #1
   2404c:	2204      	movs	r2, #4
   2404e:	0052      	lsls	r2, r2, #1
   24050:	f102 0314 	add.w	r3, r2, #20
   24054:	4563      	cmp	r3, ip
   24056:	4601      	mov	r1, r0
   24058:	f100 0001 	add.w	r0, r0, #1
   2405c:	d9f7      	bls.n	2404e <_dtoa_r+0x8ae>
   2405e:	63e1      	str	r1, [r4, #60]	; 0x3c
   24060:	e4af      	b.n	239c2 <_dtoa_r+0x222>
   24062:	2301      	movs	r3, #1
   24064:	9307      	str	r3, [sp, #28]
   24066:	f1bb 0f00 	cmp.w	fp, #0
   2406a:	dd52      	ble.n	24112 <_dtoa_r+0x972>
   2406c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   24070:	46d9      	mov	r9, fp
   24072:	46dc      	mov	ip, fp
   24074:	e7e3      	b.n	2403e <_dtoa_r+0x89e>
   24076:	2300      	movs	r3, #0
   24078:	9307      	str	r3, [sp, #28]
   2407a:	e7d5      	b.n	24028 <_dtoa_r+0x888>
   2407c:	2300      	movs	r3, #0
   2407e:	9307      	str	r3, [sp, #28]
   24080:	e7f1      	b.n	24066 <_dtoa_r+0x8c6>
   24082:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   24086:	9704      	str	r7, [sp, #16]
   24088:	f1b9 0f00 	cmp.w	r9, #0
   2408c:	f47f ada1 	bne.w	23bd2 <_dtoa_r+0x432>
   24090:	4651      	mov	r1, sl
   24092:	464b      	mov	r3, r9
   24094:	2205      	movs	r2, #5
   24096:	4620      	mov	r0, r4
   24098:	f7fe fa74 	bl	22584 <__multadd>
   2409c:	4601      	mov	r1, r0
   2409e:	4682      	mov	sl, r0
   240a0:	4628      	mov	r0, r5
   240a2:	f7fe fd1d 	bl	22ae0 <__mcmp>
   240a6:	2800      	cmp	r0, #0
   240a8:	f77f ad93 	ble.w	23bd2 <_dtoa_r+0x432>
   240ac:	9b04      	ldr	r3, [sp, #16]
   240ae:	f103 0b01 	add.w	fp, r3, #1
   240b2:	9b00      	ldr	r3, [sp, #0]
   240b4:	2231      	movs	r2, #49	; 0x31
   240b6:	4698      	mov	r8, r3
   240b8:	f803 2b01 	strb.w	r2, [r3], #1
   240bc:	9300      	str	r3, [sp, #0]
   240be:	4651      	mov	r1, sl
   240c0:	4620      	mov	r0, r4
   240c2:	f7fe fa55 	bl	22570 <_Bfree>
   240c6:	f10b 0301 	add.w	r3, fp, #1
   240ca:	f8dd 9000 	ldr.w	r9, [sp]
   240ce:	9304      	str	r3, [sp, #16]
   240d0:	f8cd 8000 	str.w	r8, [sp]
   240d4:	2e00      	cmp	r6, #0
   240d6:	f47f ae8f 	bne.w	23df8 <_dtoa_r+0x658>
   240da:	e691      	b.n	23e00 <_dtoa_r+0x660>
   240dc:	eba3 0a0a 	sub.w	sl, r3, sl
   240e0:	e5c5      	b.n	23c6e <_dtoa_r+0x4ce>
   240e2:	4631      	mov	r1, r6
   240e4:	4652      	mov	r2, sl
   240e6:	4620      	mov	r0, r4
   240e8:	f7fe fc22 	bl	22930 <__pow5mult>
   240ec:	462a      	mov	r2, r5
   240ee:	4601      	mov	r1, r0
   240f0:	4606      	mov	r6, r0
   240f2:	4620      	mov	r0, r4
   240f4:	f7fe fb6e 	bl	227d4 <__multiply>
   240f8:	4629      	mov	r1, r5
   240fa:	4605      	mov	r5, r0
   240fc:	4620      	mov	r0, r4
   240fe:	f7fe fa37 	bl	22570 <_Bfree>
   24102:	e5ea      	b.n	23cda <_dtoa_r+0x53a>
   24104:	2002      	movs	r0, #2
   24106:	eeb0 5b48 	vmov.f64	d5, d8
   2410a:	e481      	b.n	23a10 <_dtoa_r+0x270>
   2410c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   24110:	e68e      	b.n	23e30 <_dtoa_r+0x690>
   24112:	f04f 0b01 	mov.w	fp, #1
   24116:	46d9      	mov	r9, fp
   24118:	e44f      	b.n	239ba <_dtoa_r+0x21a>
   2411a:	d103      	bne.n	24124 <_dtoa_r+0x984>
   2411c:	9b01      	ldr	r3, [sp, #4]
   2411e:	07db      	lsls	r3, r3, #31
   24120:	f53f ae4c 	bmi.w	23dbc <_dtoa_r+0x61c>
   24124:	46d9      	mov	r9, fp
   24126:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   2412a:	2b30      	cmp	r3, #48	; 0x30
   2412c:	d0fa      	beq.n	24124 <_dtoa_r+0x984>
   2412e:	e657      	b.n	23de0 <_dtoa_r+0x640>
   24130:	9b04      	ldr	r3, [sp, #16]
   24132:	9a00      	ldr	r2, [sp, #0]
   24134:	3301      	adds	r3, #1
   24136:	9304      	str	r3, [sp, #16]
   24138:	2331      	movs	r3, #49	; 0x31
   2413a:	7013      	strb	r3, [r2, #0]
   2413c:	e650      	b.n	23de0 <_dtoa_r+0x640>
   2413e:	f1ba 0f00 	cmp.w	sl, #0
   24142:	f000 8123 	beq.w	2438c <_dtoa_r+0xbec>
   24146:	f202 4233 	addw	r2, r2, #1075	; 0x433
   2414a:	9b06      	ldr	r3, [sp, #24]
   2414c:	9309      	str	r3, [sp, #36]	; 0x24
   2414e:	4413      	add	r3, r2
   24150:	f8dd a020 	ldr.w	sl, [sp, #32]
   24154:	9306      	str	r3, [sp, #24]
   24156:	4490      	add	r8, r2
   24158:	e592      	b.n	23c80 <_dtoa_r+0x4e0>
   2415a:	ee07 0a90 	vmov	s15, r0
   2415e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   24162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   24166:	eea6 5b07 	vfma.f64	d5, d6, d7
   2416a:	ee15 2a90 	vmov	r2, s11
   2416e:	ec51 0b15 	vmov	r0, r1, d5
   24172:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   24176:	ec41 0b15 	vmov	d5, r0, r1
   2417a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   2417e:	ee36 7b47 	vsub.f64	d7, d6, d7
   24182:	eeb4 7bc5 	vcmpe.f64	d7, d5
   24186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2418a:	f300 8137 	bgt.w	243fc <_dtoa_r+0xc5c>
   2418e:	eeb1 5b45 	vneg.f64	d5, d5
   24192:	eeb4 7bc5 	vcmpe.f64	d7, d5
   24196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2419a:	f57f acfb 	bpl.w	23b94 <_dtoa_r+0x3f4>
   2419e:	f04f 0a00 	mov.w	sl, #0
   241a2:	4656      	mov	r6, sl
   241a4:	e515      	b.n	23bd2 <_dtoa_r+0x432>
   241a6:	f000 80f5 	beq.w	24394 <_dtoa_r+0xbf4>
   241aa:	9b04      	ldr	r3, [sp, #16]
   241ac:	4951      	ldr	r1, [pc, #324]	; (242f4 <_dtoa_r+0xb54>)
   241ae:	425a      	negs	r2, r3
   241b0:	f002 000f 	and.w	r0, r2, #15
   241b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   241b8:	ed91 6b00 	vldr	d6, [r1]
   241bc:	1112      	asrs	r2, r2, #4
   241be:	ee28 6b06 	vmul.f64	d6, d8, d6
   241c2:	f000 8142 	beq.w	2444a <_dtoa_r+0xcaa>
   241c6:	eeb0 7b46 	vmov.f64	d7, d6
   241ca:	494b      	ldr	r1, [pc, #300]	; (242f8 <_dtoa_r+0xb58>)
   241cc:	2600      	movs	r6, #0
   241ce:	2002      	movs	r0, #2
   241d0:	07d3      	lsls	r3, r2, #31
   241d2:	d505      	bpl.n	241e0 <_dtoa_r+0xa40>
   241d4:	ed91 5b00 	vldr	d5, [r1]
   241d8:	3001      	adds	r0, #1
   241da:	2601      	movs	r6, #1
   241dc:	ee27 7b05 	vmul.f64	d7, d7, d5
   241e0:	1052      	asrs	r2, r2, #1
   241e2:	f101 0108 	add.w	r1, r1, #8
   241e6:	d1f3      	bne.n	241d0 <_dtoa_r+0xa30>
   241e8:	2e00      	cmp	r6, #0
   241ea:	fe06 6b07 	vseleq.f64	d6, d6, d7
   241ee:	e41e      	b.n	23a2e <_dtoa_r+0x28e>
   241f0:	9b02      	ldr	r3, [sp, #8]
   241f2:	2b00      	cmp	r3, #0
   241f4:	f47f ae37 	bne.w	23e66 <_dtoa_r+0x6c6>
   241f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   241fc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   24200:	2a00      	cmp	r2, #0
   24202:	f040 8137 	bne.w	24474 <_dtoa_r+0xcd4>
   24206:	4a3d      	ldr	r2, [pc, #244]	; (242fc <_dtoa_r+0xb5c>)
   24208:	400a      	ands	r2, r1
   2420a:	2a00      	cmp	r2, #0
   2420c:	f000 80fa 	beq.w	24404 <_dtoa_r+0xc64>
   24210:	9b06      	ldr	r3, [sp, #24]
   24212:	3301      	adds	r3, #1
   24214:	9306      	str	r3, [sp, #24]
   24216:	2301      	movs	r3, #1
   24218:	f108 0801 	add.w	r8, r8, #1
   2421c:	9308      	str	r3, [sp, #32]
   2421e:	e56f      	b.n	23d00 <_dtoa_r+0x560>
   24220:	4629      	mov	r1, r5
   24222:	9a08      	ldr	r2, [sp, #32]
   24224:	4620      	mov	r0, r4
   24226:	f7fe fb83 	bl	22930 <__pow5mult>
   2422a:	4605      	mov	r5, r0
   2422c:	e55a      	b.n	23ce4 <_dtoa_r+0x544>
   2422e:	2a00      	cmp	r2, #0
   24230:	dd12      	ble.n	24258 <_dtoa_r+0xab8>
   24232:	4629      	mov	r1, r5
   24234:	2201      	movs	r2, #1
   24236:	4620      	mov	r0, r4
   24238:	9301      	str	r3, [sp, #4]
   2423a:	f7fe fbd9 	bl	229f0 <__lshift>
   2423e:	4651      	mov	r1, sl
   24240:	4605      	mov	r5, r0
   24242:	f7fe fc4d 	bl	22ae0 <__mcmp>
   24246:	2800      	cmp	r0, #0
   24248:	9b01      	ldr	r3, [sp, #4]
   2424a:	f340 80e1 	ble.w	24410 <_dtoa_r+0xc70>
   2424e:	2b39      	cmp	r3, #57	; 0x39
   24250:	f000 80ca 	beq.w	243e8 <_dtoa_r+0xc48>
   24254:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   24258:	46b9      	mov	r9, r7
   2425a:	f809 3b01 	strb.w	r3, [r9], #1
   2425e:	9b04      	ldr	r3, [sp, #16]
   24260:	3301      	adds	r3, #1
   24262:	4637      	mov	r7, r6
   24264:	9304      	str	r3, [sp, #16]
   24266:	4646      	mov	r6, r8
   24268:	e5ba      	b.n	23de0 <_dtoa_r+0x640>
   2426a:	ee38 8b08 	vadd.f64	d8, d8, d8
   2426e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   24272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24276:	dc0a      	bgt.n	2428e <_dtoa_r+0xaee>
   24278:	eeb4 8b46 	vcmp.f64	d8, d6
   2427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24280:	f47f acdc 	bne.w	23c3c <_dtoa_r+0x49c>
   24284:	ee17 3a10 	vmov	r3, s14
   24288:	07d8      	lsls	r0, r3, #31
   2428a:	f57f acd7 	bpl.w	23c3c <_dtoa_r+0x49c>
   2428e:	9a00      	ldr	r2, [sp, #0]
   24290:	e454      	b.n	23b3c <_dtoa_r+0x39c>
   24292:	6871      	ldr	r1, [r6, #4]
   24294:	4620      	mov	r0, r4
   24296:	f7fe f945 	bl	22524 <_Balloc>
   2429a:	4607      	mov	r7, r0
   2429c:	2800      	cmp	r0, #0
   2429e:	f000 80de 	beq.w	2445e <_dtoa_r+0xcbe>
   242a2:	6933      	ldr	r3, [r6, #16]
   242a4:	3302      	adds	r3, #2
   242a6:	009a      	lsls	r2, r3, #2
   242a8:	f106 010c 	add.w	r1, r6, #12
   242ac:	300c      	adds	r0, #12
   242ae:	f7f4 f90d 	bl	184cc <memcpy>
   242b2:	4639      	mov	r1, r7
   242b4:	2201      	movs	r2, #1
   242b6:	4620      	mov	r0, r4
   242b8:	f7fe fb9a 	bl	229f0 <__lshift>
   242bc:	4680      	mov	r8, r0
   242be:	e5fe      	b.n	23ebe <_dtoa_r+0x71e>
   242c0:	9b06      	ldr	r3, [sp, #24]
   242c2:	eba3 0309 	sub.w	r3, r3, r9
   242c6:	9309      	str	r3, [sp, #36]	; 0x24
   242c8:	e4da      	b.n	23c80 <_dtoa_r+0x4e0>
   242ca:	2b39      	cmp	r3, #57	; 0x39
   242cc:	f000 808c 	beq.w	243e8 <_dtoa_r+0xc48>
   242d0:	46b9      	mov	r9, r7
   242d2:	3301      	adds	r3, #1
   242d4:	e7c1      	b.n	2425a <_dtoa_r+0xaba>
   242d6:	9a04      	ldr	r2, [sp, #16]
   242d8:	3201      	adds	r2, #1
   242da:	4637      	mov	r7, r6
   242dc:	9204      	str	r2, [sp, #16]
   242de:	4646      	mov	r6, r8
   242e0:	e55f      	b.n	23da2 <_dtoa_r+0x602>
   242e2:	4629      	mov	r1, r5
   242e4:	4620      	mov	r0, r4
   242e6:	f7fe fb23 	bl	22930 <__pow5mult>
   242ea:	4605      	mov	r5, r0
   242ec:	e4fa      	b.n	23ce4 <_dtoa_r+0x544>
   242ee:	bf00      	nop
   242f0:	20002aac 	.word	0x20002aac
   242f4:	20000b98 	.word	0x20000b98
   242f8:	20000b70 	.word	0x20000b70
   242fc:	7ff00000 	.word	0x7ff00000
   24300:	4b5e      	ldr	r3, [pc, #376]	; (2447c <_dtoa_r+0xcdc>)
   24302:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   24306:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   2430a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   2430e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   24312:	ee36 7b47 	vsub.f64	d7, d6, d7
   24316:	ec41 0b16 	vmov	d6, r0, r1
   2431a:	ee15 1a90 	vmov	r1, s11
   2431e:	ee23 3b06 	vmul.f64	d3, d3, d6
   24322:	9800      	ldr	r0, [sp, #0]
   24324:	3130      	adds	r1, #48	; 0x30
   24326:	2a01      	cmp	r2, #1
   24328:	f800 1b01 	strb.w	r1, [r0], #1
   2432c:	f000 8083 	beq.w	24436 <_dtoa_r+0xc96>
   24330:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   24334:	9b00      	ldr	r3, [sp, #0]
   24336:	1899      	adds	r1, r3, r2
   24338:	ee27 7b04 	vmul.f64	d7, d7, d4
   2433c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   24340:	ee16 3a90 	vmov	r3, s13
   24344:	3330      	adds	r3, #48	; 0x30
   24346:	f800 3b01 	strb.w	r3, [r0], #1
   2434a:	4281      	cmp	r1, r0
   2434c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   24350:	ee37 7b45 	vsub.f64	d7, d7, d5
   24354:	d1f0      	bne.n	24338 <_dtoa_r+0xb98>
   24356:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   2435a:	ee33 5b06 	vadd.f64	d5, d3, d6
   2435e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   24362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24366:	f53f abe3 	bmi.w	23b30 <_dtoa_r+0x390>
   2436a:	ee36 6b43 	vsub.f64	d6, d6, d3
   2436e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   24372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24376:	f77f ac0d 	ble.w	23b94 <_dtoa_r+0x3f4>
   2437a:	4689      	mov	r9, r1
   2437c:	3901      	subs	r1, #1
   2437e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   24382:	2b30      	cmp	r3, #48	; 0x30
   24384:	d0f9      	beq.n	2437a <_dtoa_r+0xbda>
   24386:	1c73      	adds	r3, r6, #1
   24388:	9304      	str	r3, [sp, #16]
   2438a:	e539      	b.n	23e00 <_dtoa_r+0x660>
   2438c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2438e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   24392:	e6da      	b.n	2414a <_dtoa_r+0x9aa>
   24394:	2002      	movs	r0, #2
   24396:	eeb0 6b48 	vmov.f64	d6, d8
   2439a:	f7ff bb48 	b.w	23a2e <_dtoa_r+0x28e>
   2439e:	f1b9 0f00 	cmp.w	r9, #0
   243a2:	f43f aeda 	beq.w	2415a <_dtoa_r+0x9ba>
   243a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   243a8:	2a00      	cmp	r2, #0
   243aa:	f77f abf3 	ble.w	23b94 <_dtoa_r+0x3f4>
   243ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   243b2:	ee26 6b04 	vmul.f64	d6, d6, d4
   243b6:	3001      	adds	r0, #1
   243b8:	ee07 0a90 	vmov	s15, r0
   243bc:	9b04      	ldr	r3, [sp, #16]
   243be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   243c2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   243c6:	eea6 7b05 	vfma.f64	d7, d6, d5
   243ca:	ee17 ca90 	vmov	ip, s15
   243ce:	ec51 0b17 	vmov	r0, r1, d7
   243d2:	1e5e      	subs	r6, r3, #1
   243d4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   243d8:	f7ff bb47 	b.w	23a6a <_dtoa_r+0x2ca>
   243dc:	9b04      	ldr	r3, [sp, #16]
   243de:	3301      	adds	r3, #1
   243e0:	9304      	str	r3, [sp, #16]
   243e2:	2331      	movs	r3, #49	; 0x31
   243e4:	f7ff bbb1 	b.w	23b4a <_dtoa_r+0x3aa>
   243e8:	9b04      	ldr	r3, [sp, #16]
   243ea:	46bb      	mov	fp, r7
   243ec:	3301      	adds	r3, #1
   243ee:	9304      	str	r3, [sp, #16]
   243f0:	2339      	movs	r3, #57	; 0x39
   243f2:	4637      	mov	r7, r6
   243f4:	f80b 3b01 	strb.w	r3, [fp], #1
   243f8:	4646      	mov	r6, r8
   243fa:	e4e1      	b.n	23dc0 <_dtoa_r+0x620>
   243fc:	f04f 0a00 	mov.w	sl, #0
   24400:	4656      	mov	r6, sl
   24402:	e653      	b.n	240ac <_dtoa_r+0x90c>
   24404:	9208      	str	r2, [sp, #32]
   24406:	e47b      	b.n	23d00 <_dtoa_r+0x560>
   24408:	1c73      	adds	r3, r6, #1
   2440a:	9304      	str	r3, [sp, #16]
   2440c:	4689      	mov	r9, r1
   2440e:	e4f7      	b.n	23e00 <_dtoa_r+0x660>
   24410:	f47f af22 	bne.w	24258 <_dtoa_r+0xab8>
   24414:	07da      	lsls	r2, r3, #31
   24416:	f57f af1f 	bpl.w	24258 <_dtoa_r+0xab8>
   2441a:	e718      	b.n	2424e <_dtoa_r+0xaae>
   2441c:	2b39      	cmp	r3, #57	; 0x39
   2441e:	d0e3      	beq.n	243e8 <_dtoa_r+0xc48>
   24420:	f1b9 0f00 	cmp.w	r9, #0
   24424:	f73f af16 	bgt.w	24254 <_dtoa_r+0xab4>
   24428:	e716      	b.n	24258 <_dtoa_r+0xab8>
   2442a:	9b01      	ldr	r3, [sp, #4]
   2442c:	2b02      	cmp	r3, #2
   2442e:	f73f ae28 	bgt.w	24082 <_dtoa_r+0x8e2>
   24432:	9704      	str	r7, [sp, #16]
   24434:	e5ba      	b.n	23fac <_dtoa_r+0x80c>
   24436:	4601      	mov	r1, r0
   24438:	e78d      	b.n	24356 <_dtoa_r+0xbb6>
   2443a:	9b01      	ldr	r3, [sp, #4]
   2443c:	2b02      	cmp	r3, #2
   2443e:	f73f ae20 	bgt.w	24082 <_dtoa_r+0x8e2>
   24442:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   24446:	9704      	str	r7, [sp, #16]
   24448:	e52b      	b.n	23ea2 <_dtoa_r+0x702>
   2444a:	2002      	movs	r0, #2
   2444c:	f7ff baef 	b.w	23a2e <_dtoa_r+0x28e>
   24450:	4b0b      	ldr	r3, [pc, #44]	; (24480 <_dtoa_r+0xce0>)
   24452:	480c      	ldr	r0, [pc, #48]	; (24484 <_dtoa_r+0xce4>)
   24454:	2200      	movs	r2, #0
   24456:	f240 11af 	movw	r1, #431	; 0x1af
   2445a:	f7ff f8b1 	bl	235c0 <__assert_func>
   2445e:	4b08      	ldr	r3, [pc, #32]	; (24480 <_dtoa_r+0xce0>)
   24460:	4808      	ldr	r0, [pc, #32]	; (24484 <_dtoa_r+0xce4>)
   24462:	463a      	mov	r2, r7
   24464:	f240 21ef 	movw	r1, #751	; 0x2ef
   24468:	f7ff f8aa 	bl	235c0 <__assert_func>
   2446c:	4b06      	ldr	r3, [pc, #24]	; (24488 <_dtoa_r+0xce8>)
   2446e:	9300      	str	r3, [sp, #0]
   24470:	f7ff b9d2 	b.w	23818 <_dtoa_r+0x78>
   24474:	9b02      	ldr	r3, [sp, #8]
   24476:	9308      	str	r3, [sp, #32]
   24478:	e4f7      	b.n	23e6a <_dtoa_r+0x6ca>
   2447a:	bf00      	nop
   2447c:	20000b98 	.word	0x20000b98
   24480:	20002758 	.word	0x20002758
   24484:	20002ab0 	.word	0x20002ab0
   24488:	20002aa0 	.word	0x20002aa0

0002448c <fiprintf>:
   2448c:	b40e      	push	{r1, r2, r3}
   2448e:	b510      	push	{r4, lr}
   24490:	b083      	sub	sp, #12
   24492:	ab05      	add	r3, sp, #20
   24494:	4c06      	ldr	r4, [pc, #24]	; (244b0 <fiprintf+0x24>)
   24496:	f853 2b04 	ldr.w	r2, [r3], #4
   2449a:	9301      	str	r3, [sp, #4]
   2449c:	4601      	mov	r1, r0
   2449e:	6820      	ldr	r0, [r4, #0]
   244a0:	f000 f8c4 	bl	2462c <_vfiprintf_r>
   244a4:	b003      	add	sp, #12
   244a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   244aa:	b003      	add	sp, #12
   244ac:	4770      	bx	lr
   244ae:	bf00      	nop
   244b0:	200043c8 	.word	0x200043c8

000244b4 <__ssprint_r>:
   244b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244b8:	6893      	ldr	r3, [r2, #8]
   244ba:	6817      	ldr	r7, [r2, #0]
   244bc:	b083      	sub	sp, #12
   244be:	4692      	mov	sl, r2
   244c0:	2b00      	cmp	r3, #0
   244c2:	d070      	beq.n	245a6 <__ssprint_r+0xf2>
   244c4:	4681      	mov	r9, r0
   244c6:	688a      	ldr	r2, [r1, #8]
   244c8:	6808      	ldr	r0, [r1, #0]
   244ca:	460c      	mov	r4, r1
   244cc:	3708      	adds	r7, #8
   244ce:	e043      	b.n	24558 <__ssprint_r+0xa4>
   244d0:	89a3      	ldrh	r3, [r4, #12]
   244d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   244d6:	d02e      	beq.n	24536 <__ssprint_r+0x82>
   244d8:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   244dc:	eba0 0801 	sub.w	r8, r0, r1
   244e0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   244e4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   244e8:	f108 0001 	add.w	r0, r8, #1
   244ec:	1076      	asrs	r6, r6, #1
   244ee:	4428      	add	r0, r5
   244f0:	42b0      	cmp	r0, r6
   244f2:	4632      	mov	r2, r6
   244f4:	bf84      	itt	hi
   244f6:	4606      	movhi	r6, r0
   244f8:	4632      	movhi	r2, r6
   244fa:	055b      	lsls	r3, r3, #21
   244fc:	d537      	bpl.n	2456e <__ssprint_r+0xba>
   244fe:	4611      	mov	r1, r2
   24500:	4648      	mov	r0, r9
   24502:	f7f9 f853 	bl	1d5ac <_malloc_r>
   24506:	9001      	str	r0, [sp, #4]
   24508:	2800      	cmp	r0, #0
   2450a:	d03a      	beq.n	24582 <__ssprint_r+0xce>
   2450c:	4642      	mov	r2, r8
   2450e:	6921      	ldr	r1, [r4, #16]
   24510:	f7f3 ffdc 	bl	184cc <memcpy>
   24514:	89a2      	ldrh	r2, [r4, #12]
   24516:	9b01      	ldr	r3, [sp, #4]
   24518:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2451c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   24520:	81a2      	strh	r2, [r4, #12]
   24522:	eba6 0208 	sub.w	r2, r6, r8
   24526:	eb03 0008 	add.w	r0, r3, r8
   2452a:	6166      	str	r6, [r4, #20]
   2452c:	60a2      	str	r2, [r4, #8]
   2452e:	6123      	str	r3, [r4, #16]
   24530:	6020      	str	r0, [r4, #0]
   24532:	462e      	mov	r6, r5
   24534:	46a8      	mov	r8, r5
   24536:	4642      	mov	r2, r8
   24538:	4659      	mov	r1, fp
   2453a:	f7fa fddd 	bl	1f0f8 <memmove>
   2453e:	f8da 3008 	ldr.w	r3, [sl, #8]
   24542:	68a2      	ldr	r2, [r4, #8]
   24544:	6820      	ldr	r0, [r4, #0]
   24546:	1b92      	subs	r2, r2, r6
   24548:	4440      	add	r0, r8
   2454a:	1b5b      	subs	r3, r3, r5
   2454c:	60a2      	str	r2, [r4, #8]
   2454e:	6020      	str	r0, [r4, #0]
   24550:	f8ca 3008 	str.w	r3, [sl, #8]
   24554:	b33b      	cbz	r3, 245a6 <__ssprint_r+0xf2>
   24556:	3708      	adds	r7, #8
   24558:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   2455c:	2d00      	cmp	r5, #0
   2455e:	d0fa      	beq.n	24556 <__ssprint_r+0xa2>
   24560:	42aa      	cmp	r2, r5
   24562:	4616      	mov	r6, r2
   24564:	4690      	mov	r8, r2
   24566:	d9b3      	bls.n	244d0 <__ssprint_r+0x1c>
   24568:	462e      	mov	r6, r5
   2456a:	46a8      	mov	r8, r5
   2456c:	e7e3      	b.n	24536 <__ssprint_r+0x82>
   2456e:	4648      	mov	r0, r9
   24570:	f7f9 fad8 	bl	1db24 <_realloc_r>
   24574:	4603      	mov	r3, r0
   24576:	2800      	cmp	r0, #0
   24578:	d1d3      	bne.n	24522 <__ssprint_r+0x6e>
   2457a:	6921      	ldr	r1, [r4, #16]
   2457c:	4648      	mov	r0, r9
   2457e:	f7fb fd01 	bl	1ff84 <_free_r>
   24582:	89a3      	ldrh	r3, [r4, #12]
   24584:	220c      	movs	r2, #12
   24586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2458a:	f8c9 2000 	str.w	r2, [r9]
   2458e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24592:	81a3      	strh	r3, [r4, #12]
   24594:	2200      	movs	r2, #0
   24596:	2300      	movs	r3, #0
   24598:	f8ca 2008 	str.w	r2, [sl, #8]
   2459c:	f8ca 3004 	str.w	r3, [sl, #4]
   245a0:	b003      	add	sp, #12
   245a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245a6:	2000      	movs	r0, #0
   245a8:	2300      	movs	r3, #0
   245aa:	f8ca 3004 	str.w	r3, [sl, #4]
   245ae:	b003      	add	sp, #12
   245b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000245b4 <__sprint_r.part.0>:
   245b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   245ba:	049c      	lsls	r4, r3, #18
   245bc:	4690      	mov	r8, r2
   245be:	d52d      	bpl.n	2461c <__sprint_r.part.0+0x68>
   245c0:	6893      	ldr	r3, [r2, #8]
   245c2:	6812      	ldr	r2, [r2, #0]
   245c4:	b343      	cbz	r3, 24618 <__sprint_r.part.0+0x64>
   245c6:	468b      	mov	fp, r1
   245c8:	4606      	mov	r6, r0
   245ca:	f102 0908 	add.w	r9, r2, #8
   245ce:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   245d2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   245d6:	d015      	beq.n	24604 <__sprint_r.part.0+0x50>
   245d8:	3d04      	subs	r5, #4
   245da:	2400      	movs	r4, #0
   245dc:	e001      	b.n	245e2 <__sprint_r.part.0+0x2e>
   245de:	42a7      	cmp	r7, r4
   245e0:	d00e      	beq.n	24600 <__sprint_r.part.0+0x4c>
   245e2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   245e6:	465a      	mov	r2, fp
   245e8:	4630      	mov	r0, r6
   245ea:	f001 fa5b 	bl	25aa4 <_fputwc_r>
   245ee:	1c43      	adds	r3, r0, #1
   245f0:	f104 0401 	add.w	r4, r4, #1
   245f4:	d1f3      	bne.n	245de <__sprint_r.part.0+0x2a>
   245f6:	2300      	movs	r3, #0
   245f8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   245fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24600:	f8d8 3008 	ldr.w	r3, [r8, #8]
   24604:	f02a 0a03 	bic.w	sl, sl, #3
   24608:	eba3 030a 	sub.w	r3, r3, sl
   2460c:	f8c8 3008 	str.w	r3, [r8, #8]
   24610:	f109 0908 	add.w	r9, r9, #8
   24614:	2b00      	cmp	r3, #0
   24616:	d1da      	bne.n	245ce <__sprint_r.part.0+0x1a>
   24618:	2000      	movs	r0, #0
   2461a:	e7ec      	b.n	245f6 <__sprint_r.part.0+0x42>
   2461c:	f001 f80c 	bl	25638 <__sfvwrite_r>
   24620:	2300      	movs	r3, #0
   24622:	e9c8 3301 	strd	r3, r3, [r8, #4]
   24626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2462a:	bf00      	nop

0002462c <_vfiprintf_r>:
   2462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24630:	ed2d 8b02 	vpush	{d8}
   24634:	b0c5      	sub	sp, #276	; 0x114
   24636:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   2463a:	4683      	mov	fp, r0
   2463c:	ee08 1a10 	vmov	s16, r1
   24640:	4616      	mov	r6, r2
   24642:	2100      	movs	r1, #0
   24644:	2208      	movs	r2, #8
   24646:	4650      	mov	r0, sl
   24648:	461c      	mov	r4, r3
   2464a:	9307      	str	r3, [sp, #28]
   2464c:	f7fa fdd0 	bl	1f1f0 <memset>
   24650:	f1bb 0f00 	cmp.w	fp, #0
   24654:	d004      	beq.n	24660 <_vfiprintf_r+0x34>
   24656:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   2465a:	2b00      	cmp	r3, #0
   2465c:	f000 86a0 	beq.w	253a0 <_vfiprintf_r+0xd74>
   24660:	ee18 2a10 	vmov	r2, s16
   24664:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24666:	07db      	lsls	r3, r3, #31
   24668:	f140 8513 	bpl.w	25092 <_vfiprintf_r+0xa66>
   2466c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   24670:	b28a      	uxth	r2, r1
   24672:	0495      	lsls	r5, r2, #18
   24674:	d40b      	bmi.n	2468e <_vfiprintf_r+0x62>
   24676:	ee18 3a10 	vmov	r3, s16
   2467a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2467e:	8199      	strh	r1, [r3, #12]
   24680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   24682:	b28a      	uxth	r2, r1
   24684:	ee18 1a10 	vmov	r1, s16
   24688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   2468c:	664b      	str	r3, [r1, #100]	; 0x64
   2468e:	0710      	lsls	r0, r2, #28
   24690:	f140 8105 	bpl.w	2489e <_vfiprintf_r+0x272>
   24694:	ee18 3a10 	vmov	r3, s16
   24698:	691b      	ldr	r3, [r3, #16]
   2469a:	2b00      	cmp	r3, #0
   2469c:	f000 80ff 	beq.w	2489e <_vfiprintf_r+0x272>
   246a0:	f002 031a 	and.w	r3, r2, #26
   246a4:	2b0a      	cmp	r3, #10
   246a6:	f000 810a 	beq.w	248be <_vfiprintf_r+0x292>
   246aa:	2300      	movs	r3, #0
   246ac:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   246b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   246b4:	aa1b      	add	r2, sp, #108	; 0x6c
   246b6:	930c      	str	r3, [sp, #48]	; 0x30
   246b8:	9218      	str	r2, [sp, #96]	; 0x60
   246ba:	4691      	mov	r9, r2
   246bc:	930b      	str	r3, [sp, #44]	; 0x2c
   246be:	9305      	str	r3, [sp, #20]
   246c0:	46b0      	mov	r8, r6
   246c2:	4644      	mov	r4, r8
   246c4:	4ba8      	ldr	r3, [pc, #672]	; (24968 <_vfiprintf_r+0x33c>)
   246c6:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   246ca:	f7fb f919 	bl	1f900 <__locale_mb_cur_max>
   246ce:	4622      	mov	r2, r4
   246d0:	4603      	mov	r3, r0
   246d2:	a912      	add	r1, sp, #72	; 0x48
   246d4:	f8cd a000 	str.w	sl, [sp]
   246d8:	4658      	mov	r0, fp
   246da:	47a8      	blx	r5
   246dc:	2800      	cmp	r0, #0
   246de:	f000 8145 	beq.w	2496c <_vfiprintf_r+0x340>
   246e2:	f2c0 8139 	blt.w	24958 <_vfiprintf_r+0x32c>
   246e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   246e8:	2a25      	cmp	r2, #37	; 0x25
   246ea:	4603      	mov	r3, r0
   246ec:	d001      	beq.n	246f2 <_vfiprintf_r+0xc6>
   246ee:	441c      	add	r4, r3
   246f0:	e7e8      	b.n	246c4 <_vfiprintf_r+0x98>
   246f2:	ebb4 0608 	subs.w	r6, r4, r8
   246f6:	4605      	mov	r5, r0
   246f8:	f040 813c 	bne.w	24974 <_vfiprintf_r+0x348>
   246fc:	2300      	movs	r3, #0
   246fe:	7861      	ldrb	r1, [r4, #1]
   24700:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   24704:	f104 0801 	add.w	r8, r4, #1
   24708:	9306      	str	r3, [sp, #24]
   2470a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2470e:	461e      	mov	r6, r3
   24710:	242b      	movs	r4, #43	; 0x2b
   24712:	f108 0801 	add.w	r8, r8, #1
   24716:	f1a1 0320 	sub.w	r3, r1, #32
   2471a:	2b5a      	cmp	r3, #90	; 0x5a
   2471c:	f200 8178 	bhi.w	24a10 <_vfiprintf_r+0x3e4>
   24720:	e8df f013 	tbh	[pc, r3, lsl #1]
   24724:	017602b5 	.word	0x017602b5
   24728:	02b00176 	.word	0x02b00176
   2472c:	01760176 	.word	0x01760176
   24730:	006a0176 	.word	0x006a0176
   24734:	01760176 	.word	0x01760176
   24738:	028d027d 	.word	0x028d027d
   2473c:	02880176 	.word	0x02880176
   24740:	01760297 	.word	0x01760297
   24744:	005b0292 	.word	0x005b0292
   24748:	005b005b 	.word	0x005b005b
   2474c:	005b005b 	.word	0x005b005b
   24750:	005b005b 	.word	0x005b005b
   24754:	005b005b 	.word	0x005b005b
   24758:	01760176 	.word	0x01760176
   2475c:	01760176 	.word	0x01760176
   24760:	01760176 	.word	0x01760176
   24764:	01760176 	.word	0x01760176
   24768:	025c0176 	.word	0x025c0176
   2476c:	01760084 	.word	0x01760084
   24770:	01760176 	.word	0x01760176
   24774:	01760176 	.word	0x01760176
   24778:	01760176 	.word	0x01760176
   2477c:	01760176 	.word	0x01760176
   24780:	00e80176 	.word	0x00e80176
   24784:	01760176 	.word	0x01760176
   24788:	02330176 	.word	0x02330176
   2478c:	02da0176 	.word	0x02da0176
   24790:	01760176 	.word	0x01760176
   24794:	0176058b 	.word	0x0176058b
   24798:	01760176 	.word	0x01760176
   2479c:	01760176 	.word	0x01760176
   247a0:	01760176 	.word	0x01760176
   247a4:	01760176 	.word	0x01760176
   247a8:	025c0176 	.word	0x025c0176
   247ac:	01760086 	.word	0x01760086
   247b0:	01760176 	.word	0x01760176
   247b4:	008602cd 	.word	0x008602cd
   247b8:	0176007f 	.word	0x0176007f
   247bc:	017602c0 	.word	0x017602c0
   247c0:	00ea02fd 	.word	0x00ea02fd
   247c4:	007f02ed 	.word	0x007f02ed
   247c8:	02330176 	.word	0x02330176
   247cc:	0569007c 	.word	0x0569007c
   247d0:	01760176 	.word	0x01760176
   247d4:	0176056b 	.word	0x0176056b
   247d8:	007c      	.short	0x007c
   247da:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   247de:	2200      	movs	r2, #0
   247e0:	f818 1b01 	ldrb.w	r1, [r8], #1
   247e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   247e8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   247ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   247f0:	2b09      	cmp	r3, #9
   247f2:	d9f5      	bls.n	247e0 <_vfiprintf_r+0x1b4>
   247f4:	9206      	str	r2, [sp, #24]
   247f6:	e78e      	b.n	24716 <_vfiprintf_r+0xea>
   247f8:	4658      	mov	r0, fp
   247fa:	f7fe fd89 	bl	23310 <_localeconv_r>
   247fe:	6843      	ldr	r3, [r0, #4]
   24800:	930d      	str	r3, [sp, #52]	; 0x34
   24802:	4618      	mov	r0, r3
   24804:	f7fb fabc 	bl	1fd80 <strlen>
   24808:	900e      	str	r0, [sp, #56]	; 0x38
   2480a:	4605      	mov	r5, r0
   2480c:	4658      	mov	r0, fp
   2480e:	f7fe fd7f 	bl	23310 <_localeconv_r>
   24812:	6883      	ldr	r3, [r0, #8]
   24814:	930b      	str	r3, [sp, #44]	; 0x2c
   24816:	2d00      	cmp	r5, #0
   24818:	f040 84d6 	bne.w	251c8 <_vfiprintf_r+0xb9c>
   2481c:	f898 1000 	ldrb.w	r1, [r8]
   24820:	e777      	b.n	24712 <_vfiprintf_r+0xe6>
   24822:	f898 1000 	ldrb.w	r1, [r8]
   24826:	f046 0620 	orr.w	r6, r6, #32
   2482a:	e772      	b.n	24712 <_vfiprintf_r+0xe6>
   2482c:	f046 0610 	orr.w	r6, r6, #16
   24830:	06b4      	lsls	r4, r6, #26
   24832:	f140 818e 	bpl.w	24b52 <_vfiprintf_r+0x526>
   24836:	9b07      	ldr	r3, [sp, #28]
   24838:	3307      	adds	r3, #7
   2483a:	f023 0307 	bic.w	r3, r3, #7
   2483e:	461a      	mov	r2, r3
   24840:	6859      	ldr	r1, [r3, #4]
   24842:	f852 3b08 	ldr.w	r3, [r2], #8
   24846:	9207      	str	r2, [sp, #28]
   24848:	460a      	mov	r2, r1
   2484a:	2900      	cmp	r1, #0
   2484c:	f2c0 8470 	blt.w	25130 <_vfiprintf_r+0xb04>
   24850:	1c79      	adds	r1, r7, #1
   24852:	f000 85a2 	beq.w	2539a <_vfiprintf_r+0xd6e>
   24856:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   2485a:	9103      	str	r1, [sp, #12]
   2485c:	ea53 0102 	orrs.w	r1, r3, r2
   24860:	f000 843f 	beq.w	250e2 <_vfiprintf_r+0xab6>
   24864:	2b0a      	cmp	r3, #10
   24866:	f172 0100 	sbcs.w	r1, r2, #0
   2486a:	f080 8541 	bcs.w	252f0 <_vfiprintf_r+0xcc4>
   2486e:	3330      	adds	r3, #48	; 0x30
   24870:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   24874:	9e03      	ldr	r6, [sp, #12]
   24876:	2301      	movs	r3, #1
   24878:	9304      	str	r3, [sp, #16]
   2487a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   2487e:	9b04      	ldr	r3, [sp, #16]
   24880:	42bb      	cmp	r3, r7
   24882:	bfb8      	it	lt
   24884:	463b      	movlt	r3, r7
   24886:	9303      	str	r3, [sp, #12]
   24888:	2300      	movs	r3, #0
   2488a:	9308      	str	r3, [sp, #32]
   2488c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   24890:	2b00      	cmp	r3, #0
   24892:	f000 80cb 	beq.w	24a2c <_vfiprintf_r+0x400>
   24896:	9b03      	ldr	r3, [sp, #12]
   24898:	3301      	adds	r3, #1
   2489a:	9303      	str	r3, [sp, #12]
   2489c:	e0c6      	b.n	24a2c <_vfiprintf_r+0x400>
   2489e:	ee18 1a10 	vmov	r1, s16
   248a2:	4658      	mov	r0, fp
   248a4:	ee18 5a10 	vmov	r5, s16
   248a8:	f001 f840 	bl	2592c <__swsetup_r>
   248ac:	2800      	cmp	r0, #0
   248ae:	f040 8652 	bne.w	25556 <_vfiprintf_r+0xf2a>
   248b2:	89aa      	ldrh	r2, [r5, #12]
   248b4:	f002 031a 	and.w	r3, r2, #26
   248b8:	2b0a      	cmp	r3, #10
   248ba:	f47f aef6 	bne.w	246aa <_vfiprintf_r+0x7e>
   248be:	ee18 1a10 	vmov	r1, s16
   248c2:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   248c6:	2b00      	cmp	r3, #0
   248c8:	f6ff aeef 	blt.w	246aa <_vfiprintf_r+0x7e>
   248cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   248ce:	07db      	lsls	r3, r3, #31
   248d0:	d402      	bmi.n	248d8 <_vfiprintf_r+0x2ac>
   248d2:	0597      	lsls	r7, r2, #22
   248d4:	f140 8612 	bpl.w	254fc <_vfiprintf_r+0xed0>
   248d8:	ee18 1a10 	vmov	r1, s16
   248dc:	4623      	mov	r3, r4
   248de:	4632      	mov	r2, r6
   248e0:	4658      	mov	r0, fp
   248e2:	f000 fe69 	bl	255b8 <__sbprintf>
   248e6:	9005      	str	r0, [sp, #20]
   248e8:	9805      	ldr	r0, [sp, #20]
   248ea:	b045      	add	sp, #276	; 0x114
   248ec:	ecbd 8b02 	vpop	{d8}
   248f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   248f4:	f046 0610 	orr.w	r6, r6, #16
   248f8:	f016 0220 	ands.w	r2, r6, #32
   248fc:	f000 8136 	beq.w	24b6c <_vfiprintf_r+0x540>
   24900:	9b07      	ldr	r3, [sp, #28]
   24902:	3307      	adds	r3, #7
   24904:	f023 0307 	bic.w	r3, r3, #7
   24908:	4619      	mov	r1, r3
   2490a:	685a      	ldr	r2, [r3, #4]
   2490c:	f851 3b08 	ldr.w	r3, [r1], #8
   24910:	9107      	str	r1, [sp, #28]
   24912:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   24916:	9103      	str	r1, [sp, #12]
   24918:	2100      	movs	r1, #0
   2491a:	2000      	movs	r0, #0
   2491c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   24920:	1c78      	adds	r0, r7, #1
   24922:	f000 8210 	beq.w	24d46 <_vfiprintf_r+0x71a>
   24926:	9803      	ldr	r0, [sp, #12]
   24928:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   2492c:	ea53 0002 	orrs.w	r0, r3, r2
   24930:	f040 8208 	bne.w	24d44 <_vfiprintf_r+0x718>
   24934:	2f00      	cmp	r7, #0
   24936:	f040 8538 	bne.w	253aa <_vfiprintf_r+0xd7e>
   2493a:	2900      	cmp	r1, #0
   2493c:	f040 83d5 	bne.w	250ea <_vfiprintf_r+0xabe>
   24940:	9b03      	ldr	r3, [sp, #12]
   24942:	f013 0301 	ands.w	r3, r3, #1
   24946:	9304      	str	r3, [sp, #16]
   24948:	f000 8411 	beq.w	2516e <_vfiprintf_r+0xb42>
   2494c:	2330      	movs	r3, #48	; 0x30
   2494e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   24952:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   24956:	e792      	b.n	2487e <_vfiprintf_r+0x252>
   24958:	2208      	movs	r2, #8
   2495a:	2100      	movs	r1, #0
   2495c:	4650      	mov	r0, sl
   2495e:	f7fa fc47 	bl	1f1f0 <memset>
   24962:	2301      	movs	r3, #1
   24964:	441c      	add	r4, r3
   24966:	e6ad      	b.n	246c4 <_vfiprintf_r+0x98>
   24968:	20003e40 	.word	0x20003e40
   2496c:	ebb4 0608 	subs.w	r6, r4, r8
   24970:	4605      	mov	r5, r0
   24972:	d01b      	beq.n	249ac <_vfiprintf_r+0x380>
   24974:	9b19      	ldr	r3, [sp, #100]	; 0x64
   24976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   24978:	3301      	adds	r3, #1
   2497a:	4432      	add	r2, r6
   2497c:	2b07      	cmp	r3, #7
   2497e:	e9c9 8600 	strd	r8, r6, [r9]
   24982:	921a      	str	r2, [sp, #104]	; 0x68
   24984:	9319      	str	r3, [sp, #100]	; 0x64
   24986:	dd1c      	ble.n	249c2 <_vfiprintf_r+0x396>
   24988:	2a00      	cmp	r2, #0
   2498a:	f000 83a6 	beq.w	250da <_vfiprintf_r+0xaae>
   2498e:	ee18 1a10 	vmov	r1, s16
   24992:	aa18      	add	r2, sp, #96	; 0x60
   24994:	4658      	mov	r0, fp
   24996:	f7ff fe0d 	bl	245b4 <__sprint_r.part.0>
   2499a:	bb20      	cbnz	r0, 249e6 <_vfiprintf_r+0x3ba>
   2499c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   249a0:	9b05      	ldr	r3, [sp, #20]
   249a2:	4433      	add	r3, r6
   249a4:	9305      	str	r3, [sp, #20]
   249a6:	2d00      	cmp	r5, #0
   249a8:	f47f aea8 	bne.w	246fc <_vfiprintf_r+0xd0>
   249ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   249ae:	2b00      	cmp	r3, #0
   249b0:	f040 85c1 	bne.w	25536 <_vfiprintf_r+0xf0a>
   249b4:	ee18 3a10 	vmov	r3, s16
   249b8:	2200      	movs	r2, #0
   249ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   249be:	9219      	str	r2, [sp, #100]	; 0x64
   249c0:	e015      	b.n	249ee <_vfiprintf_r+0x3c2>
   249c2:	f109 0908 	add.w	r9, r9, #8
   249c6:	e7eb      	b.n	249a0 <_vfiprintf_r+0x374>
   249c8:	ee18 1a10 	vmov	r1, s16
   249cc:	aa18      	add	r2, sp, #96	; 0x60
   249ce:	4658      	mov	r0, fp
   249d0:	f7ff fdf0 	bl	245b4 <__sprint_r.part.0>
   249d4:	2800      	cmp	r0, #0
   249d6:	f000 80a6 	beq.w	24b26 <_vfiprintf_r+0x4fa>
   249da:	9b08      	ldr	r3, [sp, #32]
   249dc:	b11b      	cbz	r3, 249e6 <_vfiprintf_r+0x3ba>
   249de:	9908      	ldr	r1, [sp, #32]
   249e0:	4658      	mov	r0, fp
   249e2:	f7fb facf 	bl	1ff84 <_free_r>
   249e6:	ee18 3a10 	vmov	r3, s16
   249ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   249ee:	ee18 2a10 	vmov	r2, s16
   249f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   249f4:	f012 0f01 	tst.w	r2, #1
   249f8:	b29a      	uxth	r2, r3
   249fa:	f000 80a0 	beq.w	24b3e <_vfiprintf_r+0x512>
   249fe:	0650      	lsls	r0, r2, #25
   24a00:	f100 85b2 	bmi.w	25568 <_vfiprintf_r+0xf3c>
   24a04:	9805      	ldr	r0, [sp, #20]
   24a06:	b045      	add	sp, #276	; 0x114
   24a08:	ecbd 8b02 	vpop	{d8}
   24a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a10:	2900      	cmp	r1, #0
   24a12:	d0cb      	beq.n	249ac <_vfiprintf_r+0x380>
   24a14:	2300      	movs	r3, #0
   24a16:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   24a1a:	2301      	movs	r3, #1
   24a1c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   24a20:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   24a24:	ac2b      	add	r4, sp, #172	; 0xac
   24a26:	2300      	movs	r3, #0
   24a28:	9308      	str	r3, [sp, #32]
   24a2a:	461f      	mov	r7, r3
   24a2c:	f016 0302 	ands.w	r3, r6, #2
   24a30:	9309      	str	r3, [sp, #36]	; 0x24
   24a32:	d002      	beq.n	24a3a <_vfiprintf_r+0x40e>
   24a34:	9b03      	ldr	r3, [sp, #12]
   24a36:	3302      	adds	r3, #2
   24a38:	9303      	str	r3, [sp, #12]
   24a3a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   24a3e:	930a      	str	r3, [sp, #40]	; 0x28
   24a40:	d105      	bne.n	24a4e <_vfiprintf_r+0x422>
   24a42:	9b06      	ldr	r3, [sp, #24]
   24a44:	9a03      	ldr	r2, [sp, #12]
   24a46:	1a9d      	subs	r5, r3, r2
   24a48:	2d00      	cmp	r5, #0
   24a4a:	f300 827b 	bgt.w	24f44 <_vfiprintf_r+0x918>
   24a4e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24a52:	1c41      	adds	r1, r0, #1
   24a54:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   24a58:	b182      	cbz	r2, 24a7c <_vfiprintf_r+0x450>
   24a5a:	2201      	movs	r2, #1
   24a5c:	3301      	adds	r3, #1
   24a5e:	f8c9 2004 	str.w	r2, [r9, #4]
   24a62:	2907      	cmp	r1, #7
   24a64:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   24a68:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   24a6c:	f8c9 2000 	str.w	r2, [r9]
   24a70:	f300 824a 	bgt.w	24f08 <_vfiprintf_r+0x8dc>
   24a74:	4608      	mov	r0, r1
   24a76:	f109 0908 	add.w	r9, r9, #8
   24a7a:	3101      	adds	r1, #1
   24a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24a7e:	b1e2      	cbz	r2, 24aba <_vfiprintf_r+0x48e>
   24a80:	aa11      	add	r2, sp, #68	; 0x44
   24a82:	3302      	adds	r3, #2
   24a84:	f8c9 2000 	str.w	r2, [r9]
   24a88:	2907      	cmp	r1, #7
   24a8a:	f04f 0202 	mov.w	r2, #2
   24a8e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   24a92:	f8c9 2004 	str.w	r2, [r9, #4]
   24a96:	f340 8250 	ble.w	24f3a <_vfiprintf_r+0x90e>
   24a9a:	2b00      	cmp	r3, #0
   24a9c:	f000 8343 	beq.w	25126 <_vfiprintf_r+0xafa>
   24aa0:	ee18 1a10 	vmov	r1, s16
   24aa4:	aa18      	add	r2, sp, #96	; 0x60
   24aa6:	4658      	mov	r0, fp
   24aa8:	f7ff fd84 	bl	245b4 <__sprint_r.part.0>
   24aac:	2800      	cmp	r0, #0
   24aae:	d194      	bne.n	249da <_vfiprintf_r+0x3ae>
   24ab0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24ab4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24ab8:	1c41      	adds	r1, r0, #1
   24aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24abc:	2a80      	cmp	r2, #128	; 0x80
   24abe:	f000 8184 	beq.w	24dca <_vfiprintf_r+0x79e>
   24ac2:	9a04      	ldr	r2, [sp, #16]
   24ac4:	1abd      	subs	r5, r7, r2
   24ac6:	2d00      	cmp	r5, #0
   24ac8:	f300 81d7 	bgt.w	24e7a <_vfiprintf_r+0x84e>
   24acc:	9a04      	ldr	r2, [sp, #16]
   24ace:	f8c9 4000 	str.w	r4, [r9]
   24ad2:	4413      	add	r3, r2
   24ad4:	2907      	cmp	r1, #7
   24ad6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   24ada:	f8c9 2004 	str.w	r2, [r9, #4]
   24ade:	f340 816e 	ble.w	24dbe <_vfiprintf_r+0x792>
   24ae2:	2b00      	cmp	r3, #0
   24ae4:	f000 8275 	beq.w	24fd2 <_vfiprintf_r+0x9a6>
   24ae8:	ee18 1a10 	vmov	r1, s16
   24aec:	aa18      	add	r2, sp, #96	; 0x60
   24aee:	4658      	mov	r0, fp
   24af0:	f7ff fd60 	bl	245b4 <__sprint_r.part.0>
   24af4:	2800      	cmp	r0, #0
   24af6:	f47f af70 	bne.w	249da <_vfiprintf_r+0x3ae>
   24afa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   24afc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24b00:	0775      	lsls	r5, r6, #29
   24b02:	d505      	bpl.n	24b10 <_vfiprintf_r+0x4e4>
   24b04:	9a06      	ldr	r2, [sp, #24]
   24b06:	9903      	ldr	r1, [sp, #12]
   24b08:	1a54      	subs	r4, r2, r1
   24b0a:	2c00      	cmp	r4, #0
   24b0c:	f300 826b 	bgt.w	24fe6 <_vfiprintf_r+0x9ba>
   24b10:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   24b14:	9803      	ldr	r0, [sp, #12]
   24b16:	4281      	cmp	r1, r0
   24b18:	bfac      	ite	ge
   24b1a:	1852      	addge	r2, r2, r1
   24b1c:	1812      	addlt	r2, r2, r0
   24b1e:	9205      	str	r2, [sp, #20]
   24b20:	2b00      	cmp	r3, #0
   24b22:	f47f af51 	bne.w	249c8 <_vfiprintf_r+0x39c>
   24b26:	9908      	ldr	r1, [sp, #32]
   24b28:	2300      	movs	r3, #0
   24b2a:	9319      	str	r3, [sp, #100]	; 0x64
   24b2c:	2900      	cmp	r1, #0
   24b2e:	f000 8149 	beq.w	24dc4 <_vfiprintf_r+0x798>
   24b32:	4658      	mov	r0, fp
   24b34:	f7fb fa26 	bl	1ff84 <_free_r>
   24b38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24b3c:	e5c1      	b.n	246c2 <_vfiprintf_r+0x96>
   24b3e:	059c      	lsls	r4, r3, #22
   24b40:	f53f af5d 	bmi.w	249fe <_vfiprintf_r+0x3d2>
   24b44:	ee18 4a10 	vmov	r4, s16
   24b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24b4a:	f7fb f90f 	bl	1fd6c <__retarget_lock_release_recursive>
   24b4e:	89a2      	ldrh	r2, [r4, #12]
   24b50:	e755      	b.n	249fe <_vfiprintf_r+0x3d2>
   24b52:	06f0      	lsls	r0, r6, #27
   24b54:	9a07      	ldr	r2, [sp, #28]
   24b56:	f100 831f 	bmi.w	25198 <_vfiprintf_r+0xb6c>
   24b5a:	0671      	lsls	r1, r6, #25
   24b5c:	f140 8319 	bpl.w	25192 <_vfiprintf_r+0xb66>
   24b60:	f932 3b04 	ldrsh.w	r3, [r2], #4
   24b64:	9207      	str	r2, [sp, #28]
   24b66:	17da      	asrs	r2, r3, #31
   24b68:	4611      	mov	r1, r2
   24b6a:	e66e      	b.n	2484a <_vfiprintf_r+0x21e>
   24b6c:	f016 0310 	ands.w	r3, r6, #16
   24b70:	9907      	ldr	r1, [sp, #28]
   24b72:	f040 8309 	bne.w	25188 <_vfiprintf_r+0xb5c>
   24b76:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   24b7a:	f000 8301 	beq.w	25180 <_vfiprintf_r+0xb54>
   24b7e:	461a      	mov	r2, r3
   24b80:	f851 3b04 	ldr.w	r3, [r1], #4
   24b84:	9107      	str	r1, [sp, #28]
   24b86:	b29b      	uxth	r3, r3
   24b88:	e6c3      	b.n	24912 <_vfiprintf_r+0x2e6>
   24b8a:	9b07      	ldr	r3, [sp, #28]
   24b8c:	461a      	mov	r2, r3
   24b8e:	2300      	movs	r3, #0
   24b90:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   24b94:	4613      	mov	r3, r2
   24b96:	f853 4b04 	ldr.w	r4, [r3], #4
   24b9a:	9303      	str	r3, [sp, #12]
   24b9c:	2c00      	cmp	r4, #0
   24b9e:	f000 8412 	beq.w	253c6 <_vfiprintf_r+0xd9a>
   24ba2:	2953      	cmp	r1, #83	; 0x53
   24ba4:	f000 8365 	beq.w	25272 <_vfiprintf_r+0xc46>
   24ba8:	f016 0510 	ands.w	r5, r6, #16
   24bac:	f040 8361 	bne.w	25272 <_vfiprintf_r+0xc46>
   24bb0:	1c7b      	adds	r3, r7, #1
   24bb2:	f000 84b3 	beq.w	2551c <_vfiprintf_r+0xef0>
   24bb6:	463a      	mov	r2, r7
   24bb8:	4629      	mov	r1, r5
   24bba:	4620      	mov	r0, r4
   24bbc:	f7fe fc40 	bl	23440 <memchr>
   24bc0:	9008      	str	r0, [sp, #32]
   24bc2:	2800      	cmp	r0, #0
   24bc4:	f000 849f 	beq.w	25506 <_vfiprintf_r+0xeda>
   24bc8:	1b03      	subs	r3, r0, r4
   24bca:	9a03      	ldr	r2, [sp, #12]
   24bcc:	9304      	str	r3, [sp, #16]
   24bce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24bd2:	462f      	mov	r7, r5
   24bd4:	9207      	str	r2, [sp, #28]
   24bd6:	9303      	str	r3, [sp, #12]
   24bd8:	9508      	str	r5, [sp, #32]
   24bda:	e657      	b.n	2488c <_vfiprintf_r+0x260>
   24bdc:	2943      	cmp	r1, #67	; 0x43
   24bde:	d002      	beq.n	24be6 <_vfiprintf_r+0x5ba>
   24be0:	06f5      	lsls	r5, r6, #27
   24be2:	f140 832d 	bpl.w	25240 <_vfiprintf_r+0xc14>
   24be6:	9d07      	ldr	r5, [sp, #28]
   24be8:	2208      	movs	r2, #8
   24bea:	2100      	movs	r1, #0
   24bec:	a816      	add	r0, sp, #88	; 0x58
   24bee:	ac2b      	add	r4, sp, #172	; 0xac
   24bf0:	f7fa fafe 	bl	1f1f0 <memset>
   24bf4:	ab16      	add	r3, sp, #88	; 0x58
   24bf6:	f855 2b04 	ldr.w	r2, [r5], #4
   24bfa:	4621      	mov	r1, r4
   24bfc:	4658      	mov	r0, fp
   24bfe:	f7fe fc6f 	bl	234e0 <_wcrtomb_r>
   24c02:	4603      	mov	r3, r0
   24c04:	3301      	adds	r3, #1
   24c06:	9004      	str	r0, [sp, #16]
   24c08:	f000 84b3 	beq.w	25572 <_vfiprintf_r+0xf46>
   24c0c:	9b04      	ldr	r3, [sp, #16]
   24c0e:	9507      	str	r5, [sp, #28]
   24c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24c14:	9303      	str	r3, [sp, #12]
   24c16:	2300      	movs	r3, #0
   24c18:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   24c1c:	e703      	b.n	24a26 <_vfiprintf_r+0x3fa>
   24c1e:	9b07      	ldr	r3, [sp, #28]
   24c20:	f853 2b04 	ldr.w	r2, [r3], #4
   24c24:	9206      	str	r2, [sp, #24]
   24c26:	2a00      	cmp	r2, #0
   24c28:	f280 829c 	bge.w	25164 <_vfiprintf_r+0xb38>
   24c2c:	9a06      	ldr	r2, [sp, #24]
   24c2e:	4252      	negs	r2, r2
   24c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
   24c34:	f898 1000 	ldrb.w	r1, [r8]
   24c38:	f046 0604 	orr.w	r6, r6, #4
   24c3c:	e569      	b.n	24712 <_vfiprintf_r+0xe6>
   24c3e:	f898 1000 	ldrb.w	r1, [r8]
   24c42:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   24c46:	e564      	b.n	24712 <_vfiprintf_r+0xe6>
   24c48:	f898 1000 	ldrb.w	r1, [r8]
   24c4c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   24c50:	e55f      	b.n	24712 <_vfiprintf_r+0xe6>
   24c52:	4642      	mov	r2, r8
   24c54:	f812 1b01 	ldrb.w	r1, [r2], #1
   24c58:	292a      	cmp	r1, #42	; 0x2a
   24c5a:	f000 8496 	beq.w	2558a <_vfiprintf_r+0xf5e>
   24c5e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   24c62:	2b09      	cmp	r3, #9
   24c64:	4690      	mov	r8, r2
   24c66:	f04f 0700 	mov.w	r7, #0
   24c6a:	f63f ad54 	bhi.w	24716 <_vfiprintf_r+0xea>
   24c6e:	f818 1b01 	ldrb.w	r1, [r8], #1
   24c72:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   24c76:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   24c7a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   24c7e:	2b09      	cmp	r3, #9
   24c80:	d9f5      	bls.n	24c6e <_vfiprintf_r+0x642>
   24c82:	e548      	b.n	24716 <_vfiprintf_r+0xea>
   24c84:	f898 1000 	ldrb.w	r1, [r8]
   24c88:	f046 0601 	orr.w	r6, r6, #1
   24c8c:	e541      	b.n	24712 <_vfiprintf_r+0xe6>
   24c8e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   24c92:	2b00      	cmp	r3, #0
   24c94:	f47f adc2 	bne.w	2481c <_vfiprintf_r+0x1f0>
   24c98:	2320      	movs	r3, #32
   24c9a:	f898 1000 	ldrb.w	r1, [r8]
   24c9e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   24ca2:	e536      	b.n	24712 <_vfiprintf_r+0xe6>
   24ca4:	f898 1000 	ldrb.w	r1, [r8]
   24ca8:	296c      	cmp	r1, #108	; 0x6c
   24caa:	bf03      	ittte	eq
   24cac:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   24cb0:	f046 0620 	orreq.w	r6, r6, #32
   24cb4:	f108 0801 	addeq.w	r8, r8, #1
   24cb8:	f046 0610 	orrne.w	r6, r6, #16
   24cbc:	e529      	b.n	24712 <_vfiprintf_r+0xe6>
   24cbe:	f898 1000 	ldrb.w	r1, [r8]
   24cc2:	2968      	cmp	r1, #104	; 0x68
   24cc4:	bf03      	ittte	eq
   24cc6:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   24cca:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   24cce:	f108 0801 	addeq.w	r8, r8, #1
   24cd2:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   24cd6:	e51c      	b.n	24712 <_vfiprintf_r+0xe6>
   24cd8:	f046 0310 	orr.w	r3, r6, #16
   24cdc:	9303      	str	r3, [sp, #12]
   24cde:	9b03      	ldr	r3, [sp, #12]
   24ce0:	f013 0220 	ands.w	r2, r3, #32
   24ce4:	f000 8206 	beq.w	250f4 <_vfiprintf_r+0xac8>
   24ce8:	9b07      	ldr	r3, [sp, #28]
   24cea:	3307      	adds	r3, #7
   24cec:	f023 0307 	bic.w	r3, r3, #7
   24cf0:	4619      	mov	r1, r3
   24cf2:	685a      	ldr	r2, [r3, #4]
   24cf4:	f851 3b08 	ldr.w	r3, [r1], #8
   24cf8:	9107      	str	r1, [sp, #28]
   24cfa:	2101      	movs	r1, #1
   24cfc:	e60d      	b.n	2491a <_vfiprintf_r+0x2ee>
   24cfe:	9a07      	ldr	r2, [sp, #28]
   24d00:	f046 0302 	orr.w	r3, r6, #2
   24d04:	9303      	str	r3, [sp, #12]
   24d06:	f852 3b04 	ldr.w	r3, [r2], #4
   24d0a:	9207      	str	r2, [sp, #28]
   24d0c:	f647 0230 	movw	r2, #30768	; 0x7830
   24d10:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   24d14:	4ab8      	ldr	r2, [pc, #736]	; (24ff8 <_vfiprintf_r+0x9cc>)
   24d16:	920c      	str	r2, [sp, #48]	; 0x30
   24d18:	2102      	movs	r1, #2
   24d1a:	2200      	movs	r2, #0
   24d1c:	e5fd      	b.n	2491a <_vfiprintf_r+0x2ee>
   24d1e:	06b7      	lsls	r7, r6, #26
   24d20:	f100 8248 	bmi.w	251b4 <_vfiprintf_r+0xb88>
   24d24:	06f5      	lsls	r5, r6, #27
   24d26:	f100 8346 	bmi.w	253b6 <_vfiprintf_r+0xd8a>
   24d2a:	0674      	lsls	r4, r6, #25
   24d2c:	f100 83d5 	bmi.w	254da <_vfiprintf_r+0xeae>
   24d30:	05b0      	lsls	r0, r6, #22
   24d32:	f140 8340 	bpl.w	253b6 <_vfiprintf_r+0xd8a>
   24d36:	9b07      	ldr	r3, [sp, #28]
   24d38:	9905      	ldr	r1, [sp, #20]
   24d3a:	f853 2b04 	ldr.w	r2, [r3], #4
   24d3e:	9307      	str	r3, [sp, #28]
   24d40:	7011      	strb	r1, [r2, #0]
   24d42:	e4be      	b.n	246c2 <_vfiprintf_r+0x96>
   24d44:	9603      	str	r6, [sp, #12]
   24d46:	2901      	cmp	r1, #1
   24d48:	f43f ad8c 	beq.w	24864 <_vfiprintf_r+0x238>
   24d4c:	2902      	cmp	r1, #2
   24d4e:	ac44      	add	r4, sp, #272	; 0x110
   24d50:	d111      	bne.n	24d76 <_vfiprintf_r+0x74a>
   24d52:	980c      	ldr	r0, [sp, #48]	; 0x30
   24d54:	f003 010f 	and.w	r1, r3, #15
   24d58:	091b      	lsrs	r3, r3, #4
   24d5a:	5c41      	ldrb	r1, [r0, r1]
   24d5c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   24d60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   24d64:	0912      	lsrs	r2, r2, #4
   24d66:	ea53 0102 	orrs.w	r1, r3, r2
   24d6a:	d1f3      	bne.n	24d54 <_vfiprintf_r+0x728>
   24d6c:	9e03      	ldr	r6, [sp, #12]
   24d6e:	ab44      	add	r3, sp, #272	; 0x110
   24d70:	1b1b      	subs	r3, r3, r4
   24d72:	9304      	str	r3, [sp, #16]
   24d74:	e583      	b.n	2487e <_vfiprintf_r+0x252>
   24d76:	f003 0107 	and.w	r1, r3, #7
   24d7a:	08db      	lsrs	r3, r3, #3
   24d7c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   24d80:	08d2      	lsrs	r2, r2, #3
   24d82:	3130      	adds	r1, #48	; 0x30
   24d84:	ea53 0502 	orrs.w	r5, r3, r2
   24d88:	4620      	mov	r0, r4
   24d8a:	f804 1d01 	strb.w	r1, [r4, #-1]!
   24d8e:	d1f2      	bne.n	24d76 <_vfiprintf_r+0x74a>
   24d90:	9e03      	ldr	r6, [sp, #12]
   24d92:	07f3      	lsls	r3, r6, #31
   24d94:	d5eb      	bpl.n	24d6e <_vfiprintf_r+0x742>
   24d96:	2930      	cmp	r1, #48	; 0x30
   24d98:	d0e8      	beq.n	24d6c <_vfiprintf_r+0x740>
   24d9a:	2330      	movs	r3, #48	; 0x30
   24d9c:	3802      	subs	r0, #2
   24d9e:	f804 3c01 	strb.w	r3, [r4, #-1]
   24da2:	ab44      	add	r3, sp, #272	; 0x110
   24da4:	1a1b      	subs	r3, r3, r0
   24da6:	9e03      	ldr	r6, [sp, #12]
   24da8:	9304      	str	r3, [sp, #16]
   24daa:	4604      	mov	r4, r0
   24dac:	e567      	b.n	2487e <_vfiprintf_r+0x252>
   24dae:	9b04      	ldr	r3, [sp, #16]
   24db0:	941b      	str	r4, [sp, #108]	; 0x6c
   24db2:	2201      	movs	r2, #1
   24db4:	931c      	str	r3, [sp, #112]	; 0x70
   24db6:	931a      	str	r3, [sp, #104]	; 0x68
   24db8:	9219      	str	r2, [sp, #100]	; 0x64
   24dba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24dbe:	f109 0908 	add.w	r9, r9, #8
   24dc2:	e69d      	b.n	24b00 <_vfiprintf_r+0x4d4>
   24dc4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24dc8:	e47b      	b.n	246c2 <_vfiprintf_r+0x96>
   24dca:	9a06      	ldr	r2, [sp, #24]
   24dcc:	9d03      	ldr	r5, [sp, #12]
   24dce:	1b55      	subs	r5, r2, r5
   24dd0:	2d00      	cmp	r5, #0
   24dd2:	f77f ae76 	ble.w	24ac2 <_vfiprintf_r+0x496>
   24dd6:	2d10      	cmp	r5, #16
   24dd8:	f340 83bb 	ble.w	25552 <_vfiprintf_r+0xf26>
   24ddc:	9409      	str	r4, [sp, #36]	; 0x24
   24dde:	ee18 4a10 	vmov	r4, s16
   24de2:	e007      	b.n	24df4 <_vfiprintf_r+0x7c8>
   24de4:	f100 0c02 	add.w	ip, r0, #2
   24de8:	f109 0908 	add.w	r9, r9, #8
   24dec:	4610      	mov	r0, r2
   24dee:	3d10      	subs	r5, #16
   24df0:	2d10      	cmp	r5, #16
   24df2:	dd1e      	ble.n	24e32 <_vfiprintf_r+0x806>
   24df4:	4981      	ldr	r1, [pc, #516]	; (24ffc <_vfiprintf_r+0x9d0>)
   24df6:	f8c9 1000 	str.w	r1, [r9]
   24dfa:	1c42      	adds	r2, r0, #1
   24dfc:	3310      	adds	r3, #16
   24dfe:	2110      	movs	r1, #16
   24e00:	2a07      	cmp	r2, #7
   24e02:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   24e06:	f8c9 1004 	str.w	r1, [r9, #4]
   24e0a:	ddeb      	ble.n	24de4 <_vfiprintf_r+0x7b8>
   24e0c:	aa18      	add	r2, sp, #96	; 0x60
   24e0e:	2b00      	cmp	r3, #0
   24e10:	d074      	beq.n	24efc <_vfiprintf_r+0x8d0>
   24e12:	4621      	mov	r1, r4
   24e14:	4658      	mov	r0, fp
   24e16:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24e1a:	f7ff fbcb 	bl	245b4 <__sprint_r.part.0>
   24e1e:	2800      	cmp	r0, #0
   24e20:	f47f addb 	bne.w	249da <_vfiprintf_r+0x3ae>
   24e24:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24e28:	3d10      	subs	r5, #16
   24e2a:	2d10      	cmp	r5, #16
   24e2c:	f100 0c01 	add.w	ip, r0, #1
   24e30:	dce0      	bgt.n	24df4 <_vfiprintf_r+0x7c8>
   24e32:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24e34:	4a71      	ldr	r2, [pc, #452]	; (24ffc <_vfiprintf_r+0x9d0>)
   24e36:	f8c9 5004 	str.w	r5, [r9, #4]
   24e3a:	442b      	add	r3, r5
   24e3c:	f1bc 0f07 	cmp.w	ip, #7
   24e40:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   24e44:	f8c9 2000 	str.w	r2, [r9]
   24e48:	f340 8194 	ble.w	25174 <_vfiprintf_r+0xb48>
   24e4c:	2b00      	cmp	r3, #0
   24e4e:	f000 831f 	beq.w	25490 <_vfiprintf_r+0xe64>
   24e52:	ee18 1a10 	vmov	r1, s16
   24e56:	aa18      	add	r2, sp, #96	; 0x60
   24e58:	4658      	mov	r0, fp
   24e5a:	f7ff fbab 	bl	245b4 <__sprint_r.part.0>
   24e5e:	2800      	cmp	r0, #0
   24e60:	f47f adbb 	bne.w	249da <_vfiprintf_r+0x3ae>
   24e64:	9a04      	ldr	r2, [sp, #16]
   24e66:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24e6a:	1abd      	subs	r5, r7, r2
   24e6c:	2d00      	cmp	r5, #0
   24e6e:	f100 0101 	add.w	r1, r0, #1
   24e72:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24e76:	f77f ae29 	ble.w	24acc <_vfiprintf_r+0x4a0>
   24e7a:	2d10      	cmp	r5, #16
   24e7c:	dd29      	ble.n	24ed2 <_vfiprintf_r+0x8a6>
   24e7e:	9409      	str	r4, [sp, #36]	; 0x24
   24e80:	2710      	movs	r7, #16
   24e82:	ee18 4a10 	vmov	r4, s16
   24e86:	e007      	b.n	24e98 <_vfiprintf_r+0x86c>
   24e88:	f100 0c02 	add.w	ip, r0, #2
   24e8c:	f109 0908 	add.w	r9, r9, #8
   24e90:	4610      	mov	r0, r2
   24e92:	3d10      	subs	r5, #16
   24e94:	2d10      	cmp	r5, #16
   24e96:	dd1a      	ble.n	24ece <_vfiprintf_r+0x8a2>
   24e98:	1c42      	adds	r2, r0, #1
   24e9a:	4958      	ldr	r1, [pc, #352]	; (24ffc <_vfiprintf_r+0x9d0>)
   24e9c:	3310      	adds	r3, #16
   24e9e:	2a07      	cmp	r2, #7
   24ea0:	e9c9 1700 	strd	r1, r7, [r9]
   24ea4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   24ea8:	ddee      	ble.n	24e88 <_vfiprintf_r+0x85c>
   24eaa:	aa18      	add	r2, sp, #96	; 0x60
   24eac:	b303      	cbz	r3, 24ef0 <_vfiprintf_r+0x8c4>
   24eae:	4621      	mov	r1, r4
   24eb0:	4658      	mov	r0, fp
   24eb2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24eb6:	f7ff fb7d 	bl	245b4 <__sprint_r.part.0>
   24eba:	2800      	cmp	r0, #0
   24ebc:	f47f ad8d 	bne.w	249da <_vfiprintf_r+0x3ae>
   24ec0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24ec4:	3d10      	subs	r5, #16
   24ec6:	2d10      	cmp	r5, #16
   24ec8:	f100 0c01 	add.w	ip, r0, #1
   24ecc:	dce4      	bgt.n	24e98 <_vfiprintf_r+0x86c>
   24ece:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24ed0:	4661      	mov	r1, ip
   24ed2:	4a4a      	ldr	r2, [pc, #296]	; (24ffc <_vfiprintf_r+0x9d0>)
   24ed4:	f8c9 5004 	str.w	r5, [r9, #4]
   24ed8:	442b      	add	r3, r5
   24eda:	2907      	cmp	r1, #7
   24edc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   24ee0:	f8c9 2000 	str.w	r2, [r9]
   24ee4:	f300 80e7 	bgt.w	250b6 <_vfiprintf_r+0xa8a>
   24ee8:	f109 0908 	add.w	r9, r9, #8
   24eec:	3101      	adds	r1, #1
   24eee:	e5ed      	b.n	24acc <_vfiprintf_r+0x4a0>
   24ef0:	f04f 0c01 	mov.w	ip, #1
   24ef4:	4618      	mov	r0, r3
   24ef6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24efa:	e7ca      	b.n	24e92 <_vfiprintf_r+0x866>
   24efc:	f04f 0c01 	mov.w	ip, #1
   24f00:	4618      	mov	r0, r3
   24f02:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24f06:	e772      	b.n	24dee <_vfiprintf_r+0x7c2>
   24f08:	2b00      	cmp	r3, #0
   24f0a:	f000 8104 	beq.w	25116 <_vfiprintf_r+0xaea>
   24f0e:	ee18 1a10 	vmov	r1, s16
   24f12:	aa18      	add	r2, sp, #96	; 0x60
   24f14:	4658      	mov	r0, fp
   24f16:	f7ff fb4d 	bl	245b4 <__sprint_r.part.0>
   24f1a:	2800      	cmp	r0, #0
   24f1c:	f47f ad5d 	bne.w	249da <_vfiprintf_r+0x3ae>
   24f20:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24f24:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24f28:	1c41      	adds	r1, r0, #1
   24f2a:	e5a7      	b.n	24a7c <_vfiprintf_r+0x450>
   24f2c:	2302      	movs	r3, #2
   24f2e:	aa11      	add	r2, sp, #68	; 0x44
   24f30:	931c      	str	r3, [sp, #112]	; 0x70
   24f32:	921b      	str	r2, [sp, #108]	; 0x6c
   24f34:	2101      	movs	r1, #1
   24f36:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24f3a:	4608      	mov	r0, r1
   24f3c:	f109 0908 	add.w	r9, r9, #8
   24f40:	1c41      	adds	r1, r0, #1
   24f42:	e5ba      	b.n	24aba <_vfiprintf_r+0x48e>
   24f44:	2d10      	cmp	r5, #16
   24f46:	f340 82e5 	ble.w	25514 <_vfiprintf_r+0xee8>
   24f4a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   24f4e:	940f      	str	r4, [sp, #60]	; 0x3c
   24f50:	4608      	mov	r0, r1
   24f52:	ee18 4a10 	vmov	r4, s16
   24f56:	e007      	b.n	24f68 <_vfiprintf_r+0x93c>
   24f58:	f100 0c02 	add.w	ip, r0, #2
   24f5c:	f109 0908 	add.w	r9, r9, #8
   24f60:	4610      	mov	r0, r2
   24f62:	3d10      	subs	r5, #16
   24f64:	2d10      	cmp	r5, #16
   24f66:	dd1d      	ble.n	24fa4 <_vfiprintf_r+0x978>
   24f68:	4925      	ldr	r1, [pc, #148]	; (25000 <_vfiprintf_r+0x9d4>)
   24f6a:	f8c9 1000 	str.w	r1, [r9]
   24f6e:	1c42      	adds	r2, r0, #1
   24f70:	3310      	adds	r3, #16
   24f72:	2110      	movs	r1, #16
   24f74:	2a07      	cmp	r2, #7
   24f76:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   24f7a:	f8c9 1004 	str.w	r1, [r9, #4]
   24f7e:	ddeb      	ble.n	24f58 <_vfiprintf_r+0x92c>
   24f80:	aa18      	add	r2, sp, #96	; 0x60
   24f82:	b303      	cbz	r3, 24fc6 <_vfiprintf_r+0x99a>
   24f84:	4621      	mov	r1, r4
   24f86:	4658      	mov	r0, fp
   24f88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24f8c:	f7ff fb12 	bl	245b4 <__sprint_r.part.0>
   24f90:	2800      	cmp	r0, #0
   24f92:	f47f ad22 	bne.w	249da <_vfiprintf_r+0x3ae>
   24f96:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   24f9a:	3d10      	subs	r5, #16
   24f9c:	2d10      	cmp	r5, #16
   24f9e:	f100 0c01 	add.w	ip, r0, #1
   24fa2:	dce1      	bgt.n	24f68 <_vfiprintf_r+0x93c>
   24fa4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   24fa6:	4660      	mov	r0, ip
   24fa8:	4a15      	ldr	r2, [pc, #84]	; (25000 <_vfiprintf_r+0x9d4>)
   24faa:	f8c9 5004 	str.w	r5, [r9, #4]
   24fae:	442b      	add	r3, r5
   24fb0:	2807      	cmp	r0, #7
   24fb2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   24fb6:	f8c9 2000 	str.w	r2, [r9]
   24fba:	f300 80c1 	bgt.w	25140 <_vfiprintf_r+0xb14>
   24fbe:	f109 0908 	add.w	r9, r9, #8
   24fc2:	1c41      	adds	r1, r0, #1
   24fc4:	e546      	b.n	24a54 <_vfiprintf_r+0x428>
   24fc6:	4618      	mov	r0, r3
   24fc8:	f04f 0c01 	mov.w	ip, #1
   24fcc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24fd0:	e7c7      	b.n	24f62 <_vfiprintf_r+0x936>
   24fd2:	0776      	lsls	r6, r6, #29
   24fd4:	9319      	str	r3, [sp, #100]	; 0x64
   24fd6:	d553      	bpl.n	25080 <_vfiprintf_r+0xa54>
   24fd8:	9a06      	ldr	r2, [sp, #24]
   24fda:	9903      	ldr	r1, [sp, #12]
   24fdc:	1a54      	subs	r4, r2, r1
   24fde:	2c00      	cmp	r4, #0
   24fe0:	dd4e      	ble.n	25080 <_vfiprintf_r+0xa54>
   24fe2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   24fe6:	2c10      	cmp	r4, #16
   24fe8:	f340 82b0 	ble.w	2554c <_vfiprintf_r+0xf20>
   24fec:	9919      	ldr	r1, [sp, #100]	; 0x64
   24fee:	ee18 6a10 	vmov	r6, s16
   24ff2:	2510      	movs	r5, #16
   24ff4:	e00d      	b.n	25012 <_vfiprintf_r+0x9e6>
   24ff6:	bf00      	nop
   24ff8:	20002b38 	.word	0x20002b38
   24ffc:	20003524 	.word	0x20003524
   25000:	20002b78 	.word	0x20002b78
   25004:	1c88      	adds	r0, r1, #2
   25006:	f109 0908 	add.w	r9, r9, #8
   2500a:	4611      	mov	r1, r2
   2500c:	3c10      	subs	r4, #16
   2500e:	2c10      	cmp	r4, #16
   25010:	dd1a      	ble.n	25048 <_vfiprintf_r+0xa1c>
   25012:	1c4a      	adds	r2, r1, #1
   25014:	48b3      	ldr	r0, [pc, #716]	; (252e4 <_vfiprintf_r+0xcb8>)
   25016:	3310      	adds	r3, #16
   25018:	2a07      	cmp	r2, #7
   2501a:	e9c9 0500 	strd	r0, r5, [r9]
   2501e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   25022:	ddef      	ble.n	25004 <_vfiprintf_r+0x9d8>
   25024:	aa18      	add	r2, sp, #96	; 0x60
   25026:	b333      	cbz	r3, 25076 <_vfiprintf_r+0xa4a>
   25028:	4631      	mov	r1, r6
   2502a:	4658      	mov	r0, fp
   2502c:	f7ff fac2 	bl	245b4 <__sprint_r.part.0>
   25030:	2800      	cmp	r0, #0
   25032:	f47f acd2 	bne.w	249da <_vfiprintf_r+0x3ae>
   25036:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   2503a:	3c10      	subs	r4, #16
   2503c:	2c10      	cmp	r4, #16
   2503e:	f101 0001 	add.w	r0, r1, #1
   25042:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   25046:	dce4      	bgt.n	25012 <_vfiprintf_r+0x9e6>
   25048:	4aa6      	ldr	r2, [pc, #664]	; (252e4 <_vfiprintf_r+0xcb8>)
   2504a:	f8c9 4004 	str.w	r4, [r9, #4]
   2504e:	4423      	add	r3, r4
   25050:	2807      	cmp	r0, #7
   25052:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   25056:	f8c9 2000 	str.w	r2, [r9]
   2505a:	f77f ad59 	ble.w	24b10 <_vfiprintf_r+0x4e4>
   2505e:	b17b      	cbz	r3, 25080 <_vfiprintf_r+0xa54>
   25060:	ee18 1a10 	vmov	r1, s16
   25064:	aa18      	add	r2, sp, #96	; 0x60
   25066:	4658      	mov	r0, fp
   25068:	f7ff faa4 	bl	245b4 <__sprint_r.part.0>
   2506c:	2800      	cmp	r0, #0
   2506e:	f47f acb4 	bne.w	249da <_vfiprintf_r+0x3ae>
   25072:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   25074:	e54c      	b.n	24b10 <_vfiprintf_r+0x4e4>
   25076:	2001      	movs	r0, #1
   25078:	4619      	mov	r1, r3
   2507a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2507e:	e7c5      	b.n	2500c <_vfiprintf_r+0x9e0>
   25080:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   25084:	9903      	ldr	r1, [sp, #12]
   25086:	428a      	cmp	r2, r1
   25088:	bfac      	ite	ge
   2508a:	189b      	addge	r3, r3, r2
   2508c:	185b      	addlt	r3, r3, r1
   2508e:	9305      	str	r3, [sp, #20]
   25090:	e549      	b.n	24b26 <_vfiprintf_r+0x4fa>
   25092:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   25096:	058f      	lsls	r7, r1, #22
   25098:	ee18 3a10 	vmov	r3, s16
   2509c:	b28a      	uxth	r2, r1
   2509e:	f53f aae8 	bmi.w	24672 <_vfiprintf_r+0x46>
   250a2:	ee18 5a10 	vmov	r5, s16
   250a6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   250a8:	f7fa fe5e 	bl	1fd68 <__retarget_lock_acquire_recursive>
   250ac:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   250b0:	b28a      	uxth	r2, r1
   250b2:	f7ff bade 	b.w	24672 <_vfiprintf_r+0x46>
   250b6:	2b00      	cmp	r3, #0
   250b8:	f43f ae79 	beq.w	24dae <_vfiprintf_r+0x782>
   250bc:	ee18 1a10 	vmov	r1, s16
   250c0:	aa18      	add	r2, sp, #96	; 0x60
   250c2:	4658      	mov	r0, fp
   250c4:	f7ff fa76 	bl	245b4 <__sprint_r.part.0>
   250c8:	2800      	cmp	r0, #0
   250ca:	f47f ac86 	bne.w	249da <_vfiprintf_r+0x3ae>
   250ce:	9919      	ldr	r1, [sp, #100]	; 0x64
   250d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   250d2:	3101      	adds	r1, #1
   250d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   250d8:	e4f8      	b.n	24acc <_vfiprintf_r+0x4a0>
   250da:	9219      	str	r2, [sp, #100]	; 0x64
   250dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   250e0:	e45e      	b.n	249a0 <_vfiprintf_r+0x374>
   250e2:	2f00      	cmp	r7, #0
   250e4:	f47f abc3 	bne.w	2486e <_vfiprintf_r+0x242>
   250e8:	9e03      	ldr	r6, [sp, #12]
   250ea:	2700      	movs	r7, #0
   250ec:	9704      	str	r7, [sp, #16]
   250ee:	ac44      	add	r4, sp, #272	; 0x110
   250f0:	f7ff bbc5 	b.w	2487e <_vfiprintf_r+0x252>
   250f4:	9b03      	ldr	r3, [sp, #12]
   250f6:	f013 0310 	ands.w	r3, r3, #16
   250fa:	d154      	bne.n	251a6 <_vfiprintf_r+0xb7a>
   250fc:	9a03      	ldr	r2, [sp, #12]
   250fe:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   25102:	f000 816b 	beq.w	253dc <_vfiprintf_r+0xdb0>
   25106:	9907      	ldr	r1, [sp, #28]
   25108:	461a      	mov	r2, r3
   2510a:	f851 3b04 	ldr.w	r3, [r1], #4
   2510e:	9107      	str	r1, [sp, #28]
   25110:	b29b      	uxth	r3, r3
   25112:	2101      	movs	r1, #1
   25114:	e401      	b.n	2491a <_vfiprintf_r+0x2ee>
   25116:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25118:	2a00      	cmp	r2, #0
   2511a:	d164      	bne.n	251e6 <_vfiprintf_r+0xbba>
   2511c:	4618      	mov	r0, r3
   2511e:	2101      	movs	r1, #1
   25120:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   25124:	e4c9      	b.n	24aba <_vfiprintf_r+0x48e>
   25126:	2101      	movs	r1, #1
   25128:	4618      	mov	r0, r3
   2512a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2512e:	e4c4      	b.n	24aba <_vfiprintf_r+0x48e>
   25130:	425b      	negs	r3, r3
   25132:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   25136:	9603      	str	r6, [sp, #12]
   25138:	202d      	movs	r0, #45	; 0x2d
   2513a:	2101      	movs	r1, #1
   2513c:	f7ff bbee 	b.w	2491c <_vfiprintf_r+0x2f0>
   25140:	2b00      	cmp	r3, #0
   25142:	f000 8088 	beq.w	25256 <_vfiprintf_r+0xc2a>
   25146:	ee18 1a10 	vmov	r1, s16
   2514a:	aa18      	add	r2, sp, #96	; 0x60
   2514c:	4658      	mov	r0, fp
   2514e:	f7ff fa31 	bl	245b4 <__sprint_r.part.0>
   25152:	2800      	cmp	r0, #0
   25154:	f47f ac41 	bne.w	249da <_vfiprintf_r+0x3ae>
   25158:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2515c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   25160:	1c41      	adds	r1, r0, #1
   25162:	e477      	b.n	24a54 <_vfiprintf_r+0x428>
   25164:	f898 1000 	ldrb.w	r1, [r8]
   25168:	9307      	str	r3, [sp, #28]
   2516a:	f7ff bad2 	b.w	24712 <_vfiprintf_r+0xe6>
   2516e:	ac44      	add	r4, sp, #272	; 0x110
   25170:	f7ff bb85 	b.w	2487e <_vfiprintf_r+0x252>
   25174:	f109 0908 	add.w	r9, r9, #8
   25178:	f10c 0101 	add.w	r1, ip, #1
   2517c:	4660      	mov	r0, ip
   2517e:	e4a0      	b.n	24ac2 <_vfiprintf_r+0x496>
   25180:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   25184:	f040 8197 	bne.w	254b6 <_vfiprintf_r+0xe8a>
   25188:	f851 3b04 	ldr.w	r3, [r1], #4
   2518c:	9107      	str	r1, [sp, #28]
   2518e:	f7ff bbc0 	b.w	24912 <_vfiprintf_r+0x2e6>
   25192:	05b3      	lsls	r3, r6, #22
   25194:	f100 8188 	bmi.w	254a8 <_vfiprintf_r+0xe7c>
   25198:	f852 3b04 	ldr.w	r3, [r2], #4
   2519c:	9207      	str	r2, [sp, #28]
   2519e:	17da      	asrs	r2, r3, #31
   251a0:	4611      	mov	r1, r2
   251a2:	f7ff bb52 	b.w	2484a <_vfiprintf_r+0x21e>
   251a6:	9907      	ldr	r1, [sp, #28]
   251a8:	f851 3b04 	ldr.w	r3, [r1], #4
   251ac:	9107      	str	r1, [sp, #28]
   251ae:	2101      	movs	r1, #1
   251b0:	f7ff bbb3 	b.w	2491a <_vfiprintf_r+0x2ee>
   251b4:	9b07      	ldr	r3, [sp, #28]
   251b6:	9805      	ldr	r0, [sp, #20]
   251b8:	f853 1b04 	ldr.w	r1, [r3], #4
   251bc:	9307      	str	r3, [sp, #28]
   251be:	17c2      	asrs	r2, r0, #31
   251c0:	e9c1 0200 	strd	r0, r2, [r1]
   251c4:	f7ff ba7d 	b.w	246c2 <_vfiprintf_r+0x96>
   251c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   251ca:	2b00      	cmp	r3, #0
   251cc:	f43f ab26 	beq.w	2481c <_vfiprintf_r+0x1f0>
   251d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   251d2:	781b      	ldrb	r3, [r3, #0]
   251d4:	2b00      	cmp	r3, #0
   251d6:	f43f ab21 	beq.w	2481c <_vfiprintf_r+0x1f0>
   251da:	f898 1000 	ldrb.w	r1, [r8]
   251de:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   251e2:	f7ff ba96 	b.w	24712 <_vfiprintf_r+0xe6>
   251e6:	2302      	movs	r3, #2
   251e8:	aa11      	add	r2, sp, #68	; 0x44
   251ea:	931c      	str	r3, [sp, #112]	; 0x70
   251ec:	921b      	str	r2, [sp, #108]	; 0x6c
   251ee:	2001      	movs	r0, #1
   251f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   251f4:	e6a2      	b.n	24f3c <_vfiprintf_r+0x910>
   251f6:	9603      	str	r6, [sp, #12]
   251f8:	e571      	b.n	24cde <_vfiprintf_r+0x6b2>
   251fa:	4b3b      	ldr	r3, [pc, #236]	; (252e8 <_vfiprintf_r+0xcbc>)
   251fc:	930c      	str	r3, [sp, #48]	; 0x30
   251fe:	f016 0220 	ands.w	r2, r6, #32
   25202:	d059      	beq.n	252b8 <_vfiprintf_r+0xc8c>
   25204:	9b07      	ldr	r3, [sp, #28]
   25206:	3307      	adds	r3, #7
   25208:	f023 0307 	bic.w	r3, r3, #7
   2520c:	4618      	mov	r0, r3
   2520e:	685a      	ldr	r2, [r3, #4]
   25210:	f850 3b08 	ldr.w	r3, [r0], #8
   25214:	9007      	str	r0, [sp, #28]
   25216:	07f4      	lsls	r4, r6, #31
   25218:	d509      	bpl.n	2522e <_vfiprintf_r+0xc02>
   2521a:	ea53 0002 	orrs.w	r0, r3, r2
   2521e:	d006      	beq.n	2522e <_vfiprintf_r+0xc02>
   25220:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   25224:	2130      	movs	r1, #48	; 0x30
   25226:	f046 0602 	orr.w	r6, r6, #2
   2522a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   2522e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   25232:	9103      	str	r1, [sp, #12]
   25234:	2102      	movs	r1, #2
   25236:	f7ff bb70 	b.w	2491a <_vfiprintf_r+0x2ee>
   2523a:	4b2c      	ldr	r3, [pc, #176]	; (252ec <_vfiprintf_r+0xcc0>)
   2523c:	930c      	str	r3, [sp, #48]	; 0x30
   2523e:	e7de      	b.n	251fe <_vfiprintf_r+0xbd2>
   25240:	9b07      	ldr	r3, [sp, #28]
   25242:	2101      	movs	r1, #1
   25244:	f853 2b04 	ldr.w	r2, [r3], #4
   25248:	9103      	str	r1, [sp, #12]
   2524a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   2524e:	9307      	str	r3, [sp, #28]
   25250:	9104      	str	r1, [sp, #16]
   25252:	ac2b      	add	r4, sp, #172	; 0xac
   25254:	e4df      	b.n	24c16 <_vfiprintf_r+0x5ea>
   25256:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   2525a:	2a00      	cmp	r2, #0
   2525c:	f040 8132 	bne.w	254c4 <_vfiprintf_r+0xe98>
   25260:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25262:	2a00      	cmp	r2, #0
   25264:	f47f ae62 	bne.w	24f2c <_vfiprintf_r+0x900>
   25268:	4618      	mov	r0, r3
   2526a:	2101      	movs	r1, #1
   2526c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   25270:	e427      	b.n	24ac2 <_vfiprintf_r+0x496>
   25272:	2100      	movs	r1, #0
   25274:	2208      	movs	r2, #8
   25276:	a816      	add	r0, sp, #88	; 0x58
   25278:	9413      	str	r4, [sp, #76]	; 0x4c
   2527a:	f7f9 ffb9 	bl	1f1f0 <memset>
   2527e:	1c79      	adds	r1, r7, #1
   25280:	f000 80bc 	beq.w	253fc <_vfiprintf_r+0xdd0>
   25284:	2500      	movs	r5, #0
   25286:	9407      	str	r4, [sp, #28]
   25288:	462c      	mov	r4, r5
   2528a:	e00c      	b.n	252a6 <_vfiprintf_r+0xc7a>
   2528c:	a92b      	add	r1, sp, #172	; 0xac
   2528e:	4658      	mov	r0, fp
   25290:	f7fe f926 	bl	234e0 <_wcrtomb_r>
   25294:	1c42      	adds	r2, r0, #1
   25296:	4420      	add	r0, r4
   25298:	f000 816b 	beq.w	25572 <_vfiprintf_r+0xf46>
   2529c:	42b8      	cmp	r0, r7
   2529e:	dc08      	bgt.n	252b2 <_vfiprintf_r+0xc86>
   252a0:	f000 8170 	beq.w	25584 <_vfiprintf_r+0xf58>
   252a4:	4604      	mov	r4, r0
   252a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   252a8:	5952      	ldr	r2, [r2, r5]
   252aa:	ab16      	add	r3, sp, #88	; 0x58
   252ac:	3504      	adds	r5, #4
   252ae:	2a00      	cmp	r2, #0
   252b0:	d1ec      	bne.n	2528c <_vfiprintf_r+0xc60>
   252b2:	9404      	str	r4, [sp, #16]
   252b4:	9c07      	ldr	r4, [sp, #28]
   252b6:	e0af      	b.n	25418 <_vfiprintf_r+0xdec>
   252b8:	f016 0310 	ands.w	r3, r6, #16
   252bc:	9807      	ldr	r0, [sp, #28]
   252be:	d10c      	bne.n	252da <_vfiprintf_r+0xcae>
   252c0:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   252c4:	d005      	beq.n	252d2 <_vfiprintf_r+0xca6>
   252c6:	461a      	mov	r2, r3
   252c8:	f850 3b04 	ldr.w	r3, [r0], #4
   252cc:	9007      	str	r0, [sp, #28]
   252ce:	b29b      	uxth	r3, r3
   252d0:	e7a1      	b.n	25216 <_vfiprintf_r+0xbea>
   252d2:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   252d6:	f040 80e1 	bne.w	2549c <_vfiprintf_r+0xe70>
   252da:	f850 3b04 	ldr.w	r3, [r0], #4
   252de:	9007      	str	r0, [sp, #28]
   252e0:	e799      	b.n	25216 <_vfiprintf_r+0xbea>
   252e2:	bf00      	nop
   252e4:	20002b78 	.word	0x20002b78
   252e8:	20002b38 	.word	0x20002b38
   252ec:	20002b4c 	.word	0x20002b4c
   252f0:	9903      	ldr	r1, [sp, #12]
   252f2:	9704      	str	r7, [sp, #16]
   252f4:	ac44      	add	r4, sp, #272	; 0x110
   252f6:	469e      	mov	lr, r3
   252f8:	ee08 ba90 	vmov	s17, fp
   252fc:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   25300:	f04f 0c00 	mov.w	ip, #0
   25304:	4623      	mov	r3, r4
   25306:	e006      	b.n	25316 <_vfiprintf_r+0xcea>
   25308:	f1be 0f0a 	cmp.w	lr, #10
   2530c:	f172 0200 	sbcs.w	r2, r2, #0
   25310:	d339      	bcc.n	25386 <_vfiprintf_r+0xd5a>
   25312:	46a6      	mov	lr, r4
   25314:	462a      	mov	r2, r5
   25316:	49a6      	ldr	r1, [pc, #664]	; (255b0 <_vfiprintf_r+0xf84>)
   25318:	eb1e 0002 	adds.w	r0, lr, r2
   2531c:	f140 0000 	adc.w	r0, r0, #0
   25320:	460f      	mov	r7, r1
   25322:	fba1 1400 	umull	r1, r4, r1, r0
   25326:	f024 0103 	bic.w	r1, r4, #3
   2532a:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   2532e:	1a40      	subs	r0, r0, r1
   25330:	ebbe 0100 	subs.w	r1, lr, r0
   25334:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   25338:	f162 0400 	sbc.w	r4, r2, #0
   2533c:	fb05 f501 	mul.w	r5, r5, r1
   25340:	fb07 5504 	mla	r5, r7, r4, r5
   25344:	fba1 4107 	umull	r4, r1, r1, r7
   25348:	440d      	add	r5, r1
   2534a:	2705      	movs	r7, #5
   2534c:	f004 0101 	and.w	r1, r4, #1
   25350:	fba1 1b07 	umull	r1, fp, r1, r7
   25354:	1809      	adds	r1, r1, r0
   25356:	0864      	lsrs	r4, r4, #1
   25358:	3130      	adds	r1, #48	; 0x30
   2535a:	f803 1c01 	strb.w	r1, [r3, #-1]
   2535e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   25362:	f10c 0c01 	add.w	ip, ip, #1
   25366:	3b01      	subs	r3, #1
   25368:	086d      	lsrs	r5, r5, #1
   2536a:	2e00      	cmp	r6, #0
   2536c:	d0cc      	beq.n	25308 <_vfiprintf_r+0xcdc>
   2536e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25370:	7809      	ldrb	r1, [r1, #0]
   25372:	4561      	cmp	r1, ip
   25374:	d1c8      	bne.n	25308 <_vfiprintf_r+0xcdc>
   25376:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   2537a:	d0c5      	beq.n	25308 <_vfiprintf_r+0xcdc>
   2537c:	f1be 0f0a 	cmp.w	lr, #10
   25380:	f172 0200 	sbcs.w	r2, r2, #0
   25384:	d26c      	bcs.n	25460 <_vfiprintf_r+0xe34>
   25386:	461c      	mov	r4, r3
   25388:	ab44      	add	r3, sp, #272	; 0x110
   2538a:	1b1b      	subs	r3, r3, r4
   2538c:	9f04      	ldr	r7, [sp, #16]
   2538e:	9e03      	ldr	r6, [sp, #12]
   25390:	9304      	str	r3, [sp, #16]
   25392:	ee18 ba90 	vmov	fp, s17
   25396:	f7ff ba72 	b.w	2487e <_vfiprintf_r+0x252>
   2539a:	9603      	str	r6, [sp, #12]
   2539c:	f7ff ba62 	b.w	24864 <_vfiprintf_r+0x238>
   253a0:	4658      	mov	r0, fp
   253a2:	f7f9 fe5b 	bl	1f05c <__sinit>
   253a6:	f7ff b95b 	b.w	24660 <_vfiprintf_r+0x34>
   253aa:	2901      	cmp	r1, #1
   253ac:	9603      	str	r6, [sp, #12]
   253ae:	f47f accd 	bne.w	24d4c <_vfiprintf_r+0x720>
   253b2:	f7ff ba5c 	b.w	2486e <_vfiprintf_r+0x242>
   253b6:	9b07      	ldr	r3, [sp, #28]
   253b8:	9905      	ldr	r1, [sp, #20]
   253ba:	f853 2b04 	ldr.w	r2, [r3], #4
   253be:	6011      	str	r1, [r2, #0]
   253c0:	9307      	str	r3, [sp, #28]
   253c2:	f7ff b97e 	b.w	246c2 <_vfiprintf_r+0x96>
   253c6:	2f06      	cmp	r7, #6
   253c8:	463b      	mov	r3, r7
   253ca:	9a03      	ldr	r2, [sp, #12]
   253cc:	4c79      	ldr	r4, [pc, #484]	; (255b4 <_vfiprintf_r+0xf88>)
   253ce:	9207      	str	r2, [sp, #28]
   253d0:	bf28      	it	cs
   253d2:	2306      	movcs	r3, #6
   253d4:	9304      	str	r3, [sp, #16]
   253d6:	9303      	str	r3, [sp, #12]
   253d8:	f7ff bb25 	b.w	24a26 <_vfiprintf_r+0x3fa>
   253dc:	9b03      	ldr	r3, [sp, #12]
   253de:	9907      	ldr	r1, [sp, #28]
   253e0:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   253e4:	bf14      	ite	ne
   253e6:	f851 3b04 	ldrne.w	r3, [r1], #4
   253ea:	f851 3b04 	ldreq.w	r3, [r1], #4
   253ee:	9107      	str	r1, [sp, #28]
   253f0:	bf1c      	itt	ne
   253f2:	4602      	movne	r2, r0
   253f4:	b2db      	uxtbne	r3, r3
   253f6:	2101      	movs	r1, #1
   253f8:	f7ff ba8f 	b.w	2491a <_vfiprintf_r+0x2ee>
   253fc:	ab16      	add	r3, sp, #88	; 0x58
   253fe:	9300      	str	r3, [sp, #0]
   25400:	2300      	movs	r3, #0
   25402:	4619      	mov	r1, r3
   25404:	aa13      	add	r2, sp, #76	; 0x4c
   25406:	4658      	mov	r0, fp
   25408:	f7fe f890 	bl	2352c <_wcsrtombs_r>
   2540c:	4603      	mov	r3, r0
   2540e:	3301      	adds	r3, #1
   25410:	9004      	str	r0, [sp, #16]
   25412:	f000 80ae 	beq.w	25572 <_vfiprintf_r+0xf46>
   25416:	9413      	str	r4, [sp, #76]	; 0x4c
   25418:	9b04      	ldr	r3, [sp, #16]
   2541a:	2b00      	cmp	r3, #0
   2541c:	d030      	beq.n	25480 <_vfiprintf_r+0xe54>
   2541e:	2b63      	cmp	r3, #99	; 0x63
   25420:	dc63      	bgt.n	254ea <_vfiprintf_r+0xebe>
   25422:	2300      	movs	r3, #0
   25424:	9308      	str	r3, [sp, #32]
   25426:	ac2b      	add	r4, sp, #172	; 0xac
   25428:	2208      	movs	r2, #8
   2542a:	2100      	movs	r1, #0
   2542c:	a816      	add	r0, sp, #88	; 0x58
   2542e:	f7f9 fedf 	bl	1f1f0 <memset>
   25432:	9d04      	ldr	r5, [sp, #16]
   25434:	ab16      	add	r3, sp, #88	; 0x58
   25436:	9300      	str	r3, [sp, #0]
   25438:	aa13      	add	r2, sp, #76	; 0x4c
   2543a:	462b      	mov	r3, r5
   2543c:	4621      	mov	r1, r4
   2543e:	4658      	mov	r0, fp
   25440:	f7fe f874 	bl	2352c <_wcsrtombs_r>
   25444:	4285      	cmp	r5, r0
   25446:	f040 80ab 	bne.w	255a0 <_vfiprintf_r+0xf74>
   2544a:	9b03      	ldr	r3, [sp, #12]
   2544c:	9a04      	ldr	r2, [sp, #16]
   2544e:	9307      	str	r3, [sp, #28]
   25450:	2300      	movs	r3, #0
   25452:	54a3      	strb	r3, [r4, r2]
   25454:	461f      	mov	r7, r3
   25456:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2545a:	9303      	str	r3, [sp, #12]
   2545c:	f7ff ba16 	b.w	2488c <_vfiprintf_r+0x260>
   25460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25462:	990d      	ldr	r1, [sp, #52]	; 0x34
   25464:	1a9b      	subs	r3, r3, r2
   25466:	4618      	mov	r0, r3
   25468:	9308      	str	r3, [sp, #32]
   2546a:	f7f9 ffdf 	bl	1f42c <strncpy>
   2546e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25470:	9b08      	ldr	r3, [sp, #32]
   25472:	784a      	ldrb	r2, [r1, #1]
   25474:	b10a      	cbz	r2, 2547a <_vfiprintf_r+0xe4e>
   25476:	3101      	adds	r1, #1
   25478:	910b      	str	r1, [sp, #44]	; 0x2c
   2547a:	f04f 0c00 	mov.w	ip, #0
   2547e:	e748      	b.n	25312 <_vfiprintf_r+0xce6>
   25480:	9b03      	ldr	r3, [sp, #12]
   25482:	9307      	str	r3, [sp, #28]
   25484:	9b04      	ldr	r3, [sp, #16]
   25486:	9303      	str	r3, [sp, #12]
   25488:	461f      	mov	r7, r3
   2548a:	9308      	str	r3, [sp, #32]
   2548c:	f7ff b9fe 	b.w	2488c <_vfiprintf_r+0x260>
   25490:	2101      	movs	r1, #1
   25492:	4618      	mov	r0, r3
   25494:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   25498:	f7ff bb13 	b.w	24ac2 <_vfiprintf_r+0x496>
   2549c:	f850 3b04 	ldr.w	r3, [r0], #4
   254a0:	9007      	str	r0, [sp, #28]
   254a2:	4622      	mov	r2, r4
   254a4:	b2db      	uxtb	r3, r3
   254a6:	e6b6      	b.n	25216 <_vfiprintf_r+0xbea>
   254a8:	f912 3b04 	ldrsb.w	r3, [r2], #4
   254ac:	9207      	str	r2, [sp, #28]
   254ae:	17da      	asrs	r2, r3, #31
   254b0:	4611      	mov	r1, r2
   254b2:	f7ff b9ca 	b.w	2484a <_vfiprintf_r+0x21e>
   254b6:	f851 3b04 	ldr.w	r3, [r1], #4
   254ba:	9107      	str	r1, [sp, #28]
   254bc:	4602      	mov	r2, r0
   254be:	b2db      	uxtb	r3, r3
   254c0:	f7ff ba27 	b.w	24912 <_vfiprintf_r+0x2e6>
   254c4:	2301      	movs	r3, #1
   254c6:	931c      	str	r3, [sp, #112]	; 0x70
   254c8:	2101      	movs	r1, #1
   254ca:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   254ce:	931b      	str	r3, [sp, #108]	; 0x6c
   254d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   254d4:	460b      	mov	r3, r1
   254d6:	f7ff bacd 	b.w	24a74 <_vfiprintf_r+0x448>
   254da:	9b07      	ldr	r3, [sp, #28]
   254dc:	9905      	ldr	r1, [sp, #20]
   254de:	f853 2b04 	ldr.w	r2, [r3], #4
   254e2:	9307      	str	r3, [sp, #28]
   254e4:	8011      	strh	r1, [r2, #0]
   254e6:	f7ff b8ec 	b.w	246c2 <_vfiprintf_r+0x96>
   254ea:	1c59      	adds	r1, r3, #1
   254ec:	4658      	mov	r0, fp
   254ee:	f7f8 f85d 	bl	1d5ac <_malloc_r>
   254f2:	4604      	mov	r4, r0
   254f4:	2800      	cmp	r0, #0
   254f6:	d03c      	beq.n	25572 <_vfiprintf_r+0xf46>
   254f8:	9008      	str	r0, [sp, #32]
   254fa:	e795      	b.n	25428 <_vfiprintf_r+0xdfc>
   254fc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   254fe:	f7fa fc35 	bl	1fd6c <__retarget_lock_release_recursive>
   25502:	f7ff b9e9 	b.w	248d8 <_vfiprintf_r+0x2ac>
   25506:	9b03      	ldr	r3, [sp, #12]
   25508:	9307      	str	r3, [sp, #28]
   2550a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   2550e:	9f08      	ldr	r7, [sp, #32]
   25510:	f7ff b9bc 	b.w	2488c <_vfiprintf_r+0x260>
   25514:	9819      	ldr	r0, [sp, #100]	; 0x64
   25516:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   25518:	3001      	adds	r0, #1
   2551a:	e545      	b.n	24fa8 <_vfiprintf_r+0x97c>
   2551c:	9b03      	ldr	r3, [sp, #12]
   2551e:	9307      	str	r3, [sp, #28]
   25520:	4620      	mov	r0, r4
   25522:	f7fa fc2d 	bl	1fd80 <strlen>
   25526:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2552a:	462f      	mov	r7, r5
   2552c:	9004      	str	r0, [sp, #16]
   2552e:	9303      	str	r3, [sp, #12]
   25530:	9508      	str	r5, [sp, #32]
   25532:	f7ff b9ab 	b.w	2488c <_vfiprintf_r+0x260>
   25536:	ee18 1a10 	vmov	r1, s16
   2553a:	aa18      	add	r2, sp, #96	; 0x60
   2553c:	4658      	mov	r0, fp
   2553e:	f7ff f839 	bl	245b4 <__sprint_r.part.0>
   25542:	2800      	cmp	r0, #0
   25544:	f43f aa36 	beq.w	249b4 <_vfiprintf_r+0x388>
   25548:	f7ff ba4d 	b.w	249e6 <_vfiprintf_r+0x3ba>
   2554c:	9819      	ldr	r0, [sp, #100]	; 0x64
   2554e:	3001      	adds	r0, #1
   25550:	e57a      	b.n	25048 <_vfiprintf_r+0xa1c>
   25552:	468c      	mov	ip, r1
   25554:	e46e      	b.n	24e34 <_vfiprintf_r+0x808>
   25556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   25558:	07d9      	lsls	r1, r3, #31
   2555a:	d405      	bmi.n	25568 <_vfiprintf_r+0xf3c>
   2555c:	89ab      	ldrh	r3, [r5, #12]
   2555e:	059a      	lsls	r2, r3, #22
   25560:	d402      	bmi.n	25568 <_vfiprintf_r+0xf3c>
   25562:	6da8      	ldr	r0, [r5, #88]	; 0x58
   25564:	f7fa fc02 	bl	1fd6c <__retarget_lock_release_recursive>
   25568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2556c:	9305      	str	r3, [sp, #20]
   2556e:	f7ff ba49 	b.w	24a04 <_vfiprintf_r+0x3d8>
   25572:	ee18 2a10 	vmov	r2, s16
   25576:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   2557a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2557e:	8193      	strh	r3, [r2, #12]
   25580:	f7ff ba35 	b.w	249ee <_vfiprintf_r+0x3c2>
   25584:	9c07      	ldr	r4, [sp, #28]
   25586:	9704      	str	r7, [sp, #16]
   25588:	e746      	b.n	25418 <_vfiprintf_r+0xdec>
   2558a:	9b07      	ldr	r3, [sp, #28]
   2558c:	f898 1001 	ldrb.w	r1, [r8, #1]
   25590:	f853 7b04 	ldr.w	r7, [r3], #4
   25594:	9307      	str	r3, [sp, #28]
   25596:	4690      	mov	r8, r2
   25598:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   2559c:	f7ff b8b9 	b.w	24712 <_vfiprintf_r+0xe6>
   255a0:	ee18 2a10 	vmov	r2, s16
   255a4:	8993      	ldrh	r3, [r2, #12]
   255a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   255aa:	8193      	strh	r3, [r2, #12]
   255ac:	f7ff ba15 	b.w	249da <_vfiprintf_r+0x3ae>
   255b0:	cccccccd 	.word	0xcccccccd
   255b4:	20002b60 	.word	0x20002b60

000255b8 <__sbprintf>:
   255b8:	b570      	push	{r4, r5, r6, lr}
   255ba:	460c      	mov	r4, r1
   255bc:	8989      	ldrh	r1, [r1, #12]
   255be:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   255c2:	f021 0102 	bic.w	r1, r1, #2
   255c6:	f8ad 1014 	strh.w	r1, [sp, #20]
   255ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
   255cc:	911b      	str	r1, [sp, #108]	; 0x6c
   255ce:	89e1      	ldrh	r1, [r4, #14]
   255d0:	f8ad 1016 	strh.w	r1, [sp, #22]
   255d4:	69e1      	ldr	r1, [r4, #28]
   255d6:	9109      	str	r1, [sp, #36]	; 0x24
   255d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   255da:	910b      	str	r1, [sp, #44]	; 0x2c
   255dc:	a91c      	add	r1, sp, #112	; 0x70
   255de:	9102      	str	r1, [sp, #8]
   255e0:	9106      	str	r1, [sp, #24]
   255e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   255e6:	4606      	mov	r6, r0
   255e8:	9104      	str	r1, [sp, #16]
   255ea:	9107      	str	r1, [sp, #28]
   255ec:	a818      	add	r0, sp, #96	; 0x60
   255ee:	2100      	movs	r1, #0
   255f0:	e9cd 3200 	strd	r3, r2, [sp]
   255f4:	9108      	str	r1, [sp, #32]
   255f6:	f7fa fbb3 	bl	1fd60 <__retarget_lock_init_recursive>
   255fa:	e9dd 3200 	ldrd	r3, r2, [sp]
   255fe:	a902      	add	r1, sp, #8
   25600:	4630      	mov	r0, r6
   25602:	f7ff f813 	bl	2462c <_vfiprintf_r>
   25606:	1e05      	subs	r5, r0, #0
   25608:	db07      	blt.n	2561a <__sbprintf+0x62>
   2560a:	a902      	add	r1, sp, #8
   2560c:	4630      	mov	r0, r6
   2560e:	f7fd fdbf 	bl	23190 <_fflush_r>
   25612:	2800      	cmp	r0, #0
   25614:	bf18      	it	ne
   25616:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   2561a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2561e:	065b      	lsls	r3, r3, #25
   25620:	d503      	bpl.n	2562a <__sbprintf+0x72>
   25622:	89a3      	ldrh	r3, [r4, #12]
   25624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25628:	81a3      	strh	r3, [r4, #12]
   2562a:	9818      	ldr	r0, [sp, #96]	; 0x60
   2562c:	f7fa fb9a 	bl	1fd64 <__retarget_lock_close_recursive>
   25630:	4628      	mov	r0, r5
   25632:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   25636:	bd70      	pop	{r4, r5, r6, pc}

00025638 <__sfvwrite_r>:
   25638:	6893      	ldr	r3, [r2, #8]
   2563a:	2b00      	cmp	r3, #0
   2563c:	f000 8085 	beq.w	2574a <__sfvwrite_r+0x112>
   25640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25644:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   25648:	460c      	mov	r4, r1
   2564a:	0719      	lsls	r1, r3, #28
   2564c:	4680      	mov	r8, r0
   2564e:	b083      	sub	sp, #12
   25650:	4617      	mov	r7, r2
   25652:	b298      	uxth	r0, r3
   25654:	d525      	bpl.n	256a2 <__sfvwrite_r+0x6a>
   25656:	6923      	ldr	r3, [r4, #16]
   25658:	b31b      	cbz	r3, 256a2 <__sfvwrite_r+0x6a>
   2565a:	f010 0302 	ands.w	r3, r0, #2
   2565e:	683d      	ldr	r5, [r7, #0]
   25660:	d02d      	beq.n	256be <__sfvwrite_r+0x86>
   25662:	f04f 0a00 	mov.w	sl, #0
   25666:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 25928 <__sfvwrite_r+0x2f0>
   2566a:	4656      	mov	r6, sl
   2566c:	46b9      	mov	r9, r7
   2566e:	455e      	cmp	r6, fp
   25670:	4633      	mov	r3, r6
   25672:	4652      	mov	r2, sl
   25674:	bf28      	it	cs
   25676:	465b      	movcs	r3, fp
   25678:	4640      	mov	r0, r8
   2567a:	2e00      	cmp	r6, #0
   2567c:	d052      	beq.n	25724 <__sfvwrite_r+0xec>
   2567e:	69e1      	ldr	r1, [r4, #28]
   25680:	6a67      	ldr	r7, [r4, #36]	; 0x24
   25682:	47b8      	blx	r7
   25684:	2800      	cmp	r0, #0
   25686:	dd56      	ble.n	25736 <__sfvwrite_r+0xfe>
   25688:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2568c:	1a1b      	subs	r3, r3, r0
   2568e:	4482      	add	sl, r0
   25690:	1a36      	subs	r6, r6, r0
   25692:	f8c9 3008 	str.w	r3, [r9, #8]
   25696:	2b00      	cmp	r3, #0
   25698:	d1e9      	bne.n	2566e <__sfvwrite_r+0x36>
   2569a:	2000      	movs	r0, #0
   2569c:	b003      	add	sp, #12
   2569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256a2:	4621      	mov	r1, r4
   256a4:	4640      	mov	r0, r8
   256a6:	f000 f941 	bl	2592c <__swsetup_r>
   256aa:	2800      	cmp	r0, #0
   256ac:	f040 8138 	bne.w	25920 <__sfvwrite_r+0x2e8>
   256b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   256b4:	683d      	ldr	r5, [r7, #0]
   256b6:	b298      	uxth	r0, r3
   256b8:	f010 0302 	ands.w	r3, r0, #2
   256bc:	d1d1      	bne.n	25662 <__sfvwrite_r+0x2a>
   256be:	f010 0901 	ands.w	r9, r0, #1
   256c2:	d144      	bne.n	2574e <__sfvwrite_r+0x116>
   256c4:	464e      	mov	r6, r9
   256c6:	9700      	str	r7, [sp, #0]
   256c8:	b346      	cbz	r6, 2571c <__sfvwrite_r+0xe4>
   256ca:	0582      	lsls	r2, r0, #22
   256cc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   256d0:	f140 8085 	bpl.w	257de <__sfvwrite_r+0x1a6>
   256d4:	45b3      	cmp	fp, r6
   256d6:	465a      	mov	r2, fp
   256d8:	f200 80b4 	bhi.w	25844 <__sfvwrite_r+0x20c>
   256dc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   256e0:	f040 80c1 	bne.w	25866 <__sfvwrite_r+0x22e>
   256e4:	6820      	ldr	r0, [r4, #0]
   256e6:	9201      	str	r2, [sp, #4]
   256e8:	4649      	mov	r1, r9
   256ea:	f7f9 fd05 	bl	1f0f8 <memmove>
   256ee:	68a3      	ldr	r3, [r4, #8]
   256f0:	9a01      	ldr	r2, [sp, #4]
   256f2:	eba3 010b 	sub.w	r1, r3, fp
   256f6:	6823      	ldr	r3, [r4, #0]
   256f8:	60a1      	str	r1, [r4, #8]
   256fa:	4413      	add	r3, r2
   256fc:	46b2      	mov	sl, r6
   256fe:	6023      	str	r3, [r4, #0]
   25700:	2600      	movs	r6, #0
   25702:	9a00      	ldr	r2, [sp, #0]
   25704:	6893      	ldr	r3, [r2, #8]
   25706:	eba3 030a 	sub.w	r3, r3, sl
   2570a:	44d1      	add	r9, sl
   2570c:	6093      	str	r3, [r2, #8]
   2570e:	2b00      	cmp	r3, #0
   25710:	d0c3      	beq.n	2569a <__sfvwrite_r+0x62>
   25712:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   25716:	b280      	uxth	r0, r0
   25718:	2e00      	cmp	r6, #0
   2571a:	d1d6      	bne.n	256ca <__sfvwrite_r+0x92>
   2571c:	e9d5 9600 	ldrd	r9, r6, [r5]
   25720:	3508      	adds	r5, #8
   25722:	e7d1      	b.n	256c8 <__sfvwrite_r+0x90>
   25724:	e9d5 a600 	ldrd	sl, r6, [r5]
   25728:	3508      	adds	r5, #8
   2572a:	e7a0      	b.n	2566e <__sfvwrite_r+0x36>
   2572c:	4621      	mov	r1, r4
   2572e:	4640      	mov	r0, r8
   25730:	f7fd fd2e 	bl	23190 <_fflush_r>
   25734:	b388      	cbz	r0, 2579a <__sfvwrite_r+0x162>
   25736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2573a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2573e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25742:	81a3      	strh	r3, [r4, #12]
   25744:	b003      	add	sp, #12
   25746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2574a:	2000      	movs	r0, #0
   2574c:	4770      	bx	lr
   2574e:	461e      	mov	r6, r3
   25750:	46ba      	mov	sl, r7
   25752:	4699      	mov	r9, r3
   25754:	4618      	mov	r0, r3
   25756:	9500      	str	r5, [sp, #0]
   25758:	461f      	mov	r7, r3
   2575a:	b366      	cbz	r6, 257b6 <__sfvwrite_r+0x17e>
   2575c:	2800      	cmp	r0, #0
   2575e:	d032      	beq.n	257c6 <__sfvwrite_r+0x18e>
   25760:	464a      	mov	r2, r9
   25762:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   25766:	6820      	ldr	r0, [r4, #0]
   25768:	68a5      	ldr	r5, [r4, #8]
   2576a:	42b2      	cmp	r2, r6
   2576c:	bf28      	it	cs
   2576e:	4632      	movcs	r2, r6
   25770:	4288      	cmp	r0, r1
   25772:	d904      	bls.n	2577e <__sfvwrite_r+0x146>
   25774:	eb05 0b03 	add.w	fp, r5, r3
   25778:	455a      	cmp	r2, fp
   2577a:	f300 80a7 	bgt.w	258cc <__sfvwrite_r+0x294>
   2577e:	4293      	cmp	r3, r2
   25780:	dc64      	bgt.n	2584c <__sfvwrite_r+0x214>
   25782:	69e1      	ldr	r1, [r4, #28]
   25784:	6a65      	ldr	r5, [r4, #36]	; 0x24
   25786:	463a      	mov	r2, r7
   25788:	4640      	mov	r0, r8
   2578a:	47a8      	blx	r5
   2578c:	f1b0 0b00 	subs.w	fp, r0, #0
   25790:	ddd1      	ble.n	25736 <__sfvwrite_r+0xfe>
   25792:	ebb9 090b 	subs.w	r9, r9, fp
   25796:	d0c9      	beq.n	2572c <__sfvwrite_r+0xf4>
   25798:	2001      	movs	r0, #1
   2579a:	f8da 3008 	ldr.w	r3, [sl, #8]
   2579e:	eba3 030b 	sub.w	r3, r3, fp
   257a2:	445f      	add	r7, fp
   257a4:	eba6 060b 	sub.w	r6, r6, fp
   257a8:	f8ca 3008 	str.w	r3, [sl, #8]
   257ac:	2b00      	cmp	r3, #0
   257ae:	f43f af74 	beq.w	2569a <__sfvwrite_r+0x62>
   257b2:	2e00      	cmp	r6, #0
   257b4:	d1d2      	bne.n	2575c <__sfvwrite_r+0x124>
   257b6:	9a00      	ldr	r2, [sp, #0]
   257b8:	6856      	ldr	r6, [r2, #4]
   257ba:	4613      	mov	r3, r2
   257bc:	3208      	adds	r2, #8
   257be:	9200      	str	r2, [sp, #0]
   257c0:	2e00      	cmp	r6, #0
   257c2:	d0f8      	beq.n	257b6 <__sfvwrite_r+0x17e>
   257c4:	681f      	ldr	r7, [r3, #0]
   257c6:	4632      	mov	r2, r6
   257c8:	210a      	movs	r1, #10
   257ca:	4638      	mov	r0, r7
   257cc:	f7fd fe38 	bl	23440 <memchr>
   257d0:	2800      	cmp	r0, #0
   257d2:	f000 809c 	beq.w	2590e <__sfvwrite_r+0x2d6>
   257d6:	3001      	adds	r0, #1
   257d8:	eba0 0907 	sub.w	r9, r0, r7
   257dc:	e7c0      	b.n	25760 <__sfvwrite_r+0x128>
   257de:	6820      	ldr	r0, [r4, #0]
   257e0:	6923      	ldr	r3, [r4, #16]
   257e2:	4298      	cmp	r0, r3
   257e4:	d816      	bhi.n	25814 <__sfvwrite_r+0x1dc>
   257e6:	6962      	ldr	r2, [r4, #20]
   257e8:	42b2      	cmp	r2, r6
   257ea:	d813      	bhi.n	25814 <__sfvwrite_r+0x1dc>
   257ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   257f0:	42b3      	cmp	r3, r6
   257f2:	bf28      	it	cs
   257f4:	4633      	movcs	r3, r6
   257f6:	69e1      	ldr	r1, [r4, #28]
   257f8:	fb93 f3f2 	sdiv	r3, r3, r2
   257fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   257fe:	fb02 f303 	mul.w	r3, r2, r3
   25802:	4640      	mov	r0, r8
   25804:	464a      	mov	r2, r9
   25806:	47b8      	blx	r7
   25808:	f1b0 0a00 	subs.w	sl, r0, #0
   2580c:	dd93      	ble.n	25736 <__sfvwrite_r+0xfe>
   2580e:	eba6 060a 	sub.w	r6, r6, sl
   25812:	e776      	b.n	25702 <__sfvwrite_r+0xca>
   25814:	45b3      	cmp	fp, r6
   25816:	46da      	mov	sl, fp
   25818:	bf28      	it	cs
   2581a:	46b2      	movcs	sl, r6
   2581c:	4652      	mov	r2, sl
   2581e:	4649      	mov	r1, r9
   25820:	f7f9 fc6a 	bl	1f0f8 <memmove>
   25824:	68a3      	ldr	r3, [r4, #8]
   25826:	6822      	ldr	r2, [r4, #0]
   25828:	eba3 030a 	sub.w	r3, r3, sl
   2582c:	4452      	add	r2, sl
   2582e:	60a3      	str	r3, [r4, #8]
   25830:	6022      	str	r2, [r4, #0]
   25832:	2b00      	cmp	r3, #0
   25834:	d1eb      	bne.n	2580e <__sfvwrite_r+0x1d6>
   25836:	4621      	mov	r1, r4
   25838:	4640      	mov	r0, r8
   2583a:	f7fd fca9 	bl	23190 <_fflush_r>
   2583e:	2800      	cmp	r0, #0
   25840:	d0e5      	beq.n	2580e <__sfvwrite_r+0x1d6>
   25842:	e778      	b.n	25736 <__sfvwrite_r+0xfe>
   25844:	6820      	ldr	r0, [r4, #0]
   25846:	46b3      	mov	fp, r6
   25848:	4632      	mov	r2, r6
   2584a:	e74c      	b.n	256e6 <__sfvwrite_r+0xae>
   2584c:	4639      	mov	r1, r7
   2584e:	9201      	str	r2, [sp, #4]
   25850:	f7f9 fc52 	bl	1f0f8 <memmove>
   25854:	9a01      	ldr	r2, [sp, #4]
   25856:	68a3      	ldr	r3, [r4, #8]
   25858:	1a9b      	subs	r3, r3, r2
   2585a:	60a3      	str	r3, [r4, #8]
   2585c:	6823      	ldr	r3, [r4, #0]
   2585e:	4413      	add	r3, r2
   25860:	6023      	str	r3, [r4, #0]
   25862:	4693      	mov	fp, r2
   25864:	e795      	b.n	25792 <__sfvwrite_r+0x15a>
   25866:	6823      	ldr	r3, [r4, #0]
   25868:	6921      	ldr	r1, [r4, #16]
   2586a:	eba3 0b01 	sub.w	fp, r3, r1
   2586e:	6963      	ldr	r3, [r4, #20]
   25870:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   25874:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   25878:	f10b 0301 	add.w	r3, fp, #1
   2587c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   25880:	4433      	add	r3, r6
   25882:	4553      	cmp	r3, sl
   25884:	4652      	mov	r2, sl
   25886:	bf84      	itt	hi
   25888:	469a      	movhi	sl, r3
   2588a:	4652      	movhi	r2, sl
   2588c:	0543      	lsls	r3, r0, #21
   2588e:	d52c      	bpl.n	258ea <__sfvwrite_r+0x2b2>
   25890:	4611      	mov	r1, r2
   25892:	4640      	mov	r0, r8
   25894:	f7f7 fe8a 	bl	1d5ac <_malloc_r>
   25898:	2800      	cmp	r0, #0
   2589a:	d03b      	beq.n	25914 <__sfvwrite_r+0x2dc>
   2589c:	465a      	mov	r2, fp
   2589e:	6921      	ldr	r1, [r4, #16]
   258a0:	9001      	str	r0, [sp, #4]
   258a2:	f7f2 fe13 	bl	184cc <memcpy>
   258a6:	89a2      	ldrh	r2, [r4, #12]
   258a8:	9b01      	ldr	r3, [sp, #4]
   258aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   258ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   258b2:	81a2      	strh	r2, [r4, #12]
   258b4:	eb03 000b 	add.w	r0, r3, fp
   258b8:	6123      	str	r3, [r4, #16]
   258ba:	ebaa 030b 	sub.w	r3, sl, fp
   258be:	f8c4 a014 	str.w	sl, [r4, #20]
   258c2:	60a3      	str	r3, [r4, #8]
   258c4:	6020      	str	r0, [r4, #0]
   258c6:	46b3      	mov	fp, r6
   258c8:	4632      	mov	r2, r6
   258ca:	e70c      	b.n	256e6 <__sfvwrite_r+0xae>
   258cc:	4639      	mov	r1, r7
   258ce:	465a      	mov	r2, fp
   258d0:	f7f9 fc12 	bl	1f0f8 <memmove>
   258d4:	6823      	ldr	r3, [r4, #0]
   258d6:	445b      	add	r3, fp
   258d8:	6023      	str	r3, [r4, #0]
   258da:	4621      	mov	r1, r4
   258dc:	4640      	mov	r0, r8
   258de:	f7fd fc57 	bl	23190 <_fflush_r>
   258e2:	2800      	cmp	r0, #0
   258e4:	f43f af55 	beq.w	25792 <__sfvwrite_r+0x15a>
   258e8:	e725      	b.n	25736 <__sfvwrite_r+0xfe>
   258ea:	4640      	mov	r0, r8
   258ec:	f7f8 f91a 	bl	1db24 <_realloc_r>
   258f0:	4603      	mov	r3, r0
   258f2:	2800      	cmp	r0, #0
   258f4:	d1de      	bne.n	258b4 <__sfvwrite_r+0x27c>
   258f6:	6921      	ldr	r1, [r4, #16]
   258f8:	4640      	mov	r0, r8
   258fa:	f7fa fb43 	bl	1ff84 <_free_r>
   258fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25902:	220c      	movs	r2, #12
   25904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   25908:	f8c8 2000 	str.w	r2, [r8]
   2590c:	e715      	b.n	2573a <__sfvwrite_r+0x102>
   2590e:	1c72      	adds	r2, r6, #1
   25910:	4691      	mov	r9, r2
   25912:	e726      	b.n	25762 <__sfvwrite_r+0x12a>
   25914:	220c      	movs	r2, #12
   25916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2591a:	f8c8 2000 	str.w	r2, [r8]
   2591e:	e70c      	b.n	2573a <__sfvwrite_r+0x102>
   25920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25924:	e6ba      	b.n	2569c <__sfvwrite_r+0x64>
   25926:	bf00      	nop
   25928:	7ffffc00 	.word	0x7ffffc00

0002592c <__swsetup_r>:
   2592c:	b538      	push	{r3, r4, r5, lr}
   2592e:	4b31      	ldr	r3, [pc, #196]	; (259f4 <__swsetup_r+0xc8>)
   25930:	681b      	ldr	r3, [r3, #0]
   25932:	4605      	mov	r5, r0
   25934:	460c      	mov	r4, r1
   25936:	b113      	cbz	r3, 2593e <__swsetup_r+0x12>
   25938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2593a:	2a00      	cmp	r2, #0
   2593c:	d04e      	beq.n	259dc <__swsetup_r+0xb0>
   2593e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25942:	0718      	lsls	r0, r3, #28
   25944:	b29a      	uxth	r2, r3
   25946:	d51c      	bpl.n	25982 <__swsetup_r+0x56>
   25948:	6921      	ldr	r1, [r4, #16]
   2594a:	b329      	cbz	r1, 25998 <__swsetup_r+0x6c>
   2594c:	f012 0001 	ands.w	r0, r2, #1
   25950:	d007      	beq.n	25962 <__swsetup_r+0x36>
   25952:	2000      	movs	r0, #0
   25954:	60a0      	str	r0, [r4, #8]
   25956:	6960      	ldr	r0, [r4, #20]
   25958:	4240      	negs	r0, r0
   2595a:	61a0      	str	r0, [r4, #24]
   2595c:	b139      	cbz	r1, 2596e <__swsetup_r+0x42>
   2595e:	2000      	movs	r0, #0
   25960:	bd38      	pop	{r3, r4, r5, pc}
   25962:	0795      	lsls	r5, r2, #30
   25964:	bf58      	it	pl
   25966:	6960      	ldrpl	r0, [r4, #20]
   25968:	60a0      	str	r0, [r4, #8]
   2596a:	2900      	cmp	r1, #0
   2596c:	d1f7      	bne.n	2595e <__swsetup_r+0x32>
   2596e:	0612      	lsls	r2, r2, #24
   25970:	bf58      	it	pl
   25972:	4608      	movpl	r0, r1
   25974:	d5f4      	bpl.n	25960 <__swsetup_r+0x34>
   25976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2597a:	81a3      	strh	r3, [r4, #12]
   2597c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25980:	bd38      	pop	{r3, r4, r5, pc}
   25982:	06d1      	lsls	r1, r2, #27
   25984:	d52e      	bpl.n	259e4 <__swsetup_r+0xb8>
   25986:	0752      	lsls	r2, r2, #29
   25988:	d414      	bmi.n	259b4 <__swsetup_r+0x88>
   2598a:	6921      	ldr	r1, [r4, #16]
   2598c:	f043 0308 	orr.w	r3, r3, #8
   25990:	81a3      	strh	r3, [r4, #12]
   25992:	b29a      	uxth	r2, r3
   25994:	2900      	cmp	r1, #0
   25996:	d1d9      	bne.n	2594c <__swsetup_r+0x20>
   25998:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2599c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   259a0:	d0d4      	beq.n	2594c <__swsetup_r+0x20>
   259a2:	4621      	mov	r1, r4
   259a4:	4628      	mov	r0, r5
   259a6:	f000 f947 	bl	25c38 <__smakebuf_r>
   259aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   259ae:	6921      	ldr	r1, [r4, #16]
   259b0:	b29a      	uxth	r2, r3
   259b2:	e7cb      	b.n	2594c <__swsetup_r+0x20>
   259b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   259b6:	b151      	cbz	r1, 259ce <__swsetup_r+0xa2>
   259b8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   259bc:	4291      	cmp	r1, r2
   259be:	d004      	beq.n	259ca <__swsetup_r+0x9e>
   259c0:	4628      	mov	r0, r5
   259c2:	f7fa fadf 	bl	1ff84 <_free_r>
   259c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   259ca:	2200      	movs	r2, #0
   259cc:	6322      	str	r2, [r4, #48]	; 0x30
   259ce:	6921      	ldr	r1, [r4, #16]
   259d0:	2200      	movs	r2, #0
   259d2:	e9c4 1200 	strd	r1, r2, [r4]
   259d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   259da:	e7d7      	b.n	2598c <__swsetup_r+0x60>
   259dc:	4618      	mov	r0, r3
   259de:	f7f9 fb3d 	bl	1f05c <__sinit>
   259e2:	e7ac      	b.n	2593e <__swsetup_r+0x12>
   259e4:	2209      	movs	r2, #9
   259e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   259ea:	602a      	str	r2, [r5, #0]
   259ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   259f0:	81a3      	strh	r3, [r4, #12]
   259f2:	bd38      	pop	{r3, r4, r5, pc}
   259f4:	200043c8 	.word	0x200043c8

000259f8 <__fputwc>:
   259f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   259fc:	b082      	sub	sp, #8
   259fe:	4682      	mov	sl, r0
   25a00:	4688      	mov	r8, r1
   25a02:	4614      	mov	r4, r2
   25a04:	f7f9 ff7c 	bl	1f900 <__locale_mb_cur_max>
   25a08:	2801      	cmp	r0, #1
   25a0a:	d103      	bne.n	25a14 <__fputwc+0x1c>
   25a0c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   25a10:	2bfe      	cmp	r3, #254	; 0xfe
   25a12:	d936      	bls.n	25a82 <__fputwc+0x8a>
   25a14:	f10d 0904 	add.w	r9, sp, #4
   25a18:	4642      	mov	r2, r8
   25a1a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   25a1e:	4649      	mov	r1, r9
   25a20:	4650      	mov	r0, sl
   25a22:	f7fd fd5d 	bl	234e0 <_wcrtomb_r>
   25a26:	1c42      	adds	r2, r0, #1
   25a28:	4606      	mov	r6, r0
   25a2a:	d032      	beq.n	25a92 <__fputwc+0x9a>
   25a2c:	b320      	cbz	r0, 25a78 <__fputwc+0x80>
   25a2e:	f89d c004 	ldrb.w	ip, [sp, #4]
   25a32:	2500      	movs	r5, #0
   25a34:	e009      	b.n	25a4a <__fputwc+0x52>
   25a36:	6823      	ldr	r3, [r4, #0]
   25a38:	1c5a      	adds	r2, r3, #1
   25a3a:	6022      	str	r2, [r4, #0]
   25a3c:	f883 c000 	strb.w	ip, [r3]
   25a40:	3501      	adds	r5, #1
   25a42:	42b5      	cmp	r5, r6
   25a44:	d218      	bcs.n	25a78 <__fputwc+0x80>
   25a46:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   25a4a:	68a3      	ldr	r3, [r4, #8]
   25a4c:	3b01      	subs	r3, #1
   25a4e:	2b00      	cmp	r3, #0
   25a50:	60a3      	str	r3, [r4, #8]
   25a52:	daf0      	bge.n	25a36 <__fputwc+0x3e>
   25a54:	69a7      	ldr	r7, [r4, #24]
   25a56:	42bb      	cmp	r3, r7
   25a58:	4661      	mov	r1, ip
   25a5a:	4622      	mov	r2, r4
   25a5c:	4650      	mov	r0, sl
   25a5e:	db02      	blt.n	25a66 <__fputwc+0x6e>
   25a60:	f1bc 0f0a 	cmp.w	ip, #10
   25a64:	d1e7      	bne.n	25a36 <__fputwc+0x3e>
   25a66:	f000 f953 	bl	25d10 <__swbuf_r>
   25a6a:	1c43      	adds	r3, r0, #1
   25a6c:	d1e8      	bne.n	25a40 <__fputwc+0x48>
   25a6e:	4606      	mov	r6, r0
   25a70:	4630      	mov	r0, r6
   25a72:	b002      	add	sp, #8
   25a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25a78:	4646      	mov	r6, r8
   25a7a:	4630      	mov	r0, r6
   25a7c:	b002      	add	sp, #8
   25a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25a82:	fa5f fc88 	uxtb.w	ip, r8
   25a86:	f88d c004 	strb.w	ip, [sp, #4]
   25a8a:	4606      	mov	r6, r0
   25a8c:	f10d 0904 	add.w	r9, sp, #4
   25a90:	e7cf      	b.n	25a32 <__fputwc+0x3a>
   25a92:	89a3      	ldrh	r3, [r4, #12]
   25a94:	4630      	mov	r0, r6
   25a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25a9a:	81a3      	strh	r3, [r4, #12]
   25a9c:	b002      	add	sp, #8
   25a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25aa2:	bf00      	nop

00025aa4 <_fputwc_r>:
   25aa4:	b530      	push	{r4, r5, lr}
   25aa6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   25aa8:	f013 0f01 	tst.w	r3, #1
   25aac:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   25ab0:	4614      	mov	r4, r2
   25ab2:	b083      	sub	sp, #12
   25ab4:	4605      	mov	r5, r0
   25ab6:	b29a      	uxth	r2, r3
   25ab8:	d101      	bne.n	25abe <_fputwc_r+0x1a>
   25aba:	0598      	lsls	r0, r3, #22
   25abc:	d51c      	bpl.n	25af8 <_fputwc_r+0x54>
   25abe:	0490      	lsls	r0, r2, #18
   25ac0:	d406      	bmi.n	25ad0 <_fputwc_r+0x2c>
   25ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   25ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   25ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   25acc:	81a3      	strh	r3, [r4, #12]
   25ace:	6662      	str	r2, [r4, #100]	; 0x64
   25ad0:	4622      	mov	r2, r4
   25ad2:	4628      	mov	r0, r5
   25ad4:	f7ff ff90 	bl	259f8 <__fputwc>
   25ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25ada:	07da      	lsls	r2, r3, #31
   25adc:	4605      	mov	r5, r0
   25ade:	d402      	bmi.n	25ae6 <_fputwc_r+0x42>
   25ae0:	89a3      	ldrh	r3, [r4, #12]
   25ae2:	059b      	lsls	r3, r3, #22
   25ae4:	d502      	bpl.n	25aec <_fputwc_r+0x48>
   25ae6:	4628      	mov	r0, r5
   25ae8:	b003      	add	sp, #12
   25aea:	bd30      	pop	{r4, r5, pc}
   25aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25aee:	f7fa f93d 	bl	1fd6c <__retarget_lock_release_recursive>
   25af2:	4628      	mov	r0, r5
   25af4:	b003      	add	sp, #12
   25af6:	bd30      	pop	{r4, r5, pc}
   25af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25afa:	9101      	str	r1, [sp, #4]
   25afc:	f7fa f934 	bl	1fd68 <__retarget_lock_acquire_recursive>
   25b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25b04:	9901      	ldr	r1, [sp, #4]
   25b06:	b29a      	uxth	r2, r3
   25b08:	e7d9      	b.n	25abe <_fputwc_r+0x1a>
   25b0a:	bf00      	nop

00025b0c <_wcsnrtombs_l>:
   25b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b10:	b08b      	sub	sp, #44	; 0x2c
   25b12:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   25b16:	9f14      	ldr	r7, [sp, #80]	; 0x50
   25b18:	9103      	str	r1, [sp, #12]
   25b1a:	4681      	mov	r9, r0
   25b1c:	9205      	str	r2, [sp, #20]
   25b1e:	461e      	mov	r6, r3
   25b20:	f1b8 0f00 	cmp.w	r8, #0
   25b24:	d05c      	beq.n	25be0 <_wcsnrtombs_l+0xd4>
   25b26:	9b03      	ldr	r3, [sp, #12]
   25b28:	2b00      	cmp	r3, #0
   25b2a:	d05e      	beq.n	25bea <_wcsnrtombs_l+0xde>
   25b2c:	9b05      	ldr	r3, [sp, #20]
   25b2e:	681d      	ldr	r5, [r3, #0]
   25b30:	2f00      	cmp	r7, #0
   25b32:	d06a      	beq.n	25c0a <_wcsnrtombs_l+0xfe>
   25b34:	1e74      	subs	r4, r6, #1
   25b36:	b34e      	cbz	r6, 25b8c <_wcsnrtombs_l+0x80>
   25b38:	9b03      	ldr	r3, [sp, #12]
   25b3a:	9304      	str	r3, [sp, #16]
   25b3c:	3d04      	subs	r5, #4
   25b3e:	2600      	movs	r6, #0
   25b40:	9501      	str	r5, [sp, #4]
   25b42:	e00b      	b.n	25b5c <_wcsnrtombs_l+0x50>
   25b44:	9b03      	ldr	r3, [sp, #12]
   25b46:	bb2b      	cbnz	r3, 25b94 <_wcsnrtombs_l+0x88>
   25b48:	9b01      	ldr	r3, [sp, #4]
   25b4a:	681a      	ldr	r2, [r3, #0]
   25b4c:	2a00      	cmp	r2, #0
   25b4e:	d03a      	beq.n	25bc6 <_wcsnrtombs_l+0xba>
   25b50:	45bc      	cmp	ip, r7
   25b52:	d25c      	bcs.n	25c0e <_wcsnrtombs_l+0x102>
   25b54:	3c01      	subs	r4, #1
   25b56:	1c63      	adds	r3, r4, #1
   25b58:	4666      	mov	r6, ip
   25b5a:	d017      	beq.n	25b8c <_wcsnrtombs_l+0x80>
   25b5c:	f8d8 3000 	ldr.w	r3, [r8]
   25b60:	9302      	str	r3, [sp, #8]
   25b62:	9b01      	ldr	r3, [sp, #4]
   25b64:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   25b68:	f853 2f04 	ldr.w	r2, [r3, #4]!
   25b6c:	9301      	str	r3, [sp, #4]
   25b6e:	a907      	add	r1, sp, #28
   25b70:	4643      	mov	r3, r8
   25b72:	4648      	mov	r0, r9
   25b74:	f8d8 b004 	ldr.w	fp, [r8, #4]
   25b78:	47a8      	blx	r5
   25b7a:	1c42      	adds	r2, r0, #1
   25b7c:	d03a      	beq.n	25bf4 <_wcsnrtombs_l+0xe8>
   25b7e:	eb00 0c06 	add.w	ip, r0, r6
   25b82:	45bc      	cmp	ip, r7
   25b84:	d9de      	bls.n	25b44 <_wcsnrtombs_l+0x38>
   25b86:	9b02      	ldr	r3, [sp, #8]
   25b88:	e9c8 3b00 	strd	r3, fp, [r8]
   25b8c:	4630      	mov	r0, r6
   25b8e:	b00b      	add	sp, #44	; 0x2c
   25b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b94:	2800      	cmp	r0, #0
   25b96:	dd0e      	ble.n	25bb6 <_wcsnrtombs_l+0xaa>
   25b98:	9b04      	ldr	r3, [sp, #16]
   25b9a:	9d01      	ldr	r5, [sp, #4]
   25b9c:	4418      	add	r0, r3
   25b9e:	1e5a      	subs	r2, r3, #1
   25ba0:	a907      	add	r1, sp, #28
   25ba2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   25ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
   25baa:	f802 3f01 	strb.w	r3, [r2, #1]!
   25bae:	4572      	cmp	r2, lr
   25bb0:	d1f9      	bne.n	25ba6 <_wcsnrtombs_l+0x9a>
   25bb2:	9501      	str	r5, [sp, #4]
   25bb4:	9004      	str	r0, [sp, #16]
   25bb6:	9b05      	ldr	r3, [sp, #20]
   25bb8:	681a      	ldr	r2, [r3, #0]
   25bba:	3204      	adds	r2, #4
   25bbc:	601a      	str	r2, [r3, #0]
   25bbe:	9b01      	ldr	r3, [sp, #4]
   25bc0:	681a      	ldr	r2, [r3, #0]
   25bc2:	2a00      	cmp	r2, #0
   25bc4:	d1c4      	bne.n	25b50 <_wcsnrtombs_l+0x44>
   25bc6:	9b03      	ldr	r3, [sp, #12]
   25bc8:	b10b      	cbz	r3, 25bce <_wcsnrtombs_l+0xc2>
   25bca:	9b05      	ldr	r3, [sp, #20]
   25bcc:	601a      	str	r2, [r3, #0]
   25bce:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   25bd2:	2200      	movs	r2, #0
   25bd4:	4630      	mov	r0, r6
   25bd6:	f8c8 2000 	str.w	r2, [r8]
   25bda:	b00b      	add	sp, #44	; 0x2c
   25bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25be0:	9b03      	ldr	r3, [sp, #12]
   25be2:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   25be6:	2b00      	cmp	r3, #0
   25be8:	d1a0      	bne.n	25b2c <_wcsnrtombs_l+0x20>
   25bea:	9b05      	ldr	r3, [sp, #20]
   25bec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   25bf0:	681d      	ldr	r5, [r3, #0]
   25bf2:	e79f      	b.n	25b34 <_wcsnrtombs_l+0x28>
   25bf4:	4606      	mov	r6, r0
   25bf6:	218a      	movs	r1, #138	; 0x8a
   25bf8:	2200      	movs	r2, #0
   25bfa:	4630      	mov	r0, r6
   25bfc:	f8c9 1000 	str.w	r1, [r9]
   25c00:	f8c8 2000 	str.w	r2, [r8]
   25c04:	b00b      	add	sp, #44	; 0x2c
   25c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c0a:	463e      	mov	r6, r7
   25c0c:	e7be      	b.n	25b8c <_wcsnrtombs_l+0x80>
   25c0e:	4666      	mov	r6, ip
   25c10:	e7bc      	b.n	25b8c <_wcsnrtombs_l+0x80>
   25c12:	bf00      	nop

00025c14 <_wcsnrtombs_r>:
   25c14:	b510      	push	{r4, lr}
   25c16:	b084      	sub	sp, #16
   25c18:	4c05      	ldr	r4, [pc, #20]	; (25c30 <_wcsnrtombs_r+0x1c>)
   25c1a:	9806      	ldr	r0, [sp, #24]
   25c1c:	9000      	str	r0, [sp, #0]
   25c1e:	9807      	ldr	r0, [sp, #28]
   25c20:	9001      	str	r0, [sp, #4]
   25c22:	4804      	ldr	r0, [pc, #16]	; (25c34 <_wcsnrtombs_r+0x20>)
   25c24:	6800      	ldr	r0, [r0, #0]
   25c26:	9402      	str	r4, [sp, #8]
   25c28:	f7ff ff70 	bl	25b0c <_wcsnrtombs_l>
   25c2c:	b004      	add	sp, #16
   25c2e:	bd10      	pop	{r4, pc}
   25c30:	20003e40 	.word	0x20003e40
   25c34:	200043c8 	.word	0x200043c8

00025c38 <__smakebuf_r>:
   25c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c3c:	898b      	ldrh	r3, [r1, #12]
   25c3e:	460c      	mov	r4, r1
   25c40:	0799      	lsls	r1, r3, #30
   25c42:	b096      	sub	sp, #88	; 0x58
   25c44:	d508      	bpl.n	25c58 <__smakebuf_r+0x20>
   25c46:	f104 0343 	add.w	r3, r4, #67	; 0x43
   25c4a:	2201      	movs	r2, #1
   25c4c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   25c50:	6023      	str	r3, [r4, #0]
   25c52:	b016      	add	sp, #88	; 0x58
   25c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25c5c:	2900      	cmp	r1, #0
   25c5e:	4606      	mov	r6, r0
   25c60:	db25      	blt.n	25cae <__smakebuf_r+0x76>
   25c62:	466a      	mov	r2, sp
   25c64:	f000 f8ac 	bl	25dc0 <_fstat_r>
   25c68:	2800      	cmp	r0, #0
   25c6a:	db1f      	blt.n	25cac <__smakebuf_r+0x74>
   25c6c:	9d01      	ldr	r5, [sp, #4]
   25c6e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   25c72:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   25c76:	fab5 f585 	clz	r5, r5
   25c7a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   25c7e:	096d      	lsrs	r5, r5, #5
   25c80:	f44f 6700 	mov.w	r7, #2048	; 0x800
   25c84:	4641      	mov	r1, r8
   25c86:	4630      	mov	r0, r6
   25c88:	f7f7 fc90 	bl	1d5ac <_malloc_r>
   25c8c:	b1e0      	cbz	r0, 25cc8 <__smakebuf_r+0x90>
   25c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25c92:	f8c4 8014 	str.w	r8, [r4, #20]
   25c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25c9a:	6020      	str	r0, [r4, #0]
   25c9c:	6120      	str	r0, [r4, #16]
   25c9e:	81a3      	strh	r3, [r4, #12]
   25ca0:	bb35      	cbnz	r5, 25cf0 <__smakebuf_r+0xb8>
   25ca2:	433b      	orrs	r3, r7
   25ca4:	81a3      	strh	r3, [r4, #12]
   25ca6:	b016      	add	sp, #88	; 0x58
   25ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25cac:	89a3      	ldrh	r3, [r4, #12]
   25cae:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   25cb2:	d019      	beq.n	25ce8 <__smakebuf_r+0xb0>
   25cb4:	f04f 0840 	mov.w	r8, #64	; 0x40
   25cb8:	2500      	movs	r5, #0
   25cba:	4641      	mov	r1, r8
   25cbc:	4630      	mov	r0, r6
   25cbe:	462f      	mov	r7, r5
   25cc0:	f7f7 fc74 	bl	1d5ac <_malloc_r>
   25cc4:	2800      	cmp	r0, #0
   25cc6:	d1e2      	bne.n	25c8e <__smakebuf_r+0x56>
   25cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25ccc:	059a      	lsls	r2, r3, #22
   25cce:	d4c0      	bmi.n	25c52 <__smakebuf_r+0x1a>
   25cd0:	f023 0303 	bic.w	r3, r3, #3
   25cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   25cd8:	f043 0302 	orr.w	r3, r3, #2
   25cdc:	2101      	movs	r1, #1
   25cde:	e9c4 2104 	strd	r2, r1, [r4, #16]
   25ce2:	81a3      	strh	r3, [r4, #12]
   25ce4:	6022      	str	r2, [r4, #0]
   25ce6:	e7b4      	b.n	25c52 <__smakebuf_r+0x1a>
   25ce8:	f44f 6880 	mov.w	r8, #1024	; 0x400
   25cec:	462f      	mov	r7, r5
   25cee:	e7c9      	b.n	25c84 <__smakebuf_r+0x4c>
   25cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25cf4:	4630      	mov	r0, r6
   25cf6:	f000 f879 	bl	25dec <_isatty_r>
   25cfa:	b910      	cbnz	r0, 25d02 <__smakebuf_r+0xca>
   25cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25d00:	e7cf      	b.n	25ca2 <__smakebuf_r+0x6a>
   25d02:	89a3      	ldrh	r3, [r4, #12]
   25d04:	f023 0303 	bic.w	r3, r3, #3
   25d08:	f043 0301 	orr.w	r3, r3, #1
   25d0c:	b21b      	sxth	r3, r3
   25d0e:	e7c8      	b.n	25ca2 <__smakebuf_r+0x6a>

00025d10 <__swbuf_r>:
   25d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d12:	460d      	mov	r5, r1
   25d14:	4614      	mov	r4, r2
   25d16:	4606      	mov	r6, r0
   25d18:	b110      	cbz	r0, 25d20 <__swbuf_r+0x10>
   25d1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25d1c:	2b00      	cmp	r3, #0
   25d1e:	d04c      	beq.n	25dba <__swbuf_r+0xaa>
   25d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25d24:	69a3      	ldr	r3, [r4, #24]
   25d26:	60a3      	str	r3, [r4, #8]
   25d28:	0717      	lsls	r7, r2, #28
   25d2a:	b290      	uxth	r0, r2
   25d2c:	d51b      	bpl.n	25d66 <__swbuf_r+0x56>
   25d2e:	6923      	ldr	r3, [r4, #16]
   25d30:	b1cb      	cbz	r3, 25d66 <__swbuf_r+0x56>
   25d32:	b2ed      	uxtb	r5, r5
   25d34:	0481      	lsls	r1, r0, #18
   25d36:	462f      	mov	r7, r5
   25d38:	d522      	bpl.n	25d80 <__swbuf_r+0x70>
   25d3a:	6822      	ldr	r2, [r4, #0]
   25d3c:	6961      	ldr	r1, [r4, #20]
   25d3e:	1ad3      	subs	r3, r2, r3
   25d40:	4299      	cmp	r1, r3
   25d42:	dd29      	ble.n	25d98 <__swbuf_r+0x88>
   25d44:	3301      	adds	r3, #1
   25d46:	68a1      	ldr	r1, [r4, #8]
   25d48:	3901      	subs	r1, #1
   25d4a:	60a1      	str	r1, [r4, #8]
   25d4c:	1c51      	adds	r1, r2, #1
   25d4e:	6021      	str	r1, [r4, #0]
   25d50:	7015      	strb	r5, [r2, #0]
   25d52:	6962      	ldr	r2, [r4, #20]
   25d54:	429a      	cmp	r2, r3
   25d56:	d027      	beq.n	25da8 <__swbuf_r+0x98>
   25d58:	89a3      	ldrh	r3, [r4, #12]
   25d5a:	07db      	lsls	r3, r3, #31
   25d5c:	d501      	bpl.n	25d62 <__swbuf_r+0x52>
   25d5e:	2d0a      	cmp	r5, #10
   25d60:	d022      	beq.n	25da8 <__swbuf_r+0x98>
   25d62:	4638      	mov	r0, r7
   25d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25d66:	4621      	mov	r1, r4
   25d68:	4630      	mov	r0, r6
   25d6a:	f7ff fddf 	bl	2592c <__swsetup_r>
   25d6e:	bb08      	cbnz	r0, 25db4 <__swbuf_r+0xa4>
   25d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25d74:	6923      	ldr	r3, [r4, #16]
   25d76:	b290      	uxth	r0, r2
   25d78:	b2ed      	uxtb	r5, r5
   25d7a:	0481      	lsls	r1, r0, #18
   25d7c:	462f      	mov	r7, r5
   25d7e:	d4dc      	bmi.n	25d3a <__swbuf_r+0x2a>
   25d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   25d84:	81a2      	strh	r2, [r4, #12]
   25d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
   25d88:	6961      	ldr	r1, [r4, #20]
   25d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   25d8e:	6662      	str	r2, [r4, #100]	; 0x64
   25d90:	6822      	ldr	r2, [r4, #0]
   25d92:	1ad3      	subs	r3, r2, r3
   25d94:	4299      	cmp	r1, r3
   25d96:	dcd5      	bgt.n	25d44 <__swbuf_r+0x34>
   25d98:	4621      	mov	r1, r4
   25d9a:	4630      	mov	r0, r6
   25d9c:	f7fd f9f8 	bl	23190 <_fflush_r>
   25da0:	b940      	cbnz	r0, 25db4 <__swbuf_r+0xa4>
   25da2:	6822      	ldr	r2, [r4, #0]
   25da4:	2301      	movs	r3, #1
   25da6:	e7ce      	b.n	25d46 <__swbuf_r+0x36>
   25da8:	4621      	mov	r1, r4
   25daa:	4630      	mov	r0, r6
   25dac:	f7fd f9f0 	bl	23190 <_fflush_r>
   25db0:	2800      	cmp	r0, #0
   25db2:	d0d6      	beq.n	25d62 <__swbuf_r+0x52>
   25db4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   25db8:	e7d3      	b.n	25d62 <__swbuf_r+0x52>
   25dba:	f7f9 f94f 	bl	1f05c <__sinit>
   25dbe:	e7af      	b.n	25d20 <__swbuf_r+0x10>

00025dc0 <_fstat_r>:
   25dc0:	b570      	push	{r4, r5, r6, lr}
   25dc2:	460c      	mov	r4, r1
   25dc4:	4d08      	ldr	r5, [pc, #32]	; (25de8 <_fstat_r+0x28>)
   25dc6:	4603      	mov	r3, r0
   25dc8:	2600      	movs	r6, #0
   25dca:	4620      	mov	r0, r4
   25dcc:	4611      	mov	r1, r2
   25dce:	461c      	mov	r4, r3
   25dd0:	602e      	str	r6, [r5, #0]
   25dd2:	f7f2 ffd5 	bl	18d80 <_fstat>
   25dd6:	1c43      	adds	r3, r0, #1
   25dd8:	d000      	beq.n	25ddc <_fstat_r+0x1c>
   25dda:	bd70      	pop	{r4, r5, r6, pc}
   25ddc:	682b      	ldr	r3, [r5, #0]
   25dde:	2b00      	cmp	r3, #0
   25de0:	d0fb      	beq.n	25dda <_fstat_r+0x1a>
   25de2:	6023      	str	r3, [r4, #0]
   25de4:	bd70      	pop	{r4, r5, r6, pc}
   25de6:	bf00      	nop
   25de8:	20005be4 	.word	0x20005be4

00025dec <_isatty_r>:
   25dec:	b538      	push	{r3, r4, r5, lr}
   25dee:	4d07      	ldr	r5, [pc, #28]	; (25e0c <_isatty_r+0x20>)
   25df0:	2200      	movs	r2, #0
   25df2:	4604      	mov	r4, r0
   25df4:	4608      	mov	r0, r1
   25df6:	602a      	str	r2, [r5, #0]
   25df8:	f7f2 ffc8 	bl	18d8c <_isatty>
   25dfc:	1c43      	adds	r3, r0, #1
   25dfe:	d000      	beq.n	25e02 <_isatty_r+0x16>
   25e00:	bd38      	pop	{r3, r4, r5, pc}
   25e02:	682b      	ldr	r3, [r5, #0]
   25e04:	2b00      	cmp	r3, #0
   25e06:	d0fb      	beq.n	25e00 <_isatty_r+0x14>
   25e08:	6023      	str	r3, [r4, #0]
   25e0a:	bd38      	pop	{r3, r4, r5, pc}
   25e0c:	20005be4 	.word	0x20005be4

00025e10 <__aeabi_d2lz>:
   25e10:	b508      	push	{r3, lr}
   25e12:	4602      	mov	r2, r0
   25e14:	460b      	mov	r3, r1
   25e16:	ec43 2b17 	vmov	d7, r2, r3
   25e1a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   25e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25e22:	d403      	bmi.n	25e2c <__aeabi_d2lz+0x1c>
   25e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25e28:	f000 b80a 	b.w	25e40 <__aeabi_d2ulz>
   25e2c:	eeb1 7b47 	vneg.f64	d7, d7
   25e30:	ec51 0b17 	vmov	r0, r1, d7
   25e34:	f000 f804 	bl	25e40 <__aeabi_d2ulz>
   25e38:	4240      	negs	r0, r0
   25e3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25e3e:	bd08      	pop	{r3, pc}

00025e40 <__aeabi_d2ulz>:
   25e40:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 25e70 <__aeabi_d2ulz+0x30>
   25e44:	ec41 0b17 	vmov	d7, r0, r1
   25e48:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 25e78 <__aeabi_d2ulz+0x38>
   25e4c:	ee27 6b06 	vmul.f64	d6, d7, d6
   25e50:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   25e54:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   25e58:	eea4 7b45 	vfms.f64	d7, d4, d5
   25e5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   25e60:	ee16 1a10 	vmov	r1, s12
   25e64:	ee17 0a90 	vmov	r0, s15
   25e68:	4770      	bx	lr
   25e6a:	bf00      	nop
   25e6c:	f3af 8000 	nop.w
   25e70:	00000000 	.word	0x00000000
   25e74:	3df00000 	.word	0x3df00000
   25e78:	00000000 	.word	0x00000000
   25e7c:	41f00000 	.word	0x41f00000

00025e80 <___reboot_Teensyduino__veneer>:
   25e80:	f85f f000 	ldr.w	pc, [pc]	; 25e84 <___reboot_Teensyduino__veneer+0x4>
   25e84:	60001bd5 	.word	0x60001bd5

00025e88 <___ZN7TwoWire5beginEv_veneer>:
   25e88:	f85f f000 	ldr.w	pc, [pc]	; 25e8c <___ZN7TwoWire5beginEv_veneer+0x4>
   25e8c:	60001785 	.word	0x60001785

00025e90 <___init_veneer>:
   25e90:	f85f f000 	ldr.w	pc, [pc]	; 25e94 <___init_veneer+0x4>
   25e94:	60001c29 	.word	0x60001c29
	...

Disassembly of section .fini:

00025ea0 <_fini>:
   25ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ea2:	bf00      	nop
